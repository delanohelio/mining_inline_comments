{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODI4NTEw", "number": 4716, "title": "Issue 4670: SegmentContainer in recovery mode", "bodyText": "Change log description\n\nA way to start segment container in recovery mode(debug segment container) to create given segment(s).\nWrapper class to TableStore & StreamSegmentStore to track the segments being created or deleted. This helps in integration tests to wait for segments to be flushed to storage(keep polling for segment's length in the storage to ensure that it is fully flushed).\nUnder ContainerRecoveryTestUtils: Lists all segments from storage using the already supported listSegments() API. Create all segments in the list using the debug segment container instance\n\nPurpose of the change\nFixes #4670\nWhat the code does\nAdded DebugStreamSegmentContainer implementing StreamSegmentContainer to expose an API for createStreamSegment to accept length and isSealed status from the user.\nTests included to verify:\n\nCreate segment using debug segment container\nListing segments from a long term storage instance and creating them using debug segment container\nUses a segment store instance to create some segments. List those segments and then just using the long term storage, recreate those segments with a debug segment store instance\nIntegration tests:\n\nStarting a pravega service, then write some events and then clear tier1 and then restoring the service and finally read those events(Uses debug segment container to recreate the segments from long term storage)\n\n\n\nHow to verify it\nBuild shall pass.", "createdAt": "2020-04-21T18:20:10Z", "url": "https://github.com/pravega/pravega/pull/4716", "merged": true, "mergeCommit": {"oid": "7b2f96b759ca39d933706674c53af9e646aa48b0"}, "closed": true, "closedAt": "2020-08-21T21:46:41Z", "author": {"login": "ManishKumarKeshri"}, "timelineItems": {"totalCount": 129, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7v-ClgH2gAyNDA2ODI4NTEwOjMzODdmNWIyOTdjNDcxYzNhMTlhMDBiZmM4NjE1YmFkMzYzYjU5ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBK05JgFqTQ3MjgwMDM4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3387f5b297c471c3a19a00bfc8615bad363b59f6", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/3387f5b297c471c3a19a00bfc8615bad363b59f6", "committedDate": "2020-08-05T00:20:55Z", "message": "Small changes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/c05a63a0c5e5863c603b08af1cf6e3dcd4c88766", "committedDate": "2020-08-05T05:10:29Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDEzMTU1", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-462013155", "createdAt": "2020-08-05T20:49:44Z", "commit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo0OTo0NFrOG8aGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo0OTo0NFrOG8aGXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTM1OQ==", "bodyText": "Is it possible to define this method as empty block in the base class itself so that we don't have to keep overriding in derived classes?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r465995359", "createdAt": "2020-08-05T20:49:44Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteReadTests.java", "diffHunk": "@@ -65,4 +65,12 @@ protected ServiceBuilder createBuilder(ServiceBuilderConfig.Builder builderConfi\n                              .withStorageFactory(setup -> this.storageFactory)\n                              .withDataLogFactory(setup -> this.durableDataLogFactory);\n     }\n+\n+    /**\n+     * This method intentionally left blank as it's out of concern for No-Op Storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDE0ODcz", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-462014873", "createdAt": "2020-08-05T20:52:34Z", "commit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1MjozNFrOG8aL_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTozNzoyN1rOG8bhtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5Njc5OA==", "bodyText": "Is it possible for this method to end up deleting the actual data in LTS?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r465996798", "createdAt": "2020-08-05T20:52:34Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainer : debugStreamSegmentContainers.entrySet()) {\n+\n+            ContainerTableExtension ext = debugStreamSegmentContainer.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(debugStreamSegmentContainer.getKey()),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<String> metadataSegments = new HashSet<>();\n+            it.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainer.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> it = storage.listSegments();\n+        if (it == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            log.info(\"Segment to be recovered = {}\", curr.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(curr.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), curr)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);\n+                metadataSegmentsSetEntry.getKey().deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates the given segment with the given DebugStreamSegmentContainer instance.\n+     */\n+    public static class SegmentRecovery implements Runnable {\n+        private final DebugStreamSegmentContainer container;\n+        private final SegmentProperties storageSegment;\n+\n+        public SegmentRecovery(DebugStreamSegmentContainer container, SegmentProperties segment) {\n+            Preconditions.checkNotNull(container);\n+            Preconditions.checkNotNull(segment);\n+            this.container = container;\n+            this.storageSegment = segment;\n+        }\n+\n+        @Override\n+        public void run() {\n+            long segmentLength = storageSegment.getLength();\n+            boolean isSealed = storageSegment.isSealed();\n+            String segmentName = storageSegment.getName();\n+\n+            log.info(\"Recovering segment with name = {}, length = {}, sealed status = {}.\", segmentName, segmentLength, isSealed);\n+            /*\n+                1. segment exists in both metadata and storage, re-create it\n+                2. segment only in metadata, delete\n+                3. segment only in storage, re-create it\n+             */\n+            val streamSegmentInfo = container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                    .thenAccept(e -> {\n+                        if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                            container.deleteStreamSegment(segmentName, TIMEOUT).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NzY3MQ==", "bodyText": "container.deleteStreamSegment(segmentName followed by container.registerExistingSegment(segmentName looks odd .\nMay be rename registerExistingSegment ?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r465997671", "createdAt": "2020-08-05T20:54:19Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainer : debugStreamSegmentContainers.entrySet()) {\n+\n+            ContainerTableExtension ext = debugStreamSegmentContainer.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(debugStreamSegmentContainer.getKey()),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<String> metadataSegments = new HashSet<>();\n+            it.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainer.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> it = storage.listSegments();\n+        if (it == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            log.info(\"Segment to be recovered = {}\", curr.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(curr.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), curr)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);\n+                metadataSegmentsSetEntry.getKey().deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates the given segment with the given DebugStreamSegmentContainer instance.\n+     */\n+    public static class SegmentRecovery implements Runnable {\n+        private final DebugStreamSegmentContainer container;\n+        private final SegmentProperties storageSegment;\n+\n+        public SegmentRecovery(DebugStreamSegmentContainer container, SegmentProperties segment) {\n+            Preconditions.checkNotNull(container);\n+            Preconditions.checkNotNull(segment);\n+            this.container = container;\n+            this.storageSegment = segment;\n+        }\n+\n+        @Override\n+        public void run() {\n+            long segmentLength = storageSegment.getLength();\n+            boolean isSealed = storageSegment.isSealed();\n+            String segmentName = storageSegment.getName();\n+\n+            log.info(\"Recovering segment with name = {}, length = {}, sealed status = {}.\", segmentName, segmentLength, isSealed);\n+            /*\n+                1. segment exists in both metadata and storage, re-create it\n+                2. segment only in metadata, delete\n+                3. segment only in storage, re-create it\n+             */\n+            val streamSegmentInfo = container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                    .thenAccept(e -> {\n+                        if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                            container.deleteStreamSegment(segmentName, TIMEOUT).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5Njc5OA=="}, "originalCommit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNTM2Ng==", "bodyText": "This functionality needs to live in product code and must be accessible to the admin tool. I suggest moving it in DebugStreamSegmentContainer.java", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r466015366", "createdAt": "2020-08-05T21:30:02Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxODc0Mg==", "bodyText": "To elaborate -\nWe want to just update the metadata and not touch the actual segment on LTS. (Except for metadata segment, all other segments should be left alone.)\nI fear that calling container.deleteStreamSegment like this will actually trigger request to delete the segment from LTS (it will enqueue operation to delete in BK ledger). Once the new recovered instance restarts then it will reprocess all the enqueued operations and may end up  actually deleting the data from LTS.\nWhat we need here is ability to just delete the metadata about the segment and re-create or update it.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r466018742", "createdAt": "2020-08-05T21:37:27Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainer : debugStreamSegmentContainers.entrySet()) {\n+\n+            ContainerTableExtension ext = debugStreamSegmentContainer.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(debugStreamSegmentContainer.getKey()),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<String> metadataSegments = new HashSet<>();\n+            it.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainer.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> it = storage.listSegments();\n+        if (it == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            log.info(\"Segment to be recovered = {}\", curr.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(curr.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), curr)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);\n+                metadataSegmentsSetEntry.getKey().deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates the given segment with the given DebugStreamSegmentContainer instance.\n+     */\n+    public static class SegmentRecovery implements Runnable {\n+        private final DebugStreamSegmentContainer container;\n+        private final SegmentProperties storageSegment;\n+\n+        public SegmentRecovery(DebugStreamSegmentContainer container, SegmentProperties segment) {\n+            Preconditions.checkNotNull(container);\n+            Preconditions.checkNotNull(segment);\n+            this.container = container;\n+            this.storageSegment = segment;\n+        }\n+\n+        @Override\n+        public void run() {\n+            long segmentLength = storageSegment.getLength();\n+            boolean isSealed = storageSegment.isSealed();\n+            String segmentName = storageSegment.getName();\n+\n+            log.info(\"Recovering segment with name = {}, length = {}, sealed status = {}.\", segmentName, segmentLength, isSealed);\n+            /*\n+                1. segment exists in both metadata and storage, re-create it\n+                2. segment only in metadata, delete\n+                3. segment only in storage, re-create it\n+             */\n+            val streamSegmentInfo = container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                    .thenAccept(e -> {\n+                        if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                            container.deleteStreamSegment(segmentName, TIMEOUT).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5Njc5OA=="}, "originalCommit": {"oid": "c05a63a0c5e5863c603b08af1cf6e3dcd4c88766"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f038d19b312e093ca946bd3092dd9f7166461563", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/f038d19b312e093ca946bd3092dd9f7166461563", "committedDate": "2020-08-06T06:23:40Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29df39132887c50ffca5cb3a316f24280f9c1e7e", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/29df39132887c50ffca5cb3a316f24280f9c1e7e", "committedDate": "2020-08-06T07:56:27Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "698312d3567dfe119befa7b733d5a23e60293d9b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/698312d3567dfe119befa7b733d5a23e60293d9b", "committedDate": "2020-08-07T21:40:39Z", "message": "Using deleteSegment from metadataStore.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/644a58c4d832e2bfcc8bace1025eff68f12f7493", "committedDate": "2020-08-12T02:12:32Z", "message": "Removing attribute segment from recovery.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjkwNDU4", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-466290458", "createdAt": "2020-08-12T21:28:43Z", "commit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyODo0M1rOG_zg5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo1OTozNVrOG_0UlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzQ3Ng==", "bodyText": "The more I think about it, the more I do not like this name. This has little to nothing to do with \"Debugging\" so DebugSegmentContainer doesn't sound too descriptive.\nAt the same time I do not have any better ideas at this moment. But something to keep in mind as we make progress on this task.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469557476", "createdAt": "2020-08-12T21:28:43Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/DebugSegmentContainer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Defines debug segment container for stream segments.\n+ */\n+public interface DebugSegmentContainer extends SegmentContainer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODE5Nw==", "bodyText": "Make this a proper Javadoc. Also, \"Used by XYZ\" is not really appropriate as a class should not be concerned with who is using it.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469558197", "createdAt": "2020-08-12T21:30:17Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/MetadataStore.java", "diffHunk": "@@ -704,6 +704,19 @@ static SegmentInfo newSegment(String name, Collection<AttributeUpdate> attribute\n                     .build();\n         }\n \n+        // Used by DebugStreamSegmentContainer to get SegmentInfo while registering a segment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODgxNg==", "bodyText": "Does this class need to be public?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469558816", "createdAt": "2020-08-12T21:31:38Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(currentSegment.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), currentSegment)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);\n+                metadataSegmentsSetEntry.getKey().deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates the given segment with the given DebugStreamSegmentContainer instance.\n+     */\n+    public static class SegmentRecovery implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTAyMw==", "bodyText": "Rename this to ContainerRecoveryUtils", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469559023", "createdAt": "2020-08-12T21:32:08Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTcyNA==", "bodyText": "This description is misleading.\nYou need to begin with a sentence stating what this method does.\nThen you clearly state what happens when this method completes successfully and what happens if it fails.\nThen you explain the process you follow.\nYou need to clearly document all exceptions that can be thrown out of it.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469559724", "createdAt": "2020-08-12T21:33:46Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MDE3Ng==", "bodyText": "A {@link Storage} instance that will be used to list segments from.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469560176", "createdAt": "2020-08-12T21:34:45Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MDQzNw==", "bodyText": "A Map of Container Ids to {@link DebugStreamSegmentContainer} instances representing the Containers that will be recovered.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469560437", "createdAt": "2020-08-12T21:35:21Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MDY5Mg==", "bodyText": "Validate all arguments prior to beginning. Null checks. Are all containers present in your hash map?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469560692", "createdAt": "2020-08-12T21:35:54Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MzE4Mw==", "bodyText": "Please reformat this code to be more readable.\n\nFeel free to use val when declaring types with long names (for (val debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()))\nMove IteratorArgs... into some variable outside the loop and reuse it.\nPlease do not chain all method calls in one big line or wrapped-around line. If you choose to do chaining (no problem there), do it on a new line and let your IDE auto-format the proper placement of the the code. Look for other cases in the codebase where this is done.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469563183", "createdAt": "2020-08-12T21:41:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MzQxMA==", "bodyText": "Why do you key the Map on the DebugStreamSegmentContainer? Can't you just do it on the id of the container?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469563410", "createdAt": "2020-08-12T21:42:03Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc3Mg==", "bodyText": "This is not what a null segmentIterator means.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469563772", "createdAt": "2020-08-12T21:42:54Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MzkyOA==", "bodyText": "And you should throw an exception in this case, not return (returning with no exception indicates a successful completion).", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469563928", "createdAt": "2020-08-12T21:43:19Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc3Mg=="}, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NDE4MQ==", "bodyText": "Registering Segment: {}", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469564181", "createdAt": "2020-08-12T21:43:52Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NDc1NQ==", "bodyText": "This is going to create A LOT of concurrent threads, possibly taking over your entire thread pool.\nWhy do you do each segment individually in a thread?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469564755", "createdAt": "2020-08-12T21:45:13Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(currentSegment.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), currentSegment)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NDk0Ng==", "bodyText": "Please be consistent about how you log it. Is it storage or long term storage. I prefer the former.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469564946", "createdAt": "2020-08-12T21:45:39Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(currentSegment.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), currentSegment)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NTI4Nw==", "bodyText": "Actually this is superfluous. The SegmentRecovery logs it too.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469565287", "createdAt": "2020-08-12T21:46:28Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NDE4MQ=="}, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NTQ2OA==", "bodyText": "Registering: {}, {}, {}.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469565468", "createdAt": "2020-08-12T21:46:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(currentSegment.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), currentSegment)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);\n+                metadataSegmentsSetEntry.getKey().deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates the given segment with the given DebugStreamSegmentContainer instance.\n+     */\n+    public static class SegmentRecovery implements Runnable {\n+        private final DebugStreamSegmentContainer container;\n+        private final SegmentProperties storageSegment;\n+\n+        public SegmentRecovery(DebugStreamSegmentContainer container, SegmentProperties segment) {\n+            Preconditions.checkNotNull(container);\n+            Preconditions.checkNotNull(segment);\n+            this.container = container;\n+            this.storageSegment = segment;\n+        }\n+\n+        @Override\n+        public void run() {\n+            long segmentLength = storageSegment.getLength();\n+            boolean isSealed = storageSegment.isSealed();\n+            String segmentName = storageSegment.getName();\n+\n+            log.info(\"Recovering segment with name = {}, length = {}, sealed status = {}.\", segmentName, segmentLength, isSealed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NjQyNg==", "bodyText": "You are effectively using 2 threads for this operation. One thread is the one that SegmentRecovery is running on and the other is whatever this call (and the one above) is using (this is what happens when you invoke join).\nPlease rework this entire class (the outer one) to not have a single join or get. This means you will be using CompletableFuture joins (thenCompose, thenAccept, etc). This also means your main method in this class will return a CompletableFuture.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469566426", "createdAt": "2020-08-12T21:49:04Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(currentSegment.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), currentSegment)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);\n+                metadataSegmentsSetEntry.getKey().deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates the given segment with the given DebugStreamSegmentContainer instance.\n+     */\n+    public static class SegmentRecovery implements Runnable {\n+        private final DebugStreamSegmentContainer container;\n+        private final SegmentProperties storageSegment;\n+\n+        public SegmentRecovery(DebugStreamSegmentContainer container, SegmentProperties segment) {\n+            Preconditions.checkNotNull(container);\n+            Preconditions.checkNotNull(segment);\n+            this.container = container;\n+            this.storageSegment = segment;\n+        }\n+\n+        @Override\n+        public void run() {\n+            long segmentLength = storageSegment.getLength();\n+            boolean isSealed = storageSegment.isSealed();\n+            String segmentName = storageSegment.getName();\n+\n+            log.info(\"Recovering segment with name = {}, length = {}, sealed status = {}.\", segmentName, segmentLength, isSealed);\n+            /*\n+                1. segment exists in both metadata and storage, re-create it\n+                2. segment only in metadata, delete\n+                3. segment only in storage, re-create it\n+             */\n+            val streamSegmentInfo = container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                    .thenAccept(e -> {\n+                        if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                            container.metadataStore.deleteSegment(segmentName, TIMEOUT).join();\n+                            container.registerSegment(segmentName, segmentLength, isSealed).join();\n+                        }\n+                    });\n+\n+            Futures.exceptionallyComposeExpecting(streamSegmentInfo, ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NjY3Mw==", "bodyText": "Do not use join", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469566673", "createdAt": "2020-08-12T21:49:43Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentsRecovery.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery.\n+ */\n+@Slf4j\n+public class SegmentsRecovery {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * Lists all segments from a given long term storage and then re-creates them using their corresponding debug segment\n+     * container.\n+     * @param storage                           Long term storage.\n+     * @param debugStreamSegmentContainers      A hashmap which has debug segment container instances to create segments.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws                                  Exception in case of exception during the execution.\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws Exception {\n+        log.info(\"Recovery started for all containers...\");\n+\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<DebugStreamSegmentContainer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        for (Map.Entry<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            ContainerTableExtension tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).get(TIMEOUT.toMillis(),\n+                    TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k -> metadataSegments.addAll(k.getEntries().stream().map(entry -> entry.getKey().toString())\n+                    .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getValue(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        if (segmentIterator == null) {\n+            log.info(\"No segments found in the long term storage.\");\n+            return;\n+        }\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            log.info(\"Segment to be recovered = {}\", currentSegment.getName());\n+            metadataSegmentsByContainer.get(debugStreamSegmentContainers.get(containerId)).remove(currentSegment.getName());\n+            futures.add(CompletableFuture.runAsync(new SegmentRecovery(debugStreamSegmentContainers.get(containerId), currentSegment)));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (Map.Entry<DebugStreamSegmentContainer, Set<String>> metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in storage\", segmentName);\n+                metadataSegmentsSetEntry.getKey().deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates the given segment with the given DebugStreamSegmentContainer instance.\n+     */\n+    public static class SegmentRecovery implements Runnable {\n+        private final DebugStreamSegmentContainer container;\n+        private final SegmentProperties storageSegment;\n+\n+        public SegmentRecovery(DebugStreamSegmentContainer container, SegmentProperties segment) {\n+            Preconditions.checkNotNull(container);\n+            Preconditions.checkNotNull(segment);\n+            this.container = container;\n+            this.storageSegment = segment;\n+        }\n+\n+        @Override\n+        public void run() {\n+            long segmentLength = storageSegment.getLength();\n+            boolean isSealed = storageSegment.isSealed();\n+            String segmentName = storageSegment.getName();\n+\n+            log.info(\"Recovering segment with name = {}, length = {}, sealed status = {}.\", segmentName, segmentLength, isSealed);\n+            /*\n+                1. segment exists in both metadata and storage, re-create it\n+                2. segment only in metadata, delete\n+                3. segment only in storage, re-create it\n+             */\n+            val streamSegmentInfo = container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                    .thenAccept(e -> {\n+                        if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                            container.metadataStore.deleteSegment(segmentName, TIMEOUT).join();\n+                            container.registerSegment(segmentName, segmentLength, isSealed).join();\n+                        }\n+                    });\n+\n+            Futures.exceptionallyComposeExpecting(streamSegmentInfo, ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,\n+                    () -> container.registerSegment(segmentName, segmentLength, isSealed)).join();\n+        }\n+    }\n+\n+    /**\n+     * Deletes container-metadata segment and attribute segment of the container with given container Id.\n+     * @param storage       Long term storage to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataSegments(Storage storage, int containerId) {\n+        String metadataSegmentName = NameUtils.getMetadataSegmentName(containerId);\n+        deleteSegment(storage, metadataSegmentName);\n+        String attributeSegmentName = NameUtils.getAttributeSegmentName(metadataSegmentName);\n+        deleteSegment(storage, attributeSegmentName);\n+    }\n+\n+    /**\n+     * Deletes the segment with given segment name from the given long term storage.\n+     * @param storage       Long term storage to delete the segment from.\n+     * @param segmentName   Name of the segment to be deleted.\n+     */\n+    private static void deleteSegment(Storage storage, String segmentName) {\n+        try {\n+            SegmentHandle segmentHandle = storage.openWrite(segmentName).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NzE1Mg==", "bodyText": "return createStorageFactory()", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469567152", "createdAt": "2020-08-12T21:50:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/ServiceBuilder.java", "diffHunk": "@@ -241,6 +241,14 @@ public void initialize() throws DurableDataLogException {\n         getSingleton(this.containerManager, this.segmentContainerManagerCreator).initialize();\n     }\n \n+    /**\n+     * To get the storageFactory after a ServiceBuilder has been initialized.\n+     * @return StorageFactory instance used to initialize ServiceBuilder.\n+     */\n+    public StorageFactory getStorageFactory() {\n+        return this.storageFactory.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NzU4Nw==", "bodyText": "SegmentStoreWithSegmentTracker", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469567587", "createdAt": "2020-08-12T21:51:54Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentsTracker.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.segmentstore.contracts.AttributeUpdate;\n+import io.pravega.segmentstore.contracts.MergeStreamSegmentResult;\n+import io.pravega.segmentstore.contracts.ReadResult;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A wrapper class to StreamSegmentStore and TableStore to track the segments being created or deleted. The list of segments\n+ * obtained during this process is used in RestoreBackUpDataRecoveryTest to wait for segments to be flushed to the long term storage.\n+ */\n+public class SegmentsTracker implements StreamSegmentStore, TableStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NzkxOA==", "bodyText": "Delete this. You can use executorService()", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469567918", "createdAt": "2020-08-12T21:52:50Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+@Slf4j\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 60 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final int THREAD_POOL_COUNT = 30;\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2ODAyOQ==", "bodyText": "You do not need this. Remove these 2 methods.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469568029", "createdAt": "2020-08-12T21:53:09Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+@Slf4j\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 60 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final int THREAD_POOL_COUNT = 30;\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService;\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    @Before\n+    public void setUp() {\n+        this.executorService = executorService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2ODM3NA==", "bodyText": "Isn't there a RANDOM.nextBoolean()?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469568374", "createdAt": "2020-08-12T21:53:59Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+@Slf4j\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 60 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final int THREAD_POOL_COUNT = 30;\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService;\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    @Before\n+    public void setUp() {\n+        this.executorService = executorService();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        this.executorService.shutdown();\n+    }\n+\n+    protected int getThreadPoolSize() {\n+        return THREAD_POOL_COUNT;\n+    }\n+\n+    /**\n+     * It tests the ability to register an existing segment(segment existing only in Long-Term Storage) using debug\n+     * segment container. Method registerSegment in {@link DebugStreamSegmentContainer} is tested here.\n+     * The test starts a debug segment container and creates some segments using it and then verifies if the segments\n+     * were created successfully.\n+     */\n+    @Test\n+    public void testRegisterExistingSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext(executorService);\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+        log.info(\"Started debug segment container.\");\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.registerSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        // Creates all the segments.\n+        Futures.allOf(futures).join();\n+        log.info(\"Created the segments using debug segment container.\");\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. Lists the segments from the storage and and then recreates them using\n+     * debug segment containers. Before re-creating(or registering), the segments are mapped to their respective debug\n+     * segment container. Once registered, segment's properties are matched to verify if the test was successful or not.\n+     */\n+    @Test\n+    public void testEndToEnd() throws Exception {\n+        // Segments are mapped to four different containers.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+        log.info(\"Created a storage instance\");\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentByContainers.put(containerId, segmentsList);\n+            }\n+            segmentByContainers.get(containerId).add(segmentName);\n+\n+            // Create segments, write data and randomly seal some of them.\n+            val wh1 = s.create(segmentName);\n+            // Write data.\n+            s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+            if (RANDOM.nextInt(2) == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2OTQ0OQ==", "bodyText": "testSegmentRestoration or similar. Just do not call it endToEndDebugSegmentContainer since it tells a reader nothing about what it's doing. Same with the java doc.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469569449", "createdAt": "2020-08-12T21:56:29Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -145,7 +176,78 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2OTUwOA==", "bodyText": "You do not need to hold this in a variable.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469569508", "createdAt": "2020-08-12T21:56:39Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -145,7 +176,78 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {\n+        ScheduledExecutorService executorService = executorService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MDA5Mw==", "bodyText": "Attribute Segment", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469570093", "createdAt": "2020-08-12T21:58:03Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -190,6 +190,16 @@ public static String extractPrimaryStreamSegmentName(String streamSegmentName) {\n         return streamSegmentName.substring(0, endOfStreamNamePos);\n     }\n \n+    /**\n+     * Checks whether the given name is an attribute Segment or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MDEzMQ==", "bodyText": "There are several places in this file where this can be used. Please find them and update them to make use of your new method.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469570131", "createdAt": "2020-08-12T21:58:06Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -190,6 +190,16 @@ public static String extractPrimaryStreamSegmentName(String streamSegmentName) {\n         return streamSegmentName.substring(0, endOfStreamNamePos);\n     }\n \n+    /**\n+     * Checks whether the given name is an attribute Segment or not.\n+     *\n+     * @param segmentName   The name of the segment.\n+     * @return              True if the segment is an attribute Segment, false otherwise.\n+     */\n+    public static boolean isAttributeSegment(String segmentName) {\n+        return segmentName.endsWith(ATTRIBUTE_SUFFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MDM4MQ==", "bodyText": "Should we make this with more than just 1 container?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469570381", "createdAt": "2020-08-12T21:58:49Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,563 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.connection.impl.ConnectionFactory;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.containers.SegmentsRecovery;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.SegmentsTracker;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainerTests;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ * What test does, step by step:\n+ * 1. Starts Pravega locally with just one segment container.\n+ * 2. Writes 300 events to two different segments.\n+ * 3. Waits for all segments created to be flushed to the long term storage.\n+ * 4. Shuts down the controller, segment store and bookeeper/zookeeper.\n+ * 5. Deletes container metadata segment and its attribute segment from the old LTS.\n+ * 5. Starts debug segment container using a new bookeeper/zookeeper and the old LTS.\n+ * 6. Re-creates the container metadata segment in Tier1 and let's it flushed to the LTS.\n+ * 7. Starts segment store and controller.\n+ * 8. Reads all 600 events again.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(100 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644a58c4d832e2bfcc8bace1025eff68f12f7493"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MDcwOQ==", "bodyText": "So then why do you still have a list of ports?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r469570709", "createdAt": "2020-08-12T21:59:35Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDI2OQ=="}, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 205}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b8573ebc20c33902426a5f4c4b3c5e90a384e64", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/7b8573ebc20c33902426a5f4c4b3c5e90a384e64", "committedDate": "2020-08-14T06:05:39Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a3c1d7724304638ab5fd1eb3b3325f4c672131", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/29a3c1d7724304638ab5fd1eb3b3325f4c672131", "committedDate": "2020-08-14T06:52:45Z", "message": "Updating deleteSegment.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31f84c39ce33ca6d23aa1e3a123e4b83de618cbd", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/31f84c39ce33ca6d23aa1e3a123e4b83de618cbd", "committedDate": "2020-08-14T07:07:12Z", "message": "Small changes in Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/883da1068638d9dae5e87aea87c92ade5260e15a", "committedDate": "2020-08-14T15:27:39Z", "message": "Minor changes in Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODU5MDcw", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-467859070", "createdAt": "2020-08-14T20:32:47Z", "commit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDozMjo0N1rOHBCi8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMToyNjo1MFrOHBDx8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MjMzOA==", "bodyText": "What is this map holding ?\nmetadataSegmentsByContainer The name seems confusing.\nSomething like existingSegmetsMap (or similar) will convey the intent better.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470852338", "createdAt": "2020-08-14T20:32:47Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<Integer, Set<String>> metadataSegmentsByContainer = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MjU5Ng==", "bodyText": "May be extract this into a method", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470852596", "createdAt": "2020-08-14T20:33:29Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<Integer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+        for (val debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            Preconditions.checkNotNull(debugStreamSegmentContainerEntry.getValue());\n+            val tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getKey(), metadataSegments);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MzAzNg==", "bodyText": "May be\nfor (val currentSegment : ...) { \n....\n}", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470853036", "createdAt": "2020-08-14T20:34:37Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<Integer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+        for (val debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            Preconditions.checkNotNull(debugStreamSegmentContainerEntry.getValue());\n+            val tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getKey(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1NTg0Nw==", "bodyText": "Do you have test that tests exception thrown from here ?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470855847", "createdAt": "2020-08-14T20:42:18Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<Integer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+        for (val debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            Preconditions.checkNotNull(debugStreamSegmentContainerEntry.getValue());\n+            val tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getKey(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            metadataSegmentsByContainer.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (val metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                debugStreamSegmentContainers.get(metadataSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1NjUzMw==", "bodyText": "to avoid confusion please rename it to deleteSegmentFromStorage.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470856533", "createdAt": "2020-08-14T20:44:14Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<Integer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+        for (val debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            Preconditions.checkNotNull(debugStreamSegmentContainerEntry.getValue());\n+            val tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getKey(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            metadataSegmentsByContainer.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (val metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                debugStreamSegmentContainers.get(metadataSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));\n+                            }\n+                        }), ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,\n+                () -> container.registerSegment(segmentName, segmentLength, isSealed));\n+    }\n+\n+    /**\n+     * Deletes container metadata segment and its Attribute segment from the {@link Storage} for the given container Id.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataAndAttributeSegments(Storage storage, int containerId) {\n+        Preconditions.checkNotNull(storage);\n+        String metadataSegmentName = NameUtils.getMetadataSegmentName(containerId);\n+        String attributeSegmentName = NameUtils.getAttributeSegmentName(metadataSegmentName);\n+        deleteSegment(storage, metadataSegmentName);\n+        deleteSegment(storage, attributeSegmentName);\n+    }\n+\n+    /**\n+     * Deletes the segment with given name from the given {@link Storage} instance.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param segmentName   Name of the segment to be deleted.\n+     */\n+    private static void deleteSegment(Storage storage, String segmentName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1Nzc5Nw==", "bodyText": "java doc would be helpful here. Someone not familiar with it may not understand what this is for/what it does.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470857797", "createdAt": "2020-08-14T20:47:42Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/MetadataStore.java", "diffHunk": "@@ -704,6 +704,18 @@ static SegmentInfo newSegment(String name, Collection<AttributeUpdate> attribute\n                     .build();\n         }\n \n+        static ArrayView recoveredSegment(String streamSegmentName, long length, boolean isSealed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1ODUyNA==", "bodyText": "Seems like nothing really changed in this file.\nPlease revert the irrelevant change (or  just another make change to match exactly how it was before.)", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470858524", "createdAt": "2020-08-14T20:49:36Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -98,13 +98,13 @@\n     private static final RetryAndThrowConditionally CACHE_ATTRIBUTES_RETRY = Retry.withExpBackoff(50, 2, 10, 1000)\n             .retryWhen(ex -> ex instanceof BadAttributeUpdateException);\n     protected final StreamSegmentContainerMetadata metadata;\n+    protected final MetadataStore metadataStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2MDg2Mg==", "bodyText": "Nit: missing javadoc", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470860862", "createdAt": "2020-08-14T20:55:29Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreWithSegmentTracker.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.segmentstore.contracts.AttributeUpdate;\n+import io.pravega.segmentstore.contracts.MergeStreamSegmentResult;\n+import io.pravega.segmentstore.contracts.ReadResult;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A wrapper class to StreamSegmentStore and TableStore to track the segments being created or deleted. The list of segments\n+ * obtained during this process is used in RestoreBackUpDataRecoveryTest to wait for segments to be flushed to the long term storage.\n+ */\n+public class SegmentStoreWithSegmentTracker implements StreamSegmentStore, TableStore {\n+    private final StreamSegmentStore streamSegmentStore;\n+    private final TableStore tableStore;\n+\n+    @Getter(AccessLevel.PUBLIC)\n+    private final ConcurrentHashMap<String, Boolean> segments;\n+\n+    public SegmentStoreWithSegmentTracker(StreamSegmentStore streamSegmentStore, TableStore tableStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3MDI1Ng==", "bodyText": "You don't need this method , why not just call createStorageFactory directly ?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470870256", "createdAt": "2020-08-14T21:20:08Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/ServiceBuilder.java", "diffHunk": "@@ -241,6 +241,14 @@ public void initialize() throws DurableDataLogException {\n         getSingleton(this.containerManager, this.segmentContainerManagerCreator).initialize();\n     }\n \n+    /**\n+     * To get the storageFactory after a ServiceBuilder has been initialized.\n+     * @return StorageFactory instance used to initialize ServiceBuilder.\n+     */\n+    public StorageFactory getStorageFactory() {\n+        return createStorageFactory();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3MDc4NQ==", "bodyText": "This method should return CompletableFuture.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470870785", "createdAt": "2020-08-14T21:21:39Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<Integer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+        for (val debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            Preconditions.checkNotNull(debugStreamSegmentContainerEntry.getValue());\n+            val tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getKey(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            metadataSegmentsByContainer.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (val metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                debugStreamSegmentContainers.get(metadataSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));\n+                            }\n+                        }), ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,\n+                () -> container.registerSegment(segmentName, segmentLength, isSealed));\n+    }\n+\n+    /**\n+     * Deletes container metadata segment and its Attribute segment from the {@link Storage} for the given container Id.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataAndAttributeSegments(Storage storage, int containerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3MDg1Nw==", "bodyText": "This method should return CompletableFuture.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470870857", "createdAt": "2020-08-14T21:21:50Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Add all segments in the container metadata in a set for each debug segment container instance.\n+        Map<Integer, Set<String>> metadataSegmentsByContainer = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+        for (val debugStreamSegmentContainerEntry : debugStreamSegmentContainers.entrySet()) {\n+            Preconditions.checkNotNull(debugStreamSegmentContainerEntry.getValue());\n+            val tableExtension = debugStreamSegmentContainerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    debugStreamSegmentContainerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsByContainer.put(debugStreamSegmentContainerEntry.getKey(), metadataSegments);\n+        }\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            SegmentProperties currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            metadataSegmentsByContainer.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        for (val metadataSegmentsSetEntry : metadataSegmentsByContainer.entrySet()) {\n+            for (String segmentName : metadataSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                debugStreamSegmentContainers.get(metadataSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT).join();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));\n+                            }\n+                        }), ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,\n+                () -> container.registerSegment(segmentName, segmentLength, isSealed));\n+    }\n+\n+    /**\n+     * Deletes container metadata segment and its Attribute segment from the {@link Storage} for the given container Id.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataAndAttributeSegments(Storage storage, int containerId) {\n+        Preconditions.checkNotNull(storage);\n+        String metadataSegmentName = NameUtils.getMetadataSegmentName(containerId);\n+        String attributeSegmentName = NameUtils.getAttributeSegmentName(metadataSegmentName);\n+        deleteSegment(storage, metadataSegmentName);\n+        deleteSegment(storage, attributeSegmentName);\n+    }\n+\n+    /**\n+     * Deletes the segment with given name from the given {@link Storage} instance.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param segmentName   Name of the segment to be deleted.\n+     */\n+    private static void deleteSegment(Storage storage, String segmentName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3MjU2Mw==", "bodyText": "Is this needed?\nDelete constants not used.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r470872563", "createdAt": "2020-08-14T21:26:50Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static io.pravega.segmentstore.server.containers.ContainerRecoveryUtils.recoverAllSegments;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+@Slf4j\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883da1068638d9dae5e87aea87c92ade5260e15a"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b57d9114d856e20ea74811d03fbc186b2d6118", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/c8b57d9114d856e20ea74811d03fbc186b2d6118", "committedDate": "2020-08-14T23:12:04Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52b45e70886737226d10a7e98e01a70bde420efa", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/52b45e70886737226d10a7e98e01a70bde420efa", "committedDate": "2020-08-14T23:50:52Z", "message": "Removed unnecessary part.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTgzNzUz", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-468583753", "createdAt": "2020-08-17T15:47:57Z", "commit": {"oid": "52b45e70886737226d10a7e98e01a70bde420efa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b29e1617cef3a3188a8974608b391cb56fce642", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/3b29e1617cef3a3188a8974608b391cb56fce642", "committedDate": "2020-08-17T16:27:10Z", "message": "Minor changes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/f4bf8fdcd2c1b88e135e60c4f131db873fc1f652", "committedDate": "2020-08-17T17:12:12Z", "message": "CheckStyle.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTE3Mzc2", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-468917376", "createdAt": "2020-08-18T00:36:43Z", "commit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDozNjo0M1rOHB_UAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDo0OTo1N1rOHB_iAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0NzkzOQ==", "bodyText": "Replace this with:\nRecovers Segments from the given Storage instance. This is done by:\n1. Listing all Segments from the given Storage instance and partitioning them by their assigned Container Id using the standard {@link StreamSegmentMapper}.\n2. Filtering out all shadow Segments (such as Attribute Segments).\n3. Registering all remaining (external) Segments to the owning Container's {@link MetadataStore}.\n\nThe {@link DebugStreamSegmentContainer} instance(s) that are provided to this method may have some segments already present in their respective {@link MetadataStore}. \n\nAfter the method successfully completes, the following are true:\n- Only the segments which exist in the {@link Storage} will remain in the Container's {@link MetadataStore}.\n- If a Segment exists both in the Container's {@link MetadataStore} and in {@link Storage}, then the information that exists in {@link Storage} (length, sealed) will prevail.\n      \nIf the method fails during execution, the appropriate exception is thrown and the Containers' {@link MetadataStores} may be left in an inconsistent state", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471847939", "createdAt": "2020-08-18T00:36:43Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0OTE4OA==", "bodyText": "For all these methods, do this for the exceptions:\n\nHave them declare that they throw Exception.\nDo not document InterruptedException or ExecutionException.\nFor TimeoutException and IOException please have appropriate descriptions. Required for Futures.get is not of any use for the user.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471849188", "createdAt": "2020-08-18T00:41:15Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDE1Ng==", "bodyText": "Here you use join but in other methods you use get(Timeout). Please be consistent. If you already use get(Timeout) in one place, you might as well use it everywhere.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471850156", "createdAt": "2020-08-18T00:44:54Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDM1Ng==", "bodyText": "Loop through all the given containers and verify that they are all there (i.e., no duplicate IDs and that all of the expected Ids are provided). If you get 4 containers, you should expect ids 0 through 3.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471850356", "createdAt": "2020-08-18T00:45:34Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDQ0Mg==", "bodyText": "You can do this as a helper method and use a HashSet", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471850442", "createdAt": "2020-08-18T00:45:52Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDM1Ng=="}, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDUxMw==", "bodyText": "get", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471850513", "createdAt": "2020-08-18T00:46:10Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDU4Nw==", "bodyText": "Same comment about exceptions as above.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471850587", "createdAt": "2020-08-18T00:46:28Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDg5Mw==", "bodyText": "I am pretty sure that Futures.exceptionallyComposeExpecting unwraps it for you. Please check, and if so, simplify this line.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471850893", "createdAt": "2020-08-18T00:47:44Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()\n+     * @throws ExecutionException       Required for Futures.get()\n+     * @throws TimeoutException         Required for Futures.get()\n+     */\n+    private static Map<Integer, Set<String>> getExistingSegments(Map<Integer, DebugStreamSegmentContainer> containerMap,\n+                                                                 ExecutorService executorService)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        Map<Integer, Set<String>> metadataSegmentsMap = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+\n+        // Get all segments for each container entry\n+        for (val containerEntry : containerMap.entrySet()) {\n+            Preconditions.checkNotNull(containerEntry.getValue());\n+            val tableExtension = containerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    containerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Store the segments in a set\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsMap.put(containerEntry.getKey(), metadataSegments);\n+        }\n+        return metadataSegmentsMap;\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));\n+                            }\n+                        }), ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MTA5MA==", "bodyText": "This is an async operation. Where are you waiting for it?\nChange the enclosing thenAccept into a thenCompose and return it.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471851090", "createdAt": "2020-08-18T00:48:29Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()\n+     * @throws ExecutionException       Required for Futures.get()\n+     * @throws TimeoutException         Required for Futures.get()\n+     */\n+    private static Map<Integer, Set<String>> getExistingSegments(Map<Integer, DebugStreamSegmentContainer> containerMap,\n+                                                                 ExecutorService executorService)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        Map<Integer, Set<String>> metadataSegmentsMap = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+\n+        // Get all segments for each container entry\n+        for (val containerEntry : containerMap.entrySet()) {\n+            Preconditions.checkNotNull(containerEntry.getValue());\n+            val tableExtension = containerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    containerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Store the segments in a set\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsMap.put(containerEntry.getKey(), metadataSegments);\n+        }\n+        return metadataSegmentsMap;\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MTE0NA==", "bodyText": "This is also an async operation.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471851144", "createdAt": "2020-08-18T00:48:45Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()\n+     * @throws ExecutionException       Required for Futures.get()\n+     * @throws TimeoutException         Required for Futures.get()\n+     */\n+    private static Map<Integer, Set<String>> getExistingSegments(Map<Integer, DebugStreamSegmentContainer> containerMap,\n+                                                                 ExecutorService executorService)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        Map<Integer, Set<String>> metadataSegmentsMap = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+\n+        // Get all segments for each container entry\n+        for (val containerEntry : containerMap.entrySet()) {\n+            Preconditions.checkNotNull(containerEntry.getValue());\n+            val tableExtension = containerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    containerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Store the segments in a set\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsMap.put(containerEntry.getKey(), metadataSegments);\n+        }\n+        return metadataSegmentsMap;\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MTE4Nw==", "bodyText": "and this.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471851187", "createdAt": "2020-08-18T00:48:55Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()\n+     * @throws ExecutionException       Required for Futures.get()\n+     * @throws TimeoutException         Required for Futures.get()\n+     */\n+    private static Map<Integer, Set<String>> getExistingSegments(Map<Integer, DebugStreamSegmentContainer> containerMap,\n+                                                                 ExecutorService executorService)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        Map<Integer, Set<String>> metadataSegmentsMap = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+\n+        // Get all segments for each container entry\n+        for (val containerEntry : containerMap.entrySet()) {\n+            Preconditions.checkNotNull(containerEntry.getValue());\n+            val tableExtension = containerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    containerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Store the segments in a set\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsMap.put(containerEntry.getKey(), metadataSegments);\n+        }\n+        return metadataSegmentsMap;\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));\n+                            }\n+                        }), ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,\n+                () -> container.registerSegment(segmentName, segmentLength, isSealed));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MTI5Mg==", "bodyText": "no unwrapping?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471851292", "createdAt": "2020-08-18T00:49:15Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()\n+     * @throws ExecutionException       Required for Futures.get()\n+     * @throws TimeoutException         Required for Futures.get()\n+     */\n+    private static Map<Integer, Set<String>> getExistingSegments(Map<Integer, DebugStreamSegmentContainer> containerMap,\n+                                                                 ExecutorService executorService)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        Map<Integer, Set<String>> metadataSegmentsMap = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+\n+        // Get all segments for each container entry\n+        for (val containerEntry : containerMap.entrySet()) {\n+            Preconditions.checkNotNull(containerEntry.getValue());\n+            val tableExtension = containerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    containerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Store the segments in a set\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsMap.put(containerEntry.getKey(), metadataSegments);\n+        }\n+        return metadataSegmentsMap;\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));\n+                            }\n+                        }), ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,\n+                () -> container.registerSegment(segmentName, segmentLength, isSealed));\n+    }\n+\n+    /**\n+     * Deletes container metadata segment and its Attribute segment from the {@link Storage} for the given container Id.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static CompletableFuture<Void> deleteMetadataAndAttributeSegments(Storage storage, int containerId) {\n+        Preconditions.checkNotNull(storage);\n+        String metadataSegmentName = NameUtils.getMetadataSegmentName(containerId);\n+        String attributeSegmentName = NameUtils.getAttributeSegmentName(metadataSegmentName);\n+        return deleteSegmentFromStorage(storage, metadataSegmentName)\n+                .thenAccept(x -> deleteSegmentFromStorage(storage, attributeSegmentName));\n+    }\n+\n+    /**\n+     * Deletes the segment with given name from the given {@link Storage} instance. If the segment doesn't exist, it does\n+     * nothing and returns.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param segmentName   Name of the segment to be deleted.\n+     * @return              CompletableFuture which when completed will have the segment deleted. In case segment didn't\n+     *                      exist, a completed future will be returned.\n+     */\n+    private static CompletableFuture<Void> deleteSegmentFromStorage(Storage storage, String segmentName) {\n+        log.info(\"Deleting Segment '{}'\", segmentName);\n+        return Futures.exceptionallyComposeExpecting(\n+                storage.openWrite(segmentName).thenCompose(segmentHandle -> storage.delete(segmentHandle, TIMEOUT)),\n+                ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MTUyMA==", "bodyText": "use exceptionallyExpecting and return null instead of CompletableFuture.completedFuture(null)", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r471851520", "createdAt": "2020-08-18T00:49:57Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()\n+     * @throws ExecutionException       Required for Futures.get()\n+     * @throws TimeoutException         Required for Futures.get()\n+     */\n+    private static Map<Integer, Set<String>> getExistingSegments(Map<Integer, DebugStreamSegmentContainer> containerMap,\n+                                                                 ExecutorService executorService)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        Map<Integer, Set<String>> metadataSegmentsMap = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+\n+        // Get all segments for each container entry\n+        for (val containerEntry : containerMap.entrySet()) {\n+            Preconditions.checkNotNull(containerEntry.getValue());\n+            val tableExtension = containerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    containerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Store the segments in a set\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsMap.put(containerEntry.getKey(), metadataSegments);\n+        }\n+        return metadataSegmentsMap;\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));\n+                            }\n+                        }), ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException,\n+                () -> container.registerSegment(segmentName, segmentLength, isSealed));\n+    }\n+\n+    /**\n+     * Deletes container metadata segment and its Attribute segment from the {@link Storage} for the given container Id.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static CompletableFuture<Void> deleteMetadataAndAttributeSegments(Storage storage, int containerId) {\n+        Preconditions.checkNotNull(storage);\n+        String metadataSegmentName = NameUtils.getMetadataSegmentName(containerId);\n+        String attributeSegmentName = NameUtils.getAttributeSegmentName(metadataSegmentName);\n+        return deleteSegmentFromStorage(storage, metadataSegmentName)\n+                .thenAccept(x -> deleteSegmentFromStorage(storage, attributeSegmentName));\n+    }\n+\n+    /**\n+     * Deletes the segment with given name from the given {@link Storage} instance. If the segment doesn't exist, it does\n+     * nothing and returns.\n+     * @param storage       A {@link Storage} instance to delete the segments from.\n+     * @param segmentName   Name of the segment to be deleted.\n+     * @return              CompletableFuture which when completed will have the segment deleted. In case segment didn't\n+     *                      exist, a completed future will be returned.\n+     */\n+    private static CompletableFuture<Void> deleteSegmentFromStorage(Storage storage, String segmentName) {\n+        log.info(\"Deleting Segment '{}'\", segmentName);\n+        return Futures.exceptionallyComposeExpecting(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 205}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70dbedb52dabd1bde2de164ef0556ff493ac4da0", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/70dbedb52dabd1bde2de164ef0556ff493ac4da0", "committedDate": "2020-08-19T19:04:31Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "471b70c3a5d371b24742bb11ae57c748e483e28a", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/471b70c3a5d371b24742bb11ae57c748e483e28a", "committedDate": "2020-08-19T19:41:34Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fc116535b0b5d84b2424c29bf439483b188d403", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/5fc116535b0b5d84b2424c29bf439483b188d403", "committedDate": "2020-08-19T19:46:02Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd3d372dabaa4f76029efa3cccd29373bdb6bf72", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/bd3d372dabaa4f76029efa3cccd29373bdb6bf72", "committedDate": "2020-08-19T19:46:59Z", "message": "Checkstyle.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28c044e2a3763528f4455611f301d739e62f329d", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/28c044e2a3763528f4455611f301d739e62f329d", "committedDate": "2020-08-20T01:16:15Z", "message": "Minor changes in Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzY3NDcx", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-472767471", "createdAt": "2020-08-21T19:25:12Z", "commit": {"oid": "28c044e2a3763528f4455611f301d739e62f329d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNToxMlrOHE4-wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNToxMlrOHE4-wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4OTkyMA==", "bodyText": "Isn't container.registerSegment async? You need to return it too and change thenAccept to thenCompose", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r474889920", "createdAt": "2020-08-21T19:25:12Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for container recovery.\n+ */\n+@Slf4j\n+public class ContainerRecoveryUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    /**\n+     * This method lists the segments from the given storage instance. It then registers all segments except Attribute\n+     * segments to the container metadata segment(s).\n+     * {@link DebugStreamSegmentContainer} instance(s) are provided to this method which can have some segments already present\n+     * in their respective container metadata segment(s). After the method successfully completes, only the segments which\n+     * existed in the {@link Storage} will remain in the container metadata. All segments which only existed in the container\n+     * metadata or which existed in both container metadata and the storage but with different lengths and/or sealed status,\n+     * will be deleted from the container metadata. If the method fails while execution, appropriate exception is thrown.\n+     * All segments from the storage are listed one by one, then mapped to their corresponding {@link DebugStreamSegmentContainer}\n+     * instances for registering them to container metadata segment.\n+     * @param storage                           A {@link Storage} instance that will be used to list segments from.\n+     * @param debugStreamSegmentContainers      A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                          representing the containers that will be recovered.\n+     * @param executorService                   A thread pool for execution.\n+     * @throws InterruptedException             Required for Futures.get()\n+     * @throws ExecutionException               Required for Futures.get()\n+     * @throws TimeoutException                 Required for Futures.get()\n+     * @throws IOException                      Requited for Storage.listSegments()\n+     */\n+    public static void recoverAllSegments(Storage storage, Map<Integer, DebugStreamSegmentContainer> debugStreamSegmentContainers,\n+                                          ExecutorService executorService) throws InterruptedException, ExecutionException,\n+            TimeoutException, IOException {\n+        Preconditions.checkNotNull(storage);\n+        Preconditions.checkNotNull(executorService);\n+        Preconditions.checkNotNull(debugStreamSegmentContainers);\n+        Preconditions.checkArgument(debugStreamSegmentContainers.size() > 0, \"There should be at least one \" +\n+                \"debug segment container instance.\");\n+\n+        log.info(\"Recovery started for all containers...\");\n+        // Get all segments in the container metadata for each debug segment container instance.\n+        Map<Integer, Set<String>> existingSegmentsMap = getExistingSegments(debugStreamSegmentContainers, executorService);\n+\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(debugStreamSegmentContainers.size());\n+\n+        Iterator<SegmentProperties> segmentIterator = storage.listSegments();\n+        Preconditions.checkNotNull(segmentIterator);\n+\n+        // Iterate through all segments. Create each one of their using their respective debugSegmentContainer instance.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        while (segmentIterator.hasNext()) {\n+            val currentSegment = segmentIterator.next();\n+\n+            // skip recovery if the segment is an attribute segment.\n+            if (NameUtils.isAttributeSegment(currentSegment.getName())) {\n+                continue;\n+            }\n+\n+            int containerId = segToConMapper.getContainerId(currentSegment.getName());\n+            existingSegmentsMap.get(containerId).remove(currentSegment.getName());\n+            futures.add(recoverSegment(debugStreamSegmentContainers.get(containerId), currentSegment));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        futures.clear();\n+        // Delete segments which only exist in the container metadata, not in storage.\n+        for (val existingSegmentsSetEntry : existingSegmentsMap.entrySet()) {\n+            for (String segmentName : existingSegmentsSetEntry.getValue()) {\n+                log.info(\"Deleting segment '{}' as it is not in the storage.\", segmentName);\n+                futures.add(debugStreamSegmentContainers.get(existingSegmentsSetEntry.getKey()).deleteStreamSegment(segmentName, TIMEOUT));\n+            }\n+        }\n+        Futures.allOf(futures).join();\n+    }\n+\n+    /**\n+     * The method lists all segments present in the container metadata segments of the given {@link DebugStreamSegmentContainer}\n+     * instances, stores their names by container Id in a map and returns it.\n+     * @param containerMap              A Map of Container Ids to {@link DebugStreamSegmentContainer} instances\n+     *                                  representing the containers to list the segments from.\n+     * @param executorService           A thread pool for execution.\n+     * @return                          A Map of Container Ids to segment names representing all segments present in the\n+     *                                  container metadata segment of a Container.\n+     * @throws InterruptedException     Required for Futures.get()\n+     * @throws ExecutionException       Required for Futures.get()\n+     * @throws TimeoutException         Required for Futures.get()\n+     */\n+    private static Map<Integer, Set<String>> getExistingSegments(Map<Integer, DebugStreamSegmentContainer> containerMap,\n+                                                                 ExecutorService executorService)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        Map<Integer, Set<String>> metadataSegmentsMap = new HashMap<>();\n+        val args = IteratorArgs.builder().fetchTimeout(TIMEOUT).build();\n+\n+        // Get all segments for each container entry\n+        for (val containerEntry : containerMap.entrySet()) {\n+            Preconditions.checkNotNull(containerEntry.getValue());\n+            val tableExtension = containerEntry.getValue().getExtension(ContainerTableExtension.class);\n+            val keyIterator = tableExtension.keyIterator(getMetadataSegmentName(\n+                    containerEntry.getKey()), args).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+            // Store the segments in a set\n+            Set<String> metadataSegments = new HashSet<>();\n+            keyIterator.forEachRemaining(k ->\n+                    metadataSegments.addAll(k.getEntries().stream()\n+                            .map(entry -> entry.getKey().toString())\n+                            .collect(Collectors.toSet())), executorService).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            metadataSegmentsMap.put(containerEntry.getKey(), metadataSegments);\n+        }\n+        return metadataSegmentsMap;\n+    }\n+\n+    /**\n+     * This method takes a {@link DebugStreamSegmentContainer} instance and a {@link SegmentProperties} object as arguments\n+     * and takes one of the following actions:\n+     * 1. If the segment is present in the container metadata and its length or sealed status or both doesn't match with the\n+     * given {@link SegmentProperties}, then it is deleted from there and registered using the properties from the given\n+     * {@link SegmentProperties} instance.\n+     * 2. If the segment is absent in the container metadata, then it is registered using the properties from the given\n+     * {@link SegmentProperties}.\n+     * @param container         A {@link DebugStreamSegmentContainer} instance for registering the given segment and checking\n+     *                          its existence in the container metadata.\n+     * @param storageSegment    A {@link SegmentProperties} instance which has properties of the segment to be registered.\n+     * @return                  CompletableFuture which when completed will have the segment registered on to the container\n+     *                          metadata.\n+     */\n+    private static CompletableFuture<Void> recoverSegment(DebugStreamSegmentContainer container, SegmentProperties storageSegment) {\n+        Preconditions.checkNotNull(container);\n+        Preconditions.checkNotNull(storageSegment);\n+        long segmentLength = storageSegment.getLength();\n+        boolean isSealed = storageSegment.isSealed();\n+        String segmentName = storageSegment.getName();\n+\n+        log.info(\"Registering: {}, {}, {}.\", segmentName, segmentLength, isSealed);\n+        return Futures.exceptionallyComposeExpecting(\n+                container.getStreamSegmentInfo(storageSegment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            if (segmentLength != e.getLength() || isSealed != e.isSealed()) {\n+                                container.metadataStore.deleteSegment(segmentName, TIMEOUT)\n+                                        .thenAccept(x -> container.registerSegment(segmentName, segmentLength, isSealed));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MTE0NA=="}, "originalCommit": {"oid": "f4bf8fdcd2c1b88e135e60c4f131db873fc1f652"}, "originalPosition": 176}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a8f85232cb079d2dcd4f5de012e17848784bc94", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/1a8f85232cb079d2dcd4f5de012e17848784bc94", "committedDate": "2020-08-21T19:34:46Z", "message": "Fixing last comment.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff6a886216c121c1acc760926915426b5ee0da3", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/3ff6a886216c121c1acc760926915426b5ee0da3", "committedDate": "2020-08-21T19:47:09Z", "message": "Minor changes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODAwMzg0", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-472800384", "createdAt": "2020-08-21T20:27:59Z", "commit": {"oid": "3ff6a886216c121c1acc760926915426b5ee0da3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49b58a722e43f6e67bc6353e84efd5cbe25f9dda", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/49b58a722e43f6e67bc6353e84efd5cbe25f9dda", "committedDate": "2020-04-21T18:16:34Z", "message": "segmentContainer in recovery mode.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f4fc64b3abd3e8d036490f3273d9c8bb976ead", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/30f4fc64b3abd3e8d036490f3273d9c8bb976ead", "committedDate": "2020-04-22T01:43:18Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc15c2a9021d3b7b7e3e21642de124d895cd3df", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/dcc15c2a9021d3b7b7e3e21642de124d895cd3df", "committedDate": "2020-04-22T02:34:24Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbe7f53387c946084b52b555c959dc20d1596637", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/dbe7f53387c946084b52b555c959dc20d1596637", "committedDate": "2020-04-22T02:35:40Z", "message": "Merge branch 'issue-4670-segment-continer-recovery-mode' of https://github.com/ManishKumarKeshri/pravega into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjk0Nzg2", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-401294786", "createdAt": "2020-04-27T20:18:59Z", "commit": {"oid": "dbe7f53387c946084b52b555c959dc20d1596637"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a38faa88e8d1463eafdb90c353d1053a79ec515", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8a38faa88e8d1463eafdb90c353d1053a79ec515", "committedDate": "2020-05-01T05:15:06Z", "message": "Improving coverage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c31a51a2d01ecac3af03e77fb2daabb2001a4b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/f6c31a51a2d01ecac3af03e77fb2daabb2001a4b", "committedDate": "2020-05-01T07:56:37Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d8ed9eaad78d5032a2b8871609d3f248522a34", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/03d8ed9eaad78d5032a2b8871609d3f248522a34", "committedDate": "2020-05-01T09:29:43Z", "message": "Code Coverage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b96964abcb0db52a8098cc0ef7246cfe33fdadda", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/b96964abcb0db52a8098cc0ef7246cfe33fdadda", "committedDate": "2020-05-05T07:35:53Z", "message": "Updating tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e846138bd31072996be66f42d36cc856b1a0db10", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e846138bd31072996be66f42d36cc856b1a0db10", "committedDate": "2020-05-05T07:46:45Z", "message": "Fixing Checkstyle fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b849140c34c958f3b1a7d32f057965d8cce5eee", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/8b849140c34c958f3b1a7d32f057965d8cce5eee", "committedDate": "2020-05-07T22:14:02Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d62b83f8281984ad5c74f15ad044d5f89ebfdc5", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/8d62b83f8281984ad5c74f15ad044d5f89ebfdc5", "committedDate": "2020-05-26T16:23:01Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8dfe5f5ebc8a0a4654d50e75a3311854815017", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/fa8dfe5f5ebc8a0a4654d50e75a3311854815017", "committedDate": "2020-06-22T05:54:16Z", "message": "Updating MetadataStore.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85fcd6bf6b78c014097c6a8d5fa1e28ac25e3fb", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/c85fcd6bf6b78c014097c6a8d5fa1e28ac25e3fb", "committedDate": "2020-06-22T07:06:30Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bdf1471c9b0061eed2c55d8c3f9917f91e3c75a", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/8bdf1471c9b0061eed2c55d8c3f9917f91e3c75a", "committedDate": "2020-06-22T16:03:20Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a490864c44f85e3b12b03ca03ea48bdcdc3e790", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8a490864c44f85e3b12b03ca03ea48bdcdc3e790", "committedDate": "2020-06-23T07:57:18Z", "message": "ListAllSegments and create Segments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350181f16f6254d28b45aad03558d7541679aadd", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/350181f16f6254d28b45aad03558d7541679aadd", "committedDate": "2020-06-24T06:47:43Z", "message": "Adding tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd38325714e9e565bbb361836b6fdb1933cfcbc", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/afd38325714e9e565bbb361836b6fdb1933cfcbc", "committedDate": "2020-06-25T07:38:41Z", "message": "Updating StreamSegmentStoreTestBase\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6d50e30bafdbe9bad03d8a17b75ab7e63680c32", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/a6d50e30bafdbe9bad03d8a17b75ab7e63680c32", "committedDate": "2020-06-26T04:12:57Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d0bdbad9b08ed33778ba1aee78a909070211a97", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/6d0bdbad9b08ed33778ba1aee78a909070211a97", "committedDate": "2020-06-26T06:52:55Z", "message": "Updating\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "732a9de0ded3dbd0933678a0af0a1ce97fb0c019", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/732a9de0ded3dbd0933678a0af0a1ce97fb0c019", "committedDate": "2020-06-26T07:17:37Z", "message": "Removing changes made in List Segments of ExtendedS3Storage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a50c9b9fcdc01a2e32eeeedc11e14bccada129", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/07a50c9b9fcdc01a2e32eeeedc11e14bccada129", "committedDate": "2020-06-26T18:24:14Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac607c6154a82ec2c2a449038c413d8574236a8", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/3ac607c6154a82ec2c2a449038c413d8574236a8", "committedDate": "2020-06-29T03:28:57Z", "message": "Updating integration test.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "634e6f7688c14b7d72b7214f9f062edff38b8619", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/634e6f7688c14b7d72b7214f9f062edff38b8619", "committedDate": "2020-06-29T05:26:39Z", "message": "Adding layer 2 tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb23e5b0cd2ba77c0ff1aa00ecbe0cb056a1e31c", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/bb23e5b0cd2ba77c0ff1aa00ecbe0cb056a1e31c", "committedDate": "2020-06-29T05:40:39Z", "message": "Updating tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "385a664082589ec43bd2b387500411bccbb33f48", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/385a664082589ec43bd2b387500411bccbb33f48", "committedDate": "2020-06-29T16:48:17Z", "message": "Checkstyle.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b52e061a31da9b6842e314c4454fdcff4c6b6ed9", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/b52e061a31da9b6842e314c4454fdcff4c6b6ed9", "committedDate": "2020-06-29T19:39:43Z", "message": "Updating Integration tests and checkstyle fails.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "938592e807940c94b54b84e645524009836b63d5", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/938592e807940c94b54b84e645524009836b63d5", "committedDate": "2020-06-29T20:11:29Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b5870659f211f70bd9a982df6bcf3e0991c736", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/88b5870659f211f70bd9a982df6bcf3e0991c736", "committedDate": "2020-06-30T04:00:05Z", "message": "Fixing spotbugs failure.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e1a94463649e301bf4b1252c0ee917477cbf1b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/90e1a94463649e301bf4b1252c0ee917477cbf1b", "committedDate": "2020-06-30T05:33:16Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf1739ca2df2aae2302fc771414909b551c3832", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/1bf1739ca2df2aae2302fc771414909b551c3832", "committedDate": "2020-06-30T06:31:52Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "259f22d85dadbb2d85787849af4f80b991fa0978", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/259f22d85dadbb2d85787849af4f80b991fa0978", "committedDate": "2020-06-30T18:18:26Z", "message": "Adding waitForSegmentsInStorage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb7f0f47701d1d710d98b5977e42041f6757769", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/cbb7f0f47701d1d710d98b5977e42041f6757769", "committedDate": "2020-06-30T18:28:09Z", "message": "Updating TableStoreWrapper\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fbca73b27e755d9e091451152ee9deaf2edaf5d", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/3fbca73b27e755d9e091451152ee9deaf2edaf5d", "committedDate": "2020-06-30T19:52:32Z", "message": "Updating\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ad6016b5a93aa5f0e9c565550804cab61c9c76", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/66ad6016b5a93aa5f0e9c565550804cab61c9c76", "committedDate": "2020-06-30T19:59:30Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bce3d8f58ccaaf96cb1eeb1161debf0a4539fd94", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/bce3d8f58ccaaf96cb1eeb1161debf0a4539fd94", "committedDate": "2020-06-30T20:13:37Z", "message": "Updating TableStoreWrapper\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194162ce31816e87d55077a66c7131e16b4e9630", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/194162ce31816e87d55077a66c7131e16b4e9630", "committedDate": "2020-07-01T02:50:01Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72356b5007083f73db00d847dead7ca9403ccbfc", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/72356b5007083f73db00d847dead7ca9403ccbfc", "committedDate": "2020-07-01T08:07:53Z", "message": "Updating tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d97d37202a06d4ba5d9e9487f3f4de614722548c", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/d97d37202a06d4ba5d9e9487f3f4de614722548c", "committedDate": "2020-07-01T20:33:44Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f89a4aa867596fee8fdadc1c8cb64dbc6fa50738", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/f89a4aa867596fee8fdadc1c8cb64dbc6fa50738", "committedDate": "2020-07-01T21:00:15Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8267dbdf3b38c887e14b24458017a28ced62bf1", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/a8267dbdf3b38c887e14b24458017a28ced62bf1", "committedDate": "2020-07-01T21:43:47Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d34a2b4adc28e9faf5f030d2ef982d7389a2ff", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/64d34a2b4adc28e9faf5f030d2ef982d7389a2ff", "committedDate": "2020-07-01T21:44:30Z", "message": "Merge branch 'issue-4670-segment-continer-recovery-mode' of https://github.com/ManishKumarKeshri/pravega into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da2321c647d33031de02cc47788cea564193d95c", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/da2321c647d33031de02cc47788cea564193d95c", "committedDate": "2020-07-01T22:43:19Z", "message": "Updating integration test.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdd45675c6185b84eeb6284915f4e244fba7f867", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/fdd45675c6185b84eeb6284915f4e244fba7f867", "committedDate": "2020-07-01T22:52:52Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "709d12cd4a47cdbdbb8b0357ae034e259bb93d3b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/709d12cd4a47cdbdbb8b0357ae034e259bb93d3b", "committedDate": "2020-07-01T23:38:07Z", "message": "Updating DataRecoveryTestUtils\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e8e58cbcb1947a4c49d28bc0300ce746150304", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e3e8e58cbcb1947a4c49d28bc0300ce746150304", "committedDate": "2020-07-01T23:43:25Z", "message": "Updating checkstyle fail\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5476478596f32300b76dd79861ea228dcb3a82a", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/f5476478596f32300b76dd79861ea228dcb3a82a", "committedDate": "2020-07-02T00:41:28Z", "message": "Updating time out for integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530979f40c4116aa13ca1ed13f93f0dace0c7cbf", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/530979f40c4116aa13ca1ed13f93f0dace0c7cbf", "committedDate": "2020-07-02T03:33:39Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7673be67d900e36297518f894dbb760cece7ada4", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/7673be67d900e36297518f894dbb760cece7ada4", "committedDate": "2020-07-02T07:51:48Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05305614d021a818e277c2ab3524bebaa2b8a69a", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/05305614d021a818e277c2ab3524bebaa2b8a69a", "committedDate": "2020-07-02T19:02:32Z", "message": "Updating integration tests with BookKeeperLogFactory changes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e84321e3fee284e89889a162ceb5a3f9b6f618cf", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e84321e3fee284e89889a162ceb5a3f9b6f618cf", "committedDate": "2020-07-02T21:01:05Z", "message": "Updating\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65dbdedeb31d027a36d51181344a0914d6a6bdde", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/65dbdedeb31d027a36d51181344a0914d6a6bdde", "committedDate": "2020-07-06T16:41:34Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fff6566cd29d30d3ceddd35035d013e3b33b52f", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/1fff6566cd29d30d3ceddd35035d013e3b33b52f", "committedDate": "2020-07-06T16:49:52Z", "message": "Updating integration tests - BK-ZK closing.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dce5e38bb2231a73765b6bcae62366cf57d90935", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/dce5e38bb2231a73765b6bcae62366cf57d90935", "committedDate": "2020-07-06T18:16:28Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "288321f68d06a20f526a48e695f027a6e7340354", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/288321f68d06a20f526a48e695f027a6e7340354", "committedDate": "2020-07-06T20:15:28Z", "message": "Updating integration tests with checkstyle and namespace.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3a3b5084847a08434f44a3f3db960fa850cf54", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/3f3a3b5084847a08434f44a3f3db960fa850cf54", "committedDate": "2020-07-06T20:17:32Z", "message": "Changing log level.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca97a45a07458e5a26c1b29e4aed02be6d5dc689", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/ca97a45a07458e5a26c1b29e4aed02be6d5dc689", "committedDate": "2020-07-07T06:34:03Z", "message": "Updating close(s) in integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bb72ec1b0322810f10a06f25a2e04f0894de0b5", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/5bb72ec1b0322810f10a06f25a2e04f0894de0b5", "committedDate": "2020-07-07T07:06:09Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ab80498a1bc800e956cbaa7bc16fd3241d01c0", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/c5ab80498a1bc800e956cbaa7bc16fd3241d01c0", "committedDate": "2020-07-07T08:00:53Z", "message": "Updating checksytle fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e074c2fefdae5c852a7c49cbdaa47f643d180ac7", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e074c2fefdae5c852a7c49cbdaa47f643d180ac7", "committedDate": "2020-07-07T16:12:47Z", "message": "Updating Null pointer exception.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca47a29ffd992ab101c29c3fa66f29678f81c9d3", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/ca47a29ffd992ab101c29c3fa66f29678f81c9d3", "committedDate": "2020-07-07T17:33:34Z", "message": "Updating integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74fba6b4fffb1d23af1bc1285086d1a152f1e9e6", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/74fba6b4fffb1d23af1bc1285086d1a152f1e9e6", "committedDate": "2020-07-07T17:45:08Z", "message": "Update integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c57dc01c2190fe446c81c7071763db3cb82237b4", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/c57dc01c2190fe446c81c7071763db3cb82237b4", "committedDate": "2020-07-07T18:03:36Z", "message": "Update integration tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a708502f5c7cc0a53bb8d57279a95c18f6b0ce0a", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/a708502f5c7cc0a53bb8d57279a95c18f6b0ce0a", "committedDate": "2020-07-07T18:18:23Z", "message": "Update tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea9ba4d4854ea00bb9da94601930aa9b0db21732", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/ea9ba4d4854ea00bb9da94601930aa9b0db21732", "committedDate": "2020-07-07T19:51:56Z", "message": "Adding zkTestServer.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f96110e70868e832fc96d1f1b9cef1f2467184dd", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/f96110e70868e832fc96d1f1b9cef1f2467184dd", "committedDate": "2020-07-07T20:46:44Z", "message": "Remove sleep.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8631f3ef4149138b734d9a483fe4528eee6d3b9", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/c8631f3ef4149138b734d9a483fe4528eee6d3b9", "committedDate": "2020-07-08T04:44:21Z", "message": "Updating comments and tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8449515e1b90474c0a9a7c73a07c0bf688f44340", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8449515e1b90474c0a9a7c73a07c0bf688f44340", "committedDate": "2020-07-08T05:55:34Z", "message": "Refactoring.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a380b63832a916a46bdd32d78110aa82665884cf", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/a380b63832a916a46bdd32d78110aa82665884cf", "committedDate": "2020-07-08T07:41:58Z", "message": "Updating tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9243701fba3febae2a0eea9e14ec66ba62de5c8", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/d9243701fba3febae2a0eea9e14ec66ba62de5c8", "committedDate": "2020-07-08T15:52:05Z", "message": "Update.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a24df6ea92420b3a38ab0f549478c30719fffe", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/11a24df6ea92420b3a38ab0f549478c30719fffe", "committedDate": "2020-07-08T16:26:47Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "099d36e3496a9c90928eaff44d20c97418868c71", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/099d36e3496a9c90928eaff44d20c97418868c71", "committedDate": "2020-07-08T16:34:16Z", "message": "Merge conflicts.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1e1439c6be325943aeba9f2fcf28863c9ffcbe", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8c1e1439c6be325943aeba9f2fcf28863c9ffcbe", "committedDate": "2020-07-08T17:24:08Z", "message": "Failures due to merge.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44f06a9e86ab1664e0825d5a514d0d7868edf7a", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/a44f06a9e86ab1664e0825d5a514d0d7868edf7a", "committedDate": "2020-07-08T20:12:12Z", "message": "Updating no. of threads in starting BookKeeperLogFactory.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e00e78f61e2ba6ec02aa6024584a3bfb17a57ae", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/4e00e78f61e2ba6ec02aa6024584a3bfb17a57ae", "committedDate": "2020-07-08T20:27:13Z", "message": "Update.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886737a9c1d8c340dfd203ca4885a9f82ec82da6", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/886737a9c1d8c340dfd203ca4885a9f82ec82da6", "committedDate": "2020-07-09T17:48:25Z", "message": "Merge branch 'master' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e332e2ab2477a2ce0872e180daadd29c0c77ecec", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e332e2ab2477a2ce0872e180daadd29c0c77ecec", "committedDate": "2020-07-09T21:32:07Z", "message": "Removing Test.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0938804ca2b19541bee6908f60c9ecbfc0db5301", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/0938804ca2b19541bee6908f60c9ecbfc0db5301", "committedDate": "2020-07-09T22:22:46Z", "message": "Small changes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/43fa63bbd1203beb32d05f30adcb0c9674aa88bc", "committedDate": "2020-07-17T05:30:10Z", "message": "Minor changes in integration test.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODQ5NzE3", "url": "https://github.com/pravega/pravega/pull/4716#pullrequestreview-450849717", "createdAt": "2020-07-17T17:51:46Z", "commit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 80, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1MTo0NlrOGzb9bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo0MjoyMVrOGzdeOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4ODY1Mg==", "bodyText": "This class shouldn't be in contracts. Move it to wherever you have your DebugSegmentContainer.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456588652", "createdAt": "2020-07-17T17:51:46Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentStoreWrapper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import io.pravega.common.util.BufferView;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A wrapper class to StreamSegmentStore to track the segments being created or deleted.\n+ */\n+public class StreamSegmentStoreWrapper implements StreamSegmentStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4ODg4OQ==", "bodyText": "Make this final\nMake it a ConcurrentHashMap", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456588889", "createdAt": "2020-07-17T17:52:16Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentStoreWrapper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import io.pravega.common.util.BufferView;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A wrapper class to StreamSegmentStore to track the segments being created or deleted.\n+ */\n+public class StreamSegmentStoreWrapper implements StreamSegmentStore {\n+\n+    private final StreamSegmentStore streamSegmentStore;\n+\n+    @Getter(AccessLevel.PUBLIC)\n+    private HashSet<String> segments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTMzNw==", "bodyText": "You risk adding this even if the below call failed. Add this as a thenRun callback to the createStreamSegment Future below.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456589337", "createdAt": "2020-07-17T17:53:04Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentStoreWrapper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import io.pravega.common.util.BufferView;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A wrapper class to StreamSegmentStore to track the segments being created or deleted.\n+ */\n+public class StreamSegmentStoreWrapper implements StreamSegmentStore {\n+\n+    private final StreamSegmentStore streamSegmentStore;\n+\n+    @Getter(AccessLevel.PUBLIC)\n+    private HashSet<String> segments;\n+\n+    public StreamSegmentStoreWrapper(StreamSegmentStore streamSegmentStore) {\n+        this.streamSegmentStore = streamSegmentStore;\n+        this.segments = new HashSet<>();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Long> append(String streamSegmentName, BufferView data, Collection<AttributeUpdate> attributeUpdates, Duration timeout) {\n+        return this.streamSegmentStore.append(streamSegmentName, data, attributeUpdates, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Long> append(String streamSegmentName, long offset, BufferView data, Collection<AttributeUpdate> attributeUpdates,\n+                                          Duration timeout) {\n+        return this.streamSegmentStore.append(streamSegmentName, offset, data, attributeUpdates, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> updateAttributes(String streamSegmentName, Collection<AttributeUpdate> attributeUpdates, Duration timeout) {\n+        return this.streamSegmentStore.updateAttributes(streamSegmentName, attributeUpdates, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<UUID, Long>> getAttributes(String streamSegmentName, Collection<UUID> attributeIds, boolean cache, Duration timeout) {\n+        return this.streamSegmentStore.getAttributes(streamSegmentName, attributeIds, cache, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<ReadResult> read(String streamSegmentName, long offset, int maxLength, Duration timeout) {\n+        return this.streamSegmentStore.read(streamSegmentName, offset, maxLength, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<SegmentProperties> getStreamSegmentInfo(String streamSegmentName, Duration timeout) {\n+        return this.streamSegmentStore.getStreamSegmentInfo(streamSegmentName, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> createStreamSegment(String streamSegmentName, Collection<AttributeUpdate> attributes, Duration timeout) {\n+        segments.add(streamSegmentName); // Add the segmentName to the set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTY2Ng==", "bodyText": "no need to check if it exists. Remove won't do anything if it doesn't.\nSame comment as above, in createStreamSegment", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456589666", "createdAt": "2020-07-17T17:53:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentStoreWrapper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import io.pravega.common.util.BufferView;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A wrapper class to StreamSegmentStore to track the segments being created or deleted.\n+ */\n+public class StreamSegmentStoreWrapper implements StreamSegmentStore {\n+\n+    private final StreamSegmentStore streamSegmentStore;\n+\n+    @Getter(AccessLevel.PUBLIC)\n+    private HashSet<String> segments;\n+\n+    public StreamSegmentStoreWrapper(StreamSegmentStore streamSegmentStore) {\n+        this.streamSegmentStore = streamSegmentStore;\n+        this.segments = new HashSet<>();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Long> append(String streamSegmentName, BufferView data, Collection<AttributeUpdate> attributeUpdates, Duration timeout) {\n+        return this.streamSegmentStore.append(streamSegmentName, data, attributeUpdates, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Long> append(String streamSegmentName, long offset, BufferView data, Collection<AttributeUpdate> attributeUpdates,\n+                                          Duration timeout) {\n+        return this.streamSegmentStore.append(streamSegmentName, offset, data, attributeUpdates, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> updateAttributes(String streamSegmentName, Collection<AttributeUpdate> attributeUpdates, Duration timeout) {\n+        return this.streamSegmentStore.updateAttributes(streamSegmentName, attributeUpdates, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<UUID, Long>> getAttributes(String streamSegmentName, Collection<UUID> attributeIds, boolean cache, Duration timeout) {\n+        return this.streamSegmentStore.getAttributes(streamSegmentName, attributeIds, cache, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<ReadResult> read(String streamSegmentName, long offset, int maxLength, Duration timeout) {\n+        return this.streamSegmentStore.read(streamSegmentName, offset, maxLength, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<SegmentProperties> getStreamSegmentInfo(String streamSegmentName, Duration timeout) {\n+        return this.streamSegmentStore.getStreamSegmentInfo(streamSegmentName, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> createStreamSegment(String streamSegmentName, Collection<AttributeUpdate> attributes, Duration timeout) {\n+        segments.add(streamSegmentName); // Add the segmentName to the set\n+        return this.streamSegmentStore.createStreamSegment(streamSegmentName, attributes, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<MergeStreamSegmentResult> mergeStreamSegment(String targetStreamSegment, String sourceStreamSegment, Duration timeout) {\n+        return this.streamSegmentStore.mergeStreamSegment(targetStreamSegment, sourceStreamSegment, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Long> sealStreamSegment(String streamSegmentName, Duration timeout) {\n+        return this.streamSegmentStore.sealStreamSegment(streamSegmentName, timeout);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> deleteStreamSegment(String streamSegmentName, Duration timeout) {\n+        if (segments.contains(streamSegmentName)) { // Remove the segmentName from the set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDExNw==", "bodyText": "Same comments as in the StreamSegmentStoreWrapper.\nQuestion: can we merge these classes into a single one? They do the same thing, but implement different interfaces.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456590117", "createdAt": "2020-07-17T17:54:31Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/tables/TableStoreWrapper.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts.tables;\n+\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.BufferView;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A wrapper class to TableStore to track the segments being created or deleted.\n+ */\n+public class TableStoreWrapper implements TableStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDU5OQ==", "bodyText": "Why is this \"out of concern\"? If it's broken, please add a link to a GitHub issue that tracks its implementation.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456590599", "createdAt": "2020-07-17T17:55:16Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/ExtendedS3IntegrationTest.java", "diffHunk": "@@ -74,6 +74,13 @@ protected ServiceBuilder createBuilder(ServiceBuilderConfig.Builder configBuilde\n                         getBookkeeper().getZkClient(), setup.getCoreExecutor()));\n     }\n \n+    /**\n+     * This method intentionally left blank as it's out of concern for ExtendedS3 Storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTEzMQ==", "bodyText": "Javadoc.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456591131", "createdAt": "2020-07-17T17:56:15Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/DebugSegmentContainer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface DebugSegmentContainer extends SegmentContainer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTc3Mg==", "bodyText": "DebugStreamSegmentContainer class", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456591772", "createdAt": "2020-07-17T17:57:18Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.server.DebugSegmentContainer;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+@Slf4j\n+public class DebugStreamSegmentContainer extends StreamSegmentContainer implements DebugSegmentContainer {\n+    private static final Duration TIMEOUT = Duration.ofMinutes(1);\n+    private final ContainerConfig config;\n+\n+    /**\n+     * Creates a new instance of the StreamSegmentContainer class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTg0MA==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456591840", "createdAt": "2020-07-17T17:57:25Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.server.DebugSegmentContainer;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+@Slf4j\n+public class DebugStreamSegmentContainer extends StreamSegmentContainer implements DebugSegmentContainer {\n+    private static final Duration TIMEOUT = Duration.ofMinutes(1);\n+    private final ContainerConfig config;\n+\n+    /**\n+     * Creates a new instance of the StreamSegmentContainer class.\n+     *\n+     * @param streamSegmentContainerId The Id of the StreamSegmentContainer.\n+     * @param config                   The ContainerConfig to use for this StreamSegmentContainer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MjY5MA==", "bodyText": "Let's rename this to \"registerExistingSegment` to emphasize that the Segment already exists and that we are not actually \"creating\" it.\nPlease explain in the Javadoc what this method is doing and what its outcome is.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456592690", "createdAt": "2020-07-17T17:58:58Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/DebugSegmentContainer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface DebugSegmentContainer extends SegmentContainer {\n+    CompletableFuture<Void> createStreamSegment(String streamSegmentName, long length, boolean isSealed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5Mjk5NA==", "bodyText": "Move this to the interface Javadoc (and explain more what it is doing).", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456592994", "createdAt": "2020-07-17T17:59:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.server.DebugSegmentContainer;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+@Slf4j\n+public class DebugStreamSegmentContainer extends StreamSegmentContainer implements DebugSegmentContainer {\n+    private static final Duration TIMEOUT = Duration.ofMinutes(1);\n+    private final ContainerConfig config;\n+\n+    /**\n+     * Creates a new instance of the StreamSegmentContainer class.\n+     *\n+     * @param streamSegmentContainerId The Id of the StreamSegmentContainer.\n+     * @param config                   The ContainerConfig to use for this StreamSegmentContainer.\n+     * @param durableLogFactory        The DurableLogFactory to use to create DurableLogs.\n+     * @param readIndexFactory         The ReadIndexFactory to use to create Read Indices.\n+     * @param attributeIndexFactory    The AttributeIndexFactory to use to create Attribute Indices.\n+     * @param writerFactory            The WriterFactory to use to create Writers.\n+     * @param storageFactory           The StorageFactory to use to create Storage Adapters.\n+     * @param createExtensions         A Function that, given an instance of this class, will create the set of\n+     *                                 {@link SegmentContainerExtension}s to be associated with that instance.\n+     * @param executor                 An Executor that can be used to run async tasks.\n+     */\n+    DebugStreamSegmentContainer(int streamSegmentContainerId, ContainerConfig config, OperationLogFactory durableLogFactory,\n+                                ReadIndexFactory readIndexFactory, AttributeIndexFactory attributeIndexFactory,\n+                                WriterFactory writerFactory, StorageFactory storageFactory,\n+                                SegmentContainerFactory.CreateExtensions createExtensions, ScheduledExecutorService executor) {\n+        super(streamSegmentContainerId, config, durableLogFactory, readIndexFactory, attributeIndexFactory, writerFactory,\n+                storageFactory, createExtensions, executor);\n+        this.config = config;\n+    }\n+\n+    /**\n+     * Creates a segment with given properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5Mzc4MQ==", "bodyText": "Create a new method in MetadataStore.SegmentInfo and name it recoveredSegment where you hide away all these details. Then revert back the visibility of both MetadataStore.SegmentInfo and MetadataStore.SegmentInfo.serialize (They are in the same package as this so you don't need the extra public visibility).", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456593781", "createdAt": "2020-07-17T18:00:51Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.server.DebugSegmentContainer;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+@Slf4j\n+public class DebugStreamSegmentContainer extends StreamSegmentContainer implements DebugSegmentContainer {\n+    private static final Duration TIMEOUT = Duration.ofMinutes(1);\n+    private final ContainerConfig config;\n+\n+    /**\n+     * Creates a new instance of the StreamSegmentContainer class.\n+     *\n+     * @param streamSegmentContainerId The Id of the StreamSegmentContainer.\n+     * @param config                   The ContainerConfig to use for this StreamSegmentContainer.\n+     * @param durableLogFactory        The DurableLogFactory to use to create DurableLogs.\n+     * @param readIndexFactory         The ReadIndexFactory to use to create Read Indices.\n+     * @param attributeIndexFactory    The AttributeIndexFactory to use to create Attribute Indices.\n+     * @param writerFactory            The WriterFactory to use to create Writers.\n+     * @param storageFactory           The StorageFactory to use to create Storage Adapters.\n+     * @param createExtensions         A Function that, given an instance of this class, will create the set of\n+     *                                 {@link SegmentContainerExtension}s to be associated with that instance.\n+     * @param executor                 An Executor that can be used to run async tasks.\n+     */\n+    DebugStreamSegmentContainer(int streamSegmentContainerId, ContainerConfig config, OperationLogFactory durableLogFactory,\n+                                ReadIndexFactory readIndexFactory, AttributeIndexFactory attributeIndexFactory,\n+                                WriterFactory writerFactory, StorageFactory storageFactory,\n+                                SegmentContainerFactory.CreateExtensions createExtensions, ScheduledExecutorService executor) {\n+        super(streamSegmentContainerId, config, durableLogFactory, readIndexFactory, attributeIndexFactory, writerFactory,\n+                storageFactory, createExtensions, executor);\n+        this.config = config;\n+    }\n+\n+    /**\n+     * Creates a segment with given properties.\n+     * @param streamSegmentName         Name of the segment to be created.\n+     * @param length                    Length of the segment to be created.\n+     * @param isSealed                  Sealed status of the segment to be created.\n+     * @return                          A newly created segment.\n+     */\n+    @Override\n+    public CompletableFuture<Void> createStreamSegment(String streamSegmentName, long length, boolean isSealed) {\n+        StreamSegmentInformation segmentProp = StreamSegmentInformation.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDIwOQ==", "bodyText": "revert", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456594209", "createdAt": "2020-07-17T18:01:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/MetadataStore.java", "diffHunk": "@@ -685,7 +685,7 @@ void completeExceptionally(Throwable ex) {\n \n     @Data\n     @Builder\n-    protected static class SegmentInfo {\n+    public static class SegmentInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDUxMg==", "bodyText": "Use this in your DebugSegmentContainer above.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456594512", "createdAt": "2020-07-17T18:02:29Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/MetadataStore.java", "diffHunk": "@@ -704,8 +704,16 @@ static SegmentInfo newSegment(String name, Collection<AttributeUpdate> attribute\n                     .build();\n         }\n \n+        // createSegment in Metadata uses this method to get SegmentInfo\n+        static SegmentInfo recoveredSegment(SegmentProperties segmentProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDgwOA==", "bodyText": "This is incorrect. Please make sure you use the code you have in DebugStreamSegmentContainer instead of setting this here.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456594808", "createdAt": "2020-07-17T18:03:02Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/MetadataStore.java", "diffHunk": "@@ -704,8 +704,16 @@ static SegmentInfo newSegment(String name, Collection<AttributeUpdate> attribute\n                     .build();\n         }\n \n+        // createSegment in Metadata uses this method to get SegmentInfo\n+        static SegmentInfo recoveredSegment(SegmentProperties segmentProperties) {\n+            return builder()\n+                    .segmentId(ContainerMetadata.NO_STREAM_SEGMENT_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDg0MA==", "bodyText": "revert", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456594840", "createdAt": "2020-07-17T18:03:08Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/MetadataStore.java", "diffHunk": "@@ -704,8 +704,16 @@ static SegmentInfo newSegment(String name, Collection<AttributeUpdate> attribute\n                     .build();\n         }\n \n+        // createSegment in Metadata uses this method to get SegmentInfo\n+        static SegmentInfo recoveredSegment(SegmentProperties segmentProperties) {\n+            return builder()\n+                    .segmentId(ContainerMetadata.NO_STREAM_SEGMENT_ID)\n+                    .properties(segmentProperties)\n+                    .build();\n+        }\n+\n         @SneakyThrows(IOException.class)\n-        static ArrayView serialize(SegmentInfo state) {\n+        public static ArrayView serialize(SegmentInfo state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NTI4OA==", "bodyText": "throw new UnsupportedOperationException(\"DebugSegmentContainer not supported in ReadOnly mode.\")", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456595288", "createdAt": "2020-07-17T18:04:04Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ReadOnlySegmentContainerFactory.java", "diffHunk": "@@ -41,4 +42,9 @@ public SegmentContainer createStreamSegmentContainer(int containerId) {\n                 \"ReadOnly Containers can only have Id %s.\", READONLY_CONTAINER_ID);\n         return new ReadOnlySegmentContainer(this.storageFactory, this.executor);\n     }\n+\n+    @Override\n+    public DebugSegmentContainer createDebugStreamSegmentContainer(int containerId) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NjU1MA==", "bodyText": "You should never create a thread pool and keep it as a static variable. This pool will never shut down.\nI suggest removing this altogether from here and pass an Executor via your method calls whenever you need one.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456596550", "createdAt": "2020-07-17T18:06:46Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NjY1OA==", "bodyText": "What's tier2?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456596658", "createdAt": "2020-07-17T18:06:59Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5Njg3NQ==", "bodyText": "I don't see the point of this log message.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456596875", "createdAt": "2020-07-17T18:07:30Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NzQ5OA==", "bodyText": "You can combine this line and the second half of line 76 into a single line after this if-else block. You already have a pointer to segmentsList so you can add it afterwards.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456597498", "createdAt": "2020-07-17T18:08:56Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NzYyNw==", "bodyText": "This is not needed. Looks copy pasted from ExecutorServiceHelpers", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456597627", "createdAt": "2020-07-17T18:09:11Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODE1Mg==", "bodyText": "What is this worker and why is it in your test package? Isn't this doing the bulk of your recovery work?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456598152", "createdAt": "2020-07-17T18:10:22Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODMwMA==", "bodyText": "Instead of doing this, check for nulls in the constructor and throw an exception there.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456598300", "createdAt": "2020-07-17T18:10:41Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODcwNA==", "bodyText": "join will not time out. You have a timeout defined somewhere in this class. Use get(timeoutMillis, TimeUnit.MILLISECONDS)", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456598704", "createdAt": "2020-07-17T18:11:34Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODc1Nw==", "bodyText": "And below", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456598757", "createdAt": "2020-07-17T18:11:40Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODcwNA=="}, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5OTQyMw==", "bodyText": "for better clarity, rename this to metadataSegments and make it a Set of String. There's no point in this being a TableKey here.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456599423", "createdAt": "2020-07-17T18:13:03Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5OTU5MQ==", "bodyText": "I suggest renaming this to storageSegments", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456599591", "createdAt": "2020-07-17T18:13:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDAzOQ==", "bodyText": "Why do you attempt to create the segment if it already exists? getStreamSegmentInfo will return a value (not an exception) if it exists.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456600039", "createdAt": "2020-07-17T18:14:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDM4Nw==", "bodyText": "There's a method in Futures (exceptionallyComposeExpecting) that will simplify your code here.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456600387", "createdAt": "2020-07-17T18:15:07Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDUzNA==", "bodyText": "You should fail the whole process here instead of just logging a message.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456600534", "createdAt": "2020-07-17T18:15:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDY4Ng==", "bodyText": "Deleting segment '{}' ...", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456600686", "createdAt": "2020-07-17T18:15:46Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDc3NQ==", "bodyText": "Fail the whole process.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456600775", "createdAt": "2020-07-17T18:16:00Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);\n+                try {\n+                    container.deleteStreamSegment(segmentName, TIMEOUT).join();\n+                } catch (Throwable e) {\n+                    log.error(\"Error while deleting the segment = {}\", segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTAzOQ==", "bodyText": "You won't need this anymore if you implement my suggestion above.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456601039", "createdAt": "2020-07-17T18:16:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);\n+                try {\n+                    container.deleteStreamSegment(segmentName, TIMEOUT).join();\n+                } catch (Throwable e) {\n+                    log.error(\"Error while deleting the segment = {}\", segmentName);\n+                }\n+            }\n+            log.info(\"Recovery done for container = {}\", containerId);\n+        }\n+    }\n+\n+    public static ArrayView getTableKey(String segmentName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTQ0NA==", "bodyText": "Why is this static and public?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456601444", "createdAt": "2020-07-17T18:17:23Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);\n+                try {\n+                    container.deleteStreamSegment(segmentName, TIMEOUT).join();\n+                } catch (Throwable e) {\n+                    log.error(\"Error while deleting the segment = {}\", segmentName);\n+                }\n+            }\n+            log.info(\"Recovery done for container = {}\", containerId);\n+        }\n+    }\n+\n+    public static ArrayView getTableKey(String segmentName) {\n+        return new ByteArraySegment(segmentName.getBytes(Charsets.UTF_8));\n+    }\n+\n+    /**\n+     * Deletes container-metadata segment and attribute index segment for the given container Id.\n+     * @param tier2         Long term storage to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataSegments(Storage tier2, int containerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTgyMw==", "bodyText": "Do not hardcode this format here. Look in TableMetadataStore on how this is obtained.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456601823", "createdAt": "2020-07-17T18:18:10Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);\n+                try {\n+                    container.deleteStreamSegment(segmentName, TIMEOUT).join();\n+                } catch (Throwable e) {\n+                    log.error(\"Error while deleting the segment = {}\", segmentName);\n+                }\n+            }\n+            log.info(\"Recovery done for container = {}\", containerId);\n+        }\n+    }\n+\n+    public static ArrayView getTableKey(String segmentName) {\n+        return new ByteArraySegment(segmentName.getBytes(Charsets.UTF_8));\n+    }\n+\n+    /**\n+     * Deletes container-metadata segment and attribute index segment for the given container Id.\n+     * @param tier2         Long term storage to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataSegments(Storage tier2, int containerId) {\n+        deleteSegment(tier2, \"_system/containers/metadata_\" + containerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTk4MQ==", "bodyText": "Same here. Why public and static?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456601981", "createdAt": "2020-07-17T18:18:28Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);\n+                try {\n+                    container.deleteStreamSegment(segmentName, TIMEOUT).join();\n+                } catch (Throwable e) {\n+                    log.error(\"Error while deleting the segment = {}\", segmentName);\n+                }\n+            }\n+            log.info(\"Recovery done for container = {}\", containerId);\n+        }\n+    }\n+\n+    public static ArrayView getTableKey(String segmentName) {\n+        return new ByteArraySegment(segmentName.getBytes(Charsets.UTF_8));\n+    }\n+\n+    /**\n+     * Deletes container-metadata segment and attribute index segment for the given container Id.\n+     * @param tier2         Long term storage to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataSegments(Storage tier2, int containerId) {\n+        deleteSegment(tier2, \"_system/containers/metadata_\" + containerId);\n+        deleteSegment(tier2, \"_system/containers/metadata_\" + containerId + \"$attributes.index\");\n+    }\n+\n+    /**\n+     * Deletes the segment with given segment name from the given long term storage.\n+     * @param tier2         Long term storage to delete the segment from.\n+     * @param segmentName   Name of the segment to be deleted.\n+     */\n+    public static void deleteSegment(Storage tier2, String segmentName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMjA0Mg==", "bodyText": "And what's tier2?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456602042", "createdAt": "2020-07-17T18:18:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);\n+                try {\n+                    container.deleteStreamSegment(segmentName, TIMEOUT).join();\n+                } catch (Throwable e) {\n+                    log.error(\"Error while deleting the segment = {}\", segmentName);\n+                }\n+            }\n+            log.info(\"Recovery done for container = {}\", containerId);\n+        }\n+    }\n+\n+    public static ArrayView getTableKey(String segmentName) {\n+        return new ByteArraySegment(segmentName.getBytes(Charsets.UTF_8));\n+    }\n+\n+    /**\n+     * Deletes container-metadata segment and attribute index segment for the given container Id.\n+     * @param tier2         Long term storage to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataSegments(Storage tier2, int containerId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTQ0NA=="}, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMjE0Ng==", "bodyText": "Let the exception bubble up", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456602146", "createdAt": "2020-07-17T18:18:46Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/DataRecoveryTestUtils.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server;\n+\n+import com.google.common.base.Charsets;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+\n+import static io.pravega.shared.NameUtils.getMetadataSegmentName;\n+\n+/**\n+ * Utility methods for data recovery tests.\n+ */\n+@Slf4j\n+public class DataRecoveryTestUtils {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final ScheduledExecutorService EXECUTOR_SERVICE = createExecutorService(10);\n+\n+    /**\n+     * Lists all segments from a given long term storage.\n+     * @param tier2             Long term storage.\n+     * @param containerCount    Total number of segment containers.\n+     * @return                  A map of lists containing segments by container Ids.\n+     * @throws                  IOException in case of exception during the execution.\n+     */\n+    public static Map<Integer, List<SegmentProperties>> listAllSegments(Storage tier2, int containerCount) throws IOException {\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        Map<Integer, List<SegmentProperties>> segmentToContainers = new HashMap<Integer, List<SegmentProperties>>();\n+        log.info(\"Generating container files with the segments they own...\");\n+        Iterator<SegmentProperties> it = tier2.listSegments();\n+        if (it == null) {\n+            return segmentToContainers;\n+        }\n+        // Iterate through all segments. Put each one of them in its respective list.\n+        while (it.hasNext()) {\n+            SegmentProperties curr = it.next();\n+            int containerId = segToConMapper.getContainerId(curr.getName());\n+            List<SegmentProperties> segmentsList = segmentToContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(curr);\n+                segmentToContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentToContainers.get(containerId).add(curr);\n+            }\n+        }\n+        return segmentToContainers;\n+    }\n+\n+    public static ScheduledExecutorService createExecutorService(int threadPoolSize) {\n+        ScheduledThreadPoolExecutor es = new ScheduledThreadPoolExecutor(threadPoolSize);\n+        es.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+        es.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        es.setRemoveOnCancelPolicy(true);\n+        return es;\n+    }\n+\n+     /**\n+     * Creates all segments given in the list with the given DebugStreamSegmentContainer.\n+     */\n+     public static class Worker implements Runnable {\n+        private final int containerId;\n+        private final DebugStreamSegmentContainer container;\n+        private final List<SegmentProperties> segments;\n+        public Worker(DebugStreamSegmentContainer container, List<SegmentProperties> segments) {\n+            this.container = container;\n+            this.containerId = container.getId();\n+            this.segments = segments;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (segments == null) {\n+                return;\n+            }\n+            log.info(\"Recovery started for container = {}\", containerId);\n+            ContainerTableExtension ext = container.getExtension(ContainerTableExtension.class);\n+            AsyncIterator<IteratorItem<TableKey>> it = ext.keyIterator(getMetadataSegmentName(containerId),\n+                    IteratorArgs.builder().fetchTimeout(TIMEOUT).build()).join();\n+\n+            // Add all segments present in the container metadata in a set.\n+            Set<TableKey> segmentsInMD = new HashSet<>();\n+            it.forEachRemaining(k -> segmentsInMD.addAll(k.getEntries()), EXECUTOR_SERVICE).join();\n+\n+            for (SegmentProperties segment : segments) {\n+                long len = segment.getLength();\n+                boolean isSealed = segment.isSealed();\n+                String segmentName = segment.getName();\n+\n+                /*\n+                    1. segment exists in both metadata and storage, re-create it\n+                    2. segment only in metadata, delete\n+                    3. segment only in storage, re-create it\n+                 */\n+                segmentsInMD.remove(TableKey.unversioned(getTableKey(segmentName)));\n+                container.getStreamSegmentInfo(segment.getName(), TIMEOUT)\n+                        .thenAccept(e -> {\n+                            container.createStreamSegment(segmentName, len, isSealed)\n+                                    .exceptionally(ex -> {\n+                                        log.error(\"Exception occurred while creating segment\", ex);\n+                                        return null;\n+                                    }).join();\n+                        })\n+                        .exceptionally(e -> {\n+                            log.error(\"Got an exception on getStreamSegmentInfo\", e);\n+                            if (Exceptions.unwrap(e) instanceof StreamSegmentNotExistsException) {\n+                                container.createStreamSegment(segmentName, len, isSealed)\n+                                        .exceptionally(ex -> {\n+                                            log.error(\"Exception occurred while creating segment\", ex);\n+                                            return null;\n+                                        }).join();\n+                            }\n+                            return null;\n+                        }).join();\n+            }\n+            for (TableKey k : segmentsInMD) {\n+                String segmentName = k.getKey().toString();\n+                log.info(\"Deleting segment : {} as it is not in storage\", segmentName);\n+                try {\n+                    container.deleteStreamSegment(segmentName, TIMEOUT).join();\n+                } catch (Throwable e) {\n+                    log.error(\"Error while deleting the segment = {}\", segmentName);\n+                }\n+            }\n+            log.info(\"Recovery done for container = {}\", containerId);\n+        }\n+    }\n+\n+    public static ArrayView getTableKey(String segmentName) {\n+        return new ByteArraySegment(segmentName.getBytes(Charsets.UTF_8));\n+    }\n+\n+    /**\n+     * Deletes container-metadata segment and attribute index segment for the given container Id.\n+     * @param tier2         Long term storage to delete the segments from.\n+     * @param containerId   Id of the container for which the segments has to be deleted.\n+     */\n+    public static void deleteContainerMetadataSegments(Storage tier2, int containerId) {\n+        deleteSegment(tier2, \"_system/containers/metadata_\" + containerId);\n+        deleteSegment(tier2, \"_system/containers/metadata_\" + containerId + \"$attributes.index\");\n+    }\n+\n+    /**\n+     * Deletes the segment with given segment name from the given long term storage.\n+     * @param tier2         Long term storage to delete the segment from.\n+     * @param segmentName   Name of the segment to be deleted.\n+     */\n+    public static void deleteSegment(Storage tier2, String segmentName) {\n+        try {\n+            SegmentHandle segmentHandle = tier2.openWrite(segmentName).join();\n+            tier2.delete(segmentHandle, TIMEOUT).join();\n+        } catch (Throwable e) {\n+            log.info(\"Error while deleting segment: {}\", segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMjI2Mw==", "bodyText": "throw unsupported", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456602263", "createdAt": "2020-07-17T18:19:02Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentContainerRegistryTests.java", "diffHunk": "@@ -249,6 +250,11 @@ public void testStartAlreadyRunning() throws Exception {\n             this.startReleaseSignal = startReleaseSignal;\n         }\n \n+        @Override\n+        public DebugSegmentContainer createDebugStreamSegmentContainer(int containerId) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMzA2MA==", "bodyText": "If you rename the parent method, remember to rename this test too.\nAlso, it's a good habit to describe in the test's Javadoc what it's doing.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456603060", "createdAt": "2020-07-17T18:20:49Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMzg4Mw==", "bodyText": "If you do this, the original exception will never show up in your test result. Remove this try-catch and let the exception bubble up.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456603883", "createdAt": "2020-07-17T18:22:39Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNDMxNg==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456604316", "createdAt": "2020-07-17T18:23:38Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");\n+            }\n+        }\n+\n+        // Keeps count of segments recovered in all container Ids.\n+        int segmentsRecoveredCount = 0;\n+\n+        // List all segments\n+        Map<Integer, List<SegmentProperties>> segments = null;\n+        try {\n+            segments = DataRecoveryTestUtils.listAllSegments(new AsyncStorageWrapper(s,\n+                    DataRecoveryTestUtils.createExecutorService(10)), containerCount);\n+        } catch (IOException e) {\n+            Assert.fail(\"Exception occurred while listing segments.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNDQxNQ==", "bodyText": "Why do you create a random executor here?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456604415", "createdAt": "2020-07-17T18:23:52Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");\n+            }\n+        }\n+\n+        // Keeps count of segments recovered in all container Ids.\n+        int segmentsRecoveredCount = 0;\n+\n+        // List all segments\n+        Map<Integer, List<SegmentProperties>> segments = null;\n+        try {\n+            segments = DataRecoveryTestUtils.listAllSegments(new AsyncStorageWrapper(s,\n+                    DataRecoveryTestUtils.createExecutorService(10)), containerCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNDUzNA==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456604534", "createdAt": "2020-07-17T18:24:07Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");\n+            }\n+        }\n+\n+        // Keeps count of segments recovered in all container Ids.\n+        int segmentsRecoveredCount = 0;\n+\n+        // List all segments\n+        Map<Integer, List<SegmentProperties>> segments = null;\n+        try {\n+            segments = DataRecoveryTestUtils.listAllSegments(new AsyncStorageWrapper(s,\n+                    DataRecoveryTestUtils.createExecutorService(10)), containerCount);\n+        } catch (IOException e) {\n+            Assert.fail(\"Exception occurred while listing segments.\");\n+        }\n+\n+        // Verify count of segments listed.\n+        for (int i = 0; i < segments.size(); i++) {\n+            segmentsRecoveredCount += segments.get(i).size();\n+            Assert.assertTrue(\"Number of segments listed is less than the number of segments created using this container.\",\n+                    segments.get(i).size() >= segmentsCountByContainer[i]);\n+        }\n+        Assert.assertTrue(\"Total number of segments created is less than the number of segments created.\",\n+                segmentsRecoveredCount >= segmentsToCreateCount);\n+\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory,\n+                DataRecoveryTestUtils.createExecutorService(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNDYxNA==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456604614", "createdAt": "2020-07-17T18:24:17Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");\n+            }\n+        }\n+\n+        // Keeps count of segments recovered in all container Ids.\n+        int segmentsRecoveredCount = 0;\n+\n+        // List all segments\n+        Map<Integer, List<SegmentProperties>> segments = null;\n+        try {\n+            segments = DataRecoveryTestUtils.listAllSegments(new AsyncStorageWrapper(s,\n+                    DataRecoveryTestUtils.createExecutorService(10)), containerCount);\n+        } catch (IOException e) {\n+            Assert.fail(\"Exception occurred while listing segments.\");\n+        }\n+\n+        // Verify count of segments listed.\n+        for (int i = 0; i < segments.size(); i++) {\n+            segmentsRecoveredCount += segments.get(i).size();\n+            Assert.assertTrue(\"Number of segments listed is less than the number of segments created using this container.\",\n+                    segments.get(i).size() >= segmentsCountByContainer[i]);\n+        }\n+        Assert.assertTrue(\"Total number of segments created is less than the number of segments created.\",\n+                segmentsRecoveredCount >= segmentsToCreateCount);\n+\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory,\n+                DataRecoveryTestUtils.createExecutorService(10));\n+\n+        // Recover all segments\n+        for (int containerId = 0; containerId < containerCount; containerId++) {\n+            @Cleanup\n+            MetadataCleanupContainer localContainer = new MetadataCleanupContainer(containerId, CONTAINER_CONFIG, localDurableLogFactory,\n+                    context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                    context.getDefaultExtensions(), DataRecoveryTestUtils.createExecutorService(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNDk3Ng==", "bodyText": "Replace this whole if block with Assert.assertEquals.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456604976", "createdAt": "2020-07-17T18:24:57Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");\n+            }\n+        }\n+\n+        // Keeps count of segments recovered in all container Ids.\n+        int segmentsRecoveredCount = 0;\n+\n+        // List all segments\n+        Map<Integer, List<SegmentProperties>> segments = null;\n+        try {\n+            segments = DataRecoveryTestUtils.listAllSegments(new AsyncStorageWrapper(s,\n+                    DataRecoveryTestUtils.createExecutorService(10)), containerCount);\n+        } catch (IOException e) {\n+            Assert.fail(\"Exception occurred while listing segments.\");\n+        }\n+\n+        // Verify count of segments listed.\n+        for (int i = 0; i < segments.size(); i++) {\n+            segmentsRecoveredCount += segments.get(i).size();\n+            Assert.assertTrue(\"Number of segments listed is less than the number of segments created using this container.\",\n+                    segments.get(i).size() >= segmentsCountByContainer[i]);\n+        }\n+        Assert.assertTrue(\"Total number of segments created is less than the number of segments created.\",\n+                segmentsRecoveredCount >= segmentsToCreateCount);\n+\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory,\n+                DataRecoveryTestUtils.createExecutorService(10));\n+\n+        // Recover all segments\n+        for (int containerId = 0; containerId < containerCount; containerId++) {\n+            @Cleanup\n+            MetadataCleanupContainer localContainer = new MetadataCleanupContainer(containerId, CONTAINER_CONFIG, localDurableLogFactory,\n+                    context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                    context.getDefaultExtensions(), DataRecoveryTestUtils.createExecutorService(10));\n+\n+            Services.startAsync(localContainer, executorService)\n+                    .thenRun(new DataRecoveryTestUtils.Worker(localContainer, segments.get(containerId))).join();\n+\n+            for (String segmentName : segmentByContainers.get(containerId)) {\n+                SegmentProperties props = localContainer.getStreamSegmentInfo(segmentName, TIMEOUT).join();\n+                Assert.assertEquals(\"Segment length mismatch \", data.length, props.getLength());\n+                if (sealedSegments.contains(segmentName)) {\n+                    Assert.assertTrue(\"Segment should have been sealed\", props.isSealed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNTMzNQ==", "bodyText": "localContainer.close() will do the same", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456605335", "createdAt": "2020-07-17T18:25:42Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");\n+            }\n+        }\n+\n+        // Keeps count of segments recovered in all container Ids.\n+        int segmentsRecoveredCount = 0;\n+\n+        // List all segments\n+        Map<Integer, List<SegmentProperties>> segments = null;\n+        try {\n+            segments = DataRecoveryTestUtils.listAllSegments(new AsyncStorageWrapper(s,\n+                    DataRecoveryTestUtils.createExecutorService(10)), containerCount);\n+        } catch (IOException e) {\n+            Assert.fail(\"Exception occurred while listing segments.\");\n+        }\n+\n+        // Verify count of segments listed.\n+        for (int i = 0; i < segments.size(); i++) {\n+            segmentsRecoveredCount += segments.get(i).size();\n+            Assert.assertTrue(\"Number of segments listed is less than the number of segments created using this container.\",\n+                    segments.get(i).size() >= segmentsCountByContainer[i]);\n+        }\n+        Assert.assertTrue(\"Total number of segments created is less than the number of segments created.\",\n+                segmentsRecoveredCount >= segmentsToCreateCount);\n+\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory,\n+                DataRecoveryTestUtils.createExecutorService(10));\n+\n+        // Recover all segments\n+        for (int containerId = 0; containerId < containerCount; containerId++) {\n+            @Cleanup\n+            MetadataCleanupContainer localContainer = new MetadataCleanupContainer(containerId, CONTAINER_CONFIG, localDurableLogFactory,\n+                    context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                    context.getDefaultExtensions(), DataRecoveryTestUtils.createExecutorService(10));\n+\n+            Services.startAsync(localContainer, executorService)\n+                    .thenRun(new DataRecoveryTestUtils.Worker(localContainer, segments.get(containerId))).join();\n+\n+            for (String segmentName : segmentByContainers.get(containerId)) {\n+                SegmentProperties props = localContainer.getStreamSegmentInfo(segmentName, TIMEOUT).join();\n+                Assert.assertEquals(\"Segment length mismatch \", data.length, props.getLength());\n+                if (sealedSegments.contains(segmentName)) {\n+                    Assert.assertTrue(\"Segment should have been sealed\", props.isSealed());\n+                }\n+            }\n+            Services.stopAsync(localContainer, executorService).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNTUzMA==", "bodyText": "Do you actually need this?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456605530", "createdAt": "2020-07-17T18:26:07Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.containers;\n+\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerFactory;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogFactory;\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.SyncStorage;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.mocks.InMemoryDurableDataLogFactory;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorageFactory;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.segment.SegmentToContainerMapper;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Tests for DebugStreamSegmentContainer class.\n+ */\n+public class DebugStreamSegmentContainerTests extends ThreadPooledTestSuite {\n+    private static final int MIN_SEGMENT_LENGTH = 0; // Used in randomly generating the length for a segment\n+    private static final int MAX_SEGMENT_LENGTH = 10100; // Used in randomly generating the length for a segment\n+    private static final int CONTAINER_ID = 1234567;\n+    private static final int EXPECTED_PINNED_SEGMENT_COUNT = 1;\n+    private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+    private static final int TEST_TIMEOUT_MILLIS = 10 * 1000;\n+    private static final Duration TIMEOUT = Duration.ofMillis(TEST_TIMEOUT_MILLIS);\n+    private static final Random RANDOM = new Random(1234);\n+    private static final ContainerConfig DEFAULT_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, 10 * 60)\n+            .build();\n+\n+    private static final DurableLogConfig DEFAULT_DURABLE_LOG_CONFIG = DurableLogConfig\n+            .builder()\n+            .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+            .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+            .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10 * 1024 * 1024L)\n+            .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+            .build();\n+\n+    private static final ReadIndexConfig DEFAULT_READ_INDEX_CONFIG = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+    private static final AttributeIndexConfig DEFAULT_ATTRIBUTE_INDEX_CONFIG = AttributeIndexConfig\n+            .builder()\n+            .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+            .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+            .build();\n+\n+    private static final WriterConfig DEFAULT_WRITER_CONFIG = WriterConfig\n+            .builder()\n+            .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+            .with(WriterConfig.FLUSH_ATTRIBUTES_THRESHOLD, 3)\n+            .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+            .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+            .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+            .build();\n+    private static final ContainerConfig CONTAINER_CONFIG = ContainerConfig\n+            .builder()\n+            .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+            .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 200 + EXPECTED_PINNED_SEGMENT_COUNT)\n+            .build();\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.millis(TEST_TIMEOUT_MILLIS);\n+\n+    /**\n+     * Tests the ability to create Segments.\n+     */\n+    @Test\n+    public void testCreateStreamSegment() {\n+        int maxSegmentCount = 100;\n+        final int createdSegmentCount = maxSegmentCount * 2;\n+\n+        // Sets up dataLogFactory, readIndexFactory, attributeIndexFactory etc for the DebugSegmentContainer.\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory, executorService());\n+        // Starts a DebugSegmentContainer.\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(CONTAINER_ID, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        localContainer.startAsync().awaitRunning();\n+\n+        // Record details(name, length & sealed status) of each segment to be created.\n+        ArrayList<String> segments = new ArrayList<>();\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        long[] segmentLengths = new long[createdSegmentCount];\n+        boolean[] segmentSealedStatus = new boolean[createdSegmentCount];\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            segmentLengths[i] = MIN_SEGMENT_LENGTH + RANDOM.nextInt(MAX_SEGMENT_LENGTH - MIN_SEGMENT_LENGTH);\n+            segmentSealedStatus[i] = RANDOM.nextBoolean();\n+            String name = \"Segment_\" + i;\n+            segments.add(name);\n+            futures.add(localContainer.createStreamSegment(name, segmentLengths[i], segmentSealedStatus[i]));\n+        }\n+        Futures.allOf(futures).join();\n+\n+        // Verify the Segments are still there with their length & sealed status.\n+        for (int i = 0; i < createdSegmentCount; i++) {\n+            SegmentProperties props = localContainer.getStreamSegmentInfo(segments.get(i), TIMEOUT).join();\n+            Assert.assertEquals(\"Segment length mismatch \", segmentLengths[i], props.getLength());\n+            Assert.assertEquals(\"Segment sealed status mismatch\", segmentSealedStatus[i], props.isSealed());\n+        }\n+        localContainer.stopAsync().awaitTerminated();\n+    }\n+\n+    /**\n+     * Use a storage instance to create segments. List the segments from the storage and recreate them.\n+     */\n+    @Test\n+    public void testEndToEnd() {\n+        // Segments are mapped to four different containers.\n+        // DebugSegmentContainer for each container Id is created and segments belonging to that container are recovered.\n+        int containerCount = 4;\n+        int segmentsToCreateCount = 50;\n+\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage = new InMemoryStorage();\n+        @Cleanup\n+        val s = new RollingStorage(baseStorage, new SegmentRollingPolicy(1));\n+        s.initialize(1);\n+\n+        // Record details(name, container Id & sealed status) of each segment to be created.\n+        Set<String> sealedSegments = new HashSet<>();\n+        byte[] data = \"data\".getBytes();\n+        SegmentToContainerMapper segToConMapper = new SegmentToContainerMapper(containerCount);\n+        int[] segmentsCountByContainer = new int[containerCount];\n+        Map<Integer, ArrayList<String>> segmentByContainers = new HashMap<>();\n+\n+        // Create segments and get their container Ids, sealed status and names to verify.\n+        for (int i = 0; i < segmentsToCreateCount; i++) {\n+            String segmentName = \"segment-\" + RANDOM.nextInt();\n+\n+            // Count segments by each container Id.\n+            segmentsCountByContainer[segToConMapper.getContainerId(segmentName)]++;\n+\n+            // Use segmentName to map to different containers.\n+            int containerId = segToConMapper.getContainerId(segmentName);\n+            ArrayList<String> segmentsList = segmentByContainers.get(containerId);\n+            if (segmentsList == null) {\n+                segmentsList = new ArrayList<>();\n+                segmentsList.add(segmentName);\n+                segmentByContainers.put(containerId, segmentsList);\n+            } else {\n+                segmentByContainers.get(containerId).add(segmentName);\n+            }\n+\n+            // Create segments, write data and randomly seal some of them.\n+            try {\n+                val wh1 = s.create(segmentName);\n+                // Write data.\n+                s.write(wh1, 0, new ByteArrayInputStream(data), data.length);\n+                if (RANDOM.nextInt(2) == 1) {\n+                    s.seal(wh1);\n+                    sealedSegments.add(segmentName);\n+                }\n+            } catch (StreamSegmentException e) {\n+                Assert.fail(\"Exception occurred while test execution.\");\n+            }\n+        }\n+\n+        // Keeps count of segments recovered in all container Ids.\n+        int segmentsRecoveredCount = 0;\n+\n+        // List all segments\n+        Map<Integer, List<SegmentProperties>> segments = null;\n+        try {\n+            segments = DataRecoveryTestUtils.listAllSegments(new AsyncStorageWrapper(s,\n+                    DataRecoveryTestUtils.createExecutorService(10)), containerCount);\n+        } catch (IOException e) {\n+            Assert.fail(\"Exception occurred while listing segments.\");\n+        }\n+\n+        // Verify count of segments listed.\n+        for (int i = 0; i < segments.size(); i++) {\n+            segmentsRecoveredCount += segments.get(i).size();\n+            Assert.assertTrue(\"Number of segments listed is less than the number of segments created using this container.\",\n+                    segments.get(i).size() >= segmentsCountByContainer[i]);\n+        }\n+        Assert.assertTrue(\"Total number of segments created is less than the number of segments created.\",\n+                segmentsRecoveredCount >= segmentsToCreateCount);\n+\n+        @Cleanup\n+        TestContext context = createContext();\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory,\n+                DataRecoveryTestUtils.createExecutorService(10));\n+\n+        // Recover all segments\n+        for (int containerId = 0; containerId < containerCount; containerId++) {\n+            @Cleanup\n+            MetadataCleanupContainer localContainer = new MetadataCleanupContainer(containerId, CONTAINER_CONFIG, localDurableLogFactory,\n+                    context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                    context.getDefaultExtensions(), DataRecoveryTestUtils.createExecutorService(10));\n+\n+            Services.startAsync(localContainer, executorService)\n+                    .thenRun(new DataRecoveryTestUtils.Worker(localContainer, segments.get(containerId))).join();\n+\n+            for (String segmentName : segmentByContainers.get(containerId)) {\n+                SegmentProperties props = localContainer.getStreamSegmentInfo(segmentName, TIMEOUT).join();\n+                Assert.assertEquals(\"Segment length mismatch \", data.length, props.getLength());\n+                if (sealedSegments.contains(segmentName)) {\n+                    Assert.assertTrue(\"Segment should have been sealed\", props.isSealed());\n+                }\n+            }\n+            Services.stopAsync(localContainer, executorService).join();\n+        }\n+    }\n+\n+    public static class MetadataCleanupContainer extends DebugStreamSegmentContainer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNjIyNg==", "bodyText": "You already have this defined in your configBuilder object", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456606226", "createdAt": "2020-07-17T18:27:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -146,7 +178,98 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * Tests an end-to-end scenario for the DebugSegmentContainer. SegmentStore creates some segments and then only \n+     * persisted storage is used to re-create all segments.\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    public void testDataRecovery() throws Exception {\n+        endToEndDebugSegmentContainer();\n+    }\n+\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {\n+        int containerCount = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNjUwMg==", "bodyText": "tier2", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456606502", "createdAt": "2020-07-17T18:27:58Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -146,7 +178,98 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * Tests an end-to-end scenario for the DebugSegmentContainer. SegmentStore creates some segments and then only \n+     * persisted storage is used to re-create all segments.\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    public void testDataRecovery() throws Exception {\n+        endToEndDebugSegmentContainer();\n+    }\n+\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {\n+        int containerCount = 4;\n+        ArrayList<String> segmentNames;\n+        HashMap<String, ArrayList<String>> transactionsBySegment;\n+        HashMap<String, Long> lengths = new HashMap<>();\n+        ArrayList<ByteBuf> appendBuffers = new ArrayList<>();\n+        HashMap<String, ByteArrayOutputStream> segmentContents = new HashMap<>();\n+\n+        try (val builder = createBuilder(0);\n+             val readOnlyBuilder = createReadOnlyBuilder()) {\n+            val segmentStore = builder.createStreamSegmentService();\n+            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n+\n+            segmentNames = createSegments(segmentStore);\n+            log.info(\"Created Segments: {}.\", String.join(\", \", segmentNames));\n+            transactionsBySegment = createTransactions(segmentNames, segmentStore);\n+            log.info(\"Created Transactions: {}.\", transactionsBySegment.values().stream().flatMap(Collection::stream).collect(Collectors.joining(\", \")));\n+\n+            // Add some appends and seal segments\n+            ArrayList<String> segmentsAndTransactions = new ArrayList<>(segmentNames);\n+            transactionsBySegment.values().forEach(segmentsAndTransactions::addAll);\n+            appendData(segmentsAndTransactions, segmentContents, lengths, appendBuffers, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished appending data.\");\n+\n+            // Wait for flushing the segments to tier2\n+            waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished waiting for segments in Storage.\");\n+\n+            // Get the persistent storage from readOnlySegmentStore.\n+            Storage tier2 = getReadOnlyStorageFactory().createStorageAdapter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNzAyNg==", "bodyText": "I suggest you move this to private final fields on top of this class and name them appropriately", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456607026", "createdAt": "2020-07-17T18:28:58Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -146,7 +178,98 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * Tests an end-to-end scenario for the DebugSegmentContainer. SegmentStore creates some segments and then only \n+     * persisted storage is used to re-create all segments.\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    public void testDataRecovery() throws Exception {\n+        endToEndDebugSegmentContainer();\n+    }\n+\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {\n+        int containerCount = 4;\n+        ArrayList<String> segmentNames;\n+        HashMap<String, ArrayList<String>> transactionsBySegment;\n+        HashMap<String, Long> lengths = new HashMap<>();\n+        ArrayList<ByteBuf> appendBuffers = new ArrayList<>();\n+        HashMap<String, ByteArrayOutputStream> segmentContents = new HashMap<>();\n+\n+        try (val builder = createBuilder(0);\n+             val readOnlyBuilder = createReadOnlyBuilder()) {\n+            val segmentStore = builder.createStreamSegmentService();\n+            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n+\n+            segmentNames = createSegments(segmentStore);\n+            log.info(\"Created Segments: {}.\", String.join(\", \", segmentNames));\n+            transactionsBySegment = createTransactions(segmentNames, segmentStore);\n+            log.info(\"Created Transactions: {}.\", transactionsBySegment.values().stream().flatMap(Collection::stream).collect(Collectors.joining(\", \")));\n+\n+            // Add some appends and seal segments\n+            ArrayList<String> segmentsAndTransactions = new ArrayList<>(segmentNames);\n+            transactionsBySegment.values().forEach(segmentsAndTransactions::addAll);\n+            appendData(segmentsAndTransactions, segmentContents, lengths, appendBuffers, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished appending data.\");\n+\n+            // Wait for flushing the segments to tier2\n+            waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished waiting for segments in Storage.\");\n+\n+            // Get the persistent storage from readOnlySegmentStore.\n+            Storage tier2 = getReadOnlyStorageFactory().createStorageAdapter();\n+\n+            // Delete container metadata segment and attribute index segment for each container Id from the persistent storage.\n+            for (int containerId = 0; containerId < containerCount; containerId++) {\n+                DataRecoveryTestUtils.deleteContainerMetadataSegments(tier2, containerId);\n+            }\n+\n+            // List all segments from the long term storage.\n+            Map<Integer, List<SegmentProperties>> segments = DataRecoveryTestUtils.listAllSegments(tier2, containerCount);\n+\n+            // Configurations for DebugSegmentContainer\n+            final ContainerConfig containerConfig = ContainerConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNzEzMA==", "bodyText": "why create a new executor?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456607130", "createdAt": "2020-07-17T18:29:10Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -146,7 +178,98 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * Tests an end-to-end scenario for the DebugSegmentContainer. SegmentStore creates some segments and then only \n+     * persisted storage is used to re-create all segments.\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    public void testDataRecovery() throws Exception {\n+        endToEndDebugSegmentContainer();\n+    }\n+\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {\n+        int containerCount = 4;\n+        ArrayList<String> segmentNames;\n+        HashMap<String, ArrayList<String>> transactionsBySegment;\n+        HashMap<String, Long> lengths = new HashMap<>();\n+        ArrayList<ByteBuf> appendBuffers = new ArrayList<>();\n+        HashMap<String, ByteArrayOutputStream> segmentContents = new HashMap<>();\n+\n+        try (val builder = createBuilder(0);\n+             val readOnlyBuilder = createReadOnlyBuilder()) {\n+            val segmentStore = builder.createStreamSegmentService();\n+            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n+\n+            segmentNames = createSegments(segmentStore);\n+            log.info(\"Created Segments: {}.\", String.join(\", \", segmentNames));\n+            transactionsBySegment = createTransactions(segmentNames, segmentStore);\n+            log.info(\"Created Transactions: {}.\", transactionsBySegment.values().stream().flatMap(Collection::stream).collect(Collectors.joining(\", \")));\n+\n+            // Add some appends and seal segments\n+            ArrayList<String> segmentsAndTransactions = new ArrayList<>(segmentNames);\n+            transactionsBySegment.values().forEach(segmentsAndTransactions::addAll);\n+            appendData(segmentsAndTransactions, segmentContents, lengths, appendBuffers, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished appending data.\");\n+\n+            // Wait for flushing the segments to tier2\n+            waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished waiting for segments in Storage.\");\n+\n+            // Get the persistent storage from readOnlySegmentStore.\n+            Storage tier2 = getReadOnlyStorageFactory().createStorageAdapter();\n+\n+            // Delete container metadata segment and attribute index segment for each container Id from the persistent storage.\n+            for (int containerId = 0; containerId < containerCount; containerId++) {\n+                DataRecoveryTestUtils.deleteContainerMetadataSegments(tier2, containerId);\n+            }\n+\n+            // List all segments from the long term storage.\n+            Map<Integer, List<SegmentProperties>> segments = DataRecoveryTestUtils.listAllSegments(tier2, containerCount);\n+\n+            // Configurations for DebugSegmentContainer\n+            final ContainerConfig containerConfig = ContainerConfig\n+                    .builder()\n+                    .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+                    .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 100)\n+                    .build();\n+            final DurableLogConfig durableLogConfig = DurableLogConfig\n+                    .builder()\n+                    .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                    .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                    .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024)\n+                    .build();\n+\n+            // Create the environment for DebugSegmentContainer using the given storageFactory.\n+            @Cleanup TestContext context = createContext(getReadOnlyStorageFactory());\n+            OperationLogFactory localDurableLogFactory = new DurableLogFactory(durableLogConfig, context.dataLogFactory,\n+                    DataRecoveryTestUtils.createExecutorService(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNzIxNQ==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456607215", "createdAt": "2020-07-17T18:29:18Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -146,7 +178,98 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * Tests an end-to-end scenario for the DebugSegmentContainer. SegmentStore creates some segments and then only \n+     * persisted storage is used to re-create all segments.\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    public void testDataRecovery() throws Exception {\n+        endToEndDebugSegmentContainer();\n+    }\n+\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {\n+        int containerCount = 4;\n+        ArrayList<String> segmentNames;\n+        HashMap<String, ArrayList<String>> transactionsBySegment;\n+        HashMap<String, Long> lengths = new HashMap<>();\n+        ArrayList<ByteBuf> appendBuffers = new ArrayList<>();\n+        HashMap<String, ByteArrayOutputStream> segmentContents = new HashMap<>();\n+\n+        try (val builder = createBuilder(0);\n+             val readOnlyBuilder = createReadOnlyBuilder()) {\n+            val segmentStore = builder.createStreamSegmentService();\n+            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n+\n+            segmentNames = createSegments(segmentStore);\n+            log.info(\"Created Segments: {}.\", String.join(\", \", segmentNames));\n+            transactionsBySegment = createTransactions(segmentNames, segmentStore);\n+            log.info(\"Created Transactions: {}.\", transactionsBySegment.values().stream().flatMap(Collection::stream).collect(Collectors.joining(\", \")));\n+\n+            // Add some appends and seal segments\n+            ArrayList<String> segmentsAndTransactions = new ArrayList<>(segmentNames);\n+            transactionsBySegment.values().forEach(segmentsAndTransactions::addAll);\n+            appendData(segmentsAndTransactions, segmentContents, lengths, appendBuffers, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished appending data.\");\n+\n+            // Wait for flushing the segments to tier2\n+            waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished waiting for segments in Storage.\");\n+\n+            // Get the persistent storage from readOnlySegmentStore.\n+            Storage tier2 = getReadOnlyStorageFactory().createStorageAdapter();\n+\n+            // Delete container metadata segment and attribute index segment for each container Id from the persistent storage.\n+            for (int containerId = 0; containerId < containerCount; containerId++) {\n+                DataRecoveryTestUtils.deleteContainerMetadataSegments(tier2, containerId);\n+            }\n+\n+            // List all segments from the long term storage.\n+            Map<Integer, List<SegmentProperties>> segments = DataRecoveryTestUtils.listAllSegments(tier2, containerCount);\n+\n+            // Configurations for DebugSegmentContainer\n+            final ContainerConfig containerConfig = ContainerConfig\n+                    .builder()\n+                    .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+                    .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 100)\n+                    .build();\n+            final DurableLogConfig durableLogConfig = DurableLogConfig\n+                    .builder()\n+                    .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                    .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                    .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024)\n+                    .build();\n+\n+            // Create the environment for DebugSegmentContainer using the given storageFactory.\n+            @Cleanup TestContext context = createContext(getReadOnlyStorageFactory());\n+            OperationLogFactory localDurableLogFactory = new DurableLogFactory(durableLogConfig, context.dataLogFactory,\n+                    DataRecoveryTestUtils.createExecutorService(10));\n+\n+            for (int containerId = 0; containerId < containerCount; containerId++) {\n+                // start DebugSegmentContainer with given container Id.\n+                DebugStreamSegmentContainerTests.MetadataCleanupContainer localContainer = new\n+                        DebugStreamSegmentContainerTests.MetadataCleanupContainer(containerId, containerConfig, localDurableLogFactory,\n+                        context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, getReadOnlyStorageFactory(),\n+                        context.getDefaultExtensions(), DataRecoveryTestUtils.createExecutorService(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNzM0OA==", "bodyText": "This is superfluous. The next line does this.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456607348", "createdAt": "2020-07-17T18:29:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -146,7 +178,98 @@ protected boolean appendAfterMerging() {\n         return true;\n     }\n \n-    //endregion\n+    /**\n+     * Tests an end-to-end scenario for the DebugSegmentContainer. SegmentStore creates some segments and then only \n+     * persisted storage is used to re-create all segments.\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    public void testDataRecovery() throws Exception {\n+        endToEndDebugSegmentContainer();\n+    }\n+\n+    /**\n+     * End to end test to verify DebugSegmentContainer process.\n+     * @throws Exception If an exception occurred.\n+     */\n+    public void endToEndDebugSegmentContainer() throws Exception {\n+        int containerCount = 4;\n+        ArrayList<String> segmentNames;\n+        HashMap<String, ArrayList<String>> transactionsBySegment;\n+        HashMap<String, Long> lengths = new HashMap<>();\n+        ArrayList<ByteBuf> appendBuffers = new ArrayList<>();\n+        HashMap<String, ByteArrayOutputStream> segmentContents = new HashMap<>();\n+\n+        try (val builder = createBuilder(0);\n+             val readOnlyBuilder = createReadOnlyBuilder()) {\n+            val segmentStore = builder.createStreamSegmentService();\n+            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n+\n+            segmentNames = createSegments(segmentStore);\n+            log.info(\"Created Segments: {}.\", String.join(\", \", segmentNames));\n+            transactionsBySegment = createTransactions(segmentNames, segmentStore);\n+            log.info(\"Created Transactions: {}.\", transactionsBySegment.values().stream().flatMap(Collection::stream).collect(Collectors.joining(\", \")));\n+\n+            // Add some appends and seal segments\n+            ArrayList<String> segmentsAndTransactions = new ArrayList<>(segmentNames);\n+            transactionsBySegment.values().forEach(segmentsAndTransactions::addAll);\n+            appendData(segmentsAndTransactions, segmentContents, lengths, appendBuffers, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished appending data.\");\n+\n+            // Wait for flushing the segments to tier2\n+            waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+            log.info(\"Finished waiting for segments in Storage.\");\n+\n+            // Get the persistent storage from readOnlySegmentStore.\n+            Storage tier2 = getReadOnlyStorageFactory().createStorageAdapter();\n+\n+            // Delete container metadata segment and attribute index segment for each container Id from the persistent storage.\n+            for (int containerId = 0; containerId < containerCount; containerId++) {\n+                DataRecoveryTestUtils.deleteContainerMetadataSegments(tier2, containerId);\n+            }\n+\n+            // List all segments from the long term storage.\n+            Map<Integer, List<SegmentProperties>> segments = DataRecoveryTestUtils.listAllSegments(tier2, containerCount);\n+\n+            // Configurations for DebugSegmentContainer\n+            final ContainerConfig containerConfig = ContainerConfig\n+                    .builder()\n+                    .with(ContainerConfig.SEGMENT_METADATA_EXPIRATION_SECONDS, (int) DEFAULT_CONFIG.getSegmentMetadataExpiration().getSeconds())\n+                    .with(ContainerConfig.MAX_ACTIVE_SEGMENT_COUNT, 100)\n+                    .build();\n+            final DurableLogConfig durableLogConfig = DurableLogConfig\n+                    .builder()\n+                    .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                    .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                    .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024)\n+                    .build();\n+\n+            // Create the environment for DebugSegmentContainer using the given storageFactory.\n+            @Cleanup TestContext context = createContext(getReadOnlyStorageFactory());\n+            OperationLogFactory localDurableLogFactory = new DurableLogFactory(durableLogConfig, context.dataLogFactory,\n+                    DataRecoveryTestUtils.createExecutorService(10));\n+\n+            for (int containerId = 0; containerId < containerCount; containerId++) {\n+                // start DebugSegmentContainer with given container Id.\n+                DebugStreamSegmentContainerTests.MetadataCleanupContainer localContainer = new\n+                        DebugStreamSegmentContainerTests.MetadataCleanupContainer(containerId, containerConfig, localDurableLogFactory,\n+                        context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, getReadOnlyStorageFactory(),\n+                        context.getDefaultExtensions(), DataRecoveryTestUtils.createExecutorService(10));\n+\n+                // Create all segments under the given container Id .\n+                Services.startAsync(localContainer, executorService)\n+                        .thenRun(new DataRecoveryTestUtils.Worker(localContainer, segments.get(containerId))).join();\n+\n+                // Verify if the segment details match.\n+                for (SegmentProperties segmentProperties : segments.get(containerId)) {\n+                    SegmentProperties props = localContainer.getStreamSegmentInfo(segmentProperties.getName(), TIMEOUT).join();\n+                    Assert.assertEquals(\"Segment length mismatch \", segmentProperties.getLength(), props.getLength());\n+                }\n+                Services.stopAsync(localContainer, executorService).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNzQ2OQ==", "bodyText": "Why do you need this?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456607469", "createdAt": "2020-07-17T18:29:51Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -369,6 +492,10 @@ public void endToEndProcessWithFencing(boolean verifySegmentContent) throws Exce\n \n     //region Helpers\n \n+    private StorageFactory getReadOnlyStorageFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwODEzOA==", "bodyText": "This method has a side effect of setting readOnlyStorageFactory. This is not documented (the documentation says something opposite).\nI don't think you need this.readOnlyBuilder; please rework your code to fetch this value after creating it and then using it where you need it.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456608138", "createdAt": "2020-07-17T18:31:10Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -405,6 +532,28 @@ private ServiceBuilder createReadOnlyBuilder(int instanceId) throws Exception {\n         return builder;\n     }\n \n+    /**\n+     * Creates a ServiceBuilder instance, but also gets the storage Factory used in creating.\n+     * @return              A newly created ServiceBuilder instance.\n+     * @throws Exception    In case of any exception occurred during execution.\n+     */\n+    private ServiceBuilder createReadOnlyBuilder() throws Exception {\n+        // Copy base config properties to a new object.\n+        val props = new Properties();\n+        this.configBuilder.build().forEach(props::put);\n+\n+        // Create a new config (so we don't alter the base one) and set the ReadOnlySegmentStore to true).\n+        val configBuilder = ServiceBuilderConfig.builder()\n+                .include(props)\n+                .include(ServiceConfig.builder()\n+                        .with(ServiceConfig.READONLY_SEGMENT_STORE, true));\n+\n+        val builder = createBuilder(configBuilder, 0);\n+        builder.initialize();\n+        this.readOnlyStorageFactory = builder.getStorageFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwODQ0NQ==", "bodyText": "I've seen these configs somewhere else. Can you combine them into a single one?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456608445", "createdAt": "2020-07-17T18:31:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -1009,4 +1158,60 @@ void createNewInstance() {\n     private interface StoreRequest {\n         CompletableFuture<Void> apply(StreamSegmentStore store);\n     }\n+\n+    public TestContext createContext(StorageFactory storageFactory) {\n+        return new TestContext(storageFactory);\n+    }\n+\n+    public class TestContext implements AutoCloseable {\n+        private static final int MAX_DATA_LOG_APPEND_SIZE = 100 * 1024;\n+        private final StorageFactory storageFactory;\n+        private final DurableDataLogFactory dataLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheStorage cacheStorage;\n+        private final CacheManager cacheManager;\n+        private final ReadIndexConfig defaultReadIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+\n+        private final AttributeIndexConfig defaultAttributeIndexConfig = AttributeIndexConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwODU5NA==", "bodyText": "I don't see unit tests for this.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456608594", "createdAt": "2020-07-17T18:32:08Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -197,6 +197,16 @@ public static String getHeaderSegmentName(String segmentName) {\n         return segmentName + HEADER_SUFFIX;\n     }\n \n+    /**\n+     * Checks whether given name is an Attribute Segment.\n+     *\n+     * @param segmentName   The name of the segment.\n+     * @return              true if the name is Attribute Segment. False otherwise\n+     */\n+    public static boolean isAttributeSegment(String segmentName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwODcwNw==", "bodyText": "Huge timeout", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456608707", "createdAt": "2020-07-17T18:32:22Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwODgwNA==", "bodyText": "provide a seed", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456608804", "createdAt": "2020-07-17T18:32:32Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTE5NA==", "bodyText": "Remove this.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456609194", "createdAt": "2020-07-17T18:33:21Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTI5OQ==", "bodyText": "private", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456609299", "createdAt": "2020-07-17T18:33:33Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTg1Ng==", "bodyText": "Please clean this class up. There are a number of things you hardcoded in here and then you're just proliferating them.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456609856", "createdAt": "2020-07-17T18:34:46Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDEyNg==", "bodyText": "For example, there is no need for security, Remove all that is related to that.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456610126", "createdAt": "2020-07-17T18:35:16Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTg1Ng=="}, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDI2OQ==", "bodyText": "You only have 1 bookie. Simplify your code.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456610269", "createdAt": "2020-07-17T18:35:34Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDU3Ng==", "bodyText": "@Override", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456610576", "createdAt": "2020-07-17T18:36:15Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDc2MQ==", "bodyText": "What's the point of this if it's just invoking the constructor?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456610761", "createdAt": "2020-07-17T18:36:36Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDg5NQ==", "bodyText": "And what's the point of this if it's just invoking the constructor?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456610895", "createdAt": "2020-07-17T18:36:52Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTI5OQ=="}, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMTAyMQ==", "bodyText": "See if you can consolidate all these", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456611021", "createdAt": "2020-07-17T18:37:08Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMTA4NQ==", "bodyText": "Check for nulls.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456611085", "createdAt": "2020-07-17T18:37:19Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMTUyOQ==", "bodyText": "This code looks copied from ServiceBuilder. Can you find a way to reuse that code? If we modify the extensions in ServiceBuilder, this code will break. Please try to reuse as much as you can from that class.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456611529", "createdAt": "2020-07-17T18:38:19Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMjA2NQ==", "bodyText": "You do not need a 2GB cache.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456612065", "createdAt": "2020-07-17T18:39:26Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMjI3MQ==", "bodyText": "Verify that you are shutting down everything that needs to shut down.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456612271", "createdAt": "2020-07-17T18:39:52Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(\n+                SegmentContainer container, ScheduledExecutorService executor) {\n+            return Collections.singletonMap(ContainerTableExtension.class, new ContainerTableExtensionImpl(container, this.cacheManager, executor));\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.readIndexFactory.close();\n+            this.cacheManager.close();\n+            this.cacheStorage.close();\n+            this.dataLogFactory.close();\n+        }\n+    }\n+\n+    SegmentStoreStarter startSegmentStore(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+        return new SegmentStoreStarter(storageFactory, dataLogFactory);\n+    }\n+\n+    /**\n+     * Creates a segment store server.\n+     */\n+    private static class SegmentStoreStarter {\n+        private final int servicePort = TestUtils.getAvailableListenPort();\n+        private ServiceBuilder serviceBuilder;\n+        private StreamSegmentStoreWrapper streamSegmentStoreWrapper;\n+        private AutoScaleMonitor monitor;\n+        private TableStoreWrapper tableStoreWrapper;\n+        private PravegaConnectionListener server;\n+\n+        SegmentStoreStarter(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+            if (storageFactory != null) {\n+                if (dataLogFactory != null) {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory)\n+                            .withDataLogFactory(setup -> dataLogFactory);\n+                } else {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory);\n+                }\n+            } else {\n+                this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+            }\n+            this.serviceBuilder.initialize();\n+            this.streamSegmentStoreWrapper = new StreamSegmentStoreWrapper(serviceBuilder.createStreamSegmentService());\n+            this.monitor = new AutoScaleMonitor(streamSegmentStoreWrapper, AutoScalerConfig.builder().build());\n+            this.tableStoreWrapper = new TableStoreWrapper(serviceBuilder.createTableStoreService());\n+            this.server = new PravegaConnectionListener(false, false, \"localhost\", servicePort, streamSegmentStoreWrapper,\n+                    tableStoreWrapper, monitor.getStatsRecorder(), monitor.getTableSegmentStatsRecorder(), new PassingTokenVerifier(),\n+                    null, null, true, serviceBuilder.getLowPriorityExecutor());\n+            this.server.startListening();\n+        }\n+\n+        public void close() {\n+            if (this.server != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 386}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMjI5Mw==", "bodyText": "Verify that you are shutting down everything that needs to shut down.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456612293", "createdAt": "2020-07-17T18:39:55Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(\n+                SegmentContainer container, ScheduledExecutorService executor) {\n+            return Collections.singletonMap(ContainerTableExtension.class, new ContainerTableExtensionImpl(container, this.cacheManager, executor));\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.readIndexFactory.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMjM1Ng==", "bodyText": "Verify that you are shutting down everything that needs to shut down.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456612356", "createdAt": "2020-07-17T18:40:02Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(\n+                SegmentContainer container, ScheduledExecutorService executor) {\n+            return Collections.singletonMap(ContainerTableExtension.class, new ContainerTableExtensionImpl(container, this.cacheManager, executor));\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.readIndexFactory.close();\n+            this.cacheManager.close();\n+            this.cacheStorage.close();\n+            this.dataLogFactory.close();\n+        }\n+    }\n+\n+    SegmentStoreStarter startSegmentStore(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+        return new SegmentStoreStarter(storageFactory, dataLogFactory);\n+    }\n+\n+    /**\n+     * Creates a segment store server.\n+     */\n+    private static class SegmentStoreStarter {\n+        private final int servicePort = TestUtils.getAvailableListenPort();\n+        private ServiceBuilder serviceBuilder;\n+        private StreamSegmentStoreWrapper streamSegmentStoreWrapper;\n+        private AutoScaleMonitor monitor;\n+        private TableStoreWrapper tableStoreWrapper;\n+        private PravegaConnectionListener server;\n+\n+        SegmentStoreStarter(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+            if (storageFactory != null) {\n+                if (dataLogFactory != null) {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory)\n+                            .withDataLogFactory(setup -> dataLogFactory);\n+                } else {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory);\n+                }\n+            } else {\n+                this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+            }\n+            this.serviceBuilder.initialize();\n+            this.streamSegmentStoreWrapper = new StreamSegmentStoreWrapper(serviceBuilder.createStreamSegmentService());\n+            this.monitor = new AutoScaleMonitor(streamSegmentStoreWrapper, AutoScalerConfig.builder().build());\n+            this.tableStoreWrapper = new TableStoreWrapper(serviceBuilder.createTableStoreService());\n+            this.server = new PravegaConnectionListener(false, false, \"localhost\", servicePort, streamSegmentStoreWrapper,\n+                    tableStoreWrapper, monitor.getStatsRecorder(), monitor.getTableSegmentStatsRecorder(), new PassingTokenVerifier(),\n+                    null, null, true, serviceBuilder.getLowPriorityExecutor());\n+            this.server.startListening();\n+        }\n+\n+        public void close() {\n+            if (this.server != null) {\n+                this.server.close();\n+                this.server = null;\n+            }\n+\n+            if (this.monitor != null) {\n+                this.monitor.close();\n+                this.monitor = null;\n+            }\n+\n+            if (this.serviceBuilder != null) {\n+                this.serviceBuilder.close();\n+                this.serviceBuilder = null;\n+            }\n+        }\n+    }\n+\n+    ControllerStarter startController(int bkPort, int servicePort) throws InterruptedException {\n+        return new ControllerStarter(bkPort, servicePort);\n+    }\n+\n+    /**\n+     * Creates a controller instance and runs it.\n+     */\n+    private static class ControllerStarter {\n+        private final int controllerPort = TestUtils.getAvailableListenPort();\n+        private final String serviceHost = \"localhost\";\n+        private ControllerWrapper controllerWrapper = null;\n+        private Controller controller = null;\n+\n+        ControllerStarter(int bkPort, int servicePort) throws InterruptedException {\n+            this.controllerWrapper = new ControllerWrapper(\"localhost:\" + bkPort, false,\n+                    controllerPort, serviceHost, servicePort, CONTAINER_COUNT);\n+            this.controllerWrapper.awaitRunning();\n+            this.controller = controllerWrapper.getController();\n+        }\n+\n+        public void close() throws Exception {\n+            if (this.controller != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 424}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMjg1NA==", "bodyText": "Put @Cleanup on a different line. Below too", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456612854", "createdAt": "2020-07-17T18:41:03Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(\n+                SegmentContainer container, ScheduledExecutorService executor) {\n+            return Collections.singletonMap(ContainerTableExtension.class, new ContainerTableExtensionImpl(container, this.cacheManager, executor));\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.readIndexFactory.close();\n+            this.cacheManager.close();\n+            this.cacheStorage.close();\n+            this.dataLogFactory.close();\n+        }\n+    }\n+\n+    SegmentStoreStarter startSegmentStore(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+        return new SegmentStoreStarter(storageFactory, dataLogFactory);\n+    }\n+\n+    /**\n+     * Creates a segment store server.\n+     */\n+    private static class SegmentStoreStarter {\n+        private final int servicePort = TestUtils.getAvailableListenPort();\n+        private ServiceBuilder serviceBuilder;\n+        private StreamSegmentStoreWrapper streamSegmentStoreWrapper;\n+        private AutoScaleMonitor monitor;\n+        private TableStoreWrapper tableStoreWrapper;\n+        private PravegaConnectionListener server;\n+\n+        SegmentStoreStarter(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+            if (storageFactory != null) {\n+                if (dataLogFactory != null) {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory)\n+                            .withDataLogFactory(setup -> dataLogFactory);\n+                } else {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory);\n+                }\n+            } else {\n+                this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+            }\n+            this.serviceBuilder.initialize();\n+            this.streamSegmentStoreWrapper = new StreamSegmentStoreWrapper(serviceBuilder.createStreamSegmentService());\n+            this.monitor = new AutoScaleMonitor(streamSegmentStoreWrapper, AutoScalerConfig.builder().build());\n+            this.tableStoreWrapper = new TableStoreWrapper(serviceBuilder.createTableStoreService());\n+            this.server = new PravegaConnectionListener(false, false, \"localhost\", servicePort, streamSegmentStoreWrapper,\n+                    tableStoreWrapper, monitor.getStatsRecorder(), monitor.getTableSegmentStatsRecorder(), new PassingTokenVerifier(),\n+                    null, null, true, serviceBuilder.getLowPriorityExecutor());\n+            this.server.startListening();\n+        }\n+\n+        public void close() {\n+            if (this.server != null) {\n+                this.server.close();\n+                this.server = null;\n+            }\n+\n+            if (this.monitor != null) {\n+                this.monitor.close();\n+                this.monitor = null;\n+            }\n+\n+            if (this.serviceBuilder != null) {\n+                this.serviceBuilder.close();\n+                this.serviceBuilder = null;\n+            }\n+        }\n+    }\n+\n+    ControllerStarter startController(int bkPort, int servicePort) throws InterruptedException {\n+        return new ControllerStarter(bkPort, servicePort);\n+    }\n+\n+    /**\n+     * Creates a controller instance and runs it.\n+     */\n+    private static class ControllerStarter {\n+        private final int controllerPort = TestUtils.getAvailableListenPort();\n+        private final String serviceHost = \"localhost\";\n+        private ControllerWrapper controllerWrapper = null;\n+        private Controller controller = null;\n+\n+        ControllerStarter(int bkPort, int servicePort) throws InterruptedException {\n+            this.controllerWrapper = new ControllerWrapper(\"localhost:\" + bkPort, false,\n+                    controllerPort, serviceHost, servicePort, CONTAINER_COUNT);\n+            this.controllerWrapper.awaitRunning();\n+            this.controller = controllerWrapper.getController();\n+        }\n+\n+        public void close() throws Exception {\n+            if (this.controller != null) {\n+                this.controller.close();\n+                this.controller = null;\n+            }\n+\n+            if (this.controllerWrapper != null) {\n+                this.controllerWrapper.close();\n+                this.controllerWrapper = null;\n+            }\n+        }\n+    }\n+\n+    @Test(timeout = 240000)\n+    public void testDurableDataLogFail() throws Exception {\n+        int instanceId = 0;\n+\n+        // Creating tier 2 only once here.\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        FileSystemStorageConfig fsConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+        this.storageFactory = new FileSystemStorageFactory(fsConfig, executorService);\n+\n+        // Start a new BK & ZK, segment store and controller\n+        this.bkzk = setUpNewBK(instanceId++);\n+        this.segmentStoreStarter = startSegmentStore(this.storageFactory, null);\n+        @Cleanup ControllerStarter controllerStarter = startController(this.bkzk.bkPort, this.segmentStoreStarter.servicePort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 451}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMzE5MQ==", "bodyText": "You need to figure out how to make this work without sleeping.", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456613191", "createdAt": "2020-07-17T18:41:45Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(\n+                SegmentContainer container, ScheduledExecutorService executor) {\n+            return Collections.singletonMap(ContainerTableExtension.class, new ContainerTableExtensionImpl(container, this.cacheManager, executor));\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.readIndexFactory.close();\n+            this.cacheManager.close();\n+            this.cacheStorage.close();\n+            this.dataLogFactory.close();\n+        }\n+    }\n+\n+    SegmentStoreStarter startSegmentStore(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+        return new SegmentStoreStarter(storageFactory, dataLogFactory);\n+    }\n+\n+    /**\n+     * Creates a segment store server.\n+     */\n+    private static class SegmentStoreStarter {\n+        private final int servicePort = TestUtils.getAvailableListenPort();\n+        private ServiceBuilder serviceBuilder;\n+        private StreamSegmentStoreWrapper streamSegmentStoreWrapper;\n+        private AutoScaleMonitor monitor;\n+        private TableStoreWrapper tableStoreWrapper;\n+        private PravegaConnectionListener server;\n+\n+        SegmentStoreStarter(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+            if (storageFactory != null) {\n+                if (dataLogFactory != null) {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory)\n+                            .withDataLogFactory(setup -> dataLogFactory);\n+                } else {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory);\n+                }\n+            } else {\n+                this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+            }\n+            this.serviceBuilder.initialize();\n+            this.streamSegmentStoreWrapper = new StreamSegmentStoreWrapper(serviceBuilder.createStreamSegmentService());\n+            this.monitor = new AutoScaleMonitor(streamSegmentStoreWrapper, AutoScalerConfig.builder().build());\n+            this.tableStoreWrapper = new TableStoreWrapper(serviceBuilder.createTableStoreService());\n+            this.server = new PravegaConnectionListener(false, false, \"localhost\", servicePort, streamSegmentStoreWrapper,\n+                    tableStoreWrapper, monitor.getStatsRecorder(), monitor.getTableSegmentStatsRecorder(), new PassingTokenVerifier(),\n+                    null, null, true, serviceBuilder.getLowPriorityExecutor());\n+            this.server.startListening();\n+        }\n+\n+        public void close() {\n+            if (this.server != null) {\n+                this.server.close();\n+                this.server = null;\n+            }\n+\n+            if (this.monitor != null) {\n+                this.monitor.close();\n+                this.monitor = null;\n+            }\n+\n+            if (this.serviceBuilder != null) {\n+                this.serviceBuilder.close();\n+                this.serviceBuilder = null;\n+            }\n+        }\n+    }\n+\n+    ControllerStarter startController(int bkPort, int servicePort) throws InterruptedException {\n+        return new ControllerStarter(bkPort, servicePort);\n+    }\n+\n+    /**\n+     * Creates a controller instance and runs it.\n+     */\n+    private static class ControllerStarter {\n+        private final int controllerPort = TestUtils.getAvailableListenPort();\n+        private final String serviceHost = \"localhost\";\n+        private ControllerWrapper controllerWrapper = null;\n+        private Controller controller = null;\n+\n+        ControllerStarter(int bkPort, int servicePort) throws InterruptedException {\n+            this.controllerWrapper = new ControllerWrapper(\"localhost:\" + bkPort, false,\n+                    controllerPort, serviceHost, servicePort, CONTAINER_COUNT);\n+            this.controllerWrapper.awaitRunning();\n+            this.controller = controllerWrapper.getController();\n+        }\n+\n+        public void close() throws Exception {\n+            if (this.controller != null) {\n+                this.controller.close();\n+                this.controller = null;\n+            }\n+\n+            if (this.controllerWrapper != null) {\n+                this.controllerWrapper.close();\n+                this.controllerWrapper = null;\n+            }\n+        }\n+    }\n+\n+    @Test(timeout = 240000)\n+    public void testDurableDataLogFail() throws Exception {\n+        int instanceId = 0;\n+\n+        // Creating tier 2 only once here.\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        FileSystemStorageConfig fsConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+        this.storageFactory = new FileSystemStorageFactory(fsConfig, executorService);\n+\n+        // Start a new BK & ZK, segment store and controller\n+        this.bkzk = setUpNewBK(instanceId++);\n+        this.segmentStoreStarter = startSegmentStore(this.storageFactory, null);\n+        @Cleanup ControllerStarter controllerStarter = startController(this.bkzk.bkPort, this.segmentStoreStarter.servicePort);\n+\n+        // Create two streams for writing data onto two different segments\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM1);\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM2);\n+\n+        @Cleanup ConnectionFactory connectionFactory = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+        @Cleanup ClientFactoryImpl clientFactory = new ClientFactoryImpl(SCOPE, controllerStarter.controller, connectionFactory);\n+        @Cleanup ReaderGroupManager readerGroupManager = new ReaderGroupManagerImpl(SCOPE, controllerStarter.controller, clientFactory, connectionFactory);\n+\n+        writeEvents(STREAM1, clientFactory); // write 300 events on one segment\n+        writeEvents(STREAM2, clientFactory); // write 300 events on other segment\n+\n+        // Verify events write by reading them.\n+        readAllEvents(STREAM1, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+        readAllEvents(STREAM2, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+\n+        readerGroupManager.close();\n+        clientFactory.close();\n+\n+        controllerStarter.close(); // Shut down the controller\n+\n+        // Get names of all the segments created.\n+        HashSet<String> allSegments = new HashSet<>(this.segmentStoreStarter.streamSegmentStoreWrapper.getSegments());\n+        allSegments.addAll(this.segmentStoreStarter.tableStoreWrapper.getSegments());\n+        log.info(\"No. of segments created = {}\", allSegments.size());\n+\n+        // Get the long term storage from the running pravega instance\n+        @Cleanup Storage tier2 = new AsyncStorageWrapper(new RollingStorage(this.storageFactory.createSyncStorage(),\n+                new SegmentRollingPolicy(DEFAULT_ROLLING_SIZE)), DataRecoveryTestUtils.createExecutorService(1));\n+\n+        // wait for all segments to be flushed to the long term storage.\n+        waitForSegmentsInStorage(allSegments, this.segmentStoreStarter.streamSegmentStoreWrapper, tier2)\n+                .get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+        this.segmentStoreStarter.close(); // Shutdown SegmentStore\n+        this.segmentStoreStarter = null;\n+        log.info(\"Segment Store Shutdown\");\n+\n+        this.bkzk.close(); // Shutdown BookKeeper & ZooKeeper\n+        this.bkzk = null;\n+        log.info(\"BookKeeper & ZooKeeper shutdown\");\n+\n+        // start a new BookKeeper and ZooKeeper.\n+        this.bkzk = setUpNewBK(instanceId++);\n+        this.dataLogFactory = new BookKeeperLogFactory(this.bkzk.bkConfig.get(), this.bkzk.zkClient.get(),\n+                DataRecoveryTestUtils.createExecutorService(1));\n+        this.dataLogFactory.initialize();\n+\n+        // Delete container metadata segment and attributes index segment corresponding to the container Id from the long term storage\n+        DataRecoveryTestUtils.deleteContainerMetadataSegments(tier2, CONTAINER_ID);\n+\n+        // List all segments from the long term storage\n+        Map<Integer, List<SegmentProperties>> segmentsToCreate = DataRecoveryTestUtils.listAllSegments(tier2, CONTAINER_COUNT);\n+\n+        // Start debug segment container using dataLogFactory from new BK instance and old long term storageFactory.\n+        DebugTool debugTool = createDebugTool(this.dataLogFactory, this.storageFactory);\n+        DebugStreamSegmentContainer debugStreamSegmentContainer = (DebugStreamSegmentContainer)\n+                debugTool.containerFactory.createDebugStreamSegmentContainer(CONTAINER_ID);\n+\n+        // Re-create all segments which were listed.\n+        Services.startAsync(debugStreamSegmentContainer, executorService)\n+                .thenRun(new DataRecoveryTestUtils.Worker(debugStreamSegmentContainer, segmentsToCreate.get(CONTAINER_ID))).join();\n+        sleep(5000); // Without sleep the test fails sometimes complaining some segment offsets don't exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 516}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMzM3Mw==", "bodyText": "Why not bubble up?", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456613373", "createdAt": "2020-07-17T18:42:10Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(\n+                SegmentContainer container, ScheduledExecutorService executor) {\n+            return Collections.singletonMap(ContainerTableExtension.class, new ContainerTableExtensionImpl(container, this.cacheManager, executor));\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.readIndexFactory.close();\n+            this.cacheManager.close();\n+            this.cacheStorage.close();\n+            this.dataLogFactory.close();\n+        }\n+    }\n+\n+    SegmentStoreStarter startSegmentStore(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+        return new SegmentStoreStarter(storageFactory, dataLogFactory);\n+    }\n+\n+    /**\n+     * Creates a segment store server.\n+     */\n+    private static class SegmentStoreStarter {\n+        private final int servicePort = TestUtils.getAvailableListenPort();\n+        private ServiceBuilder serviceBuilder;\n+        private StreamSegmentStoreWrapper streamSegmentStoreWrapper;\n+        private AutoScaleMonitor monitor;\n+        private TableStoreWrapper tableStoreWrapper;\n+        private PravegaConnectionListener server;\n+\n+        SegmentStoreStarter(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+            if (storageFactory != null) {\n+                if (dataLogFactory != null) {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory)\n+                            .withDataLogFactory(setup -> dataLogFactory);\n+                } else {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory);\n+                }\n+            } else {\n+                this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+            }\n+            this.serviceBuilder.initialize();\n+            this.streamSegmentStoreWrapper = new StreamSegmentStoreWrapper(serviceBuilder.createStreamSegmentService());\n+            this.monitor = new AutoScaleMonitor(streamSegmentStoreWrapper, AutoScalerConfig.builder().build());\n+            this.tableStoreWrapper = new TableStoreWrapper(serviceBuilder.createTableStoreService());\n+            this.server = new PravegaConnectionListener(false, false, \"localhost\", servicePort, streamSegmentStoreWrapper,\n+                    tableStoreWrapper, monitor.getStatsRecorder(), monitor.getTableSegmentStatsRecorder(), new PassingTokenVerifier(),\n+                    null, null, true, serviceBuilder.getLowPriorityExecutor());\n+            this.server.startListening();\n+        }\n+\n+        public void close() {\n+            if (this.server != null) {\n+                this.server.close();\n+                this.server = null;\n+            }\n+\n+            if (this.monitor != null) {\n+                this.monitor.close();\n+                this.monitor = null;\n+            }\n+\n+            if (this.serviceBuilder != null) {\n+                this.serviceBuilder.close();\n+                this.serviceBuilder = null;\n+            }\n+        }\n+    }\n+\n+    ControllerStarter startController(int bkPort, int servicePort) throws InterruptedException {\n+        return new ControllerStarter(bkPort, servicePort);\n+    }\n+\n+    /**\n+     * Creates a controller instance and runs it.\n+     */\n+    private static class ControllerStarter {\n+        private final int controllerPort = TestUtils.getAvailableListenPort();\n+        private final String serviceHost = \"localhost\";\n+        private ControllerWrapper controllerWrapper = null;\n+        private Controller controller = null;\n+\n+        ControllerStarter(int bkPort, int servicePort) throws InterruptedException {\n+            this.controllerWrapper = new ControllerWrapper(\"localhost:\" + bkPort, false,\n+                    controllerPort, serviceHost, servicePort, CONTAINER_COUNT);\n+            this.controllerWrapper.awaitRunning();\n+            this.controller = controllerWrapper.getController();\n+        }\n+\n+        public void close() throws Exception {\n+            if (this.controller != null) {\n+                this.controller.close();\n+                this.controller = null;\n+            }\n+\n+            if (this.controllerWrapper != null) {\n+                this.controllerWrapper.close();\n+                this.controllerWrapper = null;\n+            }\n+        }\n+    }\n+\n+    @Test(timeout = 240000)\n+    public void testDurableDataLogFail() throws Exception {\n+        int instanceId = 0;\n+\n+        // Creating tier 2 only once here.\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        FileSystemStorageConfig fsConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+        this.storageFactory = new FileSystemStorageFactory(fsConfig, executorService);\n+\n+        // Start a new BK & ZK, segment store and controller\n+        this.bkzk = setUpNewBK(instanceId++);\n+        this.segmentStoreStarter = startSegmentStore(this.storageFactory, null);\n+        @Cleanup ControllerStarter controllerStarter = startController(this.bkzk.bkPort, this.segmentStoreStarter.servicePort);\n+\n+        // Create two streams for writing data onto two different segments\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM1);\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM2);\n+\n+        @Cleanup ConnectionFactory connectionFactory = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+        @Cleanup ClientFactoryImpl clientFactory = new ClientFactoryImpl(SCOPE, controllerStarter.controller, connectionFactory);\n+        @Cleanup ReaderGroupManager readerGroupManager = new ReaderGroupManagerImpl(SCOPE, controllerStarter.controller, clientFactory, connectionFactory);\n+\n+        writeEvents(STREAM1, clientFactory); // write 300 events on one segment\n+        writeEvents(STREAM2, clientFactory); // write 300 events on other segment\n+\n+        // Verify events write by reading them.\n+        readAllEvents(STREAM1, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+        readAllEvents(STREAM2, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+\n+        readerGroupManager.close();\n+        clientFactory.close();\n+\n+        controllerStarter.close(); // Shut down the controller\n+\n+        // Get names of all the segments created.\n+        HashSet<String> allSegments = new HashSet<>(this.segmentStoreStarter.streamSegmentStoreWrapper.getSegments());\n+        allSegments.addAll(this.segmentStoreStarter.tableStoreWrapper.getSegments());\n+        log.info(\"No. of segments created = {}\", allSegments.size());\n+\n+        // Get the long term storage from the running pravega instance\n+        @Cleanup Storage tier2 = new AsyncStorageWrapper(new RollingStorage(this.storageFactory.createSyncStorage(),\n+                new SegmentRollingPolicy(DEFAULT_ROLLING_SIZE)), DataRecoveryTestUtils.createExecutorService(1));\n+\n+        // wait for all segments to be flushed to the long term storage.\n+        waitForSegmentsInStorage(allSegments, this.segmentStoreStarter.streamSegmentStoreWrapper, tier2)\n+                .get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+        this.segmentStoreStarter.close(); // Shutdown SegmentStore\n+        this.segmentStoreStarter = null;\n+        log.info(\"Segment Store Shutdown\");\n+\n+        this.bkzk.close(); // Shutdown BookKeeper & ZooKeeper\n+        this.bkzk = null;\n+        log.info(\"BookKeeper & ZooKeeper shutdown\");\n+\n+        // start a new BookKeeper and ZooKeeper.\n+        this.bkzk = setUpNewBK(instanceId++);\n+        this.dataLogFactory = new BookKeeperLogFactory(this.bkzk.bkConfig.get(), this.bkzk.zkClient.get(),\n+                DataRecoveryTestUtils.createExecutorService(1));\n+        this.dataLogFactory.initialize();\n+\n+        // Delete container metadata segment and attributes index segment corresponding to the container Id from the long term storage\n+        DataRecoveryTestUtils.deleteContainerMetadataSegments(tier2, CONTAINER_ID);\n+\n+        // List all segments from the long term storage\n+        Map<Integer, List<SegmentProperties>> segmentsToCreate = DataRecoveryTestUtils.listAllSegments(tier2, CONTAINER_COUNT);\n+\n+        // Start debug segment container using dataLogFactory from new BK instance and old long term storageFactory.\n+        DebugTool debugTool = createDebugTool(this.dataLogFactory, this.storageFactory);\n+        DebugStreamSegmentContainer debugStreamSegmentContainer = (DebugStreamSegmentContainer)\n+                debugTool.containerFactory.createDebugStreamSegmentContainer(CONTAINER_ID);\n+\n+        // Re-create all segments which were listed.\n+        Services.startAsync(debugStreamSegmentContainer, executorService)\n+                .thenRun(new DataRecoveryTestUtils.Worker(debugStreamSegmentContainer, segmentsToCreate.get(CONTAINER_ID))).join();\n+        sleep(5000); // Without sleep the test fails sometimes complaining some segment offsets don't exist.\n+        Services.stopAsync(debugStreamSegmentContainer, executorService).join();\n+        debugStreamSegmentContainer.close();\n+        debugTool.close();\n+\n+        // Start a new segment store and controller\n+        this.segmentStoreStarter = startSegmentStore(this.storageFactory, this.dataLogFactory);\n+        controllerStarter = startController(this.bkzk.bkPort, this.segmentStoreStarter.servicePort);\n+\n+        connectionFactory = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+        clientFactory = new ClientFactoryImpl(SCOPE, controllerStarter.controller, connectionFactory);\n+        readerGroupManager = new ReaderGroupManagerImpl(SCOPE, controllerStarter.controller, clientFactory, connectionFactory);\n+\n+        // Try creating the same segments again with the new controller\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM1);\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM2);\n+\n+        // Try reading all events again\n+        readAllEvents(STREAM1, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+        readAllEvents(STREAM2, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+    }\n+\n+    public void createScopeStream(Controller controller, String scopeName, String streamName) {\n+        try (ConnectionFactory cf = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+             StreamManager streamManager = new StreamManagerImpl(controller, cf)) {\n+            streamManager.createScope(scopeName);\n+            streamManager.createStream(scopeName, streamName, config);\n+        }\n+    }\n+\n+    private void writeEvents(String streamName, ClientFactoryImpl clientFactory) {\n+        EventStreamWriter<String> writer = clientFactory.createEventWriter(streamName,\n+                new UTF8StringSerializer(),\n+                EventWriterConfig.builder().build());\n+        for (int i = 0; i < TOTAL_NUM_EVENTS;) {\n+            try {\n+                writer.writeEvent(\"\", EVENT).join();\n+                i++;\n+            } catch (Throwable e) {\n+                Assert.fail(\"Error occurred while writing events.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 557}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMzQzMw==", "bodyText": "here too", "url": "https://github.com/pravega/pravega/pull/4716#discussion_r456613433", "createdAt": "2020-07-17T18:42:21Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/RestoreBackUpDataRecoveryTest.java", "diffHunk": "@@ -0,0 +1,648 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.admin.impl.ReaderGroupManagerImpl;\n+import io.pravega.client.admin.impl.StreamManagerImpl;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.common.io.FileHelpers;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.StreamSegmentStoreWrapper;\n+import io.pravega.segmentstore.contracts.tables.TableStoreWrapper;\n+import io.pravega.segmentstore.server.CacheManager;\n+import io.pravega.segmentstore.server.CachePolicy;\n+import io.pravega.segmentstore.server.DataRecoveryTestUtils;\n+import io.pravega.segmentstore.server.OperationLogFactory;\n+import io.pravega.segmentstore.server.ReadIndexFactory;\n+import io.pravega.segmentstore.server.SegmentContainer;\n+import io.pravega.segmentstore.server.SegmentContainerExtension;\n+import io.pravega.segmentstore.server.WriterFactory;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexConfig;\n+import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.server.attributes.ContainerAttributeIndexFactoryImpl;\n+import io.pravega.segmentstore.server.containers.ContainerConfig;\n+import io.pravega.segmentstore.server.containers.DebugStreamSegmentContainer;\n+import io.pravega.segmentstore.server.containers.StreamSegmentContainerFactory;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.AutoScaleMonitor;\n+import io.pravega.segmentstore.server.host.stat.AutoScalerConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogConfig;\n+import io.pravega.segmentstore.server.logs.DurableLogFactory;\n+import io.pravega.segmentstore.server.reading.ContainerReadIndexFactory;\n+import io.pravega.segmentstore.server.reading.ReadIndexConfig;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtension;\n+import io.pravega.segmentstore.server.tables.ContainerTableExtensionImpl;\n+import io.pravega.segmentstore.server.writer.StorageWriterFactory;\n+import io.pravega.segmentstore.server.writer.WriterConfig;\n+import io.pravega.segmentstore.storage.AsyncStorageWrapper;\n+import io.pravega.segmentstore.storage.DurableDataLogException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.cache.CacheStorage;\n+import io.pravega.segmentstore.storage.cache.DirectMemoryCache;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperServiceRunner;\n+import io.pravega.segmentstore.storage.rolling.RollingStorage;\n+import io.pravega.shared.NameUtils;\n+import io.pravega.storage.filesystem.FileSystemStorageConfig;\n+import io.pravega.storage.filesystem.FileSystemStorageFactory;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * Integration test to verify data recovery.\n+ * Recovery scenario: when data written to Pravega is already flushed to the long term storage.\n+ */\n+@Slf4j\n+public class RestoreBackUpDataRecoveryTest extends ThreadPooledTestSuite {\n+    protected static final Duration TIMEOUT = Duration.ofMillis(60000 * 1000);\n+\n+    private static final int CONTAINER_COUNT = 1;\n+    private static final int CONTAINER_ID = 0;\n+\n+    /**\n+     * Write 300 events to different segments.\n+     */\n+    private static final long TOTAL_NUM_EVENTS = 300;\n+\n+    private static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n+    private static final long DEFAULT_ROLLING_SIZE = (int) (APPEND_FORMAT.length() * 1.5);\n+\n+    private static final Random RANDOM = new Random();\n+\n+    /**\n+     * Scope and streams to read and write events.\n+     */\n+    private static final String SCOPE = \"testMetricsScope\";\n+    private static final String STREAM1 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String STREAM2 = \"testMetricsStream\" + RANDOM.nextInt(Integer.MAX_VALUE);\n+    private static final String EVENT = \"12345\";\n+\n+    private final ScalingPolicy scalingPolicy = ScalingPolicy.fixed(1);\n+    private final StreamConfiguration config = StreamConfiguration.builder().scalingPolicy(scalingPolicy).build();\n+\n+    private ScheduledExecutorService executorService = DataRecoveryTestUtils.createExecutorService(100);\n+    private File baseDir;\n+    private FileSystemStorageFactory storageFactory;\n+    private BookKeeperLogFactory dataLogFactory;\n+    private SegmentStoreStarter segmentStoreStarter;\n+    private BKZK bkzk = null;\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (this.dataLogFactory != null) {\n+            this.dataLogFactory.close();\n+            this.dataLogFactory = null;\n+        }\n+\n+        if (this.segmentStoreStarter != null) {\n+            this.segmentStoreStarter.close();\n+            this.segmentStoreStarter = null;\n+        }\n+\n+        if (this.bkzk != null) {\n+            this.bkzk.close();\n+            this.bkzk = null;\n+        }\n+\n+        if (this.baseDir != null) {\n+            FileHelpers.deleteFileOrDirectory(this.baseDir);\n+            this.baseDir = null;\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 100;\n+    }\n+\n+    BKZK setUpNewBK(int instanceId) throws Exception {\n+        return new BKZK(instanceId);\n+    }\n+\n+    /**\n+     * Sets up a new BookKeeper & ZooKeeper.\n+     */\n+    private static class BKZK implements AutoCloseable {\n+        private final int writeCount = 500;\n+        private final int maxWriteAttempts = 3;\n+        private final int maxLedgerSize = 200 * Math.max(10, writeCount / 20);\n+        private final AtomicBoolean secureBk = new AtomicBoolean();\n+        private final int bookieCount = 1;\n+        private AtomicReference<BookKeeperConfig> bkConfig = new AtomicReference<>();\n+        private AtomicReference<CuratorFramework> zkClient = new AtomicReference<>();\n+        private BookKeeperServiceRunner bookKeeperServiceRunner;\n+        private AtomicReference<BookKeeperServiceRunner> bkService = new AtomicReference<>();\n+        private int bkPort;\n+\n+        BKZK(int instanceId) throws Exception {\n+            secureBk.set(false);\n+            bkPort = TestUtils.getAvailableListenPort();\n+            val bookiePorts = new ArrayList<Integer>();\n+            for (int i = 0; i < bookieCount; i++) {\n+                bookiePorts.add(TestUtils.getAvailableListenPort());\n+            }\n+\n+            this.bookKeeperServiceRunner = BookKeeperServiceRunner.builder()\n+                    .startZk(true)\n+                    .zkPort(bkPort)\n+                    .ledgersPath(\"/pravega/bookkeeper/ledgers\")\n+                    .secureBK(isSecure())\n+                    .secureZK(isSecure())\n+                    .tlsTrustStore(\"../segmentstore/config/bookie.truststore.jks\")\n+                    .tLSKeyStore(\"../segmentstore/config/bookie.keystore.jks\")\n+                    .tLSKeyStorePasswordPath(\"../segmentstore/config/bookie.keystore.jks.passwd\")\n+                    .bookiePorts(bookiePorts)\n+                    .build();\n+            this.bookKeeperServiceRunner.startAll();\n+            bkService.set(this.bookKeeperServiceRunner);\n+\n+            // Create a ZKClient with a unique namespace.\n+            String baseNamespace = \"pravega/\" + instanceId + \"_\" + Long.toHexString(System.nanoTime());\n+            this.zkClient.set(CuratorFrameworkFactory\n+                    .builder()\n+                    .connectString(\"localhost:\" + bkPort)\n+                    .namespace(baseNamespace)\n+                    .retryPolicy(new ExponentialBackoffRetry(1000, 5))\n+                    .connectionTimeoutMs(10000)\n+                    .sessionTimeoutMs(10000)\n+                    .build());\n+\n+            this.zkClient.get().start();\n+\n+            String logMetaNamespace = \"segmentstore/containers\" + instanceId;\n+            this.bkConfig.set(BookKeeperConfig\n+                    .builder()\n+                    .with(BookKeeperConfig.ZK_ADDRESS, \"localhost:\" + bkPort)\n+                    .with(BookKeeperConfig.MAX_WRITE_ATTEMPTS, maxWriteAttempts)\n+                    .with(BookKeeperConfig.BK_LEDGER_MAX_SIZE, maxLedgerSize)\n+                    .with(BookKeeperConfig.ZK_METADATA_PATH, logMetaNamespace)\n+                    .with(BookKeeperConfig.BK_LEDGER_PATH, \"/pravega/bookkeeper/ledgers\")\n+                    .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, bookieCount)\n+                    .with(BookKeeperConfig.BK_TLS_ENABLED, isSecure())\n+                    .with(BookKeeperConfig.BK_WRITE_TIMEOUT, 1000)\n+                    .build());\n+        }\n+\n+        public boolean isSecure() {\n+            return secureBk.get();\n+        }\n+\n+        public void close() throws Exception {\n+            val process = this.bkService.getAndSet(null);\n+            if (process != null) {\n+                process.close();\n+            }\n+\n+            val bk = this.bookKeeperServiceRunner;\n+            if (bk != null) {\n+                bk.close();\n+                this.bookKeeperServiceRunner = null;\n+            }\n+\n+            val zkClient = this.zkClient.getAndSet(null);\n+            if (zkClient != null) {\n+                zkClient.close();\n+            }\n+        }\n+    }\n+\n+    DebugTool createDebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+        return new DebugTool(dataLogFactory, storageFactory);\n+    }\n+\n+    /**\n+     * Sets up the environment for creating a DebugSegmentContainer.\n+     */\n+    private class DebugTool implements AutoCloseable {\n+        private final CacheStorage cacheStorage;\n+        private final OperationLogFactory operationLogFactory;\n+        private final ReadIndexFactory readIndexFactory;\n+        private final AttributeIndexFactory attributeIndexFactory;\n+        private final WriterFactory writerFactory;\n+        private final CacheManager cacheManager;\n+        private final StreamSegmentContainerFactory containerFactory;\n+        private final BookKeeperLogFactory dataLogFactory;\n+        private final StorageFactory storageFactory;\n+\n+        private final DurableLogConfig durableLogConfig = DurableLogConfig\n+                .builder()\n+                .with(DurableLogConfig.CHECKPOINT_MIN_COMMIT_COUNT, 1)\n+                .with(DurableLogConfig.CHECKPOINT_COMMIT_COUNT, 10)\n+                .with(DurableLogConfig.CHECKPOINT_TOTAL_COMMIT_LENGTH, 10L * 1024 * 1024L)\n+                .with(DurableLogConfig.START_RETRY_DELAY_MILLIS, 20)\n+                .build();\n+\n+        private final ReadIndexConfig readIndexConfig = ReadIndexConfig.builder().with(ReadIndexConfig.STORAGE_READ_ALIGNMENT, 1024).build();\n+        private final AttributeIndexConfig attributeIndexConfig = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 2 * 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 1000)\n+                .build();\n+        private final WriterConfig writerConfig = WriterConfig\n+                .builder()\n+                .with(WriterConfig.FLUSH_THRESHOLD_BYTES, 1)\n+                .with(WriterConfig.FLUSH_THRESHOLD_MILLIS, 25L)\n+                .with(WriterConfig.MIN_READ_TIMEOUT_MILLIS, 10L)\n+                .with(WriterConfig.MAX_READ_TIMEOUT_MILLIS, 250L)\n+                .build();\n+\n+        DebugTool(BookKeeperLogFactory dataLogFactory, StorageFactory storageFactory) {\n+            this.dataLogFactory = dataLogFactory;\n+            this.storageFactory = storageFactory;\n+            this.operationLogFactory = new DurableLogFactory(durableLogConfig, this.dataLogFactory, executorService);\n+\n+            this.cacheStorage = new DirectMemoryCache(Integer.MAX_VALUE);\n+            this.cacheManager = new CacheManager(CachePolicy.INFINITE, this.cacheStorage, executorService);\n+            this.readIndexFactory = new ContainerReadIndexFactory(readIndexConfig, this.cacheManager, executorService);\n+            this.attributeIndexFactory = new ContainerAttributeIndexFactoryImpl(attributeIndexConfig, this.cacheManager, executorService);\n+            this.writerFactory = new StorageWriterFactory(writerConfig, executorService);\n+\n+            ContainerConfig containerConfig = ServiceBuilderConfig.getDefaultConfig().getConfig(ContainerConfig::builder);\n+            this.containerFactory = new StreamSegmentContainerFactory(containerConfig, this.operationLogFactory,\n+                    this.readIndexFactory, this.attributeIndexFactory, this.writerFactory, this.storageFactory,\n+                    this::createContainerExtensions, executorService);\n+        }\n+\n+        private Map<Class<? extends SegmentContainerExtension>, SegmentContainerExtension> createContainerExtensions(\n+                SegmentContainer container, ScheduledExecutorService executor) {\n+            return Collections.singletonMap(ContainerTableExtension.class, new ContainerTableExtensionImpl(container, this.cacheManager, executor));\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.readIndexFactory.close();\n+            this.cacheManager.close();\n+            this.cacheStorage.close();\n+            this.dataLogFactory.close();\n+        }\n+    }\n+\n+    SegmentStoreStarter startSegmentStore(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+        return new SegmentStoreStarter(storageFactory, dataLogFactory);\n+    }\n+\n+    /**\n+     * Creates a segment store server.\n+     */\n+    private static class SegmentStoreStarter {\n+        private final int servicePort = TestUtils.getAvailableListenPort();\n+        private ServiceBuilder serviceBuilder;\n+        private StreamSegmentStoreWrapper streamSegmentStoreWrapper;\n+        private AutoScaleMonitor monitor;\n+        private TableStoreWrapper tableStoreWrapper;\n+        private PravegaConnectionListener server;\n+\n+        SegmentStoreStarter(StorageFactory storageFactory, BookKeeperLogFactory dataLogFactory) throws DurableDataLogException {\n+            if (storageFactory != null) {\n+                if (dataLogFactory != null) {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory)\n+                            .withDataLogFactory(setup -> dataLogFactory);\n+                } else {\n+                    this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig())\n+                            .withStorageFactory(setup -> storageFactory);\n+                }\n+            } else {\n+                this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+            }\n+            this.serviceBuilder.initialize();\n+            this.streamSegmentStoreWrapper = new StreamSegmentStoreWrapper(serviceBuilder.createStreamSegmentService());\n+            this.monitor = new AutoScaleMonitor(streamSegmentStoreWrapper, AutoScalerConfig.builder().build());\n+            this.tableStoreWrapper = new TableStoreWrapper(serviceBuilder.createTableStoreService());\n+            this.server = new PravegaConnectionListener(false, false, \"localhost\", servicePort, streamSegmentStoreWrapper,\n+                    tableStoreWrapper, monitor.getStatsRecorder(), monitor.getTableSegmentStatsRecorder(), new PassingTokenVerifier(),\n+                    null, null, true, serviceBuilder.getLowPriorityExecutor());\n+            this.server.startListening();\n+        }\n+\n+        public void close() {\n+            if (this.server != null) {\n+                this.server.close();\n+                this.server = null;\n+            }\n+\n+            if (this.monitor != null) {\n+                this.monitor.close();\n+                this.monitor = null;\n+            }\n+\n+            if (this.serviceBuilder != null) {\n+                this.serviceBuilder.close();\n+                this.serviceBuilder = null;\n+            }\n+        }\n+    }\n+\n+    ControllerStarter startController(int bkPort, int servicePort) throws InterruptedException {\n+        return new ControllerStarter(bkPort, servicePort);\n+    }\n+\n+    /**\n+     * Creates a controller instance and runs it.\n+     */\n+    private static class ControllerStarter {\n+        private final int controllerPort = TestUtils.getAvailableListenPort();\n+        private final String serviceHost = \"localhost\";\n+        private ControllerWrapper controllerWrapper = null;\n+        private Controller controller = null;\n+\n+        ControllerStarter(int bkPort, int servicePort) throws InterruptedException {\n+            this.controllerWrapper = new ControllerWrapper(\"localhost:\" + bkPort, false,\n+                    controllerPort, serviceHost, servicePort, CONTAINER_COUNT);\n+            this.controllerWrapper.awaitRunning();\n+            this.controller = controllerWrapper.getController();\n+        }\n+\n+        public void close() throws Exception {\n+            if (this.controller != null) {\n+                this.controller.close();\n+                this.controller = null;\n+            }\n+\n+            if (this.controllerWrapper != null) {\n+                this.controllerWrapper.close();\n+                this.controllerWrapper = null;\n+            }\n+        }\n+    }\n+\n+    @Test(timeout = 240000)\n+    public void testDurableDataLogFail() throws Exception {\n+        int instanceId = 0;\n+\n+        // Creating tier 2 only once here.\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        FileSystemStorageConfig fsConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+        this.storageFactory = new FileSystemStorageFactory(fsConfig, executorService);\n+\n+        // Start a new BK & ZK, segment store and controller\n+        this.bkzk = setUpNewBK(instanceId++);\n+        this.segmentStoreStarter = startSegmentStore(this.storageFactory, null);\n+        @Cleanup ControllerStarter controllerStarter = startController(this.bkzk.bkPort, this.segmentStoreStarter.servicePort);\n+\n+        // Create two streams for writing data onto two different segments\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM1);\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM2);\n+\n+        @Cleanup ConnectionFactory connectionFactory = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+        @Cleanup ClientFactoryImpl clientFactory = new ClientFactoryImpl(SCOPE, controllerStarter.controller, connectionFactory);\n+        @Cleanup ReaderGroupManager readerGroupManager = new ReaderGroupManagerImpl(SCOPE, controllerStarter.controller, clientFactory, connectionFactory);\n+\n+        writeEvents(STREAM1, clientFactory); // write 300 events on one segment\n+        writeEvents(STREAM2, clientFactory); // write 300 events on other segment\n+\n+        // Verify events write by reading them.\n+        readAllEvents(STREAM1, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+        readAllEvents(STREAM2, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+\n+        readerGroupManager.close();\n+        clientFactory.close();\n+\n+        controllerStarter.close(); // Shut down the controller\n+\n+        // Get names of all the segments created.\n+        HashSet<String> allSegments = new HashSet<>(this.segmentStoreStarter.streamSegmentStoreWrapper.getSegments());\n+        allSegments.addAll(this.segmentStoreStarter.tableStoreWrapper.getSegments());\n+        log.info(\"No. of segments created = {}\", allSegments.size());\n+\n+        // Get the long term storage from the running pravega instance\n+        @Cleanup Storage tier2 = new AsyncStorageWrapper(new RollingStorage(this.storageFactory.createSyncStorage(),\n+                new SegmentRollingPolicy(DEFAULT_ROLLING_SIZE)), DataRecoveryTestUtils.createExecutorService(1));\n+\n+        // wait for all segments to be flushed to the long term storage.\n+        waitForSegmentsInStorage(allSegments, this.segmentStoreStarter.streamSegmentStoreWrapper, tier2)\n+                .get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+\n+        this.segmentStoreStarter.close(); // Shutdown SegmentStore\n+        this.segmentStoreStarter = null;\n+        log.info(\"Segment Store Shutdown\");\n+\n+        this.bkzk.close(); // Shutdown BookKeeper & ZooKeeper\n+        this.bkzk = null;\n+        log.info(\"BookKeeper & ZooKeeper shutdown\");\n+\n+        // start a new BookKeeper and ZooKeeper.\n+        this.bkzk = setUpNewBK(instanceId++);\n+        this.dataLogFactory = new BookKeeperLogFactory(this.bkzk.bkConfig.get(), this.bkzk.zkClient.get(),\n+                DataRecoveryTestUtils.createExecutorService(1));\n+        this.dataLogFactory.initialize();\n+\n+        // Delete container metadata segment and attributes index segment corresponding to the container Id from the long term storage\n+        DataRecoveryTestUtils.deleteContainerMetadataSegments(tier2, CONTAINER_ID);\n+\n+        // List all segments from the long term storage\n+        Map<Integer, List<SegmentProperties>> segmentsToCreate = DataRecoveryTestUtils.listAllSegments(tier2, CONTAINER_COUNT);\n+\n+        // Start debug segment container using dataLogFactory from new BK instance and old long term storageFactory.\n+        DebugTool debugTool = createDebugTool(this.dataLogFactory, this.storageFactory);\n+        DebugStreamSegmentContainer debugStreamSegmentContainer = (DebugStreamSegmentContainer)\n+                debugTool.containerFactory.createDebugStreamSegmentContainer(CONTAINER_ID);\n+\n+        // Re-create all segments which were listed.\n+        Services.startAsync(debugStreamSegmentContainer, executorService)\n+                .thenRun(new DataRecoveryTestUtils.Worker(debugStreamSegmentContainer, segmentsToCreate.get(CONTAINER_ID))).join();\n+        sleep(5000); // Without sleep the test fails sometimes complaining some segment offsets don't exist.\n+        Services.stopAsync(debugStreamSegmentContainer, executorService).join();\n+        debugStreamSegmentContainer.close();\n+        debugTool.close();\n+\n+        // Start a new segment store and controller\n+        this.segmentStoreStarter = startSegmentStore(this.storageFactory, this.dataLogFactory);\n+        controllerStarter = startController(this.bkzk.bkPort, this.segmentStoreStarter.servicePort);\n+\n+        connectionFactory = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+        clientFactory = new ClientFactoryImpl(SCOPE, controllerStarter.controller, connectionFactory);\n+        readerGroupManager = new ReaderGroupManagerImpl(SCOPE, controllerStarter.controller, clientFactory, connectionFactory);\n+\n+        // Try creating the same segments again with the new controller\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM1);\n+        createScopeStream(controllerStarter.controller, SCOPE, STREAM2);\n+\n+        // Try reading all events again\n+        readAllEvents(STREAM1, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+        readAllEvents(STREAM2, clientFactory, readerGroupManager, \"RG\" + RANDOM.nextInt(Integer.MAX_VALUE),\n+                \"R\" + RANDOM.nextInt(Integer.MAX_VALUE));\n+    }\n+\n+    public void createScopeStream(Controller controller, String scopeName, String streamName) {\n+        try (ConnectionFactory cf = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+             StreamManager streamManager = new StreamManagerImpl(controller, cf)) {\n+            streamManager.createScope(scopeName);\n+            streamManager.createStream(scopeName, streamName, config);\n+        }\n+    }\n+\n+    private void writeEvents(String streamName, ClientFactoryImpl clientFactory) {\n+        EventStreamWriter<String> writer = clientFactory.createEventWriter(streamName,\n+                new UTF8StringSerializer(),\n+                EventWriterConfig.builder().build());\n+        for (int i = 0; i < TOTAL_NUM_EVENTS;) {\n+            try {\n+                writer.writeEvent(\"\", EVENT).join();\n+                i++;\n+            } catch (Throwable e) {\n+                Assert.fail(\"Error occurred while writing events.\");\n+                break;\n+            }\n+        }\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+    private void readAllEvents(String streamName, ClientFactoryImpl clientFactory, ReaderGroupManager readerGroupManager,\n+                               String readerGroupName, String readerName) {\n+        readerGroupManager.createReaderGroup(readerGroupName,\n+                ReaderGroupConfig\n+                        .builder()\n+                        .stream(Stream.of(SCOPE, streamName))\n+                        .automaticCheckpointIntervalMillis(2000)\n+                        .build());\n+\n+        EventStreamReader<String> reader = clientFactory.createReader(readerName,\n+                readerGroupName,\n+                new UTF8StringSerializer(),\n+                ReaderConfig.builder().build());\n+\n+        for (int q = 0; q < TOTAL_NUM_EVENTS;) {\n+            try {\n+                String eventRead = reader.readNextEvent(SECONDS.toMillis(500)).getEvent();\n+                Assert.assertEquals(\"Event written and read back don't match\", EVENT, eventRead);\n+                q++;\n+            } catch (Exception e) {\n+                Assert.fail(\"Error occurred while reading the events.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fa63bbd1203beb32d05f30adcb0c9674aa88bc"}, "originalPosition": 585}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e3eeaf4c21c1b75cb38f15176f966edb350144", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/94e3eeaf4c21c1b75cb38f15176f966edb350144", "committedDate": "2020-07-22T15:47:03Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "332b6660ddb69407013c9e5ee73260fb513bd670", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/332b6660ddb69407013c9e5ee73260fb513bd670", "committedDate": "2020-07-23T05:12:05Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23bdc636366e00446e7fec407be012efd4a3bd66", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/23bdc636366e00446e7fec407be012efd4a3bd66", "committedDate": "2020-07-23T06:11:34Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d4279efe75e07fcfa6ce79735d6024313e9dcbb", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/1d4279efe75e07fcfa6ce79735d6024313e9dcbb", "committedDate": "2020-07-23T17:54:44Z", "message": "Update NameUtils\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8497d0d9be814f8fe37f900e0cad25b5993ca9fb", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8497d0d9be814f8fe37f900e0cad25b5993ca9fb", "committedDate": "2020-07-23T19:35:39Z", "message": "Chaning storageFactory type in DR integration test.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbf145363ff7f9a3e493a9f048041e10bbbe3a02", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/cbf145363ff7f9a3e493a9f048041e10bbbe3a02", "committedDate": "2020-07-23T21:42:57Z", "message": "Updating\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b30f9f0f5a60fcd8052b3a857ed3eff9a51737e8", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/b30f9f0f5a60fcd8052b3a857ed3eff9a51737e8", "committedDate": "2020-07-23T21:56:56Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "231974fa1f4a0218db8dba2f9168baa109247f21", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/231974fa1f4a0218db8dba2f9168baa109247f21", "committedDate": "2020-07-23T22:03:12Z", "message": "Adding github link.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2135f6c57a3e4e67b5ed87bc496050fb517798fa", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/2135f6c57a3e4e67b5ed87bc496050fb517798fa", "committedDate": "2020-07-23T22:48:36Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "224aa05c74455448f987f7bd25780357f0ff2971", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/224aa05c74455448f987f7bd25780357f0ff2971", "committedDate": "2020-07-27T05:04:19Z", "message": "Removed sleep.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b352b50826d7d414d97d216e85673d9221f7b7fe", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/b352b50826d7d414d97d216e85673d9221f7b7fe", "committedDate": "2020-07-27T05:07:34Z", "message": "Change of access modifier.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "946aec8ec5fa3deaff9ed04d60d44f38deec8c49", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/946aec8ec5fa3deaff9ed04d60d44f38deec8c49", "committedDate": "2020-07-27T06:41:51Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afcb645114bae5df6cb72c64bacb382b54c68662", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/afcb645114bae5df6cb72c64bacb382b54c68662", "committedDate": "2020-07-27T06:44:29Z", "message": "Updating StreamSegmentStoreTestBase.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6500dbb499e7a57fe7068897f0789cc3c1fba7f3", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/6500dbb499e7a57fe7068897f0789cc3c1fba7f3", "committedDate": "2020-07-27T15:57:38Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1ec73294c667871a7833ebcdbc8537667b0c261", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/d1ec73294c667871a7833ebcdbc8537667b0c261", "committedDate": "2020-08-04T16:00:51Z", "message": "Merge branch 'feature-4938-dr-tools-base-case' into issue-4670-segment-continer-recovery-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4aed39cac856ee4999694059d16615569375e17", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/a4aed39cac856ee4999694059d16615569375e17", "committedDate": "2020-08-04T22:22:44Z", "message": "Changes after merging master.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e646e962c5134e3f6fb0b8fc25343c0c1f237187", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e646e962c5134e3f6fb0b8fc25343c0c1f237187", "committedDate": "2020-08-04T23:20:58Z", "message": "Reusing code to start debug segment container.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "033b52cfc45a389cb5ab1487e53a5102b0680b1b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/033b52cfc45a389cb5ab1487e53a5102b0680b1b", "committedDate": "2020-08-04T23:29:24Z", "message": "Change storage type.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7039b7492225227996b109126b762cbccdd431be", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/7039b7492225227996b109126b762cbccdd431be", "committedDate": "2020-08-04T23:34:37Z", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac4ca2ae7219a13c67d66fb50ef1c01db586e7c", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/0ac4ca2ae7219a13c67d66fb50ef1c01db586e7c", "committedDate": "2020-08-04T23:59:44Z", "message": "Spellings.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3429, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}