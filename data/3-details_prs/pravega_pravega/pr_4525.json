{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NDEwOTY5", "number": 4525, "title": "Issue 4540:  Prevent readers from waiting indefinitely if there is a partial/no response from the Segment Store.", "bodyText": "(Under discussion)\nChange log description\n\nEnsure Revisioned Stream resends the read request if the Segment store does not respond within 30 seconds after confirmation that the write-offset is greater than the current read-offset.\nEnsure the Event Stream Reader resends the read request if the complete WireCommand frame is not received within 30 seconds.\n\nPurpose of the change\nFixes #4540\nWhat the code does\nThis PR is in continuation of PR #4430. During the longevity testing of Pravega, we have observed scenarios where part of the WireCommand is never received by the client. This is observed post a network glitch on a Pravega cluster deployment that uses SDN with load balancers. The underlying network connection was never dropped nor did the packet arrive at the client. This PR addresses this issue which can potentially cause the readers to be stuck waiting for the last part of the data.\nThis change ensures the following:\n\nRevisionedStreamClient now resends the read request if there is no response from SSS. This resend logic is invoked only after the SegmentMetaClient confirms that the write-offset > the current read-offset i.e. the SSS has the data.\nEvent StreamReader now resends the read request in the case of partial WireCommand frames being received by the client. Here too we are sure that the SSS has the data.\n\nNote: A warning message indicating the partial response will be logged by the client along with the missing bytes.\nHow to verify it\nAll the existing and newly added tests should continue to work.", "createdAt": "2020-01-27T10:19:40Z", "url": "https://github.com/pravega/pravega/pull/4525", "merged": true, "mergeCommit": {"oid": "4bf247ffb63dffaeeb30d5fcbd552363f420ff1e"}, "closed": true, "closedAt": "2020-01-30T22:03:06Z", "author": {"login": "shrids"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-Z7GmgH2gAyMzY3NDEwOTY5OjA5N2Y3YmI5ZmRmOGI2NGY4MjczZThmMmNhNzcwOGY5ZWY5OWI1OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_h6LJAFqTM1MTE3MzQ4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "097f7bb9fdf8b64f8273e8f2ca7708f9ef99b58d", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/097f7bb9fdf8b64f8273e8f2ca7708f9ef99b58d", "committedDate": "2020-01-27T10:10:25Z", "message": "First version of fix.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40fa7fa2bd20b1ef56bd16e8a216f252ec592309", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/40fa7fa2bd20b1ef56bd16e8a216f252ec592309", "committedDate": "2020-01-27T10:16:18Z", "message": "Checkstyle fix.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfc88b597937cd580e07665d720f256bd4dccdf", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/2bfc88b597937cd580e07665d720f256bd4dccdf", "committedDate": "2020-01-27T10:26:14Z", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197b5d8448c7ec0c76b0f0e22cd7c528230c1778", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/197b5d8448c7ec0c76b0f0e22cd7c528230c1778", "committedDate": "2020-01-27T10:49:43Z", "message": "Fix junit failure.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4ODY4MDA2", "url": "https://github.com/pravega/pravega/pull/4525#pullrequestreview-348868006", "createdAt": "2020-01-27T18:08:48Z", "commit": {"oid": "197b5d8448c7ec0c76b0f0e22cd7c528230c1778"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1082e4ad7cf4e461161f8c16d48f6dc0a96e5364", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/1082e4ad7cf4e461161f8c16d48f6dc0a96e5364", "committedDate": "2020-01-28T02:48:29Z", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "998637bac0643ca5a89f21194c7f27abe50ea080", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/998637bac0643ca5a89f21194c7f27abe50ea080", "committedDate": "2020-01-28T05:07:55Z", "message": "Expand timout logic to EventStreamReader.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b6ba6ac6973d79bb860b604e50c82988b77c2e6", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/5b6ba6ac6973d79bb860b604e50c82988b77c2e6", "committedDate": "2020-01-28T05:16:38Z", "message": "Improve comments.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28332cf08c730ef8202df5cbea8a8c1b1559994", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/a28332cf08c730ef8202df5cbea8a8c1b1559994", "committedDate": "2020-01-28T10:00:54Z", "message": "Improve junits.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzgyMDU1", "url": "https://github.com/pravega/pravega/pull/4525#pullrequestreview-349782055", "createdAt": "2020-01-28T23:42:02Z", "commit": {"oid": "a28332cf08c730ef8202df5cbea8a8c1b1559994"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzo0MjowMlrOFi4c6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzo0NDozOVrOFi4f4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMDgwOA==", "bodyText": "This seems really aggressive. I don't see any reason this should be more aggressive than or different from RevisionedStreamClientImpl.READ_TIMEOUT_MS. In both cases we know the server has data and we are waiting to receive it.", "url": "https://github.com/pravega/pravega/pull/4525#discussion_r372120808", "createdAt": "2020-01-28T23:42:02Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java", "diffHunk": "@@ -28,6 +29,10 @@\n @ToString\n class EventSegmentReaderImpl implements EventSegmentReader {\n \n+    /* Partial data timeout. This timeout is the maximum amount of time the reader will wait in the case of\n+     * partial data being received by the client. After this timeout the client will resend the request. */\n+    static final long READ_TIMEOUT_MS = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28332cf08c730ef8202df5cbea8a8c1b1559994"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMTIwMg==", "bodyText": "I think this can be simplified to: in.setOffset(originalOffset, timeout);", "url": "https://github.com/pravega/pravega/pull/4525#discussion_r372121202", "createdAt": "2020-01-28T23:43:26Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java", "diffHunk": "@@ -54,30 +59,44 @@ public long getOffset() {\n      */\n     @Override\n     @Synchronized\n-    public ByteBuffer read(long timeout) throws EndOfSegmentException, SegmentTruncatedException {\n+    public ByteBuffer read(long firstByteTimeoutMillis) throws EndOfSegmentException, SegmentTruncatedException {\n         long originalOffset = in.getOffset();\n-        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, timeout);\n+        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, firstByteTimeoutMillis);\n         boolean success = false;\n+        boolean timeout = false;\n         try {\n-            ByteBuffer result = readEvent(timeout);\n+            ByteBuffer result = readEvent(firstByteTimeoutMillis);\n             success = true;\n             return result;\n+        } catch (TimeoutException e) {\n+            timeout = true;\n+            log.warn(\"Timeout observed while trying to read data from Segment store, the read request will be retransmitted. Details: {}\", e.getMessage());\n+            return null;\n         } finally {\n-            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, timeout, success);\n+            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, firstByteTimeoutMillis, success);\n             if (!success) {\n-                in.setOffset(originalOffset);\n+                if (timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28332cf08c730ef8202df5cbea8a8c1b1559994"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMTU2OA==", "bodyText": "Given three instances of this if and throw, it probably makes sense to have a private method.", "url": "https://github.com/pravega/pravega/pull/4525#discussion_r372121568", "createdAt": "2020-01-28T23:44:39Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java", "diffHunk": "@@ -54,30 +59,44 @@ public long getOffset() {\n      */\n     @Override\n     @Synchronized\n-    public ByteBuffer read(long timeout) throws EndOfSegmentException, SegmentTruncatedException {\n+    public ByteBuffer read(long firstByteTimeoutMillis) throws EndOfSegmentException, SegmentTruncatedException {\n         long originalOffset = in.getOffset();\n-        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, timeout);\n+        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, firstByteTimeoutMillis);\n         boolean success = false;\n+        boolean timeout = false;\n         try {\n-            ByteBuffer result = readEvent(timeout);\n+            ByteBuffer result = readEvent(firstByteTimeoutMillis);\n             success = true;\n             return result;\n+        } catch (TimeoutException e) {\n+            timeout = true;\n+            log.warn(\"Timeout observed while trying to read data from Segment store, the read request will be retransmitted. Details: {}\", e.getMessage());\n+            return null;\n         } finally {\n-            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, timeout, success);\n+            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, firstByteTimeoutMillis, success);\n             if (!success) {\n-                in.setOffset(originalOffset);\n+                if (timeout) {\n+                    in.setOffset(originalOffset, true);\n+                } else {\n+                    in.setOffset(originalOffset);\n+                }\n             }\n         }\n     }\n         \n-    public ByteBuffer readEvent(long timeout) throws EndOfSegmentException, SegmentTruncatedException {\n+    public ByteBuffer readEvent(long firstByteTimeoutMillis) throws EndOfSegmentException, SegmentTruncatedException, TimeoutException {\n         headerReadingBuffer.clear();\n-        int read = in.read(headerReadingBuffer, timeout);\n+        int read = in.read(headerReadingBuffer, firstByteTimeoutMillis);\n         if (read == 0) {\n+            // a resend will not be triggered in-case of a firstByteTimeout.\n             return null;\n         }\n         while (headerReadingBuffer.hasRemaining()) {\n-            in.read(headerReadingBuffer, Long.MAX_VALUE);\n+            if (in.read(headerReadingBuffer, READ_TIMEOUT_MS) == 0) {\n+                log.warn(\"Timeout out while trying to read WireCommand header during read of segment {} at offset {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28332cf08c730ef8202df5cbea8a8c1b1559994"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "347984d7e3748f2f16ced6d62c4c8f4ccc870172", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/347984d7e3748f2f16ced6d62c4c8f4ccc870172", "committedDate": "2020-01-29T07:38:45Z", "message": "CR Changes: Increase the Timeout to 30 seconds.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bc248bf6d3c76a28ae96a3e88b489884a0192d8", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/3bc248bf6d3c76a28ae96a3e88b489884a0192d8", "committedDate": "2020-01-29T08:03:08Z", "message": "Add buffer capacity and current position in the logs.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acff83263709e4137aa81b4d7b06dc162bbc58f8", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/acff83263709e4137aa81b4d7b06dc162bbc58f8", "committedDate": "2020-01-30T08:21:32Z", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20d9ebb6dea1225e26f9f98ff770647c7fbb8ceb", "author": {"user": {"login": "tkaitchuck", "name": "Tom Kaitchuck"}}, "url": "https://github.com/pravega/pravega/commit/20d9ebb6dea1225e26f9f98ff770647c7fbb8ceb", "committedDate": "2020-01-30T18:47:59Z", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTczNDg5", "url": "https://github.com/pravega/pravega/pull/4525#pullrequestreview-351173489", "createdAt": "2020-01-30T22:02:34Z", "commit": {"oid": "20d9ebb6dea1225e26f9f98ff770647c7fbb8ceb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3566, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}