{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjEzNzM5", "number": 4916, "title": "Issue 4915: Add timeout to add requests from Controller to Segment Store", "bodyText": "Signed-off-by: Shivesh Ranjan shivesh.ranjan@gmail.com\nChange log description\nAdds a timeout to requests being made to segment store using segment helper.\nPurpose of the change\nFixes #4915\nWhat the code does\nAdds a timeout to the future for the call to segment store. when the future is timedout, the request is failed with connection failed exception which is a retryable exception and all code paths handle it.\nHow to verify it\nUnit test added.", "createdAt": "2020-07-02T16:05:42Z", "url": "https://github.com/pravega/pravega/pull/4916", "merged": true, "mergeCommit": {"oid": "4aebd1bac494bb7ca2e37b30b9cc8670bc2ca95c"}, "closed": true, "closedAt": "2020-07-20T14:46:11Z", "author": {"login": "shiveshr"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxAzV3gH2gAyNDQzNjEzNzM5OmY5MGQ3YTA1MDg3NWJmYWIyZTVlZWU4MDcyZjg5MGE2NDVkMzk0NmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2yvF6gFqTQ1MTY3NTcyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f90d7a050875bfab2e5eee8072f890a645d3946f", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/f90d7a050875bfab2e5eee8072f890a645d3946f", "committedDate": "2020-07-02T15:44:27Z", "message": "Add timeout\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c81a96a5a4386c313a4136905fa2850fc439ecd", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/7c81a96a5a4386c313a4136905fa2850fc439ecd", "committedDate": "2020-07-02T16:18:23Z", "message": "cancel the request future\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f17bd6c5ae055366f3d3c0527b99eda316c9069", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/2f17bd6c5ae055366f3d3c0527b99eda316c9069", "committedDate": "2020-07-03T01:48:21Z", "message": "coverage\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTQ3OTcy", "url": "https://github.com/pravega/pravega/pull/4916#pullrequestreview-442147972", "createdAt": "2020-07-03T05:07:02Z", "commit": {"oid": "2f17bd6c5ae055366f3d3c0527b99eda316c9069"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTowNzowMlrOGsj05w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTowNzowMlrOGsj05w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NzUxMQ==", "bodyText": "Can we create a method on lines of the below pattern? This would eliminate the need for extra code.\npublic static <T> CompletableFuture<T> wrapFutureWithTimeout(CompletableFuture<T> cf, Duration timeout, ScheduledExecutorService executorService) {\n     \n       ScheduledFuture<Boolean> sf = executorService.schedule(() -> cf.completeExceptionally(new TimeoutException(tag)), timeout.toMillis(), TimeUnit.MILLISECONDS);\n       cf.whenComplete((r, ex) -> sf.cancel(true));\n       return cf;\n   }", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449377511", "createdAt": "2020-07-03T05:07:02Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -635,17 +651,34 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = Futures.futureWithTimeout(timeout.get(), executorService);\n+        AtomicReference<CompletableFuture<Reply>> f = new AtomicReference<>();\n+        Futures.completeAfter(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f17bd6c5ae055366f3d3c0527b99eda316c9069"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a0605369ec1e50f2b013534f2a05a4ed0677a83", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/0a0605369ec1e50f2b013534f2a05a4ed0677a83", "committedDate": "2020-07-06T01:52:05Z", "message": "PR comment\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzYxOTc4", "url": "https://github.com/pravega/pravega/pull/4916#pullrequestreview-442761978", "createdAt": "2020-07-06T04:04:34Z", "commit": {"oid": "0a0605369ec1e50f2b013534f2a05a4ed0677a83"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDowNDozNVrOGtIK-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDoxNToyOFrOGtITXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mjk4NA==", "bodyText": "Is there a reason why we need to create a new CompletableFuture object? Can we avoid it ?", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449972984", "createdAt": "2020-07-06T04:04:35Z", "author": {"login": "shrids"}, "path": "common/src/main/java/io/pravega/common/concurrent/Futures.java", "diffHunk": "@@ -543,6 +543,32 @@\n         result.whenComplete((r, ex) -> sf.cancel(true));\n         return result;\n     }\n+    \n+    /**\n+     * Creates a new CompletableFuture that either holds the result of future from the futureSupplier\n+     * or will timeout after the given amount of time.\n+     *\n+     * @param futureSupplier  Supplier of the future. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     * @return The result.\n+     */\n+    public static <T> CompletableFuture<T> futureWithTimeout(Supplier<CompletableFuture<T>> futureSupplier, \n+                                                             Duration timeout, ScheduledExecutorService executorService) {\n+        CompletableFuture<T> result = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0605369ec1e50f2b013534f2a05a4ed0677a83"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mzk2NQ==", "bodyText": "we should retain the auth failure logs.", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449973965", "createdAt": "2020-07-06T04:09:37Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -635,17 +651,27 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = Futures.futureWithTimeout(\n+                () -> connection.sendRequest(requestId, request)\n+                                .exceptionally(e -> {\n+                                    Throwable unwrap = Exceptions.unwrap(e);\n+                                    if (unwrap instanceof ConnectionFailedException || unwrap instanceof ConnectionClosedException) {\n+                                        log.warn(requestId, \"Connection dropped\");\n+                                        throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.ConnectionFailed);\n+                                    } else {\n+                                        log.error(requestId, \"Request failed\", e);\n+                                        throw new CompletionException(e);\n+                                    }\n+                                }),\n+                timeout.get(), executorService);\n+\n+        return future\n                 .exceptionally(e -> {\n-                    Throwable unwrap = Exceptions.unwrap(e);\n-                    if (unwrap instanceof ConnectionFailedException || unwrap instanceof ConnectionClosedException) {\n-                        log.warn(requestId, \"Connection dropped\");\n+                    if (Exceptions.unwrap(e) instanceof TimeoutException) {\n+                        log.warn(requestId, \"Request timedout.\");\n                         throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.ConnectionFailed);\n-                    } else if (unwrap instanceof AuthenticationException) {\n-                        log.warn(requestId, \"Authentication Exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0605369ec1e50f2b013534f2a05a4ed0677a83"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NTEzMg==", "bodyText": "nit: Can we have all the exception handling in one block? it will reduce the creation of a CompletionStage and all the error handling will be done in one block (e.g: right before returning the future below)", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449975132", "createdAt": "2020-07-06T04:15:28Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -635,17 +651,27 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = Futures.futureWithTimeout(\n+                () -> connection.sendRequest(requestId, request)\n+                                .exceptionally(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0605369ec1e50f2b013534f2a05a4ed0677a83"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cc9638c41cc239901d2cecd0fdb4541eb74745", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/c8cc9638c41cc239901d2cecd0fdb4541eb74745", "committedDate": "2020-07-06T05:28:05Z", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c8cc9638c41cc239901d2cecd0fdb4541eb74745", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/c8cc9638c41cc239901d2cecd0fdb4541eb74745", "committedDate": "2020-07-06T05:28:05Z", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODEwODEx", "url": "https://github.com/pravega/pravega/pull/4916#pullrequestreview-442810811", "createdAt": "2020-07-06T06:46:32Z", "commit": {"oid": "c8cc9638c41cc239901d2cecd0fdb4541eb74745"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c335353087af43cc76ce5465b30516159b096726", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/c335353087af43cc76ce5465b30516159b096726", "committedDate": "2020-07-08T14:56:00Z", "message": "merge with master\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c026efdfd8ae215efddda15a93ec7f1f23f57f3", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/2c026efdfd8ae215efddda15a93ec7f1f23f57f3", "committedDate": "2020-07-09T07:30:12Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7727fd59ed413f349dbb3940cf79d417f6687126", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/7727fd59ed413f349dbb3940cf79d417f6687126", "committedDate": "2020-07-09T08:39:08Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ab1912ef9c6c282c9ee58e2034dcbf7ca617e6", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/72ab1912ef9c6c282c9ee58e2034dcbf7ca617e6", "committedDate": "2020-07-10T05:09:48Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "addbd9ada3a9c8a525c1e99ed3892eebb9694a4a", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/addbd9ada3a9c8a525c1e99ed3892eebb9694a4a", "committedDate": "2020-07-13T17:18:53Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90210011b77ca0fe41ea1d2ca45a26ad221309d3", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/90210011b77ca0fe41ea1d2ca45a26ad221309d3", "committedDate": "2020-07-14T10:17:06Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8372718ea3665f7a75468f6da4c8afdd85c9cfa1", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/8372718ea3665f7a75468f6da4c8afdd85c9cfa1", "committedDate": "2020-07-15T05:52:46Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78456e11282a73a751ee64421764eb463460077d", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/78456e11282a73a751ee64421764eb463460077d", "committedDate": "2020-07-15T10:36:20Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzE3Mzg2", "url": "https://github.com/pravega/pravega/pull/4916#pullrequestreview-450717386", "createdAt": "2020-07-17T14:43:18Z", "commit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0MzoxOFrOGzVwIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0OToyNFrOGzV_qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4Njk0NA==", "bodyText": "please rewrite the futureWithTimeout above to make use of this method.\nEx:\nreturn futureWithTimeout(CompletableFuture::new, timeout, executorService)", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456486944", "createdAt": "2020-07-17T14:43:18Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/concurrent/Futures.java", "diffHunk": "@@ -567,6 +567,47 @@\n         result.whenComplete((r, ex) -> sf.cancel(true));\n         return result;\n     }\n+    \n+    /**\n+     * Creates a new CompletableFuture that either holds the result of future from the futureSupplier\n+     * or will timeout after the given amount of time.\n+     *\n+     * @param futureSupplier  Supplier of the future. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     * @return A CompletableFuture which is either completed within given timebound or failed with timeout exception.\n+     */\n+    public static <T> CompletableFuture<T> futureWithTimeout(Supplier<CompletableFuture<T>> futureSupplier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4Nzc5Mg==", "bodyText": "This can be rewritten as\nfutureWithTimeout(() -> future, timeout, executorService)", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456487792", "createdAt": "2020-07-17T14:44:44Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/concurrent/Futures.java", "diffHunk": "@@ -567,6 +567,47 @@\n         result.whenComplete((r, ex) -> sf.cancel(true));\n         return result;\n     }\n+    \n+    /**\n+     * Creates a new CompletableFuture that either holds the result of future from the futureSupplier\n+     * or will timeout after the given amount of time.\n+     *\n+     * @param futureSupplier  Supplier of the future. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     * @return A CompletableFuture which is either completed within given timebound or failed with timeout exception.\n+     */\n+    public static <T> CompletableFuture<T> futureWithTimeout(Supplier<CompletableFuture<T>> futureSupplier,\n+                                                             Duration timeout, ScheduledExecutorService executorService) {\n+        CompletableFuture<T> future = futureSupplier.get();\n+        ScheduledFuture<Boolean> sf = executorService.schedule(() -> future.completeExceptionally(\n+                new TimeoutException()), timeout.toMillis(), TimeUnit.MILLISECONDS);\n+        \n+        return future.whenComplete((r, ex) -> {\n+            sf.cancel(true);\n+        });\n+    }\n+\n+    /**\n+     * Add a timeout to the CompletableFuture. If the future does not complete within the specified timeout,\n+     * this would complete the future with timeout exception. \n+     *\n+     * @param future          Completable future to add timeout to. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     */\n+    public static <T> void addTimeout(CompletableFuture<T> future, Duration timeout, ScheduledExecutorService executorService) {\n+        ScheduledFuture<Boolean> sf = executorService.schedule(() -> future.completeExceptionally(new TimeoutException()), timeout.toMillis(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTE5OA==", "bodyText": "Please change this class to extend from ThreadPooledTestSuite and override getThreadPoolSize to return 1.\nThat base class will take care of your executor.\nWhile you're at it, there is at least one other test in this class that makes its own executor (and never shuts it down!). Please change that too to use executorService() instead.", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456489198", "createdAt": "2020-07-17T14:46:48Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/test/java/io/pravega/common/concurrent/FuturesTests.java", "diffHunk": "@@ -21,23 +24,40 @@\n import java.util.Map;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ForkJoinPool;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeoutException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Function;\n import java.util.function.Predicate;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import lombok.val;\n+import org.junit.After;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n \n /**\n  * Unit tests for the Futures class.\n  */\n public class FuturesTests {\n+    private ScheduledExecutorService executor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTg4NQ==", "bodyText": "Futures.futureWithTimeout(() -> connection.sendRequest(...), ...) ?\nThat will preclude the need for Futures.addTimeout", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456489885", "createdAt": "2020-07-17T14:47:50Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -605,7 +622,9 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = connection.sendRequest(requestId, request);\n+        Futures.addTimeout(future, timeout.get(), executorService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDIwNw==", "bodyText": "unwrap contains the unwrapped e. Use that.", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456490207", "createdAt": "2020-07-17T14:48:19Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -614,6 +633,9 @@ private void closeConnection(Reply reply, RawClient client) {\n                     } else if (unwrap instanceof AuthenticationException) {\n                         log.warn(requestId, \"Authentication Exception\");\n                         throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.AuthFailed);\n+                    } else if (Exceptions.unwrap(e) instanceof TimeoutException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDcwNA==", "bodyText": "I would suggest you express this in seconds. We may want to add 30s timeouts. 2 minutes seems too long.", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456490704", "createdAt": "2020-07-17T14:49:05Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/util/Config.java", "diffHunk": "@@ -128,6 +128,9 @@\n     public static final Property<String> PROPERTY_TLS_ENABLED_FOR_SEGMENT_STORE = Property.named(\n             \"segmentstore.connect.channel.tls\", \"\", \"auth.segmentStoreTlsEnabled\");\n \n+    public static final Property<Integer> PROPERTY_SEGMENT_STORE_REQUEST_TIMEOUT_MINUTES = Property.named(\n+            \"segmentstore.connect.channel.timeoutMinutes\", 2, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDkyMQ==", "bodyText": "Use ThreadPooledTestSuite", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456490921", "createdAt": "2020-07-17T14:49:24Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/test/java/io/pravega/controller/server/SegmentHelperTest.java", "diffHunk": "@@ -65,19 +70,29 @@\n     private final byte[] value = \"v\".getBytes();\n     private final ByteBuf token1 = wrappedBuffer(new byte[]{0x01});\n     private final ByteBuf token2 = wrappedBuffer(new byte[]{0x02});\n-\n+    private ScheduledExecutorService executorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78456e11282a73a751ee64421764eb463460077d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b68096451866e954925a1c84ba00ccf28312fb20", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/b68096451866e954925a1c84ba00ccf28312fb20", "committedDate": "2020-07-17T15:41:33Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a9ef65a21a9734bfe1e8ba32afd76857e4f0ae", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/40a9ef65a21a9734bfe1e8ba32afd76857e4f0ae", "committedDate": "2020-07-20T06:49:17Z", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7a6fb8d4d9cf56b31aa5ec9137dacdbb8bb206", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/2d7a6fb8d4d9cf56b31aa5ec9137dacdbb8bb206", "committedDate": "2020-07-20T06:51:23Z", "message": "Merge branch 'addTimeout' of https://github.com/shiveshr/pravega-1 into addTimeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e42ae41372bdbb7563ce4319293bf81297444850", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/e42ae41372bdbb7563ce4319293bf81297444850", "committedDate": "2020-07-20T06:52:06Z", "message": "Merge branch 'master' into addTimeout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjc1NzIz", "url": "https://github.com/pravega/pravega/pull/4916#pullrequestreview-451675723", "createdAt": "2020-07-20T14:44:41Z", "commit": {"oid": "e42ae41372bdbb7563ce4319293bf81297444850"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3945, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}