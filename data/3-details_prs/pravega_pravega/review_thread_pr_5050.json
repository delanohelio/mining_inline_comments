{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzUyNTg1", "number": 5050, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0Nzo1MVrOEXRe9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoxOTo0M1rOEm6FEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODM5MTU5OnYy", "diffSide": "RIGHT", "path": "test/system/src/main/java/io/pravega/test/system/framework/kubernetes/K8sClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0Nzo1MVrOG--KDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTo1ODo1M1rOHKu_gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MzI3OA==", "bodyText": "Remove all commented out code. Here and everywhere else you used it.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468683278", "createdAt": "2020-08-11T15:47:51Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/kubernetes/K8sClient.java", "diffHunk": "@@ -498,6 +500,22 @@ public void deletePVC(String namespace, String name) {\n         return exceptionallyExpecting(callback.getFuture(), isConflict, null);\n     }\n \n+    /**\n+     * Create ConfigMap.\n+     * @param namespace The namespace where the ConfigMap should be created.\n+     * @param binding The cluster ConfigMap.\n+     * @return A future indicating the status of the ConfigMap operation.\n+     */\n+    @SneakyThrows(ApiException.class)\n+    public CompletableFuture<V1ConfigMap> createConfigMap(String namespace, V1ConfigMap binding) {\n+        CoreV1Api api = new CoreV1Api();\n+        //V1ConfigMap api = new V1ConfigMap ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzcyOA==", "bodyText": "Removed.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481017728", "createdAt": "2020-09-01T09:58:53Z", "author": {"login": "Richa-Srivastava"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/kubernetes/K8sClient.java", "diffHunk": "@@ -498,6 +500,22 @@ public void deletePVC(String namespace, String name) {\n         return exceptionallyExpecting(callback.getFuture(), isConflict, null);\n     }\n \n+    /**\n+     * Create ConfigMap.\n+     * @param namespace The namespace where the ConfigMap should be created.\n+     * @param binding The cluster ConfigMap.\n+     * @return A future indicating the status of the ConfigMap operation.\n+     */\n+    @SneakyThrows(ApiException.class)\n+    public CompletableFuture<V1ConfigMap> createConfigMap(String namespace, V1ConfigMap binding) {\n+        CoreV1Api api = new CoreV1Api();\n+        //V1ConfigMap api = new V1ConfigMap ();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MzI3OA=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODM5MjYzOnYy", "diffSide": "LEFT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0ODowNlrOG--KvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTo1OTowNFrOHKu_4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MzQ1Mg==", "bodyText": "Please revert all formatting changes done in this file.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468683452", "createdAt": "2020-08-11T15:48:06Z", "author": {"login": "andreipaduroiu"}, "path": "build.gradle", "diffHunk": "@@ -118,7 +118,7 @@ allprojects {\n             force \"org.apache.curator:curator-framework:\" + apacheCuratorVersion\n             force \"org.glassfish.jersey.core:jersey-common:\" + jerseyVersion\n             force \"org.glassfish.jersey.core:jersey-server:\" + jerseyVersion\n-            force \"com.fasterxml.jackson.core:jackson-databind:\" + jacksonVersion ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzgyNQ==", "bodyText": "Reverted", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481017825", "createdAt": "2020-09-01T09:59:04Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -118,7 +118,7 @@ allprojects {\n             force \"org.apache.curator:curator-framework:\" + apacheCuratorVersion\n             force \"org.glassfish.jersey.core:jersey-common:\" + jerseyVersion\n             force \"org.glassfish.jersey.core:jersey-server:\" + jerseyVersion\n-            force \"com.fasterxml.jackson.core:jackson-databind:\" + jacksonVersion ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MzQ1Mg=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODM5NDMzOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0ODozNVrOG--L0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTo1OToxOVrOHKvAZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MzcyOQ==", "bodyText": "Remove", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468683729", "createdAt": "2020-08-11T15:48:35Z", "author": {"login": "andreipaduroiu"}, "path": "build.gradle", "diffHunk": "@@ -856,8 +861,8 @@ project('test:system') {\n \n         ext.repoUrl = project.hasProperty(\"repoUrl\") ? project.repoUrl : \"\"\n         systemProperty \"execType\", \"KUBERNETES\"\n-        systemProperty \"pravegaOperatorImage\", System.getProperty(\"pravegaOperatorImage\", \"pravega/pravega-operator:latest\")\n-        systemProperty \"zookeeperOperatorImage\", System.getProperty(\"zookeeperOperatorImage\", \"pravega/zookeeper-operator:latest\")\n+        //systemProperty \"pravegaOperatorImage\", System.getProperty(\"pravegaOperatorImage\", \"pravega/pravega-operator:latest\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzk1OQ==", "bodyText": "Removed.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481017959", "createdAt": "2020-09-01T09:59:19Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -856,8 +861,8 @@ project('test:system') {\n \n         ext.repoUrl = project.hasProperty(\"repoUrl\") ? project.repoUrl : \"\"\n         systemProperty \"execType\", \"KUBERNETES\"\n-        systemProperty \"pravegaOperatorImage\", System.getProperty(\"pravegaOperatorImage\", \"pravega/pravega-operator:latest\")\n-        systemProperty \"zookeeperOperatorImage\", System.getProperty(\"zookeeperOperatorImage\", \"pravega/zookeeper-operator:latest\")\n+        //systemProperty \"pravegaOperatorImage\", System.getProperty(\"pravegaOperatorImage\", \"pravega/pravega-operator:latest\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MzcyOQ=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODM5NjAyOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0OTowMFrOG--M8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowMDowMlrOHKvCEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDAxOQ==", "bodyText": "Why did you do this twice (here and a few lines above)?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468684019", "createdAt": "2020-08-11T15:49:00Z", "author": {"login": "andreipaduroiu"}, "path": "build.gradle", "diffHunk": "@@ -871,22 +876,30 @@ project('test:system') {\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n         // bookkeeper version defaults to pravega version.\n         systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version\n         // tier2Type , default is NFS.\n         systemProperty \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n         // tier2 Configuration, specified as comma seperated key values k1=v1,k2=v2\n         systemProperty \"tier2Config\", System.getProperty(\"tier2Config\")\n-\n+        systemProperty \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\")\n+        systemProperty \"imageVersionBkOp\",System.getProperty(\"imageVersionBkOp\", \"latest\")\n+        systemProperty \"imageVersionZkOp\",System.getProperty(\"imageVersionZkOp\", \"latest\")\n+        systemProperty \"chartName\",System.getProperty(\"chartName\", \"pravega\")\n+        systemProperty \"repository\",System.getProperty(\"repository\", \"pravega\")\n+\n+        systemProperty \"imageVersionPrOp\", System.getProperty(\"imageVersionPrOp\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxODM4Ng==", "bodyText": "Removed two entries for same parameter", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481018386", "createdAt": "2020-09-01T10:00:02Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -871,22 +876,30 @@ project('test:system') {\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n         // bookkeeper version defaults to pravega version.\n         systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version\n         // tier2Type , default is NFS.\n         systemProperty \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n         // tier2 Configuration, specified as comma seperated key values k1=v1,k2=v2\n         systemProperty \"tier2Config\", System.getProperty(\"tier2Config\")\n-\n+        systemProperty \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\")\n+        systemProperty \"imageVersionBkOp\",System.getProperty(\"imageVersionBkOp\", \"latest\")\n+        systemProperty \"imageVersionZkOp\",System.getProperty(\"imageVersionZkOp\", \"latest\")\n+        systemProperty \"chartName\",System.getProperty(\"chartName\", \"pravega\")\n+        systemProperty \"repository\",System.getProperty(\"repository\", \"pravega\")\n+\n+        systemProperty \"imageVersionPrOp\", System.getProperty(\"imageVersionPrOp\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDAxOQ=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODM5NjQ0OnYy", "diffSide": "RIGHT", "path": "gradle/wrapper/gradle-wrapper.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0OTowOFrOG--NMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowMTozNlrOHKvFaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDA4Mw==", "bodyText": "Revert", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468684083", "createdAt": "2020-08-11T15:49:08Z", "author": {"login": "andreipaduroiu"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,5 +1,6 @@\n+#Wed Jul 15 17:15:38 IST 2020\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-all.zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTI0MA==", "bodyText": "Reverted.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481019240", "createdAt": "2020-09-01T10:01:36Z", "author": {"login": "Richa-Srivastava"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,5 +1,6 @@\n+#Wed Jul 15 17:15:38 IST 2020\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-all.zip", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDA4Mw=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODM5NzQ5OnYy", "diffSide": "RIGHT", "path": "test/system/kubernetes/setupTestPod.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0OToyNVrOG--N8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowMTo0N1rOHKvFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDI3NA==", "bodyText": "Revert.\nDoesn't this break the Rat check?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468684274", "createdAt": "2020-08-11T15:49:25Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/kubernetes/setupTestPod.sh", "diffHunk": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+# Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTMzMg==", "bodyText": "Reverted.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481019332", "createdAt": "2020-09-01T10:01:47Z", "author": {"login": "Richa-Srivastava"}, "path": "test/system/kubernetes/setupTestPod.sh", "diffHunk": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+# Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDI3NA=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQwMTUzOnYy", "diffSide": "RIGHT", "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/AbstractService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo1MDoyNFrOG--QjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowNjo1MFrOHKvTjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDk0MQ==", "bodyText": "you say alpha here but you changed it to beta above.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468684941", "createdAt": "2020-08-11T15:50:24Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/AbstractService.java", "diffHunk": "@@ -83,15 +56,23 @@\n     static final String PRAVEGA_ID = \"pravega\";\n     static final String ZOOKEEPER_OPERATOR_IMAGE = System.getProperty(\"zookeeperOperatorImage\", \"pravega/zookeeper-operator:latest\");\n     static final String IMAGE_PULL_POLICY = System.getProperty(\"imagePullPolicy\", \"Always\");\n+    static final String BOOKKEEPER_ID = \"pravega-bk\";\n+    static final String CUSTOM_RESOURCE_GROUP_BOOKKEEPER = \"bookkeeper.pravega.io\";\n+    static final String CUSTOM_RESOURCE_VERSION_BOOKKEEPER = \"v1alpha1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyMjg2Mg==", "bodyText": "beta is wrt pravega:static final String CUSTOM_RESOURCE_VERSION_PRAVEGA = \"v1beta1\";\nalpha is for bookkeeper:  static final String CUSTOM_RESOURCE_VERSION_BOOKKEEPER = \"v1alpha1\"", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481022862", "createdAt": "2020-09-01T10:06:50Z", "author": {"login": "Richa-Srivastava"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/AbstractService.java", "diffHunk": "@@ -83,15 +56,23 @@\n     static final String PRAVEGA_ID = \"pravega\";\n     static final String ZOOKEEPER_OPERATOR_IMAGE = System.getProperty(\"zookeeperOperatorImage\", \"pravega/zookeeper-operator:latest\");\n     static final String IMAGE_PULL_POLICY = System.getProperty(\"imagePullPolicy\", \"Always\");\n+    static final String BOOKKEEPER_ID = \"pravega-bk\";\n+    static final String CUSTOM_RESOURCE_GROUP_BOOKKEEPER = \"bookkeeper.pravega.io\";\n+    static final String CUSTOM_RESOURCE_VERSION_BOOKKEEPER = \"v1alpha1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NDk0MQ=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQwNTQ3OnYy", "diffSide": "RIGHT", "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/AbstractService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo1MToxOFrOG--TCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowMzoyN1rOHKvJMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NTU3Ng==", "bodyText": "commented out code", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468685576", "createdAt": "2020-08-11T15:51:18Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/AbstractService.java", "diffHunk": "@@ -163,66 +111,32 @@ public String getID() {\n                 .put(\"segmentStoreResources\", getResources(\"2000m\", \"5Gi\", \"1000m\", \"3Gi\"))\n                 .put(\"options\", props)\n                 .put(\"image\", pravegaImgSpec)\n-                .put(\"tier2\", tier2Spec())\n+                .put(\"longtermStorage\", tier2Spec())\n                 .build();\n \n         return ImmutableMap.<String, Object>builder()\n                 .put(\"apiVersion\", CUSTOM_RESOURCE_API_VERSION)\n                 .put(\"kind\", CUSTOM_RESOURCE_KIND_PRAVEGA)\n                 .put(\"metadata\", ImmutableMap.of(\"name\", PRAVEGA_ID, \"namespace\", NAMESPACE))\n-                .put(\"spec\", buildPravegaClusterSpec(zkLocation, bookkeeperSpec, pravegaSpec))\n+                //.put(\"spec\", buildPravegaClusterSpec(zkLocation, bookkeeperSpec, pravegaSpec))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyMDIxMA==", "bodyText": "Removed.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481020210", "createdAt": "2020-09-01T10:03:27Z", "author": {"login": "Richa-Srivastava"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/AbstractService.java", "diffHunk": "@@ -163,66 +111,32 @@ public String getID() {\n                 .put(\"segmentStoreResources\", getResources(\"2000m\", \"5Gi\", \"1000m\", \"3Gi\"))\n                 .put(\"options\", props)\n                 .put(\"image\", pravegaImgSpec)\n-                .put(\"tier2\", tier2Spec())\n+                .put(\"longtermStorage\", tier2Spec())\n                 .build();\n \n         return ImmutableMap.<String, Object>builder()\n                 .put(\"apiVersion\", CUSTOM_RESOURCE_API_VERSION)\n                 .put(\"kind\", CUSTOM_RESOURCE_KIND_PRAVEGA)\n                 .put(\"metadata\", ImmutableMap.of(\"name\", PRAVEGA_ID, \"namespace\", NAMESPACE))\n-                .put(\"spec\", buildPravegaClusterSpec(zkLocation, bookkeeperSpec, pravegaSpec))\n+                //.put(\"spec\", buildPravegaClusterSpec(zkLocation, bookkeeperSpec, pravegaSpec))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NTU3Ng=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQwODI3OnYy", "diffSide": "RIGHT", "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/BookkeeperK8sService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo1MjowN1rOG--U-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowMzozNlrOHKvJlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NjA3Mw==", "bodyText": "extra line", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468686073", "createdAt": "2020-08-11T15:52:07Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/BookkeeperK8sService.java", "diffHunk": "@@ -36,73 +36,73 @@ public BookkeeperK8sService(final String id, final URI zkUri, final ImmutableMap\n \n     @Override\n     public void start(boolean wait) {\n-        Futures.getAndHandleExceptions(deployPravegaUsingOperator(zkUri, DEFAULT_CONTROLLER_COUNT, DEFAULT_SEGMENTSTORE_COUNT, DEFAULT_BOOKIE_COUNT, properties),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to deploy pravega operator/pravega services\", t));\n+        Futures.getAndHandleExceptions(deployBookkeeperCluster(zkUri, DEFAULT_BOOKIE_COUNT, properties),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper operator/pravega services\", t));\n         if (wait) {\n             Futures.getAndHandleExceptions(k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, DEFAULT_BOOKIE_COUNT),\n-                                           t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n+                    t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n         }\n     }\n \n     @Override\n     public void stop() {\n-        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA,\n-                                                                    CUSTOM_RESOURCE_VERSION_PRAVEGA,\n-                                                                    NAMESPACE,\n-                                                                    CUSTOM_RESOURCE_PLURAL_PRAVEGA,\n-                                                                    PRAVEGA_ID),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to stop pravega\", t));\n+        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER,\n+                CUSTOM_RESOURCE_VERSION_BOOKKEEPER,\n+                NAMESPACE,\n+                CUSTOM_RESOURCE_PLURAL_BOOKKEEPER,\n+                BOOKKEEPER_ID),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to stop bookkeeper\", t));\n \n     }\n \n     @Override\n     public boolean isRunning() {\n         return k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                        .thenApply(statuses -> statuses.stream()\n-                                                       .filter(podStatus -> podStatus.getContainerStatuses()\n-                                                                                     .stream()\n-                                                                                     .allMatch(st -> st.getState().getRunning() != null))\n-                                                       .count())\n-                        .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n-                        .exceptionally(t -> {\n-                            log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n-                            return false;\n-                        }).join();\n+                .thenApply(statuses -> statuses.stream()\n+                        .filter(podStatus -> podStatus.getContainerStatuses()\n+                                .stream()\n+                                .allMatch(st -> st.getState().getRunning() != null))\n+                        .count())\n+                .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n+                .exceptionally(t -> {\n+                    log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n+                    return false;\n+                }).join();\n     }\n \n     @Override\n     public List<URI> getServiceDetails() {\n         //fetch the URI.\n         return Futures.getAndHandleExceptions(k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                                                       .thenApply(statuses -> statuses.stream()\n-                                                                                     .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n-                                                                                     .collect(Collectors.toList())),\n-                                              t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n+                        .thenApply(statuses -> statuses.stream()\n+                                .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n+                                .collect(Collectors.toList())),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public CompletableFuture<Void> scaleService(int newInstanceCount) {\n-        log.info(\"Scaling Bookkeeper service to {} instances.\", newInstanceCount);\n-        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, PRAVEGA_ID)\n-                        .thenCompose(o -> {\n-                            Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n-                            Map<String, Object> pravegaSpec = (Map<String, Object>) spec.get(\"pravega\");\n-                            Map<String, Object> bookkeeperSpec = (Map<String, Object>) spec.get(\"bookkeeper\");\n-\n-                            int currentControllerCount = ((Double) pravegaSpec.get(\"controllerReplicas\")).intValue();\n-                            int currentSegmentStoreCount = ((Double) pravegaSpec.get(\"segmentStoreReplicas\")).intValue();\n-                            int currentBookkeeperCount = ((Double) bookkeeperSpec.get(\"replicas\")).intValue();\n-                            log.debug(\"Current instance counts : Bookkeeper {} Controller {} SegmentStore {}.\", currentBookkeeperCount,\n-                                      currentControllerCount, currentSegmentStoreCount);\n-                            if (currentBookkeeperCount != newInstanceCount) {\n-                                final Map<String, Object> patchedSpec = buildPatchedPravegaClusterSpec(\"replicas\", newInstanceCount, \"bookkeeper\");\n-                                return k8sClient.createAndUpdateCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, patchedSpec)\n-                                        .thenCompose(v -> k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, newInstanceCount));\n-                            } else {\n-                                return CompletableFuture.completedFuture(null);\n-                            }\n-                        });\n+        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER, CUSTOM_RESOURCE_VERSION_BOOKKEEPER, NAMESPACE, CUSTOM_RESOURCE_PLURAL_BOOKKEEPER, BOOKKEEPER_ID)\n+                .thenCompose(o -> {\n+                    Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n+                    int currentBookkeeperCount = ((Double) spec.get(\"replicas\")).intValue();\n+                    log.debug(\"Current instance counts : Bookkeeper {} .\", currentBookkeeperCount);\n+\n+                    if (currentBookkeeperCount != newInstanceCount) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyMDMxMA==", "bodyText": "Removed.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481020310", "createdAt": "2020-09-01T10:03:36Z", "author": {"login": "Richa-Srivastava"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/BookkeeperK8sService.java", "diffHunk": "@@ -36,73 +36,73 @@ public BookkeeperK8sService(final String id, final URI zkUri, final ImmutableMap\n \n     @Override\n     public void start(boolean wait) {\n-        Futures.getAndHandleExceptions(deployPravegaUsingOperator(zkUri, DEFAULT_CONTROLLER_COUNT, DEFAULT_SEGMENTSTORE_COUNT, DEFAULT_BOOKIE_COUNT, properties),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to deploy pravega operator/pravega services\", t));\n+        Futures.getAndHandleExceptions(deployBookkeeperCluster(zkUri, DEFAULT_BOOKIE_COUNT, properties),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper operator/pravega services\", t));\n         if (wait) {\n             Futures.getAndHandleExceptions(k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, DEFAULT_BOOKIE_COUNT),\n-                                           t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n+                    t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n         }\n     }\n \n     @Override\n     public void stop() {\n-        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA,\n-                                                                    CUSTOM_RESOURCE_VERSION_PRAVEGA,\n-                                                                    NAMESPACE,\n-                                                                    CUSTOM_RESOURCE_PLURAL_PRAVEGA,\n-                                                                    PRAVEGA_ID),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to stop pravega\", t));\n+        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER,\n+                CUSTOM_RESOURCE_VERSION_BOOKKEEPER,\n+                NAMESPACE,\n+                CUSTOM_RESOURCE_PLURAL_BOOKKEEPER,\n+                BOOKKEEPER_ID),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to stop bookkeeper\", t));\n \n     }\n \n     @Override\n     public boolean isRunning() {\n         return k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                        .thenApply(statuses -> statuses.stream()\n-                                                       .filter(podStatus -> podStatus.getContainerStatuses()\n-                                                                                     .stream()\n-                                                                                     .allMatch(st -> st.getState().getRunning() != null))\n-                                                       .count())\n-                        .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n-                        .exceptionally(t -> {\n-                            log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n-                            return false;\n-                        }).join();\n+                .thenApply(statuses -> statuses.stream()\n+                        .filter(podStatus -> podStatus.getContainerStatuses()\n+                                .stream()\n+                                .allMatch(st -> st.getState().getRunning() != null))\n+                        .count())\n+                .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n+                .exceptionally(t -> {\n+                    log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n+                    return false;\n+                }).join();\n     }\n \n     @Override\n     public List<URI> getServiceDetails() {\n         //fetch the URI.\n         return Futures.getAndHandleExceptions(k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                                                       .thenApply(statuses -> statuses.stream()\n-                                                                                     .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n-                                                                                     .collect(Collectors.toList())),\n-                                              t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n+                        .thenApply(statuses -> statuses.stream()\n+                                .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n+                                .collect(Collectors.toList())),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public CompletableFuture<Void> scaleService(int newInstanceCount) {\n-        log.info(\"Scaling Bookkeeper service to {} instances.\", newInstanceCount);\n-        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, PRAVEGA_ID)\n-                        .thenCompose(o -> {\n-                            Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n-                            Map<String, Object> pravegaSpec = (Map<String, Object>) spec.get(\"pravega\");\n-                            Map<String, Object> bookkeeperSpec = (Map<String, Object>) spec.get(\"bookkeeper\");\n-\n-                            int currentControllerCount = ((Double) pravegaSpec.get(\"controllerReplicas\")).intValue();\n-                            int currentSegmentStoreCount = ((Double) pravegaSpec.get(\"segmentStoreReplicas\")).intValue();\n-                            int currentBookkeeperCount = ((Double) bookkeeperSpec.get(\"replicas\")).intValue();\n-                            log.debug(\"Current instance counts : Bookkeeper {} Controller {} SegmentStore {}.\", currentBookkeeperCount,\n-                                      currentControllerCount, currentSegmentStoreCount);\n-                            if (currentBookkeeperCount != newInstanceCount) {\n-                                final Map<String, Object> patchedSpec = buildPatchedPravegaClusterSpec(\"replicas\", newInstanceCount, \"bookkeeper\");\n-                                return k8sClient.createAndUpdateCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, patchedSpec)\n-                                        .thenCompose(v -> k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, newInstanceCount));\n-                            } else {\n-                                return CompletableFuture.completedFuture(null);\n-                            }\n-                        });\n+        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER, CUSTOM_RESOURCE_VERSION_BOOKKEEPER, NAMESPACE, CUSTOM_RESOURCE_PLURAL_BOOKKEEPER, BOOKKEEPER_ID)\n+                .thenCompose(o -> {\n+                    Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n+                    int currentBookkeeperCount = ((Double) spec.get(\"replicas\")).intValue();\n+                    log.debug(\"Current instance counts : Bookkeeper {} .\", currentBookkeeperCount);\n+\n+                    if (currentBookkeeperCount != newInstanceCount) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NjA3Mw=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQwOTI2OnYy", "diffSide": "RIGHT", "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/BookkeeperK8sService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo1MjoxOFrOG--Vhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowMzo0M1rOHKvJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NjIxNA==", "bodyText": "remove these 2 extra lines", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468686214", "createdAt": "2020-08-11T15:52:18Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/BookkeeperK8sService.java", "diffHunk": "@@ -36,73 +36,73 @@ public BookkeeperK8sService(final String id, final URI zkUri, final ImmutableMap\n \n     @Override\n     public void start(boolean wait) {\n-        Futures.getAndHandleExceptions(deployPravegaUsingOperator(zkUri, DEFAULT_CONTROLLER_COUNT, DEFAULT_SEGMENTSTORE_COUNT, DEFAULT_BOOKIE_COUNT, properties),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to deploy pravega operator/pravega services\", t));\n+        Futures.getAndHandleExceptions(deployBookkeeperCluster(zkUri, DEFAULT_BOOKIE_COUNT, properties),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper operator/pravega services\", t));\n         if (wait) {\n             Futures.getAndHandleExceptions(k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, DEFAULT_BOOKIE_COUNT),\n-                                           t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n+                    t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n         }\n     }\n \n     @Override\n     public void stop() {\n-        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA,\n-                                                                    CUSTOM_RESOURCE_VERSION_PRAVEGA,\n-                                                                    NAMESPACE,\n-                                                                    CUSTOM_RESOURCE_PLURAL_PRAVEGA,\n-                                                                    PRAVEGA_ID),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to stop pravega\", t));\n+        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER,\n+                CUSTOM_RESOURCE_VERSION_BOOKKEEPER,\n+                NAMESPACE,\n+                CUSTOM_RESOURCE_PLURAL_BOOKKEEPER,\n+                BOOKKEEPER_ID),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to stop bookkeeper\", t));\n \n     }\n \n     @Override\n     public boolean isRunning() {\n         return k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                        .thenApply(statuses -> statuses.stream()\n-                                                       .filter(podStatus -> podStatus.getContainerStatuses()\n-                                                                                     .stream()\n-                                                                                     .allMatch(st -> st.getState().getRunning() != null))\n-                                                       .count())\n-                        .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n-                        .exceptionally(t -> {\n-                            log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n-                            return false;\n-                        }).join();\n+                .thenApply(statuses -> statuses.stream()\n+                        .filter(podStatus -> podStatus.getContainerStatuses()\n+                                .stream()\n+                                .allMatch(st -> st.getState().getRunning() != null))\n+                        .count())\n+                .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n+                .exceptionally(t -> {\n+                    log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n+                    return false;\n+                }).join();\n     }\n \n     @Override\n     public List<URI> getServiceDetails() {\n         //fetch the URI.\n         return Futures.getAndHandleExceptions(k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                                                       .thenApply(statuses -> statuses.stream()\n-                                                                                     .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n-                                                                                     .collect(Collectors.toList())),\n-                                              t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n+                        .thenApply(statuses -> statuses.stream()\n+                                .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n+                                .collect(Collectors.toList())),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public CompletableFuture<Void> scaleService(int newInstanceCount) {\n-        log.info(\"Scaling Bookkeeper service to {} instances.\", newInstanceCount);\n-        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, PRAVEGA_ID)\n-                        .thenCompose(o -> {\n-                            Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n-                            Map<String, Object> pravegaSpec = (Map<String, Object>) spec.get(\"pravega\");\n-                            Map<String, Object> bookkeeperSpec = (Map<String, Object>) spec.get(\"bookkeeper\");\n-\n-                            int currentControllerCount = ((Double) pravegaSpec.get(\"controllerReplicas\")).intValue();\n-                            int currentSegmentStoreCount = ((Double) pravegaSpec.get(\"segmentStoreReplicas\")).intValue();\n-                            int currentBookkeeperCount = ((Double) bookkeeperSpec.get(\"replicas\")).intValue();\n-                            log.debug(\"Current instance counts : Bookkeeper {} Controller {} SegmentStore {}.\", currentBookkeeperCount,\n-                                      currentControllerCount, currentSegmentStoreCount);\n-                            if (currentBookkeeperCount != newInstanceCount) {\n-                                final Map<String, Object> patchedSpec = buildPatchedPravegaClusterSpec(\"replicas\", newInstanceCount, \"bookkeeper\");\n-                                return k8sClient.createAndUpdateCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, patchedSpec)\n-                                        .thenCompose(v -> k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, newInstanceCount));\n-                            } else {\n-                                return CompletableFuture.completedFuture(null);\n-                            }\n-                        });\n+        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER, CUSTOM_RESOURCE_VERSION_BOOKKEEPER, NAMESPACE, CUSTOM_RESOURCE_PLURAL_BOOKKEEPER, BOOKKEEPER_ID)\n+                .thenCompose(o -> {\n+                    Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n+                    int currentBookkeeperCount = ((Double) spec.get(\"replicas\")).intValue();\n+                    log.debug(\"Current instance counts : Bookkeeper {} .\", currentBookkeeperCount);\n+\n+                    if (currentBookkeeperCount != newInstanceCount) {\n+\n+                        final Map<String, Object> patchedSpec = buildPatchedBookkeeperClusterSpec(\"replicas\", newInstanceCount);\n+\n+                        return k8sClient.createAndUpdateCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER, CUSTOM_RESOURCE_VERSION_BOOKKEEPER, NAMESPACE, CUSTOM_RESOURCE_PLURAL_BOOKKEEPER, patchedSpec)\n+                                .thenCompose(v -> k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, newInstanceCount));\n+\n+                    } else {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyMDM2MQ==", "bodyText": "Removed.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481020361", "createdAt": "2020-09-01T10:03:43Z", "author": {"login": "Richa-Srivastava"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/BookkeeperK8sService.java", "diffHunk": "@@ -36,73 +36,73 @@ public BookkeeperK8sService(final String id, final URI zkUri, final ImmutableMap\n \n     @Override\n     public void start(boolean wait) {\n-        Futures.getAndHandleExceptions(deployPravegaUsingOperator(zkUri, DEFAULT_CONTROLLER_COUNT, DEFAULT_SEGMENTSTORE_COUNT, DEFAULT_BOOKIE_COUNT, properties),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to deploy pravega operator/pravega services\", t));\n+        Futures.getAndHandleExceptions(deployBookkeeperCluster(zkUri, DEFAULT_BOOKIE_COUNT, properties),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper operator/pravega services\", t));\n         if (wait) {\n             Futures.getAndHandleExceptions(k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, DEFAULT_BOOKIE_COUNT),\n-                                           t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n+                    t -> new TestFrameworkException(RequestFailed, \"Failed to deploy bookkeeper service, check the operator logs\", t));\n         }\n     }\n \n     @Override\n     public void stop() {\n-        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA,\n-                                                                    CUSTOM_RESOURCE_VERSION_PRAVEGA,\n-                                                                    NAMESPACE,\n-                                                                    CUSTOM_RESOURCE_PLURAL_PRAVEGA,\n-                                                                    PRAVEGA_ID),\n-                                       t -> new TestFrameworkException(RequestFailed, \"Failed to stop pravega\", t));\n+        Futures.getAndHandleExceptions(k8sClient.deleteCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER,\n+                CUSTOM_RESOURCE_VERSION_BOOKKEEPER,\n+                NAMESPACE,\n+                CUSTOM_RESOURCE_PLURAL_BOOKKEEPER,\n+                BOOKKEEPER_ID),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to stop bookkeeper\", t));\n \n     }\n \n     @Override\n     public boolean isRunning() {\n         return k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                        .thenApply(statuses -> statuses.stream()\n-                                                       .filter(podStatus -> podStatus.getContainerStatuses()\n-                                                                                     .stream()\n-                                                                                     .allMatch(st -> st.getState().getRunning() != null))\n-                                                       .count())\n-                        .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n-                        .exceptionally(t -> {\n-                            log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n-                            return false;\n-                        }).join();\n+                .thenApply(statuses -> statuses.stream()\n+                        .filter(podStatus -> podStatus.getContainerStatuses()\n+                                .stream()\n+                                .allMatch(st -> st.getState().getRunning() != null))\n+                        .count())\n+                .thenApply(runCount -> runCount >= DEFAULT_BOOKIE_COUNT)\n+                .exceptionally(t -> {\n+                    log.warn(\"Exception observed while checking status of pods {}. Details: {}\", BOOKKEEPER_LABEL, t.getMessage());\n+                    return false;\n+                }).join();\n     }\n \n     @Override\n     public List<URI> getServiceDetails() {\n         //fetch the URI.\n         return Futures.getAndHandleExceptions(k8sClient.getStatusOfPodWithLabel(NAMESPACE, \"component\", BOOKKEEPER_LABEL)\n-                                                       .thenApply(statuses -> statuses.stream()\n-                                                                                     .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n-                                                                                     .collect(Collectors.toList())),\n-                                              t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n+                        .thenApply(statuses -> statuses.stream()\n+                                .map(s -> URI.create(TCP + s.getPodIP() + \":\" + BOOKKEEPER_PORT))\n+                                .collect(Collectors.toList())),\n+                t -> new TestFrameworkException(RequestFailed, \"Failed to fetch ServiceDetails for bookkeeper\", t));\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public CompletableFuture<Void> scaleService(int newInstanceCount) {\n-        log.info(\"Scaling Bookkeeper service to {} instances.\", newInstanceCount);\n-        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, PRAVEGA_ID)\n-                        .thenCompose(o -> {\n-                            Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n-                            Map<String, Object> pravegaSpec = (Map<String, Object>) spec.get(\"pravega\");\n-                            Map<String, Object> bookkeeperSpec = (Map<String, Object>) spec.get(\"bookkeeper\");\n-\n-                            int currentControllerCount = ((Double) pravegaSpec.get(\"controllerReplicas\")).intValue();\n-                            int currentSegmentStoreCount = ((Double) pravegaSpec.get(\"segmentStoreReplicas\")).intValue();\n-                            int currentBookkeeperCount = ((Double) bookkeeperSpec.get(\"replicas\")).intValue();\n-                            log.debug(\"Current instance counts : Bookkeeper {} Controller {} SegmentStore {}.\", currentBookkeeperCount,\n-                                      currentControllerCount, currentSegmentStoreCount);\n-                            if (currentBookkeeperCount != newInstanceCount) {\n-                                final Map<String, Object> patchedSpec = buildPatchedPravegaClusterSpec(\"replicas\", newInstanceCount, \"bookkeeper\");\n-                                return k8sClient.createAndUpdateCustomObject(CUSTOM_RESOURCE_GROUP_PRAVEGA, CUSTOM_RESOURCE_VERSION_PRAVEGA, NAMESPACE, CUSTOM_RESOURCE_PLURAL_PRAVEGA, patchedSpec)\n-                                        .thenCompose(v -> k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, newInstanceCount));\n-                            } else {\n-                                return CompletableFuture.completedFuture(null);\n-                            }\n-                        });\n+        return k8sClient.getCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER, CUSTOM_RESOURCE_VERSION_BOOKKEEPER, NAMESPACE, CUSTOM_RESOURCE_PLURAL_BOOKKEEPER, BOOKKEEPER_ID)\n+                .thenCompose(o -> {\n+                    Map<String, Object> spec = (Map<String, Object>) (((Map<String, Object>) o).get(\"spec\"));\n+                    int currentBookkeeperCount = ((Double) spec.get(\"replicas\")).intValue();\n+                    log.debug(\"Current instance counts : Bookkeeper {} .\", currentBookkeeperCount);\n+\n+                    if (currentBookkeeperCount != newInstanceCount) {\n+\n+                        final Map<String, Object> patchedSpec = buildPatchedBookkeeperClusterSpec(\"replicas\", newInstanceCount);\n+\n+                        return k8sClient.createAndUpdateCustomObject(CUSTOM_RESOURCE_GROUP_BOOKKEEPER, CUSTOM_RESOURCE_VERSION_BOOKKEEPER, NAMESPACE, CUSTOM_RESOURCE_PLURAL_BOOKKEEPER, patchedSpec)\n+                                .thenCompose(v -> k8sClient.waitUntilPodIsRunning(NAMESPACE, \"component\", BOOKKEEPER_LABEL, newInstanceCount));\n+\n+                    } else {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4NjIxNA=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM3NDU2OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDowMzo0OFrOG_RA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowNzozOVrOHKvXNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MjIyMA==", "bodyText": "Can we have a better naming here? As I understand this is the Pravega operator version.\nPerhaps pravegaOperatorVersion or something still better.\nLet's follow the same naming convention across all the properties.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468992220", "createdAt": "2020-08-12T04:03:48Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -848,6 +848,11 @@ project('test:system') {\n \n     task startK8SystemTests(type: Test) {\n         tasks.withType(Exec) { environment \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\") }\n+        tasks.withType(Exec) { environment \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\") }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyMzc5Nw==", "bodyText": "Changed all 3 operator names to pravegaOperatorVersion, bookkeeperOperatorVersion, zookeeperOperatorVersion", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481023797", "createdAt": "2020-09-01T10:07:39Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -848,6 +848,11 @@ project('test:system') {\n \n     task startK8SystemTests(type: Test) {\n         tasks.withType(Exec) { environment \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\") }\n+        tasks.withType(Exec) { environment \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\") }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MjIyMA=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM3NzE5OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDowNToxNVrOG_RCSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowODowN1rOHKvZiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MjU4Ng==", "bodyText": "Could you please provide more details about this property? Also, could we rename it so that it indicates to the user that it is only used by a helm command?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468992586", "createdAt": "2020-08-12T04:05:15Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -848,6 +848,11 @@ project('test:system') {\n \n     task startK8SystemTests(type: Test) {\n         tasks.withType(Exec) { environment \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\") }\n+        tasks.withType(Exec) { environment \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\") }\n+        tasks.withType(Exec) { environment \"imageVersionBkOp\",System.getProperty(\"imageVersionBkOp\", \"latest\") }\n+        tasks.withType(Exec) { environment \"imageVersionZkOp\",System.getProperty(\"imageVersionZkOp\", \"latest\") }\n+        tasks.withType(Exec) { environment \"chartName\",System.getProperty(\"chartName\", \"pravega\") }\n+        tasks.withType(Exec) { environment \"repository\",System.getProperty(\"repository\", \"pravega\") }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyNDM5NQ==", "bodyText": "added description:         // The below properties are used to to specify the pravega published chart and repository to deploy pravega,bookkeeper & zookkeeper operators using helm docker image properties", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481024395", "createdAt": "2020-09-01T10:08:07Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -848,6 +848,11 @@ project('test:system') {\n \n     task startK8SystemTests(type: Test) {\n         tasks.withType(Exec) { environment \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\") }\n+        tasks.withType(Exec) { environment \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\") }\n+        tasks.withType(Exec) { environment \"imageVersionBkOp\",System.getProperty(\"imageVersionBkOp\", \"latest\") }\n+        tasks.withType(Exec) { environment \"imageVersionZkOp\",System.getProperty(\"imageVersionZkOp\", \"latest\") }\n+        tasks.withType(Exec) { environment \"chartName\",System.getProperty(\"chartName\", \"pravega\") }\n+        tasks.withType(Exec) { environment \"repository\",System.getProperty(\"repository\", \"pravega\") }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MjU4Ng=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM3OTgxOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDowNzowOVrOG_RD1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoxNDoxM1rOHXMyGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5Mjk4Mw==", "bodyText": "How is this different from pravegaBookkeeperVersion?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468992983", "createdAt": "2020-08-12T04:07:09Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -871,22 +876,30 @@ project('test:system') {\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n         // bookkeeper version defaults to pravega version.\n         systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyNjc0Ng==", "bodyText": "pravegaBookkeeperVersion was intact with pravega image, so removed that parameter and introduced bookkeeperImageVersion which can be independent of pravega release.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481026746", "createdAt": "2020-09-01T10:10:04Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -871,22 +876,30 @@ project('test:system') {\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n         // bookkeeper version defaults to pravega version.\n         systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5Mjk4Mw=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4ODcyOQ==", "bodyText": "should it default to the pravega version?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494088729", "createdAt": "2020-09-24T07:14:13Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -871,22 +876,30 @@ project('test:system') {\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n         // bookkeeper version defaults to pravega version.\n         systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5Mjk4Mw=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM4MzQ4OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDowOTozNlrOG_RF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowOToxMFrOHKveZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MzUwNw==", "bodyText": "Is this the repository used by the helm command? could we update the property name here ?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r468993507", "createdAt": "2020-08-12T04:09:36Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -871,22 +876,30 @@ project('test:system') {\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n         // bookkeeper version defaults to pravega version.\n         systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version\n         // tier2Type , default is NFS.\n         systemProperty \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n         // tier2 Configuration, specified as comma seperated key values k1=v1,k2=v2\n         systemProperty \"tier2Config\", System.getProperty(\"tier2Config\")\n-\n+        systemProperty \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\")\n+        systemProperty \"imageVersionBkOp\",System.getProperty(\"imageVersionBkOp\", \"latest\")\n+        systemProperty \"imageVersionZkOp\",System.getProperty(\"imageVersionZkOp\", \"latest\")\n+        systemProperty \"chartName\",System.getProperty(\"chartName\", \"pravega\")\n+        systemProperty \"repository\",System.getProperty(\"repository\", \"pravega\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyNTYzNg==", "bodyText": "renamed the variables: publishedChartName & helmRepository", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r481025636", "createdAt": "2020-09-01T10:09:10Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -871,22 +876,30 @@ project('test:system') {\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n         // bookkeeper version defaults to pravega version.\n         systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version\n         // tier2Type , default is NFS.\n         systemProperty \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n         // tier2 Configuration, specified as comma seperated key values k1=v1,k2=v2\n         systemProperty \"tier2Config\", System.getProperty(\"tier2Config\")\n-\n+        systemProperty \"imageVersionPrOp\",System.getProperty(\"imageVersionPrOp\", \"latest\")\n+        systemProperty \"imageVersionBkOp\",System.getProperty(\"imageVersionBkOp\", \"latest\")\n+        systemProperty \"imageVersionZkOp\",System.getProperty(\"imageVersionZkOp\", \"latest\")\n+        systemProperty \"chartName\",System.getProperty(\"chartName\", \"pravega\")\n+        systemProperty \"repository\",System.getProperty(\"repository\", \"pravega\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MzUwNw=="}, "originalCommit": {"oid": "4be770de0680bb9022eedd2726ad0f5e542b14d9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjMwNzMzOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoxMzowNVrOHXMv7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoxODoxN1rOHXTo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4ODE3NQ==", "bodyText": "Can we move this code directly into exec task?, i.e directly into copyTestsToK8sCluster.\nPerhaps with that approach we can simply this part of the code.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494088175", "createdAt": "2020-09-24T07:13:05Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -849,18 +849,22 @@ project('test:system') {\n \n     task startK8SystemTests(type: Test) {\n         tasks.withType(Exec) { environment \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\") }\n+        tasks.withType(Exec) { environment \"pravegaOperatorVersion\",System.getProperty(\"pravegaOperatorVersion\", \"latest\") }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMTA1Mg==", "bodyText": "Modified, please take a look.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494201052", "createdAt": "2020-09-24T10:18:17Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -849,18 +849,22 @@ project('test:system') {\n \n     task startK8SystemTests(type: Test) {\n         tasks.withType(Exec) { environment \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\") }\n+        tasks.withType(Exec) { environment \"pravegaOperatorVersion\",System.getProperty(\"pravegaOperatorVersion\", \"latest\") }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4ODE3NQ=="}, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjMxNTI4OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoxNToyN1rOHXM0pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoyNjoxOVrOHXNKiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4OTM4MA==", "bodyText": "I did not understand what does CM stand for?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494089380", "createdAt": "2020-09-24T07:15:27Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -872,25 +876,38 @@ project('test:system') {\n         systemProperty \"zookeeperImageName\", System.getProperty(\"zookeeperImageName\", \"zookeeper\") // zookkeeper image name\n         systemProperty \"zookeeperImageVersion\", System.getProperty(\"zookeeperImageVersion\", \"latest\") // zookeeper image version\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n-        // bookkeeper version defaults to pravega version.\n-        systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        // bookkeeper version can be different from pravega version.\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version\n         // tier2Type , default is NFS.\n         systemProperty \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n         // tier2 Configuration, specified as comma seperated key values k1=v1,k2=v2\n         systemProperty \"tier2Config\", System.getProperty(\"tier2Config\")\n+        systemProperty \"pravegaOperatorVersion\",System.getProperty(\"pravegaOperatorVersion\", \"latest\")\n+        systemProperty \"bookkeeperOperatorVersion\",System.getProperty(\"bookkeeperOperatorVersion\", \"latest\")\n+        systemProperty \"zookeeperOperatorVersion\",System.getProperty(\"zookeeperOperatorVersion\", \"latest\")\n+        systemProperty \"desiredPravegaCMVersion\",System.getProperty(\"desiredPravegaCMVersion\", \"0.9.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NDk4Nw==", "bodyText": "@shrids bk version can be different from pravega version, so I am providing that separately.\ndesiredPravegaCMVersion I added so that if version map is not containing the desired pravega version in its config map, pravega-operator will discard that request. with this additional parameter, the desired pravega version can be added in operator's config map on the fly and it will support that pravega version then.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494094987", "createdAt": "2020-09-24T07:26:19Z", "author": {"login": "Richa-Srivastava"}, "path": "build.gradle", "diffHunk": "@@ -872,25 +876,38 @@ project('test:system') {\n         systemProperty \"zookeeperImageName\", System.getProperty(\"zookeeperImageName\", \"zookeeper\") // zookkeeper image name\n         systemProperty \"zookeeperImageVersion\", System.getProperty(\"zookeeperImageVersion\", \"latest\") // zookeeper image version\n         systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n-        // bookkeeper version defaults to pravega version.\n-        systemProperty \"pravegaBookkeeperVersion\", System.getProperty(\"pravegaBookkeeperVersion\", System.getProperty(\"imageVersion\"))\n-\n+        // bookkeeper version can be different from pravega version.\n+        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"latest\") // // bookkeeper image version\n         // tier2Type , default is NFS.\n         systemProperty \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n         // tier2 Configuration, specified as comma seperated key values k1=v1,k2=v2\n         systemProperty \"tier2Config\", System.getProperty(\"tier2Config\")\n+        systemProperty \"pravegaOperatorVersion\",System.getProperty(\"pravegaOperatorVersion\", \"latest\")\n+        systemProperty \"bookkeeperOperatorVersion\",System.getProperty(\"bookkeeperOperatorVersion\", \"latest\")\n+        systemProperty \"zookeeperOperatorVersion\",System.getProperty(\"zookeeperOperatorVersion\", \"latest\")\n+        systemProperty \"desiredPravegaCMVersion\",System.getProperty(\"desiredPravegaCMVersion\", \"0.9.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4OTM4MA=="}, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjMxODc0OnYy", "diffSide": "RIGHT", "path": "gradle/wrapper/gradle-wrapper.properties", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoxNjozMlrOHXM2rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo0NDowNlrOHXjoEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4OTkwMQ==", "bodyText": "please remove the redundant change.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494089901", "createdAt": "2020-09-24T07:16:32Z", "author": {"login": "shrids"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,3 +1,4 @@\n+#Wed Jul 15 17:15:38 IST 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMDg0Mw==", "bodyText": "Removed", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494200843", "createdAt": "2020-09-24T10:17:50Z", "author": {"login": "Richa-Srivastava"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,3 +1,4 @@\n+#Wed Jul 15 17:15:38 IST 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4OTkwMQ=="}, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2Mjk5Mg==", "bodyText": "should it default to the pravega version?\nFor above comment, this should be individual parameter as its not dependent on pravega now. So I kept it as a new parameter.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494462992", "createdAt": "2020-09-24T16:44:06Z", "author": {"login": "Richa-Srivastava"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,3 +1,4 @@\n+#Wed Jul 15 17:15:38 IST 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA4OTkwMQ=="}, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjMyOTE1OnYy", "diffSide": "RIGHT", "path": "test/system/src/main/java/io/pravega/test/system/framework/kubernetes/K8sClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoxOTo0M1rOHXM89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoxOTowMVrOHXTqiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MTUwOA==", "bodyText": "this seems like formatting only change and below. Could you undo this?", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494091508", "createdAt": "2020-09-24T07:19:43Z", "author": {"login": "shrids"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/kubernetes/K8sClient.java", "diffHunk": "@@ -664,25 +664,25 @@ public void deletePVC(String namespace, String name) {\n         AtomicBoolean shouldRetry = new AtomicBoolean(true);\n \n         return Futures.loop(shouldRetry::get,\n-                            () -> Futures.delayedFuture(Duration.ofSeconds(5), executor) // wait for 5 seconds before checking for status.\n-                                    .thenCompose(v -> getStatusOfPodWithLabel(namespace, labelName, labelValue)) // fetch status of pods with the given label.\n-                                    .thenApply(podStatuses -> podStatuses.stream()\n-                                            // check for pods where all containers are running.\n-                                            .filter(podStatus -> {\n-                                                if (podStatus.getContainerStatuses() == null) {\n-                                                    return false;\n-                                                } else {\n-                                                    return podStatus.getContainerStatuses()\n-                                                            .stream()\n-                                                            .allMatch(st -> st.getState().getRunning() != null);\n-                                                }\n-                                            }).count()),\n-                            runCount -> { // Number of pods which are running\n-                                log.debug(\"Expected running pod count : {}, actual running pod count :{}.\", expectedPodCount, runCount);\n-                                if (runCount == expectedPodCount) {\n-                                    shouldRetry.set(false);\n-                                }\n-                            }, executor);\n+                () -> Futures.delayedFuture(Duration.ofSeconds(5), executor) // wait for 5 seconds before checking for status.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMTQ4Mw==", "bodyText": "This is similar in master also. I compared my code against master and no changes are there.", "url": "https://github.com/pravega/pravega/pull/5050#discussion_r494201483", "createdAt": "2020-09-24T10:19:01Z", "author": {"login": "Richa-Srivastava"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/kubernetes/K8sClient.java", "diffHunk": "@@ -664,25 +664,25 @@ public void deletePVC(String namespace, String name) {\n         AtomicBoolean shouldRetry = new AtomicBoolean(true);\n \n         return Futures.loop(shouldRetry::get,\n-                            () -> Futures.delayedFuture(Duration.ofSeconds(5), executor) // wait for 5 seconds before checking for status.\n-                                    .thenCompose(v -> getStatusOfPodWithLabel(namespace, labelName, labelValue)) // fetch status of pods with the given label.\n-                                    .thenApply(podStatuses -> podStatuses.stream()\n-                                            // check for pods where all containers are running.\n-                                            .filter(podStatus -> {\n-                                                if (podStatus.getContainerStatuses() == null) {\n-                                                    return false;\n-                                                } else {\n-                                                    return podStatus.getContainerStatuses()\n-                                                            .stream()\n-                                                            .allMatch(st -> st.getState().getRunning() != null);\n-                                                }\n-                                            }).count()),\n-                            runCount -> { // Number of pods which are running\n-                                log.debug(\"Expected running pod count : {}, actual running pod count :{}.\", expectedPodCount, runCount);\n-                                if (runCount == expectedPodCount) {\n-                                    shouldRetry.set(false);\n-                                }\n-                            }, executor);\n+                () -> Futures.delayedFuture(Duration.ofSeconds(5), executor) // wait for 5 seconds before checking for status.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MTUwOA=="}, "originalCommit": {"oid": "a823627a9d6b1073349af5cc97aa6a972227acc8"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4854, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}