{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NTg4NTQ4", "number": 5145, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMzoyODo1OFrOEgxNzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoyMzowMFrOEhdZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzk2MjM2OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/security/auth/JwtTokenProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMzoyODo1OFrOHNvHHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowOTo1OVrOHN3QVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE2NTQwNw==", "bodyText": "TokenExpirySignal has a higher priority and hence should be checked before returning a token right ?", "url": "https://github.com/pravega/pravega/pull/5145#discussion_r484165407", "createdAt": "2020-09-07T03:28:58Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/security/auth/JwtTokenProviderImpl.java", "diffHunk": "@@ -132,17 +134,22 @@ private JwtTokenProviderImpl(Controller controllerClient, String scopeName, Stri\n     @Override\n     public CompletableFuture<String> retrieveToken() {\n         DelegationToken currentToken = this.delegationToken.get();\n-\n+        final CompletableFuture<String> result;\n         if (currentToken == null) {\n-            return this.refreshToken();\n+            result = this.refreshToken();\n         } else if (currentToken.getExpiryTime() == null) {\n-            return CompletableFuture.completedFuture(currentToken.getValue());\n+            result = CompletableFuture.completedFuture(currentToken.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c909faa27cac6c3d0ff2e7a2f01a4f8e5f095"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5ODgzNg==", "bodyText": "If the token has no expiry time set on it, the signal wouldn't be interpreted as token having been expired. Therefore, we do this check before the check for the signal.", "url": "https://github.com/pravega/pravega/pull/5145#discussion_r484298836", "createdAt": "2020-09-07T09:09:59Z", "author": {"login": "ravisharda"}, "path": "client/src/main/java/io/pravega/client/security/auth/JwtTokenProviderImpl.java", "diffHunk": "@@ -132,17 +134,22 @@ private JwtTokenProviderImpl(Controller controllerClient, String scopeName, Stri\n     @Override\n     public CompletableFuture<String> retrieveToken() {\n         DelegationToken currentToken = this.delegationToken.get();\n-\n+        final CompletableFuture<String> result;\n         if (currentToken == null) {\n-            return this.refreshToken();\n+            result = this.refreshToken();\n         } else if (currentToken.getExpiryTime() == null) {\n-            return CompletableFuture.completedFuture(currentToken.getValue());\n+            result = CompletableFuture.completedFuture(currentToken.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE2NTQwNw=="}, "originalCommit": {"oid": "571c909faa27cac6c3d0ff2e7a2f01a4f8e5f095"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODAwMjI1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMzo1ODoyM1rOHNvcxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToxMDo0MlrOHN3SCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3MDk1MQ==", "bodyText": "would this cause a change to the SegmentHelper logic at \n  \n    \n      pravega/controller/src/main/java/io/pravega/controller/server/SegmentHelper.java\n    \n    \n        Lines 624 to 641\n      in\n      4f7be17\n    \n    \n    \n    \n\n        \n          \n           private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) { \n        \n\n        \n          \n               CompletableFuture<Reply> future = Futures.futureWithTimeout(() -> connection.sendRequest(requestId, request), timeout.get(), \"request\", executorService); \n        \n\n        \n          \n               return future \n        \n\n        \n          \n                       .exceptionally(e -> { \n        \n\n        \n          \n                           Throwable unwrap = Exceptions.unwrap(e); \n        \n\n        \n          \n                           if (unwrap instanceof ConnectionFailedException || unwrap instanceof ConnectionClosedException) { \n        \n\n        \n          \n                               log.warn(requestId, \"Connection dropped\"); \n        \n\n        \n          \n                               throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.ConnectionFailed); \n        \n\n        \n          \n                           } else if (unwrap instanceof AuthenticationException) { \n        \n\n        \n          \n                               log.warn(requestId, \"Authentication Exception\"); \n        \n\n        \n          \n                               throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.AuthFailed); \n        \n\n        \n          \n                           } else if (unwrap instanceof TimeoutException) { \n        \n\n        \n          \n                               log.warn(requestId, \"Request timedout.\"); \n        \n\n        \n          \n                               throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.ConnectionFailed); \n        \n\n        \n          \n                           } else { \n        \n\n        \n          \n                               log.error(requestId, \"Request failed\", e); \n        \n\n        \n          \n                               throw new CompletionException(e); \n        \n\n        \n          \n                           } \n        \n    \n  \n\n ?", "url": "https://github.com/pravega/pravega/pull/5145#discussion_r484170951", "createdAt": "2020-09-07T03:58:23Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -78,7 +79,11 @@ public void processingFailure(Exception error) {\n         @Override\n         public void authTokenCheckFailed(WireCommands.AuthTokenCheckFailed authTokenCheckFailed) {\n             log.warn(\"Auth token check failed on segment {} with {}\", segmentId, authTokenCheckFailed);\n-            closeConnection(new AuthenticationException(authTokenCheckFailed.toString()));\n+            if (authTokenCheckFailed.isTokenExpired()) {\n+                closeConnection(new TokenExpiredException(authTokenCheckFailed.getServerStackTrace()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c909faa27cac6c3d0ff2e7a2f01a4f8e5f095"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5OTI3Mw==", "bodyText": "Thanks. I've pushed the fix in the latest commit.", "url": "https://github.com/pravega/pravega/pull/5145#discussion_r484299273", "createdAt": "2020-09-07T09:10:42Z", "author": {"login": "ravisharda"}, "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -78,7 +79,11 @@ public void processingFailure(Exception error) {\n         @Override\n         public void authTokenCheckFailed(WireCommands.AuthTokenCheckFailed authTokenCheckFailed) {\n             log.warn(\"Auth token check failed on segment {} with {}\", segmentId, authTokenCheckFailed);\n-            closeConnection(new AuthenticationException(authTokenCheckFailed.toString()));\n+            if (authTokenCheckFailed.isTokenExpired()) {\n+                closeConnection(new TokenExpiredException(authTokenCheckFailed.getServerStackTrace()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3MDk1MQ=="}, "originalCommit": {"oid": "571c909faa27cac6c3d0ff2e7a2f01a4f8e5f095"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTIwMDQzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/security/auth/JwtTokenProviderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoyMzowMFrOHOyRRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoyMzowMFrOHOyRRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NTczMg==", "bodyText": "This should be done inside of refreshToken in case on of the other branches occurs right before this is set.", "url": "https://github.com/pravega/pravega/pull/5145#discussion_r485265732", "createdAt": "2020-09-09T00:23:00Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/security/auth/JwtTokenProviderImpl.java", "diffHunk": "@@ -132,17 +134,22 @@ private JwtTokenProviderImpl(Controller controllerClient, String scopeName, Stri\n     @Override\n     public CompletableFuture<String> retrieveToken() {\n         DelegationToken currentToken = this.delegationToken.get();\n-\n+        final CompletableFuture<String> result;\n         if (currentToken == null) {\n-            return this.refreshToken();\n+            result = this.refreshToken();\n         } else if (currentToken.getExpiryTime() == null) {\n-            return CompletableFuture.completedFuture(currentToken.getValue());\n+            result = CompletableFuture.completedFuture(currentToken.getValue());\n+        } else if (this.tokenExpirySignal.get()) {\n+            log.debug(\"Token was signaled as expired for scope/stream {}/{}\", this.scopeName, this.streamName);\n+            result = refreshToken();\n+            this.tokenExpirySignal.compareAndSet(true, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fabaa45e29356cced9e61d0cb614236aff59aaa"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4671, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}