{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzIxNDE0", "number": 4928, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyOTo0M1rOEOSLXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNTo1MlrOEOSXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEzMzQxOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyOTo0M1rOGxWUrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyOTo0M1rOGxWUrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5OTE1MA==", "bodyText": "Nit: extra trailing space.", "url": "https://github.com/pravega/pravega/pull/4928#discussion_r454399150", "createdAt": "2020-07-14T14:29:43Z", "author": {"login": "RaulGracia"}, "path": "build.gradle", "diffHunk": "@@ -552,6 +552,18 @@ project('test:integration') {\n         standardInput = System.in\n         systemProperties System.getProperties()\n     }\n+\n+    /**\n+     * See: https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375e1d75314950f40bf323f891a889bdba824721"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE1OTMzOnYy", "diffSide": "RIGHT", "path": "test/integration/src/main/java/io/pravega/test/integration/demo/interactive/ConfigCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNDo1MFrOGxWkFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNDo1MFrOGxWkFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMzA5NQ==", "bodyText": "Perhaps the character = could be defined as a constant for readability.", "url": "https://github.com/pravega/pravega/pull/4928#discussion_r454403095", "createdAt": "2020-07-14T14:34:50Z", "author": {"login": "RaulGracia"}, "path": "test/integration/src/main/java/io/pravega/test/integration/demo/interactive/ConfigCommand.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.demo.interactive;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import java.util.HashMap;\n+import lombok.val;\n+\n+abstract class ConfigCommand extends Command {\n+    static final String COMPONENT = \"config\";\n+\n+    ConfigCommand(CommandArgs args) {\n+        super(args);\n+    }\n+\n+    private static Command.CommandDescriptor.CommandDescriptorBuilder createDescriptor(String name, String description) {\n+        return Command.CommandDescriptor.builder()\n+                .component(COMPONENT)\n+                .name(name)\n+                .description(description);\n+    }\n+\n+    static class Set extends ConfigCommand {\n+        Set(CommandArgs args) {\n+            super(args);\n+        }\n+\n+        @Override\n+        public void execute() {\n+            ensureMinArgCount(1);\n+            val newValues = new HashMap<String, String>();\n+            getCommandArgs().getArgs().forEach(s -> {\n+                String[] items = s.split(\"=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375e1d75314950f40bf323f891a889bdba824721"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE2NDE3OnYy", "diffSide": "RIGHT", "path": "test/integration/src/main/java/io/pravega/test/integration/demo/interactive/InteractiveDemo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNTo0MFrOGxWm8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNTo0MFrOGxWm8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMzgyNg==", "bodyText": "Nit: too many blank lines.", "url": "https://github.com/pravega/pravega/pull/4928#discussion_r454403826", "createdAt": "2020-07-14T14:35:40Z", "author": {"login": "RaulGracia"}, "path": "test/integration/src/main/java/io/pravega/test/integration/demo/interactive/InteractiveDemo.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.demo.interactive;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.LoggerContext;\n+import com.google.common.base.Strings;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Scanner;\n+import java.util.stream.Collectors;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Interactive CLI Demo Tool for Pravega.\n+ */\n+public class InteractiveDemo {\n+    private static final String CMD_HELP = \"help\";\n+    private static final String CMD_EXIT = \"exit\";\n+\n+    public static void main(String[] args) throws Exception {\n+        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();\n+        context.getLoggerList().get(0).setLevel(Level.ERROR);\n+\n+        System.out.println(\"Pravega Interactive Demo Tool.\");\n+        System.out.println(\"\\tUsage instructions: https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool\\n\");\n+        val config = InteractiveConfig.getDefault();\n+\n+        // Output loaded config.\n+        System.out.println(\"Initial configuration:\");\n+        val initialConfigCmd = new ConfigCommand.List(new CommandArgs(Collections.emptyList(), config));\n+        initialConfigCmd.execute();\n+\n+        if (args == null || args.length == 0) {\n+            interactiveMode(config);\n+        } else {\n+            String commandLine = Arrays.stream(args).collect(Collectors.joining(\" \", \"\", \"\"));\n+            processCommand(commandLine, config);\n+        }\n+        System.exit(0);\n+    }\n+\n+    private static void interactiveMode(InteractiveConfig config) {\n+        // Continuously accept new commands as long as the user entered one.\n+        System.out.println(String.format(\"%nType \\\"%s\\\" for list of commands, or \\\"%s\\\" to exit.\", CMD_HELP, CMD_EXIT));\n+        @Cleanup\n+        Scanner input = new Scanner(System.in);\n+        while (true) {\n+            System.out.print(System.lineSeparator() + \"> \");\n+            String line = input.nextLine();\n+            processCommand(line, config);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375e1d75314950f40bf323f891a889bdba824721"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE2NTIzOnYy", "diffSide": "RIGHT", "path": "test/integration/src/main/java/io/pravega/test/integration/demo/interactive/InteractiveDemo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNTo1MlrOGxWnnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNTo1MlrOGxWnnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMzk5Ng==", "bodyText": "Nit: too many blank lines.", "url": "https://github.com/pravega/pravega/pull/4928#discussion_r454403996", "createdAt": "2020-07-14T14:35:52Z", "author": {"login": "RaulGracia"}, "path": "test/integration/src/main/java/io/pravega/test/integration/demo/interactive/InteractiveDemo.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.demo.interactive;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.LoggerContext;\n+import com.google.common.base.Strings;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Scanner;\n+import java.util.stream.Collectors;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Interactive CLI Demo Tool for Pravega.\n+ */\n+public class InteractiveDemo {\n+    private static final String CMD_HELP = \"help\";\n+    private static final String CMD_EXIT = \"exit\";\n+\n+    public static void main(String[] args) throws Exception {\n+        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();\n+        context.getLoggerList().get(0).setLevel(Level.ERROR);\n+\n+        System.out.println(\"Pravega Interactive Demo Tool.\");\n+        System.out.println(\"\\tUsage instructions: https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool\\n\");\n+        val config = InteractiveConfig.getDefault();\n+\n+        // Output loaded config.\n+        System.out.println(\"Initial configuration:\");\n+        val initialConfigCmd = new ConfigCommand.List(new CommandArgs(Collections.emptyList(), config));\n+        initialConfigCmd.execute();\n+\n+        if (args == null || args.length == 0) {\n+            interactiveMode(config);\n+        } else {\n+            String commandLine = Arrays.stream(args).collect(Collectors.joining(\" \", \"\", \"\"));\n+            processCommand(commandLine, config);\n+        }\n+        System.exit(0);\n+    }\n+\n+    private static void interactiveMode(InteractiveConfig config) {\n+        // Continuously accept new commands as long as the user entered one.\n+        System.out.println(String.format(\"%nType \\\"%s\\\" for list of commands, or \\\"%s\\\" to exit.\", CMD_HELP, CMD_EXIT));\n+        @Cleanup\n+        Scanner input = new Scanner(System.in);\n+        while (true) {\n+            System.out.print(System.lineSeparator() + \"> \");\n+            String line = input.nextLine();\n+            processCommand(line, config);\n+        }\n+    }\n+\n+\n+    private static void processCommand(String line, InteractiveConfig config) {\n+        if (Strings.isNullOrEmpty(line.trim())) {\n+            return;\n+        }\n+\n+        Parser.Command pc = Parser.parse(line, config);\n+        switch (pc.getComponent()) {\n+            case CMD_HELP:\n+                printHelp(null);\n+                break;\n+            case CMD_EXIT:\n+                System.exit(0);\n+                break;\n+            default:\n+                execCommand(pc);\n+                break;\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375e1d75314950f40bf323f891a889bdba824721"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4786, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}