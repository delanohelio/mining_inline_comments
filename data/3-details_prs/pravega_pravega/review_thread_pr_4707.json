{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDE2ODc5", "number": 4707, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNjoyMjoyNFrODzPMlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MzozOFrOD1htQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDUyOTUwOnYy", "diffSide": "LEFT", "path": "common/src/main/java/io/pravega/common/ExponentialMovingAverage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNjoyMjoyNFrOGHsQJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMzo1NzoxM1rOGJiMRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODI0NA==", "bodyText": "Is this going to reduce the CPU usage of the client?", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r410718244", "createdAt": "2020-04-18T16:22:24Z", "author": {"login": "RaulGracia"}, "path": "common/src/main/java/io/pravega/common/ExponentialMovingAverage.java", "diffHunk": "@@ -20,19 +20,19 @@\n \n     private final double newSampleWeight;\n     private final AtomicLong valueEncodedAsLong;\n-    private final boolean logarithmicWeighting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1MDU2Nw==", "bodyText": "Yes. This showed up in a flamegraph.", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r412650567", "createdAt": "2020-04-22T03:57:13Z", "author": {"login": "tkaitchuck"}, "path": "common/src/main/java/io/pravega/common/ExponentialMovingAverage.java", "diffHunk": "@@ -20,19 +20,19 @@\n \n     private final double newSampleWeight;\n     private final AtomicLong valueEncodedAsLong;\n-    private final boolean logarithmicWeighting;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODI0NA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDUzMjA5OnYy", "diffSide": "LEFT", "path": "client/src/main/java/io/pravega/client/stream/impl/PositionImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNjoyNDoyMlrOGHsRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMzo1Njo1N1rOGJiL-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODU0NQ==", "bodyText": "Can we add a constructor of this PositionImpl.java that does not execute eagerly a for inside the constructor? Can this for be executed just if the user uses this object?", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r410718545", "createdAt": "2020-04-18T16:24:22Z", "author": {"login": "RaulGracia"}, "path": "client/src/main/java/io/pravega/client/stream/impl/PositionImpl.java", "diffHunk": "@@ -106,7 +106,7 @@ public String toString() {\n         return ToStringUtils.mapToString(ownedSegments);\n     }\n \n-    private static class PositionBuilder implements ObjectBuilder<PositionImpl> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1MDQ4OA==", "bodyText": "We have see line 55.", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r412650488", "createdAt": "2020-04-22T03:56:57Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/PositionImpl.java", "diffHunk": "@@ -106,7 +106,7 @@ public String toString() {\n         return ToStringUtils.mapToString(ownedSegments);\n     }\n \n-    private static class PositionBuilder implements ObjectBuilder<PositionImpl> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODU0NQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDUzMjkxOnYy", "diffSide": "LEFT", "path": "client/src/main/java/io/pravega/client/segment/impl/SegmentOutputStreamImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNjoyNToxMVrOGHsRtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNjoyNToxMVrOGHsRtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxODY0NA==", "bodyText": "We have measured this to provide some small improvement in throughput (e.g., 10K e/s), so it is good to include in this PR.", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r410718644", "createdAt": "2020-04-18T16:25:11Z", "author": {"login": "RaulGracia"}, "path": "client/src/main/java/io/pravega/client/segment/impl/SegmentOutputStreamImpl.java", "diffHunk": "@@ -455,7 +463,7 @@ public void authTokenCheckFailed(WireCommands.AuthTokenCheckFailed authTokenChec\n     @Override\n     public void write(PendingEvent event) {\n         //State is set to sealed during a Transaction abort and the segment writer should not throw an {@link IllegalStateException} in such a case.\n-        checkState(NameUtils.isTransactionSegment(segmentName) || !state.isAlreadySealed(), \"Segment: %s is already sealed\", segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUxNTk1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/segment/impl/SegmentOutputStreamImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0Njo1MlrOGLAmfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToxMzoxOFrOGLln5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzM3Mw==", "bodyText": "Can this be rewritten as?\nEntry<Long, PendingEvent> entry;\nwhile(!inflight.isEmpty() && (entry = inflight.peekFirst()) != null) {\n    result.add(entry.getValue);\n    inflight.pollFirst();\n}\n\nThe goal here is to reduce the number of times peekFirst appears in the code.", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r414197373", "createdAt": "2020-04-23T23:46:52Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/segment/impl/SegmentOutputStreamImpl.java", "diffHunk": "@@ -248,17 +249,22 @@ private long addToInflight(PendingEvent event) {\n          */\n         private List<PendingEvent> removeInflightBelow(long ackLevel) {\n             synchronized (lock) {\n-                ConcurrentNavigableMap<Long, PendingEvent> acked = inflight.headMap(ackLevel, true);\n-                List<PendingEvent> result = new ArrayList<>(acked.values());\n-                acked.clear();\n+                List<PendingEvent> result = new ArrayList<>();\n+                Entry<Long, PendingEvent> entry = inflight.peekFirst();\n+                while (entry != null && entry.getKey() <= ackLevel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd34e0f95825bd45470c22fa57ffd2947261742"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwMzk0MQ==", "bodyText": "This ignores the loop conditional: entry.getKey() <= ackLevel", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r414803941", "createdAt": "2020-04-24T19:13:18Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/segment/impl/SegmentOutputStreamImpl.java", "diffHunk": "@@ -248,17 +249,22 @@ private long addToInflight(PendingEvent event) {\n          */\n         private List<PendingEvent> removeInflightBelow(long ackLevel) {\n             synchronized (lock) {\n-                ConcurrentNavigableMap<Long, PendingEvent> acked = inflight.headMap(ackLevel, true);\n-                List<PendingEvent> result = new ArrayList<>(acked.values());\n-                acked.clear();\n+                List<PendingEvent> result = new ArrayList<>();\n+                Entry<Long, PendingEvent> entry = inflight.peekFirst();\n+                while (entry != null && entry.getKey() <= ackLevel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzM3Mw=="}, "originalCommit": {"oid": "1dd34e0f95825bd45470c22fa57ffd2947261742"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUzMjIzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/stream/impl/EventStreamReaderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MzoxMFrOGLAvUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MzoxMFrOGLAvUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5OTYzNQ==", "bodyText": "This is not really thread safe. unmodifiableList returns a wrapper for readers, but readers can still be modified by this object, thus causing issues for anyone who might be iterating over it at the same time.", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r414199635", "createdAt": "2020-04-23T23:53:10Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/stream/impl/EventStreamReaderImpl.java", "diffHunk": "@@ -370,10 +371,18 @@ public Type fetchEvent(EventPointer pointer) throws NoSuchEventException {\n         }\n     }\n \n-    @Synchronized\n     @VisibleForTesting\n     List<EventSegmentReader> getReaders() {\n-        return Collections.unmodifiableList(readers);\n+        synchronized (readers) {            \n+            return Collections.unmodifiableList(readers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd34e0f95825bd45470c22fa57ffd2947261742"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUzMjcxOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/stream/impl/EventStreamReaderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MzoxNlrOGLAviw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MzoxNlrOGLAviw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5OTY5MQ==", "bodyText": "same here", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r414199691", "createdAt": "2020-04-23T23:53:16Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/stream/impl/EventStreamReaderImpl.java", "diffHunk": "@@ -370,10 +371,18 @@ public Type fetchEvent(EventPointer pointer) throws NoSuchEventException {\n         }\n     }\n \n-    @Synchronized\n     @VisibleForTesting\n     List<EventSegmentReader> getReaders() {\n-        return Collections.unmodifiableList(readers);\n+        synchronized (readers) {            \n+            return Collections.unmodifiableList(readers);\n+        }\n+    }\n+    \n+    @VisibleForTesting\n+    Map<Segment, Range> getRanges() {\n+        synchronized (readers) {\n+            return Collections.unmodifiableMap(ranges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd34e0f95825bd45470c22fa57ffd2947261742"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUzMzc2OnYy", "diffSide": "RIGHT", "path": "client/src/test/java/io/pravega/client/stream/impl/EventStreamReaderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MzozOFrOGLAwGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MzozOFrOGLAwGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5OTgzMw==", "bodyText": "Revert this?", "url": "https://github.com/pravega/pravega/pull/4707#discussion_r414199833", "createdAt": "2020-04-23T23:53:38Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/test/java/io/pravega/client/stream/impl/EventStreamReaderTest.java", "diffHunk": "@@ -85,7 +85,7 @@\n     private final Consumer<Segment> segmentSealedCallback = segment -> { };\n     private final EventWriterConfig writerConfig = EventWriterConfig.builder().build();\n \n-    @Test(timeout = 10000)\n+    @Test//(timeout = 10000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd34e0f95825bd45470c22fa57ffd2947261742"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4266, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}