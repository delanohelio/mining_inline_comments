{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0OTY1ODU1", "number": 5412, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1OTo1MVrOFDCFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTozMDozMFrOFDYFWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzI0Mjc2OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/WriteOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1OTo1MVrOICfSbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzowODoxMlrOICfr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MDY4NA==", "bodyText": "how is this helpful to identify it? Also, what's wrong with this.hashcode()?", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r539480684", "createdAt": "2020-12-09T16:59:51Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/WriteOperation.java", "diffHunk": "@@ -265,8 +265,8 @@ private void collectGarbage() {\n                     didSegmentLayoutChange = true;\n                     chunksAddedCount.incrementAndGet();\n \n-                    log.debug(\"{} write - New chunk added - segment={}, chunk={}, offset={}.\",\n-                            chunkedSegmentStorage.getLogPrefix(), handle.getSegmentName(), newChunkName, segmentMetadata.getLength());\n+                    log.debug(\"{} write - New chunk added - op={}, segment={}, chunk={}, offset={}.\",\n+                            chunkedSegmentStorage.getLogPrefix(), System.identityHashCode(this), handle.getSegmentName(), newChunkName, segmentMetadata.getLength());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7ad77f0b1affe79ed740809899420afde7fdab"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4NzIwNw==", "bodyText": "I needed some unique id for for each request - doesn't matter what as long as I can identify all logs from a single operation.\nEach operation invocation is a new object and it's hashcode is good enough to for debug purpose.\nSystem.identityHashCode(this) is more \"stable\", can't be overridden by implementation and more likely to be unique than HashCode.", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r539487207", "createdAt": "2020-12-09T17:08:12Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/WriteOperation.java", "diffHunk": "@@ -265,8 +265,8 @@ private void collectGarbage() {\n                     didSegmentLayoutChange = true;\n                     chunksAddedCount.incrementAndGet();\n \n-                    log.debug(\"{} write - New chunk added - segment={}, chunk={}, offset={}.\",\n-                            chunkedSegmentStorage.getLogPrefix(), handle.getSegmentName(), newChunkName, segmentMetadata.getLength());\n+                    log.debug(\"{} write - New chunk added - op={}, segment={}, chunk={}, offset={}.\",\n+                            chunkedSegmentStorage.getLogPrefix(), System.identityHashCode(this), handle.getSegmentName(), newChunkName, segmentMetadata.getLength());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MDY4NA=="}, "originalCommit": {"oid": "5a7ad77f0b1affe79ed740809899420afde7fdab"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzI0MzExOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1OTo1NVrOICfSpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0MzoyMlrOIChW0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MDc0MA==", "bodyText": "Why async? Those operations should be quick. No need to add a new task in the executor queue.", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r539480740", "createdAt": "2020-12-09T16:59:55Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "diffHunk": "@@ -202,14 +211,15 @@ private void logEnd() {\n                                 chunkedSegmentStorage.getReadIndexCache().addIndexEntry(handle.getSegmentName(), currentChunkName, startOffsetForCurrentChunk.get());\n                             }\n                             cntScanned.incrementAndGet();\n-                        }, chunkedSegmentStorage.getExecutor())\n-                        .thenAcceptAsync(v -> {\n-                            val elapsed = readIndexTimer.getElapsed();\n-                            SLTS_READ_INDEX_SCAN_LATENCY.reportSuccessEvent(elapsed);\n-                            log.debug(\"{} read - chunk lookup - segment={}, offset={}, scanned={}, latency={}.\",\n-                                    chunkedSegmentStorage.getLogPrefix(), handle.getSegmentName(), offset, cntScanned.get(), elapsed.toMillis());\n                         }, chunkedSegmentStorage.getExecutor()),\n-                chunkedSegmentStorage.getExecutor());\n+                chunkedSegmentStorage.getExecutor())\n+                .thenAcceptAsync(v -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7ad77f0b1affe79ed740809899420afde7fdab"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNDU3Nw==", "bodyText": "The java documentation is ambiguous about it whether it is guaranteed to be run on same thread.\nIt seems it can run on this thread pool or thread pool of the caller. (in this case that would be possibly core thread).\nHence to be careful not to hijack core threads I choose to explicitly provide thread pool I want this to be run on. (which is same thread pool anyway).\nHere I'm just maintaining consistency with rest of the code in this file by using Async.\nI do plan to use non async overload if it can be guaranteed that FJ or other thread pools don't get used accidently or a more likely case when storage thread pool is super busy.", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r539514577", "createdAt": "2020-12-09T17:43:22Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "diffHunk": "@@ -202,14 +211,15 @@ private void logEnd() {\n                                 chunkedSegmentStorage.getReadIndexCache().addIndexEntry(handle.getSegmentName(), currentChunkName, startOffsetForCurrentChunk.get());\n                             }\n                             cntScanned.incrementAndGet();\n-                        }, chunkedSegmentStorage.getExecutor())\n-                        .thenAcceptAsync(v -> {\n-                            val elapsed = readIndexTimer.getElapsed();\n-                            SLTS_READ_INDEX_SCAN_LATENCY.reportSuccessEvent(elapsed);\n-                            log.debug(\"{} read - chunk lookup - segment={}, offset={}, scanned={}, latency={}.\",\n-                                    chunkedSegmentStorage.getLogPrefix(), handle.getSegmentName(), offset, cntScanned.get(), elapsed.toMillis());\n                         }, chunkedSegmentStorage.getExecutor()),\n-                chunkedSegmentStorage.getExecutor());\n+                chunkedSegmentStorage.getExecutor())\n+                .thenAcceptAsync(v -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MDc0MA=="}, "originalCommit": {"oid": "5a7ad77f0b1affe79ed740809899420afde7fdab"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDc2MjI4OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOToxMzowMlrOIC-3yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoyOTo0MFrOIDJSKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk5ODE1NA==", "bodyText": "If this is an exception, why it is in debug level? In general, we want to keep track of relevant exceptions in production systems, which requires this to be at least info level, if not warn or error. As SLTS is a new piece of code, let's keep high the log level of exceptions so we can debug problems quickly without needed to repeat experiments with debug level logs.", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r539998154", "createdAt": "2020-12-10T09:13:02Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "diffHunk": "@@ -90,7 +90,7 @@\n                                         return readData(txn);\n                                     }, chunkedSegmentStorage.getExecutor())\n                                     .exceptionally(ex -> {\n-                                        log.debug(\"{} read - started op={}, segment={}, offset={}, bytesRead={}.\",\n+                                        log.debug(\"{} read - exception op={}, segment={}, offset={}, bytesRead={}.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c758486ef0d16f5310a4a5c216796c6651baabe3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2ODc0Nw==", "bodyText": "We do throw this exception which the caller will log appropriately.\nThis is just additional debug information that exception does not contain.", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r540168747", "createdAt": "2020-12-10T13:29:40Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "diffHunk": "@@ -90,7 +90,7 @@\n                                         return readData(txn);\n                                     }, chunkedSegmentStorage.getExecutor())\n                                     .exceptionally(ex -> {\n-                                        log.debug(\"{} read - started op={}, segment={}, offset={}, bytesRead={}.\",\n+                                        log.debug(\"{} read - exception op={}, segment={}, offset={}, bytesRead={}.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk5ODE1NA=="}, "originalCommit": {"oid": "c758486ef0d16f5310a4a5c216796c6651baabe3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDg0NjM0OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTozMDozMFrOIC_pAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1MDoyM1rOIDKLCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxMDc1Mw==", "bodyText": "Maybe not related to the PR, but the way chunkToReadFrom (and other variables) is set and checked here and there looks hard to track in case we face a race conditions. Even tough a variable is declared as volatile, the point is that if multiple methods (perhaps executed by different threads) are setting and reading this variable throughout the class, it increases considerably the complexity of debugging it in case of problems. Perhaps this was the only way, I don't know, but maybe in the future we can reconsider this pattern to see if there is an alternative that simplifies the code.", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r540010753", "createdAt": "2020-12-10T09:30:30Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "diffHunk": "@@ -132,7 +133,9 @@ private void logEnd() {\n                             return txn.get(currentChunkName)\n                                     .thenAcceptAsync(storageMetadata -> {\n                                         chunkToReadFrom = (ChunkMetadata) storageMetadata;\n-                                        log.debug(\"{} read - reading from next chunk - segment={}, chunk={}\", chunkedSegmentStorage.getLogPrefix(), handle.getSegmentName(), chunkToReadFrom);\n+                                        Preconditions.checkState(null != chunkToReadFrom, \"chunkToReadFrom is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c758486ef0d16f5310a4a5c216796c6651baabe3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4MzMwNg==", "bodyText": "Generic answer to your question -\nUnfortunately java does not have Async/Await syntax suger that generates all the future based  (Task parallel library) lambdas for your code.\nSo we have to do it by hand. Having done lots TPL based programming in the past, I was sort of reluctant to rewrite this code for async knowing it makes very difficult to maintain spaghetti code with lots of lambdas.\nHowever we absolutely do need it here.\nThe general pattern that I have here for thread safety is as follows\n\nEach major function in linear non-async code becomes a method object. Each invocation is a separate object. So separate invocations share nothing.\nAll members must be either final or volatile\nIf you need to use any arithmetic then it is better to use Atomic variables (which actually just volatile variables with additional safety added for atomic addition/subtraction)\nThe labmdas are executed in series by java sdk (i.e CompletableFuture framework) one lambda at a time.\nThe JVM memory model guarantees that reads and writes to volatile variable are thread safe.\n\nWriting all this async code by hand and yet keeping it understandable is not easy. But hopefully code gets better, faster and also cleaner as we go.", "url": "https://github.com/pravega/pravega/pull/5412#discussion_r540183306", "createdAt": "2020-12-10T13:50:23Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ReadOperation.java", "diffHunk": "@@ -132,7 +133,9 @@ private void logEnd() {\n                             return txn.get(currentChunkName)\n                                     .thenAcceptAsync(storageMetadata -> {\n                                         chunkToReadFrom = (ChunkMetadata) storageMetadata;\n-                                        log.debug(\"{} read - reading from next chunk - segment={}, chunk={}\", chunkedSegmentStorage.getLogPrefix(), handle.getSegmentName(), chunkToReadFrom);\n+                                        Preconditions.checkState(null != chunkToReadFrom, \"chunkToReadFrom is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxMDc1Mw=="}, "originalCommit": {"oid": "c758486ef0d16f5310a4a5c216796c6651baabe3"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4598, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}