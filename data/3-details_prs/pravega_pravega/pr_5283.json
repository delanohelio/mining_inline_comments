{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NjA1NzU4", "number": 5283, "title": "Issue 4884: BufferView equals() and compare() optimizations for JDK11", "bodyText": "Change log description\n\nCreated project common_server - everything that is common but needs to be compiled with JDK11.\nMoved io.pravega.common.util.btree from common to common_server. Package name stays the same.\nDeleted ByteArrayComparator.java. Replaced with BufferViewComparator.java, which now sits in common_server.\nUpdated all callsites to use new classes.\n\nPurpose of the change\nFixes #4884.\nWhat the code does\n\nCreated common_server as a top-level project. As opposed to common (which needs to compile with JDK8), common_server compiles with the default JDK version configured in gradle.properties (currently 11).\n\nReferenced this from segmentstore:server, since that's the only place which needs it at the moment.\nMoved io.pravega.util.btree package into it.\n\n\nBufferView\n\nAdded iterateBuffers which returns an Iterator<ByteBuffer>. Every BufferView implementation is a collection of 0 or more ordered ByteBuffers; this iterator will return each one of them.\nReworked ByteArraySegment.equals() to use ByteBuffer.equals instead of custom comparison. This API exists in all versions of Java (that we care about), so the runtime implementation may change freely (JRE8 vs JRE9+) without needing for code changes on our end. This is safe to be used in all Pravega components.\nReworked AbstractBufferView.equals to use BufferView.iterateBuffers for the two involved buffers. This does \"slice-by-slice\" comparisons using the underlying BufferView implementation of equals, which should be the most efficient way of comparing for equality (i.e., a CompositeBufferView made of ByteArraySegments or ByteBufWrappers will delegate to those implementations of equals to compare slices).\n\n\nBufferViewComparator\n\nRenamed ByteArrayComparator to BufferViewComparator (more appropriate name, given what it does).\nMoved from common to common_server (same package name)\nProvided 2 implementations: Legacy (working as before) and Intrinsic (using JDK9+ APIs)\nProviding a create() method that returns the appropriate implementation instance based on what the platform supports.\n\n\n\nHow to verify it\nBuild, tests and system tests must pass.", "createdAt": "2020-10-22T23:12:08Z", "url": "https://github.com/pravega/pravega/pull/5283", "merged": true, "mergeCommit": {"oid": "ffac85431abd66f40482609a6e27197243d25ed1"}, "closed": true, "closedAt": "2020-10-28T16:55:33Z", "author": {"login": "andreipaduroiu"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVKTu9gH2gAyNTA4NjA1NzU4OmEyNmY3OWY0NzMzMDg4NzU3Mjk0OGU0MWVhZjE4ZmNiZjk5OGI3MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW6u2RAH2gAyNTA4NjA1NzU4OjU2YjYzMTM3MGQ4MGUxMGJjOTFmYzdhNDI1NDI2MjA3ZGQ5MjY1NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a26f79f47330887572948e41eaf18fcbf998b730", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/a26f79f47330887572948e41eaf18fcbf998b730", "committedDate": "2020-10-22T23:10:15Z", "message": "Created project \"common_server\" - everything that is common but needs to be compiled with JDK11.\nMoved io.pravega.common.util.btree from \"common\" to \"common_server\". Package name stays the same.\nDeleted ByteArrayComparator.java. Replaced with BufferViewComparator.java, which now sits in \"common_server\".\nUpdated all callsites to use new classes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTY2ODUy", "url": "https://github.com/pravega/pravega/pull/5283#pullrequestreview-516166852", "createdAt": "2020-10-24T07:21:16Z", "commit": {"oid": "a26f79f47330887572948e41eaf18fcbf998b730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNzoyMToxN1rOHnpNOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNzoyMToxN1rOHnpNOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzMTY0MA==", "bodyText": "I believe this method does the same thing without the wrapping:\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#equals(byte%5B%5D,int,int,byte%5B%5D,int,int)", "url": "https://github.com/pravega/pravega/pull/5283#discussion_r511331640", "createdAt": "2020-10-24T07:21:17Z", "author": {"login": "tkaitchuck"}, "path": "common/src/main/java/io/pravega/common/util/ByteArraySegment.java", "diffHunk": "@@ -171,44 +172,28 @@ public void copyTo(OutputStream stream) throws IOException {\n     }\n \n     @Override\n-    @SneakyThrows(IOException.class)\n     public boolean equals(BufferView other) {\n         if (this.length != other.getLength()) {\n             return false;\n         } else if (other instanceof ArrayView) {\n-            return equals((ArrayView) other);\n+            // ByteBuffer-optimized equality check.\n+            return this.asByteBuffer().equals(((ArrayView) other).asByteBuffer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26f79f47330887572948e41eaf18fcbf998b730"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0f33db5ff3ba03b5dd771e7700591925a26d9ce", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c0f33db5ff3ba03b5dd771e7700591925a26d9ce", "committedDate": "2020-10-24T13:42:01Z", "message": "Removed BufferView.getContents().\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MjgxMTkw", "url": "https://github.com/pravega/pravega/pull/5283#pullrequestreview-516281190", "createdAt": "2020-10-24T14:20:20Z", "commit": {"oid": "c0f33db5ff3ba03b5dd771e7700591925a26d9ce"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNDoyMDoyMFrOHnxmXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNDoyNzo1MVrOHnxtew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ2OTE1MQ==", "bodyText": "I am not sure that using the underscore is a good practice.\nWhat about common.server?", "url": "https://github.com/pravega/pravega/pull/5283#discussion_r511469151", "createdAt": "2020-10-24T14:20:20Z", "author": {"login": "eolivelli"}, "path": "build.gradle", "diffHunk": "@@ -377,6 +398,7 @@ project ('bindings') {\n project('segmentstore:server') {\n     dependencies {\n         compile project(':common')\n+        compile project(':common_server')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f33db5ff3ba03b5dd771e7700591925a26d9ce"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3MDA2Nw==", "bodyText": "Why AtomicInteger? What about using some simpler int holder without concurrency support?", "url": "https://github.com/pravega/pravega/pull/5283#discussion_r511470067", "createdAt": "2020-10-24T14:24:03Z", "author": {"login": "eolivelli"}, "path": "common/src/main/java/io/pravega/common/util/CompositeByteArraySegment.java", "diffHunk": "@@ -183,6 +185,31 @@ public CompositeArrayView slice(int offset, int length) {\n         assert length == 0 : \"Collection finished but \" + length + \" bytes remaining\";\n     }\n \n+    @Override\n+    public Iterator<ByteBuffer> iterateBuffers() {\n+        if (this.length == 0) {\n+            return Collections.emptyIterator();\n+        }\n+\n+        AtomicInteger arrayOffset = new AtomicInteger(getArrayOffset(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f33db5ff3ba03b5dd771e7700591925a26d9ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3MDYxNQ==", "bodyText": "Does is make sense to have a simpler handling in case of wrapping only 2 buffers?\nProbably we can save a few cpu cycles and memory allocations, but I am not sure it is worth", "url": "https://github.com/pravega/pravega/pull/5283#discussion_r511470615", "createdAt": "2020-10-24T14:26:02Z", "author": {"login": "eolivelli"}, "path": "common/src/main/java/io/pravega/common/util/CompositeByteArraySegment.java", "diffHunk": "@@ -183,6 +185,31 @@ public CompositeArrayView slice(int offset, int length) {\n         assert length == 0 : \"Collection finished but \" + length + \" bytes remaining\";\n     }\n \n+    @Override\n+    public Iterator<ByteBuffer> iterateBuffers() {\n+        if (this.length == 0) {\n+            return Collections.emptyIterator();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f33db5ff3ba03b5dd771e7700591925a26d9ce"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3MDk3MQ==", "bodyText": "What about using multirelease jars? It will be more simpler at runtime and less error prone", "url": "https://github.com/pravega/pravega/pull/5283#discussion_r511470971", "createdAt": "2020-10-24T14:27:51Z", "author": {"login": "eolivelli"}, "path": "common_server/src/main/java/io/pravega/common/util/BufferViewComparator.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+\n+/**\n+ * Performs a lexicographic bitwise comparison of {@link BufferView} instances (and of implemented classes).\n+ * <p>\n+ * Lexicographic bitwise comparison for {@link BufferView}s of the same length:\n+ * - Consider two {@link BufferView}s A and B, with each having L bits (L is a multiple of 8).\n+ * - Define A{n} and B{n} as the bit at position n in A and B, respectively. This can be either 0 or 1.\n+ * - A precedes B if there exists bit position i such that for all bit positions j smaller than i,\n+ * then A{j} is equal to B{j}, A{i} is 0 and B{i} is 1.\n+ * - A is equal to B if the values of all bit positions in both {@link BufferView}s match.\n+ * <p>\n+ * Lexicographic bitwise comparison for {@link BufferView}s of different lengths:\n+ * - Consider two {@link BufferView}s A and B, with A having LA bits and B having LB bits (LA, LB are multiples of 8).\n+ * - We do a Lexicographic bitwise comparison of the prefixes of A and B of lengths Min(LA, LB).\n+ * - If the prefixes are equal, then the shorter of A and B precedes the longer of A and B.\n+ * -- If LA &lt; LB, then A is before B; if LA &gt; LB, then A is after B.\n+ * - If the prefixes are not equal, then the result from the prefix comparison is used to order A and B (see above).\n+ * <p>\n+ * Lexicographic bitwise comparison matches the natural order of numbers when serialized as unsigned (i.e., using the\n+ * specialized methods in {@link BitConverter}) since they avoid the complications involved with interpreting individual\n+ * bytes with the first bit set to 1 using 2's complement (128 is before 127 if we used signed bytes).\n+ * <p>\n+ * For example:\n+ * - Consider any two Longs L1 and L2.\n+ * - Let S1 be the result of {@link BitConverter#writeUnsignedLong} when applied to L1, and S2 the result when applied to L2.\n+ * - Then {@link Long#compare} applied to (L1, L2) is equal to {@link #compare} applied to (S1, S2).\n+ * - This equality would not hold should L1 and L2 be serialized using {@link BitConverter#writeLong} or if we used plain\n+ * (signed) byte comparison internally.\n+ */\n+public abstract class BufferViewComparator implements Comparator<byte[]>, Serializable {\n+    /**\n+     * The minimum byte value for this comparison. Since we use unsigned bytes, this is 0-based.\n+     */\n+    public static final byte MIN_VALUE = 0;\n+    /**\n+     * The maximum byte value for this comparison. Since we use unsigned bytes, this is 0-based, hence 255.\n+     * Note that the actual value stored in Java for this is 0xFF, which is actually -1.\n+     */\n+    public static final byte MAX_VALUE = (byte) 255;\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    //region Constructor\n+\n+    /**\n+     * Determines if Intrinsic (JRE9+) array and {@link ByteBuffer} comparison is available.\n+     */\n+    private static final boolean INTRINSIC_SUPPORTED;\n+\n+    static {\n+        // Figure out if we support JRE9+ Intrinsic comparators. We do compile this code with JDK11, however this is to\n+        // have a failover in case we run with a lesser JRE.\n+        boolean intrinsicSupported = true;\n+        try {\n+            ByteBuffer bb = ByteBuffer.wrap(new byte[1]);\n+            bb.mismatch(bb);\n+        } catch (ExceptionInInitializerError | UnsatisfiedLinkError | NoClassDefFoundError e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f33db5ff3ba03b5dd771e7700591925a26d9ce"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "858c9d595be1577b721d7c8b1b2dc9a00081dd10", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/858c9d595be1577b721d7c8b1b2dc9a00081dd10", "committedDate": "2020-10-26T14:49:08Z", "message": "Using Arrays.equals in ByteArraySegment.equals.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c427880c5017a2e6bd77c2dcb04cc879ca8410a7", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c427880c5017a2e6bd77c2dcb04cc879ca8410a7", "committedDate": "2020-10-26T15:31:55Z", "message": "Reverted change.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTUzNDQz", "url": "https://github.com/pravega/pravega/pull/5283#pullrequestreview-516953443", "createdAt": "2020-10-26T16:24:27Z", "commit": {"oid": "c427880c5017a2e6bd77c2dcb04cc879ca8410a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c0e2434db29282a32eb2e464b12e17fd081c0dc", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/7c0e2434db29282a32eb2e464b12e17fd081c0dc", "committedDate": "2020-10-26T17:31:32Z", "message": "Reverted change.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDUzMTc3", "url": "https://github.com/pravega/pravega/pull/5283#pullrequestreview-517053177", "createdAt": "2020-10-26T18:14:26Z", "commit": {"oid": "7c0e2434db29282a32eb2e464b12e17fd081c0dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18cc1af28dc68906467310763b74bb7cdfc9673c", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/18cc1af28dc68906467310763b74bb7cdfc9673c", "committedDate": "2020-10-27T00:48:09Z", "message": "Reverted change.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzI1NTE1", "url": "https://github.com/pravega/pravega/pull/5283#pullrequestreview-517325515", "createdAt": "2020-10-27T03:36:52Z", "commit": {"oid": "18cc1af28dc68906467310763b74bb7cdfc9673c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2812dc492a9ef2319e553ddbd8b90c51ea1e00fd", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/2812dc492a9ef2319e553ddbd8b90c51ea1e00fd", "committedDate": "2020-10-27T17:20:09Z", "message": "Merge branch 'master' into issue-4884-bufferviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56b631370d80e10bc91fc7a425426207dd926563", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/56b631370d80e10bc91fc7a425426207dd926563", "committedDate": "2020-10-28T10:09:14Z", "message": "Merge branch 'master' into issue-4884-bufferviews"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3684, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}