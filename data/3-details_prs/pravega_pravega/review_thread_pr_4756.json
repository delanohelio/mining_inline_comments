{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzI0NTYw", "number": 4756, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDowMDowOFrOD7EePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDowNToxMFrOD7EhUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjY1ODU0OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDowMDowOFrOGTLoug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTowMToxNVrOGTMiTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2Njc3OA==", "bodyText": "Throwing a ConfilictException cause the writeBackPredicate of processScaleOpRequest to be true causing the event to written back, which effectively postpones the event, right ?", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422766778", "createdAt": "2020-05-11T04:00:08Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "diffHunk": "@@ -126,7 +127,19 @@ public ScaleOperationTask(final StreamMetadataTasks streamMetadataTasks,\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n                             }\n-                        } \n+                        } else if (!RecordHelper.verifyRecordMatchesInput(scaleInput.getSegmentsToSeal(), scaleInput.getNewRanges(), isManualScale, record.getObject())) {\n+                            // ensure that we process the event only if the input matches the epoch transition record.\n+                            // if its manual scale and the event doesnt match, it means the scale has already completed. \n+                            // for auto scale, it means another scale is on going and just throw scale conflict exception \n+                            // which will result in this event being postponed. \n+                            if (isManualScale) {\n+                                log.info(\"Scale already completed.\");\n+                                return CompletableFuture.completedFuture(null);\n+                            } else {\n+                                log.info(\"Scale conflict.\");\n+                                throw new EpochTransitionOperationExceptions.ConflictException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4MTUxOQ==", "bodyText": "Yes. And that is the desired behaviour.", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422781519", "createdAt": "2020-05-11T05:01:15Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "diffHunk": "@@ -126,7 +127,19 @@ public ScaleOperationTask(final StreamMetadataTasks streamMetadataTasks,\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n                             }\n-                        } \n+                        } else if (!RecordHelper.verifyRecordMatchesInput(scaleInput.getSegmentsToSeal(), scaleInput.getNewRanges(), isManualScale, record.getObject())) {\n+                            // ensure that we process the event only if the input matches the epoch transition record.\n+                            // if its manual scale and the event doesnt match, it means the scale has already completed. \n+                            // for auto scale, it means another scale is on going and just throw scale conflict exception \n+                            // which will result in this event being postponed. \n+                            if (isManualScale) {\n+                                log.info(\"Scale already completed.\");\n+                                return CompletableFuture.completedFuture(null);\n+                            } else {\n+                                log.info(\"Scale conflict.\");\n+                                throw new EpochTransitionOperationExceptions.ConflictException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2Njc3OA=="}, "originalCommit": {"oid": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjY2MjM4OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDowMjo0MFrOGTLq6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDowMjo0MFrOGTLq6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2NzMzNw==", "bodyText": "The log can have additional data about the scale operation.", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422767337", "createdAt": "2020-05-11T04:02:40Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "diffHunk": "@@ -126,7 +127,19 @@ public ScaleOperationTask(final StreamMetadataTasks streamMetadataTasks,\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n                             }\n-                        } \n+                        } else if (!RecordHelper.verifyRecordMatchesInput(scaleInput.getSegmentsToSeal(), scaleInput.getNewRanges(), isManualScale, record.getObject())) {\n+                            // ensure that we process the event only if the input matches the epoch transition record.\n+                            // if its manual scale and the event doesnt match, it means the scale has already completed. \n+                            // for auto scale, it means another scale is on going and just throw scale conflict exception \n+                            // which will result in this event being postponed. \n+                            if (isManualScale) {\n+                                log.info(\"Scale already completed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjY2NjQyOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDowNToxMFrOGTLtIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDowNToxMFrOGTLtIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2NzkwNg==", "bodyText": "Scale conflict already causes a WARN message to be thrown in 79 line, Can we add more details to this log line?", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422767906", "createdAt": "2020-05-11T04:05:10Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "diffHunk": "@@ -126,7 +127,19 @@ public ScaleOperationTask(final StreamMetadataTasks streamMetadataTasks,\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n                             }\n-                        } \n+                        } else if (!RecordHelper.verifyRecordMatchesInput(scaleInput.getSegmentsToSeal(), scaleInput.getNewRanges(), isManualScale, record.getObject())) {\n+                            // ensure that we process the event only if the input matches the epoch transition record.\n+                            // if its manual scale and the event doesnt match, it means the scale has already completed. \n+                            // for auto scale, it means another scale is on going and just throw scale conflict exception \n+                            // which will result in this event being postponed. \n+                            if (isManualScale) {\n+                                log.info(\"Scale already completed.\");\n+                                return CompletableFuture.completedFuture(null);\n+                            } else {\n+                                log.info(\"Scale conflict.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4300, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}