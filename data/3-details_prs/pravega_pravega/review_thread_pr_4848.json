{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTQ0Mjgx", "number": 4848, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDo1MTozMVrOEDKP4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDo1MTozMVrOEDKP4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzQ5MDkwOnYy", "diffSide": "RIGHT", "path": "client/src/test/java/io/pravega/client/stream/impl/ClientFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDo1MTozMVrOGgDIOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMDoxMjowMlrOGgIgVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1ODg3NQ==", "bodyText": "This new variable looks unused", "url": "https://github.com/pravega/pravega/pull/4848#discussion_r436258875", "createdAt": "2020-06-06T10:51:31Z", "author": {"login": "eolivelli"}, "path": "client/src/test/java/io/pravega/client/stream/impl/ClientFactoryTest.java", "diffHunk": "@@ -54,8 +73,29 @@ public void testEventWriter() {\n         String scope = \"scope\";\n         String stream = \"stream1\";\n         // setup mocks\n-        ClientFactoryImpl clientFactory = new ClientFactoryImpl(scope, controllerClient, connectionFactory);\n+        ClientFactoryImpl clientFactory = new ClientFactoryImpl(scope, controllerClient, connectionFactory, inFactory, outFactory, condFactory, metaFactory);\n+        NavigableMap<Double, SegmentWithRange> segments = new TreeMap<>();\n+        Segment segment = new Segment(scope, stream, 0L);\n+        segments.put(1.0, new SegmentWithRange(segment, 0.0, 1.0));\n+        StreamSegments currentSegments = new StreamSegments(segments, \"\");\n+        SegmentOutputStream outStream = mock(SegmentOutputStream.class);\n+        when(controllerClient.getCurrentSegments(scope, stream))\n+                .thenReturn(CompletableFuture.completedFuture(currentSegments));\n+        when(outFactory.createOutputStreamForSegment(eq(segment), any(), any(), any())).thenReturn(outStream);\n+\n+        EventWriterConfig writerConfig = EventWriterConfig.builder().build();\n+        EventStreamWriter<String> writer = clientFactory.createEventWriter(stream, new JavaSerializer<String>(), writerConfig);\n+        assertEquals(writerConfig, writer.getConfig());\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testEventWriterSealedStream() {\n+        String scope = \"scope\";\n+        String stream = \"stream1\";\n+        // setup mocks\n+        ClientFactoryImpl clientFactory = new ClientFactoryImpl(scope, controllerClient, connectionFactory, inFactory, outFactory, condFactory, metaFactory);\n         StreamSegments currentSegments = new StreamSegments(new TreeMap<>(), \"\");\n+        SegmentOutputStream outStream = mock(SegmentOutputStream.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0077c28ec36d5f6a9a63214d918e791c07f5aabe"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk2Ng==", "bodyText": "fixed it.", "url": "https://github.com/pravega/pravega/pull/4848#discussion_r436346966", "createdAt": "2020-06-07T10:12:02Z", "author": {"login": "shrids"}, "path": "client/src/test/java/io/pravega/client/stream/impl/ClientFactoryTest.java", "diffHunk": "@@ -54,8 +73,29 @@ public void testEventWriter() {\n         String scope = \"scope\";\n         String stream = \"stream1\";\n         // setup mocks\n-        ClientFactoryImpl clientFactory = new ClientFactoryImpl(scope, controllerClient, connectionFactory);\n+        ClientFactoryImpl clientFactory = new ClientFactoryImpl(scope, controllerClient, connectionFactory, inFactory, outFactory, condFactory, metaFactory);\n+        NavigableMap<Double, SegmentWithRange> segments = new TreeMap<>();\n+        Segment segment = new Segment(scope, stream, 0L);\n+        segments.put(1.0, new SegmentWithRange(segment, 0.0, 1.0));\n+        StreamSegments currentSegments = new StreamSegments(segments, \"\");\n+        SegmentOutputStream outStream = mock(SegmentOutputStream.class);\n+        when(controllerClient.getCurrentSegments(scope, stream))\n+                .thenReturn(CompletableFuture.completedFuture(currentSegments));\n+        when(outFactory.createOutputStreamForSegment(eq(segment), any(), any(), any())).thenReturn(outStream);\n+\n+        EventWriterConfig writerConfig = EventWriterConfig.builder().build();\n+        EventStreamWriter<String> writer = clientFactory.createEventWriter(stream, new JavaSerializer<String>(), writerConfig);\n+        assertEquals(writerConfig, writer.getConfig());\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testEventWriterSealedStream() {\n+        String scope = \"scope\";\n+        String stream = \"stream1\";\n+        // setup mocks\n+        ClientFactoryImpl clientFactory = new ClientFactoryImpl(scope, controllerClient, connectionFactory, inFactory, outFactory, condFactory, metaFactory);\n         StreamSegments currentSegments = new StreamSegments(new TreeMap<>(), \"\");\n+        SegmentOutputStream outStream = mock(SegmentOutputStream.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1ODg3NQ=="}, "originalCommit": {"oid": "0077c28ec36d5f6a9a63214d918e791c07f5aabe"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4367, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}