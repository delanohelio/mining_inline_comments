{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDY3MjQ3", "number": 4646, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjo0NTo1NVrODsP39Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1OTowOFrODwmtIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzI0MDIxOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjo0NTo1NVrOF9D5RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1ODoxMFrOF_5Ntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ==", "bodyText": "Why do we need three separate metrics here? We can do this using a single metric and change the tag on each publish.\nCheck out https://github.com/pravega/pravega/blob/master/shared/metrics/src/main/java/io/pravega/shared/metrics/MetricsLogAppender.java\nWe use a single metric (ok, two of them MetricsNames.LOG_ERRORS or MetricsNames.LOG_WARNINGS), then in recordEvent we use DYNAMIC_LOGGER to record a value and attach a tag.\nWhat I think we can do in the throttling metrics is define 3 tags (Cache, DurableDataLog and Batching - or better, just get them out of ThrottlerCalculator.DelayResult.getThrottlerName().toString()) and then use a single metric (you can use the one we had before) to report the delay value with the appropriate number.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r399571269", "createdAt": "2020-03-27T22:45:55Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNzk3NQ==", "bodyText": "After reading the code, seems in the case there are two tags - container (x1) and throttler (x3) - so it's a best practice to pre-create all possible tag values combinations in advance, and use enum/map to locate them.\nPlease avoid dynamically generating tag values. (Tag values should be, in most cases, constant)", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r401817975", "createdAt": "2020-04-01T18:21:24Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ=="}, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMzE1Mw==", "bodyText": "The code could be like this:\nthis.containerTag = containerTag(containerId);\nthis.throttler-cache = throttlerTag(\"cache\");\nthis.throttler-batching = throttlerTag(\"batching\");\n...\nDYNAMIC_LOGGER.reportGaugeValue(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, millis, containerTag, whateverThrottlerTag);", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r401823153", "createdAt": "2020-04-01T18:30:02Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ=="}, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTA3Mw==", "bodyText": "I attempted using the reportGaugeValue functionality. But I had issues passing in primitive numeric types (Could not change the value of the gauge after the initial argument reference was lost, i.e the method returned). According to the micrometer documentation this is the expected result.\nUsing a Counter or a MeteredEvent also don't seem appropriate for the use case.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r401885073", "createdAt": "2020-04-01T20:20:08Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ=="}, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMTA5Nw==", "bodyText": "For example, I wrote two simple tests and stuck them in ThrottlerTests:\n    @Test\n    public void a() throws Exception {\n        DYNAMIC_LOGGER.reportGaugeValue(\"gauge-key\", 10);\n        log.debug(\"gauge-key: {}\", MetricRegistryUtils.getGauge(\"gauge-key\").value());\n        DYNAMIC_LOGGER.reportGaugeValue(\"gauge-key\", 15);\n        log.debug(\"gauge-key: {}\", MetricRegistryUtils.getGauge(\"gauge-key\").value());\n    }\n    @Test\n    public void b() throws Exception {\n        log.debug(\"gauge-key before: {}\", MetricRegistryUtils.getGauge(\"gauge-key\").value());\n        DYNAMIC_LOGGER.reportGaugeValue(\"gauge-key\", 20);\n        log.debug(\"gauge-key after: {}\", MetricRegistryUtils.getGauge(\"gauge-key\").value());\n    }\n\nWhich produced the output:\nStats enabled\ngauge-key: 10.0\ngauge-key: 15.0\nStats enabled\ngauge-key before: 15.0\ngauge-key after: 15.0\n\nHowever I notice this pattern has been used throughout the code-base, for example:\nTransactionMetrics.java\n    public static void reportOpenTransactions(String scope, String streamName, int ongoingTransactions) {\n        DYNAMIC_LOGGER.reportGaugeValue(OPEN_TRANSACTIONS, ongoingTransactions, streamTags(scope, streamName));\n    }\n\nI'm not exactly sure why we can expect this to work.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r401901097", "createdAt": "2020-04-01T20:50:37Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ=="}, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMDQ2Mg==", "bodyText": "Please refer to MetricsProviderTest.java for similar test cases, in particular compare how the metrics registry gets initialized.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r401910462", "createdAt": "2020-04-01T21:08:21Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ=="}, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzNTcyNA==", "bodyText": "Please refer to MetricsProviderTest.java for similar test cases, in particular compare how the metrics registry gets initialized.\n\nI'm not sure I understand. I don't see any difference in usages, with the exception of MetricsProviderTest.java calling freezeGaugeValue before returning.  But that still leaves the question about why the reportOpenTransacitons call is able to work properly.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r401935724", "createdAt": "2020-04-01T22:00:48Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ=="}, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0MjAwNw==", "bodyText": "Unit tests are supposed to be independent, and be run in any sequence.\nSeems the test b() carries the result of test a (15), it is a test leaking. The first line of test b() should receive an nullpointerexception as the gauge wasn't created by that time.\nPlease refer to MetricsProviderTest again, look for @before which annotates the method to run before EVERY test case.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r402542007", "createdAt": "2020-04-02T18:58:10Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ=="}, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTAwNDc5OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyNToxMFrOGAisoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODozMToyNFrOGAjBmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyMTY2NA==", "bodyText": "why not use Throttler enum directly here?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r403221664", "createdAt": "2020-04-03T18:25:10Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -182,8 +180,8 @@ public void currentState(int queueSize, int inFlightCount) {\n             this.operationsInFlight.reportSuccessValue(inFlightCount);\n         }\n \n-        public void processingDelay(int millis) {\n-            this.operationProcessorDelay.reportSuccessValue(millis);\n+        public void processingDelay(int millis, String throttlerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37b693f0d80214a3e384eca8e44e28d09dad122e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNzAzNA==", "bodyText": "The place where this is called (Throttler.java) uses an Enum type private to the io.pravega.segmentstore.server.logs package.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r403227034", "createdAt": "2020-04-03T18:31:24Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -182,8 +180,8 @@ public void currentState(int queueSize, int inFlightCount) {\n             this.operationsInFlight.reportSuccessValue(inFlightCount);\n         }\n \n-        public void processingDelay(int millis) {\n-            this.operationProcessorDelay.reportSuccessValue(millis);\n+        public void processingDelay(int millis, String throttlerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyMTY2NA=="}, "originalCommit": {"oid": "37b693f0d80214a3e384eca8e44e28d09dad122e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkxMjA4OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1MjozMVrOGDtCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1MjozMVrOGDtCYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNjgwMg==", "bodyText": "I'm not a big fan of this type of caching, for a couple of reasons:\n\nYou need to do a lookup in this map every time you report something.\nThe map's keys are not the same as the ones that are in ThrottlerCalculator. If we decide (for whatever reason) to rename, remove or add one in there, this will not work.\nIf (continued from 2 above), there is no entry in this map for a throttler name, then it will return null - how will the reporting work? will it throw a NullPtr?\n\nI am OK with generating a new array every time we invoke this. Generating a 4-element array is insignificant compared to all the other work that is done in the Operation Processor so there's no need to try to optimize it.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406536802", "createdAt": "2020-04-09T23:52:31Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -148,13 +144,16 @@ private void report() {\n         private final OpStatsLogger processOperationsLatency;\n         private final OpStatsLogger processOperationsBatchSize;\n         private final String[] containerTag;\n+        private final HashMap<String, String[]> throttlerTags = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkxNTI3OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NDowNFrOGDtENQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NDowNFrOGDtENQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzI2OQ==", "bodyText": "please add a method called getElapsed on TimeoutTimer that does this calculation. Doing so will remove the need to expose getInitial to the outside.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406537269", "createdAt": "2020-04-09T23:54:04Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -122,6 +122,8 @@ boolean isThrottlingRequired() {\n                 if (remaining > 0 && remaining < delay.get().getDurationMillis()) {\n                     delay.set(delay.get().withNewDelay(remaining));\n                 }\n+                int incurredDelay = (int) (existingDelay.remaining.getInitial().toMillis() - existingDelay.remaining.getRemaining().toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkxNjQwOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NDo0OVrOGDtE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1NDo0M1rOGD8vFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzQ0Mw==", "bodyText": "Why would this be null?\nAnd even if it is, I still want to see this logged somewhere - this is important for certain debugging activities.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406537443", "createdAt": "2020-04-09T23:54:49Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -138,13 +140,12 @@ boolean isThrottlingRequired() {\n     }\n \n     private CompletableFuture<Void> throttleOnce(ThrottlerCalculator.DelayResult delay) {\n-        this.metrics.processingDelay(delay.getDurationMillis());\n         if (delay.isMaximum()\n                 || delay.getThrottlerName() == ThrottlerCalculator.ThrottlerName.DurableDataLog) {\n             // Increase logging visibility if we throttle at the maximum limit (which means we're likely to fully block\n             // processing of operations) or if this is due to us not being able to ingest items quickly enough.\n             log.warn(\"{}: Processing delay = {}.\", this.traceObjectId, delay);\n-        } else {\n+        } else if (delay.getThrottlerName() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MzA4Ng==", "bodyText": "I did not dig too deeply, but It appears that throttle is being called somewhere in the testing code, without having been assigned a Throttler and returns a DelayResult with a default null name. When I called delay.getThrottlerName() on this null value, it halts execution. This was the reason for my TravisCI builds failing. Having said that I think this condition is redundant anyways. Will remove.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406543086", "createdAt": "2020-04-10T00:15:39Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -138,13 +140,12 @@ boolean isThrottlingRequired() {\n     }\n \n     private CompletableFuture<Void> throttleOnce(ThrottlerCalculator.DelayResult delay) {\n-        this.metrics.processingDelay(delay.getDurationMillis());\n         if (delay.isMaximum()\n                 || delay.getThrottlerName() == ThrottlerCalculator.ThrottlerName.DurableDataLog) {\n             // Increase logging visibility if we throttle at the maximum limit (which means we're likely to fully block\n             // processing of operations) or if this is due to us not being able to ingest items quickly enough.\n             log.warn(\"{}: Processing delay = {}.\", this.traceObjectId, delay);\n-        } else {\n+        } else if (delay.getThrottlerName() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzQ0Mw=="}, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAwNQ==", "bodyText": "Well, by looking at the code in this else block I don't see how that could happen. log.debug is passed delay, and it will only invoke toString on it if debug-level logging is enabled. I believe it is not (but I am not sure). However if there is a bug like you said, then it must be in the toString implementation of delay, so if anything it should be fixed there.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406794005", "createdAt": "2020-04-10T14:54:43Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -138,13 +140,12 @@ boolean isThrottlingRequired() {\n     }\n \n     private CompletableFuture<Void> throttleOnce(ThrottlerCalculator.DelayResult delay) {\n-        this.metrics.processingDelay(delay.getDurationMillis());\n         if (delay.isMaximum()\n                 || delay.getThrottlerName() == ThrottlerCalculator.ThrottlerName.DurableDataLog) {\n             // Increase logging visibility if we throttle at the maximum limit (which means we're likely to fully block\n             // processing of operations) or if this is due to us not being able to ingest items quickly enough.\n             log.warn(\"{}: Processing delay = {}.\", this.traceObjectId, delay);\n-        } else {\n+        } else if (delay.getThrottlerName() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzQ0Mw=="}, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkxNjgyOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NToxMlrOGDtFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NToxMlrOGDtFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzUxNA==", "bodyText": "use hasRemaining in TimeoutTimer", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406537514", "createdAt": "2020-04-09T23:55:12Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -159,8 +160,17 @@ boolean isThrottlingRequired() {\n                             result.delayFuture,\n                             ex -> ex instanceof ThrottlingInterruptedException,\n                             this::throttle)\n-                    .whenComplete((r, e) -> this.currentDelay.set(null));\n+                    .whenComplete((r, e) -> {\n+                        if (this.currentDelay.get() != null && currentDelay.get().remaining.getRemaining().toMillis() <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyMDI0OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NzowOFrOGDtHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NzowOFrOGDtHRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODA1NQ==", "bodyText": "Please do not check in commented out code. Either add it back or delete it completely.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538055", "createdAt": "2020-04-09T23:57:08Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -145,6 +161,191 @@ public void testInterruptedDurableDataLogDelay() throws Exception {\n         testInterruptedDelay(ThrottlerCalculator.ThrottlerName.DurableDataLog);\n     }\n \n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedIncreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(3000, 4000, 5000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+            // Wait for the new cycle to begin (we use the recordDelay consumer above to figure this out).\n+            int expectedDelayCount = i + 1;\n+            TestUtils.await(() -> delays.size() == expectedDelayCount, 5, TIMEOUT_MILLIS);\n+        }\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+\n+        String[] tags = { \"container\", String.valueOf(this.containerId), \"throttler\", \"Cache\" };\n+\n+        // Because the supplied delays is monotonically decreasing, only the first delay value should be used to calculate\n+        // the duration supplied.\n+        AssertExtensions.assertLessThanOrEqual(\n+                \"Throttler should be at most the first supplied delay\",\n+                (int) suppliedDelays.get(0),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+    }\n+\n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedDecreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(5000, 4000, 3000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            //Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyMTc3OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1ODoxN1rOGDtITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1ODoxN1rOGDtITA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODMxNg==", "bodyText": "I really do not like sleeping in tests (or anywhere else for that matter). Can you rewrite this test without the need to sleep?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538316", "createdAt": "2020-04-09T23:58:17Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -145,6 +161,191 @@ public void testInterruptedDurableDataLogDelay() throws Exception {\n         testInterruptedDelay(ThrottlerCalculator.ThrottlerName.DurableDataLog);\n     }\n \n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedIncreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(3000, 4000, 5000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+            // Wait for the new cycle to begin (we use the recordDelay consumer above to figure this out).\n+            int expectedDelayCount = i + 1;\n+            TestUtils.await(() -> delays.size() == expectedDelayCount, 5, TIMEOUT_MILLIS);\n+        }\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+\n+        String[] tags = { \"container\", String.valueOf(this.containerId), \"throttler\", \"Cache\" };\n+\n+        // Because the supplied delays is monotonically decreasing, only the first delay value should be used to calculate\n+        // the duration supplied.\n+        AssertExtensions.assertLessThanOrEqual(\n+                \"Throttler should be at most the first supplied delay\",\n+                (int) suppliedDelays.get(0),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+    }\n+\n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedDecreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(5000, 4000, 3000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            //Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+            // Wait for the new cycle to begin (we use the recordDelay consumer above to figure this out).\n+            int expectedDelayCount = i + 1;\n+            TestUtils.await(() -> delays.size() == expectedDelayCount, 5, TIMEOUT_MILLIS);\n+        }\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+\n+        String[] tags = { \"container\", String.valueOf(this.containerId), \"throttler\", \"Cache\" };\n+\n+        // Because the supplied delays is monotonically decreasing, only the first delay value should be used to calculate\n+        // the duration supplied.\n+\n+        AssertExtensions.assertGreaterThanOrEqual(\n+                \"Excepted delay to be at least smallest value.\",\n+                 suppliedDelays.get(2),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+\n+        AssertExtensions.assertLessThan(\n+                \"Excepted delay to be strictly less than the max.\",\n+                 suppliedDelays.get(0),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+    }\n+\n+    /**\n+     * Incorporates mutliple types of throttlers using arbitrary throttling amounts to make sure that each throttling\n+     * metric is being properly reported.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterrutedMixedDelayMetrics() throws Exception {\n+        val cacheCalculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val batchingCalculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Batching);\n+        val durableDataLogCalculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.DurableDataLog);\n+\n+        int cacheDelay = 6000;\n+        int batchingDelay = 5000;\n+        int durableDataLogDelay = 3000;\n+\n+        cacheCalculator.setDelayMillis(cacheDelay);\n+        batchingCalculator.setDelayMillis(batchingDelay);\n+        durableDataLogCalculator.setDelayMillis(durableDataLogDelay);\n+\n+        Consumer<Integer> recordDelay = delayMillis -> { };\n+        ArrayList<ThrottlerCalculator.Throttler> throttlers = new ArrayList<>(Arrays.asList(cacheCalculator, batchingCalculator, durableDataLogCalculator));\n+\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(throttlers), executorService(), metrics, recordDelay);\n+\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        int throttlerActiveTime = 2000;\n+        // Suppose a second goes by.\n+        TimeUnit.MILLISECONDS.sleep(throttlerActiveTime);\n+        // Now the Cache state has changed.\n+        // Change delay of Cache throttler in order to make the ThrottlerCalculator pick up the Batching Throttler.\n+        cacheCalculator.setDelayMillis(1000);\n+        // Change source of throttling.\n+        t.notifyThrottleSourceChanged();\n+        // Wait for the batching throttler to complete.\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+        // Throttler should report it spent at least `throttlerActiveTime` throttled.\n+        AssertExtensions.assertGreaterThanOrEqual(\n+                \"Expected to be greater than the time left uninterrupted.\",\n+                throttlerActiveTime,\n+                (int) getThrottlerMetric(ThrottlerCalculator.ThrottlerName.Cache)\n+        );\n+        // Force an interruption. The throttler should take the min of the left over delay from the previous throttler,\n+        // or the throttling delay originally assigned.\n+        AssertExtensions.assertLessThanOrEqual(\n+                \"Expected to be greater than the time left uninterrupted.\",\n+                 min(batchingDelay, cacheDelay - throttlerActiveTime),\n+                (int) getThrottlerMetric(ThrottlerCalculator.ThrottlerName.Batching)\n+        );\n+\n+        durableDataLogDelay = max(cacheDelay, batchingDelay) + 1000;\n+        // This should force the throttler calculator to pick up the durable data log throttler.\n+        durableDataLogCalculator.setDelayMillis(durableDataLogDelay);\n+        val t2 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t2.isDone());\n+        // Arbitrary amount of time goes by.\n+        TimeUnit.MILLISECONDS.sleep(throttlerActiveTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyMjM1OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1ODozNlrOGDtInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1ODozNlrOGDtInw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODM5OQ==", "bodyText": "Math.min?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538399", "createdAt": "2020-04-09T23:58:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -195,6 +396,26 @@ private ThrottlerCalculator wrap(ThrottlerCalculator.Throttler calculatorThrottl\n         return ThrottlerCalculator.builder().throttler(calculatorThrottler).build();\n     }\n \n+    private ThrottlerCalculator wrap(ArrayList<ThrottlerCalculator.Throttler> throttlers) {\n+        return ThrottlerCalculator.builder().throttlers(throttlers).build();\n+    }\n+\n+    private String[] throttlerTags(ThrottlerCalculator.ThrottlerName name)  {\n+        return  new String[] { \"container\", String.valueOf(this.containerId), \"throttler\", name.toString() };\n+    }\n+\n+    private double getThrottlerMetric(ThrottlerCalculator.ThrottlerName name) {\n+        return MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, throttlerTags(name)).value();\n+    }\n+\n+    private static int min(int a, int b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyMjY5OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1ODo0NVrOGDtIzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1ODo0NVrOGDtIzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODQ0NA==", "bodyText": "Math.max?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538444", "createdAt": "2020-04-09T23:58:45Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -195,6 +396,26 @@ private ThrottlerCalculator wrap(ThrottlerCalculator.Throttler calculatorThrottl\n         return ThrottlerCalculator.builder().throttler(calculatorThrottler).build();\n     }\n \n+    private ThrottlerCalculator wrap(ArrayList<ThrottlerCalculator.Throttler> throttlers) {\n+        return ThrottlerCalculator.builder().throttlers(throttlers).build();\n+    }\n+\n+    private String[] throttlerTags(ThrottlerCalculator.ThrottlerName name)  {\n+        return  new String[] { \"container\", String.valueOf(this.containerId), \"throttler\", name.toString() };\n+    }\n+\n+    private double getThrottlerMetric(ThrottlerCalculator.ThrottlerName name) {\n+        return MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, throttlerTags(name)).value();\n+    }\n+\n+    private static int min(int a, int b) {\n+        return a < b ? a : b;\n+    }\n+\n+    private static int max(int a, int b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 320}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyMzg2OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1OTowOFrOGDtJXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1OTowOFrOGDtJXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODU4OA==", "bodyText": "Can't you get this from MetricsTags?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538588", "createdAt": "2020-04-09T23:59:08Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -195,6 +396,26 @@ private ThrottlerCalculator wrap(ThrottlerCalculator.Throttler calculatorThrottl\n         return ThrottlerCalculator.builder().throttler(calculatorThrottler).build();\n     }\n \n+    private ThrottlerCalculator wrap(ArrayList<ThrottlerCalculator.Throttler> throttlers) {\n+        return ThrottlerCalculator.builder().throttlers(throttlers).build();\n+    }\n+\n+    private String[] throttlerTags(ThrottlerCalculator.ThrottlerName name)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 308}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4470, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}