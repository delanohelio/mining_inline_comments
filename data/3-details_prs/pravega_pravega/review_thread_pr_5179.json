{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MjI5MTA4", "number": 5179, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozOTowNFrOEkv_lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNToyM1rOEltOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTcwNTE2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/pravega/common/io/filesystem/FileOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozOTowNFrOHT35Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozOTowNFrOHT35Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwMDcwNg==", "bodyText": "This change is due to the unfortunate reality of pleasing code coverage. A way was required to (platform independently) test for a failure scenario. The previous solution had several problems which made this difficult:\n\nThe visibility of cleanupDirectories and other BookKeeperServiceRunner fields made it hard to unit test cleanupDirectories at all in the first place (without affecting the state of the service, and therefore other tests).\nUnit testing cleanupDirectories within any other the BookKeeper* tests seems very forced and unnatural.\nForcing an IOException to be thrown (across platforms) is also quite difficult -- it is much easier to force an IllegalArgumentException.\nWe still need some way to determine whether or not an exception was thrown. Previously the exception was only caught and logged.\n\nAt the expensive of creating two small classes, this avoids the above problems.", "url": "https://github.com/pravega/pravega/pull/5179#discussion_r490600706", "createdAt": "2020-09-17T22:39:04Z", "author": {"login": "co-jo"}, "path": "common/src/main/java/io/pravega/common/io/filesystem/FileOperations.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.io.filesystem;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+\n+@Slf4j\n+public class FileOperations {\n+\n+    public static boolean cleanupDirectories(HashMap<?, File> toDelete) {\n+        for (File dir : toDelete.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473968ce1cb5d8d4a15ca524f3e11a4fdbf723ea"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTczODI0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/pravega/common/io/filesystem/FileOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNToyM1rOHVU9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo1NToyN1rOHVcNng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNTUxMQ==", "bodyText": "Why do you do this? This will modify the HashMap that you are being given, so you caller may have a nasty surprise after invoking this method?\nI don't think this is needed. If the caller wants to clear, they can do it after invoking this method.", "url": "https://github.com/pravega/pravega/pull/5179#discussion_r492125511", "createdAt": "2020-09-21T15:05:23Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/io/filesystem/FileOperations.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.io.filesystem;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+\n+@Slf4j\n+public class FileOperations {\n+\n+    public static boolean cleanupDirectories(HashMap<?, File> toDelete) {\n+        for (File dir : toDelete.values()) {\n+            log.info(\"Cleaning up \" + dir);\n+            if (!FileUtils.deleteQuietly(dir)) {\n+                log.info(\"Failed deleting directory: {}\", dir);\n+                return false;\n+            }\n+        }\n+        toDelete.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473968ce1cb5d8d4a15ca524f3e11a4fdbf723ea"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0NDM4Mg==", "bodyText": "Why do you do this? This will modify the HashMap that you are being given, so you caller may have a nasty surprise after invoking this method?\nI don't think this is needed. If the caller wants to clear, they can do it after invoking this method.\n\nThis was part of the original method so I just kept it. Will remove.", "url": "https://github.com/pravega/pravega/pull/5179#discussion_r492244382", "createdAt": "2020-09-21T17:55:27Z", "author": {"login": "co-jo"}, "path": "common/src/main/java/io/pravega/common/io/filesystem/FileOperations.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.io.filesystem;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+\n+@Slf4j\n+public class FileOperations {\n+\n+    public static boolean cleanupDirectories(HashMap<?, File> toDelete) {\n+        for (File dir : toDelete.values()) {\n+            log.info(\"Cleaning up \" + dir);\n+            if (!FileUtils.deleteQuietly(dir)) {\n+                log.info(\"Failed deleting directory: {}\", dir);\n+                return false;\n+            }\n+        }\n+        toDelete.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNTUxMQ=="}, "originalCommit": {"oid": "473968ce1cb5d8d4a15ca524f3e11a4fdbf723ea"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4693, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}