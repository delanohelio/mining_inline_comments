{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzY5NzY3", "number": 5051, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozNjoxNlrOEYLxTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNToyNDowMFrOEf046A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzk0MTI3OnYy", "diffSide": "RIGHT", "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODozNjoxNlrOHAYmzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMjozOToyOFrOHBX_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NTE5Ng==", "bodyText": "Just curious, is prn::* equivalent to prn::/*", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470165196", "createdAt": "2020-08-13T18:36:16Z", "author": {"login": "sarlaccpit"}, "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "diffHunk": "@@ -11,40 +11,50 @@\n \n import io.grpc.ServerBuilder;\n import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.controller.server.rpc.auth.AuthHandlerManager;\n-import io.pravega.controller.server.rpc.auth.StrongPasswordProcessor;\n+import io.pravega.controller.server.security.auth.handler.AuthHandlerManager;\n+import io.pravega.controller.server.security.auth.StrongPasswordProcessor;\n import io.pravega.controller.server.rpc.grpc.impl.GRPCServerConfigImpl;\n import io.pravega.test.common.TestUtils;\n import javax.ws.rs.client.Invocation;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n-import org.junit.Before;\n-\n import java.io.File;\n import java.io.FileWriter;\n+import java.util.Arrays;\n+import org.junit.Before;\n+\n+import static io.pravega.controller.auth.AuthFileUtils.addAuthFileEntry;\n \n public class SecureStreamMetaDataTests extends  StreamMetaDataTests {\n+\n     @Override\n     @Before\n     public void setup() throws Exception {\n-        File file = File.createTempFile(\"passwd\", \".txt\");\n-\n+        File file = File.createTempFile(\"SecureStreamMetaDataTests\", \".txt\");\n         StrongPasswordProcessor passwordEncryptor = StrongPasswordProcessor.builder().build();\n \n         try (FileWriter writer = new FileWriter(file.getAbsolutePath())) {\n             String passwd = passwordEncryptor.encryptPassword(\"1111_aaaa\");\n \n             // Admin has READ_WRITE permission to everything\n-            writer.write(\"admin:\" + passwd + \":*,READ_UPDATE\\n\");\n+            addAuthFileEntry(writer, \"admin\", passwd, Arrays.asList(\"prn::*,READ_UPDATE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwMDA4NQ==", "bodyText": "No, they are different.\n\nprn::* gives the user access to all resources.\nprn::/* gives the user access to all scopes and resources underneath it. It doesn't provide the user access to the root resource /, the user cannot create a scope for instance.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470500085", "createdAt": "2020-08-14T08:57:25Z", "author": {"login": "ravisharda"}, "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "diffHunk": "@@ -11,40 +11,50 @@\n \n import io.grpc.ServerBuilder;\n import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.controller.server.rpc.auth.AuthHandlerManager;\n-import io.pravega.controller.server.rpc.auth.StrongPasswordProcessor;\n+import io.pravega.controller.server.security.auth.handler.AuthHandlerManager;\n+import io.pravega.controller.server.security.auth.StrongPasswordProcessor;\n import io.pravega.controller.server.rpc.grpc.impl.GRPCServerConfigImpl;\n import io.pravega.test.common.TestUtils;\n import javax.ws.rs.client.Invocation;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n-import org.junit.Before;\n-\n import java.io.File;\n import java.io.FileWriter;\n+import java.util.Arrays;\n+import org.junit.Before;\n+\n+import static io.pravega.controller.auth.AuthFileUtils.addAuthFileEntry;\n \n public class SecureStreamMetaDataTests extends  StreamMetaDataTests {\n+\n     @Override\n     @Before\n     public void setup() throws Exception {\n-        File file = File.createTempFile(\"passwd\", \".txt\");\n-\n+        File file = File.createTempFile(\"SecureStreamMetaDataTests\", \".txt\");\n         StrongPasswordProcessor passwordEncryptor = StrongPasswordProcessor.builder().build();\n \n         try (FileWriter writer = new FileWriter(file.getAbsolutePath())) {\n             String passwd = passwordEncryptor.encryptPassword(\"1111_aaaa\");\n \n             // Admin has READ_WRITE permission to everything\n-            writer.write(\"admin:\" + passwd + \":*,READ_UPDATE\\n\");\n+            addAuthFileEntry(writer, \"admin\", passwd, Arrays.asList(\"prn::*,READ_UPDATE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NTE5Ng=="}, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2NDU0OA==", "bodyText": "Got it.  So in order to create a scope, I'd need to either have:  READ_UPDATE on prn::* or READ_UPDATE on prn::/, right?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470664548", "createdAt": "2020-08-14T14:40:15Z", "author": {"login": "sarlaccpit"}, "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "diffHunk": "@@ -11,40 +11,50 @@\n \n import io.grpc.ServerBuilder;\n import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.controller.server.rpc.auth.AuthHandlerManager;\n-import io.pravega.controller.server.rpc.auth.StrongPasswordProcessor;\n+import io.pravega.controller.server.security.auth.handler.AuthHandlerManager;\n+import io.pravega.controller.server.security.auth.StrongPasswordProcessor;\n import io.pravega.controller.server.rpc.grpc.impl.GRPCServerConfigImpl;\n import io.pravega.test.common.TestUtils;\n import javax.ws.rs.client.Invocation;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n-import org.junit.Before;\n-\n import java.io.File;\n import java.io.FileWriter;\n+import java.util.Arrays;\n+import org.junit.Before;\n+\n+import static io.pravega.controller.auth.AuthFileUtils.addAuthFileEntry;\n \n public class SecureStreamMetaDataTests extends  StreamMetaDataTests {\n+\n     @Override\n     @Before\n     public void setup() throws Exception {\n-        File file = File.createTempFile(\"passwd\", \".txt\");\n-\n+        File file = File.createTempFile(\"SecureStreamMetaDataTests\", \".txt\");\n         StrongPasswordProcessor passwordEncryptor = StrongPasswordProcessor.builder().build();\n \n         try (FileWriter writer = new FileWriter(file.getAbsolutePath())) {\n             String passwd = passwordEncryptor.encryptPassword(\"1111_aaaa\");\n \n             // Admin has READ_WRITE permission to everything\n-            writer.write(\"admin:\" + passwd + \":*,READ_UPDATE\\n\");\n+            addAuthFileEntry(writer, \"admin\", passwd, Arrays.asList(\"prn::*,READ_UPDATE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NTE5Ng=="}, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIwMzY4OQ==", "bodyText": "Yes, that is right.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471203689", "createdAt": "2020-08-17T02:39:28Z", "author": {"login": "ravisharda"}, "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "diffHunk": "@@ -11,40 +11,50 @@\n \n import io.grpc.ServerBuilder;\n import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.controller.server.rpc.auth.AuthHandlerManager;\n-import io.pravega.controller.server.rpc.auth.StrongPasswordProcessor;\n+import io.pravega.controller.server.security.auth.handler.AuthHandlerManager;\n+import io.pravega.controller.server.security.auth.StrongPasswordProcessor;\n import io.pravega.controller.server.rpc.grpc.impl.GRPCServerConfigImpl;\n import io.pravega.test.common.TestUtils;\n import javax.ws.rs.client.Invocation;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n-import org.junit.Before;\n-\n import java.io.File;\n import java.io.FileWriter;\n+import java.util.Arrays;\n+import org.junit.Before;\n+\n+import static io.pravega.controller.auth.AuthFileUtils.addAuthFileEntry;\n \n public class SecureStreamMetaDataTests extends  StreamMetaDataTests {\n+\n     @Override\n     @Before\n     public void setup() throws Exception {\n-        File file = File.createTempFile(\"passwd\", \".txt\");\n-\n+        File file = File.createTempFile(\"SecureStreamMetaDataTests\", \".txt\");\n         StrongPasswordProcessor passwordEncryptor = StrongPasswordProcessor.builder().build();\n \n         try (FileWriter writer = new FileWriter(file.getAbsolutePath())) {\n             String passwd = passwordEncryptor.encryptPassword(\"1111_aaaa\");\n \n             // Admin has READ_WRITE permission to everything\n-            writer.write(\"admin:\" + passwd + \":*,READ_UPDATE\\n\");\n+            addAuthFileEntry(writer, \"admin\", passwd, Arrays.asList(\"prn::*,READ_UPDATE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NTE5Ng=="}, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODA1NjY1OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTowNDowOFrOHAZqzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0NToxOVrOHA3ZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MjYwNw==", "bodyText": "This is just to confirm my understanding:   the fact that the delegation token deals with resource strings that are in the same format as what goes on in the controller side authorization is just a coincidence, correct?\nMeaning, in theory what goes on in the delegation token could have been completely different (though why re-invent the wheel basically).  is that correct?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470182607", "createdAt": "2020-08-13T19:04:08Z", "author": {"login": "sarlaccpit"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "diffHunk": "@@ -75,6 +75,14 @@ public JsonWebToken verifyToken(@NonNull String resource, String token, @NonNull\n      * @return\n      */\n     private boolean resourceMatchesClaimKey(String claimKey, String resource) {\n+        log.trace(\"claimKey = {}, resourceKey = {}\", claimKey, resource);\n+        if (claimKey.startsWith(\"prn::\")) {\n+            claimKey = claimKey.replace(\"prn::/\", \"\")\n+                    .replace(\"prn::\", \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwMzQ4MQ==", "bodyText": "To provide a bit more context: For Segment store operations like reading from stream and appending to a stream, the user must have corresponding read/write access. The delegation token generated by the Controller has a \"claim\" of the form <resource string>=<READ | READ_WRITE>  that tells the segment store that the bearer of the token is allowed to perform the specified action.\nTo answer your question, yes the delegation token could use a completed different format for the authorization key, but why re-invent the wheel.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470503481", "createdAt": "2020-08-14T09:04:16Z", "author": {"login": "ravisharda"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "diffHunk": "@@ -75,6 +75,14 @@ public JsonWebToken verifyToken(@NonNull String resource, String token, @NonNull\n      * @return\n      */\n     private boolean resourceMatchesClaimKey(String claimKey, String resource) {\n+        log.trace(\"claimKey = {}, resourceKey = {}\", claimKey, resource);\n+        if (claimKey.startsWith(\"prn::\")) {\n+            claimKey = claimKey.replace(\"prn::/\", \"\")\n+                    .replace(\"prn::\", \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MjYwNw=="}, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2OTY1NA==", "bodyText": "Got it. Thanks for confirming.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470669654", "createdAt": "2020-08-14T14:45:19Z", "author": {"login": "sarlaccpit"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "diffHunk": "@@ -75,6 +75,14 @@ public JsonWebToken verifyToken(@NonNull String resource, String token, @NonNull\n      * @return\n      */\n     private boolean resourceMatchesClaimKey(String claimKey, String resource) {\n+        log.trace(\"claimKey = {}, resourceKey = {}\", claimKey, resource);\n+        if (claimKey.startsWith(\"prn::\")) {\n+            claimKey = claimKey.replace(\"prn::/\", \"\")\n+                    .replace(\"prn::\", \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MjYwNw=="}, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODA5MjYyOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/rest/resources/StreamMetadataResourceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxNDo0MVrOHAaAlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTowNjowNFrOHA4Kvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODE4Mw==", "bodyText": "Just curious where the toggle is to use the LegacyAuthorizationImpl() ?\nMight be useful to implementors of the auth handler interface could take the new Pravega code and have a way to stick to the old format while they're updating their implementation to handle the new format ( else they'll break right away once Pravega starts asking about \"prn://scope:scope1\" and they really only understand  \"/scope1\" right ?).\nI saw there IS a purposely implemented LegacyAuthorizationResourceImpl class but other than in tests, I didn't see it getting used (there are a lot of files in this PR though so I might have missed a subtlety somewhere :))", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470188183", "createdAt": "2020-08-13T19:14:41Z", "author": {"login": "sarlaccpit"}, "path": "controller/src/main/java/io/pravega/controller/server/rest/resources/StreamMetadataResourceImpl.java", "diffHunk": "@@ -75,6 +76,7 @@\n     private final RESTAuthHelper restAuthHelper;\n     private final LocalController localController;\n     private final ConnectionFactory connectionFactory;\n+    private final AuthorizationResource authorizationResource = new AuthorizationResourceImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNzc0Ng==", "bodyText": "No, you are right - there is no toggle built for the LegacyAuthorizationImpl. I've kept the code for ease of comparison between the new and old formats, as we transition from the old to the new format.\nWith this code, the resource strings passed to the Auth Handler implementation will all be in the new format. Also, the built-in Password Auth Handler has been modified to take in ACLs containing patterns that match the new format. IMO, supporting both old and new formats would make the code a bit too complex (I had attempted it already) and cause problems in upgrade scenarios, without adding enough value to justify it.\nWhat do you say?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470507746", "createdAt": "2020-08-14T09:12:53Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/rest/resources/StreamMetadataResourceImpl.java", "diffHunk": "@@ -75,6 +76,7 @@\n     private final RESTAuthHelper restAuthHelper;\n     private final LocalController localController;\n     private final ConnectionFactory connectionFactory;\n+    private final AuthorizationResource authorizationResource = new AuthorizationResourceImpl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODE4Mw=="}, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MjMwMg==", "bodyText": "I understand.  Cost vs reward.  It just means that implementors of the AuthHandler interface can't upgrade to Pravega 0.9 until they've updated their plugin code.  That said the changes imposed by the new format are not a big deal.  Also the auth handler implementation doesn't have to change the way IT stores its version of acls.  It simply has to adapt to the new way Pravega will \"ask about\" the resources being authorized and adjust its mapping. ie. \"/scope1\" is now \"prn::/scope:scope1\"\nThere are probably not many of those implementations out there at this time so that's probably ok.\nI can see though that in the password file impl, you've revamped also the format of the acls themselves since they follow closely the resource format that Pravega itself uses.\nOne thing I saw is that you have a LegacyAclAuthorizer; that is so somehow one can still use their old password file, correct?    The new PasswodFileHandler will still deal with new resources name being queried on, but it'll be able to map those to old and new ACLs.    Is there a setting/path in the code on the controller side that specifically allows setting that \"oldFormat\" flag? \n  \n    \n      pravega/controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/PasswordAuthHandler.java\n    \n    \n         Line 52\n      in\n      a000a66\n    \n    \n    \n    \n\n        \n          \n           isOldAclFormatEnabled = useAclsInOldFormat; \n        \n    \n  \n\n\nThe documentation for the format of the acls in the password file will need to be updated (I'm thinking in particular the pravega cli in the tools repo that produces that password file)", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470682302", "createdAt": "2020-08-14T15:06:04Z", "author": {"login": "sarlaccpit"}, "path": "controller/src/main/java/io/pravega/controller/server/rest/resources/StreamMetadataResourceImpl.java", "diffHunk": "@@ -75,6 +76,7 @@\n     private final RESTAuthHelper restAuthHelper;\n     private final LocalController localController;\n     private final ConnectionFactory connectionFactory;\n+    private final AuthorizationResource authorizationResource = new AuthorizationResourceImpl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODE4Mw=="}, "originalCommit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTMyMDk4OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTowNjozOVrOHA4MBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoxNjozMFrOHBe1gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MjYyOA==", "bodyText": "Why do you have this copyright in here?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470682628", "createdAt": "2020-08-14T15:06:39Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -101,9 +102,19 @@\n     private final boolean replyWithStackTraceOnError;\n \n     private final Supplier<Long> requestIdGenerator = RandomFactory.create()::nextLong;\n-\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNTg0Mw==", "bodyText": "That happened by mistake. I've removed it now.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471315843", "createdAt": "2020-08-17T08:16:30Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -101,9 +102,19 @@\n     private final boolean replyWithStackTraceOnError;\n \n     private final Supplier<Long> requestIdGenerator = RandomFactory.create()::nextLong;\n-\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MjYyOA=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTMyOTA1OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTowOTowMFrOHA4RBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowMToxMlrOHBgV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MzkwOA==", "bodyText": "You're doing a double-lookup here. Get the index of \"::\" and check for negative values, then reuse it in your substring call.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470683908", "createdAt": "2020-08-14T15:09:00Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        if (resource.indexOf(\"::\") > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MDUwOA==", "bodyText": "Yeah. I've now modified the code to ensure that is done once.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471340508", "createdAt": "2020-08-17T09:01:12Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        if (resource.indexOf(\"::\") > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MzkwOA=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTMzNTE3OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxMDo0MFrOHA4UxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo0NDowMVrOHCBUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NDg2OA==", "bodyText": "The code inside the for loop does a lot of regex pattern compilation and matching, which is relatively expensive to process. Anyway we can simplify this? Can we precompute something (here or in AccessControlEntry)?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470684868", "createdAt": "2020-08-14T15:10:40Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        if (resource.indexOf(\"::\") > 0) {\n+            resourceDomain = resource.substring(0, resource.indexOf(\"::\"));\n+        } else {\n+            resourceDomain = \"prn\"; // default\n+        }\n+\n+        for (AccessControlEntry accessControlEntry : accessControlList.getEntries()) {\n+            // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+            // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+            String aclResourcePattern = accessControlEntry.getResourcePattern().replaceAll(\"(?!=.)\\\\*\", \".*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MDg5Mw==", "bodyText": "Sure, that's a very good idea. I've pushed this logic up to when the built-in Auth handler's accounts DB file is loaded during ACE construction time, which happens just once.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471880893", "createdAt": "2020-08-18T02:44:01Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        if (resource.indexOf(\"::\") > 0) {\n+            resourceDomain = resource.substring(0, resource.indexOf(\"::\"));\n+        } else {\n+            resourceDomain = \"prn\"; // default\n+        }\n+\n+        for (AccessControlEntry accessControlEntry : accessControlList.getEntries()) {\n+            // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+            // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+            String aclResourcePattern = accessControlEntry.getResourcePattern().replaceAll(\"(?!=.)\\\\*\", \".*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NDg2OA=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTM0NDA5OnYy", "diffSide": "RIGHT", "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxMzowNFrOHA4aTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo0NTowNFrOHCBV7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NjI4NQ==", "bodyText": "String.join?\nor aceStrings.stream().collect(Collectors.joining(...))?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470686285", "createdAt": "2020-08-14T15:13:04Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "diffHunk": "@@ -23,4 +28,26 @@ public static String credentialsAndAclAsString(String username, String password,\n         // This will return a string that looks like this:\"<username>:<pasword>:acl\\n\"\n         return String.format(\"%s:%s:%s%n\", username, password, acl);\n     }\n+\n+    public static String createAclString(@NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MTE5Ng==", "bodyText": "Done.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471881196", "createdAt": "2020-08-18T02:45:04Z", "author": {"login": "ravisharda"}, "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "diffHunk": "@@ -23,4 +28,26 @@ public static String credentialsAndAclAsString(String username, String password,\n         // This will return a string that looks like this:\"<username>:<pasword>:acl\\n\"\n         return String.format(\"%s:%s:%s%n\", username, password, acl);\n     }\n+\n+    public static String createAclString(@NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NjI4NQ=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTM0Njc5OnYy", "diffSide": "RIGHT", "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxMzo1MFrOHA4cDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo0NToxN1rOHCBWLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NjczMw==", "bodyText": "For this simple case it's probably easier to do a direct string concatenation. StringBuilder won't help much.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470686733", "createdAt": "2020-08-14T15:13:50Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "diffHunk": "@@ -23,4 +28,26 @@ public static String credentialsAndAclAsString(String username, String password,\n         // This will return a string that looks like this:\"<username>:<pasword>:acl\\n\"\n         return String.format(\"%s:%s:%s%n\", username, password, acl);\n     }\n+\n+    public static String createAclString(@NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();\n+        for (String aceString: aceStrings) {\n+            builder.append(aceString).append(\";\");\n+        }\n+        return builder.toString();\n+    }\n+\n+    @SneakyThrows\n+    public static void addAuthFileEntry(@NonNull FileWriter writer, @NonNull String entryAsString) {\n+        StringBuilder builder = new StringBuilder(entryAsString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MTI2MA==", "bodyText": "Done.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471881260", "createdAt": "2020-08-18T02:45:17Z", "author": {"login": "ravisharda"}, "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "diffHunk": "@@ -23,4 +28,26 @@ public static String credentialsAndAclAsString(String username, String password,\n         // This will return a string that looks like this:\"<username>:<pasword>:acl\\n\"\n         return String.format(\"%s:%s:%s%n\", username, password, acl);\n     }\n+\n+    public static String createAclString(@NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();\n+        for (String aceString: aceStrings) {\n+            builder.append(aceString).append(\";\");\n+        }\n+        return builder.toString();\n+    }\n+\n+    @SneakyThrows\n+    public static void addAuthFileEntry(@NonNull FileWriter writer, @NonNull String entryAsString) {\n+        StringBuilder builder = new StringBuilder(entryAsString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NjczMw=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTM0ODczOnYy", "diffSide": "RIGHT", "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxNDoyMVrOHA4dNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo0NTo0NFrOHCBWmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzAyOA==", "bodyText": "Recommend using String.format. Easier to read.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470687028", "createdAt": "2020-08-14T15:14:21Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "diffHunk": "@@ -23,4 +28,26 @@ public static String credentialsAndAclAsString(String username, String password,\n         // This will return a string that looks like this:\"<username>:<pasword>:acl\\n\"\n         return String.format(\"%s:%s:%s%n\", username, password, acl);\n     }\n+\n+    public static String createAclString(@NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();\n+        for (String aceString: aceStrings) {\n+            builder.append(aceString).append(\";\");\n+        }\n+        return builder.toString();\n+    }\n+\n+    @SneakyThrows\n+    public static void addAuthFileEntry(@NonNull FileWriter writer, @NonNull String entryAsString) {\n+        StringBuilder builder = new StringBuilder(entryAsString);\n+        writer.write(builder.append(\"\\n\").toString());\n+    }\n+\n+    @SneakyThrows\n+    public static void addAuthFileEntry(@NonNull FileWriter writer, @NonNull String username,\n+                                           @NonNull String hashedPwd, @NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MTM2OQ==", "bodyText": "Sure, I've modified it and it looks better.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471881369", "createdAt": "2020-08-18T02:45:44Z", "author": {"login": "ravisharda"}, "path": "controller/src/test/java/io/pravega/controller/auth/AuthFileUtils.java", "diffHunk": "@@ -23,4 +28,26 @@ public static String credentialsAndAclAsString(String username, String password,\n         // This will return a string that looks like this:\"<username>:<pasword>:acl\\n\"\n         return String.format(\"%s:%s:%s%n\", username, password, acl);\n     }\n+\n+    public static String createAclString(@NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();\n+        for (String aceString: aceStrings) {\n+            builder.append(aceString).append(\";\");\n+        }\n+        return builder.toString();\n+    }\n+\n+    @SneakyThrows\n+    public static void addAuthFileEntry(@NonNull FileWriter writer, @NonNull String entryAsString) {\n+        StringBuilder builder = new StringBuilder(entryAsString);\n+        writer.write(builder.append(\"\\n\").toString());\n+    }\n+\n+    @SneakyThrows\n+    public static void addAuthFileEntry(@NonNull FileWriter writer, @NonNull String username,\n+                                           @NonNull String hashedPwd, @NonNull List<String> aceStrings) {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzAyOA=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTM1MjY3OnYy", "diffSide": "RIGHT", "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxNTozMlrOHA4fvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo0NTo1OVrOHCBWzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzY3OA==", "bodyText": "Arrays.asList -> Collections.singletonList", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470687678", "createdAt": "2020-08-14T15:15:32Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "diffHunk": "@@ -11,40 +11,50 @@\n \n import io.grpc.ServerBuilder;\n import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.controller.server.rpc.auth.AuthHandlerManager;\n-import io.pravega.controller.server.rpc.auth.StrongPasswordProcessor;\n+import io.pravega.controller.server.security.auth.handler.AuthHandlerManager;\n+import io.pravega.controller.server.security.auth.StrongPasswordProcessor;\n import io.pravega.controller.server.rpc.grpc.impl.GRPCServerConfigImpl;\n import io.pravega.test.common.TestUtils;\n import javax.ws.rs.client.Invocation;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n-import org.junit.Before;\n-\n import java.io.File;\n import java.io.FileWriter;\n+import java.util.Arrays;\n+import org.junit.Before;\n+\n+import static io.pravega.controller.auth.AuthFileUtils.addAuthFileEntry;\n \n public class SecureStreamMetaDataTests extends  StreamMetaDataTests {\n+\n     @Override\n     @Before\n     public void setup() throws Exception {\n-        File file = File.createTempFile(\"passwd\", \".txt\");\n-\n+        File file = File.createTempFile(\"SecureStreamMetaDataTests\", \".txt\");\n         StrongPasswordProcessor passwordEncryptor = StrongPasswordProcessor.builder().build();\n \n         try (FileWriter writer = new FileWriter(file.getAbsolutePath())) {\n             String passwd = passwordEncryptor.encryptPassword(\"1111_aaaa\");\n \n             // Admin has READ_WRITE permission to everything\n-            writer.write(\"admin:\" + passwd + \":*,READ_UPDATE\\n\");\n+            addAuthFileEntry(writer, \"admin\", passwd, Arrays.asList(\"prn::*,READ_UPDATE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MTQyMg==", "bodyText": "Modified.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471881422", "createdAt": "2020-08-18T02:45:59Z", "author": {"login": "ravisharda"}, "path": "controller/src/test/java/io/pravega/controller/rest/v1/SecureStreamMetaDataTests.java", "diffHunk": "@@ -11,40 +11,50 @@\n \n import io.grpc.ServerBuilder;\n import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.controller.server.rpc.auth.AuthHandlerManager;\n-import io.pravega.controller.server.rpc.auth.StrongPasswordProcessor;\n+import io.pravega.controller.server.security.auth.handler.AuthHandlerManager;\n+import io.pravega.controller.server.security.auth.StrongPasswordProcessor;\n import io.pravega.controller.server.rpc.grpc.impl.GRPCServerConfigImpl;\n import io.pravega.test.common.TestUtils;\n import javax.ws.rs.client.Invocation;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n-import org.junit.Before;\n-\n import java.io.File;\n import java.io.FileWriter;\n+import java.util.Arrays;\n+import org.junit.Before;\n+\n+import static io.pravega.controller.auth.AuthFileUtils.addAuthFileEntry;\n \n public class SecureStreamMetaDataTests extends  StreamMetaDataTests {\n+\n     @Override\n     @Before\n     public void setup() throws Exception {\n-        File file = File.createTempFile(\"passwd\", \".txt\");\n-\n+        File file = File.createTempFile(\"SecureStreamMetaDataTests\", \".txt\");\n         StrongPasswordProcessor passwordEncryptor = StrongPasswordProcessor.builder().build();\n \n         try (FileWriter writer = new FileWriter(file.getAbsolutePath())) {\n             String passwd = passwordEncryptor.encryptPassword(\"1111_aaaa\");\n \n             // Admin has READ_WRITE permission to everything\n-            writer.write(\"admin:\" + passwd + \":*,READ_UPDATE\\n\");\n+            addAuthFileEntry(writer, \"admin\", passwd, Arrays.asList(\"prn::*,READ_UPDATE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NzY3OA=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTM2MjYwOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxODoyN1rOHA4l7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjoyOTozMlrOHDnMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4OTI2Mg==", "bodyText": "Since you know your replaced string is at the beginning, use substring. Much faster to process.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r470689262", "createdAt": "2020-08-14T15:18:27Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "diffHunk": "@@ -75,6 +75,14 @@ public JsonWebToken verifyToken(@NonNull String resource, String token, @NonNull\n      * @return\n      */\n     private boolean resourceMatchesClaimKey(String claimKey, String resource) {\n+        log.trace(\"claimKey = {}, resourceKey = {}\", claimKey, resource);\n+        if (claimKey.startsWith(\"prn::\")) {\n+            claimKey = claimKey.replace(\"prn::/\", \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4Mjk0OQ==", "bodyText": "IMO, the code looks simpler with the replace call and reveals its intention better. So, I feel we should leave it as is.\nBesides, resources can be both of the form prn::/... and prn::*, which is why I'm replacing the former first and then attempting to replace prn::.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r471882949", "createdAt": "2020-08-18T02:51:34Z", "author": {"login": "ravisharda"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "diffHunk": "@@ -75,6 +75,14 @@ public JsonWebToken verifyToken(@NonNull String resource, String token, @NonNull\n      * @return\n      */\n     private boolean resourceMatchesClaimKey(String claimKey, String resource) {\n+        log.trace(\"claimKey = {}, resourceKey = {}\", claimKey, resource);\n+        if (claimKey.startsWith(\"prn::\")) {\n+            claimKey = claimKey.replace(\"prn::/\", \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4OTI2Mg=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU0OTkxMA==", "bodyText": "I have modified the code with a much more efficient logic. Please check out the new logic.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r473549910", "createdAt": "2020-08-20T02:29:32Z", "author": {"login": "ravisharda"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/TokenVerifierImpl.java", "diffHunk": "@@ -75,6 +75,14 @@ public JsonWebToken verifyToken(@NonNull String resource, String token, @NonNull\n      * @return\n      */\n     private boolean resourceMatchesClaimKey(String claimKey, String resource) {\n+        log.trace(\"claimKey = {}, resourceKey = {}\", claimKey, resource);\n+        if (claimKey.startsWith(\"prn::\")) {\n+            claimKey = claimKey.replace(\"prn::/\", \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4OTI2Mg=="}, "originalCommit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTI4MzY5OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResourceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDo1MDoxN1rOHEbfiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0OTowNVrOHIGn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQwNjc5NQ==", "bodyText": "should we make the format a constant?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r474406795", "createdAt": "2020-08-21T04:50:17Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * The main implementation of the {@link AuthorizationResource} class.\n+ */\n+public class AuthorizationResourceImpl implements AuthorizationResource {\n+    public static final String DOMAIN_PART_SUFFIX = \"prn::\";\n+    private static final String TAG_SCOPE = \"scope\";\n+    private static final String TAG_STREAM = \"stream\";\n+    private static final String TAG_READERGROUP = \"reader-group\";\n+    private static final String TAG_KEYVALUETABLE = \"key-value-table\";\n+\n+    private static final String ROOT_RESOURCE = String.format(\"%s/\", DOMAIN_PART_SUFFIX);\n+\n+    @Override\n+    public String ofScopes() {\n+        return ROOT_RESOURCE;\n+    }\n+\n+    @Override\n+    public String ofScope(String scopeName) {\n+        Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+        return String.format(\"%s/%s:%s\", DOMAIN_PART_SUFFIX, TAG_SCOPE, scopeName);\n+    }\n+\n+    @Override\n+    public String ofStreamsInScope(String scopeName) {\n+        return ofScope(scopeName);\n+    }\n+\n+    @Override\n+    public String ofStreamInScope(String scopeName, String streamName) {\n+        Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+        Exceptions.checkNotNullOrEmpty(streamName, \"streamName\");\n+        return String.format(\"%s/%s:%s\", ofScope(scopeName), TAG_STREAM, streamName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a12909f647b3af7c6759d4560211165b38a3c8b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1OTE5MQ==", "bodyText": "IMO specifying the format directly here makes it easier to understand the output returned by this line of code.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478259191", "createdAt": "2020-08-27T08:49:05Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * The main implementation of the {@link AuthorizationResource} class.\n+ */\n+public class AuthorizationResourceImpl implements AuthorizationResource {\n+    public static final String DOMAIN_PART_SUFFIX = \"prn::\";\n+    private static final String TAG_SCOPE = \"scope\";\n+    private static final String TAG_STREAM = \"stream\";\n+    private static final String TAG_READERGROUP = \"reader-group\";\n+    private static final String TAG_KEYVALUETABLE = \"key-value-table\";\n+\n+    private static final String ROOT_RESOURCE = String.format(\"%s/\", DOMAIN_PART_SUFFIX);\n+\n+    @Override\n+    public String ofScopes() {\n+        return ROOT_RESOURCE;\n+    }\n+\n+    @Override\n+    public String ofScope(String scopeName) {\n+        Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+        return String.format(\"%s/%s:%s\", DOMAIN_PART_SUFFIX, TAG_SCOPE, scopeName);\n+    }\n+\n+    @Override\n+    public String ofStreamsInScope(String scopeName) {\n+        return ofScope(scopeName);\n+    }\n+\n+    @Override\n+    public String ofStreamInScope(String scopeName, String streamName) {\n+        Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+        Exceptions.checkNotNullOrEmpty(streamName, \"streamName\");\n+        return String.format(\"%s/%s:%s\", ofScope(scopeName), TAG_STREAM, streamName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQwNjc5NQ=="}, "originalCommit": {"oid": "1a12909f647b3af7c6759d4560211165b38a3c8b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MzQyOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjo1NFrOHFfhiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzo0ODoyNFrOHH6djg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTQxNw==", "bodyText": "same here and elsewhere", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475521417", "createdAt": "2020-08-24T11:02:54Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {\n+\n+    public String ofScopes() {\n+        return \"/\";\n+    }\n+\n+    public String ofScope(String scopeName) {\n+        Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+        return scopeName;\n+    }\n+\n+    public String ofStreamsInScope(String scopeName) {\n+        return Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+    }\n+\n+    public String ofStreamInScope(String scopeName, String streamName) {\n+        Exceptions.checkNotNullOrEmpty(streamName, \"streamName\");\n+        return String.format(\"%s/%s\", ofStreamsInScope(scopeName), streamName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA1OTkxOA==", "bodyText": "Specifying the format directly makes it easier to understand what's happening here, IMO.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478059918", "createdAt": "2020-08-27T03:48:24Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {\n+\n+    public String ofScopes() {\n+        return \"/\";\n+    }\n+\n+    public String ofScope(String scopeName) {\n+        Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+        return scopeName;\n+    }\n+\n+    public String ofStreamsInScope(String scopeName) {\n+        return Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+    }\n+\n+    public String ofStreamInScope(String scopeName, String streamName) {\n+        Exceptions.checkNotNullOrEmpty(streamName, \"streamName\");\n+        return String.format(\"%s/%s\", ofStreamsInScope(scopeName), streamName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTQxNw=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NzQxOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/StrongPasswordProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNDoxN1rOHFfkDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1MDoxNVrOHIGq3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjA2MQ==", "bodyText": "Should this class be in controller or be moved to \"auth\" module.\nThis has nothing specific to controller's auth.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475522061", "createdAt": "2020-08-24T11:04:17Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/StrongPasswordProcessor.java", "diffHunk": "@@ -7,7 +7,7 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.controller.server.rpc.auth;\n+package io.pravega.controller.server.security.auth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1OTkzNQ==", "bodyText": "I've created a separate issue #5118 that should include these changes plus other organizational changes required in the security-related code.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478259935", "createdAt": "2020-08-27T08:50:15Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/StrongPasswordProcessor.java", "diffHunk": "@@ -7,7 +7,7 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.controller.server.rpc.auth;\n+package io.pravega.controller.server.security.auth;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjA2MQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkwMzkyOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/UserPrincipal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNjoyM1rOHFfoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1MDo0MFrOHIGr1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMzA4OQ==", "bodyText": "same comment here - should we take the opportunity to move this to auth module as this is generic User Principal which is serializable.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475523089", "createdAt": "2020-08-24T11:06:23Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/UserPrincipal.java", "diffHunk": "@@ -7,7 +7,7 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.controller.server.rpc.auth;\n+package io.pravega.controller.server.security.auth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2MDE4MA==", "bodyText": "I've created a separate issue #5118 that should include these changes plus other organizational changes required in the security-related code.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478260180", "createdAt": "2020-08-27T08:50:40Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/UserPrincipal.java", "diffHunk": "@@ -7,7 +7,7 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.controller.server.rpc.auth;\n+package io.pravega.controller.server.security.auth;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMzA4OQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkxMjA5OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowOToxMlrOHFfs3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozOToxN1rOHIGQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDMxNw==", "bodyText": "so legacy pattern here does not have the \"domain\". and we do not have .* there. right?\nso in the new pattern, why do we allow for pravega:://scope:* at all if this is the new pattern and we want \".*\"", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475524317", "createdAt": "2020-08-24T11:09:12Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An entry of an {@link AccessControlList}.\n+ */\n+class AccessControlEntry {\n+    private static final Pattern PATTERN_STAR_NOT_PRECEDED_BY_DOT = Pattern.compile(\"(?!=.)\\\\*\");\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final String resourcePattern;\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final AuthHandler.Permissions permissions;\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions) {\n+        this(aceResource, permissions, false);\n+    }\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions, boolean isLegacyFormat) {\n+        // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+        // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+        this.resourcePattern = isLegacyFormat ?  aceResource :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MzE1Mg==", "bodyText": "I added support for * in lieu of the regex .* for usability. Admins/operators may find it easier to remember to use wildcards without the preceding dot. Both'd work exactly the same way as we replace * with .*  if it is not preceded by the dot.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478253152", "createdAt": "2020-08-27T08:39:17Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An entry of an {@link AccessControlList}.\n+ */\n+class AccessControlEntry {\n+    private static final Pattern PATTERN_STAR_NOT_PRECEDED_BY_DOT = Pattern.compile(\"(?!=.)\\\\*\");\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final String resourcePattern;\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final AuthHandler.Permissions permissions;\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions) {\n+        this(aceResource, permissions, false);\n+    }\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions, boolean isLegacyFormat) {\n+        // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+        // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+        this.resourcePattern = isLegacyFormat ?  aceResource :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDMxNw=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkxNTc0OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxMDoyN1rOHFfvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoxMzo0OFrOHLoYnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDg4Ng==", "bodyText": "in which situations can \"ace\" split not be of length 2? and is that an illegal argument or is ace = null legit if the number of tokens in it are 3 or 1?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475524886", "createdAt": "2020-08-24T11:10:27Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An entry of an {@link AccessControlList}.\n+ */\n+class AccessControlEntry {\n+    private static final Pattern PATTERN_STAR_NOT_PRECEDED_BY_DOT = Pattern.compile(\"(?!=.)\\\\*\");\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final String resourcePattern;\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final AuthHandler.Permissions permissions;\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions) {\n+        this(aceResource, permissions, false);\n+    }\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions, boolean isLegacyFormat) {\n+        // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+        // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+        this.resourcePattern = isLegacyFormat ?  aceResource :\n+                PATTERN_STAR_NOT_PRECEDED_BY_DOT.matcher(aceResource).replaceAll(\".*\");\n+        this.permissions = permissions;\n+    }\n+\n+    static AccessControlEntry fromString(String ace) {\n+        String[] splits = null;\n+        if (Strings.isNullOrEmpty(ace) || (splits = ace.split(\",\")).length != 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3MzI5Nw==", "bodyText": "Since ACEs are specified manually via the Password Auth Handler input file, they could be ill-formed.\nA couple of examples of the split being of a length != 2 are as follows:\n\nprn::/ (No comma - permission missing, splits = 1)\n,,READ  (3 splits)", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478173297", "createdAt": "2020-08-27T06:21:27Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An entry of an {@link AccessControlList}.\n+ */\n+class AccessControlEntry {\n+    private static final Pattern PATTERN_STAR_NOT_PRECEDED_BY_DOT = Pattern.compile(\"(?!=.)\\\\*\");\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final String resourcePattern;\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final AuthHandler.Permissions permissions;\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions) {\n+        this(aceResource, permissions, false);\n+    }\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions, boolean isLegacyFormat) {\n+        // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+        // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+        this.resourcePattern = isLegacyFormat ?  aceResource :\n+                PATTERN_STAR_NOT_PRECEDED_BY_DOT.matcher(aceResource).replaceAll(\".*\");\n+        this.permissions = permissions;\n+    }\n+\n+    static AccessControlEntry fromString(String ace) {\n+        String[] splits = null;\n+        if (Strings.isNullOrEmpty(ace) || (splits = ace.split(\",\")).length != 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDg4Ng=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5ODAxOQ==", "bodyText": "A minor point, but shouldn't it be an exception rather returning null? We expect a valid string, and if the string is not valid, then I'd say it is an exception.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r481898019", "createdAt": "2020-09-02T08:44:56Z", "author": {"login": "fpj"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An entry of an {@link AccessControlList}.\n+ */\n+class AccessControlEntry {\n+    private static final Pattern PATTERN_STAR_NOT_PRECEDED_BY_DOT = Pattern.compile(\"(?!=.)\\\\*\");\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final String resourcePattern;\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final AuthHandler.Permissions permissions;\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions) {\n+        this(aceResource, permissions, false);\n+    }\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions, boolean isLegacyFormat) {\n+        // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+        // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+        this.resourcePattern = isLegacyFormat ?  aceResource :\n+                PATTERN_STAR_NOT_PRECEDED_BY_DOT.matcher(aceResource).replaceAll(\".*\");\n+        this.permissions = permissions;\n+    }\n+\n+    static AccessControlEntry fromString(String ace) {\n+        String[] splits = null;\n+        if (Strings.isNullOrEmpty(ace) || (splits = ace.split(\",\")).length != 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDg4Ng=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1ODA0NA==", "bodyText": "@fpj Returning null here makes the calling code in the PasswordAuthhandler much simpler, which is why I took this approach here. This contract of this method is that it returns a non-null AccessControlEntry object for valid strings and null for invalid strings.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r481958044", "createdAt": "2020-09-02T10:13:48Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AccessControlEntry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An entry of an {@link AccessControlList}.\n+ */\n+class AccessControlEntry {\n+    private static final Pattern PATTERN_STAR_NOT_PRECEDED_BY_DOT = Pattern.compile(\"(?!=.)\\\\*\");\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final String resourcePattern;\n+\n+    @Getter(AccessLevel.PACKAGE)\n+    private final AuthHandler.Permissions permissions;\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions) {\n+        this(aceResource, permissions, false);\n+    }\n+\n+    @VisibleForTesting\n+    AccessControlEntry(@NonNull String aceResource, @NonNull AuthHandler.Permissions permissions, boolean isLegacyFormat) {\n+        // Replaces any `*` with `.*`, if it's not already preceded by `.`, for regex processing.\n+        // So, `pravega:://*` becomes `pravega:://.*` and `pravega:://scope:*` becomes `pravega:://scope:.*`\n+        this.resourcePattern = isLegacyFormat ?  aceResource :\n+                PATTERN_STAR_NOT_PRECEDED_BY_DOT.matcher(aceResource).replaceAll(\".*\");\n+        this.permissions = permissions;\n+    }\n+\n+    static AccessControlEntry fromString(String ace) {\n+        String[] splits = null;\n+        if (Strings.isNullOrEmpty(ace) || (splits = ace.split(\",\")).length != 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDg4Ng=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkyMjM1OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxMjozOVrOHFfzKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzoyMDoyMlrOHPhdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTkzMA==", "bodyText": "is it possible that some ACLs are defined in legacy format while others are in new format? or is it expected to be consistent for all ACLs?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475525930", "createdAt": "2020-08-24T11:12:39Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+\n+/**\n+ * Authorizes resources based on supplied ACLs.\n+ */\n+abstract class AclAuthorizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0OTgzNQ==", "bodyText": "As per current implementation, all ACLs must be specified in the new format. Any ACLs specified in legacy format won't work. There is another discussion on this, fyi.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478249835", "createdAt": "2020-08-27T08:33:38Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+\n+/**\n+ * Authorizes resources based on supplied ACLs.\n+ */\n+abstract class AclAuthorizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTkzMA=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxMDc3Mg==", "bodyText": "So while upgrading from 0.8 to 0.9 admins will need to rewrite their acls in the new format before doing the upgrade.. right?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r482710772", "createdAt": "2020-09-03T05:21:54Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+\n+/**\n+ * Authorizes resources based on supplied ACLs.\n+ */\n+abstract class AclAuthorizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTkzMA=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAzODkxMA==", "bodyText": "Yes, that is right.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r486038910", "createdAt": "2020-09-10T03:20:22Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+\n+/**\n+ * Authorizes resources based on supplied ACLs.\n+ */\n+abstract class AclAuthorizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTkzMA=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzAxNzQ1OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTo0Mjo0N1rOHFgr3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToxMzo0MlrOHIHhUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MDQ0NQ==", "bodyText": "what is the reason to use ::// instead of :// ?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475540445", "createdAt": "2020-08-24T11:42:47Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MDc1OA==", "bodyText": "and should you simply split it by \":://\" ?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475540758", "createdAt": "2020-08-24T11:43:32Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MDQ0NQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3Mzg3NA==", "bodyText": "Actually, the resource looks like this: prn::/scope:MarketData/stream:Prices. There was an inaccurate comment elsewhere that might have misled you about the format.\nMore examples can be found here.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478273874", "createdAt": "2020-08-27T09:13:42Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MDQ0NQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzAyMTkxOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTo0NDoyMlrOHFguhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxMDo1OVrOHIJmfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MTEyNQ==", "bodyText": "when we are using the new authorization scheme, then should we even allow for resource domain to be unspecified?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475541125", "createdAt": "2020-08-24T11:44:22Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");\n+        if (indexOfPartsSeparator > 0) {\n+            resourceDomain = resource.substring(0, indexOfPartsSeparator);\n+        } else {\n+            resourceDomain = \"prn\"; // default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NTcyMw==", "bodyText": "Yes, the code above assumes the default prn domain. When this code is used as-is in other domains like prn.schema-registry, the domain part will automatically be mandatory.\nI have two opposite opinions about this.\n\nOn one hand, allowing for this flexibility could make life a tad easier for the admins, improving usability.\nOn the other hand, it's slightly simpler if admins always had to specify it and they didn't have to make an explicit choice (to specify the domain or not).\n\nIn this case, I've favored the former. What do you think?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478265723", "createdAt": "2020-08-27T08:59:43Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");\n+        if (indexOfPartsSeparator > 0) {\n+            resourceDomain = resource.substring(0, indexOfPartsSeparator);\n+        } else {\n+            resourceDomain = \"prn\"; // default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MTEyNQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTEzNg==", "bodyText": "On second thought, we don't actually need to add a default resource domain. This is not the ACE, where domain might be missing. This is really the resource string which is in our control and should always have the domain. I will fix it.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478275136", "createdAt": "2020-08-27T09:15:49Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");\n+        if (indexOfPartsSeparator > 0) {\n+            resourceDomain = resource.substring(0, indexOfPartsSeparator);\n+        } else {\n+            resourceDomain = \"prn\"; // default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MTEyNQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwNzk2NA==", "bodyText": "I've now pushed the modified code that assumes domain is always present in the resource string used for authorization.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478307964", "createdAt": "2020-08-27T10:10:59Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");\n+        if (indexOfPartsSeparator > 0) {\n+            resourceDomain = resource.substring(0, indexOfPartsSeparator);\n+        } else {\n+            resourceDomain = \"prn\"; // default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MTEyNQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzAyMzMyOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTo0NDo1MVrOHFgvcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxMzowN1rOHIJqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MTM2MQ==", "bodyText": "nit: two nested if conditions. can it be simplified?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475541361", "createdAt": "2020-08-24T11:44:51Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");\n+        if (indexOfPartsSeparator > 0) {\n+            resourceDomain = resource.substring(0, indexOfPartsSeparator);\n+        } else {\n+            resourceDomain = \"prn\"; // default\n+        }\n+\n+        for (AccessControlEntry accessControlEntry : accessControlList.getEntries()) {\n+            // You could have a null ACE in the ACL if you had a malformed entry such as `prn::/scope:readresource`\n+            // having no permissions set.\n+            if (accessControlEntry != null && accessControlEntry.resourceStartsWith(resourceDomain)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwOTAzMw==", "bodyText": "Hmm... can't think of a simpler means right now. Do you have an idea?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478309033", "createdAt": "2020-08-27T10:13:07Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {\n+\n+    @Override\n+    public AuthHandler.Permissions authorize(@NonNull AccessControlList accessControlList, @NonNull String resource) {\n+        AuthHandler.Permissions result = AuthHandler.Permissions.NONE;\n+\n+        String resourceDomain;\n+        int indexOfPartsSeparator = resource.indexOf(\"::\");\n+        if (indexOfPartsSeparator > 0) {\n+            resourceDomain = resource.substring(0, indexOfPartsSeparator);\n+        } else {\n+            resourceDomain = \"prn\"; // default\n+        }\n+\n+        for (AccessControlEntry accessControlEntry : accessControlList.getEntries()) {\n+            // You could have a null ACE in the ACL if you had a malformed entry such as `prn::/scope:readresource`\n+            // having no permissions set.\n+            if (accessControlEntry != null && accessControlEntry.resourceStartsWith(resourceDomain)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MTM2MQ=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzAyODEyOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTo0NjoyOVrOHFgyRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyODozN1rOHIF3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MjA4Ng==", "bodyText": "Should we move this class to a common module like \"auth\" such that schema registry and other services can leverage the auth module", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r475542086", "createdAt": "2020-08-24T11:46:29Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0NjgwMA==", "bodyText": "As discussed, I've created a separate issue #5118 for the reorganization of the security-related code in general.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r478246800", "createdAt": "2020-08-27T08:28:37Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizerImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+class AclAuthorizerImpl extends AclAuthorizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MjA4Ng=="}, "originalCommit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzAxNDg3OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODozMToxM1rOHLj-Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDowMDowNFrOHSph5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTcwMg==", "bodyText": "I suppose we are deprecating the previous format, how are we going to indicate that it is deprecated? Via documentation? We can certainly annotate this class, but that's not visible to users.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r481885702", "createdAt": "2020-09-02T08:31:13Z", "author": {"login": "fpj"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyNjg0Nw==", "bodyText": "Actually, we are removing support for the old format altogether. This class is there only so that it is easy to see what was the old format and compare it with the new format.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r481926847", "createdAt": "2020-09-02T09:19:25Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTcwMg=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwODMyMg==", "bodyText": "in that case, if this class is not being used at all, should this even be included in the code? or should we simply remove it entirely and cover the differences in the PR description (and its already present in PDP)", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r482708322", "createdAt": "2020-09-03T05:12:46Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTcwMg=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc3MjM5MQ==", "bodyText": "I wanted to keep it at least for some time so that its easier to inspect the differences and compare the two at development time. I shall remove them once this change has been well tested through the normal course of testing.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r486772391", "createdAt": "2020-09-11T04:52:56Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTcwMg=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc3NDQwMg==", "bodyText": "In the latest comment that I have just pushed, I've added a deprecation note in the class JavaDoc. (I couldn't use the deprecation annotation, as the current build configuration fails build if classes decorated with that annotation are used.)\nAlso, these classes are used internally for representing resources and authorization and aren't meant to be used by external parties.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r486774402", "createdAt": "2020-09-11T05:00:52Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTcwMg=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NjQzNw==", "bodyText": "I'm not sure this makes sense. If we need to revert or anything, the we can go back to a previous version, that's a reason for using version control. If this code is only being kept for reference, then let's please remove it. If it is being used anywhere, then keep it.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r489296437", "createdAt": "2020-09-16T09:27:23Z", "author": {"login": "fpj"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTcwMg=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNjgzNg==", "bodyText": "Ok. I have removed the two classes that show legacy logic in the latest commit that I just pushed.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r489316836", "createdAt": "2020-09-16T10:00:04Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/LegacyAuthorizationResourceImpl.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import io.pravega.common.Exceptions;\n+\n+/**\n+ * A legacy implementation that constructs resource strings in the old format.\n+ */\n+public final class LegacyAuthorizationResourceImpl implements AuthorizationResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTcwMg=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODA1MDc3OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTowODowOFrOHMWGoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNToxMVrOHQZqgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzEwNA==", "bodyText": "nit: the comment \"Returns\" for an interface seems odd. unless its a functional interface, which it is not.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r482707104", "createdAt": "2020-09-03T05:08:08Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResource.java", "diffHunk": "@@ -7,12 +7,10 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.controller.server;\n-\n-import io.pravega.common.Exceptions;\n+package io.pravega.controller.server.security.auth;\n \n /**\n- * A utility class with methods for preparing string representations of auth-protected resources.\n+ * Returns string representations of auth-protected resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1OTc0NA==", "bodyText": "I've modified the comment as suggested.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r486959744", "createdAt": "2020-09-11T10:35:11Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResource.java", "diffHunk": "@@ -7,12 +7,10 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.controller.server;\n-\n-import io.pravega.common.Exceptions;\n+package io.pravega.controller.server.security.auth;\n \n /**\n- * A utility class with methods for preparing string representations of auth-protected resources.\n+ * Returns string representations of auth-protected resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzEwNA=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODA3ODQ4OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNToyNDowMFrOHMWXGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNTo0OFrOHQZrfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxMTMyMA==", "bodyText": "so if the code for legacy auth instance is only for comparison sake, should we even have a method to instantiate it?", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r482711320", "createdAt": "2020-09-03T05:24:00Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+\n+/**\n+ * Authorizes resources based on supplied ACLs.\n+ */\n+abstract class AclAuthorizer {\n+\n+    private final static AclAuthorizerImpl AUTHORIZER_FOR_NEW_FORMAT = new AclAuthorizerImpl();\n+    private final static LegacyAclAuthorizerImpl AUTHORIZER_FOR_LEGACY_FORMAT = new LegacyAclAuthorizerImpl();\n+\n+    /**\n+     * Returns a cached instance of the legacy implementation.\n+     *\n+     * @return an instance\n+     */\n+    static AclAuthorizer legacyAuthorizerInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1OTk5Nw==", "bodyText": "I've kept it so that the tests can instantiate it.", "url": "https://github.com/pravega/pravega/pull/5051#discussion_r486959997", "createdAt": "2020-09-11T10:35:48Z", "author": {"login": "ravisharda"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/handler/impl/AclAuthorizer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth.handler.impl;\n+\n+import io.pravega.auth.AuthHandler;\n+\n+/**\n+ * Authorizes resources based on supplied ACLs.\n+ */\n+abstract class AclAuthorizer {\n+\n+    private final static AclAuthorizerImpl AUTHORIZER_FOR_NEW_FORMAT = new AclAuthorizerImpl();\n+    private final static LegacyAclAuthorizerImpl AUTHORIZER_FOR_LEGACY_FORMAT = new LegacyAclAuthorizerImpl();\n+\n+    /**\n+     * Returns a cached instance of the legacy implementation.\n+     *\n+     * @return an instance\n+     */\n+    static AclAuthorizer legacyAuthorizerInstance() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxMTMyMA=="}, "originalCommit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4858, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}