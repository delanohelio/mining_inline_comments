{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMjEwMzE5", "number": 4950, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNDo0MFrOEQN_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjowOTo1OFrOEQ5yHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQxODE1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/admin/impl/StreamManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNDo0MFrOG0QKDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNDo0MFrOG0QKDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0Mzg1Mw==", "bodyText": "asyncIterator.asIterator() will do the same, but you won't need to explicitly use BlockingAsyncIterator. This will help in case we want to change the implementation later.", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457443853", "createdAt": "2020-07-20T14:34:40Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/admin/impl/StreamManagerImpl.java", "diffHunk": "@@ -107,13 +107,26 @@ public boolean deleteStream(String scopeName, String streamName) {\n         return  Futures.getThrowingException(controller.deleteStream(scopeName, streamName));\n     }\n \n+    @Override\n+    public Iterator<String> listScopes() {\n+        log.info(\"Listing scopes\");\n+        AsyncIterator<String> asyncIterator = controller.listScopes();\n+        return new BlockingAsyncIterator<>(asyncIterator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ0MTYxOnYy", "diffSide": "RIGHT", "path": "client/src/test/java/io/pravega/client/stream/mock/MockStreamManager.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozODoxNFrOG0QXuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyNTo0OFrOG0kwgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzM1Mw==", "bodyText": "Why not use asyncIterator.asIterator?\nYour implementation below is incorrect. Both hasNext and next will invoke load which will cause the wrapped iterator to advance. This means you will be skipping over iterator items as you iterate through. Also next is supposed to throw if hasNext() == false", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457447353", "createdAt": "2020-07-20T14:38:14Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/test/java/io/pravega/client/stream/mock/MockStreamManager.java", "diffHunk": "@@ -181,6 +193,30 @@ public boolean deleteStream(String scopeName, String toDelete) {\n         return Futures.getAndHandleExceptions(controller.deleteStream(scopeName, toDelete), RuntimeException::new);\n     }\n \n+    @Override\n+    public Iterator<String> listScopes() {\n+        AsyncIterator<String> asyncIterator = controller.listScopes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNDYyNQ==", "bodyText": "yes, but the load doesnt call asynciterator.getNext unless it has exhausted all existing entries.\nso wrapper iterator will only advance when its getNext gets called and if it returns items then hasNext returns true, false otherwise.", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457524625", "createdAt": "2020-07-20T16:05:02Z", "author": {"login": "shiveshr"}, "path": "client/src/test/java/io/pravega/client/stream/mock/MockStreamManager.java", "diffHunk": "@@ -181,6 +193,30 @@ public boolean deleteStream(String scopeName, String toDelete) {\n         return Futures.getAndHandleExceptions(controller.deleteStream(scopeName, toDelete), RuntimeException::new);\n     }\n \n+    @Override\n+    public Iterator<String> listScopes() {\n+        AsyncIterator<String> asyncIterator = controller.listScopes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzM1Mw=="}, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNTE3NA==", "bodyText": "And next throws exception if you call next when hasNext may have written false.", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457525174", "createdAt": "2020-07-20T16:05:52Z", "author": {"login": "shiveshr"}, "path": "client/src/test/java/io/pravega/client/stream/mock/MockStreamManager.java", "diffHunk": "@@ -181,6 +193,30 @@ public boolean deleteStream(String scopeName, String toDelete) {\n         return Futures.getAndHandleExceptions(controller.deleteStream(scopeName, toDelete), RuntimeException::new);\n     }\n \n+    @Override\n+    public Iterator<String> listScopes() {\n+        AsyncIterator<String> asyncIterator = controller.listScopes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzM1Mw=="}, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2MTM4Ng==", "bodyText": "The point is that you are returning an Iterator object which does not conform to the Iterator contracts. If you want to implement a different behavior you will have to return something that does not implement java.util.Iterator.\nAs an example, consider what happens if someone invokes forEachRemaining on your Iterator. Check out the default implementation of that method - that is also the standard way of iterating through an iterator.", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457561386", "createdAt": "2020-07-20T17:04:47Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/test/java/io/pravega/client/stream/mock/MockStreamManager.java", "diffHunk": "@@ -181,6 +193,30 @@ public boolean deleteStream(String scopeName, String toDelete) {\n         return Futures.getAndHandleExceptions(controller.deleteStream(scopeName, toDelete), RuntimeException::new);\n     }\n \n+    @Override\n+    public Iterator<String> listScopes() {\n+        AsyncIterator<String> asyncIterator = controller.listScopes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzM1Mw=="}, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3OTc1NQ==", "bodyText": "i dont completely follow how the behaviour is different for BlockingAsyncIterator from the iterator contract.\nCan you please illustrate with an example.\nIt upholds following contracts (does not provide an implementation for remove method as that is unsupported for this iterator).\n\nif there are elements to iterate over, hasNext will return true.\nnext returns next element in the iteration \"without skipping over any element\".\n\nFollowing is the implementation for load method which is called from both hashNext and next which loads next and canHaveNext values into fields T next and boolean canHaveNext.\nthen hasNext simply returns canHaveNext and next returns next or throws if next is null (canHaveNext is false)\n    private void load() {\n        if (next == null && canHaveNext) {\n            next = asyncIterator.getNext().join();\n            if (next == null) {\n                canHaveNext = false;\n            }\n        }\n    }\n\nforEachRemaining would work correctly as it performs hasNext followed by next call in a loop.", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457779755", "createdAt": "2020-07-21T01:20:15Z", "author": {"login": "shiveshr"}, "path": "client/src/test/java/io/pravega/client/stream/mock/MockStreamManager.java", "diffHunk": "@@ -181,6 +193,30 @@ public boolean deleteStream(String scopeName, String toDelete) {\n         return Futures.getAndHandleExceptions(controller.deleteStream(scopeName, toDelete), RuntimeException::new);\n     }\n \n+    @Override\n+    public Iterator<String> listScopes() {\n+        AsyncIterator<String> asyncIterator = controller.listScopes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzM1Mw=="}, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MTM3OA==", "bodyText": "Oh. My Bad.\nI didnt realize that this mock class also has an implementation and you were referring to that..\ni was talking about BlockingAsyncIterator.\nyes, that implementation in the mock is definitely incorrect. and since it can be used in multiple tests in different ways, i will use BlockingAsyncIterator here too.\nthanks", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457781378", "createdAt": "2020-07-21T01:25:48Z", "author": {"login": "shiveshr"}, "path": "client/src/test/java/io/pravega/client/stream/mock/MockStreamManager.java", "diffHunk": "@@ -181,6 +193,30 @@ public boolean deleteStream(String scopeName, String toDelete) {\n         return Futures.getAndHandleExceptions(controller.deleteStream(scopeName, toDelete), RuntimeException::new);\n     }\n \n+    @Override\n+    public Iterator<String> listScopes() {\n+        AsyncIterator<String> asyncIterator = controller.listScopes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzM1Mw=="}, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ0OTY1OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/LocalController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozOTozMFrOG0QcZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozOTozMFrOG0QcZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0ODU1MQ==", "bodyText": "use Futures.exceptionallyExpecting to make this a one-liner.", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457448551", "createdAt": "2020-07-20T14:39:30Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/LocalController.java", "diffHunk": "@@ -68,6 +70,45 @@ public LocalController(ControllerService controller, boolean authorizationEnable\n         this.authorizationEnabled = authorizationEnabled;\n     }\n \n+    @Override\n+    public CompletableFuture<Boolean> checkScopeExists(String scopeName) {\n+        return this.controller.getScope(scopeName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ1MjE0OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/LocalController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozOTo1MFrOG0Qdww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozOTo1MFrOG0Qdww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0ODg5OQ==", "bodyText": "Futures.exceptionallyExpecting", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r457448899", "createdAt": "2020-07-20T14:39:50Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/LocalController.java", "diffHunk": "@@ -68,6 +70,45 @@ public LocalController(ControllerService controller, boolean authorizationEnable\n         this.authorizationEnabled = authorizationEnabled;\n     }\n \n+    @Override\n+    public CompletableFuture<Boolean> checkScopeExists(String scopeName) {\n+        return this.controller.getScope(scopeName)\n+                              .handle((r, e) -> {\n+                                  if (e != null) {\n+                                      if (Exceptions.unwrap(e) instanceof StoreException.DataNotFoundException) {\n+                                          return false;\n+                                      } else {\n+                                          throw new CompletionException(e);\n+                                      }\n+                                  }\n+                                  return true;\n+                              });\n+    }\n+\n+    @Override\n+    public AsyncIterator<String> listScopes() {\n+        final Function<String, CompletableFuture<Map.Entry<String, Collection<String>>>> function = token ->\n+                controller.listScopes(token, PAGE_LIMIT)\n+                          .thenApply(result -> new AbstractMap.SimpleEntry<>(result.getValue(), result.getKey()));\n+\n+        return new ContinuationTokenAsyncIterator<>(function, \"\");\n+    }\n+\n+    @Override\n+    public CompletableFuture<Boolean> checkStreamExists(String scopeName, String streamName) {\n+        return this.controller.getStream(scopeName, streamName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTUyMTM5OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/StreamMetadataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTozNTo0OVrOG1TYBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTozNTo0OVrOG1TYBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0NTE1Ng==", "bodyText": "should be scope", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r458545156", "createdAt": "2020-07-22T05:35:49Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/StreamMetadataStore.java", "diffHunk": "@@ -217,6 +217,18 @@\n      */\n     CompletableFuture<List<String>> listScopes();\n \n+    /**\n+     * List scopes with pagination. This api continues listing scopes from the supplied continuation token\n+     * and returns a count limited list of scopes and a new continuation token.\n+     *\n+     * @param continuationToken continuation token\n+     * @param limit limit on number of streams to return.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7723021acab9980f35f2d474b89e7261972596c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTUyMzQ3OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/StreamMetadataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTozNjo0OVrOG1TZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTozNjo0OVrOG1TZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0NTQ3Mw==", "bodyText": "same here...", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r458545473", "createdAt": "2020-07-22T05:36:49Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/StreamMetadataStore.java", "diffHunk": "@@ -217,6 +217,18 @@\n      */\n     CompletableFuture<List<String>> listScopes();\n \n+    /**\n+     * List scopes with pagination. This api continues listing scopes from the supplied continuation token\n+     * and returns a count limited list of scopes and a new continuation token.\n+     *\n+     * @param continuationToken continuation token\n+     * @param limit limit on number of streams to return.\n+     * @param executor executor\n+     * @return A pair of list of streams in scope with the continuation token. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7723021acab9980f35f2d474b89e7261972596c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTU5Mzg5OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjowOTo1OFrOG1UDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNTowMlrOG1UZHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NjIwNw==", "bodyText": "Can the auth filter out some scopes, causing us to return less number of scopes than limit?", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r458556207", "createdAt": "2020-07-22T06:09:58Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -532,6 +532,126 @@ public void createScope(ScopeInfo request, StreamObserver<CreateScopeStatus> res\n                 responseObserver, requestTag);\n     }\n \n+    @Override\n+    public void listScopes(Controller.ScopesRequest request, StreamObserver<Controller.ScopesResponse> responseObserver) {\n+        RequestTag requestTag = requestTracker.initializeAndTrackRequestTag(requestIdGenerator.get(),\n+                \"listScopes\");\n+        log.info(requestTag.getRequestId(), \"listScope called.\");\n+\n+        final AuthContext ctx;\n+        if (this.grpcAuthHelper.isAuthEnabled()) {\n+            ctx = AuthContext.current();\n+        } else {\n+            ctx = null;\n+        }\n+\n+        Supplier<String> stringSupplier = () -> {\n+            String result = this.grpcAuthHelper.checkAuthorization(\n+                    AuthResourceRepresentation.ofScopes(),\n+                    AuthHandler.Permissions.READ,\n+                    ctx);\n+            log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n+                    AuthResourceRepresentation.ofScopes(), result);\n+            return result;\n+        };\n+        Function<String, CompletableFuture<Controller.ScopesResponse>> scopesFn = delegationToken -> controllerService\n+                .listScopes(request.getContinuationToken().getToken(), pageLimit)\n+                .thenApply(response -> {\n+                    log.debug(\"All scopes in scope with continuation token: {}\", response);\n+                    return Controller.ScopesResponse\n+                            .newBuilder().addAllScopes(response.getKey())\n+                            .setContinuationToken(Controller.ContinuationToken.newBuilder()\n+                                                                              .setToken(response.getValue()).build())\n+                            .build();\n+                });\n+        authenticateExecuteAndProcessResults(stringSupplier, scopesFn, responseObserver, requestTag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7723021acab9980f35f2d474b89e7261972596c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MTgyMw==", "bodyText": "We could, but i kept the authorization part here consistent with the equivalent api in the REST which requires users to have READ permission on \"/\" to be able to invoke list scopes.\nIf we want a different approach for authorization, we should do it consistently on both interfaces.\nI have created a separate issue for the same here:\n#4955", "url": "https://github.com/pravega/pravega/pull/4950#discussion_r458561823", "createdAt": "2020-07-22T06:25:02Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -532,6 +532,126 @@ public void createScope(ScopeInfo request, StreamObserver<CreateScopeStatus> res\n                 responseObserver, requestTag);\n     }\n \n+    @Override\n+    public void listScopes(Controller.ScopesRequest request, StreamObserver<Controller.ScopesResponse> responseObserver) {\n+        RequestTag requestTag = requestTracker.initializeAndTrackRequestTag(requestIdGenerator.get(),\n+                \"listScopes\");\n+        log.info(requestTag.getRequestId(), \"listScope called.\");\n+\n+        final AuthContext ctx;\n+        if (this.grpcAuthHelper.isAuthEnabled()) {\n+            ctx = AuthContext.current();\n+        } else {\n+            ctx = null;\n+        }\n+\n+        Supplier<String> stringSupplier = () -> {\n+            String result = this.grpcAuthHelper.checkAuthorization(\n+                    AuthResourceRepresentation.ofScopes(),\n+                    AuthHandler.Permissions.READ,\n+                    ctx);\n+            log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n+                    AuthResourceRepresentation.ofScopes(), result);\n+            return result;\n+        };\n+        Function<String, CompletableFuture<Controller.ScopesResponse>> scopesFn = delegationToken -> controllerService\n+                .listScopes(request.getContinuationToken().getToken(), pageLimit)\n+                .thenApply(response -> {\n+                    log.debug(\"All scopes in scope with continuation token: {}\", response);\n+                    return Controller.ScopesResponse\n+                            .newBuilder().addAllScopes(response.getKey())\n+                            .setContinuationToken(Controller.ContinuationToken.newBuilder()\n+                                                                              .setToken(response.getValue()).build())\n+                            .build();\n+                });\n+        authenticateExecuteAndProcessResults(stringSupplier, scopesFn, responseObserver, requestTag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NjIwNw=="}, "originalCommit": {"oid": "f7723021acab9980f35f2d474b89e7261972596c"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4796, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}