{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzY2NzA5", "number": 5346, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTo1Njo1OVrOE7H1_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NjozN1rOFDB-qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDI5OTUxOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTo1Njo1OVrOH2lgZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzowNTowMlrOH2osLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5OTY1NQ==", "bodyText": "Haven't we made these calls things async? Did we miss this class?", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r526999655", "createdAt": "2020-11-19T15:56:59Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -250,9 +250,14 @@ private long applyLatestSnapshot(MetadataTransaction txn, HashMap<String, Long>\n         for (epochToCheck = epoch - 1; epochToCheck >= 0; epochToCheck--) {\n             snapshotFile = getSystemJournalChunkName(containerId, epochToCheck, 0);\n             if (chunkStorage.exists(snapshotFile).get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8405883f9764382d7f5dee8e6153f5e9e5f24260"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1MTgyMQ==", "bodyText": "No we did not change it.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r527051821", "createdAt": "2020-11-19T17:05:02Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -250,9 +250,14 @@ private long applyLatestSnapshot(MetadataTransaction txn, HashMap<String, Long>\n         for (epochToCheck = epoch - 1; epochToCheck >= 0; epochToCheck--) {\n             snapshotFile = getSystemJournalChunkName(containerId, epochToCheck, 0);\n             if (chunkStorage.exists(snapshotFile).get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5OTY1NQ=="}, "originalCommit": {"oid": "8405883f9764382d7f5dee8e6153f5e9e5f24260"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDMxMTMzOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTo1OToyNlrOH2lnyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzowMjo0MFrOH2oi6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMTU0NA==", "bodyText": "Why do you put this condition here? Don't you have full control over your test? You use in-memory storage here, so this should always be supported.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r527001544", "createdAt": "2020-11-19T15:59:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -324,6 +333,35 @@ public void testSimpleBootstrapWithMultipleFailovers() throws Exception {\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n+    public void testSimpleBootstrapWithIncompleteSnapshot() throws Exception {\n+        val containerId = 42;\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        testSimpleBootstrapWithMultipleFailovers(containerId, chunkStorage, epoch -> {\n+            val snapShotFile = NameUtils.getSystemJournalFileName(containerId, epoch, 0);\n+            val size = 1;\n+            if (chunkStorage.supportsTruncation()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8405883f9764382d7f5dee8e6153f5e9e5f24260"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0OTQ0OQ==", "bodyText": "This code is run against all providers (in bindings project) - not just in memory.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r527049449", "createdAt": "2020-11-19T17:02:40Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -324,6 +333,35 @@ public void testSimpleBootstrapWithMultipleFailovers() throws Exception {\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n+    public void testSimpleBootstrapWithIncompleteSnapshot() throws Exception {\n+        val containerId = 42;\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        testSimpleBootstrapWithMultipleFailovers(containerId, chunkStorage, epoch -> {\n+            val snapShotFile = NameUtils.getSystemJournalFileName(containerId, epoch, 0);\n+            val size = 1;\n+            if (chunkStorage.supportsTruncation()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMTU0NA=="}, "originalCommit": {"oid": "8405883f9764382d7f5dee8e6153f5e9e5f24260"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDk0NzgxOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjoyNjozMFrOH-329w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1MTo0NVrOICe4bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4ODk1MQ==", "bodyText": "Can you do this with the Retry class (in common). We have various retry utilities that can help with your syntax here.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r535688951", "createdAt": "2020-12-03T22:26:30Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -229,10 +230,23 @@ public void commitRecords(Collection<SystemJournalRecord> records) throws ChunkS\n         }\n         // Persist\n         synchronized (lock) {\n-            writeToJournal(bytes);\n-            // Add a new log file if required.\n-            if (!chunkStorage.supportsAppend() || !config.isAppendEnabled()) {\n-                startNewJournalFile();\n+            boolean done = false;\n+            while (!done) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd50c2bd0fa633234104a3eda52390be4db66bf6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NjI1OA==", "bodyText": "I need to retry only if specific (wrapped) exception was thrown. I don't think Retry can do that.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r535776258", "createdAt": "2020-12-04T01:50:09Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -229,10 +230,23 @@ public void commitRecords(Collection<SystemJournalRecord> records) throws ChunkS\n         }\n         // Persist\n         synchronized (lock) {\n-            writeToJournal(bytes);\n-            // Add a new log file if required.\n-            if (!chunkStorage.supportsAppend() || !config.isAppendEnabled()) {\n-                startNewJournalFile();\n+            boolean done = false;\n+            while (!done) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4ODk1MQ=="}, "originalCommit": {"oid": "bd50c2bd0fa633234104a3eda52390be4db66bf6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NDAzMA==", "bodyText": ".retryWhen(ex -> Exceptions.unwrap(ex) instanceof xyz)", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539474030", "createdAt": "2020-12-09T16:51:45Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -229,10 +230,23 @@ public void commitRecords(Collection<SystemJournalRecord> records) throws ChunkS\n         }\n         // Persist\n         synchronized (lock) {\n-            writeToJournal(bytes);\n-            // Add a new log file if required.\n-            if (!chunkStorage.supportsAppend() || !config.isAppendEnabled()) {\n-                startNewJournalFile();\n+            boolean done = false;\n+            while (!done) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4ODk1MQ=="}, "originalCommit": {"oid": "bd50c2bd0fa633234104a3eda52390be4db66bf6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDk0OTYxOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjoyNzowMVrOH-338w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1MjoxM1rOICe57A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4OTIwMw==", "bodyText": "Why just ExecutionException? Can it be Exception, CompletionException? Exceptions.unwrap will handle all of those.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r535689203", "createdAt": "2020-12-03T22:27:01Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -229,10 +230,23 @@ public void commitRecords(Collection<SystemJournalRecord> records) throws ChunkS\n         }\n         // Persist\n         synchronized (lock) {\n-            writeToJournal(bytes);\n-            // Add a new log file if required.\n-            if (!chunkStorage.supportsAppend() || !config.isAppendEnabled()) {\n-                startNewJournalFile();\n+            boolean done = false;\n+            while (!done) {\n+                try {\n+                    writeToJournal(bytes);\n+                    done = true;\n+                } catch (ExecutionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd50c2bd0fa633234104a3eda52390be4db66bf6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NzAzMA==", "bodyText": "I want to catch and handle a very specific exception InvalidOffsetException wrapped in ExecutionException.\nOther exception should bubble up and loop should not be retried here.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r535777030", "createdAt": "2020-12-04T01:52:10Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -229,10 +230,23 @@ public void commitRecords(Collection<SystemJournalRecord> records) throws ChunkS\n         }\n         // Persist\n         synchronized (lock) {\n-            writeToJournal(bytes);\n-            // Add a new log file if required.\n-            if (!chunkStorage.supportsAppend() || !config.isAppendEnabled()) {\n-                startNewJournalFile();\n+            boolean done = false;\n+            while (!done) {\n+                try {\n+                    writeToJournal(bytes);\n+                    done = true;\n+                } catch (ExecutionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4OTIwMw=="}, "originalCommit": {"oid": "bd50c2bd0fa633234104a3eda52390be4db66bf6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NDQxMg==", "bodyText": "What if that exception is wrapped in CompletionException?", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539474412", "createdAt": "2020-12-09T16:52:13Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/SystemJournal.java", "diffHunk": "@@ -229,10 +230,23 @@ public void commitRecords(Collection<SystemJournalRecord> records) throws ChunkS\n         }\n         // Persist\n         synchronized (lock) {\n-            writeToJournal(bytes);\n-            // Add a new log file if required.\n-            if (!chunkStorage.supportsAppend() || !config.isAppendEnabled()) {\n-                startNewJournalFile();\n+            boolean done = false;\n+            while (!done) {\n+                try {\n+                    writeToJournal(bytes);\n+                    done = true;\n+                } catch (ExecutionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4OTIwMw=="}, "originalCommit": {"oid": "bd50c2bd0fa633234104a3eda52390be4db66bf6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIwNzI1OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1MzoyMFrOICe9SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo1MDoxNVrOICtHgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NTI3Mg==", "bodyText": "Just like in the other PR, please add cleanup methods to this class.", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539475272", "createdAt": "2020-12-09T16:53:20Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java", "diffHunk": "@@ -719,6 +719,38 @@ public void testWrite() throws Exception {\n         checkDataRead(testSegmentName, testContext, 0, total);\n     }\n \n+\n+    /**\n+     * Test Write after repeated failure.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testWriteAfterWriteFailure() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNzI2Ng==", "bodyText": "added", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539707266", "createdAt": "2020-12-09T22:50:15Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java", "diffHunk": "@@ -719,6 +719,38 @@ public void testWrite() throws Exception {\n         checkDataRead(testSegmentName, testContext, 0, total);\n     }\n \n+\n+    /**\n+     * Test Write after repeated failure.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testWriteAfterWriteFailure() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NTI3Mg=="}, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIwODY3OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1MzozN1rOICe-JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1MzozN1rOICe-JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NTQ5Mw==", "bodyText": "Cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539475493", "createdAt": "2020-12-09T16:53:37Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -257,6 +258,79 @@ public void testSimpleBootstrapWithTwoFailovers() throws Exception {\n         Assert.assertEquals(\"Hello World\", new String(out));\n     }\n \n+    /**\n+     * Tests a scenario when journal chunks may be partially written during failure.\n+     *\n+     * @throws Exception Throws exception in case of any error.\n+     */\n+    @Test\n+    public void testSimpleBootstrapWithPartialDataWrite() throws Exception {\n+        ChunkStorage chunkStorage = getChunkStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIxNDQxOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NDo0NFrOICfBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NDo0NFrOICfBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NjM2Mg==", "bodyText": "Cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539476362", "createdAt": "2020-12-09T16:54:44Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -257,6 +258,79 @@ public void testSimpleBootstrapWithTwoFailovers() throws Exception {\n         Assert.assertEquals(\"Hello World\", new String(out));\n     }\n \n+    /**\n+     * Tests a scenario when journal chunks may be partially written during failure.\n+     *\n+     * @throws Exception Throws exception in case of any error.\n+     */\n+    @Test\n+    public void testSimpleBootstrapWithPartialDataWrite() throws Exception {\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        if (!chunkStorage.supportsAppend()) {\n+            return;\n+        }\n+\n+        ChunkMetadataStore metadataStore = getMetadataStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIxNTA0OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NDo1MFrOICfB5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NDo1MFrOICfB5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NjQ1NA==", "bodyText": "Cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539476454", "createdAt": "2020-12-09T16:54:50Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -257,6 +258,79 @@ public void testSimpleBootstrapWithTwoFailovers() throws Exception {\n         Assert.assertEquals(\"Hello World\", new String(out));\n     }\n \n+    /**\n+     * Tests a scenario when journal chunks may be partially written during failure.\n+     *\n+     * @throws Exception Throws exception in case of any error.\n+     */\n+    @Test\n+    public void testSimpleBootstrapWithPartialDataWrite() throws Exception {\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        if (!chunkStorage.supportsAppend()) {\n+            return;\n+        }\n+\n+        ChunkMetadataStore metadataStore = getMetadataStore();\n+        ChunkMetadataStore metadataStoreAfterCrash = getMetadataStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIxNjUwOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NTowN1rOICfCxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NTowN1rOICfCxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NjY3OQ==", "bodyText": "Cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539476679", "createdAt": "2020-12-09T16:55:07Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -257,6 +258,79 @@ public void testSimpleBootstrapWithTwoFailovers() throws Exception {\n         Assert.assertEquals(\"Hello World\", new String(out));\n     }\n \n+    /**\n+     * Tests a scenario when journal chunks may be partially written during failure.\n+     *\n+     * @throws Exception Throws exception in case of any error.\n+     */\n+    @Test\n+    public void testSimpleBootstrapWithPartialDataWrite() throws Exception {\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        if (!chunkStorage.supportsAppend()) {\n+            return;\n+        }\n+\n+        ChunkMetadataStore metadataStore = getMetadataStore();\n+        ChunkMetadataStore metadataStoreAfterCrash = getMetadataStore();\n+        int containerId = 42;\n+        String systemSegmentName = SystemJournal.getChunkStorageSystemSegments(containerId)[0];\n+        long epoch = 1;\n+        val policy = new SegmentRollingPolicy(4);\n+        val config = ChunkedSegmentStorageConfig.DEFAULT_CONFIG.toBuilder().defaultRollingPolicy(policy).build();\n+\n+        long offset = 0;\n+\n+        // Epoch 1\n+        ChunkedSegmentStorage segmentStorage1 = new ChunkedSegmentStorage(containerId, chunkStorage, metadataStore, executorService(), config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIxODI5OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NToyOFrOICfD0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NToyOFrOICfD0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3Njk0NQ==", "bodyText": "cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539476945", "createdAt": "2020-12-09T16:55:28Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -257,6 +258,79 @@ public void testSimpleBootstrapWithTwoFailovers() throws Exception {\n         Assert.assertEquals(\"Hello World\", new String(out));\n     }\n \n+    /**\n+     * Tests a scenario when journal chunks may be partially written during failure.\n+     *\n+     * @throws Exception Throws exception in case of any error.\n+     */\n+    @Test\n+    public void testSimpleBootstrapWithPartialDataWrite() throws Exception {\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        if (!chunkStorage.supportsAppend()) {\n+            return;\n+        }\n+\n+        ChunkMetadataStore metadataStore = getMetadataStore();\n+        ChunkMetadataStore metadataStoreAfterCrash = getMetadataStore();\n+        int containerId = 42;\n+        String systemSegmentName = SystemJournal.getChunkStorageSystemSegments(containerId)[0];\n+        long epoch = 1;\n+        val policy = new SegmentRollingPolicy(4);\n+        val config = ChunkedSegmentStorageConfig.DEFAULT_CONFIG.toBuilder().defaultRollingPolicy(policy).build();\n+\n+        long offset = 0;\n+\n+        // Epoch 1\n+        ChunkedSegmentStorage segmentStorage1 = new ChunkedSegmentStorage(containerId, chunkStorage, metadataStore, executorService(), config);\n+\n+        segmentStorage1.initialize(epoch);\n+\n+        // Bootstrap\n+        segmentStorage1.bootstrap().join();\n+        checkSystemSegmentsLayout(segmentStorage1);\n+\n+        // Simulate some writes to system segment, this should cause some new chunks being added.\n+        val h = segmentStorage1.openWrite(systemSegmentName).join();\n+        val b1 = \"Hello\".getBytes();\n+        segmentStorage1.write(h, offset, new ByteArrayInputStream(b1), b1.length, null).join();\n+        offset += b1.length;\n+\n+        // Inject a fault by adding some garbage at the end\n+        checkSystemSegmentsLayout(segmentStorage1);\n+        val chunkFileName = NameUtils.getSystemJournalFileName(segmentStorage1.getSystemJournal().getContainerId(),\n+                segmentStorage1.getSystemJournal().getEpoch(),\n+                segmentStorage1.getSystemJournal().getCurrentFileIndex());\n+        val chunkInfo = chunkStorage.getInfo(chunkFileName);\n+        chunkStorage.write(ChunkHandle.writeHandle(chunkFileName), chunkInfo.get().getLength(), 1, new ByteArrayInputStream(new byte[1])).get();\n+\n+        // This next write will encounter partially written chunk and is expected to start a new chunk.\n+        val b2 = \" World\".getBytes();\n+        segmentStorage1.write(h, offset, new ByteArrayInputStream(b2), b2.length, null).join();\n+        offset += b2.length;\n+\n+        checkSystemSegmentsLayout(segmentStorage1);\n+\n+        // Step 2\n+        // Start container with epoch 2\n+        epoch++;\n+\n+        ChunkedSegmentStorage segmentStorage2 = new ChunkedSegmentStorage(containerId, chunkStorage, metadataStoreAfterCrash, executorService(), config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIxOTM1OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NTo0MFrOICfEeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NTo0MFrOICfEeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NzExMg==", "bodyText": "cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539477112", "createdAt": "2020-12-09T16:55:40Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -267,9 +341,12 @@ public void testSimpleBootstrapWithTwoFailovers() throws Exception {\n      */\n     @Test\n     public void testSimpleBootstrapWithMultipleFailovers() throws Exception {\n+        val containerId = 42;\n         ChunkStorage chunkStorage = getChunkStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIyMDYzOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NTo1NVrOICfFRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NTo1NVrOICfFRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NzMxNw==", "bodyText": "cleanup to all of these", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539477317", "createdAt": "2020-12-09T16:55:55Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -305,7 +382,12 @@ public void testSimpleBootstrapWithMultipleFailovers() throws Exception {\n             oldHandle = h;\n         }\n \n+        if (null != faultInjection) {\n+            faultInjection.accept(epoch);\n+        }\n+\n         epoch++;\n+\n         ChunkMetadataStore metadataStoreFinal = getMetadataStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIyMTA5OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NjowMVrOICfFkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NjowMVrOICfFkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NzM5Mw==", "bodyText": "cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539477393", "createdAt": "2020-12-09T16:56:01Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -324,6 +406,35 @@ public void testSimpleBootstrapWithMultipleFailovers() throws Exception {\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n+    public void testSimpleBootstrapWithIncompleteSnapshot() throws Exception {\n+        val containerId = 42;\n+        ChunkStorage chunkStorage = getChunkStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIyMzc2OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NjozMVrOICfHKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NjozMVrOICfHKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NzgwMw==", "bodyText": "Are you cleaning up this file anywhere? Leaving files behind is also a leak", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539477803", "createdAt": "2020-12-09T16:56:31Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -324,6 +406,35 @@ public void testSimpleBootstrapWithMultipleFailovers() throws Exception {\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n+    public void testSimpleBootstrapWithIncompleteSnapshot() throws Exception {\n+        val containerId = 42;\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        testSimpleBootstrapWithMultipleFailovers(containerId, chunkStorage, epoch -> {\n+            val snapShotFile = NameUtils.getSystemJournalFileName(containerId, epoch, 0);\n+            val size = 1;\n+            if (chunkStorage.supportsTruncation()) {\n+                chunkStorage.truncate(ChunkHandle.writeHandle(snapShotFile), size).join();\n+            } else {\n+                val bytes = new byte[size];\n+                chunkStorage.read(ChunkHandle.readHandle(snapShotFile), 0, size, bytes, 0).join();\n+                chunkStorage.delete(ChunkHandle.writeHandle(snapShotFile)).join();\n+                val h = chunkStorage.create(snapShotFile).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIyNDcyOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NjozN1rOICfHnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1NjozN1rOICfHnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NzkxNg==", "bodyText": "cleanup", "url": "https://github.com/pravega/pravega/pull/5346#discussion_r539477916", "createdAt": "2020-12-09T16:56:37Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/SystemJournalTests.java", "diffHunk": "@@ -324,6 +406,35 @@ public void testSimpleBootstrapWithMultipleFailovers() throws Exception {\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n+    public void testSimpleBootstrapWithIncompleteSnapshot() throws Exception {\n+        val containerId = 42;\n+        ChunkStorage chunkStorage = getChunkStorage();\n+        testSimpleBootstrapWithMultipleFailovers(containerId, chunkStorage, epoch -> {\n+            val snapShotFile = NameUtils.getSystemJournalFileName(containerId, epoch, 0);\n+            val size = 1;\n+            if (chunkStorage.supportsTruncation()) {\n+                chunkStorage.truncate(ChunkHandle.writeHandle(snapShotFile), size).join();\n+            } else {\n+                val bytes = new byte[size];\n+                chunkStorage.read(ChunkHandle.readHandle(snapShotFile), 0, size, bytes, 0).join();\n+                chunkStorage.delete(ChunkHandle.writeHandle(snapShotFile)).join();\n+                val h = chunkStorage.create(snapShotFile).join();\n+                chunkStorage.write(h, 0, size, new ByteArrayInputStream(bytes)).join();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void testSimpleBootstrapWithMissingSnapshot() throws Exception {\n+        val containerId = 42;\n+        ChunkStorage chunkStorage = getChunkStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcbd5fa0230a2392758e20804f08a210ea286d2"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4541, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}