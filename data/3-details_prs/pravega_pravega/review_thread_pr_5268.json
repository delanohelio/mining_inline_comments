{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTg1MTUw", "number": 5268, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODowODo1OFrOE0fqpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMzo0MlrOE08QdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDgwMjMwOnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/tables/TableStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODowODo1OFrOHsQHnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNToxODozMlrOHszn1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2MzQ4NA==", "bodyText": "Should we add back the createSegment(String segmentName, Duration timeout)  overload that creates normal segments?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516163484", "createdAt": "2020-11-02T18:08:58Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/tables/TableStore.java", "diffHunk": "@@ -65,38 +66,23 @@\n      */\n     int MAXIMUM_VALUE_LENGTH = 1024 * 1024 - MAXIMUM_KEY_LENGTH;\n \n-    /**\n-     * Creates a new Segment and marks it as a Table Segment. This will be a non-sorted Table Segment.\n-     * See {@link #createSegment(String, boolean, Duration)} (invoked with sorted:=false).\n-     * This segment may not be used for Streaming purposes (i.e., it cannot be used with {@link StreamSegmentStore}).\n-     *\n-     * @param segmentName The name of the Table Segment to create.\n-     * @param timeout     Timeout for the operation.\n-     * @return A CompletableFuture that, when completed normally, will indicate the operation completed. If the operation\n-     * failed, the future will be failed with the causing exception. Notable Exceptions:\n-     * <ul>\n-     * <li>{@link StreamSegmentExistsException} If the Segment does exist (whether as a Table Segment or Stream Segment).\n-     * </ul>\n-     */\n-    default CompletableFuture<Void> createSegment(String segmentName, Duration timeout) {\n-        return createSegment(segmentName, false, timeout);\n-    }\n-\n     /**\n      * Creates a new Segment and marks it as a Table Segment.\n      * This segment may not be used for Streaming purposes (i.e., it cannot be used with {@link StreamSegmentStore}).\n      *\n      * @param segmentName The name of the Table Segment to create.\n-     * @param sorted      EXPERIMENTAL. If true, the created Table Segment will be a Sorted Table Segment, otherwise it\n-     *                    will be a plain Hash Table. See {@link TableStore} Javadoc for difference between the two.\n+     * @param segmentType Type of Segment to Create. If not already specified, this will automatically set the\n+     *                    {@link  SegmentType#isTableSegment()} to true. If {@link  SegmentType#isSortedTableSegment()}\n+     *                    is true, this will create a Sorted Table Segment (EXPERIMENTAL), otherwise it will be a plain\n+     *                    Hash Table. See {@link TableStore} Javadoc for difference between the two.\n      * @param timeout     Timeout for the operation.\n      * @return A CompletableFuture that, when completed normally, will indicate the operation completed. If the operation\n      * failed, the future will be failed with the causing exception. Notable Exceptions:\n      * <ul>\n      * <li>{@link StreamSegmentExistsException} If the Segment does exist (whether as a Table Segment or Stream Segment).\n      * </ul>\n      */\n-    CompletableFuture<Void> createSegment(String segmentName, boolean sorted, Duration timeout);\n+    CompletableFuture<Void> createSegment(String segmentName, SegmentType segmentType, Duration timeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0NTE3NA==", "bodyText": "I thought about it. It would save some unit test churn. But the reason we had 2 overloads in the first place was because I was lazy to begin with and didn't want to update all unit tests.\nIMO, having 2 overloads is asking for even more overloads to be added in the future as we change things. SegmentType should encompass any type of segment that we would envision creating so I really did not want to have a \"default\" overload. Plus, what is \"normal\" anyway?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516745174", "createdAt": "2020-11-03T15:18:32Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/tables/TableStore.java", "diffHunk": "@@ -65,38 +66,23 @@\n      */\n     int MAXIMUM_VALUE_LENGTH = 1024 * 1024 - MAXIMUM_KEY_LENGTH;\n \n-    /**\n-     * Creates a new Segment and marks it as a Table Segment. This will be a non-sorted Table Segment.\n-     * See {@link #createSegment(String, boolean, Duration)} (invoked with sorted:=false).\n-     * This segment may not be used for Streaming purposes (i.e., it cannot be used with {@link StreamSegmentStore}).\n-     *\n-     * @param segmentName The name of the Table Segment to create.\n-     * @param timeout     Timeout for the operation.\n-     * @return A CompletableFuture that, when completed normally, will indicate the operation completed. If the operation\n-     * failed, the future will be failed with the causing exception. Notable Exceptions:\n-     * <ul>\n-     * <li>{@link StreamSegmentExistsException} If the Segment does exist (whether as a Table Segment or Stream Segment).\n-     * </ul>\n-     */\n-    default CompletableFuture<Void> createSegment(String segmentName, Duration timeout) {\n-        return createSegment(segmentName, false, timeout);\n-    }\n-\n     /**\n      * Creates a new Segment and marks it as a Table Segment.\n      * This segment may not be used for Streaming purposes (i.e., it cannot be used with {@link StreamSegmentStore}).\n      *\n      * @param segmentName The name of the Table Segment to create.\n-     * @param sorted      EXPERIMENTAL. If true, the created Table Segment will be a Sorted Table Segment, otherwise it\n-     *                    will be a plain Hash Table. See {@link TableStore} Javadoc for difference between the two.\n+     * @param segmentType Type of Segment to Create. If not already specified, this will automatically set the\n+     *                    {@link  SegmentType#isTableSegment()} to true. If {@link  SegmentType#isSortedTableSegment()}\n+     *                    is true, this will create a Sorted Table Segment (EXPERIMENTAL), otherwise it will be a plain\n+     *                    Hash Table. See {@link TableStore} Javadoc for difference between the two.\n      * @param timeout     Timeout for the operation.\n      * @return A CompletableFuture that, when completed normally, will indicate the operation completed. If the operation\n      * failed, the future will be failed with the causing exception. Notable Exceptions:\n      * <ul>\n      * <li>{@link StreamSegmentExistsException} If the Segment does exist (whether as a Table Segment or Stream Segment).\n      * </ul>\n      */\n-    CompletableFuture<Void> createSegment(String segmentName, boolean sorted, Duration timeout);\n+    CompletableFuture<Void> createSegment(String segmentName, SegmentType segmentType, Duration timeout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2MzQ4NA=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDgyMzQxOnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/Attributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoxNDo1M1rOHsQUOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoxNDo1M1rOHsQUOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2NjcxNQ==", "bodyText": "cannot be modified", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516166715", "createdAt": "2020-11-02T18:14:53Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/Attributes.java", "diffHunk": "@@ -98,6 +98,22 @@\n      */\n     public static final UUID ATTRIBUTE_SEGMENT_PERSIST_SEQ_NO = new UUID(CORE_ATTRIBUTE_ID_PREFIX, 8);\n \n+    /**\n+     * Defines an attribute that is used to store the Segment's Type ({@link SegmentType#getValue()}.\n+     * This attribute cannot be modified once set on the Segment.\n+     */\n+    public static final UUID ATTRIBUTE_SEGMENT_TYPE = new UUID(CORE_ATTRIBUTE_ID_PREFIX, TABLE_ATTRIBUTES_START_OFFSET - 1);\n+\n+    /**\n+     * Determines whether the given attribute may NOT be modified once originally set on the Segment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDgzMzI5OnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/Attributes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoxNzozMlrOHsQaMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNToyMTowNlrOHszvZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2ODI0Mw==", "bodyText": "why TABLE_ATTRIBUTES_START_OFFSET - 1 ?  why not 9?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516168243", "createdAt": "2020-11-02T18:17:32Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/Attributes.java", "diffHunk": "@@ -98,6 +98,22 @@\n      */\n     public static final UUID ATTRIBUTE_SEGMENT_PERSIST_SEQ_NO = new UUID(CORE_ATTRIBUTE_ID_PREFIX, 8);\n \n+    /**\n+     * Defines an attribute that is used to store the Segment's Type ({@link SegmentType#getValue()}.\n+     * This attribute cannot be modified once set on the Segment.\n+     */\n+    public static final UUID ATTRIBUTE_SEGMENT_TYPE = new UUID(CORE_ATTRIBUTE_ID_PREFIX, TABLE_ATTRIBUTES_START_OFFSET - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0NzEwOQ==", "bodyText": "I forget why I did it this way originally. Thinking about it, there's wasn't really a good reason to do so. 9 will do.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516747109", "createdAt": "2020-11-03T15:21:06Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/Attributes.java", "diffHunk": "@@ -98,6 +98,22 @@\n      */\n     public static final UUID ATTRIBUTE_SEGMENT_PERSIST_SEQ_NO = new UUID(CORE_ATTRIBUTE_ID_PREFIX, 8);\n \n+    /**\n+     * Defines an attribute that is used to store the Segment's Type ({@link SegmentType#getValue()}.\n+     * This attribute cannot be modified once set on the Segment.\n+     */\n+    public static final UUID ATTRIBUTE_SEGMENT_TYPE = new UUID(CORE_ATTRIBUTE_ID_PREFIX, TABLE_ATTRIBUTES_START_OFFSET - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2ODI0Mw=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDg0NjE3OnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/SegmentType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoyMTowOFrOHsQiKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDozNzoxOVrOHtut9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MDI4Mw==", "bodyText": "why not ROLE_CRITICAL = 0b0100_0000L | ROLE_INTERNAL also?\nWhat is the difference between internal and system ?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516170283", "createdAt": "2020-11-02T18:21:08Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/SegmentType.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import java.util.Map;\n+import java.util.UUID;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Defines Segment Types. A Segment Type is a combination of Formats (how data are stored internally) and Roles (how is\n+ * the Segment used and how does the Segment Store rely on it).\n+ */\n+@RequiredArgsConstructor\n+public class SegmentType {\n+    //region Flags\n+\n+    /*\n+     * Note to developers: DO NOT CHANGE the number (bit) representations of the fields below. They are used for bitwise\n+     * concatenation and their values are stored as Segment Attributes. Changing them would break backwards compatibility.\n+     * Adding new values is OK. Do not reuse retired values. Carefully consider the addition of new values as there are\n+     * a maximum of 64 flags that can be set using this scheme.\n+     */\n+    @VisibleForTesting\n+    static final long FORMAT_BASIC = 0b0000_0000L;\n+    @VisibleForTesting\n+    static final long FORMAT_TABLE_SEGMENT = 0b0000_0001L;\n+    @VisibleForTesting\n+    static final long FORMAT_SORTED_TABLE_SEGMENT = 0b0000_0010L | FORMAT_TABLE_SEGMENT;\n+    @VisibleForTesting\n+    static final long ROLE_INTERNAL = 0b0001_0000L;\n+    @VisibleForTesting\n+    static final long ROLE_SYSTEM = 0b0010_0000L | ROLE_INTERNAL;\n+    @VisibleForTesting\n+    static final long ROLE_CRITICAL = 0b0100_0000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0OTg0NA==", "bodyText": "The point of Internal is to differentiate between Segment Store-owned segments and external ones. In the future we may restrict access to such segments externally. All system segments are internal, but not all internal segments may require the \"elevated\" priority that system segments have.\nCritical segments need not necessarily be internal segments. The Controller may designate some segments (i.e., Event stream or whatever) as critical to the good functioning of the cluster. At this point we didn't label any of these as such, nor do we expose segment type via the Wire Protocol. But it is something that may be done in the future.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516749844", "createdAt": "2020-11-03T15:24:35Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/SegmentType.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import java.util.Map;\n+import java.util.UUID;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Defines Segment Types. A Segment Type is a combination of Formats (how data are stored internally) and Roles (how is\n+ * the Segment used and how does the Segment Store rely on it).\n+ */\n+@RequiredArgsConstructor\n+public class SegmentType {\n+    //region Flags\n+\n+    /*\n+     * Note to developers: DO NOT CHANGE the number (bit) representations of the fields below. They are used for bitwise\n+     * concatenation and their values are stored as Segment Attributes. Changing them would break backwards compatibility.\n+     * Adding new values is OK. Do not reuse retired values. Carefully consider the addition of new values as there are\n+     * a maximum of 64 flags that can be set using this scheme.\n+     */\n+    @VisibleForTesting\n+    static final long FORMAT_BASIC = 0b0000_0000L;\n+    @VisibleForTesting\n+    static final long FORMAT_TABLE_SEGMENT = 0b0000_0001L;\n+    @VisibleForTesting\n+    static final long FORMAT_SORTED_TABLE_SEGMENT = 0b0000_0010L | FORMAT_TABLE_SEGMENT;\n+    @VisibleForTesting\n+    static final long ROLE_INTERNAL = 0b0001_0000L;\n+    @VisibleForTesting\n+    static final long ROLE_SYSTEM = 0b0010_0000L | ROLE_INTERNAL;\n+    @VisibleForTesting\n+    static final long ROLE_CRITICAL = 0b0100_0000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MDI4Mw=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwNzUyMw==", "bodyText": "ok. So internal means only Segment Store-owned segments not \"pravega internal\"", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516807523", "createdAt": "2020-11-03T16:43:37Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/SegmentType.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import java.util.Map;\n+import java.util.UUID;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Defines Segment Types. A Segment Type is a combination of Formats (how data are stored internally) and Roles (how is\n+ * the Segment used and how does the Segment Store rely on it).\n+ */\n+@RequiredArgsConstructor\n+public class SegmentType {\n+    //region Flags\n+\n+    /*\n+     * Note to developers: DO NOT CHANGE the number (bit) representations of the fields below. They are used for bitwise\n+     * concatenation and their values are stored as Segment Attributes. Changing them would break backwards compatibility.\n+     * Adding new values is OK. Do not reuse retired values. Carefully consider the addition of new values as there are\n+     * a maximum of 64 flags that can be set using this scheme.\n+     */\n+    @VisibleForTesting\n+    static final long FORMAT_BASIC = 0b0000_0000L;\n+    @VisibleForTesting\n+    static final long FORMAT_TABLE_SEGMENT = 0b0000_0001L;\n+    @VisibleForTesting\n+    static final long FORMAT_SORTED_TABLE_SEGMENT = 0b0000_0010L | FORMAT_TABLE_SEGMENT;\n+    @VisibleForTesting\n+    static final long ROLE_INTERNAL = 0b0001_0000L;\n+    @VisibleForTesting\n+    static final long ROLE_SYSTEM = 0b0010_0000L | ROLE_INTERNAL;\n+    @VisibleForTesting\n+    static final long ROLE_CRITICAL = 0b0100_0000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MDI4Mw=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzM5OA==", "bodyText": "Precisely.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r517713398", "createdAt": "2020-11-05T00:37:19Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/SegmentType.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import java.util.Map;\n+import java.util.UUID;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Defines Segment Types. A Segment Type is a combination of Formats (how data are stored internally) and Roles (how is\n+ * the Segment used and how does the Segment Store rely on it).\n+ */\n+@RequiredArgsConstructor\n+public class SegmentType {\n+    //region Flags\n+\n+    /*\n+     * Note to developers: DO NOT CHANGE the number (bit) representations of the fields below. They are used for bitwise\n+     * concatenation and their values are stored as Segment Attributes. Changing them would break backwards compatibility.\n+     * Adding new values is OK. Do not reuse retired values. Carefully consider the addition of new values as there are\n+     * a maximum of 64 flags that can be set using this scheme.\n+     */\n+    @VisibleForTesting\n+    static final long FORMAT_BASIC = 0b0000_0000L;\n+    @VisibleForTesting\n+    static final long FORMAT_TABLE_SEGMENT = 0b0000_0001L;\n+    @VisibleForTesting\n+    static final long FORMAT_SORTED_TABLE_SEGMENT = 0b0000_0010L | FORMAT_TABLE_SEGMENT;\n+    @VisibleForTesting\n+    static final long ROLE_INTERNAL = 0b0001_0000L;\n+    @VisibleForTesting\n+    static final long ROLE_SYSTEM = 0b0010_0000L | ROLE_INTERNAL;\n+    @VisibleForTesting\n+    static final long ROLE_CRITICAL = 0b0100_0000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MDI4Mw=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDkyNTIzOnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/test/java/io/pravega/segmentstore/contracts/SegmentTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0NDo0NlrOHsRTWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0NDo0NlrOHsRTWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4Mjg3Mw==", "bodyText": "predicates?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516182873", "createdAt": "2020-11-02T18:44:46Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/test/java/io/pravega/segmentstore/contracts/SegmentTypeTests.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.contracts;\n+\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.function.Predicate;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for the {@link SegmentType} class.\n+ */\n+public class SegmentTypeTests {\n+\n+    /**\n+     * Tests all {@link SegmentType}s with a single value.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBuilder() {\n+        checkBuilder(SegmentType.builder().build(), SegmentType.FORMAT_BASIC);\n+        checkBuilder(SegmentType.builder().tableSegment().build(), SegmentType.FORMAT_TABLE_SEGMENT, SegmentType::isTableSegment);\n+        checkBuilder(SegmentType.builder().sortedTableSegment().build(), SegmentType.FORMAT_SORTED_TABLE_SEGMENT,\n+                SegmentType::isTableSegment, SegmentType::isSortedTableSegment);\n+        checkBuilder(SegmentType.builder().internal().build(), SegmentType.ROLE_INTERNAL, SegmentType::isInternal);\n+        checkBuilder(SegmentType.builder().system().build(), SegmentType.ROLE_SYSTEM, SegmentType::isSystem, SegmentType::isInternal);\n+        checkBuilder(SegmentType.builder().critical().build(), SegmentType.ROLE_CRITICAL, SegmentType::isCritical);\n+    }\n+\n+    /**\n+     * Tests {@link SegmentType#fromAttributes} and {@link SegmentType#intoAttributes}.\n+     */\n+    @Test\n+    public void testToFromAttributes() {\n+        val empty = SegmentType.fromAttributes(Collections.emptyMap());\n+        Assert.assertEquals(\"Empty attributes. \", SegmentType.FORMAT_BASIC, empty.getValue());\n+\n+        val baseType = SegmentType.builder().critical().internal().system().build();\n+        val segmentAttributes = new HashMap<UUID, Long>();\n+        Assert.assertTrue(baseType.intoAttributes(segmentAttributes));\n+        Assert.assertFalse(baseType.intoAttributes(segmentAttributes));\n+\n+        val nonTableSegment = SegmentType.fromAttributes(segmentAttributes);\n+        Assert.assertEquals(\"Non-table segment.\", baseType, nonTableSegment);\n+\n+        segmentAttributes.put(TableAttributes.INDEX_OFFSET, 0L);\n+        val simpleTableSegment = SegmentType.fromAttributes(segmentAttributes);\n+        val expectedSimpleSegment = SegmentType.builder(baseType).tableSegment().build();\n+        Assert.assertEquals(\"Simple Table Segment.\", expectedSimpleSegment, simpleTableSegment);\n+\n+        segmentAttributes.put(TableAttributes.SORTED, Attributes.BOOLEAN_FALSE);\n+        Assert.assertEquals(\"Simple Table Segment (Sorted==False).\", expectedSimpleSegment, SegmentType.fromAttributes(segmentAttributes));\n+\n+        segmentAttributes.put(TableAttributes.SORTED, Attributes.BOOLEAN_TRUE);\n+        val sortedTableSegment = SegmentType.fromAttributes(segmentAttributes);\n+        val expectedSortedSegment = SegmentType.builder(expectedSimpleSegment).sortedTableSegment().build();\n+        Assert.assertEquals(\"Sorted Table Segment.\", expectedSortedSegment, sortedTableSegment);\n+    }\n+\n+    private void checkBuilder(SegmentType type, long expectedValue, Predicate<SegmentType>... mustBeTrue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDk2MDkyOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1NToxMVrOHsRpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozMTo1MVrOHs0QqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4ODQ3NA==", "bodyText": "Can we add these as static constants to SegmentType itself?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516188474", "createdAt": "2020-11-02T18:55:11Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -132,6 +133,9 @@\n     private static final TagLogger log = new TagLogger(LoggerFactory.getLogger(PravegaRequestProcessor.class));\n     private static final int MAX_READ_SIZE = 2 * 1024 * 1024;\n     private static final String EMPTY_STACK_TRACE = \"\";\n+    private static final SegmentType STREAM_SEGMENT = SegmentType.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1NTYyNQ==", "bodyText": "OK", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516755625", "createdAt": "2020-11-03T15:31:51Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -132,6 +133,9 @@\n     private static final TagLogger log = new TagLogger(LoggerFactory.getLogger(PravegaRequestProcessor.class));\n     private static final int MAX_READ_SIZE = 2 * 1024 * 1024;\n     private static final String EMPTY_STACK_TRACE = \"\";\n+    private static final SegmentType STREAM_SEGMENT = SegmentType.builder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4ODQ3NA=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAxMjM3OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMTozMlrOHsSJmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNTozNVrOHs0b8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5Njc2Mg==", "bodyText": "I am not sure I understood what is happening here. In earlier line we overwrote this.type from attributes, then why would this if condition ever be true?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516196762", "createdAt": "2020-11-02T19:11:32Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadata.java", "diffHunk": "@@ -297,6 +299,14 @@ public synchronized void updateAttributes(Map<UUID, Long> attributes) {\n         });\n     }\n \n+    @Override\n+    public synchronized void refreshType() {\n+        this.type = SegmentType.fromAttributes(this.coreAttributes);\n+        if (this.type.intoAttributes(this.coreAttributes)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1ODUxMw==", "bodyText": "Backwards compatibility. The Segment type does not exist prior to version 0.9 and segments may have already been created in upgraded clusters. We can still infer the format of the type (Stream/Table/SortedTable) by looking at existing attributes.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516758513", "createdAt": "2020-11-03T15:35:35Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadata.java", "diffHunk": "@@ -297,6 +299,14 @@ public synchronized void updateAttributes(Map<UUID, Long> attributes) {\n         });\n     }\n \n+    @Override\n+    public synchronized void refreshType() {\n+        this.type = SegmentType.fromAttributes(this.coreAttributes);\n+        if (this.type.intoAttributes(this.coreAttributes)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5Njc2Mg=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA0NTI5OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/PriorityCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMjowNFrOHsSdcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozOToxNFrOHs0mYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTg0Mg==", "bodyText": "This could be a static method.\nThere is no state here.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516201842", "createdAt": "2020-11-02T19:22:04Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/PriorityCalculator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.logs;\n+\n+import io.pravega.segmentstore.contracts.SegmentType;\n+import io.pravega.segmentstore.server.logs.operations.OperationPriority;\n+import io.pravega.segmentstore.server.logs.operations.OperationType;\n+\n+/**\n+ * Calculates {@link OperationPriority} based on various factors.\n+ */\n+public final class PriorityCalculator {\n+\n+    /**\n+     * Determines an {@link OperationPriority} appropriate for the given {@link SegmentType} and {@link OperationType}.\n+     *\n+     * <pre>\n+     *\n+     * SegmentType       | OperationType | Priority\n+     * ------------------+---------------+----------------\n+     * System & Critical | (any)         | {@link OperationPriority#SystemCritical}\n+     * Critical          | (any)         | {@link OperationPriority#Critical}\n+     * (any)             | Deletion      | {@link OperationPriority#Critical}\n+     * System            | Normal        | {@link OperationPriority#High}\n+     * (all other combinations)          | {@link OperationPriority#Normal}\n+     *\n+     * </pre>\n+     *\n+     * @param segmentType   {@link SegmentType} that the Operation applies to.\n+     * @param operationType Operation's {@link OperationType}.\n+     * @return A {@link OperationPriority}.\n+     */\n+    public OperationPriority getPriority(SegmentType segmentType, OperationType operationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MTE4NQ==", "bodyText": "We can do that for now.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516761185", "createdAt": "2020-11-03T15:39:14Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/PriorityCalculator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.logs;\n+\n+import io.pravega.segmentstore.contracts.SegmentType;\n+import io.pravega.segmentstore.server.logs.operations.OperationPriority;\n+import io.pravega.segmentstore.server.logs.operations.OperationType;\n+\n+/**\n+ * Calculates {@link OperationPriority} based on various factors.\n+ */\n+public final class PriorityCalculator {\n+\n+    /**\n+     * Determines an {@link OperationPriority} appropriate for the given {@link SegmentType} and {@link OperationType}.\n+     *\n+     * <pre>\n+     *\n+     * SegmentType       | OperationType | Priority\n+     * ------------------+---------------+----------------\n+     * System & Critical | (any)         | {@link OperationPriority#SystemCritical}\n+     * Critical          | (any)         | {@link OperationPriority#Critical}\n+     * (any)             | Deletion      | {@link OperationPriority#Critical}\n+     * System            | Normal        | {@link OperationPriority#High}\n+     * (all other combinations)          | {@link OperationPriority#Normal}\n+     *\n+     * </pre>\n+     *\n+     * @param segmentType   {@link SegmentType} that the Operation applies to.\n+     * @param operationType Operation's {@link OperationType}.\n+     * @return A {@link OperationPriority}.\n+     */\n+    public OperationPriority getPriority(SegmentType segmentType, OperationType operationType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTg0Mg=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA5MTU3OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/ContainerMetadataUpdateTransaction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozNTo1MFrOHsS5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDozODowMlrOHtuu7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwODk5NA==", "bodyText": "why not \"refresh\" it in updateAttributes itself?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516208994", "createdAt": "2020-11-02T19:35:50Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/ContainerMetadataUpdateTransaction.java", "diffHunk": "@@ -468,6 +468,7 @@ private void updateMetadata(StreamSegmentMapOperation mapping, UpdateableSegment\n         }\n \n         metadata.updateAttributes(mapping.getAttributes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MDI2OA==", "bodyText": "I don't understand.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516760268", "createdAt": "2020-11-03T15:37:59Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/ContainerMetadataUpdateTransaction.java", "diffHunk": "@@ -468,6 +468,7 @@ private void updateMetadata(StreamSegmentMapOperation mapping, UpdateableSegment\n         }\n \n         metadata.updateAttributes(mapping.getAttributes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwODk5NA=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwODM1Mw==", "bodyText": "why can't updateAttributes itself do what refresh is doing?\nI think it will make it less error prone.\nI think you answered it below", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516808353", "createdAt": "2020-11-03T16:44:46Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/ContainerMetadataUpdateTransaction.java", "diffHunk": "@@ -468,6 +468,7 @@ private void updateMetadata(StreamSegmentMapOperation mapping, UpdateableSegment\n         }\n \n         metadata.updateAttributes(mapping.getAttributes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwODk5NA=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzY0NQ==", "bodyText": "Yes - sorry I only understood your question the second time you brought it up. Does it makes sense now?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r517713645", "createdAt": "2020-11-05T00:38:02Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/ContainerMetadataUpdateTransaction.java", "diffHunk": "@@ -468,6 +468,7 @@ private void updateMetadata(StreamSegmentMapOperation mapping, UpdateableSegment\n         }\n \n         metadata.updateAttributes(mapping.getAttributes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwODk5NA=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA5ODg3OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/writer/StorageWriterFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozODoxNVrOHsS9_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozODoxNVrOHsS9_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMDE3Mw==", "bodyText": "PriorityCalculator.getPriority could be static. We could avoid some allocations here.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516210173", "createdAt": "2020-11-02T19:38:15Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/writer/StorageWriterFactory.java", "diffHunk": "@@ -107,13 +110,15 @@ public int getId() {\n         }\n \n         @Override\n-        public CompletableFuture<Void> notifyAttributesPersisted(long segmentId, long rootPointer, long lastSequenceNumber, Duration timeout) {\n+        public CompletableFuture<Void> notifyAttributesPersisted(long segmentId, SegmentType segmentType, long rootPointer,\n+                                                                 long lastSequenceNumber, Duration timeout) {\n             List<AttributeUpdate> updates = Arrays.asList(\n                     new AttributeUpdate(Attributes.ATTRIBUTE_SEGMENT_ROOT_POINTER, AttributeUpdateType.ReplaceIfGreater, rootPointer),\n                     new AttributeUpdate(Attributes.ATTRIBUTE_SEGMENT_PERSIST_SEQ_NO, AttributeUpdateType.Replace, lastSequenceNumber));\n             UpdateAttributesOperation op = new UpdateAttributesOperation(segmentId, updates);\n             op.setInternal(true); // This is internally generated, so we want to ensure it's accepted even on a sealed segment.\n-            return this.operationLog.add(op, timeout);\n+            OperationPriority priority = new PriorityCalculator().getPriority(segmentType, op.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTExNjAyOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/MetadataStoreTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0MzozMFrOHsTIfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0MTowM1rOHs0sFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMjg2Mw==", "bodyText": "Will this really cover al valid combinations?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516212863", "createdAt": "2020-11-02T19:43:30Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/MetadataStoreTestBase.java", "diffHunk": "@@ -80,16 +82,22 @@ protected int getThreadPoolSize() {\n     @Test\n     public void testCreateSegment() {\n         final int segmentCount = 50;\n+        val segmentTypes = Arrays.asList(\n+                SegmentType.builder().build(),\n+                SegmentType.builder().system().build(),\n+                SegmentType.builder().sortedTableSegment().build(),\n+                SegmentType.builder().critical().internal().build());\n \n         @Cleanup\n         TestContext context = createTestContext();\n \n         // Create some Segments and verify they are properly created and registered.\n         for (int i = 0; i < segmentCount; i++) {\n             String segmentName = getName(i);\n+            val segmentType = segmentTypes.get(i % segmentTypes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MjY0Nw==", "bodyText": "There are too many combinations to test. I created a few important ones a few lines above (Stream segment, system stream segment, sorted table segment and critical internal) which should cover all the bits that can be set. The point of this test is not to exhaustively test all possibilities (SegmentTypeTests does that), but to verify that this is properly stored in the metadata store when creating segments.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516762647", "createdAt": "2020-11-03T15:41:03Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/MetadataStoreTestBase.java", "diffHunk": "@@ -80,16 +82,22 @@ protected int getThreadPoolSize() {\n     @Test\n     public void testCreateSegment() {\n         final int segmentCount = 50;\n+        val segmentTypes = Arrays.asList(\n+                SegmentType.builder().build(),\n+                SegmentType.builder().system().build(),\n+                SegmentType.builder().sortedTableSegment().build(),\n+                SegmentType.builder().critical().internal().build());\n \n         @Cleanup\n         TestContext context = createTestContext();\n \n         // Create some Segments and verify they are properly created and registered.\n         for (int i = 0; i < segmentCount; i++) {\n             String segmentName = getName(i);\n+            val segmentType = segmentTypes.get(i % segmentTypes.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMjg2Mw=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTEyMjIxOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadataTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0NToxMlrOHsTMMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0Njo1NFrOHs08wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzgxMA==", "bodyText": "why can't updateAttributes itself do what refresh is doing?\nI think it will make it less error prone.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516213810", "createdAt": "2020-11-02T19:45:12Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadataTests.java", "diffHunk": "@@ -41,6 +43,45 @@\n     @Rule\n     public Timeout globalTimeout = Timeout.seconds(10);\n \n+    /**\n+     * Tests {@link StreamSegmentMetadata#getType()} and {@link StreamSegmentMetadata#refreshType()}.\n+     */\n+    @Test\n+    public void testSegmentType() {\n+        SegmentType expectedType = SegmentType.builder().build();\n+        StreamSegmentMetadata metadata = new StreamSegmentMetadata(SEGMENT_NAME, SEGMENT_ID, CONTAINER_ID);\n+        Assert.assertEquals(\"Unexpected value for non-initialized type.\", expectedType, metadata.getType());\n+\n+        // Segment type exists in Core attributes.\n+        expectedType = SegmentType.builder().critical().internal().build();\n+        metadata.updateAttributes(Collections.singletonMap(Attributes.ATTRIBUTE_SEGMENT_TYPE, expectedType.getValue()));\n+        metadata.refreshType();\n+        Assert.assertEquals(\"Unexpected value for single type.\", expectedType, metadata.getType());\n+\n+        // Segment type exists in Core attributes, but other attributes indicate this is a Table Segment.\n+        expectedType = SegmentType.builder(expectedType).tableSegment().build();\n+        metadata.updateAttributes(Collections.singletonMap(TableAttributes.INDEX_OFFSET, 0L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2NjkxMg==", "bodyText": "I want this externally accessible so I can unit test it properly.\nAlso, there are cases where updateAttributes is invoked where we need not invoke this one as well. One case involves deserialization of metadata, while another is the fact that once created, the segment type should never be changed, hence not invoking this everywhere.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516766912", "createdAt": "2020-11-03T15:46:54Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadataTests.java", "diffHunk": "@@ -41,6 +43,45 @@\n     @Rule\n     public Timeout globalTimeout = Timeout.seconds(10);\n \n+    /**\n+     * Tests {@link StreamSegmentMetadata#getType()} and {@link StreamSegmentMetadata#refreshType()}.\n+     */\n+    @Test\n+    public void testSegmentType() {\n+        SegmentType expectedType = SegmentType.builder().build();\n+        StreamSegmentMetadata metadata = new StreamSegmentMetadata(SEGMENT_NAME, SEGMENT_ID, CONTAINER_ID);\n+        Assert.assertEquals(\"Unexpected value for non-initialized type.\", expectedType, metadata.getType());\n+\n+        // Segment type exists in Core attributes.\n+        expectedType = SegmentType.builder().critical().internal().build();\n+        metadata.updateAttributes(Collections.singletonMap(Attributes.ATTRIBUTE_SEGMENT_TYPE, expectedType.getValue()));\n+        metadata.refreshType();\n+        Assert.assertEquals(\"Unexpected value for single type.\", expectedType, metadata.getType());\n+\n+        // Segment type exists in Core attributes, but other attributes indicate this is a Table Segment.\n+        expectedType = SegmentType.builder(expectedType).tableSegment().build();\n+        metadata.updateAttributes(Collections.singletonMap(TableAttributes.INDEX_OFFSET, 0L));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzgxMA=="}, "originalCommit": {"oid": "70799524c8943a0bd347079a91c22919d6da2e43"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ3MTMyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1OTozMVrOHs8byA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowMzo0NFrOHtvMtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4OTU0NA==", "bodyText": "Can new item with higher priority be inserted between getFirstIndex and getQueue?\nMore importantly does it matter in this case that we skipped over higher priority item in this case? If not then at least add a comment that explains the behavior.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516889544", "createdAt": "2020-11-03T18:59:31Z", "author": {"login": "sachin-j-joshi"}, "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayDeque;\n+import java.util.Queue;\n+import lombok.val;\n+\n+/**\n+ * {@link AbstractDrainingQueue} implementation with multiple priority levels. Supports up to {@link Byte#MAX_VALUE}\n+ * priority levels, with Priority 0 being the highest.\n+ * <p>\n+ * Important notes:\n+ * - {@link #poll(int)} and {@link #take(int)} will return items with the highest available priority and will never mix\n+ * items with different priorities. That means that, even if there are more items (with lower priority), those will not\n+ * be included in the result even if the requested number of items exceeds what we can return. These (lower priority) items\n+ * may be retrieved using a subsequent call (assuming no higher priority items are added in the meantime).\n+ *\n+ * @param <T> Type of item,\n+ */\n+public class PriorityBlockingDrainingQueue<T extends PriorityBlockingDrainingQueue.Item> extends AbstractDrainingQueue<T> {\n+    //region Members.\n+    private final ArrayDeque[] queues;\n+    private int firstIndex;\n+    private int size;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link PriorityBlockingDrainingQueue} class.\n+     *\n+     * @param maxPriorityValue Maximum allowed priority value.\n+     */\n+    public PriorityBlockingDrainingQueue(byte maxPriorityValue) {\n+        Preconditions.checkArgument(maxPriorityValue >= 0, \"maxPriorityLevel must be a value between 0 and %s.\", Byte.MAX_VALUE);\n+        this.queues = new ArrayDeque[maxPriorityValue + 1];\n+        this.firstIndex = 0;\n+        this.size = 0;\n+    }\n+\n+    //endregion\n+\n+    //region AbstractDrainingQueue Implementation\n+\n+    @Override\n+    protected void addInternal(T item) {\n+        byte p = item.getPriorityValue();\n+        Preconditions.checkArgument(p >= 0 && p < this.queues.length,\n+                \"Item.getPriority() must be a value between 0 (inclusive) and %s (exclusive).\", this.queues.length);\n+        getOrCreateQueue(p).add(item);\n+        this.size++;\n+        if (this.firstIndex > p) {\n+            this.firstIndex = p;\n+        }\n+    }\n+\n+    @Override\n+    protected int sizeInternal() {\n+        return this.size;\n+    }\n+\n+    @Override\n+    protected T peekInternal() {\n+        if (this.size == 0) {\n+            return null;\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        return getQueue(fi).peekFirst();\n+    }\n+\n+    @Override\n+    protected Queue<T> fetch(int maxCount) {\n+        if (this.size == 0) {\n+            return new ArrayDeque<>(0);\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d72267b2f0f6872733c96149802ab277597ce7b1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTI2OQ==", "bodyText": "No. Because while invoking this method, we are holding the lock (from the super class). See this method's Javadoc in the superclass.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r517721269", "createdAt": "2020-11-05T01:03:44Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayDeque;\n+import java.util.Queue;\n+import lombok.val;\n+\n+/**\n+ * {@link AbstractDrainingQueue} implementation with multiple priority levels. Supports up to {@link Byte#MAX_VALUE}\n+ * priority levels, with Priority 0 being the highest.\n+ * <p>\n+ * Important notes:\n+ * - {@link #poll(int)} and {@link #take(int)} will return items with the highest available priority and will never mix\n+ * items with different priorities. That means that, even if there are more items (with lower priority), those will not\n+ * be included in the result even if the requested number of items exceeds what we can return. These (lower priority) items\n+ * may be retrieved using a subsequent call (assuming no higher priority items are added in the meantime).\n+ *\n+ * @param <T> Type of item,\n+ */\n+public class PriorityBlockingDrainingQueue<T extends PriorityBlockingDrainingQueue.Item> extends AbstractDrainingQueue<T> {\n+    //region Members.\n+    private final ArrayDeque[] queues;\n+    private int firstIndex;\n+    private int size;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link PriorityBlockingDrainingQueue} class.\n+     *\n+     * @param maxPriorityValue Maximum allowed priority value.\n+     */\n+    public PriorityBlockingDrainingQueue(byte maxPriorityValue) {\n+        Preconditions.checkArgument(maxPriorityValue >= 0, \"maxPriorityLevel must be a value between 0 and %s.\", Byte.MAX_VALUE);\n+        this.queues = new ArrayDeque[maxPriorityValue + 1];\n+        this.firstIndex = 0;\n+        this.size = 0;\n+    }\n+\n+    //endregion\n+\n+    //region AbstractDrainingQueue Implementation\n+\n+    @Override\n+    protected void addInternal(T item) {\n+        byte p = item.getPriorityValue();\n+        Preconditions.checkArgument(p >= 0 && p < this.queues.length,\n+                \"Item.getPriority() must be a value between 0 (inclusive) and %s (exclusive).\", this.queues.length);\n+        getOrCreateQueue(p).add(item);\n+        this.size++;\n+        if (this.firstIndex > p) {\n+            this.firstIndex = p;\n+        }\n+    }\n+\n+    @Override\n+    protected int sizeInternal() {\n+        return this.size;\n+    }\n+\n+    @Override\n+    protected T peekInternal() {\n+        if (this.size == 0) {\n+            return null;\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        return getQueue(fi).peekFirst();\n+    }\n+\n+    @Override\n+    protected Queue<T> fetch(int maxCount) {\n+        if (this.size == 0) {\n+            return new ArrayDeque<>(0);\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4OTU0NA=="}, "originalCommit": {"oid": "d72267b2f0f6872733c96149802ab277597ce7b1"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ4NTA3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMzoyMFrOHs8kCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowNDo1NFrOHtvOLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTY1OA==", "bodyText": "If all queues are empty then we'll return -1 .\nThis will result in index out of bound", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516891658", "createdAt": "2020-11-03T19:03:20Z", "author": {"login": "sachin-j-joshi"}, "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayDeque;\n+import java.util.Queue;\n+import lombok.val;\n+\n+/**\n+ * {@link AbstractDrainingQueue} implementation with multiple priority levels. Supports up to {@link Byte#MAX_VALUE}\n+ * priority levels, with Priority 0 being the highest.\n+ * <p>\n+ * Important notes:\n+ * - {@link #poll(int)} and {@link #take(int)} will return items with the highest available priority and will never mix\n+ * items with different priorities. That means that, even if there are more items (with lower priority), those will not\n+ * be included in the result even if the requested number of items exceeds what we can return. These (lower priority) items\n+ * may be retrieved using a subsequent call (assuming no higher priority items are added in the meantime).\n+ *\n+ * @param <T> Type of item,\n+ */\n+public class PriorityBlockingDrainingQueue<T extends PriorityBlockingDrainingQueue.Item> extends AbstractDrainingQueue<T> {\n+    //region Members.\n+    private final ArrayDeque[] queues;\n+    private int firstIndex;\n+    private int size;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link PriorityBlockingDrainingQueue} class.\n+     *\n+     * @param maxPriorityValue Maximum allowed priority value.\n+     */\n+    public PriorityBlockingDrainingQueue(byte maxPriorityValue) {\n+        Preconditions.checkArgument(maxPriorityValue >= 0, \"maxPriorityLevel must be a value between 0 and %s.\", Byte.MAX_VALUE);\n+        this.queues = new ArrayDeque[maxPriorityValue + 1];\n+        this.firstIndex = 0;\n+        this.size = 0;\n+    }\n+\n+    //endregion\n+\n+    //region AbstractDrainingQueue Implementation\n+\n+    @Override\n+    protected void addInternal(T item) {\n+        byte p = item.getPriorityValue();\n+        Preconditions.checkArgument(p >= 0 && p < this.queues.length,\n+                \"Item.getPriority() must be a value between 0 (inclusive) and %s (exclusive).\", this.queues.length);\n+        getOrCreateQueue(p).add(item);\n+        this.size++;\n+        if (this.firstIndex > p) {\n+            this.firstIndex = p;\n+        }\n+    }\n+\n+    @Override\n+    protected int sizeInternal() {\n+        return this.size;\n+    }\n+\n+    @Override\n+    protected T peekInternal() {\n+        if (this.size == 0) {\n+            return null;\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        return getQueue(fi).peekFirst();\n+    }\n+\n+    @Override\n+    protected Queue<T> fetch(int maxCount) {\n+        if (this.size == 0) {\n+            return new ArrayDeque<>(0);\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d72267b2f0f6872733c96149802ab277597ce7b1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTY0NA==", "bodyText": "If all the queues are empty then the if(this.size == 0) above will fire and return an empty ArrayDequeue. So we shouldn't even get here anyway.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r517721644", "createdAt": "2020-11-05T01:04:54Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayDeque;\n+import java.util.Queue;\n+import lombok.val;\n+\n+/**\n+ * {@link AbstractDrainingQueue} implementation with multiple priority levels. Supports up to {@link Byte#MAX_VALUE}\n+ * priority levels, with Priority 0 being the highest.\n+ * <p>\n+ * Important notes:\n+ * - {@link #poll(int)} and {@link #take(int)} will return items with the highest available priority and will never mix\n+ * items with different priorities. That means that, even if there are more items (with lower priority), those will not\n+ * be included in the result even if the requested number of items exceeds what we can return. These (lower priority) items\n+ * may be retrieved using a subsequent call (assuming no higher priority items are added in the meantime).\n+ *\n+ * @param <T> Type of item,\n+ */\n+public class PriorityBlockingDrainingQueue<T extends PriorityBlockingDrainingQueue.Item> extends AbstractDrainingQueue<T> {\n+    //region Members.\n+    private final ArrayDeque[] queues;\n+    private int firstIndex;\n+    private int size;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link PriorityBlockingDrainingQueue} class.\n+     *\n+     * @param maxPriorityValue Maximum allowed priority value.\n+     */\n+    public PriorityBlockingDrainingQueue(byte maxPriorityValue) {\n+        Preconditions.checkArgument(maxPriorityValue >= 0, \"maxPriorityLevel must be a value between 0 and %s.\", Byte.MAX_VALUE);\n+        this.queues = new ArrayDeque[maxPriorityValue + 1];\n+        this.firstIndex = 0;\n+        this.size = 0;\n+    }\n+\n+    //endregion\n+\n+    //region AbstractDrainingQueue Implementation\n+\n+    @Override\n+    protected void addInternal(T item) {\n+        byte p = item.getPriorityValue();\n+        Preconditions.checkArgument(p >= 0 && p < this.queues.length,\n+                \"Item.getPriority() must be a value between 0 (inclusive) and %s (exclusive).\", this.queues.length);\n+        getOrCreateQueue(p).add(item);\n+        this.size++;\n+        if (this.firstIndex > p) {\n+            this.firstIndex = p;\n+        }\n+    }\n+\n+    @Override\n+    protected int sizeInternal() {\n+        return this.size;\n+    }\n+\n+    @Override\n+    protected T peekInternal() {\n+        if (this.size == 0) {\n+            return null;\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        return getQueue(fi).peekFirst();\n+    }\n+\n+    @Override\n+    protected Queue<T> fetch(int maxCount) {\n+        if (this.size == 0) {\n+            return new ArrayDeque<>(0);\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTY1OA=="}, "originalCommit": {"oid": "d72267b2f0f6872733c96149802ab277597ce7b1"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ4NjYxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMzo0MlrOHs8k6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowNToyN1rOHtvO4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTg4MQ==", "bodyText": "what happens when all queues are empty?", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r516891881", "createdAt": "2020-11-03T19:03:42Z", "author": {"login": "sachin-j-joshi"}, "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayDeque;\n+import java.util.Queue;\n+import lombok.val;\n+\n+/**\n+ * {@link AbstractDrainingQueue} implementation with multiple priority levels. Supports up to {@link Byte#MAX_VALUE}\n+ * priority levels, with Priority 0 being the highest.\n+ * <p>\n+ * Important notes:\n+ * - {@link #poll(int)} and {@link #take(int)} will return items with the highest available priority and will never mix\n+ * items with different priorities. That means that, even if there are more items (with lower priority), those will not\n+ * be included in the result even if the requested number of items exceeds what we can return. These (lower priority) items\n+ * may be retrieved using a subsequent call (assuming no higher priority items are added in the meantime).\n+ *\n+ * @param <T> Type of item,\n+ */\n+public class PriorityBlockingDrainingQueue<T extends PriorityBlockingDrainingQueue.Item> extends AbstractDrainingQueue<T> {\n+    //region Members.\n+    private final ArrayDeque[] queues;\n+    private int firstIndex;\n+    private int size;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link PriorityBlockingDrainingQueue} class.\n+     *\n+     * @param maxPriorityValue Maximum allowed priority value.\n+     */\n+    public PriorityBlockingDrainingQueue(byte maxPriorityValue) {\n+        Preconditions.checkArgument(maxPriorityValue >= 0, \"maxPriorityLevel must be a value between 0 and %s.\", Byte.MAX_VALUE);\n+        this.queues = new ArrayDeque[maxPriorityValue + 1];\n+        this.firstIndex = 0;\n+        this.size = 0;\n+    }\n+\n+    //endregion\n+\n+    //region AbstractDrainingQueue Implementation\n+\n+    @Override\n+    protected void addInternal(T item) {\n+        byte p = item.getPriorityValue();\n+        Preconditions.checkArgument(p >= 0 && p < this.queues.length,\n+                \"Item.getPriority() must be a value between 0 (inclusive) and %s (exclusive).\", this.queues.length);\n+        getOrCreateQueue(p).add(item);\n+        this.size++;\n+        if (this.firstIndex > p) {\n+            this.firstIndex = p;\n+        }\n+    }\n+\n+    @Override\n+    protected int sizeInternal() {\n+        return this.size;\n+    }\n+\n+    @Override\n+    protected T peekInternal() {\n+        if (this.size == 0) {\n+            return null;\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        return getQueue(fi).peekFirst();\n+    }\n+\n+    @Override\n+    protected Queue<T> fetch(int maxCount) {\n+        if (this.size == 0) {\n+            return new ArrayDeque<>(0);\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        val q = getQueue(fi);\n+\n+        int count = Math.min(maxCount, q.size());\n+        ArrayDeque<T> result = new ArrayDeque<>(count);\n+        while (result.size() < count) {\n+            result.addLast(q.pollFirst());\n+        }\n+\n+        this.size -= result.size();\n+        return result;\n+\n+    }\n+\n+    //endregion\n+\n+    //region Helper methods.\n+\n+    private int getFirstIndex() {\n+        for (; this.firstIndex < this.queues.length; this.firstIndex++) {\n+            val q = getQueue(this.firstIndex);\n+            if (q != null && !q.isEmpty()) {\n+                return this.firstIndex;\n+            }\n+        }\n+\n+        assert this.size > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d72267b2f0f6872733c96149802ab277597ce7b1"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTgyNw==", "bodyText": "Returns -1. But see my comment above about how this is used.\nThe unit tests cover this case.", "url": "https://github.com/pravega/pravega/pull/5268#discussion_r517721827", "createdAt": "2020-11-05T01:05:27Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/util/PriorityBlockingDrainingQueue.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayDeque;\n+import java.util.Queue;\n+import lombok.val;\n+\n+/**\n+ * {@link AbstractDrainingQueue} implementation with multiple priority levels. Supports up to {@link Byte#MAX_VALUE}\n+ * priority levels, with Priority 0 being the highest.\n+ * <p>\n+ * Important notes:\n+ * - {@link #poll(int)} and {@link #take(int)} will return items with the highest available priority and will never mix\n+ * items with different priorities. That means that, even if there are more items (with lower priority), those will not\n+ * be included in the result even if the requested number of items exceeds what we can return. These (lower priority) items\n+ * may be retrieved using a subsequent call (assuming no higher priority items are added in the meantime).\n+ *\n+ * @param <T> Type of item,\n+ */\n+public class PriorityBlockingDrainingQueue<T extends PriorityBlockingDrainingQueue.Item> extends AbstractDrainingQueue<T> {\n+    //region Members.\n+    private final ArrayDeque[] queues;\n+    private int firstIndex;\n+    private int size;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link PriorityBlockingDrainingQueue} class.\n+     *\n+     * @param maxPriorityValue Maximum allowed priority value.\n+     */\n+    public PriorityBlockingDrainingQueue(byte maxPriorityValue) {\n+        Preconditions.checkArgument(maxPriorityValue >= 0, \"maxPriorityLevel must be a value between 0 and %s.\", Byte.MAX_VALUE);\n+        this.queues = new ArrayDeque[maxPriorityValue + 1];\n+        this.firstIndex = 0;\n+        this.size = 0;\n+    }\n+\n+    //endregion\n+\n+    //region AbstractDrainingQueue Implementation\n+\n+    @Override\n+    protected void addInternal(T item) {\n+        byte p = item.getPriorityValue();\n+        Preconditions.checkArgument(p >= 0 && p < this.queues.length,\n+                \"Item.getPriority() must be a value between 0 (inclusive) and %s (exclusive).\", this.queues.length);\n+        getOrCreateQueue(p).add(item);\n+        this.size++;\n+        if (this.firstIndex > p) {\n+            this.firstIndex = p;\n+        }\n+    }\n+\n+    @Override\n+    protected int sizeInternal() {\n+        return this.size;\n+    }\n+\n+    @Override\n+    protected T peekInternal() {\n+        if (this.size == 0) {\n+            return null;\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        return getQueue(fi).peekFirst();\n+    }\n+\n+    @Override\n+    protected Queue<T> fetch(int maxCount) {\n+        if (this.size == 0) {\n+            return new ArrayDeque<>(0);\n+        }\n+\n+        int fi = getFirstIndex();\n+        assert fi >= 0 : \"size !=0 but firstIndex < 0\";\n+        val q = getQueue(fi);\n+\n+        int count = Math.min(maxCount, q.size());\n+        ArrayDeque<T> result = new ArrayDeque<>(count);\n+        while (result.size() < count) {\n+            result.addLast(q.pollFirst());\n+        }\n+\n+        this.size -= result.size();\n+        return result;\n+\n+    }\n+\n+    //endregion\n+\n+    //region Helper methods.\n+\n+    private int getFirstIndex() {\n+        for (; this.firstIndex < this.queues.length; this.firstIndex++) {\n+            val q = getQueue(this.firstIndex);\n+            if (q != null && !q.isEmpty()) {\n+                return this.firstIndex;\n+            }\n+        }\n+\n+        assert this.size > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTg4MQ=="}, "originalCommit": {"oid": "d72267b2f0f6872733c96149802ab277597ce7b1"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4749, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}