{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMzYxNDAy", "number": 5343, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1NDoyOVrOE6AL6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzowNzo1MVrOE6AflQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjU1OTE1OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1NDoyOVrOH0zeZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDozMTo0MFrOH03lxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMTM2Ng==", "bodyText": "Precondition check to verify that it is not null.", "url": "https://github.com/pravega/pravega/pull/5343#discussion_r525131366", "createdAt": "2020-11-17T12:54:29Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "diffHunk": "@@ -387,14 +391,28 @@ boolean checkExistsInCache(Stream stream) {\n         private final ConcurrentHashMap<String, Long> inactiveWriters;\n         \n         WatermarkClient(Stream stream, ClientConfig clientConfig) {\n-            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig));\n+            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig), true);\n         }\n         \n         @VisibleForTesting\n         WatermarkClient(Stream stream, SynchronizerClientFactory clientFactory) {\n-            this.client = clientFactory.createRevisionedStreamClient(\n-                    NameUtils.getMarkStreamForStream(stream.getStreamName()), \n-                    new WatermarkSerializer(), SynchronizerConfig.builder().build());\n+            this(stream, clientFactory, false);\n+        }\n+        \n+        @VisibleForTesting\n+        WatermarkClient(Stream stream, SynchronizerClientFactory clientFactory, boolean closeClientFactory) {\n+            this.synchronizerClientFactory = clientFactory;\n+            this.closeClientFactory = closeClientFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de348bcc1f8954564c4366ff0a8fe55de1544fea"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5ODc4OQ==", "bodyText": "removed this. its an internal constructor which is made visible for testing. so dont need preconditions.", "url": "https://github.com/pravega/pravega/pull/5343#discussion_r525198789", "createdAt": "2020-11-17T14:31:40Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "diffHunk": "@@ -387,14 +391,28 @@ boolean checkExistsInCache(Stream stream) {\n         private final ConcurrentHashMap<String, Long> inactiveWriters;\n         \n         WatermarkClient(Stream stream, ClientConfig clientConfig) {\n-            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig));\n+            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig), true);\n         }\n         \n         @VisibleForTesting\n         WatermarkClient(Stream stream, SynchronizerClientFactory clientFactory) {\n-            this.client = clientFactory.createRevisionedStreamClient(\n-                    NameUtils.getMarkStreamForStream(stream.getStreamName()), \n-                    new WatermarkSerializer(), SynchronizerConfig.builder().build());\n+            this(stream, clientFactory, false);\n+        }\n+        \n+        @VisibleForTesting\n+        WatermarkClient(Stream stream, SynchronizerClientFactory clientFactory, boolean closeClientFactory) {\n+            this.synchronizerClientFactory = clientFactory;\n+            this.closeClientFactory = closeClientFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMTM2Ng=="}, "originalCommit": {"oid": "de348bcc1f8954564c4366ff0a8fe55de1544fea"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjU4ODg4OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzowMjoyN1rOH0zwhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDozMTo1MlrOH03mPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNjAwNg==", "bodyText": "closeClientFactory is set to false only for tests. Hence we could remove the condition at line 411 below.", "url": "https://github.com/pravega/pravega/pull/5343#discussion_r525136006", "createdAt": "2020-11-17T13:02:27Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "diffHunk": "@@ -387,14 +391,28 @@ boolean checkExistsInCache(Stream stream) {\n         private final ConcurrentHashMap<String, Long> inactiveWriters;\n         \n         WatermarkClient(Stream stream, ClientConfig clientConfig) {\n-            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig));\n+            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig), true);\n         }\n         \n         @VisibleForTesting\n         WatermarkClient(Stream stream, SynchronizerClientFactory clientFactory) {\n-            this.client = clientFactory.createRevisionedStreamClient(\n-                    NameUtils.getMarkStreamForStream(stream.getStreamName()), \n-                    new WatermarkSerializer(), SynchronizerConfig.builder().build());\n+            this(stream, clientFactory, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de348bcc1f8954564c4366ff0a8fe55de1544fea"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5ODkxMA==", "bodyText": "removed closeclientfactory", "url": "https://github.com/pravega/pravega/pull/5343#discussion_r525198910", "createdAt": "2020-11-17T14:31:52Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "diffHunk": "@@ -387,14 +391,28 @@ boolean checkExistsInCache(Stream stream) {\n         private final ConcurrentHashMap<String, Long> inactiveWriters;\n         \n         WatermarkClient(Stream stream, ClientConfig clientConfig) {\n-            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig));\n+            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig), true);\n         }\n         \n         @VisibleForTesting\n         WatermarkClient(Stream stream, SynchronizerClientFactory clientFactory) {\n-            this.client = clientFactory.createRevisionedStreamClient(\n-                    NameUtils.getMarkStreamForStream(stream.getStreamName()), \n-                    new WatermarkSerializer(), SynchronizerConfig.builder().build());\n+            this(stream, clientFactory, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNjAwNg=="}, "originalCommit": {"oid": "de348bcc1f8954564c4366ff0a8fe55de1544fea"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjYwOTQ5OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzowNzo1MVrOH0z9OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1MTo1NFrOH010Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzOTI1Ng==", "bodyText": "Can we avoid creating a new SynchronizerClientFactory for every WatermarkClient? Every factory creates an new thread pool.", "url": "https://github.com/pravega/pravega/pull/5343#discussion_r525139256", "createdAt": "2020-11-17T13:07:51Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "diffHunk": "@@ -387,14 +391,28 @@ boolean checkExistsInCache(Stream stream) {\n         private final ConcurrentHashMap<String, Long> inactiveWriters;\n         \n         WatermarkClient(Stream stream, ClientConfig clientConfig) {\n-            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig));\n+            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de348bcc1f8954564c4366ff0a8fe55de1544fea"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE2OTY3NQ==", "bodyText": "yeah, i was trying that. i will have to restructure the code a bit to achieve that.", "url": "https://github.com/pravega/pravega/pull/5343#discussion_r525169675", "createdAt": "2020-11-17T13:51:54Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/bucket/PeriodicWatermarking.java", "diffHunk": "@@ -387,14 +391,28 @@ boolean checkExistsInCache(Stream stream) {\n         private final ConcurrentHashMap<String, Long> inactiveWriters;\n         \n         WatermarkClient(Stream stream, ClientConfig clientConfig) {\n-            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig));\n+            this(stream, SynchronizerClientFactory.withScope(stream.getScope(), clientConfig), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzOTI1Ng=="}, "originalCommit": {"oid": "de348bcc1f8954564c4366ff0a8fe55de1544fea"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4538, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}