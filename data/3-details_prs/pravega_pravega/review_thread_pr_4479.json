{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzI2ODUx", "number": 4479, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzozMDo1N1rODXmSSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo0NzowN1rODXmldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDcxMTE1OnYy", "diffSide": "RIGHT", "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzozMDo1N1rOFc-rCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0NzozN1rOFdA0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMTI3NQ==", "bodyText": "Please add @VisibleForTesting for both these methods.", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365931275", "createdAt": "2020-01-13T17:30:57Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "diffHunk": "@@ -197,6 +197,14 @@ public void close() {\n \n     //endregion\n \n+    protected FileChannel getFileChannel(Path path, StandardOpenOption openOption) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjM5MA==", "bodyText": "fixed.", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365966390", "createdAt": "2020-01-13T18:47:37Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "diffHunk": "@@ -197,6 +197,14 @@ public void close() {\n \n     //endregion\n \n+    protected FileChannel getFileChannel(Path path, StandardOpenOption openOption) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMTI3NQ=="}, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDcxNzkxOnYy", "diffSide": "RIGHT", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzozMzowNlrOFc-vIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MDoxNlrOFdA4ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjMyMg==", "bodyText": "private static", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365932322", "createdAt": "2020-01-13T17:33:06Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NzU0Ng==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365967546", "createdAt": "2020-01-13T18:50:16Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjMyMg=="}, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDcxODI0OnYy", "diffSide": "RIGHT", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzozMzoxM1rOFc-vUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0Nzo0MVrOFdA0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjM3MQ==", "bodyText": "private final", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365932371", "createdAt": "2020-01-13T17:33:13Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {\n+        FileChannel channel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjQzNg==", "bodyText": "fixed.", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365966436", "createdAt": "2020-01-13T18:47:41Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {\n+        FileChannel channel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjM3MQ=="}, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDcxODU1OnYy", "diffSide": "RIGHT", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzozMzoxOVrOFc-vhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0Nzo0OFrOFdA0rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjQyMg==", "bodyText": "private", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365932422", "createdAt": "2020-01-13T17:33:19Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {\n+        FileChannel channel;\n+\n+        @Getter\n+        @Setter\n+        long sizeToReturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjUxMQ==", "bodyText": "fixed.", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365966511", "createdAt": "2020-01-13T18:47:48Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {\n+        FileChannel channel;\n+\n+        @Getter\n+        @Setter\n+        long sizeToReturn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjQyMg=="}, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDc2MDIxOnYy", "diffSide": "RIGHT", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo0NzowN1rOFc_Jig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODozNDoyNFrOFdAdRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzOTA4Mg==", "bodyText": "Why didn't you put these tests in the FileSystemStorageTests.java class?", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365939082", "createdAt": "2020-01-13T17:47:07Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2MDUxOA==", "bodyText": "Because mock based tests are testing in a fundamentally different way. We need to inherit from FileSystemStorage and setup mock and calls explicitly before every test. Therefore keeping them in a separate file. (Plus I'll be adding more mock based tests later.)", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365960518", "createdAt": "2020-01-13T18:34:24Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzOTA4Mg=="}, "originalCommit": {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4492, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}