{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0OTcwNzQ1", "number": 5413, "title": "Issue 4903: More robust garbage collection", "bodyText": "Change log description\nMore robust garbage collection with delayed delete action.\nPurpose of the change\nFixes #4903\nWhat the code does\n\nOnly mark chunks as deleted in metadata instead of deleting them immediately.\nDelayed actual deletion .\nRecord list of failed attempt to delete chunks in metadata.\nStart a background loop, and periodically perform chunk deletion on this background thread.\n\nHow to verify it\nAll tests should pass.", "createdAt": "2020-12-09T07:24:22Z", "url": "https://github.com/pravega/pravega/pull/5413", "merged": true, "mergeCommit": {"oid": "afe45f3e50c08e990dc96c658c357be378910934"}, "closed": true, "closedAt": "2020-12-17T08:21:27Z", "author": {"login": "sachin-j-joshi"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkYIr1gH2gAyNTM0OTcwNzQ1OmVjZTA5MTE0OTA0NmNkNTE0MjA2MGEzMGMxY2RlYjZjNmZlMTkwMmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm2d7LgH2gAyNTM0OTcwNzQ1OmU1NTk0MTk0MDNhYWQzZTlkZDdkZjNkM2Q5MWE2YmMyNmMxYWE1ZDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ece091149046cd5142060a30c1cdeb6c6fe1902a", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/ece091149046cd5142060a30c1cdeb6c6fe1902a", "committedDate": "2020-12-09T05:45:43Z", "message": "Issue 4903: (SLTS) Mark the chunk metadata as 'deleted' instead of directly deleting it.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/207d75175235455b22c74ee206e0b2774b0b7a7b", "committedDate": "2020-12-09T06:34:44Z", "message": "ssue 4903: (SLTS) Separate out chunk garbage collection.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDAwOTg0", "url": "https://github.com/pravega/pravega/pull/5413#pullrequestreview-548400984", "createdAt": "2020-12-09T17:03:21Z", "commit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "state": "DISMISSED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzowMzoyMVrOICfdjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoyNzoxMlrOICgjJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MzUzNA==", "bodyText": "This sounds like a great utility in common. Mind if you add it there?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539483534", "createdAt": "2020-12-09T17:03:21Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -662,14 +634,21 @@ public boolean supportsTruncation() {\n \n     @Override\n     public void close() {\n+        close(\"metadataStore\", this.metadataStore);\n+        close(\"garbageCollector\", this.garbageCollector);\n+        this.closed.set(true);\n+    }\n+\n+    private void close(String message, AutoCloseable toClose) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4MzgxNg==", "bodyText": "Let's not pollute the logs with so many messages. Make the \"Closing\" one debug.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539483816", "createdAt": "2020-12-09T17:03:42Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -662,14 +634,21 @@ public boolean supportsTruncation() {\n \n     @Override\n     public void close() {\n+        close(\"metadataStore\", this.metadataStore);\n+        close(\"garbageCollector\", this.garbageCollector);\n+        this.closed.set(true);\n+    }\n+\n+    private void close(String message, AutoCloseable toClose) {\n         try {\n-            if (null != this.metadataStore) {\n-                this.metadataStore.close();\n+            log.info(\"{} Closing {}\", logPrefix, message);\n+            if (null != toClose) {\n+                toClose.close();\n             }\n+            log.info(\"{} Closed {}\", logPrefix, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4NDY4Mw==", "bodyText": "Why async on this tiny one? If you don't have debug enabled, this won't even do anything?\nPlease try to reduce the number of Async calls, especially if the code you execute is very simple.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539484683", "createdAt": "2020-12-09T17:04:51Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -178,7 +174,9 @@ public ChunkedSegmentStorage(int containerId, ChunkStorage chunkStorage, ChunkMe\n \n         // Now bootstrap\n         log.debug(\"{} STORAGE BOOT: Started.\", logPrefix);\n-        return this.systemJournal.bootstrap(epoch).thenRunAsync(() -> log.debug(\"{} STORAGE BOOT: Ended.\", logPrefix), executor);\n+        return this.systemJournal.bootstrap(epoch)\n+                .thenRunAsync(() -> garbageCollector.initialize())\n+                .thenRunAsync(() -> log.debug(\"{} STORAGE BOOT: Ended.\", logPrefix), executor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4NzcwNA==", "bodyText": "Why isn't this a Duration? Then you don't have to worry about converting to seconds, millis, or whatever", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539487704", "createdAt": "2020-12-09T17:08:56Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageConfig.java", "diffHunk": "@@ -124,6 +128,19 @@\n     @Getter\n     final private int lateWarningThresholdInMillis;\n \n+    /**\n+     * Minimum delay in seconds between when garbage chunks are marked for deletion and actually deleted.\n+     */\n+    @Getter\n+    final private int garbageCollectionFrequencyInSeconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4ODAwNg==", "bodyText": "Validate these settings here.\nMake sure they're not negative (or too big).", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539488006", "createdAt": "2020-12-09T17:09:20Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageConfig.java", "diffHunk": "@@ -142,6 +159,8 @@\n         long defaultMaxLength = properties.getLong(DEFAULT_ROLLOVER_SIZE);\n         this.defaultRollingPolicy = new SegmentRollingPolicy(defaultMaxLength);\n         this.lateWarningThresholdInMillis = properties.getInt(SELF_CHECK_LATE_WARNING_THRESHOLD);\n+        this.garbageCollectionFrequencyInSeconds = properties.getInt(GARBAGE_COLLECTION_DELAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4OTY1Mw==", "bodyText": "See, this is exactly why keeping that property as a Duration is a good thing.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539489653", "createdAt": "2020-12-09T17:11:33Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4OTczNQ==", "bodyText": "Null checks", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539489735", "createdAt": "2020-12-09T17:11:39Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MDg4OQ==", "bodyText": "Make this class extend from AbstractThreadPoolService and follow that pattern. See StorageWriter.java for an example.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539490889", "createdAt": "2020-12-09T17:13:07Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MTMzNw==", "bodyText": "There is no need for this pattern here. Please get rid of CompletableFuture.completedFuture().thenCompose", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539491337", "createdAt": "2020-12-09T17:13:45Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MTY0OA==", "bodyText": "This will double-log the exception. Remove the second {}.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539491648", "createdAt": "2020-12-09T17:14:12Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MjQxOQ==", "bodyText": "How will garbage collection work across failover? This time won't persist in that case.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539492419", "createdAt": "2020-12-09T17:15:12Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MjgwOA==", "bodyText": "Why is this a CompletableFuture? Change this method to not return this.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539492808", "createdAt": "2020-12-09T17:15:41Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MzI2MA==", "bodyText": "Properly document the behavior of this method if it's suspended, background ,etc.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539493260", "createdAt": "2020-12-09T17:16:20Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MzM5OQ==", "bodyText": "Log it. (Debug)", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539493399", "createdAt": "2020-12-09T17:16:32Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        if (suspended.get() && isBackground) {\n+            return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NDE3Nw==", "bodyText": "I don't know how you are planning to unit test this, but I would take a constructor that provides a Supplier<Long> getTimeMillis which I can use in my tests. Then your default constructor can pass System::currentTimeMillis to that arg.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539494177", "createdAt": "2020-12-09T17:17:29Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        if (suspended.get() && isBackground) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        val currentTime = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NTQ0Nw==", "bodyText": "Why is garbageChunks a Map? Are you expecting to insert duplicates (that would smell like a bug).\nI suggest you add a sorted list or something, sort by time, and then in this list you only need to loop through those items that need deletion (i.e, do not do an O(n) lookup every time).", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539495447", "createdAt": "2020-12-09T17:19:09Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        if (suspended.get() && isBackground) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        val currentTime = System.currentTimeMillis();\n+        val chunksToDelete = new ArrayList<String>();\n+        int count = 0;\n+        for (val entry : garbageChunks.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NjE0MQ==", "bodyText": "If you do a sorted list, you may even be able to compress this whole block into a stream() with limit and filter.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539496141", "createdAt": "2020-12-09T17:19:57Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        if (suspended.get() && isBackground) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        val currentTime = System.currentTimeMillis();\n+        val chunksToDelete = new ArrayList<String>();\n+        int count = 0;\n+        for (val entry : garbageChunks.entrySet()) {\n+            if (canDelete(entry.getValue(), currentTime)) {\n+                chunksToDelete.add(entry.getKey());\n+                // Throttle how many chunks are deleted at once.\n+                if (++count >= maxItems) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5Njg3MA==", "bodyText": "Which executor are you running this on? Most likely it will go onto ForkJoinPool.commonPool() if you don't explicitly pass one.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539496870", "createdAt": "2020-12-09T17:20:58Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        if (suspended.get() && isBackground) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        val currentTime = System.currentTimeMillis();\n+        val chunksToDelete = new ArrayList<String>();\n+        int count = 0;\n+        for (val entry : garbageChunks.entrySet()) {\n+            if (canDelete(entry.getValue(), currentTime)) {\n+                chunksToDelete.add(entry.getKey());\n+                // Throttle how many chunks are deleted at once.\n+                if (++count >= maxItems) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        for (val chunkToDelete : chunksToDelete) {\n+            val txn = chunkedSegmentStorage.getMetadataStore().beginTransaction(false, chunkToDelete);\n+            val future =\n+                    txn.get(chunkToDelete)\n+                    .thenComposeAsync( metadata -> {\n+                            val chunkMetadata = (ChunkMetadata) metadata;\n+                            // Check whether the chunk is marked as inactive\n+                            if (!chunkMetadata.isActive()) {\n+                                return chunkedSegmentStorage.getChunkStorage().openWrite(chunkToDelete)\n+                                        .thenComposeAsync(chunkedSegmentStorage.getChunkStorage()::delete, chunkedSegmentStorage.getExecutor())\n+                                        .thenRunAsync(() -> {\n+                                            garbageChunks.remove(chunkToDelete);\n+                                            txn.delete(chunkToDelete);\n+                                            log.debug(\"{} deleteGarbage - deleted chunk={}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                        }, chunkedSegmentStorage.getExecutor())\n+                                        .thenComposeAsync(v -> txn.commit(), chunkedSegmentStorage.getExecutor())\n+                                        .exceptionally(e -> {\n+                                            val ex = Exceptions.unwrap(e);\n+                                            if (ex instanceof ChunkNotFoundException) {\n+                                                log.debug(\"{} deleteGarbage - Could not delete garbage chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                            } else {\n+                                                log.warn(\"{} deleteGarbage - Could not delete garbage chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                            }\n+                                            return null;\n+                                        });\n+                            } else {\n+                                log.info(\"{} deleteGarbage - Chunk is not marked as garbage{}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                return CompletableFuture.completedFuture(null);\n+                            }\n+                        })\n+                    .whenCompleteAsync((v, ex) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NzY5MA==", "bodyText": "In this close, you should probably wait for your run future to complete as well. The contract for close is that when it exits, any activities started by this instance will have ended.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539497690", "createdAt": "2020-12-09T17:22:09Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ */\n+@Slf4j\n+public class GarbageCollector implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final ConcurrentHashMap<String, Long> garbageChunks = new ConcurrentHashMap<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    private final long delayInMillis;\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        this.chunkedSegmentStorage = chunkedSegmentStorage;\n+        this.config = config;\n+        this.delayInMillis = Duration.ofSeconds(config.getGarbageCollectionFrequencyInSeconds()).toMillis();\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        loopFuture = run();\n+    }\n+\n+    public CompletableFuture<Void> run() {\n+        return Futures.loop(\n+                () -> !closed.get(),\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()),\n+                                chunkedSegmentStorage.getExecutor())\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run {}.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }), chunkedSegmentStorage.getExecutor());\n+    }\n+\n+    /**\n+     * Sets whether backgound claenup is suspended or not.\n+     * @param value\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    CompletableFuture<Void> addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+        chunksToDelete.forEach(chunkToDelete -> garbageChunks.put(chunkToDelete, currentTime));\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        if (suspended.get() && isBackground) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        val currentTime = System.currentTimeMillis();\n+        val chunksToDelete = new ArrayList<String>();\n+        int count = 0;\n+        for (val entry : garbageChunks.entrySet()) {\n+            if (canDelete(entry.getValue(), currentTime)) {\n+                chunksToDelete.add(entry.getKey());\n+                // Throttle how many chunks are deleted at once.\n+                if (++count >= maxItems) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        for (val chunkToDelete : chunksToDelete) {\n+            val txn = chunkedSegmentStorage.getMetadataStore().beginTransaction(false, chunkToDelete);\n+            val future =\n+                    txn.get(chunkToDelete)\n+                    .thenComposeAsync( metadata -> {\n+                            val chunkMetadata = (ChunkMetadata) metadata;\n+                            // Check whether the chunk is marked as inactive\n+                            if (!chunkMetadata.isActive()) {\n+                                return chunkedSegmentStorage.getChunkStorage().openWrite(chunkToDelete)\n+                                        .thenComposeAsync(chunkedSegmentStorage.getChunkStorage()::delete, chunkedSegmentStorage.getExecutor())\n+                                        .thenRunAsync(() -> {\n+                                            garbageChunks.remove(chunkToDelete);\n+                                            txn.delete(chunkToDelete);\n+                                            log.debug(\"{} deleteGarbage - deleted chunk={}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                        }, chunkedSegmentStorage.getExecutor())\n+                                        .thenComposeAsync(v -> txn.commit(), chunkedSegmentStorage.getExecutor())\n+                                        .exceptionally(e -> {\n+                                            val ex = Exceptions.unwrap(e);\n+                                            if (ex instanceof ChunkNotFoundException) {\n+                                                log.debug(\"{} deleteGarbage - Could not delete garbage chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                            } else {\n+                                                log.warn(\"{} deleteGarbage - Could not delete garbage chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                            }\n+                                            return null;\n+                                        });\n+                            } else {\n+                                log.info(\"{} deleteGarbage - Chunk is not marked as garbage{}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                return CompletableFuture.completedFuture(null);\n+                            }\n+                        })\n+                    .whenCompleteAsync((v, ex) -> {\n+                        txn.close();\n+                    });\n+                    futures.add(future);\n+        }\n+        return Futures.allOf(futures);\n+    }\n+\n+    /**\n+     * Marks given chunk as not garbage.\n+     *\n+     * @param chunkName Name of the chunk.\n+     */\n+    void removeFromGarbage(String chunkName) {\n+        garbageChunks.remove(chunkName);\n+    }\n+\n+    boolean canDelete(long time, long currentTime) {\n+        return delayInMillis < (currentTime - time);\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        closed.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMDA0MA==", "bodyText": "I would not be making these public. Please make sure that any setFlag/getFlag method is private to the class(es) they are defined in and you expose proper methods to set them. Nobody likes to deal with flags and masks.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539500040", "createdAt": "2020-12-09T17:25:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/Constants.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+/**\n+ * Class that defines various constants.\n+ */\n+public final class Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMDU4MQ==", "bodyText": "Add @Cleanup to all the objects here that implement AutoCloseable", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539500581", "createdAt": "2020-12-09T17:26:11Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageMockTests.java", "diffHunk": "@@ -326,13 +326,16 @@ public void testIOExceptionDuringWrite() throws Exception {\n     public void testFileNotFoundExceptionDuringGarbageCollection() throws Exception {\n         String testSegmentName = \"test\";\n         SegmentRollingPolicy policy = new SegmentRollingPolicy(2); // Force rollover after every 2 byte.\n-        val config = ChunkedSegmentStorageConfig.DEFAULT_CONFIG.toBuilder().defaultRollingPolicy(policy).build();\n+        val config = ChunkedSegmentStorageConfig.DEFAULT_CONFIG.toBuilder()\n+                .garbageCollectionFrequencyInSeconds(0)\n+                .build();\n \n         BaseMetadataStore spyMetadataStore = spy(new InMemoryMetadataStore(executorService()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMDk5MA==", "bodyText": "Does this mean that your test takes 8s or more to run?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539500990", "createdAt": "2020-12-09T17:26:43Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageMockTests.java", "diffHunk": "@@ -345,20 +348,26 @@ public void testFileNotFoundExceptionDuringGarbageCollection() throws Exception\n         doThrow(exceptionToThrow).when(spyChunkStorage).doDelete(any());\n \n         chunkedSegmentStorage.delete(h1, null).get();\n+        Assert.assertEquals(5, chunkedSegmentStorage.getGarbageCollector().getGarbageChunks().size());\n+        chunkedSegmentStorage.getGarbageCollector().deleteGarbage(false, 100).get();\n         verify(spyChunkStorage, times(5)).doDelete(any());\n     }\n \n     @Test\n     public void testExceptionDuringGarbageCollection() throws Exception {\n         String testSegmentName = \"test\";\n         SegmentRollingPolicy policy = new SegmentRollingPolicy(2); // Force rollover after every 2 byte.\n-        val config = ChunkedSegmentStorageConfig.DEFAULT_CONFIG.toBuilder().defaultRollingPolicy(policy).build();\n+        val config = ChunkedSegmentStorageConfig.DEFAULT_CONFIG.toBuilder()\n+                .defaultRollingPolicy(policy)\n+                .garbageCollectionFrequencyInSeconds(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMTM1MA==", "bodyText": "Commented out code. Delete or reinstate.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r539501350", "createdAt": "2020-12-09T17:27:12Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java", "diffHunk": "@@ -1785,15 +1788,20 @@ public void testTruncateWithFailover() throws Exception {\n         // Make sure to open segment with new instance before writing garbage to old instance.\n         hWrite = newTestContext.chunkedSegmentStorage.openWrite(testSegmentName).get();\n         newTestContext.chunkedSegmentStorage.truncate(hWrite, offset, null).get();\n+        newTestContext.chunkedSegmentStorage.getGarbageCollector().setSuspended(true);\n+        newTestContext.chunkedSegmentStorage.getGarbageCollector().deleteGarbage(false, 100).get();\n         //checkDataRead(testSegmentName, testContext, offset, 0);\n         TestUtils.checkSegmentBounds(newTestContext.metadataStore, testSegmentName, offset, offset);\n \n         AssertExtensions.assertFutureThrows(\"openWrite() allowed after fencing\",\n                 oldTestCotext.chunkedSegmentStorage.openWrite(testSegmentName),\n                 ex -> ex instanceof StorageNotPrimaryException);\n+        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207d75175235455b22c74ee206e0b2774b0b7a7b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4ddb347bb5193d00fd9afe2c43703fd6b2d13f", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/3c4ddb347bb5193d00fd9afe2c43703fd6b2d13f", "committedDate": "2020-12-10T16:08:05Z", "message": "Issue 4903: (SLTS) Separate out chunk garbage collection.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/85088f1862ecd36a10c967d992ac88a11f99c7c3", "committedDate": "2020-12-10T17:50:45Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4903-improve-garbage-collection-2\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>\n\n# Conflicts:\n#\tsegmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f80c3afd332d0d31e730c5ef0fa58441be791f7d", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/f80c3afd332d0d31e730c5ef0fa58441be791f7d", "committedDate": "2020-12-11T19:09:38Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4903-improve-garbage-collection-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNDkyOTA3", "url": "https://github.com/pravega/pravega/pull/5413#pullrequestreview-550492907", "createdAt": "2020-12-11T19:00:32Z", "commit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTowMDozMlrOIEGCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMDo1MTo1MFrOIEdxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2NDAzNQ==", "bodyText": "Logging this at the end of garbageCollector.initialize() would have the same effect without doing another computation stage.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541164035", "createdAt": "2020-12-11T19:00:32Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -178,7 +174,9 @@ public ChunkedSegmentStorage(int containerId, ChunkStorage chunkStorage, ChunkMe\n \n         // Now bootstrap\n         log.debug(\"{} STORAGE BOOT: Started.\", logPrefix);\n-        return this.systemJournal.bootstrap(epoch).thenRunAsync(() -> log.debug(\"{} STORAGE BOOT: Ended.\", logPrefix), executor);\n+        return this.systemJournal.bootstrap(epoch)\n+                .thenRun(() -> garbageCollector.initialize())\n+                .thenRun(() -> log.debug(\"{} STORAGE BOOT: Ended.\", logPrefix));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2NzQxMg==", "bodyText": "Do we need this?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541167412", "createdAt": "2020-12-11T19:03:42Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -254,6 +252,8 @@ public void initialize(long containerEpoch) {\n                                 .thenComposeAsync(chunkInfo -> {\n                                     Preconditions.checkState(chunkInfo != null, \"chunkInfo for last chunk must not be null.\");\n                                     Preconditions.checkState(lastChunk != null, \"last chunk metadata must not be null.\");\n+                                    // Mark chunk as \"not garbage\" if present.\n+                                    //garbageCollector.removeFromGarbage(lastChunkName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE3MzkyOQ==", "bodyText": "Nit: Maybe parallelism instead of concurrency?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541173929", "createdAt": "2020-12-11T19:08:56Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageConfig.java", "diffHunk": "@@ -36,6 +38,11 @@\n     public static final Property<Boolean> INLINE_DEFRAG_ENABLED = Property.named(\"defrag.inline.enable\", true);\n     public static final Property<Long> DEFAULT_ROLLOVER_SIZE = Property.named(\"metadata.rollover.size.bytes.max\", SegmentRollingPolicy.MAX_CHUNK_LENGTH);\n     public static final Property<Integer> SELF_CHECK_LATE_WARNING_THRESHOLD = Property.named(\"self.check.late\", 100);\n+    public static final Property<Integer> GARBAGE_COLLECTION_DELAY = Property.named(\"garbage.collection.delay.seconds\", 60);\n+    public static final Property<Integer> GARBAGE_COLLECTION_CONCURRENCY = Property.named(\"garbage.collection.concurrency\", 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0ODU1Ng==", "bodyText": "Rather than just advising, maybe you could a test to verify that this is not larger than half of the storage pool size or something along these lines. Then, you can decide whether to throw in this case (so, do not allow large thread pools for garbage collection) or log it as a warning.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541548556", "createdAt": "2020-12-12T10:21:31Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageConfig.java", "diffHunk": "@@ -124,6 +135,32 @@\n     @Getter\n     final private int lateWarningThresholdInMillis;\n \n+    /**\n+     * Minimum delay in seconds between when garbage chunks are marked for deletion and actually deleted.\n+     */\n+    @Getter\n+    final private Duration garbageCollectionDelay;\n+\n+    /**\n+     * Number of chunks deleted concurrently.\n+     * This number should be small enough so that it does interfere foreground requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MDg1MQ==", "bodyText": "Please, create 2 Git issues to keep track of these problems in the future and add them to the comments.\nAlso, the \"scans all records\" part sounds scary in terms of efficiency, we need to think of a better approach to do that.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541550851", "createdAt": "2020-12-12T10:37:09Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * 1. Various SLTS operations requesting deletes\n+ * 2. Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).\n+ * 3. Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTA0Ng==", "bodyText": "We discussed that this is a bug, as you are not incrementing the size of the queue inside the loop, right?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541551046", "createdAt": "2020-12-12T10:38:38Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * 1. Various SLTS operations requesting deletes\n+ * 2. Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).\n+ * 3. Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented).\n+ *\n+ * The background task throttles itself in two ways.\n+ * 1. It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground SLTS tasks.\n+ * 2. It limits the number of items in the queue.\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     * This queue needs to be lock free, hence ConcurrentLinkedQueue.\n+     */\n+    @Getter\n+    private final ConcurrentLinkedQueue<GarbageChunkInfo> garbageChunks = new ConcurrentLinkedQueue<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on ConcurrentLinkedQueue.\n+     */\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        super(\"io.pravega.segmentstore.storage.chunklayer.GarbageCollector\", (ScheduledExecutorService) chunkedSegmentStorage.getExecutor());\n+        this.chunkedSegmentStorage = Preconditions.checkNotNull(chunkedSegmentStorage, \"chunkedSegmentStorage\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync( v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            chunksToDelete.forEach(chunkToDelete -> garbageChunks.add(new GarbageChunkInfo(chunkToDelete, currentTime)));\n+            queueSize.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTI1Mg==", "bodyText": "This is dangerous and can flood all the Segment Store logs, leading to lose logs due to their sheer size and/or making debug much harder. Please, add a single log line with the length of chunksToDelete if you want.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541551252", "createdAt": "2020-12-12T10:40:02Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * 1. Various SLTS operations requesting deletes\n+ * 2. Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).\n+ * 3. Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented).\n+ *\n+ * The background task throttles itself in two ways.\n+ * 1. It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground SLTS tasks.\n+ * 2. It limits the number of items in the queue.\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     * This queue needs to be lock free, hence ConcurrentLinkedQueue.\n+     */\n+    @Getter\n+    private final ConcurrentLinkedQueue<GarbageChunkInfo> garbageChunks = new ConcurrentLinkedQueue<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on ConcurrentLinkedQueue.\n+     */\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        super(\"io.pravega.segmentstore.storage.chunklayer.GarbageCollector\", (ScheduledExecutorService) chunkedSegmentStorage.getExecutor());\n+        this.chunkedSegmentStorage = Preconditions.checkNotNull(chunkedSegmentStorage, \"chunkedSegmentStorage\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync( v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            chunksToDelete.forEach(chunkToDelete -> garbageChunks.add(new GarbageChunkInfo(chunkToDelete, currentTime)));\n+            queueSize.incrementAndGet();\n+        } else {\n+            for (val chunkToDelete : chunksToDelete) {\n+                log.warn(\"{} deleteGarbage - Queue full. Could not delete garbage. chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTg1Nw==", "bodyText": "We discussed that this could lead to another problem: if the chunk is deleted and then something fails, the metadata will continue reflecting that the chunk is there and needs deletion. The same chunk will be picked, which has been deleted from storage, and the deletion will fail, skipping again the deletion in metadata. So this could lead to an infinite loop. Please, either modify this logic to handle the metadata deletion first (so in the worst case if there is a failure after that we would leave one orphan chunk to delete), or handle the case in which the chunk deletion succeeds bu there is an exception just after that, so we can eventually delete it from metadata too and avoid the infinite retries on that chunk.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541551857", "createdAt": "2020-12-12T10:44:05Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * 1. Various SLTS operations requesting deletes\n+ * 2. Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).\n+ * 3. Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented).\n+ *\n+ * The background task throttles itself in two ways.\n+ * 1. It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground SLTS tasks.\n+ * 2. It limits the number of items in the queue.\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     * This queue needs to be lock free, hence ConcurrentLinkedQueue.\n+     */\n+    @Getter\n+    private final ConcurrentLinkedQueue<GarbageChunkInfo> garbageChunks = new ConcurrentLinkedQueue<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on ConcurrentLinkedQueue.\n+     */\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        super(\"io.pravega.segmentstore.storage.chunklayer.GarbageCollector\", (ScheduledExecutorService) chunkedSegmentStorage.getExecutor());\n+        this.chunkedSegmentStorage = Preconditions.checkNotNull(chunkedSegmentStorage, \"chunkedSegmentStorage\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync( v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            chunksToDelete.forEach(chunkToDelete -> garbageChunks.add(new GarbageChunkInfo(chunkToDelete, currentTime)));\n+            queueSize.incrementAndGet();\n+        } else {\n+            for (val chunkToDelete : chunksToDelete) {\n+                log.warn(\"{} deleteGarbage - Queue full. Could not delete garbage. chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * This method retrieves a few eligible chunks for deletion at a time.\n+     * The chunk is deleted only if the metadata for it does not exist or is marked inactive.\n+     * If there are any errors then failed chunk is enqueued back.\n+     * If suspended or there are no items then it \"sleeps\" for time specified by configuration.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        // Sleep if suspended.\n+        if (suspended.get() && isBackground) {\n+            log.info(\"{} deleteGarbage - suspended - sleeping for {}.\", chunkedSegmentStorage.getLogPrefix(), config.getGarbageCollectionDelay());\n+            return Futures.delayedFuture(config.getGarbageCollectionSleep(), executor);\n+        }\n+\n+        // Find chunks to delete.\n+        val currentTime = System.currentTimeMillis();\n+        val chunksToDelete = new ArrayList<GarbageChunkInfo>();\n+        int count = 0;\n+        val iterator = garbageChunks.iterator();\n+        while (iterator.hasNext()) {\n+            GarbageChunkInfo info = iterator.next();\n+            if (info == null || count >= maxItems) {\n+                break;\n+            }\n+            if (canDelete(info.getDeletedTime(), currentTime)) {\n+                queueSize.decrementAndGet();\n+                chunksToDelete.add(info);\n+                iterator.remove();\n+                count++;\n+            }\n+        }\n+\n+        // Sleep if no chunks to delete.\n+        if (count == 0) {\n+            log.debug(\"{} deleteGarbage - no work - sleeping for {}.\", chunkedSegmentStorage.getLogPrefix(), config.getGarbageCollectionDelay());\n+            return Futures.delayedFuture(config.getGarbageCollectionSleep(), executor);\n+        }\n+\n+        // For each chunk delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        for (val infoToDelete : chunksToDelete) {\n+            val chunkToDelete = infoToDelete.name;\n+            val txn = chunkedSegmentStorage.getMetadataStore().beginTransaction(false, chunkToDelete);\n+            val future =\n+                    txn.get(infoToDelete.name)\n+                    .thenComposeAsync( metadata -> {\n+                            val chunkMetadata = (ChunkMetadata) metadata;\n+                            // Delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+                            boolean shouldDelete = (null == chunkMetadata) ? true : !chunkMetadata.isActive();\n+                            // Check whether the chunk is marked as inactive\n+                            if (shouldDelete) {\n+                                return chunkedSegmentStorage.getChunkStorage().openWrite(chunkToDelete)\n+                                        .thenComposeAsync(chunkedSegmentStorage.getChunkStorage()::delete, executor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MjI4NA==", "bodyText": "If we have, let's say, an IOError on that chunk that is persistent, does it mean that we will try to garbage collect it forever?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541552284", "createdAt": "2020-12-12T10:46:56Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * 1. Various SLTS operations requesting deletes\n+ * 2. Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).\n+ * 3. Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented).\n+ *\n+ * The background task throttles itself in two ways.\n+ * 1. It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground SLTS tasks.\n+ * 2. It limits the number of items in the queue.\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     * This queue needs to be lock free, hence ConcurrentLinkedQueue.\n+     */\n+    @Getter\n+    private final ConcurrentLinkedQueue<GarbageChunkInfo> garbageChunks = new ConcurrentLinkedQueue<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on ConcurrentLinkedQueue.\n+     */\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        super(\"io.pravega.segmentstore.storage.chunklayer.GarbageCollector\", (ScheduledExecutorService) chunkedSegmentStorage.getExecutor());\n+        this.chunkedSegmentStorage = Preconditions.checkNotNull(chunkedSegmentStorage, \"chunkedSegmentStorage\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync( v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            chunksToDelete.forEach(chunkToDelete -> garbageChunks.add(new GarbageChunkInfo(chunkToDelete, currentTime)));\n+            queueSize.incrementAndGet();\n+        } else {\n+            for (val chunkToDelete : chunksToDelete) {\n+                log.warn(\"{} deleteGarbage - Queue full. Could not delete garbage. chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * This method retrieves a few eligible chunks for deletion at a time.\n+     * The chunk is deleted only if the metadata for it does not exist or is marked inactive.\n+     * If there are any errors then failed chunk is enqueued back.\n+     * If suspended or there are no items then it \"sleeps\" for time specified by configuration.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        // Sleep if suspended.\n+        if (suspended.get() && isBackground) {\n+            log.info(\"{} deleteGarbage - suspended - sleeping for {}.\", chunkedSegmentStorage.getLogPrefix(), config.getGarbageCollectionDelay());\n+            return Futures.delayedFuture(config.getGarbageCollectionSleep(), executor);\n+        }\n+\n+        // Find chunks to delete.\n+        val currentTime = System.currentTimeMillis();\n+        val chunksToDelete = new ArrayList<GarbageChunkInfo>();\n+        int count = 0;\n+        val iterator = garbageChunks.iterator();\n+        while (iterator.hasNext()) {\n+            GarbageChunkInfo info = iterator.next();\n+            if (info == null || count >= maxItems) {\n+                break;\n+            }\n+            if (canDelete(info.getDeletedTime(), currentTime)) {\n+                queueSize.decrementAndGet();\n+                chunksToDelete.add(info);\n+                iterator.remove();\n+                count++;\n+            }\n+        }\n+\n+        // Sleep if no chunks to delete.\n+        if (count == 0) {\n+            log.debug(\"{} deleteGarbage - no work - sleeping for {}.\", chunkedSegmentStorage.getLogPrefix(), config.getGarbageCollectionDelay());\n+            return Futures.delayedFuture(config.getGarbageCollectionSleep(), executor);\n+        }\n+\n+        // For each chunk delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        for (val infoToDelete : chunksToDelete) {\n+            val chunkToDelete = infoToDelete.name;\n+            val txn = chunkedSegmentStorage.getMetadataStore().beginTransaction(false, chunkToDelete);\n+            val future =\n+                    txn.get(infoToDelete.name)\n+                    .thenComposeAsync( metadata -> {\n+                            val chunkMetadata = (ChunkMetadata) metadata;\n+                            // Delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+                            boolean shouldDelete = (null == chunkMetadata) ? true : !chunkMetadata.isActive();\n+                            // Check whether the chunk is marked as inactive\n+                            if (shouldDelete) {\n+                                return chunkedSegmentStorage.getChunkStorage().openWrite(chunkToDelete)\n+                                        .thenComposeAsync(chunkedSegmentStorage.getChunkStorage()::delete, executor)\n+                                        .thenRunAsync(() -> {\n+                                            if (null != metadata) {\n+                                                txn.delete(chunkToDelete);\n+                                            }\n+                                            log.debug(\"{} deleteGarbage - deleted chunk={}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                        }, executor)\n+                                        .thenComposeAsync(v -> txn.commit(), executor)\n+                                        .handleAsync((v, e) -> {\n+                                            if (e != null) {\n+                                                val ex = Exceptions.unwrap(e);\n+                                                if (ex instanceof ChunkNotFoundException) {\n+                                                    // Ignore - nothing to do here.\n+                                                    log.debug(\"{} deleteGarbage - Could not delete garbage chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                                } else {\n+                                                    log.warn(\"{} deleteGarbage - Could not delete garbage chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+                                                    // Queue it back.\n+                                                    addToGarbage(Collections.singleton(chunkToDelete));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MjQ2Ng==", "bodyText": "Also, the fact that we haven't found this problem in the test cases of this PR makes me feel that more effort is necessary on testing the potential scenarios that could happen to the garbage collector (fail in chunk deletion but not in metadata, the other way raound, etc.).", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541552466", "createdAt": "2020-12-12T10:48:18Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * 1. Various SLTS operations requesting deletes\n+ * 2. Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).\n+ * 3. Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented).\n+ *\n+ * The background task throttles itself in two ways.\n+ * 1. It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground SLTS tasks.\n+ * 2. It limits the number of items in the queue.\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     * This queue needs to be lock free, hence ConcurrentLinkedQueue.\n+     */\n+    @Getter\n+    private final ConcurrentLinkedQueue<GarbageChunkInfo> garbageChunks = new ConcurrentLinkedQueue<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on ConcurrentLinkedQueue.\n+     */\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        super(\"io.pravega.segmentstore.storage.chunklayer.GarbageCollector\", (ScheduledExecutorService) chunkedSegmentStorage.getExecutor());\n+        this.chunkedSegmentStorage = Preconditions.checkNotNull(chunkedSegmentStorage, \"chunkedSegmentStorage\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync( v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            chunksToDelete.forEach(chunkToDelete -> garbageChunks.add(new GarbageChunkInfo(chunkToDelete, currentTime)));\n+            queueSize.incrementAndGet();\n+        } else {\n+            for (val chunkToDelete : chunksToDelete) {\n+                log.warn(\"{} deleteGarbage - Queue full. Could not delete garbage. chunk {}.\", chunkedSegmentStorage.getLogPrefix(), chunkToDelete);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * This method retrieves a few eligible chunks for deletion at a time.\n+     * The chunk is deleted only if the metadata for it does not exist or is marked inactive.\n+     * If there are any errors then failed chunk is enqueued back.\n+     * If suspended or there are no items then it \"sleeps\" for time specified by configuration.\n+     *\n+     * @param isBackground True if the caller is backgound task else False if called explicitly.\n+     * @param maxItems Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Void> deleteGarbage(boolean isBackground, int maxItems) {\n+        // Sleep if suspended.\n+        if (suspended.get() && isBackground) {\n+            log.info(\"{} deleteGarbage - suspended - sleeping for {}.\", chunkedSegmentStorage.getLogPrefix(), config.getGarbageCollectionDelay());\n+            return Futures.delayedFuture(config.getGarbageCollectionSleep(), executor);\n+        }\n+\n+        // Find chunks to delete.\n+        val currentTime = System.currentTimeMillis();\n+        val chunksToDelete = new ArrayList<GarbageChunkInfo>();\n+        int count = 0;\n+        val iterator = garbageChunks.iterator();\n+        while (iterator.hasNext()) {\n+            GarbageChunkInfo info = iterator.next();\n+            if (info == null || count >= maxItems) {\n+                break;\n+            }\n+            if (canDelete(info.getDeletedTime(), currentTime)) {\n+                queueSize.decrementAndGet();\n+                chunksToDelete.add(info);\n+                iterator.remove();\n+                count++;\n+            }\n+        }\n+\n+        // Sleep if no chunks to delete.\n+        if (count == 0) {\n+            log.debug(\"{} deleteGarbage - no work - sleeping for {}.\", chunkedSegmentStorage.getLogPrefix(), config.getGarbageCollectionDelay());\n+            return Futures.delayedFuture(config.getGarbageCollectionSleep(), executor);\n+        }\n+\n+        // For each chunk delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        for (val infoToDelete : chunksToDelete) {\n+            val chunkToDelete = infoToDelete.name;\n+            val txn = chunkedSegmentStorage.getMetadataStore().beginTransaction(false, chunkToDelete);\n+            val future =\n+                    txn.get(infoToDelete.name)\n+                    .thenComposeAsync( metadata -> {\n+                            val chunkMetadata = (ChunkMetadata) metadata;\n+                            // Delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+                            boolean shouldDelete = (null == chunkMetadata) ? true : !chunkMetadata.isActive();\n+                            // Check whether the chunk is marked as inactive\n+                            if (shouldDelete) {\n+                                return chunkedSegmentStorage.getChunkStorage().openWrite(chunkToDelete)\n+                                        .thenComposeAsync(chunkedSegmentStorage.getChunkStorage()::delete, executor)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTg1Nw=="}, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MjU3Nw==", "bodyText": "Please, add a test for the enforcement of queue size limits of Garbage Collector, as the fact that no test is failing due to this makes me feel that it needs better coverage.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541552577", "createdAt": "2020-12-12T10:49:12Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * 1. Various SLTS operations requesting deletes\n+ * 2. Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).\n+ * 3. Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented).\n+ *\n+ * The background task throttles itself in two ways.\n+ * 1. It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground SLTS tasks.\n+ * 2. It limits the number of items in the queue.\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     * This queue needs to be lock free, hence ConcurrentLinkedQueue.\n+     */\n+    @Getter\n+    private final ConcurrentLinkedQueue<GarbageChunkInfo> garbageChunks = new ConcurrentLinkedQueue<>();\n+\n+    private final ChunkedSegmentStorage chunkedSegmentStorage;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on ConcurrentLinkedQueue.\n+     */\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param chunkedSegmentStorage Instance of {@link ChunkedSegmentStorage}.\n+     * @param config Configuration to use.\n+     */\n+    public GarbageCollector(ChunkedSegmentStorage chunkedSegmentStorage, ChunkedSegmentStorageConfig config) {\n+        super(\"io.pravega.segmentstore.storage.chunklayer.GarbageCollector\", (ScheduledExecutorService) chunkedSegmentStorage.getExecutor());\n+        this.chunkedSegmentStorage = Preconditions.checkNotNull(chunkedSegmentStorage, \"chunkedSegmentStorage\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> CompletableFuture.completedFuture(null)\n+                        .thenComposeAsync( v -> deleteGarbage(true, config.getGarbageCollectionConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{} Error during run.\", chunkedSegmentStorage.getLogPrefix(), ex);\n+                            }\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * collect the garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = System.currentTimeMillis();\n+\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            chunksToDelete.forEach(chunkToDelete -> garbageChunks.add(new GarbageChunkInfo(chunkToDelete, currentTime)));\n+            queueSize.incrementAndGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTA0Ng=="}, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1Mjk5Nw==", "bodyText": "The name and description of this class is too generic. Please, refactor its name to its actual scope, like StorageConstants or ChunkedStorageConstants or something of the sort. Note that if we lookup for \"Constants\" in the IDE, it will take us more effort to understand what this class is used for, as the name itself is not helping.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r541552997", "createdAt": "2020-12-12T10:51:50Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/Constants.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+/**\n+ * Class that defines various constants.\n+ */\n+final class Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b150f5b49781b32e386669a062cde66cf0b749fc", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/b150f5b49781b32e386669a062cde66cf0b749fc", "committedDate": "2020-12-12T20:29:42Z", "message": "Issue 4903: (SLTS) Use DelayQueue.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37ff7cb3d4f55fc0628b58bd83b66880c7faadb6", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/37ff7cb3d4f55fc0628b58bd83b66880c7faadb6", "committedDate": "2020-12-12T20:44:49Z", "message": "Issue 4903: (SLTS) Code cleanup.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36673b04af930de0ee9dbea91105e40c1f641b4e", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/36673b04af930de0ee9dbea91105e40c1f641b4e", "committedDate": "2020-12-13T23:50:54Z", "message": "Issue 4903: (SLTS) Code cleanup.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "656bd07e83949db8e186818d945a395ee601b72d", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/656bd07e83949db8e186818d945a395ee601b72d", "committedDate": "2020-12-14T20:53:12Z", "message": "Issue 4903: (SLTS) Limit number of attempts to delete.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ebaa9a05e6180979ad28dbec2cd5529e07a66bb", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/0ebaa9a05e6180979ad28dbec2cd5529e07a66bb", "committedDate": "2020-12-14T22:25:50Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4903-improve-garbage-collection-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjkwMjA0", "url": "https://github.com/pravega/pravega/pull/5413#pullrequestreview-551690204", "createdAt": "2020-12-14T17:36:12Z", "commit": {"oid": "36673b04af930de0ee9dbea91105e40c1f641b4e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozNjoxM1rOIFcGgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjozOTo1M1rOIGU0DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NDIwOA==", "bodyText": "This seems a expensive operation (submit a new task to the pool) just for a log line, don't you think? Perhaps we can put this log in deleteGarbage and keep the pool queue shorter.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r542574208", "createdAt": "2020-12-14T17:36:13Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,378 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.primitives.Ints;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.DelayQueue;\n+import java.util.concurrent.Delayed;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * <ol>\n+ * <li>Various ChunkedSegmentStorage operations requesting deletes.</li>\n+ * <li>Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).</li>\n+ * <li>Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented)</li>\n+ * </ol>\n+ *\n+ * The background task throttles itself in two ways.\n+ * <ol>\n+ * <li>It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground Storage calls. </li>\n+ * <li>It limits the number of items in the queue.</li>\n+ * </ol>\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final DelayQueue<GarbageChunkInfo> garbageChunks = new DelayQueue<>();\n+\n+    private final ChunkStorage chunkStorage;\n+\n+    private final ChunkMetadataStore metadataStore;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on DelayQueue.\n+     */\n+    @Getter\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    @Getter\n+    private final AtomicLong iterationId = new AtomicLong();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    private final Supplier<Long> currentTimeSupplier;\n+\n+    private final Supplier<CompletableFuture<Void>> delaySupplier;\n+\n+    private final ScheduledExecutorService storageExecutor;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param executorService     ScheduledExecutorService to use.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService executorService\n+                            ) {\n+        this(containerId, chunkStorage, metadataStore, config, executorService,\n+                System::currentTimeMillis,\n+                () -> Futures.delayedFuture(config.getGarbageCollectionSleep(), executorService));\n+    }\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param storageExecutor     ScheduledExecutorService to use for storage operations.\n+     * @param currentTimeSupplier Function that supplies current time.\n+     * @param delaySupplier       Function that supplies delay future.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService storageExecutor,\n+                            Supplier<Long> currentTimeSupplier,\n+                            Supplier<CompletableFuture<Void>> delaySupplier) {\n+        super(String.format(\"GarbageCollector[%d]\", containerId), ExecutorServiceHelpers.newScheduledThreadPool(1, \"storage-gc\"));\n+        this.chunkStorage = Preconditions.checkNotNull(chunkStorage, \"chunkStorage\");\n+        this.metadataStore = Preconditions.checkNotNull(metadataStore, \"metadataStore\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+        this.currentTimeSupplier = Preconditions.checkNotNull(currentTimeSupplier, \"currentTimeSupplier\");\n+        this.delaySupplier = Preconditions.checkNotNull(delaySupplier, \"delaySupplier\");\n+        this.storageExecutor = Preconditions.checkNotNull(storageExecutor, \"storageExecutor\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> delaySupplier.get()\n+                        .thenRunAsync(() -> {\n+                            log.info(\"{}: Iteration {} started.\", traceObjectId, iterationId.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36673b04af930de0ee9dbea91105e40c1f641b4e"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2OTk3NQ==", "bodyText": "Is not a matter of measuring: for instance, we know that this number cannot be larger than the number of threads in the storage pool, right? Or it cannot be 0 or negative, right? So, at least we could validate for these values. Optimizing is another topic, but this is about preventing to input plain wrong numbers here.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r543469975", "createdAt": "2020-12-15T15:58:39Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageConfig.java", "diffHunk": "@@ -124,6 +135,32 @@\n     @Getter\n     final private int lateWarningThresholdInMillis;\n \n+    /**\n+     * Minimum delay in seconds between when garbage chunks are marked for deletion and actually deleted.\n+     */\n+    @Getter\n+    final private Duration garbageCollectionDelay;\n+\n+    /**\n+     * Number of chunks deleted concurrently.\n+     * This number should be small enough so that it does interfere foreground requests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0ODU1Ng=="}, "originalCommit": {"oid": "85088f1862ecd36a10c967d992ac88a11f99c7c3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4MDc1Mg==", "bodyText": "Nit: Please, move this parenthesis to the end of previous line.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r543480752", "createdAt": "2020-12-15T16:11:53Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.primitives.Ints;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.DelayQueue;\n+import java.util.concurrent.Delayed;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * <ol>\n+ * <li>Various ChunkedSegmentStorage operations requesting deletes.</li>\n+ * <li>Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).</li>\n+ * <li>Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented)</li>\n+ * </ol>\n+ *\n+ * The background task throttles itself in two ways.\n+ * <ol>\n+ * <li>It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground Storage calls. </li>\n+ * <li>It limits the number of items in the queue.</li>\n+ * </ol>\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final DelayQueue<GarbageChunkInfo> garbageChunks = new DelayQueue<>();\n+\n+    private final ChunkStorage chunkStorage;\n+\n+    private final ChunkMetadataStore metadataStore;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on DelayQueue.\n+     */\n+    @Getter\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    @Getter\n+    private final AtomicLong iterationId = new AtomicLong();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    private final Supplier<Long> currentTimeSupplier;\n+\n+    private final Supplier<CompletableFuture<Void>> delaySupplier;\n+\n+    private final ScheduledExecutorService storageExecutor;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param executorService     ScheduledExecutorService to use.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService executorService\n+                            ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ebaa9a05e6180979ad28dbec2cd5529e07a66bb"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MzM0Ng==", "bodyText": "Is this the expected value to return?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r543493346", "createdAt": "2020-12-15T16:27:25Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.primitives.Ints;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.DelayQueue;\n+import java.util.concurrent.Delayed;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * <ol>\n+ * <li>Various ChunkedSegmentStorage operations requesting deletes.</li>\n+ * <li>Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).</li>\n+ * <li>Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented)</li>\n+ * </ol>\n+ *\n+ * The background task throttles itself in two ways.\n+ * <ol>\n+ * <li>It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground Storage calls. </li>\n+ * <li>It limits the number of items in the queue.</li>\n+ * </ol>\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final DelayQueue<GarbageChunkInfo> garbageChunks = new DelayQueue<>();\n+\n+    private final ChunkStorage chunkStorage;\n+\n+    private final ChunkMetadataStore metadataStore;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on DelayQueue.\n+     */\n+    @Getter\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    @Getter\n+    private final AtomicLong iterationId = new AtomicLong();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    private final Supplier<Long> currentTimeSupplier;\n+\n+    private final Supplier<CompletableFuture<Void>> delaySupplier;\n+\n+    private final ScheduledExecutorService storageExecutor;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param executorService     ScheduledExecutorService to use.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService executorService\n+                            ) {\n+        this(containerId, chunkStorage, metadataStore, config, executorService,\n+                System::currentTimeMillis,\n+                () -> Futures.delayedFuture(config.getGarbageCollectionSleep(), executorService));\n+    }\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param storageExecutor     ScheduledExecutorService to use for storage operations.\n+     * @param currentTimeSupplier Function that supplies current time.\n+     * @param delaySupplier       Function that supplies delay future.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService storageExecutor,\n+                            Supplier<Long> currentTimeSupplier,\n+                            Supplier<CompletableFuture<Void>> delaySupplier) {\n+        super(String.format(\"GarbageCollector[%d]\", containerId), ExecutorServiceHelpers.newScheduledThreadPool(1, \"storage-gc\"));\n+        this.chunkStorage = Preconditions.checkNotNull(chunkStorage, \"chunkStorage\");\n+        this.metadataStore = Preconditions.checkNotNull(metadataStore, \"metadataStore\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+        this.currentTimeSupplier = Preconditions.checkNotNull(currentTimeSupplier, \"currentTimeSupplier\");\n+        this.delaySupplier = Preconditions.checkNotNull(delaySupplier, \"delaySupplier\");\n+        this.storageExecutor = Preconditions.checkNotNull(storageExecutor, \"storageExecutor\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ebaa9a05e6180979ad28dbec2cd5529e07a66bb"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5NjE1MA==", "bodyText": "If there are any errors then failed chunk is enqueued back.\n\nTo describe the actual behavior, we would need to add up to a max number of attempts, right?", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r543496150", "createdAt": "2020-12-15T16:30:53Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.primitives.Ints;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.DelayQueue;\n+import java.util.concurrent.Delayed;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * <ol>\n+ * <li>Various ChunkedSegmentStorage operations requesting deletes.</li>\n+ * <li>Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).</li>\n+ * <li>Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented)</li>\n+ * </ol>\n+ *\n+ * The background task throttles itself in two ways.\n+ * <ol>\n+ * <li>It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground Storage calls. </li>\n+ * <li>It limits the number of items in the queue.</li>\n+ * </ol>\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final DelayQueue<GarbageChunkInfo> garbageChunks = new DelayQueue<>();\n+\n+    private final ChunkStorage chunkStorage;\n+\n+    private final ChunkMetadataStore metadataStore;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on DelayQueue.\n+     */\n+    @Getter\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    @Getter\n+    private final AtomicLong iterationId = new AtomicLong();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    private final Supplier<Long> currentTimeSupplier;\n+\n+    private final Supplier<CompletableFuture<Void>> delaySupplier;\n+\n+    private final ScheduledExecutorService storageExecutor;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param executorService     ScheduledExecutorService to use.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService executorService\n+                            ) {\n+        this(containerId, chunkStorage, metadataStore, config, executorService,\n+                System::currentTimeMillis,\n+                () -> Futures.delayedFuture(config.getGarbageCollectionSleep(), executorService));\n+    }\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param storageExecutor     ScheduledExecutorService to use for storage operations.\n+     * @param currentTimeSupplier Function that supplies current time.\n+     * @param delaySupplier       Function that supplies delay future.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService storageExecutor,\n+                            Supplier<Long> currentTimeSupplier,\n+                            Supplier<CompletableFuture<Void>> delaySupplier) {\n+        super(String.format(\"GarbageCollector[%d]\", containerId), ExecutorServiceHelpers.newScheduledThreadPool(1, \"storage-gc\"));\n+        this.chunkStorage = Preconditions.checkNotNull(chunkStorage, \"chunkStorage\");\n+        this.metadataStore = Preconditions.checkNotNull(metadataStore, \"metadataStore\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+        this.currentTimeSupplier = Preconditions.checkNotNull(currentTimeSupplier, \"currentTimeSupplier\");\n+        this.delaySupplier = Preconditions.checkNotNull(delaySupplier, \"delaySupplier\");\n+        this.storageExecutor = Preconditions.checkNotNull(storageExecutor, \"storageExecutor\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> delaySupplier.get()\n+                        .thenRunAsync(() -> {\n+                            log.info(\"{}: Iteration {} started.\", traceObjectId, iterationId.get());\n+                        }, executor)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionMaxConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{}: Error during doRun.\", traceObjectId, ex);\n+                            }\n+                            log.info(\"{}: Iteration {} ended.\", traceObjectId, iterationId.getAndIncrement());\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * Adds given chunks to list of garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = currentTimeSupplier.get();\n+\n+        chunksToDelete.forEach(chunkToDelete -> addToGarbage(chunkToDelete, currentTime + config.getGarbageCollectionDelay().toMillis(), 0));\n+\n+        if (queueSize.get() >= config.getGarbageCollectionMaxQueueSize()) {\n+            log.warn(\"{}: deleteGarbage - Queue full. Could not delete garbage. Chunks skipped\", traceObjectId);\n+        }\n+    }\n+\n+    /**\n+     * Adds given chunk to list of garbage chunks.\n+     *\n+     * @param chunkToDelete Name of the chunk to delete.\n+     * @param startTime Start time.\n+     * @param attempts Number of attempts to delete this chunk so far.\n+     */\n+    void addToGarbage(String chunkToDelete, long startTime, int attempts) {\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            garbageChunks.add(new GarbageChunkInfo(chunkToDelete, startTime, attempts));\n+            queueSize.incrementAndGet();\n+        } else {\n+            log.debug(\"{}: deleteGarbage - Queue full. Could not delete garbage. chunk {}.\", traceObjectId, chunkToDelete);\n+        }\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * This method retrieves a few eligible chunks for deletion at a time.\n+     * The chunk is deleted only if the metadata for it does not exist or is marked inactive.\n+     * If there are any errors then failed chunk is enqueued back.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ebaa9a05e6180979ad28dbec2cd5529e07a66bb"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwMzM3Mg==", "bodyText": "Maybe is a personal impression, but in general I feel that the code is heavily influenced by logging. There are many if/else branches, computation stages/futures, etc. that exist just to add debug logs. I don't know if this is related to the need of explicitly stating what the program is doing at any time, as there are scenarios that we are unsure of its behavior. If this is the case, maybe we could remove logging by adding more tests and splitting large code blocks into smaller functions that can be heavily tested. Maybe this would give us more certainty and this, in turn, would help us to remove some of the log lines in the PR. But, even in the case that we decide to do not do that now, I wonder if so much logging would be counterproductive, as logs will grow significantly, making them harder to manage.", "url": "https://github.com/pravega/pravega/pull/5413#discussion_r543503372", "createdAt": "2020-12-15T16:39:53Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/GarbageCollector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.chunklayer;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.primitives.Ints;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.AbstractThreadPoolService;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.concurrent.Services;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadata;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.DelayQueue;\n+import java.util.concurrent.Delayed;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Implements simple garbage collector for cleaning up the deleted chunks.\n+ * The garbage collector maintains a in memory queue of chunks to delete which is drained by a background task.\n+ * This queue is populated by following\n+ * <ol>\n+ * <li>Various ChunkedSegmentStorage operations requesting deletes.</li>\n+ * <li>Background task that scans all records to find undeleted chunks inside metadata (not yet implemented).</li>\n+ * <li>Background task that scans all LTS to find unaccounted chunks that are deemed garbage (not yet implemented)</li>\n+ * </ol>\n+ *\n+ * The background task throttles itself in two ways.\n+ * <ol>\n+ * <li>It limits number of concurrent deletes at a time, so that it doesn't interfere with foreground Storage calls. </li>\n+ * <li>It limits the number of items in the queue.</li>\n+ * </ol>\n+ */\n+@Slf4j\n+public class GarbageCollector extends AbstractThreadPoolService implements AutoCloseable {\n+    /**\n+     * Set of garbage chunks.\n+     */\n+    @Getter\n+    private final DelayQueue<GarbageChunkInfo> garbageChunks = new DelayQueue<>();\n+\n+    private final ChunkStorage chunkStorage;\n+\n+    private final ChunkMetadataStore metadataStore;\n+\n+    private final ChunkedSegmentStorageConfig config;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    private final AtomicBoolean suspended = new AtomicBoolean();\n+\n+    /**\n+     * Keeps track of queue size.\n+     * Size is an expensive operation on DelayQueue.\n+     */\n+    @Getter\n+    private final AtomicInteger queueSize = new AtomicInteger();\n+\n+    @Getter\n+    private final AtomicLong iterationId = new AtomicLong();\n+\n+    private CompletableFuture<Void> loopFuture;\n+\n+    private final Supplier<Long> currentTimeSupplier;\n+\n+    private final Supplier<CompletableFuture<Void>> delaySupplier;\n+\n+    private final ScheduledExecutorService storageExecutor;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param executorService     ScheduledExecutorService to use.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService executorService\n+                            ) {\n+        this(containerId, chunkStorage, metadataStore, config, executorService,\n+                System::currentTimeMillis,\n+                () -> Futures.delayedFuture(config.getGarbageCollectionSleep(), executorService));\n+    }\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param containerId         Container id of the owner container.\n+     * @param chunkStorage        ChunkStorage instance to use for writing all logs.\n+     * @param metadataStore       ChunkMetadataStore for owner container.\n+     * @param config              Configuration options for this ChunkedSegmentStorage instance.\n+     * @param storageExecutor     ScheduledExecutorService to use for storage operations.\n+     * @param currentTimeSupplier Function that supplies current time.\n+     * @param delaySupplier       Function that supplies delay future.\n+     */\n+    public GarbageCollector(int containerId, ChunkStorage chunkStorage,\n+                            ChunkMetadataStore metadataStore,\n+                            ChunkedSegmentStorageConfig config,\n+                            ScheduledExecutorService storageExecutor,\n+                            Supplier<Long> currentTimeSupplier,\n+                            Supplier<CompletableFuture<Void>> delaySupplier) {\n+        super(String.format(\"GarbageCollector[%d]\", containerId), ExecutorServiceHelpers.newScheduledThreadPool(1, \"storage-gc\"));\n+        this.chunkStorage = Preconditions.checkNotNull(chunkStorage, \"chunkStorage\");\n+        this.metadataStore = Preconditions.checkNotNull(metadataStore, \"metadataStore\");\n+        this.config = Preconditions.checkNotNull(config, \"config\");\n+        this.currentTimeSupplier = Preconditions.checkNotNull(currentTimeSupplier, \"currentTimeSupplier\");\n+        this.delaySupplier = Preconditions.checkNotNull(delaySupplier, \"delaySupplier\");\n+        this.storageExecutor = Preconditions.checkNotNull(storageExecutor, \"storageExecutor\");\n+    }\n+\n+    /**\n+     * Initializes this instance.\n+     */\n+    public void initialize() {\n+        Services.startAsync(this, this.executor);\n+    }\n+\n+    /**\n+     * Gets a value indicating how much to wait for the service to shut down, before failing it.\n+     *\n+     * @return The Duration.\n+     */\n+    @Override\n+    protected Duration getShutdownTimeout() {\n+        return null;\n+    }\n+\n+    /**\n+     * Main execution of the Service. When this Future completes, the service auto-shuts down.\n+     *\n+     * @return A CompletableFuture that, when completed, indicates the service is terminated. If the Future completed\n+     * exceptionally, the Service will shut down with failure, otherwise it will terminate normally.\n+     */\n+    @Override\n+    protected CompletableFuture<Void> doRun() {\n+        loopFuture = Futures.loop(\n+                this::canRun,\n+                () -> delaySupplier.get()\n+                        .thenRunAsync(() -> {\n+                            log.info(\"{}: Iteration {} started.\", traceObjectId, iterationId.get());\n+                        }, executor)\n+                        .thenComposeAsync(v -> deleteGarbage(true, config.getGarbageCollectionMaxConcurrency()), executor)\n+                        .handleAsync((v, ex) -> {\n+                            if (null != ex) {\n+                                log.error(\"{}: Error during doRun.\", traceObjectId, ex);\n+                            }\n+                            log.info(\"{}: Iteration {} ended.\", traceObjectId, iterationId.getAndIncrement());\n+                            return null;\n+                        }, executor),\n+                executor);\n+        return loopFuture;\n+    }\n+\n+    private boolean canRun() {\n+        return isRunning() && getStopException() == null && !closed.get();\n+    }\n+\n+    /**\n+     * Sets whether background cleanup is suspended or not.\n+     *\n+     * @param value Boolean indicating whether to suspend background processing or not.\n+     */\n+    void setSuspended(boolean value) {\n+        suspended.set(value);\n+    }\n+\n+    /**\n+     * Adds given chunks to list of garbage chunks.\n+     *\n+     * @param chunksToDelete List of chunks to delete.\n+     */\n+    void addToGarbage(Collection<String> chunksToDelete) {\n+        val currentTime = currentTimeSupplier.get();\n+\n+        chunksToDelete.forEach(chunkToDelete -> addToGarbage(chunkToDelete, currentTime + config.getGarbageCollectionDelay().toMillis(), 0));\n+\n+        if (queueSize.get() >= config.getGarbageCollectionMaxQueueSize()) {\n+            log.warn(\"{}: deleteGarbage - Queue full. Could not delete garbage. Chunks skipped\", traceObjectId);\n+        }\n+    }\n+\n+    /**\n+     * Adds given chunk to list of garbage chunks.\n+     *\n+     * @param chunkToDelete Name of the chunk to delete.\n+     * @param startTime Start time.\n+     * @param attempts Number of attempts to delete this chunk so far.\n+     */\n+    void addToGarbage(String chunkToDelete, long startTime, int attempts) {\n+        if (queueSize.get() < config.getGarbageCollectionMaxQueueSize()) {\n+            garbageChunks.add(new GarbageChunkInfo(chunkToDelete, startTime, attempts));\n+            queueSize.incrementAndGet();\n+        } else {\n+            log.debug(\"{}: deleteGarbage - Queue full. Could not delete garbage. chunk {}.\", traceObjectId, chunkToDelete);\n+        }\n+    }\n+\n+    /**\n+     * Delete the garbage chunks.\n+     *\n+     * This method retrieves a few eligible chunks for deletion at a time.\n+     * The chunk is deleted only if the metadata for it does not exist or is marked inactive.\n+     * If there are any errors then failed chunk is enqueued back.\n+     * If suspended or there are no items then it \"sleeps\" for time specified by configuration.\n+     *\n+     * @param isBackground True if the caller is background task else False if called explicitly.\n+     * @param maxItems     Maximum number of items to delete at a time.\n+     * @return CompletableFuture which is completed when garbage is deleted.\n+     */\n+    CompletableFuture<Boolean> deleteGarbage(boolean isBackground, int maxItems) {\n+        log.debug(\"{}: deleteGarbage - started.\", traceObjectId);\n+        // Sleep if suspended.\n+        if (suspended.get() && isBackground) {\n+            log.info(\"{}: deleteGarbage - suspended - sleeping for {}.\", traceObjectId, config.getGarbageCollectionDelay());\n+            return CompletableFuture.completedFuture(false);\n+        }\n+\n+        // Find chunks to delete.\n+        val chunksToDelete = new ArrayList<GarbageChunkInfo>();\n+        int count = 0;\n+        try {\n+            // Block until you have at least one item.\n+            GarbageChunkInfo info = garbageChunks.take();\n+            log.trace(\"{}: deleteGarbage - retrieved {}\", traceObjectId, info);\n+            while (null != info ) {\n+                queueSize.decrementAndGet();\n+                chunksToDelete.add(info);\n+\n+                count++;\n+                if (count >= maxItems) {\n+                    break;\n+                }\n+                // Do not block\n+                info = garbageChunks.poll();\n+                log.trace(\"{}: deleteGarbage - retrieved {}\", traceObjectId, info);\n+            }\n+        } catch (InterruptedException e) {\n+            throw new CompletionException(e);\n+        }\n+\n+        // Sleep if no chunks to delete.\n+        if (count == 0) {\n+            log.debug(\"{}: deleteGarbage - no work - sleeping for {}.\", traceObjectId, config.getGarbageCollectionDelay());\n+            return CompletableFuture.completedFuture(false);\n+        }\n+\n+        // For each chunk delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+        ArrayList<CompletableFuture<Void>> futures = new ArrayList<>();\n+        for (val infoToDelete : chunksToDelete) {\n+            val chunkToDelete = infoToDelete.name;\n+            val failed = new AtomicBoolean();\n+            val txn = metadataStore.beginTransaction(false, chunkToDelete);\n+            val future =\n+                    txn.get(infoToDelete.name)\n+                            .thenComposeAsync(metadata -> {\n+                                val chunkMetadata = (ChunkMetadata) metadata;\n+                                // Delete if the chunk is not present at all in the metadata or is present but marked as inactive.\n+                                val shouldDeleteChunk = null == chunkMetadata || !chunkMetadata.isActive();\n+                                val shouldDeleteMetadata = new AtomicBoolean(null != metadata && !chunkMetadata.isActive());\n+\n+                                // Delete chunk from storage.\n+                                if (shouldDeleteChunk) {\n+                                    return chunkStorage.openWrite(chunkToDelete)\n+                                            .thenComposeAsync(chunkStorage::delete, storageExecutor)\n+                                            .handleAsync((v, e) -> {\n+                                                if (e != null) {\n+                                                    val ex = Exceptions.unwrap(e);\n+                                                    if (ex instanceof ChunkNotFoundException) {\n+                                                        // Ignore - nothing to do here.\n+                                                        log.debug(\"{}: deleteGarbage - Could not delete garbage chunk={}.\", traceObjectId, chunkToDelete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ebaa9a05e6180979ad28dbec2cd5529e07a66bb"}, "originalPosition": 297}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bcc09b625ed897c8254fc492deb06e1e5c9a83f", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/5bcc09b625ed897c8254fc492deb06e1e5c9a83f", "committedDate": "2020-12-15T18:37:45Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4903-improve-garbage-collection-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542af21c7cdfba98b2637774ded7e7caa078e4ae", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/542af21c7cdfba98b2637774ded7e7caa078e4ae", "committedDate": "2020-12-15T20:46:16Z", "message": "Issue 4903: (SLTS) cleanup.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzA5MDAx", "url": "https://github.com/pravega/pravega/pull/5413#pullrequestreview-553709001", "createdAt": "2020-12-16T13:57:44Z", "commit": {"oid": "542af21c7cdfba98b2637774ded7e7caa078e4ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e559419403aad3e9dd7df3d3d91a6bc26c1aa5d2", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/e559419403aad3e9dd7df3d3d91a6bc26c1aa5d2", "committedDate": "2020-12-16T22:13:55Z", "message": "Merge branch 'master' into issue-4903-improve-garbage-collection-2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3791, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}