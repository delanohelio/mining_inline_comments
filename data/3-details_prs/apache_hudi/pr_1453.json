{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTczMjAz", "number": 1453, "title": "HUDI-644 kafka connect checkpoint provider", "bodyText": "What is the purpose of the pull request\nThis PR adds a checkpoint provider interfaces for delta streamer and implement the kafka connect hdfs checkpoint provider\nBrief change log\n\nNew class CheckpointProvider\nNew class KafkaConnectHdfsProvider\nNew test TestCheckpointProvider\n\nVerify this pull request\n(Please pick either of the following options)\nThis change added tests and can be verified as follows:\n\nNew test TestCheckpointProvider to cover the new classes\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-27T06:19:39Z", "url": "https://github.com/apache/hudi/pull/1453", "merged": true, "mergeCommit": {"oid": "575d87cf7d6f0f743cb7cec6520d80e6fcc3e20a"}, "closed": true, "closedAt": "2020-04-04T01:57:35Z", "author": {"login": "garyli1019"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRvNYegFqTM4Mjc4NTA0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUKrWVAFqTM4NzY0ODI3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzg1MDQ1", "url": "https://github.com/apache/hudi/pull/1453#pullrequestreview-382785045", "createdAt": "2020-03-27T11:42:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTo0Mjo1NlrOF8toRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTo0Mjo1NlrOF8toRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ==", "bodyText": "How do you plan to integrate this class with DeltaStreamer?", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399206469", "createdAt": "2020-03-27T11:42:56Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/KafkaConnectHdfsProvider.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Generate checkpoint from Kafka-Connect-HDFS.\n+ */\n+public class KafkaConnectHdfsProvider implements CheckPointProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzk5NDUz", "url": "https://github.com/apache/hudi/pull/1453#pullrequestreview-382799453", "createdAt": "2020-03-27T12:07:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNzoyM1rOF8uWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNzoyM1rOF8uWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODMwNw==", "bodyText": "for partition 0, the offset should be 400?", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399218307", "createdAt": "2020-03-27T12:07:23Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();\n+  }\n+\n+  @Test\n+  public void testKafkaConnectHdfsProvider() throws Exception {\n+    // create regular kafka connect hdfs dirs\n+    new File(topicPath + \"/year=2016/month=05/day=01/\").mkdirs();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\").mkdirs();\n+    // kafka connect tmp folder\n+    new File(topicPath + \"/TMP\").mkdirs();\n+    // tmp file that being written\n+    new File(topicPath + \"/TMP/\" + \"topic1+0+301+400.parquet\").createNewFile();\n+    // regular parquet files\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"topic1+0+100+200.parquet\").createNewFile();\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"topic1+1+100+200.parquet\").createNewFile();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\"\n+        + \"topic1+0+201+300.parquet\").createNewFile();\n+    // noise parquet file\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"random_snappy_1.parquet\").createNewFile();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\"\n+        + \"random_snappy_2.parquet\").createNewFile();\n+    CheckPointProvider c = new KafkaConnectHdfsProvider(new Path(topicPath), fs);\n+    assertEquals(c.getCheckpoint(), \"topic1,0:300,1:200\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyODA3NDE4", "url": "https://github.com/apache/hudi/pull/1453#pullrequestreview-382807418", "createdAt": "2020-03-27T12:20:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoyMDowOVrOF8uveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoyMDowOVrOF8uveg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDY5OA==", "bodyText": "Is this some standard format of these files maintained by kafka-connect? Like {topic}.{partition}.{lowerOffset}.{upperOffset}.parquet? Can you share some documentation of this, if it is so? Basically I would like to understand these files.", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399224698", "createdAt": "2020-03-27T12:20:09Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();\n+  }\n+\n+  @Test\n+  public void testKafkaConnectHdfsProvider() throws Exception {\n+    // create regular kafka connect hdfs dirs\n+    new File(topicPath + \"/year=2016/month=05/day=01/\").mkdirs();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\").mkdirs();\n+    // kafka connect tmp folder\n+    new File(topicPath + \"/TMP\").mkdirs();\n+    // tmp file that being written\n+    new File(topicPath + \"/TMP/\" + \"topic1+0+301+400.parquet\").createNewFile();\n+    // regular parquet files\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"topic1+0+100+200.parquet\").createNewFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzk3NjIy", "url": "https://github.com/apache/hudi/pull/1453#pullrequestreview-383397622", "createdAt": "2020-03-29T10:56:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDo1NjoyNFrOF9Qpzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDo1NjoyNFrOF9Qpzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDMwMg==", "bodyText": "Let us add a test case to cover this scenario as well?", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399780302", "createdAt": "2020-03-29T10:56:24Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/KafkaConnectHdfsProvider.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Generate checkpoint from Kafka-Connect-HDFS.\n+ */\n+public class KafkaConnectHdfsProvider implements CheckPointProvider {\n+  private final Path path;\n+  private final FileSystem fs;\n+\n+  private static final String FILENAME_SEPARATOR = \"[\\\\+\\\\.]\";\n+\n+  public KafkaConnectHdfsProvider(final Path basePath, final FileSystem fileSystem) {\n+    this.path = basePath;\n+    this.fs = fileSystem;\n+  }\n+\n+  /**\n+   * PathFilter for Kafka-Connect-HDFS.\n+   * Directory format: /partition1=xxx/partition2=xxx\n+   * File format: topic+partition+lowerOffset+upperOffset.file\n+   */\n+  public static class KafkaConnectPathFilter implements PathFilter {\n+    private static final Pattern DIRECTORY_PATTERN = Pattern.compile(\".*=.*\");\n+    private static final Pattern PATTERN =\n+        Pattern.compile(\"[a-zA-Z0-9\\\\._\\\\-]+\\\\+\\\\d+\\\\+\\\\d+\\\\+\\\\d+(.\\\\w+)?\");\n+\n+    @Override\n+    public boolean accept(final Path path) {\n+      final String filename = path.getName();\n+      final Matcher matcher = PATTERN.matcher(filename);\n+      return matcher.matches();\n+    }\n+\n+    public boolean acceptDir(final Path path) {\n+      final String dirName = path.getName();\n+      final Matcher matcher = DIRECTORY_PATTERN.matcher(dirName);\n+      return matcher.matches();\n+    }\n+  }\n+\n+  /**\n+   * Convert map contains max offset of each partition to string.\n+   * @param topic Topic name\n+   * @param checkpoint Map with partition as key and max offset as value\n+   * @return Checkpoint string\n+   */\n+  private static String buildCheckpointStr(final String topic,\n+                                           final HashMap<Integer, Integer> checkpoint) {\n+    final StringBuilder checkpointStr = new StringBuilder();\n+    checkpointStr.append(topic);\n+    for (int i = 0; i < checkpoint.size(); ++i) {\n+      checkpointStr.append(\",\").append(i).append(\":\").append(checkpoint.get(i));\n+    }\n+    return checkpointStr.toString();\n+  }\n+\n+  /**\n+   * List file status recursively.\n+   * @param curPath Current Path\n+   * @param filter PathFilter\n+   * @return All file status match kafka connect naming convention\n+   * @throws IOException\n+   */\n+  private ArrayList<FileStatus> listAllFileStatus(Path curPath,\n+                                                  KafkaConnectPathFilter filter) throws IOException {\n+    ArrayList<FileStatus> allFileStatus = new ArrayList<>();\n+    FileStatus[] fileStatus = this.fs.listStatus(curPath);\n+    for (FileStatus status : fileStatus) {\n+      if (status.isDirectory() && filter.acceptDir(status.getPath())) {\n+        allFileStatus.addAll(listAllFileStatus(status.getPath(), filter));\n+      } else {\n+        if (filter.accept(status.getPath())) {\n+          allFileStatus.add(status);\n+        }\n+      }\n+    }\n+    return allFileStatus;\n+  }\n+\n+  @Override\n+  public String getCheckpoint() throws IOException {\n+    final KafkaConnectPathFilter filter = new KafkaConnectPathFilter();\n+    final ArrayList<FileStatus> fileStatus = listAllFileStatus(this.path, filter);\n+    if (fileStatus.size() == 0) {\n+      throw new IOException(\"No valid Kafka Connect Hdfs file found under:\" + this.path.getName());\n+    }\n+    final String topic = fileStatus.get(0).getPath().getName().split(FILENAME_SEPARATOR)[0];\n+    int maxPartition = -1;\n+    final HashMap<Integer, Integer> checkpointMap = new HashMap<>();\n+    for (final FileStatus status : fileStatus) {\n+      final String filename = status.getPath().getName();\n+      final String[] groups = filename.split(FILENAME_SEPARATOR);\n+      final int partition = Integer.parseInt(groups[1]);\n+      final int offsetUpper = Integer.parseInt(groups[3]);\n+      maxPartition = Math.max(maxPartition, partition);\n+      if (checkpointMap.containsKey(partition)) {\n+        checkpointMap.put(partition, Math.max(checkpointMap.get(partition), offsetUpper));\n+      } else {\n+        checkpointMap.put(partition, offsetUpper);\n+      }\n+    }\n+    if (checkpointMap.size() != maxPartition + 1) {\n+      throw new IOException(\"Missing partition from the file scan, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzk3ODEz", "url": "https://github.com/apache/hudi/pull/1453#pullrequestreview-383397813", "createdAt": "2020-03-29T10:58:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDo1ODoyNVrOF9Qq1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDo1ODoyNVrOF9Qq1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDU2NQ==", "bodyText": "Let us clean this after executing the test?", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399780565", "createdAt": "2020-03-29T10:58:25Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDg3MDA3", "url": "https://github.com/apache/hudi/pull/1453#pullrequestreview-384087007", "createdAt": "2020-03-30T17:43:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0MzozN1rOF91DVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo1ODozOFrOF91oYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NjY2MQ==", "bodyText": "let's make it clear that this is only used initially? may be the interface should be InitialCheckPointProvider ?", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400376661", "createdAt": "2020-03-30T17:43:37Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/CheckPointProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provide checkpoint for delta streamer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3Njk5Mg==", "bodyText": "throw some HoodieException or our own exceptions?", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400376992", "createdAt": "2020-03-30T17:44:08Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/CheckPointProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provide checkpoint for delta streamer.\n+ */\n+public interface CheckPointProvider {\n+  /**\n+   * Get checkpoint string recognizable for delta streamer.\n+   */\n+  String getCheckpoint() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzM1OA==", "bodyText": "move package one level up?  org.apache.hudi.utiilities.checkpointing ?", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400377358", "createdAt": "2020-03-30T17:44:44Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/CheckPointProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NDg0Ng==", "bodyText": "I think we can integrate this using a new --initial-checkpoint-provider flag that takes the name of the class that provides an initial checkpoint, if no commits/checkpoints are found on the hudi dataset itself.. The current behavior is probably to pass an Optional.empty to the Source class and let the sources decide (for e,g kafka will start from earliest/latest depending on what the user wants it to be)? We can encapsulate this behavior in a another InitialCheckpointProvider implementation, which will be the default value for --initial-checkpoint-provider flag", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400384846", "createdAt": "2020-03-30T17:56:38Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/KafkaConnectHdfsProvider.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Generate checkpoint from Kafka-Connect-HDFS.\n+ */\n+public class KafkaConnectHdfsProvider implements CheckPointProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NTg4NA==", "bodyText": "let's pull this into its own test class TestKafkaConnectHDFSCheckpointProvider. (Something that needs to be fixed in other places in our code.. but starting to catch new ones like this from now :))", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400385884", "createdAt": "2020-03-30T17:58:14Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();\n+  }\n+\n+  @Test\n+  public void testKafkaConnectHdfsProvider() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NjE0NA==", "bodyText": "in this case, documenting the url would help with maintaining the code", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400386144", "createdAt": "2020-03-30T17:58:38Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();\n+  }\n+\n+  @Test\n+  public void testKafkaConnectHdfsProvider() throws Exception {\n+    // create regular kafka connect hdfs dirs\n+    new File(topicPath + \"/year=2016/month=05/day=01/\").mkdirs();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\").mkdirs();\n+    // kafka connect tmp folder\n+    new File(topicPath + \"/TMP\").mkdirs();\n+    // tmp file that being written\n+    new File(topicPath + \"/TMP/\" + \"topic1+0+301+400.parquet\").createNewFile();\n+    // regular parquet files\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"topic1+0+100+200.parquet\").createNewFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDY5OA=="}, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "committedDate": "2020-04-01T17:56:02Z", "message": "HUDI-644 kafka connect checkpoint provider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "committedDate": "2020-04-01T17:56:02Z", "message": "HUDI-644 kafka connect checkpoint provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjQ4Mjcx", "url": "https://github.com/apache/hudi/pull/1453#pullrequestreview-387648271", "createdAt": "2020-04-04T00:50:58Z", "commit": {"oid": "d1a2dffe447633bef5bcc0766d1f4d6c764a3bad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3265, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}