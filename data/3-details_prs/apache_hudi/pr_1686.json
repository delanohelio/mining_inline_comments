{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0OTc5Mjc2", "number": 1686, "title": "[HUDI-709]Add unit test for UtilsCommand", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nAdd unit test for UtilsCommand\nBrief change log\n(for example:)\n\nAdd unit test for UtilsCommand\n\nVerify this pull request\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-05-29T09:01:37Z", "url": "https://github.com/apache/hudi/pull/1686", "merged": true, "mergeCommit": {"oid": "5099a91edd3aaba114a86251336ae98374722270"}, "closed": true, "closedAt": "2020-06-18T11:54:15Z", "author": {"login": "hddong"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmSP9wABqjMzODk1MDk5MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsYHwygFqTQzMjk2NDEzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTk1ODQw", "url": "https://github.com/apache/hudi/pull/1686#pullrequestreview-430195840", "createdAt": "2020-06-14T07:47:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0NzowNlrOGjbYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0OTowOFrOGjbY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMTkzMA==", "bodyText": "Shall we change to can not be null!?", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439801930", "createdAt": "2020-06-14T07:47:06Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/UtilsCommand.java", "diffHunk": "@@ -30,9 +31,15 @@\n public class UtilsCommand implements CommandMarker {\n \n   @CliCommand(value = \"utils loadClass\", help = \"Load a class\")\n-  public String loadClass(@CliOption(key = {\"class\"}, help = \"Check mode\") final String clazz) throws Exception {\n-    Class klass = Class.forName(clazz);\n-    return klass.getProtectionDomain().getCodeSource().getLocation().toExternalForm();\n+  public String loadClass(@CliOption(key = {\"class\"}, help = \"Check mode\") final String clazz) {\n+    if (StringUtils.isNullOrEmpty(clazz)) {\n+      return \"Class to be loaded can not null!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjAxOA==", "bodyText": "Use ran or runs?", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802018", "createdAt": "2020-06-14T07:48:03Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjAzNQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802035", "createdAt": "2020-06-14T07:48:12Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertTrue(cr.getResult().toString().startsWith(\"file:\")));\n+  }\n+\n+  /**\n+   * Test case for class not found.\n+   */\n+  @Test\n+  public void testLoadClassNotFound() {\n+    String name = \"test.class.NotFound\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjA0MQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802041", "createdAt": "2020-06-14T07:48:20Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertTrue(cr.getResult().toString().startsWith(\"file:\")));\n+  }\n+\n+  /**\n+   * Test case for class not found.\n+   */\n+  @Test\n+  public void testLoadClassNotFound() {\n+    String name = \"test.class.NotFound\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertEquals(cr.getResult().toString(), String.format(\"Class %s not found!\", name)));\n+  }\n+\n+  /**\n+   * Test case for load null class.\n+   */\n+  @Test\n+  public void testLoadClassNull() {\n+    String name = \"\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjA4Mw==", "bodyText": "can not null! -> can not be null!?", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802083", "createdAt": "2020-06-14T07:49:08Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertTrue(cr.getResult().toString().startsWith(\"file:\")));\n+  }\n+\n+  /**\n+   * Test case for class not found.\n+   */\n+  @Test\n+  public void testLoadClassNotFound() {\n+    String name = \"test.class.NotFound\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertEquals(cr.getResult().toString(), String.format(\"Class %s not found!\", name)));\n+  }\n+\n+  /**\n+   * Test case for load null class.\n+   */\n+  @Test\n+  public void testLoadClassNull() {\n+    String name = \"\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertEquals(\"Class to be loaded can not null!\", cr.getResult().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f9231453fade79359bf416317d34887db97fa9", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/b9f9231453fade79359bf416317d34887db97fa9", "committedDate": "2020-06-14T14:38:11Z", "message": "Add test for UtilsCommand"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e570e407843ca5d263840fe6d0cb42fe692a41", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/b4e570e407843ca5d263840fe6d0cb42fe692a41", "committedDate": "2020-06-14T14:38:11Z", "message": "Reset this"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8984336dac9b6ac1bf20523dcf93653f00e6d6cf", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/8984336dac9b6ac1bf20523dcf93653f00e6d6cf", "committedDate": "2020-06-14T14:40:12Z", "message": "rebse and fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "8984336dac9b6ac1bf20523dcf93653f00e6d6cf", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/8984336dac9b6ac1bf20523dcf93653f00e6d6cf", "committedDate": "2020-06-14T14:40:12Z", "message": "rebse and fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTY0MTMw", "url": "https://github.com/apache/hudi/pull/1686#pullrequestreview-432964130", "createdAt": "2020-06-18T06:04:57Z", "commit": {"oid": "8984336dac9b6ac1bf20523dcf93653f00e6d6cf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3213, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}