{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDc0NTMy", "number": 1916, "title": "[HUDI-1025] Meter RPC calls in HoodieWrapperFileSystem", "bodyText": "What is the purpose of the pull request\nThis diff adds a lightweight metrics registry (based on codahale metrics) for Hudi Common. Other modules can use this registry to track their metrics as well. The Hudi Client has been modified to collect and emit the metrics from this registry.\nVerify this pull request\nThis change added tests and can be verified as follows:\n\nAdded unit tests in org.apache.hudi.common.TestRegistry.\nVerified change using console logger metrics in Hudi Demo Docker.\nThese changes have been tested in production at Uber.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-08-05T00:17:43Z", "url": "https://github.com/apache/hudi/pull/1916", "merged": true, "mergeCommit": {"oid": "bedbb825e06d479f90bb09d09be4ade37fdaa8b3"}, "closed": true, "closedAt": "2020-08-18T14:42:06Z", "author": {"login": "modi95"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7v2bSAH2gAyNDYzMDc0NTMyOjEyNTQ3NDQ2NjMxYzU1NjkxNTIwODk1N2M2YTU2MGUxYzFlOWYyMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-VdA2gFqTQ2NjM3Nzk5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12547446631c556915208957c6a560e1c1e9f221", "author": {"user": {"login": "modi95", "name": "Abhishek Modi"}}, "url": "https://github.com/apache/hudi/commit/12547446631c556915208957c6a560e1c1e9f221", "committedDate": "2020-08-05T00:12:36Z", "message": "Cherry Pick Commits from Uber Hudi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556", "author": {"user": {"login": "modi95", "name": "Abhishek Modi"}}, "url": "https://github.com/apache/hudi/commit/698105d991c04b40e741b69b7dc11e5d776b4556", "committedDate": "2020-08-05T00:19:29Z", "message": "add new files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDk2Nzc2", "url": "https://github.com/apache/hudi/pull/1916#pullrequestreview-462496776", "createdAt": "2020-08-06T13:04:02Z", "commit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNDowMlrOG8yi-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNDowMlrOG8yi-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NTg5OQ==", "bodyText": "MetricName?", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466395899", "createdAt": "2020-08-06T13:04:02Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java", "diffHunk": "@@ -64,10 +65,15 @@\n \n   public static final String HOODIE_SCHEME_PREFIX = \"hoodie-\";\n \n+  private enum MetricNames {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDk4MDA2", "url": "https://github.com/apache/hudi/pull/1916#pullrequestreview-462498006", "createdAt": "2020-08-06T13:05:27Z", "commit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNToyN1rOG8ymtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNToyN1rOG8ymtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Njg1Mw==", "bodyText": "missing @OverRide?", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466396853", "createdAt": "2020-08-06T13:05:27Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Lightweight Counter for Hudi Metrics.\n+ */\n+public class Counter implements Metric {\n+\n+  private final AtomicLong count = new AtomicLong();\n+\n+  public void increment() {\n+    this.add(1);\n+  }\n+\n+  public void add(long n) {\n+    this.count.addAndGet(n);\n+  }\n+\n+  public Long getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDk5Mzgx", "url": "https://github.com/apache/hudi/pull/1916#pullrequestreview-462499381", "createdAt": "2020-08-06T13:07:09Z", "commit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNzowOVrOG8yqng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNzowOVrOG8yqng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Nzg1NA==", "bodyText": "change to HashMap<String, Long> allMetrics = new HashMap<>();", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466397854", "createdAt": "2020-08-06T13:07:09Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+/**\n+ * Lightweight Metrics Registry to track Hudi events.\n+ */\n+public class Registry {\n+  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+  final String name;\n+\n+  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+\n+  private Registry(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * Get (or create) the registry for a provided name.\n+   */\n+  public static synchronized Registry getRegistry(String registryName) {\n+    if (!registryMap.containsKey(registryName)) {\n+      registryMap.put(registryName, new Registry(registryName));\n+    }\n+    return registryMap.get(registryName);\n+  }\n+\n+  /**\n+   * Get all registered metrics.\n+   * @param flush clean all metrics as part of this operation.\n+   * @param prefixWithRegistryName prefix each metric name with the registry name.\n+   * @return\n+   */\n+  public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n+    HashMap allMetrics = new HashMap<String, Long>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTAwMjE4", "url": "https://github.com/apache/hudi/pull/1916#pullrequestreview-462500218", "createdAt": "2020-08-06T13:08:09Z", "commit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowODoxMFrOG8ytBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowODoxMFrOG8ytBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODQ3MQ==", "bodyText": "would be rename to clear?", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466398471", "createdAt": "2020-08-06T13:08:10Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+/**\n+ * Lightweight Metrics Registry to track Hudi events.\n+ */\n+public class Registry {\n+  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+  final String name;\n+\n+  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+\n+  private Registry(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * Get (or create) the registry for a provided name.\n+   */\n+  public static synchronized Registry getRegistry(String registryName) {\n+    if (!registryMap.containsKey(registryName)) {\n+      registryMap.put(registryName, new Registry(registryName));\n+    }\n+    return registryMap.get(registryName);\n+  }\n+\n+  /**\n+   * Get all registered metrics.\n+   * @param flush clean all metrics as part of this operation.\n+   * @param prefixWithRegistryName prefix each metric name with the registry name.\n+   * @return\n+   */\n+  public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n+    HashMap allMetrics = new HashMap<String, Long>();\n+    registryMap.forEach((registryName, registry) -> {\n+      allMetrics.putAll(registry.getAllCounts(prefixWithRegistryName));\n+      if (flush) {\n+        registry.flush();\n+      }\n+    });\n+    return allMetrics;\n+  }\n+\n+  public void flush() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTA0NTAy", "url": "https://github.com/apache/hudi/pull/1916#pullrequestreview-462504502", "createdAt": "2020-08-06T13:13:21Z", "commit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a1666929b76a64e602490f4fbef15ea496b1caf", "author": {"user": {"login": "modi95", "name": "Abhishek Modi"}}, "url": "https://github.com/apache/hudi/commit/8a1666929b76a64e602490f4fbef15ea496b1caf", "committedDate": "2020-08-12T23:48:17Z", "message": "addressing code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Mzc3OTk2", "url": "https://github.com/apache/hudi/pull/1916#pullrequestreview-466377996", "createdAt": "2020-08-13T01:09:05Z", "commit": {"oid": "8a1666929b76a64e602490f4fbef15ea496b1caf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4778, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}