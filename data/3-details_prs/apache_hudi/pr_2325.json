{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MTQ2Njg5", "number": 2325, "title": "[HUDI-699] Fix CompactionCommand and add unit test for CompactionCommand", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\n1. Fix CompactionCommand\n2.  add unit test for CompactionCommand\nBrief change log\n\nFix CompactionCommand and add unit test for CompactionCommand\n\nVerify this pull request\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-12-10T18:19:18Z", "url": "https://github.com/apache/hudi/pull/2325", "merged": true, "mergeCommit": {"oid": "ecdbd2517fd8157d9e96f3d9abf195a589e191ae"}, "closed": true, "closedAt": "2021-04-08T07:35:33Z", "author": {"login": "hddong"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdwTdFjABqjQyMDk2NjEyNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeLBoE1AFqTYzMTA2NzUzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9e08d9a9e7b99b10cd6d9a8af5212b397480402", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/f9e08d9a9e7b99b10cd6d9a8af5212b397480402", "committedDate": "2020-12-14T03:03:35Z", "message": "fix"}, "afterCommit": {"oid": "882269803c138392e7f7b9300cbc4184daf5c4a3", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/882269803c138392e7f7b9300cbc4184daf5c4a3", "committedDate": "2021-01-15T06:29:50Z", "message": "other"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "882269803c138392e7f7b9300cbc4184daf5c4a3", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/882269803c138392e7f7b9300cbc4184daf5c4a3", "committedDate": "2021-01-15T06:29:50Z", "message": "other"}, "afterCommit": {"oid": "d7298cd5fe20eccc84eda5736000df37130815c9", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/d7298cd5fe20eccc84eda5736000df37130815c9", "committedDate": "2021-01-15T06:29:48Z", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "333436e3004c96558bc1a4e5606f705110a139f8", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/333436e3004c96558bc1a4e5606f705110a139f8", "committedDate": "2021-01-22T01:55:45Z", "message": "reset"}, "afterCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/79b994abe1d9c80bffa16a475717a6053b57850e", "committedDate": "2021-01-22T09:49:02Z", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMjUxOTQ5", "url": "https://github.com/apache/hudi/pull/2325#pullrequestreview-581251949", "createdAt": "2021-02-02T11:36:23Z", "commit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTozNjoyM1rOIeMftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTo0NDowM1rOIeMwpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzMjkxNw==", "bodyText": "Remove the empty white space?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568532917", "createdAt": "2021-02-02T11:36:23Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -222,6 +224,8 @@ public String compact(\n           help = \"Parallelism for hoodie compaction\") final String parallelism,\n       @CliOption(key = \"schemaFilePath\", mandatory = true,\n           help = \"Path for Avro schema file\") final String schemaFilePath,\n+      @CliOption(key = \"sparkMaster\", unspecifiedDefaultValue = \"local\",\n+          help = \"Spark Master \") String master,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNDU0OQ==", "bodyText": "Break the .add into a new line?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568534549", "createdAt": "2021-02-02T11:39:08Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -444,9 +455,12 @@ public String validateCompaction(\n       });\n \n       Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-      TableHeader header = new TableHeader().addTableHeaderField(\"File Id\").addTableHeaderField(\"Base Instant Time\")\n-          .addTableHeaderField(\"Base Data File\").addTableHeaderField(\"Num Delta Files\").addTableHeaderField(\"Valid\")\n-          .addTableHeaderField(\"Error\");\n+      TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNTAzNw==", "bodyText": "break the addxxx method into a new line?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568535037", "createdAt": "2021-02-02T11:40:02Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -616,9 +631,12 @@ private String getRenamesToBePrinted(List<RenameOpResult> res, Integer limit, St\n       });\n \n       Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-      TableHeader header = new TableHeader().addTableHeaderField(\"File Id\").addTableHeaderField(\"Source File Path\")\n-          .addTableHeaderField(\"Destination File Path\").addTableHeaderField(\"Rename Executed?\")\n-          .addTableHeaderField(\"Rename Succeeded?\").addTableHeaderField(\"Error\");\n+      TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNjAyMA==", "bodyText": "Why do we need to change this?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568536020", "createdAt": "2021-02-02T11:41:53Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java", "diffHunk": "@@ -194,7 +194,7 @@ public void testShowArchivedCommits() throws Exception {\n     // archived 101 and 102 instants, remove 103 and 104 instant\n     data.remove(\"103\");\n     data.remove(\"104\");\n-    String expected = generateExpectData(3, data);\n+    String expected = generateExpectData(1, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNzI1NA==", "bodyText": "Can we follow this naming pattern: testXXXCommand ?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568537254", "createdAt": "2021-02-02T11:44:03Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCompactionCommand.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.avro.model.HoodieCompactionPlan;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.testutils.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.testutils.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.model.HoodieAvroPayload;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.table.timeline.versioning.TimelineLayoutVersion;\n+import org.apache.hudi.common.testutils.CompactionTestUtils;\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.table.HoodieSparkTable;\n+import org.apache.hudi.table.HoodieTimelineArchiveLog;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hudi.common.table.timeline.HoodieTimeline.COMPACTION_ACTION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Test Cases for {@link CompactionCommand}.\n+ */\n+public class TestCompactionCommand extends AbstractShellIntegrationTest {\n+\n+  private String tableName;\n+  private String tablePath;\n+\n+  @BeforeEach\n+  public void init() {\n+    tableName = \"test_table\";\n+    tablePath = basePath + tableName;\n+  }\n+\n+  @Test\n+  public void testVerifyTableType() throws IOException {\n+    // create COW table.\n+    new TableCommand().createTable(\n+        tablePath, tableName, HoodieTableType.COPY_ON_WRITE.name(),\n+        \"\", TimelineLayoutVersion.VERSION_1, HoodieAvroPayload.class.getName());\n+\n+    // expect HoodieException for COPY_ON_WRITE table.\n+    assertThrows(HoodieException.class,\n+        () -> new CompactionCommand().compactionsAll(false, -1, \"\", false, false));\n+  }\n+\n+  @Test\n+  public void testCompactionsAll() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIwNzQ4Njg0", "url": "https://github.com/apache/hudi/pull/2325#pullrequestreview-620748684", "createdAt": "2021-03-25T06:22:09Z", "commit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjoyMjowOVrOI9Pv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNzowMjoxM1rOI9RjYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTA5MjA2OQ==", "bodyText": "\"actionState\" -> ACTION_STATE", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601092069", "createdAt": "2021-03-25T06:22:09Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -108,6 +120,14 @@ public void loadInstantDetailsInMemory(String startTs, String endTs) {\n     loadInstants(startTs, endTs);\n   }\n \n+  public void loadCompactionDetailsInMemory(String startTs, String endTs) {\n+    // load compactionPlan\n+    loadInstants(new TimeRangeFilter(startTs, endTs), true, record ->\n+        record.get(ACTION_TYPE_KEY).toString().equals(HoodieTimeline.COMPACTION_ACTION)\n+            && HoodieInstant.State.INFLIGHT.toString().equals(record.get(\"actionState\").toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTA5Mjk0MA==", "bodyText": "This method seems not used anywhere?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601092940", "createdAt": "2021-03-25T06:23:02Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -254,4 +288,19 @@ private int getArchivedFileSuffix(FileStatus f) {\n       return 0;\n     }\n   }\n+\n+  @Override\n+  public HoodieDefaultTimeline getCommitsAndCompactionTimeline() {\n+    // filter in-memory instants\n+    Set<String> validActions = CollectionUtils.createSet(COMMIT_ACTION, DELTA_COMMIT_ACTION, COMPACTION_ACTION, REPLACE_COMMIT_ACTION);\n+    return new HoodieDefaultTimeline(getInstants().filter(i ->\n+        readCommits.keySet().contains(i.getTimestamp()))\n+        .filter(s -> validActions.contains(s.getAction())), details);\n+  }\n+\n+  public HoodieArchivedTimeline filterArchivedCompactionInstant() {\n+    // filter INFLIGHT compaction instants\n+    return new HoodieArchivedTimeline(this.metaClient, getInstants().filter(i ->\n+        i.isInflight() && i.getAction().equals(HoodieTimeline.COMPACTION_ACTION)));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEwNDcxMw==", "bodyText": "param Class<T> clazz seems redundant", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601104713", "createdAt": "2021-03-25T06:42:09Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineMetadataUtils.java", "diffHunk": "@@ -176,4 +179,13 @@ public static HoodieReplaceCommitMetadata deserializeHoodieReplaceMetadata(byte[\n     ValidationUtils.checkArgument(fileReader.hasNext(), \"Could not deserialize metadata of type \" + clazz);\n     return fileReader.next();\n   }\n+\n+  public static <T extends SpecificRecordBase> T deserializeAvroRecordMetadata(byte[] bytes, Schema schema, Class<T> clazz)\n+      throws IOException {\n+    return  deserializeAvroRecordMetadata(HoodieAvroUtils.bytesToAvro(bytes, schema), schema, clazz);\n+  }\n+\n+  public static <T extends SpecificRecordBase> T deserializeAvroRecordMetadata(Object object, Schema schema, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw==", "bodyText": "why remove this?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601116817", "createdAt": "2021-03-25T06:56:32Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEyMDg5MA==", "bodyText": "if we want to load a ts equals compactionInstantTime, can we add a new method that takes only one instantTime as input param? WDYT", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601120890", "createdAt": "2021-03-25T07:01:10Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw=="}, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEyMTYzMw==", "bodyText": "same here", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601121633", "createdAt": "2021-03-25T07:02:13Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);\n     try {\n-      archivedTimeline.loadInstantDetailsInMemory(startTs, endTs);\n-      HoodieCompactionPlan compactionPlan = TimelineMetadataUtils.deserializeCompactionPlan(\n-              archivedTimeline.getInstantDetails(instant).get());\n+      archivedTimeline.loadCompactionDetailsInMemory(compactionInstantTime, compactionInstantTime);\n+      HoodieCompactionPlan compactionPlan = TimelineMetadataUtils.deserializeAvroRecordMetadata(\n+              archivedTimeline.getInstantDetails(instant).get(), HoodieCompactionPlan.getClassSchema(),\n+              HoodieCompactionPlan.class);\n       return printCompaction(compactionPlan, sortByField, descending, limit, headerOnly);\n     } finally {\n-      archivedTimeline.clearInstantDetailsFromMemory(startTs, endTs);\n+      archivedTimeline.clearInstantDetailsFromMemory(compactionInstantTime, compactionInstantTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7", "committedDate": "2021-02-04T09:31:12Z", "message": "fix"}, "afterCommit": {"oid": "cf983eb2f805a0524b84656cb01bc04e4fd5f250", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/cf983eb2f805a0524b84656cb01bc04e4fd5f250", "committedDate": "2021-03-31T03:09:59Z", "message": "fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf983eb2f805a0524b84656cb01bc04e4fd5f250", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/cf983eb2f805a0524b84656cb01bc04e4fd5f250", "committedDate": "2021-03-31T03:09:59Z", "message": "fix"}, "afterCommit": {"oid": "9cb7bf6a1c0526fbf3974b8d3274cc1b10c94e10", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/9cb7bf6a1c0526fbf3974b8d3274cc1b10c94e10", "committedDate": "2021-03-31T07:19:59Z", "message": "fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cb7bf6a1c0526fbf3974b8d3274cc1b10c94e10", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/9cb7bf6a1c0526fbf3974b8d3274cc1b10c94e10", "committedDate": "2021-03-31T07:19:59Z", "message": "fix"}, "afterCommit": {"oid": "24790dcfd81bbb1e576d2daffaa0028b9d40e2e5", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/24790dcfd81bbb1e576d2daffaa0028b9d40e2e5", "committedDate": "2021-04-01T02:09:42Z", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI5NTEyNTM2", "url": "https://github.com/apache/hudi/pull/2325#pullrequestreview-629512536", "createdAt": "2021-04-07T00:50:35Z", "commit": {"oid": "483bf74186c0b317be886e4c5c3a1a1d3b3a08b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMDo1MDozNVrOJEFwOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMDo1MDozNVrOJEFwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODM0Ng==", "bodyText": "@hddong  This constructor is redundant.", "url": "https://github.com/apache/hudi/pull/2325#discussion_r608268346", "createdAt": "2021-04-07T00:50:35Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -84,6 +88,14 @@ public HoodieArchivedTimeline(HoodieTableMetaClient metaClient) {\n     this.details = (Function<HoodieInstant, Option<byte[]>> & Serializable) this::getInstantDetails;\n   }\n \n+  public HoodieArchivedTimeline(HoodieTableMetaClient metaClient, Stream<HoodieInstant> instants) {\n+    this.metaClient = metaClient;\n+    setInstants(instants.collect(Collectors.toList()));\n+    // multiple casts will make this lambda serializable -\n+    // http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.16\n+    this.details = (Function<HoodieInstant, Option<byte[]>> & Serializable) this::getInstantDetails;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483bf74186c0b317be886e4c5c3a1a1d3b3a08b8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "committedDate": "2021-04-07T01:45:03Z", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "483bf74186c0b317be886e4c5c3a1a1d3b3a08b8", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/483bf74186c0b317be886e4c5c3a1a1d3b3a08b8", "committedDate": "2021-04-01T06:31:02Z", "message": "update"}, "afterCommit": {"oid": "d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "committedDate": "2021-04-07T01:45:03Z", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMwOTg1ODY4", "url": "https://github.com/apache/hudi/pull/2325#pullrequestreview-630985868", "createdAt": "2021-04-08T05:20:10Z", "commit": {"oid": "d5facf45ff5e8fe2ef1d71d050da523e6f227b6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMxMDY3NTMw", "url": "https://github.com/apache/hudi/pull/2325#pullrequestreview-631067530", "createdAt": "2021-04-08T07:35:14Z", "commit": {"oid": "d5facf45ff5e8fe2ef1d71d050da523e6f227b6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3986, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}