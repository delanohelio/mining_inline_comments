{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTUwMzQ5", "number": 1566, "title": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nHoodieDeltaStreamer create SchemaProvider instance and delegate to DeltaSync for periodical sync. However, default implementation of SchemaProvider does not refresh schema, which can change due to schema evolution. DeltaSync snapshot the schema when it creates writeClient, using the SchemaProvider instance or pick up from source, and the schema for writeClient is not refreshed during the loop of Sync.\nBrief change log\n\nIntroduced a function to refresh schema after every run of DeltaSync.\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-04-26T20:15:17Z", "url": "https://github.com/apache/hudi/pull/1566", "merged": true, "mergeCommit": {"oid": "524193eb4bd45eb21a64c68e927600a52b9ade1d"}, "closed": true, "closedAt": "2020-10-07T03:34:04Z", "author": {"login": "pratyakshsharma"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb1yLkgFqTQwMTMyMzU3Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQCFekgBqjM4NDgwOTE3NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzIzNTc2", "url": "https://github.com/apache/hudi/pull/1566#pullrequestreview-401323576", "createdAt": "2020-04-27T21:01:49Z", "commit": {"oid": "dfaa70dc3bddebe875d1c194ac8916b260d0a3ba"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzk5MTE1", "url": "https://github.com/apache/hudi/pull/1566#pullrequestreview-401399115", "createdAt": "2020-04-27T23:33:49Z", "commit": {"oid": "dfaa70dc3bddebe875d1c194ac8916b260d0a3ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzozMzo0OVrOGM8EFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzozMzo0OVrOGM8EFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDE4Mg==", "bodyText": "@pratyakshsharma : It looks like refreshSchemaProvider  not only refreshes schema-provider but also recreates Source and setup WriteClient\n@vinothchandar : Recreating DeltaSync each run would require to handle embedded timeline server reuse and async compaction triggering differently.  Another option is to have explicit refreshSchema() API in SchemaProvider (with default implementation (for compatibility) and implementing refresh in existing Schema Provider implementation) and have delta-streamer call this ? Let me know your thoughts on this ?", "url": "https://github.com/apache/hudi/pull/1566#discussion_r416220182", "createdAt": "2020-04-27T23:33:49Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -162,18 +162,23 @@ public DeltaSync(HoodieDeltaStreamer.Config cfg, SparkSession sparkSession, Sche\n     this.fs = fs;\n     this.onInitializingHoodieWriteClient = onInitializingHoodieWriteClient;\n     this.props = props;\n-    this.schemaProvider = schemaProvider;\n \n     refreshTimeline();\n-\n     this.transformer = UtilHelpers.createTransformer(cfg.transformerClassNames);\n     this.keyGenerator = DataSourceUtils.createKeyGenerator(props);\n-\n-    this.formatAdapter = new SourceFormatAdapter(\n-        UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider));\n-\n     this.conf = conf;\n+    refreshSchemaProvider(schemaProvider);\n+  }\n \n+  /**\n+   * Very useful when DeltaStreamer is running in continuous mode.\n+   * @param schemaProvider\n+   * @throws IOException\n+   */\n+  public void refreshSchemaProvider(SchemaProvider schemaProvider) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfaa70dc3bddebe875d1c194ac8916b260d0a3ba"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ebc0efa43512fb7e945e2839591fcd0febf63f0", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/5ebc0efa43512fb7e945e2839591fcd0febf63f0", "committedDate": "2020-05-15T10:47:07Z", "message": "Address review comments. Allow write clients to be reinstantiated without affecting timeline-server"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/741db83307e63e9ee6fe9df1911f1bfc6394cf78", "committedDate": "2020-05-15T19:47:46Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDAyMzM5", "url": "https://github.com/apache/hudi/pull/1566#pullrequestreview-413002339", "createdAt": "2020-05-15T22:32:15Z", "commit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjozMjoxNVrOGWVhMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo0ODo1MVrOGWVxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NDQxNg==", "bodyText": "should we add serialVersionUID? If it is not specified and anything in the class imports is shaded -> it will affect autogenerated one. Which causes issues if there is more than 1 version of the class in the classpath which was shaded differently.", "url": "https://github.com/apache/hudi/pull/1566#discussion_r426074416", "createdAt": "2020-05-15T22:32:15Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SchemaSet.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.schema;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaNormalization;\n+\n+import java.util.Set;\n+\n+/**\n+ * Tracks already processed schemas.\n+ */\n+public class SchemaSet implements Serializable {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NjgwMw==", "bodyText": "is it called only once during a run? Will it be an issue if it is called more than once and slightly different schema is returned?", "url": "https://github.com/apache/hudi/pull/1566#discussion_r426076803", "createdAt": "2020-05-15T22:41:59Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SchemaRegistryProvider.java", "diffHunk": "@@ -81,11 +66,22 @@ private static Schema getSchema(String registryUrl) throws IOException {\n \n   @Override\n   public Schema getSourceSchema() {\n-    return schema;\n+    String registryUrl = config.getString(Config.SRC_SCHEMA_REGISTRY_URL_PROP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NzExNw==", "bodyText": "it might result in target schema != source schema when targetRegistryUrl is not specified as schema might change between getSourceSchema, getTargetSchema calls. Is it a problem?", "url": "https://github.com/apache/hudi/pull/1566#discussion_r426077117", "createdAt": "2020-05-15T22:43:15Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SchemaRegistryProvider.java", "diffHunk": "@@ -81,11 +66,22 @@ private static Schema getSchema(String registryUrl) throws IOException {\n \n   @Override\n   public Schema getSourceSchema() {\n-    return schema;\n+    String registryUrl = config.getString(Config.SRC_SCHEMA_REGISTRY_URL_PROP);\n+    try {\n+      return getSchema(registryUrl);\n+    } catch (IOException ioe) {\n+      throw new HoodieIOException(\"Error reading source schema from registry :\" + registryUrl, ioe);\n+    }\n   }\n \n   @Override\n   public Schema getTargetSchema() {\n-    return targetSchema;\n+    String registryUrl = config.getString(Config.SRC_SCHEMA_REGISTRY_URL_PROP);\n+    String targetRegistryUrl = config.getString(Config.TARGET_SCHEMA_REGISTRY_URL_PROP, registryUrl);\n+    try {\n+      return getSchema(targetRegistryUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NzI0NQ==", "bodyText": "would be great to have some documentation on why it is done this way.", "url": "https://github.com/apache/hudi/pull/1566#discussion_r426077245", "createdAt": "2020-05-15T22:43:54Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/HoodieDeltaStreamer.java", "diffHunk": "@@ -464,21 +464,25 @@ private void shutdownCompactor(boolean error) {\n      */\n     protected Boolean onInitializingWriteClient(HoodieWriteClient writeClient) {\n       if (cfg.isAsyncCompactionEnabled()) {\n-        asyncCompactService = new AsyncCompactService(jssc, writeClient);\n-        // Enqueue existing pending compactions first\n-        HoodieTableMetaClient meta =\n-            new HoodieTableMetaClient(new Configuration(jssc.hadoopConfiguration()), cfg.targetBasePath, true);\n-        List<HoodieInstant> pending = CompactionUtils.getPendingCompactionInstantTimes(meta);\n-        pending.forEach(hoodieInstant -> asyncCompactService.enqueuePendingCompaction(hoodieInstant));\n-        asyncCompactService.start((error) -> {\n-          // Shutdown DeltaSync\n-          shutdown(false);\n-          return true;\n-        });\n-        try {\n-          asyncCompactService.waitTillPendingCompactionsReducesTo(cfg.maxPendingCompactions);\n-        } catch (InterruptedException ie) {\n-          throw new HoodieException(ie);\n+        if (null != asyncCompactService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NzgwOQ==", "bodyText": "is it used anywhere?", "url": "https://github.com/apache/hudi/pull/1566#discussion_r426077809", "createdAt": "2020-05-15T22:46:02Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/Compactor.java", "diffHunk": "@@ -59,6 +60,10 @@ public void compact(HoodieInstant instant) throws IOException {\n           \"Compaction for instant (\" + instant + \") failed with write errors. Errors :\" + numWriteErrors);\n     }\n     // Commit compaction\n-    compactionClient.commitCompaction(instant.getTimestamp(), res, Option.empty());\n+    writeClient.commitCompaction(instant.getTimestamp(), res, Option.empty());\n+  }\n+\n+  public void updateWriteClient(HoodieWriteClient writeClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3ODUwMQ==", "bodyText": "will this grow indefinitely? How would we remove old schema?", "url": "https://github.com/apache/hudi/pull/1566#discussion_r426078501", "createdAt": "2020-05-15T22:48:51Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SchemaSet.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.schema;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaNormalization;\n+\n+import java.util.Set;\n+\n+/**\n+ * Tracks already processed schemas.\n+ */\n+public class SchemaSet implements Serializable {\n+\n+  private final Set<Long> processedSchema = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "741db83307e63e9ee6fe9df1911f1bfc6394cf78", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/741db83307e63e9ee6fe9df1911f1bfc6394cf78", "committedDate": "2020-05-15T19:47:46Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}, "afterCommit": {"oid": "f547f6f4fe289cc44c8a426ed58bdee5f62a7f78", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/f547f6f4fe289cc44c8a426ed58bdee5f62a7f78", "committedDate": "2020-09-20T04:00:12Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f547f6f4fe289cc44c8a426ed58bdee5f62a7f78", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/f547f6f4fe289cc44c8a426ed58bdee5f62a7f78", "committedDate": "2020-09-20T04:00:12Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}, "afterCommit": {"oid": "4f2450f521cb2dbc87867bcd4674c2042efe64a4", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/4f2450f521cb2dbc87867bcd4674c2042efe64a4", "committedDate": "2020-09-20T04:06:34Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f2450f521cb2dbc87867bcd4674c2042efe64a4", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/4f2450f521cb2dbc87867bcd4674c2042efe64a4", "committedDate": "2020-09-20T04:06:34Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}, "afterCommit": {"oid": "43fe6e6502e2c8283df70f208d3777d04fc8f900", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/43fe6e6502e2c8283df70f208d3777d04fc8f900", "committedDate": "2020-09-20T05:33:07Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDMxNzA1", "url": "https://github.com/apache/hudi/pull/1566#pullrequestreview-497031705", "createdAt": "2020-09-26T21:21:28Z", "commit": {"oid": "43fe6e6502e2c8283df70f208d3777d04fc8f900"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMToyMToyOFrOHYiugQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMToyMToyOFrOHYiugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5NjgzMw==", "bodyText": "Any specific reason for introducing a new variable here?", "url": "https://github.com/apache/hudi/pull/1566#discussion_r495496833", "createdAt": "2020-09-26T21:21:28Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/Compactor.java", "diffHunk": "@@ -45,7 +45,8 @@ public Compactor(HoodieWriteClient compactionClient) {\n \n   public void compact(HoodieInstant instant) throws IOException {\n     LOG.info(\"Compactor executing compaction \" + instant);\n-    JavaRDD<WriteStatus> res = compactionClient.compact(instant.getTimestamp());\n+    HoodieWriteClient writeClient = compactionClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fe6e6502e2c8283df70f208d3777d04fc8f900"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDMyNjkz", "url": "https://github.com/apache/hudi/pull/1566#pullrequestreview-497032693", "createdAt": "2020-09-26T21:42:52Z", "commit": {"oid": "43fe6e6502e2c8283df70f208d3777d04fc8f900"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo0Mjo1MlrOHYi1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo0Mjo1MlrOHYi1HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5ODUyNQ==", "bodyText": "Just curious, can you please explain why do we need to call this function here? @bvaradar", "url": "https://github.com/apache/hudi/pull/1566#discussion_r495498525", "createdAt": "2020-09-26T21:42:52Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -536,14 +564,35 @@ public void syncHive(HiveConf conf) {\n    * SchemaProvider creation is a precursor to HoodieWriteClient and AsyncCompactor creation. This method takes care of\n    * this constraint.\n    */\n-  private void setupWriteClient() {\n-    LOG.info(\"Setting up Hoodie Write Client\");\n-    if ((null != schemaProvider) && (null == writeClient)) {\n-      registerAvroSchemas(schemaProvider);\n-      HoodieWriteConfig hoodieCfg = getHoodieClientConfig(schemaProvider);\n-      writeClient = new HoodieWriteClient<>(jssc, hoodieCfg, true);\n-      onInitializingHoodieWriteClient.apply(writeClient);\n+  public void setupWriteClient() throws IOException {\n+    if ((null != schemaProvider)) {\n+      Schema sourceSchema = schemaProvider.getSourceSchema();\n+      Schema targetSchema = schemaProvider.getTargetSchema();\n+      createNewWriteClient(sourceSchema, targetSchema);\n+    }\n+  }\n+\n+  private void createNewWriteClient(Schema sourceSchema, Schema targetSchema) throws IOException {\n+    LOG.info(\"Setting up new Hoodie Write Client\");\n+    registerAvroSchemas(sourceSchema, targetSchema);\n+    HoodieWriteConfig hoodieCfg = getHoodieClientConfig(targetSchema);\n+    if (hoodieCfg.isEmbeddedTimelineServerEnabled()) {\n+      if (!embeddedTimelineService.isPresent()) {\n+        embeddedTimelineService = EmbeddedTimelineServerHelper.createEmbeddedTimelineService(jssc.hadoopConfiguration(),\n+            jssc.getConf(), hoodieCfg);\n+      } else {\n+        EmbeddedTimelineServerHelper.updateWriteConfigWithTimelineServer(embeddedTimelineService.get(), hoodieCfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fe6e6502e2c8283df70f208d3777d04fc8f900"}, "originalPosition": 98}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43fe6e6502e2c8283df70f208d3777d04fc8f900", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/43fe6e6502e2c8283df70f208d3777d04fc8f900", "committedDate": "2020-09-20T05:33:07Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}, "afterCommit": {"oid": "75b10c1381fdb989f02803a25eb2614ad471f666", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/75b10c1381fdb989f02803a25eb2614ad471f666", "committedDate": "2020-10-04T16:49:50Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjY4NzY1", "url": "https://github.com/apache/hudi/pull/1566#pullrequestreview-501668765", "createdAt": "2020-10-04T23:25:22Z", "commit": {"oid": "a0b3b64eae966fb35e92de7dc99a01b3d871ef37"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMzoyNToyM1rOHcK2Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMzoyNzo0MFrOHcK2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5OTg1MA==", "bodyText": "I really dislike all the nested ifs-and null checks. :( there ought to be a better way of structuring this code overall. Side rant", "url": "https://github.com/apache/hudi/pull/1566#discussion_r499299850", "createdAt": "2020-10-04T23:25:23Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -244,6 +263,18 @@ private void refreshTimeline() throws IOException {\n         this.schemaProvider = srcRecordsWithCkpt.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b3b64eae966fb35e92de7dc99a01b3d871ef37"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5OTk0NA==", "bodyText": "rename: reInitWriteClient()", "url": "https://github.com/apache/hudi/pull/1566#discussion_r499299944", "createdAt": "2020-10-04T23:26:38Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -534,19 +565,33 @@ public void syncHive(HiveConf conf) {\n     syncHive();\n   }\n \n-  /**\n-   * Note that depending on configs and source-type, schemaProvider could either be eagerly or lazily created.\n-   * SchemaProvider creation is a precursor to HoodieWriteClient and AsyncCompactor creation. This method takes care of\n-   * this constraint.\n-   */\n-  private void setupWriteClient() {\n-    LOG.info(\"Setting up Hoodie Write Client\");\n-    if ((null != schemaProvider) && (null == writeClient)) {\n-      registerAvroSchemas(schemaProvider);\n-      HoodieWriteConfig hoodieCfg = getHoodieClientConfig(schemaProvider);\n-      writeClient = new SparkRDDWriteClient<>(new HoodieSparkEngineContext(jssc), hoodieCfg, true);\n-      onInitializingHoodieWriteClient.apply(writeClient);\n+  public void setupWriteClient() throws IOException {\n+    if ((null != schemaProvider)) {\n+      Schema sourceSchema = schemaProvider.getSourceSchema();\n+      Schema targetSchema = schemaProvider.getTargetSchema();\n+      createNewWriteClient(sourceSchema, targetSchema);\n+    }\n+  }\n+\n+  private void createNewWriteClient(Schema sourceSchema, Schema targetSchema) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b3b64eae966fb35e92de7dc99a01b3d871ef37"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMDAyNQ==", "bodyText": "any need to make this synchronized across threads?", "url": "https://github.com/apache/hudi/pull/1566#discussion_r499300025", "createdAt": "2020-10-04T23:27:40Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/HoodieDeltaStreamer.java", "diffHunk": "@@ -624,21 +624,26 @@ private void shutdownCompactor(boolean error) {\n      */\n     protected Boolean onInitializingWriteClient(SparkRDDWriteClient writeClient) {\n       if (cfg.isAsyncCompactionEnabled()) {\n-        asyncCompactService = new SparkAsyncCompactService(new HoodieSparkEngineContext(jssc), writeClient);\n-        // Enqueue existing pending compactions first\n-        HoodieTableMetaClient meta =\n-            new HoodieTableMetaClient(new Configuration(jssc.hadoopConfiguration()), cfg.targetBasePath, true);\n-        List<HoodieInstant> pending = CompactionUtils.getPendingCompactionInstantTimes(meta);\n-        pending.forEach(hoodieInstant -> asyncCompactService.enqueuePendingCompaction(hoodieInstant));\n-        asyncCompactService.start((error) -> {\n-          // Shutdown DeltaSync\n-          shutdown(false);\n-          return true;\n-        });\n-        try {\n-          asyncCompactService.waitTillPendingCompactionsReducesTo(cfg.maxPendingCompactions);\n-        } catch (InterruptedException ie) {\n-          throw new HoodieException(ie);\n+        if (null != asyncCompactService) {\n+          // Update the write client used by Async Compactor.\n+          asyncCompactService.updateWriteClient(writeClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b3b64eae966fb35e92de7dc99a01b3d871ef37"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61c87c0639ddb50fc038212ba7dd18cc92f73a7", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/b61c87c0639ddb50fc038212ba7dd18cc92f73a7", "committedDate": "2020-10-07T00:43:18Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0b3b64eae966fb35e92de7dc99a01b3d871ef37", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/hudi/commit/a0b3b64eae966fb35e92de7dc99a01b3d871ef37", "committedDate": "2020-10-04T18:20:34Z", "message": "Fix checkstyle"}, "afterCommit": {"oid": "b61c87c0639ddb50fc038212ba7dd18cc92f73a7", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/b61c87c0639ddb50fc038212ba7dd18cc92f73a7", "committedDate": "2020-10-07T00:43:18Z", "message": "[HUDI-603]: DeltaStreamer can now fetch schema before every run in continuous mode"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3029, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}