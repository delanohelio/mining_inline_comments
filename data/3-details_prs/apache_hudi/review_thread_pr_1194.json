{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzM0Mjc3", "number": 1194, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMTozNlrODWIPpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1NjoyM1rODXseFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTMwMzQzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/index/HoodieIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMTozNlrOFatk0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMTozNlrOFatk0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDAwMw==", "bodyText": "This is not very desirable since this is only required for deletion purposes and does not add any other value. Each implementation of the Index already has a method that describes whether it's global or not.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r363554003", "createdAt": "2020-01-07T01:11:36Z", "author": {"login": "n3nash"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/HoodieIndex.java", "diffHunk": "@@ -43,6 +44,8 @@\n  */\n public abstract class HoodieIndex<T extends HoodieRecordPayload> implements Serializable {\n \n+  public static EnumSet<IndexType> GLOBAL_INDICES = EnumSet.of(IndexType.GLOBAL_BLOOM, IndexType.HBASE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTMwNTc2OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMzozMFrOFatmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNToyOVrOFbDVSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDM3NA==", "bodyText": "There is a NonPartitionedKeyGenerator that you can pass and use for deletions. Since as a client you are aware of 2 facts a) Either you are using GLOBAL_INDEX or not b) If this batch is for Deletions, you can configure the hudi client accordingly with a correct partition generator -> https://github.com/apache/incubator-hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/NonpartitionedKeyGenerator.java\nMay be we can extend this class to reflect the correct key generation strategy for deletions with a more reasonable explicit name", "url": "https://github.com/apache/hudi/pull/1194#discussion_r363554374", "createdAt": "2020-01-07T01:13:30Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -161,7 +162,17 @@ private[hudi] object HoodieSparkSqlWriter {\n       // Convert to RDD[HoodieKey]\n       val keyGenerator = DataSourceUtils.createKeyGenerator(toProperties(parameters))\n       val genericRecords: RDD[GenericRecord] = AvroConversionUtils.createRdd(df, structName, nameSpace)\n-      val hoodieKeysToDelete = genericRecords.map(gr => keyGenerator.getKey(gr)).toJavaRDD()\n+      val hoodieKeysToDelete = if (HoodieIndex.GLOBAL_INDICES.contains(parameters(HoodieIndexConfig.INDEX_TYPE_PROP))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2OTk5MQ==", "bodyText": "@n3nash thanks for bringing that keyGenerator to my attention. That better serves my use case. Do you think extending it into a \"GlobalDeleteKeyGenerator\" would be a valid change instead? Or possibly creating an entirely new keyGenerator for global deletes instead, because the nonpartitionedKeyGenerator would not work if you are using the complex key generator.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r363869991", "createdAt": "2020-01-07T17:48:07Z", "author": {"login": "bschell"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -161,7 +162,17 @@ private[hudi] object HoodieSparkSqlWriter {\n       // Convert to RDD[HoodieKey]\n       val keyGenerator = DataSourceUtils.createKeyGenerator(toProperties(parameters))\n       val genericRecords: RDD[GenericRecord] = AvroConversionUtils.createRdd(df, structName, nameSpace)\n-      val hoodieKeysToDelete = genericRecords.map(gr => keyGenerator.getKey(gr)).toJavaRDD()\n+      val hoodieKeysToDelete = if (HoodieIndex.GLOBAL_INDICES.contains(parameters(HoodieIndexConfig.INDEX_TYPE_PROP))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDM3NA=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMDQ3Mg==", "bodyText": "I think just create an entirely new keyGenerator since tables with GlobalIndex can still be partitioned, all we are doing is here allowing us to pass just the record_keys to be able to delete those records.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r363910472", "createdAt": "2020-01-07T19:25:29Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -161,7 +162,17 @@ private[hudi] object HoodieSparkSqlWriter {\n       // Convert to RDD[HoodieKey]\n       val keyGenerator = DataSourceUtils.createKeyGenerator(toProperties(parameters))\n       val genericRecords: RDD[GenericRecord] = AvroConversionUtils.createRdd(df, structName, nameSpace)\n-      val hoodieKeysToDelete = genericRecords.map(gr => keyGenerator.getKey(gr)).toJavaRDD()\n+      val hoodieKeysToDelete = if (HoodieIndex.GLOBAL_INDICES.contains(parameters(HoodieIndexConfig.INDEX_TYPE_PROP))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDM3NA=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDgxMDA5OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjoxMjoyOVrOFcIo5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowOToyNVrOFcjylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTk5MQ==", "bodyText": "Can you use this : https://github.com/apache/incubator-hudi/blob/master/hudi-common/src/main/java/org/apache/hudi/common/util/StringUtils.java#L67 ?\nAnd have the throws Exception in the else part that way you won't need an extra variable to track this.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365045991", "createdAt": "2020-01-10T02:12:29Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {\n+    if (recordKeyFields == null) {\n+      throw new HoodieKeyException(\"Unable to find field names for record key or partition path in cfg\");\n+    }\n+\n+    boolean keyIsNullEmpty = true;\n+    StringBuilder recordKey = new StringBuilder();\n+    for (String recordKeyField : recordKeyFields) {\n+      String recordKeyValue = DataSourceUtils.getNestedFieldValAsString(record, recordKeyField, true);\n+      if (recordKeyValue == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2Mjg0NQ==", "bodyText": "Will change to this", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365062845", "createdAt": "2020-01-10T03:49:04Z", "author": {"login": "bschell"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {\n+    if (recordKeyFields == null) {\n+      throw new HoodieKeyException(\"Unable to find field names for record key or partition path in cfg\");\n+    }\n+\n+    boolean keyIsNullEmpty = true;\n+    StringBuilder recordKey = new StringBuilder();\n+    for (String recordKeyField : recordKeyFields) {\n+      String recordKeyValue = DataSourceUtils.getNestedFieldValAsString(record, recordKeyField, true);\n+      if (recordKeyValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTk5MQ=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2MzE0OA==", "bodyText": "Actually do you want to remove the distinction between null/empty? I would rather keep it as I have seen users with both null and empty columns.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365063148", "createdAt": "2020-01-10T03:51:07Z", "author": {"login": "bschell"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {\n+    if (recordKeyFields == null) {\n+      throw new HoodieKeyException(\"Unable to find field names for record key or partition path in cfg\");\n+    }\n+\n+    boolean keyIsNullEmpty = true;\n+    StringBuilder recordKey = new StringBuilder();\n+    for (String recordKeyField : recordKeyFields) {\n+      String recordKeyValue = DataSourceUtils.getNestedFieldValAsString(record, recordKeyField, true);\n+      if (recordKeyValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTk5MQ=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1OTc2Mw==", "bodyText": "@n3nash For more context, am trying to maintain record_key compatibility with\nhttps://github.com/apache/incubator-hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/ComplexKeyGenerator.java", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365459763", "createdAt": "2020-01-10T22:43:22Z", "author": {"login": "bschell"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {\n+    if (recordKeyFields == null) {\n+      throw new HoodieKeyException(\"Unable to find field names for record key or partition path in cfg\");\n+    }\n+\n+    boolean keyIsNullEmpty = true;\n+    StringBuilder recordKey = new StringBuilder();\n+    for (String recordKeyField : recordKeyFields) {\n+      String recordKeyValue = DataSourceUtils.getNestedFieldValAsString(record, recordKeyField, true);\n+      if (recordKeyValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTk5MQ=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODAyNA==", "bodyText": "Interesting, I think we should fix the ComplexKeyGenerator as well, writing extra bytes like \"null\" just to denote null values doesn't seem like the best idea for data lakes.\nCan you open a ticket for addressing that ? We can for now keep this implementation consistent with ComplexKeyGenerator. Once you open the ticket, please link it here and squash your commits to 1 then I can merge this PR, thanks", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365478024", "createdAt": "2020-01-11T00:13:29Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {\n+    if (recordKeyFields == null) {\n+      throw new HoodieKeyException(\"Unable to find field names for record key or partition path in cfg\");\n+    }\n+\n+    boolean keyIsNullEmpty = true;\n+    StringBuilder recordKey = new StringBuilder();\n+    for (String recordKeyField : recordKeyFields) {\n+      String recordKeyValue = DataSourceUtils.getNestedFieldValAsString(record, recordKeyField, true);\n+      if (recordKeyValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTk5MQ=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDgzNw==", "bodyText": "good point, will do.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365490837", "createdAt": "2020-01-11T02:09:25Z", "author": {"login": "bschell"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {\n+    if (recordKeyFields == null) {\n+      throw new HoodieKeyException(\"Unable to find field names for record key or partition path in cfg\");\n+    }\n+\n+    boolean keyIsNullEmpty = true;\n+    StringBuilder recordKey = new StringBuilder();\n+    for (String recordKeyField : recordKeyFields) {\n+      String recordKeyValue = DataSourceUtils.getNestedFieldValAsString(record, recordKeyField, true);\n+      if (recordKeyValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTk5MQ=="}, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDgxNDE0OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjoxNToyMVrOFcIrGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMzo0ODo0MVrOFcJqfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NjU1Mw==", "bodyText": "If the recordkey is \"null\" what is the advantage of creating a record with this string ? There wouldn't be any records with that value in the first place right ?", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365046553", "createdAt": "2020-01-10T02:15:21Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2Mjc4Mg==", "bodyText": "It is for the case when the record_key is a composite key comprised of 2 different columns. One could be null while the other has a value.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365062782", "createdAt": "2020-01-10T03:48:41Z", "author": {"login": "bschell"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NjU1Mw=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTcwOTE0OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/ComplexKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo0NzoxOFrOFdIS-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODozNzozN1rOFdhtjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4ODk1Mw==", "bodyText": "This is a backwards incompatible change. Users would have custom key generators using configuration : DataSourceWriteOptions.KEYGENERATOR_CLASS_OPT_KEY()\nIt makes sense to move to separate package but we need to call out the change in release notes . Please open a tracking ticket to update release notes for this.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r366088953", "createdAt": "2020-01-13T23:47:18Z", "author": {"login": "bvaradar"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/ComplexKeyGenerator.java", "diffHunk": "@@ -16,8 +16,10 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi;\n+package org.apache.hudi.keygen;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNTM1OQ==", "bodyText": "+1 @bschell", "url": "https://github.com/apache/hudi/pull/1194#discussion_r366505359", "createdAt": "2020-01-14T18:37:37Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/ComplexKeyGenerator.java", "diffHunk": "@@ -16,8 +16,10 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi;\n+package org.apache.hudi.keygen;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4ODk1Mw=="}, "originalCommit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTcyNDM4OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1NjoyM1rOFdIcgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODozOTowNlrOFdhwRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MTM5Mg==", "bodyText": "@bschell : The only difference between GlobalDeleteKeyGenerator and ComplexKeyGenerator is that the former always creates an empty-partition path. right ? In that case, can we simply refactor the getKey() method in ComplexKeyGenerator and have GlobalDeleteKeyGenerator extend ComplexKeyGenerator with necessary changes to make it to work for empty partition-path. The advantage is we use all the logic related  to nested fields handling in one place ? Let me know your thoughts.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r366091392", "createdAt": "2020-01-13T23:56:23Z", "author": {"login": "bvaradar"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNjA1Mw==", "bodyText": "I think the point was to make the GlobalDeleteKeyGenerator work for any case, complex or simple.\n@bvaradar", "url": "https://github.com/apache/hudi/pull/1194#discussion_r366506053", "createdAt": "2020-01-14T18:39:06Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MTM5Mg=="}, "originalCommit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 78, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}