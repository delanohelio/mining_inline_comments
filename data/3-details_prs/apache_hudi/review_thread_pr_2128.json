{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDIxMzA1", "number": 2128, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo0NzoyNFrOEqHQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1Mjo1MVrOEqHSZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk0Njc4OnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo0NzoyNFrOHcJatg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozNToyM1rOHcq9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NjQ3MA==", "bodyText": "minor. we might as well do while (numEntriesToAdd-- > 0) {\nand remove line 208.", "url": "https://github.com/apache/hudi/pull/2128#discussion_r499276470", "createdAt": "2020-10-04T18:47:24Z", "author": {"login": "nsivabalan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -205,45 +193,36 @@ private Object typeConvert(Schema schema) {\n       case LONG:\n         return getNextConstrainedLong();\n       case STRING:\n-        return UUID.randomUUID().toString();\n+       return UUID.randomUUID().toString();\n       case ENUM:\n-        List<String> enumSymbols = localSchema.getEnumSymbols();\n-        return new GenericData.EnumSymbol(localSchema, enumSymbols.get(random.nextInt(enumSymbols.size() - 1)));\n+        List<String> enumSymbols = fieldSchema.getEnumSymbols();\n+        return new GenericData.EnumSymbol(fieldSchema, enumSymbols.get(random.nextInt(enumSymbols.size() - 1)));\n       case RECORD:\n-        return convert(localSchema);\n+        return getNewPayload(fieldSchema);\n       case ARRAY:\n-        Schema elementSchema = localSchema.getElementType();\n+        Schema.Field elementField = new Schema.Field(field.name(), fieldSchema.getElementType(), \"\", null);\n         List listRes = new ArrayList();\n-        if (isPrimitive(elementSchema) && this.shouldAddMore) {\n-          int numEntriesToAdd = numEntriesToAdd(elementSchema);\n-          while (numEntriesToAdd > 0) {\n-            listRes.add(typeConvert(elementSchema));\n-            numEntriesToAdd--;\n-          }\n-        } else {\n-          listRes.add(typeConvert(elementSchema));\n+        int numEntriesToAdd = extraEntriesMap.getOrDefault(field.name(), 1);\n+        while (numEntriesToAdd > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1b46a918dd8714eb2a4793765ad40285b0b35f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNTk5OA==", "bodyText": "Done", "url": "https://github.com/apache/hudi/pull/2128#discussion_r499825998", "createdAt": "2020-10-05T19:35:23Z", "author": {"login": "prashantwason"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -205,45 +193,36 @@ private Object typeConvert(Schema schema) {\n       case LONG:\n         return getNextConstrainedLong();\n       case STRING:\n-        return UUID.randomUUID().toString();\n+       return UUID.randomUUID().toString();\n       case ENUM:\n-        List<String> enumSymbols = localSchema.getEnumSymbols();\n-        return new GenericData.EnumSymbol(localSchema, enumSymbols.get(random.nextInt(enumSymbols.size() - 1)));\n+        List<String> enumSymbols = fieldSchema.getEnumSymbols();\n+        return new GenericData.EnumSymbol(fieldSchema, enumSymbols.get(random.nextInt(enumSymbols.size() - 1)));\n       case RECORD:\n-        return convert(localSchema);\n+        return getNewPayload(fieldSchema);\n       case ARRAY:\n-        Schema elementSchema = localSchema.getElementType();\n+        Schema.Field elementField = new Schema.Field(field.name(), fieldSchema.getElementType(), \"\", null);\n         List listRes = new ArrayList();\n-        if (isPrimitive(elementSchema) && this.shouldAddMore) {\n-          int numEntriesToAdd = numEntriesToAdd(elementSchema);\n-          while (numEntriesToAdd > 0) {\n-            listRes.add(typeConvert(elementSchema));\n-            numEntriesToAdd--;\n-          }\n-        } else {\n-          listRes.add(typeConvert(elementSchema));\n+        int numEntriesToAdd = extraEntriesMap.getOrDefault(field.name(), 1);\n+        while (numEntriesToAdd > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NjQ3MA=="}, "originalCommit": {"oid": "8c1b46a918dd8714eb2a4793765ad40285b0b35f"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk1MDQ0OnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1Mjo1MVrOHcJcjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozOToxNlrOHcrE3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Njk0MQ==", "bodyText": "what happens if there is only one complexField and numEntriesToAdd is > 10 ?", "url": "https://github.com/apache/hudi/pull/2128#discussion_r499276941", "createdAt": "2020-10-04T18:52:51Z", "author": {"login": "nsivabalan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -333,23 +312,37 @@ private int getSize(Schema elementSchema) {\n    * @param elementSchema\n    * @return Number of entries to add\n    */\n-  private int numEntriesToAdd(Schema elementSchema) {\n-    // Find the size of the primitive data type in bytes\n-    int primitiveDataTypeSize = getSize(elementSchema);\n-    int numEntriesToAdd = numberOfBytesToAdd / primitiveDataTypeSize;\n-    // If more than 10 entries are being added for this same complex field and there are still more complex fields to\n-    // be visited in the schema, reduce the number of entries to add by a factor of 10 to allow for other complex\n-    // fields to pack some entries\n-    if (numEntriesToAdd % 10 > 0 && this.numberOfComplexFields > 1) {\n-      numEntriesToAdd = numEntriesToAdd / 10;\n-      numberOfBytesToAdd -= numEntriesToAdd * primitiveDataTypeSize;\n-      this.shouldAddMore = true;\n-    } else {\n-      this.numberOfBytesToAdd = 0;\n-      this.shouldAddMore = false;\n+  private void determineExtraEntriesRequired(int numberOfComplexFields, int numberOfBytesToAdd) {\n+    for (Schema.Field f : baseSchema.getFields()) {\n+      Schema elementSchema = f.schema();\n+      // Find the size of the primitive data type in bytes\n+      int primitiveDataTypeSize = 0;\n+      if (elementSchema.getType() == Type.ARRAY && isPrimitive(elementSchema.getElementType())) {\n+        primitiveDataTypeSize = getSize(elementSchema.getElementType());\n+      } else if (elementSchema.getType() == Type.MAP && isPrimitive(elementSchema.getValueType())) {\n+        primitiveDataTypeSize = getSize(elementSchema.getValueType());\n+      } else {\n+        continue;\n+      }\n+\n+      int numEntriesToAdd = numberOfBytesToAdd / primitiveDataTypeSize;\n+      // If more than 10 entries are being added for this same complex field and there are still more complex fields to\n+      // be visited in the schema, reduce the number of entries to add by a factor of 10 to allow for other complex\n+      // fields to pack some entries\n+      if (numEntriesToAdd > 10 && numberOfComplexFields > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1b46a918dd8714eb2a4793765ad40285b0b35f"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzkzMw==", "bodyText": "The idea here is to distribute the extra-entries (ins some way) across all complex fields.\n\nIf there is only one complex field then all extra bytes will be added to that single entry.\n\nint numEntriesToAdd = numberOfBytesToAdd / primitiveDataTypeSize;\n...\nextraEntriesMap.put(f.name(), numEntriesToAdd);\n\nIf there are more than 1 complex field, then we add atleast 10 entries to the first one, and so on....\n\nThe perfect solution is to equally divide the extra bytes across all complex fields but I have not covered that yet. (slightly complicated as each field may have different size, etc).", "url": "https://github.com/apache/hudi/pull/2128#discussion_r499827933", "createdAt": "2020-10-05T19:39:16Z", "author": {"login": "prashantwason"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -333,23 +312,37 @@ private int getSize(Schema elementSchema) {\n    * @param elementSchema\n    * @return Number of entries to add\n    */\n-  private int numEntriesToAdd(Schema elementSchema) {\n-    // Find the size of the primitive data type in bytes\n-    int primitiveDataTypeSize = getSize(elementSchema);\n-    int numEntriesToAdd = numberOfBytesToAdd / primitiveDataTypeSize;\n-    // If more than 10 entries are being added for this same complex field and there are still more complex fields to\n-    // be visited in the schema, reduce the number of entries to add by a factor of 10 to allow for other complex\n-    // fields to pack some entries\n-    if (numEntriesToAdd % 10 > 0 && this.numberOfComplexFields > 1) {\n-      numEntriesToAdd = numEntriesToAdd / 10;\n-      numberOfBytesToAdd -= numEntriesToAdd * primitiveDataTypeSize;\n-      this.shouldAddMore = true;\n-    } else {\n-      this.numberOfBytesToAdd = 0;\n-      this.shouldAddMore = false;\n+  private void determineExtraEntriesRequired(int numberOfComplexFields, int numberOfBytesToAdd) {\n+    for (Schema.Field f : baseSchema.getFields()) {\n+      Schema elementSchema = f.schema();\n+      // Find the size of the primitive data type in bytes\n+      int primitiveDataTypeSize = 0;\n+      if (elementSchema.getType() == Type.ARRAY && isPrimitive(elementSchema.getElementType())) {\n+        primitiveDataTypeSize = getSize(elementSchema.getElementType());\n+      } else if (elementSchema.getType() == Type.MAP && isPrimitive(elementSchema.getValueType())) {\n+        primitiveDataTypeSize = getSize(elementSchema.getValueType());\n+      } else {\n+        continue;\n+      }\n+\n+      int numEntriesToAdd = numberOfBytesToAdd / primitiveDataTypeSize;\n+      // If more than 10 entries are being added for this same complex field and there are still more complex fields to\n+      // be visited in the schema, reduce the number of entries to add by a factor of 10 to allow for other complex\n+      // fields to pack some entries\n+      if (numEntriesToAdd > 10 && numberOfComplexFields > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Njk0MQ=="}, "originalCommit": {"oid": "8c1b46a918dd8714eb2a4793765ad40285b0b35f"}, "originalPosition": 226}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4311, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}