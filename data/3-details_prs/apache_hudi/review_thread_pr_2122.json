{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjg4Mzcw", "number": 2122, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoyNzozMVrOEn5zag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowNjo1M1rOEyvMXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjc2OTcwOnYy", "diffSide": "RIGHT", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoyNzozMVrOHYsqMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjo0ODo1OVrOHYs6eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1OTU2OQ==", "bodyText": "This check can be removed, it is always true.", "url": "https://github.com/apache/hudi/pull/2122#discussion_r495659569", "createdAt": "2020-09-28T02:27:31Z", "author": {"login": "wangxianghu"}, "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "diffHunk": "@@ -36,30 +36,40 @@\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n-  public SlashEncodedDayPartitionValueExtractor() {\n-    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-  }\n-\n-  private DateTimeFormatter getDtfOut() {\n-    if (dtfOut == null) {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    }\n-    return dtfOut;\n-  }\n-\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n+\n+    int year = 0;\n+    int mm = 0;\n+    int dd = 0;\n+    int hh = 0;\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n-    if (splits.length != 3) {\n-      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd \");\n+    if (splits.length != 3 && splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n     }\n     // Get the partition part and remove the / as well at the end\n-    int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n-    int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n-    int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    DateTime dateTime = new DateTime(year, mm, dd, 0, 0);\n+    if (splits.length == 3 || splits.length == 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c6560d75fcbc3365e6b9dd4ab73e08f8327a23"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MzczNw==", "bodyText": "The rest LGTM cc @yanghua", "url": "https://github.com/apache/hudi/pull/2122#discussion_r495663737", "createdAt": "2020-09-28T02:48:59Z", "author": {"login": "wangxianghu"}, "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "diffHunk": "@@ -36,30 +36,40 @@\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n-  public SlashEncodedDayPartitionValueExtractor() {\n-    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-  }\n-\n-  private DateTimeFormatter getDtfOut() {\n-    if (dtfOut == null) {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    }\n-    return dtfOut;\n-  }\n-\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n+\n+    int year = 0;\n+    int mm = 0;\n+    int dd = 0;\n+    int hh = 0;\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n-    if (splits.length != 3) {\n-      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd \");\n+    if (splits.length != 3 && splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n     }\n     // Get the partition part and remove the / as well at the end\n-    int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n-    int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n-    int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    DateTime dateTime = new DateTime(year, mm, dd, 0, 0);\n+    if (splits.length == 3 || splits.length == 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1OTU2OQ=="}, "originalCommit": {"oid": "b6c6560d75fcbc3365e6b9dd4ab73e08f8327a23"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU0ODk2OnYy", "diffSide": "RIGHT", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNTozMVrOHYzt7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNTozMVrOHYzt7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NTIxNQ==", "bodyText": "@liujinhui1994 Thanks for addressing my concern, LGTM now", "url": "https://github.com/apache/hudi/pull/2122#discussion_r495775215", "createdAt": "2020-09-28T08:35:31Z", "author": {"login": "wangxianghu"}, "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "diffHunk": "@@ -36,30 +36,35 @@\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n-  public SlashEncodedDayPartitionValueExtractor() {\n-    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-  }\n-\n-  private DateTimeFormatter getDtfOut() {\n-    if (dtfOut == null) {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    }\n-    return dtfOut;\n-  }\n-\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n+\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n-    if (splits.length != 3) {\n-      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd \");\n+    if (splits.length != 3 && splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n     }\n     // Get the partition part and remove the / as well at the end\n     int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n     int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n     int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    DateTime dateTime = new DateTime(year, mm, dd, 0, 0);\n+    int hh = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17f8c8b3c3a1381cfde25f39e340f080fa080c6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzgwMzU0OnYy", "diffSide": "LEFT", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjoxMDowNVrOHZcPww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjoxMDowNVrOHZcPww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzOTIzNQ==", "bodyText": "If you try to support hourly partition, then this name is not suitable. WDYT?", "url": "https://github.com/apache/hudi/pull/2122#discussion_r496439235", "createdAt": "2020-09-29T06:10:05Z", "author": {"login": "yanghua"}, "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "diffHunk": "@@ -36,30 +36,35 @@\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n-  public SlashEncodedDayPartitionValueExtractor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17f8c8b3c3a1381cfde25f39e340f080fa080c6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDI4MDM1OnYy", "diffSide": "RIGHT", "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjoxNzoxMlrOHoo8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzozNzowM1rOHo8jDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTkxMw==", "bodyText": "IMO, we need to add more test cases to improve the test coverage. wdyt?", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512375913", "createdAt": "2020-10-27T02:17:12Z", "author": {"login": "yanghua"}, "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.apache.hudi.hive;\n+\n+import org.junit.jupiter.api.Test;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PartitionValueExtractorTest {\n+  @Test\n+  public void testHourPartition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTk4OQ==", "bodyText": "e.g. some bad cases", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512375989", "createdAt": "2020-10-27T02:17:27Z", "author": {"login": "yanghua"}, "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.apache.hudi.hive;\n+\n+import org.junit.jupiter.api.Test;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PartitionValueExtractorTest {\n+  @Test\n+  public void testHourPartition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTkxMw=="}, "originalCommit": {"oid": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NzEwMg==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512697102", "createdAt": "2020-10-27T13:37:03Z", "author": {"login": "liujinhui1994"}, "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.apache.hudi.hive;\n+\n+import org.junit.jupiter.api.Test;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PartitionValueExtractorTest {\n+  @Test\n+  public void testHourPartition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTkxMw=="}, "originalCommit": {"oid": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDI4MzM2OnYy", "diffSide": "RIGHT", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjoxOToxNFrOHoo-Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzozNzoxMVrOHo8jdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NjQwNg==", "bodyText": "remove the / as well at the end where? And why check contains =? It would be better to add more description.", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512376406", "createdAt": "2020-10-27T02:19:14Z", "author": {"login": "yanghua"}, "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hive;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * HDFS Path contain hive partition values for the keys it is partitioned on. This mapping is not straight forward and\n+ * requires a pluggable implementation to extract the partition value from HDFS path.\n+ * <p>\n+ * This implementation extracts datestr=yyyy-mm-dd-HH from path of type /yyyy/mm/dd/HH\n+ */\n+public class SlashEncodedHourPartitionValueExtractor implements PartitionValueExtractor {\n+\n+  private static final long serialVersionUID = 1L;\n+  private transient DateTimeFormatter dtfOut;\n+\n+  public SlashEncodedHourPartitionValueExtractor() {\n+    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n+  }\n+\n+  private DateTimeFormatter getDtfOut() {\n+    if (dtfOut == null) {\n+      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n+    }\n+    return dtfOut;\n+  }\n+\n+  @Override\n+  public List<String> extractPartitionValuesInPath(String partitionPath) {\n+    // partition path is expected to be in this format yyyy/mm/dd/HH\n+    String[] splits = partitionPath.split(\"/\");\n+    if (splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form  yyyy/mm/dd/HH\");\n+    }\n+    // Get the partition part and remove the / as well at the end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NzIwNw==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512697207", "createdAt": "2020-10-27T13:37:11Z", "author": {"login": "liujinhui1994"}, "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hive;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * HDFS Path contain hive partition values for the keys it is partitioned on. This mapping is not straight forward and\n+ * requires a pluggable implementation to extract the partition value from HDFS path.\n+ * <p>\n+ * This implementation extracts datestr=yyyy-mm-dd-HH from path of type /yyyy/mm/dd/HH\n+ */\n+public class SlashEncodedHourPartitionValueExtractor implements PartitionValueExtractor {\n+\n+  private static final long serialVersionUID = 1L;\n+  private transient DateTimeFormatter dtfOut;\n+\n+  public SlashEncodedHourPartitionValueExtractor() {\n+    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n+  }\n+\n+  private DateTimeFormatter getDtfOut() {\n+    if (dtfOut == null) {\n+      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n+    }\n+    return dtfOut;\n+  }\n+\n+  @Override\n+  public List<String> extractPartitionValuesInPath(String partitionPath) {\n+    // partition path is expected to be in this format yyyy/mm/dd/HH\n+    String[] splits = partitionPath.split(\"/\");\n+    if (splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form  yyyy/mm/dd/HH\");\n+    }\n+    // Get the partition part and remove the / as well at the end", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NjQwNg=="}, "originalCommit": {"oid": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjM3NDcwOnYy", "diffSide": "RIGHT", "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestPartitionValueExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowNjo1M1rOHpimRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowNjo1M1rOHpimRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyMDUxOQ==", "bodyText": "IMO, it would also be better to check the hive style partitions (good case and bad case). wdyt?", "url": "https://github.com/apache/hudi/pull/2122#discussion_r513320519", "createdAt": "2020-10-28T10:06:53Z", "author": {"login": "yanghua"}, "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestPartitionValueExtractor.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hive;\n+\n+import org.junit.jupiter.api.Test;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class TestPartitionValueExtractor {\n+  @Test\n+  public void testHourPartition() {\n+    SlashEncodedHourPartitionValueExtractor hourPartition = new SlashEncodedHourPartitionValueExtractor();\n+    List<String> list = new ArrayList<>();\n+    list.add(\"2020-12-20-01\");\n+    assertEquals(hourPartition.extractPartitionValuesInPath(\"2020/12/20/01\"), list);\n+    assertThrows(IllegalArgumentException.class, () -> hourPartition.extractPartitionValuesInPath(\"2020/12/20\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b123c751e089ae8bb045265c4f85e27c5243f4f"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4302, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}