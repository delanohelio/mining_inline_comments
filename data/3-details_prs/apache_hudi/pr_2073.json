{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwODAzNDc3", "number": 2073, "title": "[HUDI-769] Add blog for HoodieMultiTableDeltaStreamer", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\n(For example: This pull request adds quick-start document.)\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-09-06T15:36:50Z", "url": "https://github.com/apache/hudi/pull/2073", "merged": true, "mergeCommit": {"oid": "d5f3f65df714abd980f59167e4766b4fab69dd72"}, "closed": true, "closedAt": "2020-09-19T00:12:35Z", "author": {"login": "pratyakshsharma"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGQNWxgH2gAyNDgwODAzNDc3OjUwNjRmOWNiYTc0NTJkNDIwYTFiZWJjNTYzYmY4NWUzOGU1MzQ4OWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKO0CJgFqTQ5MTgzODExNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5064f9cba7452d420a1bebc563bf85e38e53489d", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/5064f9cba7452d420a1bebc563bf85e38e53489d", "committedDate": "2020-09-06T15:33:51Z", "message": "[HUDI-769]: added blog for HoodieMultiTableDeltaStreamer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzI0NTEx", "url": "https://github.com/apache/hudi/pull/2073#pullrequestreview-483724511", "createdAt": "2020-09-07T23:17:58Z", "commit": {"oid": "5064f9cba7452d420a1bebc563bf85e38e53489d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMzoxNzo1OFrOHOIqXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMzoxNzo1OFrOHOIqXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NDAzMA==", "bodyText": "It would be better to add a link to the address of the blog. WDYT?", "url": "https://github.com/apache/hudi/pull/2073#discussion_r484584030", "createdAt": "2020-09-07T23:17:58Z", "author": {"login": "yanghua"}, "path": "docs/_docs/2_2_writing_data.md", "diffHunk": "@@ -210,6 +210,8 @@ Sample config files for table wise overridden properties can be found under `hud\n   --op BULK_INSERT\n ```\n \n+For detailed information on how to configure and use `HoodieMultiTableDeltaStreamer`, please refer blog section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5064f9cba7452d420a1bebc563bf85e38e53489d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzI1Mjk1", "url": "https://github.com/apache/hudi/pull/2073#pullrequestreview-483725295", "createdAt": "2020-09-07T23:24:42Z", "commit": {"oid": "5064f9cba7452d420a1bebc563bf85e38e53489d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMzoyNDo0MlrOHOItgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMzozMzo1M1rOHOIyVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NDgzNQ==", "bodyText": "Currently HoodieMultiTableDeltaStreamer supports COPY_ON_WRITE storage type only and the ingestion is done in a sequential way.  Can we use some bold keywords?", "url": "https://github.com/apache/hudi/pull/2073#discussion_r484584835", "createdAt": "2020-09-07T23:24:42Z", "author": {"login": "yanghua"}, "path": "docs/_posts/2020-08-22-ingest-multiple-tables-using-hudi.md", "diffHunk": "@@ -0,0 +1,101 @@\n+---\n+title: \"Ingest multiple tables using Hudi\"\n+excerpt: \"Ingesting multiple tables using Hudi at a single go is now possible. This blog gives a detailed explanation of how to achieve the same using `HoodieMultiTableDeltaStreamer.java`\"\n+author: pratyakshsharma\n+category: blog\n+---\n+\n+When building a change data capture pipeline for already existing or newly created relational databases, one of the most common problems that one faces is simplifying the onboarding process for multiple tables. Ingesting multiple tables to Hudi dataset at a single go is now possible using `HoodieMultiTableDeltaStreamer` class which is a wrapper on top of the more popular `HoodieDeltaStreamer` class. Currently `HoodieMultiTableDeltaStreamer` supports COPY_ON_WRITE storage type only and the ingestion is done in a sequential way.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5064f9cba7452d420a1bebc563bf85e38e53489d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTU1Ng==", "bodyText": "IMO, this item should not be a single one, right? It's an explanation, not about a configuration. It would be better to merge it with the third one. WDYT?", "url": "https://github.com/apache/hudi/pull/2073#discussion_r484585556", "createdAt": "2020-09-07T23:29:49Z", "author": {"login": "yanghua"}, "path": "docs/_posts/2020-08-22-ingest-multiple-tables-using-hudi.md", "diffHunk": "@@ -0,0 +1,101 @@\n+---\n+title: \"Ingest multiple tables using Hudi\"\n+excerpt: \"Ingesting multiple tables using Hudi at a single go is now possible. This blog gives a detailed explanation of how to achieve the same using `HoodieMultiTableDeltaStreamer.java`\"\n+author: pratyakshsharma\n+category: blog\n+---\n+\n+When building a change data capture pipeline for already existing or newly created relational databases, one of the most common problems that one faces is simplifying the onboarding process for multiple tables. Ingesting multiple tables to Hudi dataset at a single go is now possible using `HoodieMultiTableDeltaStreamer` class which is a wrapper on top of the more popular `HoodieDeltaStreamer` class. Currently `HoodieMultiTableDeltaStreamer` supports COPY_ON_WRITE storage type only and the ingestion is done in a sequential way.\n+\n+This blog will guide you through configuring and running `HoodieMultiTableDeltaStreamer`.\n+\n+### Configuration\n+\n+ - `HoodieMultiTableDeltaStreamer` expects users to maintain table wise overridden properties in separate files in a dedicated config folder. Common properties can be configured via common properties file also.\n+ - By default, hudi datasets are created under the path `<base-path-prefix>/<database_name>/<name_of_table_to_be_ingested>`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5064f9cba7452d420a1bebc563bf85e38e53489d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NjA3MA==", "bodyText": "Maybe add more information looks better? e.g. the development of this feature in the future? And not end with code.", "url": "https://github.com/apache/hudi/pull/2073#discussion_r484586070", "createdAt": "2020-09-07T23:33:53Z", "author": {"login": "yanghua"}, "path": "docs/_posts/2020-08-22-ingest-multiple-tables-using-hudi.md", "diffHunk": "@@ -0,0 +1,101 @@\n+---\n+title: \"Ingest multiple tables using Hudi\"\n+excerpt: \"Ingesting multiple tables using Hudi at a single go is now possible. This blog gives a detailed explanation of how to achieve the same using `HoodieMultiTableDeltaStreamer.java`\"\n+author: pratyakshsharma\n+category: blog\n+---\n+\n+When building a change data capture pipeline for already existing or newly created relational databases, one of the most common problems that one faces is simplifying the onboarding process for multiple tables. Ingesting multiple tables to Hudi dataset at a single go is now possible using `HoodieMultiTableDeltaStreamer` class which is a wrapper on top of the more popular `HoodieDeltaStreamer` class. Currently `HoodieMultiTableDeltaStreamer` supports COPY_ON_WRITE storage type only and the ingestion is done in a sequential way.\n+\n+This blog will guide you through configuring and running `HoodieMultiTableDeltaStreamer`.\n+\n+### Configuration\n+\n+ - `HoodieMultiTableDeltaStreamer` expects users to maintain table wise overridden properties in separate files in a dedicated config folder. Common properties can be configured via common properties file also.\n+ - By default, hudi datasets are created under the path `<base-path-prefix>/<database_name>/<name_of_table_to_be_ingested>`.\n+ - You need to provide the names of tables to be ingested via the property `hoodie.deltastreamer.ingestion.tablesToBeIngested` in the format `<database>.<table>`, for example \n+ \n+```java\n+hoodie.deltastreamer.ingestion.tablesToBeIngested=db1.table1,db2.table2\n+``` \n+ \n+ - If you do not provide database name, then it is assumed the table belongs to default database and the hudi dataset for the concerned table is created under the path `<base-path-prefix>/default/<name_of_table_to_be_ingested>`. Also there is a provision to override the default path for hudi datasets. You can create hudi dataset for a particular table by setting the property `hoodie.deltastreamer.ingestion.targetBasePath` in table level config file\n+ - There are a lot of properties that one might like to override per table, for example\n+ \n+```java\n+hoodie.datasource.write.recordkey.field=_row_key\n+hoodie.datasource.write.partitionpath.field=created_at\n+hoodie.deltastreamer.source.kafka.topic=topic2\n+hoodie.deltastreamer.keygen.timebased.timestamp.type=UNIX_TIMESTAMP\n+hoodie.deltastreamer.keygen.timebased.input.dateformat=yyyy-MM-dd HH:mm:ss.S\n+hoodie.datasource.hive_sync.table=short_trip_uber_hive_dummy_table\n+hoodie.deltastreamer.ingestion.targetBasePath=s3:///temp/hudi/table1\n+```  \n+ \n+ - Properties like above need to be set for every table to be ingested. As already suggested at the beginning, users are expected to maintain separate config files for every table by setting the below property\n+ \n+```java\n+hoodie.deltastreamer.ingestion.<db>.<table>.configFile=s3:///tmp/config/config1.properties\n+``` \n+\n+If you do not want to set the above property for every table, you can simply create config files for every table to be ingested under the config folder with the name - `<database>_<table>_config.properties`. For example if you want to ingest table1 and table2 from dummy database, where config folder is set to `s3:///tmp/config`, then you need to create 2 config files on the given paths - `s3:///tmp/config/dummy_table1_config.properties` and `s3:///tmp/config/dummy_table2_config.properties`.\n+\n+ - Finally you can specify all the common properties in a common properties file. Common properties file does not necessarily have to lie under config folder but it is advised to keep it along with other config files. This file will contain the below properties\n+ \n+```java\n+hoodie.deltastreamer.ingestion.tablesToBeIngested=db1.table1,db2.table2\n+hoodie.deltastreamer.ingestion.db1.table1.configFile=s3:///tmp/config_table1.properties\n+hoodie.deltastreamer.ingestion.db2.table2.configFile=s3:///tmp/config_table2.properties\n+``` \n+\n+### Run Command\n+\n+`HoodieMultiTableDeltaStreamer` can be run similar to how one runs `HoodieDeltaStreamer`. Please refer to the example given below for the command. \n+\n+\n+### Example\n+\n+Suppose you want to ingest table1 and table2 from db1 and want to ingest the 2 tables under the path `s3:///temp/hudi`. You can ingest them using the below command\n+\n+```java\n+[hoodie]$ spark-submit --class org.apache.hudi.utilities.deltastreamer.HoodieMultiTableDeltaStreamer `ls packaging/hudi-utilities-bundle/target/hudi-utilities-bundle-*.jar` \\\n+  --props s3:///temp/hudi-ingestion-config/kafka-source.properties \\\n+  --config-folder s3:///temp/hudi-ingestion-config \\\n+  --schemaprovider-class org.apache.hudi.utilities.schema.SchemaRegistryProvider \\\n+  --source-class org.apache.hudi.utilities.sources.AvroKafkaSource \\\n+  --source-ordering-field impresssiontime \\\n+  --base-path-prefix s3:///temp/hudi \\ \n+  --target-table dummy_table \\\n+  --op UPSERT\n+```\n+\n+s3:///temp/config/kafka-source.properties\n+\n+```java\n+hoodie.deltastreamer.ingestion.tablesToBeIngested=db1.table1,db1.table2\n+hoodie.deltastreamer.ingestion.db1.table1.configFile=s3:///temp/hudi-ingestion-config/config_table1.properties\n+hoodie.deltastreamer.ingestion.db21.table2.configFile=s3:///temp/hudi-ingestion-config/config_table2.properties\n+\n+#Kafka props\n+bootstrap.servers=localhost:9092\n+auto.offset.reset=earliest\n+schema.registry.url=http://localhost:8081\n+\n+hoodie.datasource.write.keygenerator.class=org.apache.hudi.keygen.CustomKeyGenerator\n+```\n+\n+s3:///temp/hudi-ingestion-config/config_table1.properties\n+\n+```java\n+hoodie.datasource.write.recordkey.field=_row_key1\n+hoodie.datasource.write.partitionpath.field=created_at\n+hoodie.deltastreamer.source.kafka.topic=topic1\n+```\n+\n+s3:///temp/hudi-ingestion-config/config_table2.properties\n+\n+```java\n+hoodie.datasource.write.recordkey.field=_row_key2\n+hoodie.datasource.write.partitionpath.field=created_at\n+hoodie.deltastreamer.source.kafka.topic=topic2\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5064f9cba7452d420a1bebc563bf85e38e53489d"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b419d605fc4dc5698be29103cd7f19e561c29f4", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/1b419d605fc4dc5698be29103cd7f19e561c29f4", "committedDate": "2020-09-17T16:03:47Z", "message": "[HUDI-769]: code review comments addressed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMTA0NTE4", "url": "https://github.com/apache/hudi/pull/2073#pullrequestreview-491104518", "createdAt": "2020-09-18T02:14:39Z", "commit": {"oid": "1b419d605fc4dc5698be29103cd7f19e561c29f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjoxNDozOVrOHT7kgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjoxNDozOVrOHT7kgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2MDk5NQ==", "bodyText": "Hi, It seems we do not need the *.html file. You can refer to this PR #1992", "url": "https://github.com/apache/hudi/pull/2073#discussion_r490660995", "createdAt": "2020-09-18T02:14:39Z", "author": {"login": "yanghua"}, "path": "content/blog/ingest-multiple-tables-using-hudi/index.html", "diffHunk": "@@ -0,0 +1,233 @@\n+<!doctype html>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b419d605fc4dc5698be29103cd7f19e561c29f4"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMTEyMzI4", "url": "https://github.com/apache/hudi/pull/2073#pullrequestreview-491112328", "createdAt": "2020-09-18T02:41:54Z", "commit": {"oid": "1b419d605fc4dc5698be29103cd7f19e561c29f4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MTo1NFrOHT7_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo1MzoxN1rOHT8Kiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzgzNw==", "bodyText": "yeah, I don't think you need this file.", "url": "https://github.com/apache/hudi/pull/2073#discussion_r490667837", "createdAt": "2020-09-18T02:41:54Z", "author": {"login": "nsivabalan"}, "path": "content/blog/ingest-multiple-tables-using-hudi/index.html", "diffHunk": "@@ -0,0 +1,233 @@\n+<!doctype html>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2MDk5NQ=="}, "originalCommit": {"oid": "1b419d605fc4dc5698be29103cd7f19e561c29f4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3MDI2NQ==", "bodyText": "my 2 cents. take your call though. Instead of \"one of the most common problems that one faces is simplifying the onboarding process for multiple tables\", how about \"one of the major challenges is the complexity in onboarding multiple tables\".", "url": "https://github.com/apache/hudi/pull/2073#discussion_r490670265", "createdAt": "2020-09-18T02:51:27Z", "author": {"login": "nsivabalan"}, "path": "docs/_posts/2020-08-22-ingest-multiple-tables-using-hudi.md", "diffHunk": "@@ -0,0 +1,104 @@\n+---\n+title: \"Ingest multiple tables using Hudi\"\n+excerpt: \"Ingesting multiple tables using Hudi at a single go is now possible. This blog gives a detailed explanation of how to achieve the same using `HoodieMultiTableDeltaStreamer.java`\"\n+author: pratyaksh.sharma.hudi\n+category: blog\n+---\n+\n+When building a change data capture pipeline for already existing or newly created relational databases, one of the most common problems that one faces is simplifying the onboarding process for multiple tables. Ingesting multiple tables to Hudi dataset at a single go is now possible using `HoodieMultiTableDeltaStreamer` class which is a wrapper on top of the more popular `HoodieDeltaStreamer` class. Currently `HoodieMultiTableDeltaStreamer` supports **COPY_ON_WRITE** storage type only and the ingestion is done in a **sequential** way.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b419d605fc4dc5698be29103cd7f19e561c29f4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3MDczMQ==", "bodyText": "I don't know, just confirming. do you know this link actually works.", "url": "https://github.com/apache/hudi/pull/2073#discussion_r490670731", "createdAt": "2020-09-18T02:53:17Z", "author": {"login": "nsivabalan"}, "path": "docs/_docs/2_2_writing_data.md", "diffHunk": "@@ -210,6 +210,8 @@ Sample config files for table wise overridden properties can be found under `hud\n   --op BULK_INSERT\n ```\n \n+For detailed information on how to configure and use `HoodieMultiTableDeltaStreamer`, please refer [blog section](/blog/ingest-multiple-tables-using-hudi).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b419d605fc4dc5698be29103cd7f19e561c29f4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41b5191d4f15a532c52dcc1b331dd05ad6baf253", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/41b5191d4f15a532c52dcc1b331dd05ad6baf253", "committedDate": "2020-09-18T11:57:52Z", "message": "Merge branch 'asf-site' of https://github.com/apache/hudi into blog-asf-site"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "958fa82d7c9597ef08839ac736c94195a050a51b", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/958fa82d7c9597ef08839ac736c94195a050a51b", "committedDate": "2020-09-18T12:13:54Z", "message": "[HUDI-769]: added name to authors.yml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODM4MTE1", "url": "https://github.com/apache/hudi/pull/2073#pullrequestreview-491838115", "createdAt": "2020-09-19T00:11:59Z", "commit": {"oid": "958fa82d7c9597ef08839ac736c94195a050a51b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4509, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}