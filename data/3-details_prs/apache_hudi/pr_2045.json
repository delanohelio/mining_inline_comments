{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MzcwODM5", "number": 2045, "title": "[HUDI-1147] Modify GenericRecordFullPayloadGenerator to generate vali\u2026", "bodyText": "\u2026d timestamps\nWhat is the purpose of the pull request\nModify GenericRecordFullPayloadGenerator to generate valid timestamps\nBrief change log\n\nHudi-test-suite uses the GenericRecordFullPayloadGenerator for generating test data at scale.  With this change,\nnumber of partitions to use during test data generation is configurable.   Generated records are distributed among\nthe requested number of partitions, equally.\n\nVerify this pull request\nThis change added  tests and can be verified as follows:\n\nAdded testUpdatePayloadGeneratorWithTimestamp to verify the scenario.\n\nCommitter checklist\n\n\n[ x] Has a corresponding JIRA in PR title & commit\n\n\n[ x] Commit message is descriptive of the change\n\n\n[ x] CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-08-27T00:15:15Z", "url": "https://github.com/apache/hudi/pull/2045", "merged": true, "mergeCommit": {"oid": "e33a8f733c4a9a94479c166ad13ae9d53142cd3f"}, "closed": true, "closedAt": "2020-12-29T21:33:20Z", "author": {"login": "nbalajee"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIT6epAFqTQ4NzI1ODI5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrAVoEAFqTU1OTY4MDU4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjU4Mjk0", "url": "https://github.com/apache/hudi/pull/2045#pullrequestreview-487258294", "createdAt": "2020-09-12T21:43:24Z", "commit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo0MzoyNFrOHQ3r4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwMDo1OTo0M1rOHQ4h_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTYxOA==", "bodyText": "could you revert these diffs please? seems unnecessary changes", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487451618", "createdAt": "2020-09-12T21:43:24Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java", "diffHunk": "@@ -93,14 +93,15 @@ public DeltaGenerator(DeltaConfig deltaOutputConfig, JavaSparkContext jsc, Spark\n   }\n \n   public JavaRDD<GenericRecord> generateInserts(Config operation) {\n-    long recordsPerPartition = operation.getNumRecordsInsert();\n     int numPartitions = operation.getNumInsertPartitions();\n+    long recordsPerPartition = operation.getNumRecordsInsert();\n     int minPayloadSize = operation.getRecordSize();\n     JavaRDD<GenericRecord> inputBatch = jsc.parallelize(Collections.EMPTY_LIST)\n         .repartition(operation.getNumInsertPartitions()).mapPartitions(p -> {\n           return new LazyRecordGeneratorIterator(new FlexibleSchemaRecordGenerationIterator(recordsPerPartition,\n             minPayloadSize, schemaStr, partitionPathFieldNames, numPartitions));\n-        });\n+\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTgwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n          \n          \n            \n              private static final Logger LOG = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487451803", "createdAt": "2020-09-12T21:46:00Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -45,14 +45,16 @@\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n+  private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE3Mg==", "bodyText": "can we change this to junit 5 APIs? also to reduce verbosity, could we static import the assertion functions?", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487452172", "createdAt": "2020-09-12T21:50:57Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java", "diffHunk": "@@ -25,11 +25,13 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.IntStream;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericRecord;\n import org.apache.hudi.avro.HoodieAvroUtils;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ==", "bodyText": "looks like this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0 deserves to be a local boolean variable with a good name to improve readability.\nAlso can we avoid unnecessary this. references?", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487452399", "createdAt": "2020-09-12T21:54:24Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "diffHunk": "@@ -60,11 +60,16 @@ public boolean hasNext() {\n   public GenericRecord next() {\n     this.counter--;\n     if (lastRecord == null) {\n-      GenericRecord record = this.generator.getNewPayload();\n+      GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n-      return this.generator.randomize(lastRecord, this.partitionPathFieldNames);\n+      return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n+          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2NTQ2OA==", "bodyText": "is it possible make sure partitionPathFieldNames not null so that we don't have to do null check here?", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487465468", "createdAt": "2020-09-13T00:59:43Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "diffHunk": "@@ -60,11 +60,16 @@ public boolean hasNext() {\n   public GenericRecord next() {\n     this.counter--;\n     if (lastRecord == null) {\n-      GenericRecord record = this.generator.getNewPayload();\n+      GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n-      return this.generator.randomize(lastRecord, this.partitionPathFieldNames);\n+      return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n+          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ=="}, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTUwNTIy", "url": "https://github.com/apache/hudi/pull/2045#pullrequestreview-518950522", "createdAt": "2020-10-28T18:06:55Z", "commit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowNjo1NVrOHp3NbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowOTozN1rOHp3T7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODIyMA==", "bodyText": "+1", "url": "https://github.com/apache/hudi/pull/2045#discussion_r513658220", "createdAt": "2020-10-28T18:06:55Z", "author": {"login": "nsivabalan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "diffHunk": "@@ -60,11 +60,16 @@ public boolean hasNext() {\n   public GenericRecord next() {\n     this.counter--;\n     if (lastRecord == null) {\n-      GenericRecord record = this.generator.getNewPayload();\n+      GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n-      return this.generator.randomize(lastRecord, this.partitionPathFieldNames);\n+      return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n+          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ=="}, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1OTg4Ng==", "bodyText": "+1", "url": "https://github.com/apache/hudi/pull/2045#discussion_r513659886", "createdAt": "2020-10-28T18:09:37Z", "author": {"login": "nsivabalan"}, "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java", "diffHunk": "@@ -25,11 +25,13 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.IntStream;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericRecord;\n import org.apache.hudi.avro.HoodieAvroUtils;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE3Mg=="}, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "author": {"user": {"login": "nbalajee", "name": "Balajee Nagasubramaniam"}}, "url": "https://github.com/apache/hudi/commit/8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "committedDate": "2020-12-29T05:24:00Z", "message": "[HUDI-1147] Modify GenericRecordFullPayloadGenerator to generate valid timestamps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "739db6020422286786489c087517dd28f6b04974", "author": {"user": {"login": "nbalajee", "name": "Balajee Nagasubramaniam"}}, "url": "https://github.com/apache/hudi/commit/739db6020422286786489c087517dd28f6b04974", "committedDate": "2020-12-29T05:24:21Z", "message": "merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27726a93e429b0c9cabd40e412102e2074390ed7", "author": {"user": {"login": "nsivabalan", "name": "Sivabalan Narayanan"}}, "url": "https://github.com/apache/hudi/commit/27726a93e429b0c9cabd40e412102e2074390ed7", "committedDate": "2020-12-29T05:27:39Z", "message": "Addressing comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a56b6ef5798987d4e7bc3544b8076f1f57a8cf9", "author": {"user": {"login": "nsivabalan", "name": "Sivabalan Narayanan"}}, "url": "https://github.com/apache/hudi/commit/6a56b6ef5798987d4e7bc3544b8076f1f57a8cf9", "committedDate": "2020-12-27T17:53:15Z", "message": "Addressing comments"}, "afterCommit": {"oid": "27726a93e429b0c9cabd40e412102e2074390ed7", "author": {"user": {"login": "nsivabalan", "name": "Sivabalan Narayanan"}}, "url": "https://github.com/apache/hudi/commit/27726a93e429b0c9cabd40e412102e2074390ed7", "committedDate": "2020-12-29T05:27:39Z", "message": "Addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eea61844aa2fe37ca9d8c316cb3bd358281cb78", "author": {"user": {"login": "nsivabalan", "name": "Sivabalan Narayanan"}}, "url": "https://github.com/apache/hudi/commit/0eea61844aa2fe37ca9d8c316cb3bd358281cb78", "committedDate": "2020-12-29T05:33:37Z", "message": "Removing unwanted vars"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NjgwNTg2", "url": "https://github.com/apache/hudi/pull/2045#pullrequestreview-559680586", "createdAt": "2020-12-29T19:59:36Z", "commit": {"oid": "0eea61844aa2fe37ca9d8c316cb3bd358281cb78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4465, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}