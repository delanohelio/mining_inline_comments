{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjgwODA3", "number": 2208, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMjo0OVrOEy_IHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMToxNDozMVrOE8CvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk4NTI1OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/SparkDatasetTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMjo0OVrOHp7-nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMjo0OVrOHp7-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNjM0OQ==", "bodyText": "let's file a tracking JIRA for this?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r513736349", "createdAt": "2020-10-28T20:22:49Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/SparkDatasetTestUtils.java", "diffHunk": "@@ -173,4 +176,17 @@ public static InternalRow getInternalRowWithError(String partitionPath) {\n         .withBulkInsertParallelism(2);\n   }\n \n+  private static InternalRow serializeRow(ExpressionEncoder encoder, Row row)\n+      throws InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException {\n+    // TODO remove reflection if Spark 2.x support is dropped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk5NjYwOnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyNjowOVrOHp8FmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo0OToxOVrOHtBq6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczODEzNg==", "bodyText": "This was discussed here before? #1760 (comment)\nusing reflection in the fast path, will cause perf issues?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r513738136", "createdAt": "2020-10-28T20:26:09Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "diffHunk": "@@ -96,4 +98,16 @@ object AvroConversionUtils {\n     val name = HoodieAvroUtils.sanitizeName(tableName)\n     (s\"${name}_record\", s\"hoodie.${name}\")\n   }\n+\n+  private def deserializeRow(encoder: ExpressionEncoder[Row], internalRow: InternalRow): Row = {\n+    // TODO remove reflection if Spark 2.x support is dropped\n+    if (SPARK_VERSION.startsWith(\"2.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwODI3Ng==", "bodyText": "+1 Lets have two separate implementations of the Row Deserializer for spark 2 and spark 3, as was done in https://github.com/apache/hudi/pull/1760/files", "url": "https://github.com/apache/hudi/pull/2208#discussion_r514608276", "createdAt": "2020-10-29T22:41:25Z", "author": {"login": "umehrot2"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "diffHunk": "@@ -96,4 +98,16 @@ object AvroConversionUtils {\n     val name = HoodieAvroUtils.sanitizeName(tableName)\n     (s\"${name}_record\", s\"hoodie.${name}\")\n   }\n+\n+  private def deserializeRow(encoder: ExpressionEncoder[Row], internalRow: InternalRow): Row = {\n+    // TODO remove reflection if Spark 2.x support is dropped\n+    if (SPARK_VERSION.startsWith(\"2.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczODEzNg=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3NTMzNw==", "bodyText": "Done. Added a new module hudi-spark3 to avoid using reflection.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516975337", "createdAt": "2020-11-03T21:49:19Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "diffHunk": "@@ -96,4 +98,16 @@ object AvroConversionUtils {\n     val name = HoodieAvroUtils.sanitizeName(tableName)\n     (s\"${name}_record\", s\"hoodie.${name}\")\n   }\n+\n+  private def deserializeRow(encoder: ExpressionEncoder[Row], internalRow: InternalRow): Row = {\n+    // TODO remove reflection if Spark 2.x support is dropped\n+    if (SPARK_VERSION.startsWith(\"2.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczODEzNg=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDMxNDg2OnYy", "diffSide": "RIGHT", "path": "LICENSE", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTo0NzowOFrOHqv54A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTo0NzowOFrOHqv54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NzEwNA==", "bodyText": "Perhaps we can be more specific that we copied some methods ?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r514587104", "createdAt": "2020-10-29T21:47:08Z", "author": {"login": "umehrot2"}, "path": "LICENSE", "diffHunk": "@@ -246,6 +246,8 @@ This product includes code from Apache Spark\n \n * org.apache.hudi.AvroConversionHelper copied from classes in org/apache/spark/sql/avro package\n \n+* org.apache.hudi.HoodieSparkUtils.scala copied from org.apache.spark.deploy.SparkHadoopUtil.scala", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDM3MjczOnYy", "diffSide": "RIGHT", "path": "packaging/hudi-utilities-bundle/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjowODozNlrOHqwdFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo1OToxNVrOHtlpng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NjExOA==", "bodyText": "For my understanding, why is this needed ?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r514596118", "createdAt": "2020-10-29T22:08:36Z", "author": {"login": "umehrot2"}, "path": "packaging/hudi-utilities-bundle/pom.xml", "diffHunk": "@@ -105,6 +106,7 @@\n                   <include>io.prometheus:simpleclient_common</include>\n                   <include>com.yammer.metrics:metrics-core</include>\n                   <include>org.apache.spark:spark-streaming-kafka-0-10_${scala.binary.version}</include>\n+                  <include>org.apache.spark:spark-token-provider-kafka-0-10_${scala.binary.version}</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1OTY3Mw==", "bodyText": "This was needed when using Kafka + DeltaStreamer in Spark 3.\njava.lang.NoClassDefFoundError: org/apache/spark/kafka010/KafkaConfigUpdater\n    at org.apache.spark.streaming.kafka010.InternalKafkaConsumer.createConsumer(KafkaDataConsumer.scala:115)\n\nCan we validate this doesn't cause issues when building with Spark 2. I believe this exists only in Spark 3\nhttps://mvnrepository.com/artifact/org.apache.spark/spark-token-provider-kafka-0-10", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517159673", "createdAt": "2020-11-04T08:09:14Z", "author": {"login": "rmpifer"}, "path": "packaging/hudi-utilities-bundle/pom.xml", "diffHunk": "@@ -105,6 +106,7 @@\n                   <include>io.prometheus:simpleclient_common</include>\n                   <include>com.yammer.metrics:metrics-core</include>\n                   <include>org.apache.spark:spark-streaming-kafka-0-10_${scala.binary.version}</include>\n+                  <include>org.apache.spark:spark-token-provider-kafka-0-10_${scala.binary.version}</include>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NjExOA=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2NDgzMA==", "bodyText": "If <include>org.apache.spark:spark-token-provider-kafka-0-10_${scala.binary.version}</include> is not found when building with Spark 2, maven would just ignore it.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517564830", "createdAt": "2020-11-04T18:59:15Z", "author": {"login": "zhedoubushishi"}, "path": "packaging/hudi-utilities-bundle/pom.xml", "diffHunk": "@@ -105,6 +106,7 @@\n                   <include>io.prometheus:simpleclient_common</include>\n                   <include>com.yammer.metrics:metrics-core</include>\n                   <include>org.apache.spark:spark-streaming-kafka-0-10_${scala.binary.version}</include>\n+                  <include>org.apache.spark:spark-token-provider-kafka-0-10_${scala.binary.version}</include>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NjExOA=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQxODc1OnYy", "diffSide": "RIGHT", "path": "hudi-spark2/src/main/java/org/apache/hudi/internal/DefaultSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoyNjo1OFrOHqw4uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzoyNzo0MlrOHsfLQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMzE5NQ==", "bodyText": "What is the need to move the hudi datasource itself to hudi-spark2 ? I think we should leave it under hudi-spark and later if we want to have separate datasource implementations we can create separately under hudi-spark2 and hudi-spark3 modules. Thoughts ?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r514603195", "createdAt": "2020-10-29T22:26:58Z", "author": {"login": "umehrot2"}, "path": "hudi-spark2/src/main/java/org/apache/hudi/internal/DefaultSource.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n package org.apache.hudi.internal;\n \n-import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceUtilsForSpark2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NjY4Mg==", "bodyText": "Because hudi-spark depends on hudi-spark2. I cannot also let hudi-spark2 depends on hudi-spark tho copying files is not a clean way.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r515396682", "createdAt": "2020-10-30T21:45:31Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-spark2/src/main/java/org/apache/hudi/internal/DefaultSource.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n package org.apache.hudi.internal;\n \n-import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceUtilsForSpark2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMzE5NQ=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMDE3OA==", "bodyText": "I had misunderstood that you moved DefaultSource.scala which is the main datasource implementation. But seems like you have moved the internal datasource implementation used for bulk insert v2. So it seems fine to me.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516410178", "createdAt": "2020-11-03T03:27:42Z", "author": {"login": "umehrot2"}, "path": "hudi-spark2/src/main/java/org/apache/hudi/internal/DefaultSource.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n package org.apache.hudi.internal;\n \n-import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceUtilsForSpark2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMzE5NQ=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ2MjY4OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieMergeOnReadTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0NTozMlrOHqxSqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDoxOToyMlrOHsf0nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTgzNA==", "bodyText": "As discussed internally regarding this in the code review, can you confirm if this is actually converting paths to point to local file system and not HDFS ? Also would be good to explain why you did this for reference in the description.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r514609834", "createdAt": "2020-10-29T22:45:32Z", "author": {"login": "umehrot2"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieMergeOnReadTestUtils.java", "diffHunk": "@@ -85,7 +85,7 @@\n         .collect(Collectors.toList()));\n \n     return inputPaths.stream().map(path -> {\n-      setInputPath(jobConf, path);\n+      FileInputFormat.setInputPaths(jobConf, path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyMDc2NA==", "bodyText": "Me and discussed discussed it internally and this is not a concern anymore.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516420764", "createdAt": "2020-11-03T04:19:22Z", "author": {"login": "umehrot2"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieMergeOnReadTestUtils.java", "diffHunk": "@@ -85,7 +85,7 @@\n         .collect(Collectors.toList()));\n \n     return inputPaths.stream().map(path -> {\n-      setInputPath(jobConf, path);\n+      FileInputFormat.setInputPaths(jobConf, path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTgzNA=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDUwOTI5OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzowNDozNlrOHqxtZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzoyMzo0OFrOHsfIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNjY3Ng==", "bodyText": "Is this not possible through delta streamer ? Seems like not.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r514616676", "createdAt": "2020-10-29T23:04:36Z", "author": {"login": "umehrot2"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -121,6 +122,9 @@ private[hudi] object HoodieSparkSqlWriter {\n       // short-circuit if bulk_insert via row is enabled.\n       // scalastyle:off\n       if (parameters(ENABLE_ROW_WRITER_OPT_KEY).toBoolean) {\n+        if (SPARK_VERSION.startsWith(\"3.\")) {\n+          throw new HoodieException(\"Bulk insert via row is not compatible with Spark 3, it is only compatible with Spark 2!\")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MjI5MQ==", "bodyText": "Good point. Looks like currently it works with spark datasource. So it's not supported by delta streamer.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r515392291", "createdAt": "2020-10-30T21:32:36Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -121,6 +122,9 @@ private[hudi] object HoodieSparkSqlWriter {\n       // short-circuit if bulk_insert via row is enabled.\n       // scalastyle:off\n       if (parameters(ENABLE_ROW_WRITER_OPT_KEY).toBoolean) {\n+        if (SPARK_VERSION.startsWith(\"3.\")) {\n+          throw new HoodieException(\"Bulk insert via row is not compatible with Spark 3, it is only compatible with Spark 2!\")\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNjY3Ng=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwOTM1Ng==", "bodyText": "Yeah. Anyways I think this message can changed to: Bulk insert using row writer is not supported with Spark 3. To use row writer switch to spark 2..", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516409356", "createdAt": "2020-11-03T03:23:48Z", "author": {"login": "umehrot2"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -121,6 +122,9 @@ private[hudi] object HoodieSparkSqlWriter {\n       // short-circuit if bulk_insert via row is enabled.\n       // scalastyle:off\n       if (parameters(ENABLE_ROW_WRITER_OPT_KEY).toBoolean) {\n+        if (SPARK_VERSION.startsWith(\"3.\")) {\n+          throw new HoodieException(\"Bulk insert via row is not compatible with Spark 3, it is only compatible with Spark 2!\")\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNjY3Ng=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDUxODM0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzowODo0OVrOHqxynw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDoxMjo1NFrOHsfvvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxODAxNQ==", "bodyText": "I would suggest just keeping spark.version here. Override the spark.version respectively in hudi-spark2 and hudi-spark3 modules.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r514618015", "createdAt": "2020-10-29T23:08:49Z", "author": {"login": "umehrot2"}, "path": "pom.xml", "diffHunk": "@@ -100,6 +104,7 @@\n     <prometheus.version>0.8.0</prometheus.version>\n     <http.version>4.4.1</http.version>\n     <spark.version>2.4.4</spark.version>\n+    <spark2.version>2.4.4</spark2.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NjEyNQ==", "bodyText": "Does Maven support overriding spark.version only in sub modules?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r515396125", "createdAt": "2020-10-30T21:44:04Z", "author": {"login": "zhedoubushishi"}, "path": "pom.xml", "diffHunk": "@@ -100,6 +104,7 @@\n     <prometheus.version>0.8.0</prometheus.version>\n     <http.version>4.4.1</http.version>\n     <spark.version>2.4.4</spark.version>\n+    <spark2.version>2.4.4</spark2.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxODAxNQ=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxOTUxOQ==", "bodyText": "If any dependency or property is configured in both parent and child POMs with different values then the child POM value will take the priority.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516419519", "createdAt": "2020-11-03T04:12:54Z", "author": {"login": "umehrot2"}, "path": "pom.xml", "diffHunk": "@@ -100,6 +104,7 @@\n     <prometheus.version>0.8.0</prometheus.version>\n     <http.version>4.4.1</http.version>\n     <spark.version>2.4.4</spark.version>\n+    <spark2.version>2.4.4</spark2.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxODAxNQ=="}, "originalCommit": {"oid": "ed2714bb26e11b24707fcf13cebeb5e2116476c5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjM2NDE2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/SparkDatasetTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzoxMTozMVrOHse-Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMTo0M1rOHtCSnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNjg3MQ==", "bodyText": "It might make sense to create Spark2RowSerializer and Spark3RowSerializer similar to the implementations we have created for deserializers.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516406871", "createdAt": "2020-11-03T03:11:31Z", "author": {"login": "umehrot2"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/SparkDatasetTestUtils.java", "diffHunk": "@@ -173,4 +176,17 @@ public static InternalRow getInternalRowWithError(String partitionPath) {\n         .withBulkInsertParallelism(2);\n   }\n \n+  private static InternalRow serializeRow(ExpressionEncoder encoder, Row row)\n+      throws InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException {\n+    // TODO remove reflection if Spark 2.x support is dropped\n+    if (package$.MODULE$.SPARK_VERSION().startsWith(\"2.\")) {\n+      Method spark2method = encoder.getClass().getMethod(\"toRow\", Object.class);\n+      return (InternalRow) spark2method.invoke(encoder, row);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NTUwMQ==", "bodyText": "The problem here is hudi-spark2 already depends on hudi-common and hudi-client. Say if I create Spark2RowSerializer under hudi-spark2, I also need to make hudi-client depends on hudi-spark2 and as a result, it will bring a dependency loop.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516985501", "createdAt": "2020-11-03T22:11:43Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/SparkDatasetTestUtils.java", "diffHunk": "@@ -173,4 +176,17 @@ public static InternalRow getInternalRowWithError(String partitionPath) {\n         .withBulkInsertParallelism(2);\n   }\n \n+  private static InternalRow serializeRow(ExpressionEncoder encoder, Row row)\n+      throws InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException {\n+    // TODO remove reflection if Spark 2.x support is dropped\n+    if (package$.MODULE$.SPARK_VERSION().startsWith(\"2.\")) {\n+      Method spark2method = encoder.getClass().getMethod(\"toRow\", Object.class);\n+      return (InternalRow) spark2method.invoke(encoder, row);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNjg3MQ=="}, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjM3MTQwOnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzoxNjozMlrOHsfCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzoxNjozMlrOHsfCOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNzg2Ng==", "bodyText": "I think HoodieSparkUtils is a more appropriate place for this function.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516407866", "createdAt": "2020-11-03T03:16:32Z", "author": {"login": "umehrot2"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "diffHunk": "@@ -96,4 +99,13 @@ object AvroConversionUtils {\n     val name = HoodieAvroUtils.sanitizeName(tableName)\n     (s\"${name}_record\", s\"hoodie.${name}\")\n   }\n+\n+  def createDeserializer(encoder: ExpressionEncoder[Row]): SparkRowDeserializer = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjQyMTg3OnYy", "diffSide": "RIGHT", "path": "hudi-spark2/src/main/scala/org/apache/hudi/DataSourceOptionsForSpark2.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzo0OTo1N1rOHsfdXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzo0OTo1N1rOHsfdXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDgxMg==", "bodyText": "The javadoc formatting is off at various places in this class.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516414812", "createdAt": "2020-11-03T03:49:57Z", "author": {"login": "umehrot2"}, "path": "hudi-spark2/src/main/scala/org/apache/hudi/DataSourceOptionsForSpark2.scala", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi\n+\n+import org.apache.hudi.common.model.HoodieTableType\n+import org.apache.hudi.common.model.OverwriteWithLatestAvroPayload\n+\n+/**\n+  * Options supported for writing hoodie tables.\n+  * TODO: This file is partially copied from org.apache.hudi.DataSourceWriteOptions.\n+  * Should be removed if Spark 2.x support is dropped.\n+  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjQ1MjIzOnYy", "diffSide": "RIGHT", "path": "packaging/hudi-utilities-bundle/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDoxMDoxMVrOHsftqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODozMzoxMVrOHtkvng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODk4Ng==", "bodyText": "Seems like its possible that scala.binary.version is 2.11 when compiling by default and it can conflict here because spark 3 only uses 2.12 ? We should probably override scala versions as well by default with the spark3 maven profile so that such scenarios do not happen.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516418986", "createdAt": "2020-11-03T04:10:11Z", "author": {"login": "umehrot2"}, "path": "packaging/hudi-utilities-bundle/pom.xml", "diffHunk": "@@ -105,6 +107,7 @@\n                   <include>io.prometheus:simpleclient_common</include>\n                   <include>com.yammer.metrics:metrics-core</include>\n                   <include>org.apache.spark:spark-streaming-kafka-0-10_${scala.binary.version}</include>\n+                  <include>org.apache.spark:spark-token-provider-kafka-0-10_${scala.binary.version}</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0OTk4Mg==", "bodyText": "okay I'll override scala version inside hudi-spark3", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517549982", "createdAt": "2020-11-04T18:33:11Z", "author": {"login": "zhedoubushishi"}, "path": "packaging/hudi-utilities-bundle/pom.xml", "diffHunk": "@@ -105,6 +107,7 @@\n                   <include>io.prometheus:simpleclient_common</include>\n                   <include>com.yammer.metrics:metrics-core</include>\n                   <include>org.apache.spark:spark-streaming-kafka-0-10_${scala.binary.version}</include>\n+                  <include>org.apache.spark:spark-token-provider-kafka-0-10_${scala.binary.version}</include>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODk4Ng=="}, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjQ1MjcxOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDoxMDozMlrOHsft7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1MzozNlrOHtvArw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxOTA1NQ==", "bodyText": "override scala versions here ?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r516419055", "createdAt": "2020-11-03T04:10:32Z", "author": {"login": "umehrot2"}, "path": "pom.xml", "diffHunk": "@@ -1318,6 +1325,23 @@\n         </plugins>\n       </build>\n     </profile>\n+\n+    <profile>\n+      <id>spark3</id>\n+      <properties>\n+        <spark.version>${spark3.version}</spark.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxODE5MQ==", "bodyText": "Done", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517718191", "createdAt": "2020-11-05T00:53:36Z", "author": {"login": "zhedoubushishi"}, "path": "pom.xml", "diffHunk": "@@ -1318,6 +1325,23 @@\n         </plugins>\n       </build>\n     </profile>\n+\n+    <profile>\n+      <id>spark3</id>\n+      <properties>\n+        <spark.version>${spark3.version}</spark.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxOTA1NQ=="}, "originalCommit": {"oid": "0df7521bf7ba087be882da55bc6ce3fd3c717a78"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTM1MzU3OnYy", "diffSide": "RIGHT", "path": "hudi-spark2/src/main/scala/org/apache/hudi/DataSourceOptionsForSpark2.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODozMzozM1rOHtNtsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMToxMzozMFrOH39IaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3MjY1OQ==", "bodyText": "I'm not sure this is best to have copies DataSourceWriteOptions and DataSourceUtils. I see in hudi-client there is a a module hudi-spark-client. Could we refactor these files to go there or in some new hudi-spark-common", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517172659", "createdAt": "2020-11-04T08:33:33Z", "author": {"login": "rmpifer"}, "path": "hudi-spark2/src/main/scala/org/apache/hudi/DataSourceOptionsForSpark2.scala", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi\n+\n+import org.apache.hudi.common.model.HoodieTableType\n+import org.apache.hudi.common.model.OverwriteWithLatestAvroPayload\n+\n+/**\n+ * Options supported for writing hoodie tables.\n+ * TODO: This file is partially copied from org.apache.hudi.DataSourceWriteOptions.\n+ * Should be removed if Spark 2.x support is dropped.\n+ */\n+object DataSourceWriteOptionsForSpark2 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fad200131f88bc61746f1d5816b28ec1abd37a7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODMzMg==", "bodyText": "Yea this will avoid us hard copy DataSourceWriteOptions and DataSourceUtils. My concern is Spark Datasource related files ideally should under hudi-spark. So not sure which is the best practice here..\nMaybe create a new module like hudi-spark-common under hudi-spark?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517558332", "createdAt": "2020-11-04T18:48:06Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-spark2/src/main/scala/org/apache/hudi/DataSourceOptionsForSpark2.scala", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi\n+\n+import org.apache.hudi.common.model.HoodieTableType\n+import org.apache.hudi.common.model.OverwriteWithLatestAvroPayload\n+\n+/**\n+ * Options supported for writing hoodie tables.\n+ * TODO: This file is partially copied from org.apache.hudi.DataSourceWriteOptions.\n+ * Should be removed if Spark 2.x support is dropped.\n+ */\n+object DataSourceWriteOptionsForSpark2 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3MjY1OQ=="}, "originalCommit": {"oid": "7fad200131f88bc61746f1d5816b28ec1abd37a7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NDM0MA==", "bodyText": "Yeah I don't really think this is manageable, specially as new properties get added it will be a pain to make sure spark2 and spark3 code is in sync. hudi-spark-common module under hudi-spark seems like the way to me. But lets get vinoth's suggestion on this as well before you implement cc @vinothchandar", "url": "https://github.com/apache/hudi/pull/2208#discussion_r522894340", "createdAt": "2020-11-13T11:32:29Z", "author": {"login": "umehrot2"}, "path": "hudi-spark2/src/main/scala/org/apache/hudi/DataSourceOptionsForSpark2.scala", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi\n+\n+import org.apache.hudi.common.model.HoodieTableType\n+import org.apache.hudi.common.model.OverwriteWithLatestAvroPayload\n+\n+/**\n+ * Options supported for writing hoodie tables.\n+ * TODO: This file is partially copied from org.apache.hudi.DataSourceWriteOptions.\n+ * Should be removed if Spark 2.x support is dropped.\n+ */\n+object DataSourceWriteOptionsForSpark2 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3MjY1OQ=="}, "originalCommit": {"oid": "7fad200131f88bc61746f1d5816b28ec1abd37a7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNTMwNA==", "bodyText": "yes hudi-spark-common is the right approach IMO as well.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r528435304", "createdAt": "2020-11-23T01:13:30Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark2/src/main/scala/org/apache/hudi/DataSourceOptionsForSpark2.scala", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi\n+\n+import org.apache.hudi.common.model.HoodieTableType\n+import org.apache.hudi.common.model.OverwriteWithLatestAvroPayload\n+\n+/**\n+ * Options supported for writing hoodie tables.\n+ * TODO: This file is partially copied from org.apache.hudi.DataSourceWriteOptions.\n+ * Should be removed if Spark 2.x support is dropped.\n+ */\n+object DataSourceWriteOptionsForSpark2 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3MjY1OQ=="}, "originalCommit": {"oid": "7fad200131f88bc61746f1d5816b28ec1abd37a7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTM5NjM2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NToxMVrOHtOHQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODozMToxOFrOHtkrxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTIwMw==", "bodyText": "If we are moving these methods to HoodieSparkUtils we may want to also refactor other similar methods in this class so they are grouped together. i.e. createRddForDeletes and createDataFrame", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517179203", "createdAt": "2020-11-04T08:45:11Z", "author": {"login": "rmpifer"}, "path": "hudi-client/hudi-spark-client/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "diffHunk": "@@ -24,35 +24,13 @@ import org.apache.hudi.avro.HoodieAvroUtils\n import org.apache.hudi.common.model.HoodieKey\n import org.apache.spark.rdd.RDD\n import org.apache.spark.sql.avro.SchemaConverters\n-import org.apache.spark.sql.catalyst.encoders.RowEncoder\n import org.apache.spark.sql.types.StructType\n import org.apache.spark.sql.{DataFrame, Dataset, Row, SparkSession}\n \n import scala.collection.JavaConverters._\n \n object AvroConversionUtils {\n \n-  def createRdd(df: DataFrame, structName: String, recordNamespace: String): RDD[GenericRecord] = {\n-    val avroSchema = convertStructTypeToAvroSchema(df.schema, structName, recordNamespace)\n-    createRdd(df, avroSchema, structName, recordNamespace)\n-  }\n-\n-  def createRdd(df: DataFrame, avroSchema: Schema, structName: String, recordNamespace: String)\n-  : RDD[GenericRecord] = {\n-    // Use the Avro schema to derive the StructType which has the correct nullability information\n-    val dataType = SchemaConverters.toSqlType(avroSchema).dataType.asInstanceOf[StructType]\n-    val encoder = RowEncoder.apply(dataType).resolveAndBind()\n-    val deserializer = HoodieSparkUtils.createDeserializer(encoder)\n-    df.queryExecution.toRdd.map(row => deserializer.deserializeRow(row))\n-      .mapPartitions { records =>\n-        if (records.isEmpty) Iterator.empty\n-        else {\n-          val convertor = AvroConversionHelper.createConverterToAvro(dataType, structName, recordNamespace)\n-          records.map { x => convertor(x).asInstanceOf[GenericRecord] }\n-        }\n-      }\n-  }\n-\n   def createRddForDeletes(df: DataFrame, rowField: String, partitionField: String): RDD[HoodieKey] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe002982d099af08df5f5ba4768a7b6905fa61c8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0ODk5OA==", "bodyText": "Good point. It seems createRddForDeletes is never used in Hudi, I'll just remove it.\ncreateDataFrame is tricky because it is used in hudi-spark-client so I cannot move it to hudi-spark module.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r517548998", "createdAt": "2020-11-04T18:31:18Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-client/hudi-spark-client/src/main/scala/org/apache/hudi/AvroConversionUtils.scala", "diffHunk": "@@ -24,35 +24,13 @@ import org.apache.hudi.avro.HoodieAvroUtils\n import org.apache.hudi.common.model.HoodieKey\n import org.apache.spark.rdd.RDD\n import org.apache.spark.sql.avro.SchemaConverters\n-import org.apache.spark.sql.catalyst.encoders.RowEncoder\n import org.apache.spark.sql.types.StructType\n import org.apache.spark.sql.{DataFrame, Dataset, Row, SparkSession}\n \n import scala.collection.JavaConverters._\n \n object AvroConversionUtils {\n \n-  def createRdd(df: DataFrame, structName: String, recordNamespace: String): RDD[GenericRecord] = {\n-    val avroSchema = convertStructTypeToAvroSchema(df.schema, structName, recordNamespace)\n-    createRdd(df, avroSchema, structName, recordNamespace)\n-  }\n-\n-  def createRdd(df: DataFrame, avroSchema: Schema, structName: String, recordNamespace: String)\n-  : RDD[GenericRecord] = {\n-    // Use the Avro schema to derive the StructType which has the correct nullability information\n-    val dataType = SchemaConverters.toSqlType(avroSchema).dataType.asInstanceOf[StructType]\n-    val encoder = RowEncoder.apply(dataType).resolveAndBind()\n-    val deserializer = HoodieSparkUtils.createDeserializer(encoder)\n-    df.queryExecution.toRdd.map(row => deserializer.deserializeRow(row))\n-      .mapPartitions { records =>\n-        if (records.isEmpty) Iterator.empty\n-        else {\n-          val convertor = AvroConversionHelper.createConverterToAvro(dataType, structName, recordNamespace)\n-          records.map { x => convertor(x).asInstanceOf[GenericRecord] }\n-        }\n-      }\n-  }\n-\n   def createRddForDeletes(df: DataFrame, rowField: String, partitionField: String): RDD[HoodieKey] = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTIwMw=="}, "originalCommit": {"oid": "fe002982d099af08df5f5ba4768a7b6905fa61c8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzY5NjIzOnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyNjozNFrOH0D2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyNjozNFrOH0D2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MTAzMg==", "bodyText": "Hi, checking for if (!SPARK_VERSION.startsWith(\"2.\")) { would be more robust because of future relases (e.g. Spark 4)", "url": "https://github.com/apache/hudi/pull/2208#discussion_r524351032", "createdAt": "2020-11-16T15:26:34Z", "author": {"login": "sbernauer"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -121,6 +122,9 @@ private[hudi] object HoodieSparkSqlWriter {\n       // short-circuit if bulk_insert via row is enabled.\n       // scalastyle:off\n       if (parameters(ENABLE_ROW_WRITER_OPT_KEY).toBoolean) {\n+        if (SPARK_VERSION.startsWith(\"3.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdaf9eaa27e0eabef24c48d191f5ab9f66f38c70"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzk0NDQ1OnYy", "diffSide": "LEFT", "path": "hudi-spark/src/main/scala/org/apache/hudi/MergeOnReadSnapshotRelation.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMToxMDoyNlrOH39HBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo1MTo0MFrOH8aV_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDk1MA==", "bodyText": "is this change needed for this PR>. some context on why this was needed?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r528434950", "createdAt": "2020-11-23T01:10:26Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/MergeOnReadSnapshotRelation.scala", "diffHunk": "@@ -113,9 +113,6 @@ class MergeOnReadSnapshotRelation(val sqlContext: SQLContext,\n       hadoopConf = sqlContext.sparkSession.sessionState.newHadoopConf()\n     )\n \n-    // Follow the implementation of Spark internal HadoopRDD to handle the broadcast configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af55b357babdd0278f8273fc6658185c459f285"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwODIyMQ==", "bodyText": "SparkHadoopUtil becomes private in spark 3, so I need to see if these lines are necessary.\nThe reason this is needed in internal implementation is to guard against case where user passes a custom Configuration which doesn't contain credentials to access secure HDFS (apache/spark#2676). Since the Configuration being used here was created as part of spark context the credentials should already be loaded. So we can remove it.", "url": "https://github.com/apache/hudi/pull/2208#discussion_r533108221", "createdAt": "2020-12-01T06:51:40Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/MergeOnReadSnapshotRelation.scala", "diffHunk": "@@ -113,9 +113,6 @@ class MergeOnReadSnapshotRelation(val sqlContext: SQLContext,\n       hadoopConf = sqlContext.sparkSession.sessionState.newHadoopConf()\n     )\n \n-    // Follow the implementation of Spark internal HadoopRDD to handle the broadcast configuration.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDk1MA=="}, "originalCommit": {"oid": "2af55b357babdd0278f8273fc6658185c459f285"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzk0NTQ5OnYy", "diffSide": "RIGHT", "path": "hudi-spark2/src/main/java/org/apache/hudi/DataSourceUtilsForSpark2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMToxMToyOVrOH39Hiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzoyNDoyNlrOH83tQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNTA4Mw==", "bodyText": "would be good to have a JIRA with all these follow ups when Spark 2.x support is dropped", "url": "https://github.com/apache/hudi/pull/2208#discussion_r528435083", "createdAt": "2020-11-23T01:11:29Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark2/src/main/java/org/apache/hudi/DataSourceUtilsForSpark2.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi;\n+\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.util.CommitUtils;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieIndexConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.index.HoodieIndex;\n+\n+import java.util.Map;\n+\n+/**\n+ * Utilities used throughout the data source.\n+ * TODO: This file is partially copied from org.apache.hudi.DataSourceUtils.\n+ * Should be removed if Spark 2.x support is dropped.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af55b357babdd0278f8273fc6658185c459f285"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4OTMxMw==", "bodyText": "I created a new module hudi-spark-common to avoid creating xxxForSpark2 classes.\nSo the current structure of hudi-spark would be:\nhudi-spark-datasource\n|\n-----------------hudi-spark\n|\n-----------------hudi-spark-common\n|\n-----------------hudi-spark2\n|\n-----------------hudi-spark3", "url": "https://github.com/apache/hudi/pull/2208#discussion_r533589313", "createdAt": "2020-12-01T17:24:26Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-spark2/src/main/java/org/apache/hudi/DataSourceUtilsForSpark2.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi;\n+\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.util.CommitUtils;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieIndexConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.index.HoodieIndex;\n+\n+import java.util.Map;\n+\n+/**\n+ * Utilities used throughout the data source.\n+ * TODO: This file is partially copied from org.apache.hudi.DataSourceUtils.\n+ * Should be removed if Spark 2.x support is dropped.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNTA4Mw=="}, "originalCommit": {"oid": "2af55b357babdd0278f8273fc6658185c459f285"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzk0ODI1OnYy", "diffSide": "RIGHT", "path": "hudi-spark3/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMToxNDozMVrOH39I-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMToxNDozMVrOH39I-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNTQ0OQ==", "bodyText": "should we still pull this into a property above?", "url": "https://github.com/apache/hudi/pull/2208#discussion_r528435449", "createdAt": "2020-11-23T01:14:31Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark3/pom.xml", "diffHunk": "@@ -0,0 +1,160 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+       http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>hudi</artifactId>\n+    <groupId>org.apache.hudi</groupId>\n+    <version>0.6.1-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>hudi-spark3_2.12</artifactId>\n+  <packaging>jar</packaging>\n+\n+  <properties>\n+    <main.basedir>${project.parent.basedir}</main.basedir>\n+  </properties>\n+\n+  <build>\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+      </resource>\n+    </resources>\n+    <pluginManagement>\n+      <plugins>\n+        <plugin>\n+          <groupId>net.alchim31.maven</groupId>\n+          <artifactId>scala-maven-plugin</artifactId>\n+          <version>${scala-maven-plugin.version}</version>\n+          <configuration>\n+            <args>\n+              <arg>-nobootcp</arg>\n+            </args>\n+          </configuration>\n+        </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-compiler-plugin</artifactId>\n+        </plugin>\n+      </plugins>\n+    </pluginManagement>\n+\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy-dependencies</id>\n+            <phase>prepare-package</phase>\n+            <goals>\n+              <goal>copy-dependencies</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.build.directory}/lib</outputDirectory>\n+              <overWriteReleases>true</overWriteReleases>\n+              <overWriteSnapshots>true</overWriteSnapshots>\n+              <overWriteIfNewer>true</overWriteIfNewer>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>net.alchim31.maven</groupId>\n+        <artifactId>scala-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>scala-compile-first</id>\n+            <phase>process-resources</phase>\n+            <goals>\n+              <goal>add-source</goal>\n+              <goal>compile</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <id>scala-test-compile</id>\n+            <phase>process-test-resources</phase>\n+            <goals>\n+              <goal>testCompile</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <phase>compile</phase>\n+            <goals>\n+              <goal>compile</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>test-jar</goal>\n+            </goals>\n+            <phase>test-compile</phase>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <skip>false</skip>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.rat</groupId>\n+        <artifactId>apache-rat-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.scalastyle</groupId>\n+        <artifactId>scalastyle-maven-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.jacoco</groupId>\n+        <artifactId>jacoco-maven-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.scala-lang</groupId>\n+      <artifactId>scala-library</artifactId>\n+      <version>2.12.10</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af55b357babdd0278f8273fc6658185c459f285"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4134, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}