{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5Mzc2MTUy", "number": 1188, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxNjo1NlrODWFr3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDoyMzo1NVrODXHHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDg4NDEyOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxNjo1NlrOFape3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMjoyODo1MFrOFauefg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4Njk0MA==", "bodyText": "any reason why this is not final too?", "url": "https://github.com/apache/hudi/pull/1188#discussion_r363486940", "createdAt": "2020-01-06T21:16:56Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java", "diffHunk": "@@ -51,6 +51,8 @@\n \n   private final String outputDateFormat;\n \n+  private TimeZone timeZone;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfd5007cdca4df03fe3871e2cac6e4efb99ccc6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2ODc2Ng==", "bodyText": "fix NPE, thank's viewed", "url": "https://github.com/apache/hudi/pull/1188#discussion_r363568766", "createdAt": "2020-01-07T02:28:50Z", "author": {"login": "OpenOpened"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java", "diffHunk": "@@ -51,6 +51,8 @@\n \n   private final String outputDateFormat;\n \n+  private TimeZone timeZone;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4Njk0MA=="}, "originalCommit": {"oid": "0dfd5007cdca4df03fe3871e2cac6e4efb99ccc6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ1MzcxOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoyMToyNVrOFavAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoyMToyNVrOFavAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NzUwMQ==", "bodyText": "timeZone has been init. I don't think we need to do this again.", "url": "https://github.com/apache/hudi/pull/1188#discussion_r363577501", "createdAt": "2020-01-07T03:21:25Z", "author": {"login": "sev7e0"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java", "diffHunk": "@@ -70,20 +74,22 @@ public TimestampBasedKeyGenerator(TypedProperties config) {\n         Arrays.asList(Config.TIMESTAMP_TYPE_FIELD_PROP, Config.TIMESTAMP_OUTPUT_DATE_FORMAT_PROP));\n     this.timestampType = TimestampType.valueOf(config.getString(Config.TIMESTAMP_TYPE_FIELD_PROP));\n     this.outputDateFormat = config.getString(Config.TIMESTAMP_OUTPUT_DATE_FORMAT_PROP);\n+    this.timeZone = TimeZone.getTimeZone(config.getString(Config.TIMESTAMP_TIMEZONE_FORMAT_PROP, \"GMT\"));\n \n     if (timestampType == TimestampType.DATE_STRING || timestampType == TimestampType.MIXED) {\n       DataSourceUtils.checkRequiredProperties(config,\n           Collections.singletonList(Config.TIMESTAMP_INPUT_DATE_FORMAT_PROP));\n       this.inputDateFormat = new SimpleDateFormat(config.getString(Config.TIMESTAMP_INPUT_DATE_FORMAT_PROP));\n-      this.inputDateFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+      this.timeZone = TimeZone.getTimeZone(config.getString(Config.TIMESTAMP_TIMEZONE_FORMAT_PROP, \"GMT\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e702167f05d9a65efd280010d556c3a5816ad0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mjc4MDA0OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1NDozMlrOFb05nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjo0ODo0N1rOFcJD4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMjU4OA==", "bodyText": "would these three methods simplify to just one method?", "url": "https://github.com/apache/hudi/pull/1188#discussion_r364722588", "createdAt": "2020-01-09T12:54:32Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  private TypedProperties getKeyConfig2(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = getKeyConfig(recordKeyFieldName, partitionPathField, hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    return props;\n+  }\n+\n+  private TypedProperties getKeyConfig3(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = getKeyConfig(recordKeyFieldName, partitionPathField, hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e555c818b342ac66f806d2ae5da87cee9436a31"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA1Mjg5Ng==", "bodyText": "thank's reply, i will fix it.", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365052896", "createdAt": "2020-01-10T02:48:47Z", "author": {"login": "OpenOpened"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  private TypedProperties getKeyConfig2(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = getKeyConfig(recordKeyFieldName, partitionPathField, hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    return props;\n+  }\n+\n+  private TypedProperties getKeyConfig3(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = getKeyConfig(recordKeyFieldName, partitionPathField, hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMjU4OA=="}, "originalCommit": {"oid": "1e555c818b342ac66f806d2ae5da87cee9436a31"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTYwMDQ3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/resources/timestamp-test-evolved.avsc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDoyMjowMFrOFcP8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDoyMjowMFrOFcP8iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NTcwNQ==", "bodyText": "Would we remove this useless fields?", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365165705", "createdAt": "2020-01-10T10:22:00Z", "author": {"login": "leesf"}, "path": "hudi-common/src/test/resources/timestamp-test-evolved.avsc", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+  \"namespace\": \"example.avro\",\n+  \"type\": \"record\",\n+  \"name\": \"User\",\n+  \"fields\": [\n+    {\"name\": \"field1\", \"type\": [\"null\", \"string\"], \"default\": null},\n+    {\"name\": \"field2\", \"type\": [\"null\", \"string\"], \"default\": null},\n+    {\"name\": \"createTime\", \"type\": [\"null\", \"string\"], \"default\": null},\n+    {\"name\": \"name\", \"type\": [\"null\", \"string\"], \"default\": null},\n+    {\"name\": \"favoriteIntNumber\",  \"type\": [\"null\", \"int\"], \"default\": null},\n+    {\"name\": \"favoriteNumber\",  \"type\": [\"null\", \"long\"], \"default\": null},\n+    {\"name\": \"favoriteFloatNumber\",  \"type\": [\"null\", \"float\"], \"default\": null},\n+    {\"name\": \"favoriteDoubleNumber\",  \"type\": [\"null\", \"double\"], \"default\": null},\n+    {\"name\": \"tags\", \"type\": [\"null\", {\"values\": [\"null\", {\"fields\": [{\"default\": null, \"type\": [\"null\", \"string\"], \"name\": \"item1\"}, {\"default\": null, \"type\": [\"null\", \"string\"], \"name\": \"item2\"} ], \"type\": \"record\", \"name\": \"tagsMapItems\"} ], \"type\": \"map\"} ], \"default\": null},\n+    {\"default\": null, \"name\": \"testNestedRecord\", \"type\": [\"null\", {\"fields\": [{\"default\": null, \"name\": \"isAdmin\", \"type\": [\"null\", \"boolean\"] }, {\"default\": null, \"name\": \"userId\", \"type\": [\"null\", \"string\"] } ], \"name\": \"notes\", \"type\": \"record\"}]},\n+    {\"default\": null, \"name\": \"stringArray\", \"type\": [\"null\", {\"items\": \"string\", \"type\": \"array\"}]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTYwNTE2OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDoyMzo1NVrOFcP_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyMjoxMlrOFcXODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw==", "bodyText": "I think we would optimize the TestTimestampBasedKeyGenerator to the gist, WDYT?", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365166437", "createdAt": "2020-01-10T10:23:55Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  @Test\n+  public void testTimestampBasedKeyGenerator() {\n+    // if timezone is GMT+8:00\n+    baseRecord.put(\"createTime\", 1578283932000L);\n+    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // if timezone is GMT\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n+\n+    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3NTcxOQ==", "bodyText": "ok, What should I do?", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365175719", "createdAt": "2020-01-10T10:46:31Z", "author": {"login": "OpenOpened"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  @Test\n+  public void testTimestampBasedKeyGenerator() {\n+    // if timezone is GMT+8:00\n+    baseRecord.put(\"createTime\", 1578283932000L);\n+    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // if timezone is GMT\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n+\n+    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, "originalCommit": {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3ODE0MA==", "bodyText": "click the gist above.", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365178140", "createdAt": "2020-01-10T10:52:34Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  @Test\n+  public void testTimestampBasedKeyGenerator() {\n+    // if timezone is GMT+8:00\n+    baseRecord.put(\"createTime\", 1578283932000L);\n+    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // if timezone is GMT\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n+\n+    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, "originalCommit": {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIyODg5Mw==", "bodyText": "Then what do I need to do? addition more test units?", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365228893", "createdAt": "2020-01-10T13:18:12Z", "author": {"login": "OpenOpened"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  @Test\n+  public void testTimestampBasedKeyGenerator() {\n+    // if timezone is GMT+8:00\n+    baseRecord.put(\"createTime\", 1578283932000L);\n+    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // if timezone is GMT\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n+\n+    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, "originalCommit": {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIzMjQ0MA==", "bodyText": "Then what do I need to do? addition more test units?\n\nYou may copy the code from gist and cover the current TestTimestampBasedKeyGenerator class.", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365232440", "createdAt": "2020-01-10T13:28:07Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  @Test\n+  public void testTimestampBasedKeyGenerator() {\n+    // if timezone is GMT+8:00\n+    baseRecord.put(\"createTime\", 1578283932000L);\n+    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // if timezone is GMT\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n+\n+    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, "originalCommit": {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NDg3OA==", "bodyText": "already covered.", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365284878", "createdAt": "2020-01-10T15:22:12Z", "author": {"login": "OpenOpened"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  @Test\n+  public void testTimestampBasedKeyGenerator() {\n+    // if timezone is GMT+8:00\n+    baseRecord.put(\"createTime\", 1578283932000L);\n+    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // if timezone is GMT\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n+\n+    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, "originalCommit": {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}