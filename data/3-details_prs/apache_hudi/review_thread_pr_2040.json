{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTkwNDA4", "number": 2040, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNTozN1rOEeX8pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNjo0MlrOEeX-YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg1MDk1OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/testutils/HoodieWrittableTestTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNTozN1rOHJ_Xnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNTozN1rOHJ_Xnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNzQ3MQ==", "bodyText": "nit: just one t. HoodieWriteableTestTable?", "url": "https://github.com/apache/hudi/pull/2040#discussion_r480237471", "createdAt": "2020-08-31T16:15:37Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/test/java/org/apache/hudi/testutils/HoodieWrittableTestTable.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.avro.HoodieAvroUtils;\n+import org.apache.hudi.avro.HoodieAvroWriteSupport;\n+import org.apache.hudi.client.SparkTaskContextSupplier;\n+import org.apache.hudi.common.bloom.BloomFilter;\n+import org.apache.hudi.common.bloom.BloomFilterFactory;\n+import org.apache.hudi.common.bloom.BloomFilterTypeCode;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.testutils.FileCreateUtils;\n+import org.apache.hudi.common.testutils.HoodieTestTable;\n+import org.apache.hudi.config.HoodieStorageConfig;\n+import org.apache.hudi.io.storage.HoodieAvroParquetConfig;\n+import org.apache.hudi.io.storage.HoodieParquetWriter;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.avro.AvroSchemaConverter;\n+import org.apache.parquet.hadoop.ParquetWriter;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+public class HoodieWrittableTestTable extends HoodieTestTable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85e2c6f4b0eff3976510b9eb9347d797b9b9b956"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg1NTM3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNjo0MlrOHJ_aKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzozNjowNFrOHKNyqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzODEyMA==", "bodyText": "lets use base file consistently in new code . not \"data file\"", "url": "https://github.com/apache/hudi/pull/2040#discussion_r480238120", "createdAt": "2020-08-31T16:16:42Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "diffHunk": "@@ -197,12 +204,20 @@ public boolean filesExist(String partition, String instantTime, String... fileId\n   public boolean fileExists(String partition, String instantTime, String fileId) {\n     try {\n       return fs.exists(new Path(Paths.get(basePath, partition,\n-          FSUtils.makeDataFileName(instantTime, \"1-0-1\", fileId)).toString()));\n+          getDataFileNameById(instantTime, fileId)).toString()));\n     } catch (IOException e) {\n       throw new HoodieTestTableException(e);\n     }\n   }\n \n+  public String getDataFileNameById(String fileId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85e2c6f4b0eff3976510b9eb9347d797b9b9b956"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Mzc2OA==", "bodyText": "ok makes sense. I've renamed the APIs. I do left org.apache.hudi.common.fs.FSUtils#makeDataFileName(java.lang.String, java.lang.String, java.lang.String) as is since it is out of test scope. Renaming it would probably go to another PR.", "url": "https://github.com/apache/hudi/pull/2040#discussion_r480473768", "createdAt": "2020-08-31T23:36:04Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "diffHunk": "@@ -197,12 +204,20 @@ public boolean filesExist(String partition, String instantTime, String... fileId\n   public boolean fileExists(String partition, String instantTime, String fileId) {\n     try {\n       return fs.exists(new Path(Paths.get(basePath, partition,\n-          FSUtils.makeDataFileName(instantTime, \"1-0-1\", fileId)).toString()));\n+          getDataFileNameById(instantTime, fileId)).toString()));\n     } catch (IOException e) {\n       throw new HoodieTestTableException(e);\n     }\n   }\n \n+  public String getDataFileNameById(String fileId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzODEyMA=="}, "originalCommit": {"oid": "85e2c6f4b0eff3976510b9eb9347d797b9b9b956"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4244, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}