{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODI0NzM4", "number": 1432, "title": "[HUDI-716] Exception: Not an Avro data file when running HoodieCleanClient.runClean", "bodyText": "What is the purpose of the pull request\nMore context, please go ahead with https://issues.apache.org/jira/browse/HUDI-716\nFix Not an avro data file ...\norg.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:929) at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)\nCaused by: java.io.IOException: Not an Avro data file \n  at org.apache.avro.file.DataFileReader.openReader(DataFileReader.java:50) \n  at org.apache.hudi.common.util.AvroUtils.deserializeAvroMetadata(AvroUtils.java:147) \n  at org.apache.hudi.common.util.CleanerUtils.getCleanerPlan(CleanerUtils.java:87) \n  at org.apache.hudi.client.HoodieCleanClient.runClean(HoodieCleanClient.java:141) ... 24 more\n\nWith 0.5.1 onwards, hudi would first scan all files and store the plan (atomically) in .clean.requested and .clean.inflight before triggering the actual clean. If there are any intermittent failures, subsequent clean would read the cleaner plan again and retry.\n\n\nVerify this pull request\nThis pull request is a trivial rework without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-21T06:57:54Z", "url": "https://github.com/apache/hudi/pull/1432", "merged": true, "mergeCommit": {"oid": "dbc9acd23a4eb208c7cd458bb3adaf54731d4145"}, "closed": true, "closedAt": "2020-03-30T18:19:18Z", "author": {"login": "lamberken"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQMslpAFqTM3OTAyNTM0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSyrBlAFqTM4NDExMzY4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDI1MzQ1", "url": "https://github.com/apache/hudi/pull/1432#pullrequestreview-379025345", "createdAt": "2020-03-22T16:56:17Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNjo1NjoxN1rOF5xAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNjo1NjoxN1rOF5xAmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjExNjEyMw==", "bodyText": "@lamber-ken : Can we rollback the corrupted instant seamlessly in this case ?\nCan you also add a CLI (called timeline upgrade) which would read the timeline  and fix upgrade issues.  For now, the CLI can just handle only known issue - to deal with corrupted inflight clean instants.  We can have users run them before upgrade for now and also see if this can be done seamlessly.", "url": "https://github.com/apache/hudi/pull/1432#discussion_r396116123", "createdAt": "2020-03-22T16:56:17Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieCleanClient.java", "diffHunk": "@@ -85,7 +85,11 @@ public HoodieCleanMetadata clean(String startCleanTime) throws HoodieIOException\n     // If there are inflight(failed) or previously requested clean operation, first perform them\n     table.getCleanTimeline().filterInflightsAndRequested().getInstants().forEach(hoodieInstant -> {\n       LOG.info(\"There were previously unfinished cleaner operations. Finishing Instant=\" + hoodieInstant);\n-      runClean(table, hoodieInstant);\n+      try {\n+        runClean(table, hoodieInstant);\n+      } catch (Exception e) {\n+        LOG.warn(\"Failed to perform previous clean operation, instant: \" + hoodieInstant, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjY4NDk1", "url": "https://github.com/apache/hudi/pull/1432#pullrequestreview-383668495", "createdAt": "2020-03-30T09:15:52Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNTo1MlrOF9gnbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNzo1MVrOF9gsaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MTgzOA==", "bodyText": "minor : rename to removeCorruptedPendingCleanAction ?", "url": "https://github.com/apache/hudi/pull/1432#discussion_r400041838", "createdAt": "2020-03-30T09:15:52Z", "author": {"login": "bvaradar"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/UpgradesCommand.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.util.CleanerUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+import org.apache.log4j.Logger;\n+import org.springframework.shell.core.CommandMarker;\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+\n+/**\n+ * CLI command to during upgrading.\n+ */\n+@Component\n+public class UpgradesCommand implements CommandMarker {\n+  private static final Logger LOG = Logger.getLogger(UpgradesCommand.class);\n+\n+  @CliCommand(value = \"cleanup corrupted files\", help = \"cleanup corrupted files\")\n+  public void cleanUpCorruptedFiles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MjU1Nw==", "bodyText": "On second thought, I think this method can be best present in existing RepairsCommand class instead of this new class. Let me know your thoughts ?", "url": "https://github.com/apache/hudi/pull/1432#discussion_r400042557", "createdAt": "2020-03-30T09:17:04Z", "author": {"login": "bvaradar"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/UpgradesCommand.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.util.CleanerUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+import org.apache.log4j.Logger;\n+import org.springframework.shell.core.CommandMarker;\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+\n+/**\n+ * CLI command to during upgrading.\n+ */\n+@Component\n+public class UpgradesCommand implements CommandMarker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzExNQ==", "bodyText": "Add a Log message to not what is getting deleted ?", "url": "https://github.com/apache/hudi/pull/1432#discussion_r400043115", "createdAt": "2020-03-30T09:17:51Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/FSUtils.java", "diffHunk": "@@ -485,6 +485,14 @@ public static void deleteOlderRollbackMetaFiles(FileSystem fs, String metaPath,\n     });\n   }\n \n+  public static void deleteInstantFile(FileSystem fs, String metaPath, HoodieInstant instant) {\n+    try {\n+      fs.delete(new Path(metaPath, instant.getFileName()), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a81f022d51e1430af451461e0e378315030348c7", "author": {"user": {"login": "lamberken", "name": "lamberken"}}, "url": "https://github.com/apache/hudi/commit/a81f022d51e1430af451461e0e378315030348c7", "committedDate": "2020-03-30T10:00:38Z", "message": "[HUDI-716] Exception: Not an Avro data file when running HoodieCleanClient.runClean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTEzNjgw", "url": "https://github.com/apache/hudi/pull/1432#pullrequestreview-384113680", "createdAt": "2020-03-30T18:18:58Z", "commit": {"oid": "a81f022d51e1430af451461e0e378315030348c7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4006, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}