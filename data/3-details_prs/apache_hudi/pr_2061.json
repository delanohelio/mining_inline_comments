{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NTE4MDMx", "number": 2061, "title": "[DOCS] Adding coding guidelines", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\n(For example: This pull request adds quick-start document.)\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-09-02T01:48:37Z", "url": "https://github.com/apache/hudi/pull/2061", "merged": true, "mergeCommit": {"oid": "769905286cb55a52278c685b4311525541ae4f4c"}, "closed": true, "closedAt": "2020-09-03T20:03:49Z", "author": {"login": "vinothchandar"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE2vzOgFqTQ4MDUzNjE5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFV7npgBqjM3MjYzNDA3NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNTM2MTk2", "url": "https://github.com/apache/hudi/pull/2061#pullrequestreview-480536196", "createdAt": "2020-09-02T07:02:47Z", "commit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzowMjo0OFrOHLfVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoxOTozOFrOHLgJyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgwOTczMQ==", "bodyText": "lot -> a lot", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481809731", "createdAt": "2020-09-02T07:02:48Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMDIzMg==", "bodyText": "reflective of -> reflect on?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481810232", "createdAt": "2020-09-02T07:03:26Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMTM4Mw==", "bodyText": "an action (when) and  -> an action (when), and ?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481811383", "createdAt": "2020-09-02T07:04:56Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMTc1Mg==", "bodyText": "May be -> Maybe?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481811752", "createdAt": "2020-09-02T07:05:23Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMjExNA==", "bodyText": "file.. -> file.", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481812114", "createdAt": "2020-09-02T07:05:53Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMjY1Nw==", "bodyText": "xxxData etc -> xxxData, etc?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481812657", "createdAt": "2020-09-02T07:06:41Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMzEyNA==", "bodyText": "may be -> maybe?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481813124", "createdAt": "2020-09-02T07:07:18Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxNDkyMA==", "bodyText": "actual -> the actual?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481814920", "createdAt": "2020-09-02T07:09:37Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxNTg0NA==", "bodyText": "for the sake\uff1f", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481815844", "createdAt": "2020-09-02T07:10:46Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. \n+  e.g renaming/breaking up a file and then changing code changes, makes the diff very hard to review.\n+- **Licensing**\n+    - Every source file needs to include the Apache license header. Every new dependency needs to have \n+      an open source license [compatible](https://www.apache.org/legal/resolved.html#criteria) with Apache.\n+    - If you are re-using code from another apache/open-source project, licensing needs to be compatible and attribution added to `LICENSE` file\n+    - Please DO NOT copy paste any code from StackOverflow or other online sources, since their license attribution would be unclear. Author them yourself!\n+- **Code Organization** \n+    - Anything in `hudi-common` cannot depend on a specific engine runtime like Spark. \n+    - Any changes to bundles under `packaging`, will be reviewed with additional scrutiny to avoid breakages across versions.\n+- **Code reuse**\n+  - Whenever you can, please use/enhance use existing utils classes in code (`CollectionUtils`, `ParquetUtils`, `HoodieAvroUtils`). Search for classes ending in `Utils`.\n+  - As a complex project, that must integrate with multiple systems, we tend to avoid dependencies like `guava`, `apache commons` for sake of easy integration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxNjY5Mg==", "bodyText": "write a piece of?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481816692", "createdAt": "2020-09-02T07:11:48Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. \n+  e.g renaming/breaking up a file and then changing code changes, makes the diff very hard to review.\n+- **Licensing**\n+    - Every source file needs to include the Apache license header. Every new dependency needs to have \n+      an open source license [compatible](https://www.apache.org/legal/resolved.html#criteria) with Apache.\n+    - If you are re-using code from another apache/open-source project, licensing needs to be compatible and attribution added to `LICENSE` file\n+    - Please DO NOT copy paste any code from StackOverflow or other online sources, since their license attribution would be unclear. Author them yourself!\n+- **Code Organization** \n+    - Anything in `hudi-common` cannot depend on a specific engine runtime like Spark. \n+    - Any changes to bundles under `packaging`, will be reviewed with additional scrutiny to avoid breakages across versions.\n+- **Code reuse**\n+  - Whenever you can, please use/enhance use existing utils classes in code (`CollectionUtils`, `ParquetUtils`, `HoodieAvroUtils`). Search for classes ending in `Utils`.\n+  - As a complex project, that must integrate with multiple systems, we tend to avoid dependencies like `guava`, `apache commons` for sake of easy integration. \n+     Please start a discussion on the mailing list, before attempting to reintroduce them\n+  - As a data system, that takes performance seriously, we also write piece of infrastructure (e.g `ExternalSpillableMap`) natively, that are optimized specifically for our scenarios.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDA5OA==", "bodyText": "a RFC -> an RFC", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481820098", "createdAt": "2020-09-02T07:15:49Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. \n+  e.g renaming/breaking up a file and then changing code changes, makes the diff very hard to review.\n+- **Licensing**\n+    - Every source file needs to include the Apache license header. Every new dependency needs to have \n+      an open source license [compatible](https://www.apache.org/legal/resolved.html#criteria) with Apache.\n+    - If you are re-using code from another apache/open-source project, licensing needs to be compatible and attribution added to `LICENSE` file\n+    - Please DO NOT copy paste any code from StackOverflow or other online sources, since their license attribution would be unclear. Author them yourself!\n+- **Code Organization** \n+    - Anything in `hudi-common` cannot depend on a specific engine runtime like Spark. \n+    - Any changes to bundles under `packaging`, will be reviewed with additional scrutiny to avoid breakages across versions.\n+- **Code reuse**\n+  - Whenever you can, please use/enhance use existing utils classes in code (`CollectionUtils`, `ParquetUtils`, `HoodieAvroUtils`). Search for classes ending in `Utils`.\n+  - As a complex project, that must integrate with multiple systems, we tend to avoid dependencies like `guava`, `apache commons` for sake of easy integration. \n+     Please start a discussion on the mailing list, before attempting to reintroduce them\n+  - As a data system, that takes performance seriously, we also write piece of infrastructure (e.g `ExternalSpillableMap`) natively, that are optimized specifically for our scenarios.\n+     Please start with them first, when solving problems.\n+ - **Breaking changes**\n+   - Any version changes for dependencies, needs to be ideally vetted across different user environments in the community, to get enough confidence before merging.\n+   - Any changes to methods annotated with `PublicAPIMethod` or classes annotated with `PublicAPIClass` require upfront discussion and potentially a RFC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDEyMQ==", "bodyText": "for the sake\uff1f", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481820121", "createdAt": "2020-09-02T07:15:51Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. \n+  e.g renaming/breaking up a file and then changing code changes, makes the diff very hard to review.\n+- **Licensing**\n+    - Every source file needs to include the Apache license header. Every new dependency needs to have \n+      an open source license [compatible](https://www.apache.org/legal/resolved.html#criteria) with Apache.\n+    - If you are re-using code from another apache/open-source project, licensing needs to be compatible and attribution added to `LICENSE` file\n+    - Please DO NOT copy paste any code from StackOverflow or other online sources, since their license attribution would be unclear. Author them yourself!\n+- **Code Organization** \n+    - Anything in `hudi-common` cannot depend on a specific engine runtime like Spark. \n+    - Any changes to bundles under `packaging`, will be reviewed with additional scrutiny to avoid breakages across versions.\n+- **Code reuse**\n+  - Whenever you can, please use/enhance use existing utils classes in code (`CollectionUtils`, `ParquetUtils`, `HoodieAvroUtils`). Search for classes ending in `Utils`.\n+  - As a complex project, that must integrate with multiple systems, we tend to avoid dependencies like `guava`, `apache commons` for sake of easy integration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMTg3MQ==", "bodyText": "non-backwards -> non-backward?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481821871", "createdAt": "2020-09-02T07:18:01Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. \n+  e.g renaming/breaking up a file and then changing code changes, makes the diff very hard to review.\n+- **Licensing**\n+    - Every source file needs to include the Apache license header. Every new dependency needs to have \n+      an open source license [compatible](https://www.apache.org/legal/resolved.html#criteria) with Apache.\n+    - If you are re-using code from another apache/open-source project, licensing needs to be compatible and attribution added to `LICENSE` file\n+    - Please DO NOT copy paste any code from StackOverflow or other online sources, since their license attribution would be unclear. Author them yourself!\n+- **Code Organization** \n+    - Anything in `hudi-common` cannot depend on a specific engine runtime like Spark. \n+    - Any changes to bundles under `packaging`, will be reviewed with additional scrutiny to avoid breakages across versions.\n+- **Code reuse**\n+  - Whenever you can, please use/enhance use existing utils classes in code (`CollectionUtils`, `ParquetUtils`, `HoodieAvroUtils`). Search for classes ending in `Utils`.\n+  - As a complex project, that must integrate with multiple systems, we tend to avoid dependencies like `guava`, `apache commons` for sake of easy integration. \n+     Please start a discussion on the mailing list, before attempting to reintroduce them\n+  - As a data system, that takes performance seriously, we also write piece of infrastructure (e.g `ExternalSpillableMap`) natively, that are optimized specifically for our scenarios.\n+     Please start with them first, when solving problems.\n+ - **Breaking changes**\n+   - Any version changes for dependencies, needs to be ideally vetted across different user environments in the community, to get enough confidence before merging.\n+   - Any changes to methods annotated with `PublicAPIMethod` or classes annotated with `PublicAPIClass` require upfront discussion and potentially a RFC.\n+   - Any non-backwards compatible changes similarly need upfront discussion and the functionality needs to implement an upgrade-downgrade path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMzE3OA==", "bodyText": "with intent -> with the intent?", "url": "https://github.com/apache/hudi/pull/2061#discussion_r481823178", "createdAt": "2020-09-02T07:19:38Z", "author": {"login": "yanghua"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -140,6 +195,9 @@ and more importantly also try to improve the process along the way as well.\n    - Both contributors/reviewers need to keep an open mind and ground themselves to making the most technically sound argument.\n    - If progress is hard, please involve another PMC member/Committer to share another perspective.\n    - Staying humble and eager to learn, goes a long way in ensuring these reviews are smooth.\n+ - Reviewers are expected to uphold the code quality, standards outlined above.\n+ - When merging PRs, always make sure you are squashing the commits using the \"Squash and Merge\" feature in Github\n+ - When necessary/appropriate, reviewers could make changes themselves to PR branches, with intent to get the PR landed sooner. (see [how-to](https://cwiki.apache.org/confluence/display/HUDI/Resources#Resources-PushingChangesToPRs))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODg3MjI2", "url": "https://github.com/apache/hudi/pull/2061#pullrequestreview-480887226", "createdAt": "2020-09-02T14:36:47Z", "commit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxOTM0NjIy", "url": "https://github.com/apache/hudi/pull/2061#pullrequestreview-481934622", "createdAt": "2020-09-03T15:05:39Z", "commit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNTozOVrOHMrCdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNTozOVrOHMrCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MDEwMw==", "bodyText": "do we have any guidelines for ordering or public, package private and private method. Also, in tests, actual test methods and private/utility methods and assertion methods.", "url": "https://github.com/apache/hudi/pull/2061#discussion_r483050103", "createdAt": "2020-09-03T15:05:39Z", "author": {"login": "nsivabalan"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxOTM1Njc2", "url": "https://github.com/apache/hudi/pull/2061#pullrequestreview-481935676", "createdAt": "2020-09-03T15:06:43Z", "commit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNjo0NFrOHMrFYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowOTo1OFrOHMrOAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MDg0OA==", "bodyText": "+1 on this.", "url": "https://github.com/apache/hudi/pull/2061#discussion_r483050848", "createdAt": "2020-09-03T15:06:44Z", "author": {"login": "nsivabalan"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MzA1OA==", "bodyText": "can we add a line about \"for large PRs like bootstrap, one should add integration tests as well\".", "url": "https://github.com/apache/hudi/pull/2061#discussion_r483053058", "createdAt": "2020-09-03T15:09:58Z", "author": {"login": "nsivabalan"}, "path": "docs/_pages/contributing.md", "diffHunk": "@@ -130,6 +126,65 @@ and more importantly also try to improve the process along the way as well.\n    - Before your change can be merged, it should be squashed into a single commit for cleaner commit history.\n  - Finally, once your pull request is merged, make sure to `Close` the JIRA.\n \n+### Coding guidelines \n+\n+Our code can benefit from contributors speaking the same \"language\" when authoring code. After all, it gets read lot more than it gets\n+written. So optimizing for \"reads\" is a good goal. The list below is a set of guidelines, that contributors strive to upkeep and reflective \n+of how we want to evolve our code in the future.\n+\n+#### Style \n+\n+ - **Formatting** We should rely on checkstyle and spotless to auto fix formatting; automate this completely. Where we cannot,\n+    we will err on the side of not taxing contributors with manual effort.\n+ - **Refactoring**\n+   - Refactor with purpose; any refactor suggested should be attributable to functionality that now becomes easy to implement.\n+   - A class is asking to be refactored, when it has several overloaded responsibilities/have sets of fields/methods which are used more cohesively than others. \n+   - Try to name tests using the given-when-then model, that cleans separates preconditions (given), an action (when) and assertions (then).\n+ - **Naming things**\n+   - Let's name uniformly; using the same word to denote the same concept. e.g: bootstrap vs external vs source, when referring to bootstrapped tables. \n+     May be they all mean the same, but having one word makes the code lot more easily readable. \n+   - Let's name consistently with Hudi terminology. e.g dataset vs table, base file vs data file..\n+   - Class names preferably are nouns (e.g Runner) which reflect their responsibility and methods are verbs (e.g run()).\n+   - Avoid filler words, that don't add value e.g xxxInfo, xxxData etc.\n+   - We name classes in code starting with `Hoodie` and not `Hudi` and we want to keep it that way for consistency/historical reasons. \n+ - **Methods**\n+   - Individual methods should short (~20-30 lines) and have a single purpose; If you feel like it has a secondary purpose, then may be it needs\n+     to be broken down more.\n+   - Lesser the number of arguments, the better; \n+   - Place caller methods on top of callee methods, whenever possible.\n+   - Avoid \"output\" arguments e.g passing in a list and filling its values within the method.\n+   - Try to limit individual if/else blocks to few lines to aid readability.\n+   - Separate logical blocks of code with a newline in between e.g read a file into memory, loop over the lines.\n+ - **Classes**\n+   - Like method, each Class should have a single purpose/responsibility.\n+   - Try to keep class files to about 200 lines of length, nothing beyond 500.\n+   - Avoid stating the obvious in comments; e.g each line does not deserve a comment; Document corner-cases/special perf considerations etc clearly.\n+   - Try creating factory methods/builders and interfaces wherever you feel a specific implementation may be changed down the line.\n+\n+#### Substance\n+\n+- Try to avoid large PRs; if unavoidable (many times they are) please separate refactoring with actual implementation of functionality. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d33f449432be515f0bcd33da7c039d3f50125a", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/hudi/commit/64d33f449432be515f0bcd33da7c039d3f50125a", "committedDate": "2020-09-03T19:39:44Z", "message": "[DOCS] Adding coding guidelines"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f8bd458abbbed2b4203364a04615ca7bdc70c89", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/hudi/commit/1f8bd458abbbed2b4203364a04615ca7bdc70c89", "committedDate": "2020-09-02T01:46:32Z", "message": "[DOCS] Adding coding guidelines"}, "afterCommit": {"oid": "64d33f449432be515f0bcd33da7c039d3f50125a", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/hudi/commit/64d33f449432be515f0bcd33da7c039d3f50125a", "committedDate": "2020-09-03T19:39:44Z", "message": "[DOCS] Adding coding guidelines"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4497, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}