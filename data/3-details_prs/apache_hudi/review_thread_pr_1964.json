{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzAxMjA0", "number": 1964, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTowMzoxNlrOEbvafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjozMzo0MlrOEbw8NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTIzODM4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTowMzoxNlrOHF2L0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowMTo0M1rOHF3zlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5MjY4OA==", "bodyText": "I don't think this makes sense in the timeline as of now. If you take a look at the timeline API's,  they only talk about the metadata that has changed. getPartitionsMutated conceptually is providing what has changed in the underlying data as opposed to what has changed in the timeline per se. Generally, all of this information should come from the timeline but that requires a full redesign on the timeline. Should we add this API here -> https://github.com/apache/hudi/blob/master/hudi-client/src/main/java/org/apache/hudi/client/HoodieReadClient.java#L195 ? And you can wrap this functionality in a TimelineUtils ?\nWhen we have clearer design on timeline, we can merge back the TimelineUtils to the real timeline...", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475892688", "createdAt": "2020-08-24T21:03:16Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "diffHunk": "@@ -232,6 +233,12 @@\n    */\n   Option<byte[]> getInstantDetails(HoodieInstant instant);\n \n+  /**\n+   * Returns partitions that have been modified in the timeline. This includes internal operations such as clean.\n+   * Note that this only returns data for completed instants.\n+   */\n+  List<String> getPartitionsMutated();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5NTYxNw==", "bodyText": "+1 on abstraction point. I think having a separate helper class would be better.", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475895617", "createdAt": "2020-08-24T21:09:08Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "diffHunk": "@@ -232,6 +233,12 @@\n    */\n   Option<byte[]> getInstantDetails(HoodieInstant instant);\n \n+  /**\n+   * Returns partitions that have been modified in the timeline. This includes internal operations such as clean.\n+   * Note that this only returns data for completed instants.\n+   */\n+  List<String> getPartitionsMutated();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5MjY4OA=="}, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMTUzNA==", "bodyText": "@n3nash I want this to be in hudi-common, so this can be reused in hadoop-mr and hive-sync.  Do you want me to create TimelineUtils in common?", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475901534", "createdAt": "2020-08-24T21:21:23Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "diffHunk": "@@ -232,6 +233,12 @@\n    */\n   Option<byte[]> getInstantDetails(HoodieInstant instant);\n \n+  /**\n+   * Returns partitions that have been modified in the timeline. This includes internal operations such as clean.\n+   * Note that this only returns data for completed instants.\n+   */\n+  List<String> getPartitionsMutated();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5MjY4OA=="}, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxOTI1NA==", "bodyText": "created TimelineUtils", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475919254", "createdAt": "2020-08-24T22:01:43Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "diffHunk": "@@ -232,6 +233,12 @@\n    */\n   Option<byte[]> getInstantDetails(HoodieInstant instant);\n \n+  /**\n+   * Returns partitions that have been modified in the timeline. This includes internal operations such as clean.\n+   * Note that this only returns data for completed instants.\n+   */\n+  List<String> getPartitionsMutated();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5MjY4OA=="}, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTI1NTYzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTowODozOVrOHF2WSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowMjowOFrOHF30VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5NTM2OQ==", "bodyText": "Timeline APIs are only about instants  in general. I think adding partitions here is breaking that abstraction. Can you move this to some helper class", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475895369", "createdAt": "2020-08-24T21:08:39Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -296,6 +300,42 @@ public boolean isBeforeTimelineStarts(String instant) {\n     return details.apply(instant);\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxOTQ0NQ==", "bodyText": "Thank you. Moved it", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475919445", "createdAt": "2020-08-24T22:02:08Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -296,6 +300,42 @@ public boolean isBeforeTimelineStarts(String instant) {\n     return details.apply(instant);\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5NTM2OQ=="}, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMwOTc4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyNTo1NVrOHF23Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowNDoxNFrOHF33lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMzc2Mw==", "bodyText": "We dont need to look at clean and (event compaction) for figuring out changed partitions for the case of hive syncing.", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475903763", "createdAt": "2020-08-24T21:25:55Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -296,6 +300,42 @@ public boolean isBeforeTimelineStarts(String instant) {\n     return details.apply(instant);\n   }\n \n+  /**\n+   * Returns partitions that have been modified in the timeline. This includes internal operations such as clean.\n+   * Note that this only returns data for completed instants.\n+   */\n+  public List<String> getPartitionsMutated() {\n+    return filterCompletedInstants().getInstants().flatMap(s -> {\n+      switch (s.getAction()) {\n+        case HoodieTimeline.COMMIT_ACTION:\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          try {\n+            HoodieCommitMetadata commitMetadata = HoodieCommitMetadata.fromBytes(getInstantDetails(s).get(), HoodieCommitMetadata.class);\n+            return commitMetadata.getPartitionToWriteStats().keySet().stream();\n+          } catch (IOException e) {\n+            throw new HoodieIOException(\"Failed to get partitions written between \" + firstInstant() + \" \" + lastInstant(), e);\n+          }\n+        case HoodieTimeline.CLEAN_ACTION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMDI3OQ==", "bodyText": "The method takes in a timeline. So hive sync only passes \"commit\" timeline to this method and gets only partitions modified by commit instants.  I added another method just for clarity that only looks at commits. Let me know if you have any suggestions.", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475920279", "createdAt": "2020-08-24T22:04:14Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -296,6 +300,42 @@ public boolean isBeforeTimelineStarts(String instant) {\n     return details.apply(instant);\n   }\n \n+  /**\n+   * Returns partitions that have been modified in the timeline. This includes internal operations such as clean.\n+   * Note that this only returns data for completed instants.\n+   */\n+  public List<String> getPartitionsMutated() {\n+    return filterCompletedInstants().getInstants().flatMap(s -> {\n+      switch (s.getAction()) {\n+        case HoodieTimeline.COMMIT_ACTION:\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          try {\n+            HoodieCommitMetadata commitMetadata = HoodieCommitMetadata.fromBytes(getInstantDetails(s).get(), HoodieCommitMetadata.class);\n+            return commitMetadata.getPartitionToWriteStats().keySet().stream();\n+          } catch (IOException e) {\n+            throw new HoodieIOException(\"Failed to get partitions written between \" + firstInstant() + \" \" + lastInstant(), e);\n+          }\n+        case HoodieTimeline.CLEAN_ACTION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMzc2Mw=="}, "originalCommit": {"oid": "f0cd600d209d9ca370ea4ba0ff1536867fc706d0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ0NzgyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoxNjozNFrOHF4Kew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoxNjozNFrOHF4Kew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTExNQ==", "bodyText": "Let's keep the same name as before getCommitMetadata & getCleanMetadata unless there is a specific need for keeping the names short..", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475925115", "createdAt": "2020-08-24T22:16:34Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.avro.model.HoodieCleanPartitionMetadata;\n+import org.apache.hudi.common.model.HoodieCleaningPolicy;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.table.timeline.TimelineUtils;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n+import org.apache.hudi.common.util.Option;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TestTimelineUtils extends HoodieCommonTestHarness {\n+\n+  @BeforeEach\n+  public void setUp() throws Exception {\n+    initMetaClient();\n+  }\n+\n+  @Test\n+  public void testGetPartitions() throws IOException {\n+    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n+    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n+    assertTrue(activeCommitTimeline.empty());\n+\n+    String olderPartition = \"0\"; // older partitions that is modified by all cleans\n+    for (int i = 1; i <= 5; i++) {\n+      String ts = i + \"\";\n+      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n+      activeTimeline.createNewInstant(instant);\n+      activeTimeline.saveAsComplete(instant, Option.of(getCommitMeta(basePath, ts, ts, 2)));\n+\n+      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n+      activeTimeline.createNewInstant(cleanInstant);\n+      activeTimeline.saveAsComplete(cleanInstant, getCleanMeta(olderPartition, ts));\n+    }\n+\n+    metaClient.reloadActiveTimeline();\n+\n+    // verify modified partitions included cleaned data\n+    List<String> partitions = TimelineUtils.getPartitionsMutated(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n+    assertEquals(5, partitions.size());\n+    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\", \"5\"}));\n+\n+    partitions = TimelineUtils.getPartitionsMutated(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n+    assertEquals(4, partitions.size());\n+    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\"}));\n+\n+    // verify only commit actions\n+    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n+    assertEquals(4, partitions.size());\n+    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n+\n+    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n+    assertEquals(3, partitions.size());\n+    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n+  }\n+\n+  @Test\n+  public void testGetPartitionsUnpartitioned() throws IOException {\n+    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n+    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n+    assertTrue(activeCommitTimeline.empty());\n+\n+    String partitionPath = \"\";\n+    for (int i = 1; i <= 5; i++) {\n+      String ts = i + \"\";\n+      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n+      activeTimeline.createNewInstant(instant);\n+      activeTimeline.saveAsComplete(instant, Option.of(getCommitMeta(basePath, partitionPath, ts, 2)));\n+\n+      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n+      activeTimeline.createNewInstant(cleanInstant);\n+      activeTimeline.saveAsComplete(cleanInstant, getCleanMeta(partitionPath, ts));\n+    }\n+\n+    metaClient.reloadActiveTimeline();\n+\n+    // verify modified partitions included cleaned data\n+    List<String> partitions = TimelineUtils.getPartitionsMutated(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n+    assertTrue(partitions.isEmpty());\n+\n+    partitions = TimelineUtils.getPartitionsMutated(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n+    assertTrue(partitions.isEmpty());\n+  }\n+\n+  private byte[] getCommitMeta(String basePath, String partition, String commitTs, int count)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ0OTEyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoxNzowNlrOHF4LQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzozNDo0OVrOHF6cvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTMxNA==", "bodyText": "Do you want to throw an exception here for now so it's not treated incorrectly ?", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475925314", "createdAt": "2020-08-24T22:17:06Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw\n+ */\n+public class TimelineUtils {\n+\n+  /**\n+   * Returns partitions that have new data strictly after commitTime.\n+   * Does not include internal operations such as clean in the timeline.\n+   */\n+  public static List<String> getPartitionsWritten(HoodieTimeline timeline) {\n+    HoodieTimeline timelineToSync = timeline.getCommitsAndCompactionTimeline();\n+    return getPartitionsMutated(timelineToSync);\n+  }\n+\n+  /**\n+   * Returns partitions that have been modified including internal operations such as clean in the passed timeline.\n+   */\n+  public static List<String> getPartitionsMutated(HoodieTimeline timeline) {\n+    return timeline.filterCompletedInstants().getInstants().flatMap(s -> {\n+      switch (s.getAction()) {\n+        case HoodieTimeline.COMMIT_ACTION:\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          try {\n+            HoodieCommitMetadata commitMetadata = HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(s).get(), HoodieCommitMetadata.class);\n+            return commitMetadata.getPartitionToWriteStats().keySet().stream();\n+          } catch (IOException e) {\n+            throw new HoodieIOException(\"Failed to get partitions written between \" + timeline.firstInstant() + \" \" + timeline.lastInstant(), e);\n+          }\n+        case HoodieTimeline.CLEAN_ACTION:\n+          try {\n+            HoodieCleanMetadata cleanMetadata = TimelineMetadataUtils.deserializeHoodieCleanMetadata(timeline.getInstantDetails(s).get());\n+            return cleanMetadata.getPartitionMetadata().keySet().stream();\n+          } catch (IOException e) {\n+            throw new HoodieIOException(\"Failed to get partitions cleaned between \" + timeline.firstInstant() + \" \" + timeline.lastInstant(), e);\n+          }\n+        case HoodieTimeline.COMPACTION_ACTION:\n+          // compaction is not a completed instant.  So no need to consider this action.\n+        case HoodieTimeline.SAVEPOINT_ACTION:\n+        case HoodieTimeline.ROLLBACK_ACTION:\n+        case HoodieTimeline.RESTORE_ACTION:\n+          return Stream.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2MjU1OQ==", "bodyText": "compaction is not treated as completed instants. So this can be ignored. I implemented all other actions and added tests", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475962559", "createdAt": "2020-08-24T23:34:49Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw\n+ */\n+public class TimelineUtils {\n+\n+  /**\n+   * Returns partitions that have new data strictly after commitTime.\n+   * Does not include internal operations such as clean in the timeline.\n+   */\n+  public static List<String> getPartitionsWritten(HoodieTimeline timeline) {\n+    HoodieTimeline timelineToSync = timeline.getCommitsAndCompactionTimeline();\n+    return getPartitionsMutated(timelineToSync);\n+  }\n+\n+  /**\n+   * Returns partitions that have been modified including internal operations such as clean in the passed timeline.\n+   */\n+  public static List<String> getPartitionsMutated(HoodieTimeline timeline) {\n+    return timeline.filterCompletedInstants().getInstants().flatMap(s -> {\n+      switch (s.getAction()) {\n+        case HoodieTimeline.COMMIT_ACTION:\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          try {\n+            HoodieCommitMetadata commitMetadata = HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(s).get(), HoodieCommitMetadata.class);\n+            return commitMetadata.getPartitionToWriteStats().keySet().stream();\n+          } catch (IOException e) {\n+            throw new HoodieIOException(\"Failed to get partitions written between \" + timeline.firstInstant() + \" \" + timeline.lastInstant(), e);\n+          }\n+        case HoodieTimeline.CLEAN_ACTION:\n+          try {\n+            HoodieCleanMetadata cleanMetadata = TimelineMetadataUtils.deserializeHoodieCleanMetadata(timeline.getInstantDetails(s).get());\n+            return cleanMetadata.getPartitionMetadata().keySet().stream();\n+          } catch (IOException e) {\n+            throw new HoodieIOException(\"Failed to get partitions cleaned between \" + timeline.firstInstant() + \" \" + timeline.lastInstant(), e);\n+          }\n+        case HoodieTimeline.COMPACTION_ACTION:\n+          // compaction is not a completed instant.  So no need to consider this action.\n+        case HoodieTimeline.SAVEPOINT_ACTION:\n+        case HoodieTimeline.ROLLBACK_ACTION:\n+        case HoodieTimeline.RESTORE_ACTION:\n+          return Stream.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTMxNA=="}, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ4NzI0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjozMzowOVrOHF4iCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzozMjo1MlrOHF6XzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMTE0Nw==", "bodyText": "typo : queryxw -> query", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475931147", "createdAt": "2020-08-24T22:33:09Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2MTI5Mw==", "bodyText": "thank you! fixed.", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475961293", "createdAt": "2020-08-24T23:32:52Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMTE0Nw=="}, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ4ODUzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjozMzo0MlrOHF4izg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMToxMDoxMFrOHF-X3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMTM0Mg==", "bodyText": "getPartitionsMutated -> getAffectedPartitions ?", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475931342", "createdAt": "2020-08-24T22:33:42Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw\n+ */\n+public class TimelineUtils {\n+\n+  /**\n+   * Returns partitions that have new data strictly after commitTime.\n+   * Does not include internal operations such as clean in the timeline.\n+   */\n+  public static List<String> getPartitionsWritten(HoodieTimeline timeline) {\n+    HoodieTimeline timelineToSync = timeline.getCommitsAndCompactionTimeline();\n+    return getPartitionsMutated(timelineToSync);\n+  }\n+\n+  /**\n+   * Returns partitions that have been modified including internal operations such as clean in the passed timeline.\n+   */\n+  public static List<String> getPartitionsMutated(HoodieTimeline timeline) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMzQ5Ng==", "bodyText": "I am assuming you are planning to use this API internally. Right ?", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475933496", "createdAt": "2020-08-24T22:40:02Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw\n+ */\n+public class TimelineUtils {\n+\n+  /**\n+   * Returns partitions that have new data strictly after commitTime.\n+   * Does not include internal operations such as clean in the timeline.\n+   */\n+  public static List<String> getPartitionsWritten(HoodieTimeline timeline) {\n+    HoodieTimeline timelineToSync = timeline.getCommitsAndCompactionTimeline();\n+    return getPartitionsMutated(timelineToSync);\n+  }\n+\n+  /**\n+   * Returns partitions that have been modified including internal operations such as clean in the passed timeline.\n+   */\n+  public static List<String> getPartitionsMutated(HoodieTimeline timeline) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMTM0Mg=="}, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2MTIwNA==", "bodyText": "Yes, this is for internal use. I have no strong opinion on name. I think it was initially getAffectedPartitions, changed to getPartitionsMutated because of @n3nash suggestion. i'm fine with going back if he agrees", "url": "https://github.com/apache/hudi/pull/1964#discussion_r475961204", "createdAt": "2020-08-24T23:32:43Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw\n+ */\n+public class TimelineUtils {\n+\n+  /**\n+   * Returns partitions that have new data strictly after commitTime.\n+   * Does not include internal operations such as clean in the timeline.\n+   */\n+  public static List<String> getPartitionsWritten(HoodieTimeline timeline) {\n+    HoodieTimeline timelineToSync = timeline.getCommitsAndCompactionTimeline();\n+    return getPartitionsMutated(timelineToSync);\n+  }\n+\n+  /**\n+   * Returns partitions that have been modified including internal operations such as clean in the passed timeline.\n+   */\n+  public static List<String> getPartitionsMutated(HoodieTimeline timeline) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMTM0Mg=="}, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyNjg0Ng==", "bodyText": "Sure, getAffectedPartitions is fine @satishkotha, I think initially it was getWrittenPartitions or something..", "url": "https://github.com/apache/hudi/pull/1964#discussion_r476026846", "createdAt": "2020-08-25T01:10:10Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline;\n+\n+import org.apache.hudi.avro.model.HoodieCleanMetadata;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * TimelineUtils provides a common way to query incremental meta-data changes for a hoodie table.\n+ *\n+ * This is useful in multiple places including:\n+ * 1) HiveSync - this can be used to query partitions that changed since previous sync.\n+ * 2) Incremental reads - InputFormats can use this API to queryxw\n+ */\n+public class TimelineUtils {\n+\n+  /**\n+   * Returns partitions that have new data strictly after commitTime.\n+   * Does not include internal operations such as clean in the timeline.\n+   */\n+  public static List<String> getPartitionsWritten(HoodieTimeline timeline) {\n+    HoodieTimeline timelineToSync = timeline.getCommitsAndCompactionTimeline();\n+    return getPartitionsMutated(timelineToSync);\n+  }\n+\n+  /**\n+   * Returns partitions that have been modified including internal operations such as clean in the passed timeline.\n+   */\n+  public static List<String> getPartitionsMutated(HoodieTimeline timeline) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMTM0Mg=="}, "originalCommit": {"oid": "383b5b4b1b3544a06ae2ae59b46e0a5323b03a68"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4426, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}