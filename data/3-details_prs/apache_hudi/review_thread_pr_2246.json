{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTQwNzY3", "number": 2246, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNjoxMjo1MFrOE7yX3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNjoxMjo1MFrOE7yX3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTI2NzUwOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNjoxMjo1MFrOH3naqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjoxMDozN1rOH4AQzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3OTUyOQ==", "bodyText": "Hi @hddong, how about return an empty array here as before. it seems will cause an NPE in org/apache/hudi/cli/HoodiePrintHelper.java:92", "url": "https://github.com/apache/hudi/pull/2246#discussion_r528079529", "createdAt": "2020-11-21T06:12:50Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java", "diffHunk": "@@ -172,49 +173,38 @@ public String showCommits(\n     return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, allCommits);\n   }\n \n-  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n+  private Comparable[] commitDetail(GenericRecord record, String metadataName,\n+                                    boolean skipMetadata) {\n     List<Object> commitDetails = new ArrayList<>();\n+    commitDetails.add(record.get(\"commitTime\"));\n+    commitDetails.add(record.get(\"actionType\").toString());\n+    if (!skipMetadata) {\n+      commitDetails.add(Option.ofNullable(record.get(metadataName)).orElse(\"{}\").toString());\n+    }\n+    return commitDetails.toArray(new Comparable[commitDetails.size()]);\n+  }\n+\n+  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n     try {\n       switch (record.get(\"actionType\").toString()) {\n-        case HoodieTimeline.CLEAN_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCleanMetadata\").toString());\n-          }\n-          break;\n-        }\n+        case HoodieTimeline.CLEAN_ACTION:\n+          return commitDetail(record, \"hoodieCleanMetadata\", skipMetadata);\n         case HoodieTimeline.COMMIT_ACTION:\n-        case HoodieTimeline.DELTA_COMMIT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCommitMetadata\").toString());\n-          }\n-          break;\n-        }\n-        case HoodieTimeline.ROLLBACK_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieRollbackMetadata\").toString());\n-          }\n-          break;\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          return commitDetail(record, \"hoodieCommitMetadata\", skipMetadata);\n+        case HoodieTimeline.ROLLBACK_ACTION:\n+          return commitDetail(record, \"hoodieRollbackMetadata\", skipMetadata);\n+        case HoodieTimeline.SAVEPOINT_ACTION:\n+          return commitDetail(record, \"hoodieSavePointMetadata\", skipMetadata);\n+        case HoodieTimeline.COMPACTION_ACTION:\n+          return commitDetail(record, \"hoodieCompactionMetadata\", skipMetadata);\n+        default: {\n+          return new Comparable[]{};\n         }\n-        case HoodieTimeline.SAVEPOINT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieSavePointMetadata\").toString());\n-          }\n-          break;\n-        }\n-        default:\n-          return commitDetails.toArray(new Comparable[commitDetails.size()]);\n       }\n     } catch (Exception e) {\n       e.printStackTrace();\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47778897fbd46f552bc029a942b42df1cae72796"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4NDMyMA==", "bodyText": "@wangxianghu : yes, empty is better here.", "url": "https://github.com/apache/hudi/pull/2246#discussion_r528484320", "createdAt": "2020-11-23T05:59:50Z", "author": {"login": "hddong"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java", "diffHunk": "@@ -172,49 +173,38 @@ public String showCommits(\n     return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, allCommits);\n   }\n \n-  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n+  private Comparable[] commitDetail(GenericRecord record, String metadataName,\n+                                    boolean skipMetadata) {\n     List<Object> commitDetails = new ArrayList<>();\n+    commitDetails.add(record.get(\"commitTime\"));\n+    commitDetails.add(record.get(\"actionType\").toString());\n+    if (!skipMetadata) {\n+      commitDetails.add(Option.ofNullable(record.get(metadataName)).orElse(\"{}\").toString());\n+    }\n+    return commitDetails.toArray(new Comparable[commitDetails.size()]);\n+  }\n+\n+  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n     try {\n       switch (record.get(\"actionType\").toString()) {\n-        case HoodieTimeline.CLEAN_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCleanMetadata\").toString());\n-          }\n-          break;\n-        }\n+        case HoodieTimeline.CLEAN_ACTION:\n+          return commitDetail(record, \"hoodieCleanMetadata\", skipMetadata);\n         case HoodieTimeline.COMMIT_ACTION:\n-        case HoodieTimeline.DELTA_COMMIT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCommitMetadata\").toString());\n-          }\n-          break;\n-        }\n-        case HoodieTimeline.ROLLBACK_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieRollbackMetadata\").toString());\n-          }\n-          break;\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          return commitDetail(record, \"hoodieCommitMetadata\", skipMetadata);\n+        case HoodieTimeline.ROLLBACK_ACTION:\n+          return commitDetail(record, \"hoodieRollbackMetadata\", skipMetadata);\n+        case HoodieTimeline.SAVEPOINT_ACTION:\n+          return commitDetail(record, \"hoodieSavePointMetadata\", skipMetadata);\n+        case HoodieTimeline.COMPACTION_ACTION:\n+          return commitDetail(record, \"hoodieCompactionMetadata\", skipMetadata);\n+        default: {\n+          return new Comparable[]{};\n         }\n-        case HoodieTimeline.SAVEPOINT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieSavePointMetadata\").toString());\n-          }\n-          break;\n-        }\n-        default:\n-          return commitDetails.toArray(new Comparable[commitDetails.size()]);\n       }\n     } catch (Exception e) {\n       e.printStackTrace();\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3OTUyOQ=="}, "originalCommit": {"oid": "47778897fbd46f552bc029a942b42df1cae72796"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4NjYwNA==", "bodyText": "@wangxianghu : yes, empty is better here.\n\n@hddong thanks for addressing my concern, LGTM now\ncc @yanghua", "url": "https://github.com/apache/hudi/pull/2246#discussion_r528486604", "createdAt": "2020-11-23T06:10:37Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java", "diffHunk": "@@ -172,49 +173,38 @@ public String showCommits(\n     return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, allCommits);\n   }\n \n-  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n+  private Comparable[] commitDetail(GenericRecord record, String metadataName,\n+                                    boolean skipMetadata) {\n     List<Object> commitDetails = new ArrayList<>();\n+    commitDetails.add(record.get(\"commitTime\"));\n+    commitDetails.add(record.get(\"actionType\").toString());\n+    if (!skipMetadata) {\n+      commitDetails.add(Option.ofNullable(record.get(metadataName)).orElse(\"{}\").toString());\n+    }\n+    return commitDetails.toArray(new Comparable[commitDetails.size()]);\n+  }\n+\n+  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n     try {\n       switch (record.get(\"actionType\").toString()) {\n-        case HoodieTimeline.CLEAN_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCleanMetadata\").toString());\n-          }\n-          break;\n-        }\n+        case HoodieTimeline.CLEAN_ACTION:\n+          return commitDetail(record, \"hoodieCleanMetadata\", skipMetadata);\n         case HoodieTimeline.COMMIT_ACTION:\n-        case HoodieTimeline.DELTA_COMMIT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCommitMetadata\").toString());\n-          }\n-          break;\n-        }\n-        case HoodieTimeline.ROLLBACK_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieRollbackMetadata\").toString());\n-          }\n-          break;\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          return commitDetail(record, \"hoodieCommitMetadata\", skipMetadata);\n+        case HoodieTimeline.ROLLBACK_ACTION:\n+          return commitDetail(record, \"hoodieRollbackMetadata\", skipMetadata);\n+        case HoodieTimeline.SAVEPOINT_ACTION:\n+          return commitDetail(record, \"hoodieSavePointMetadata\", skipMetadata);\n+        case HoodieTimeline.COMPACTION_ACTION:\n+          return commitDetail(record, \"hoodieCompactionMetadata\", skipMetadata);\n+        default: {\n+          return new Comparable[]{};\n         }\n-        case HoodieTimeline.SAVEPOINT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieSavePointMetadata\").toString());\n-          }\n-          break;\n-        }\n-        default:\n-          return commitDetails.toArray(new Comparable[commitDetails.size()]);\n       }\n     } catch (Exception e) {\n       e.printStackTrace();\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3OTUyOQ=="}, "originalCommit": {"oid": "47778897fbd46f552bc029a942b42df1cae72796"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4160, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}