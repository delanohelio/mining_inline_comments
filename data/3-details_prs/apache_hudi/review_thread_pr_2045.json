{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MzcwODM5", "number": 2045, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo0MzoyNFrOEiz99Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo1NDoyNFrOEi0Apg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTM4NDg1OnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo0MzoyNFrOHQ3r4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo0MzoyNFrOHQ3r4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTYxOA==", "bodyText": "could you revert these diffs please? seems unnecessary changes", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487451618", "createdAt": "2020-09-12T21:43:24Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java", "diffHunk": "@@ -93,14 +93,15 @@ public DeltaGenerator(DeltaConfig deltaOutputConfig, JavaSparkContext jsc, Spark\n   }\n \n   public JavaRDD<GenericRecord> generateInserts(Config operation) {\n-    long recordsPerPartition = operation.getNumRecordsInsert();\n     int numPartitions = operation.getNumInsertPartitions();\n+    long recordsPerPartition = operation.getNumRecordsInsert();\n     int minPayloadSize = operation.getRecordSize();\n     JavaRDD<GenericRecord> inputBatch = jsc.parallelize(Collections.EMPTY_LIST)\n         .repartition(operation.getNumInsertPartitions()).mapPartitions(p -> {\n           return new LazyRecordGeneratorIterator(new FlexibleSchemaRecordGenerationIterator(recordsPerPartition,\n             minPayloadSize, schemaStr, partitionPathFieldNames, numPartitions));\n-        });\n+\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTM4NjQ3OnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo0NjowMFrOHQ3smw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo0NjowMFrOHQ3smw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n          \n          \n            \n              private static final Logger LOG = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487451803", "createdAt": "2020-09-12T21:46:00Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -45,14 +45,16 @@\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n+  private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTM4OTcyOnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo1MDo1N1rOHQ3uDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowOTozN1rOHp3T7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE3Mg==", "bodyText": "can we change this to junit 5 APIs? also to reduce verbosity, could we static import the assertion functions?", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487452172", "createdAt": "2020-09-12T21:50:57Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java", "diffHunk": "@@ -25,11 +25,13 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.IntStream;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericRecord;\n import org.apache.hudi.avro.HoodieAvroUtils;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1OTg4Ng==", "bodyText": "+1", "url": "https://github.com/apache/hudi/pull/2045#discussion_r513659886", "createdAt": "2020-10-28T18:09:37Z", "author": {"login": "nsivabalan"}, "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java", "diffHunk": "@@ -25,11 +25,13 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.IntStream;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericRecord;\n import org.apache.hudi.avro.HoodieAvroUtils;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE3Mg=="}, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTM5MTc0OnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMTo1NDoyNFrOHQ3u7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowNjo1NVrOHp3NbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ==", "bodyText": "looks like this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0 deserves to be a local boolean variable with a good name to improve readability.\nAlso can we avoid unnecessary this. references?", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487452399", "createdAt": "2020-09-12T21:54:24Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "diffHunk": "@@ -60,11 +60,16 @@ public boolean hasNext() {\n   public GenericRecord next() {\n     this.counter--;\n     if (lastRecord == null) {\n-      GenericRecord record = this.generator.getNewPayload();\n+      GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n-      return this.generator.randomize(lastRecord, this.partitionPathFieldNames);\n+      return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n+          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2NTQ2OA==", "bodyText": "is it possible make sure partitionPathFieldNames not null so that we don't have to do null check here?", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487465468", "createdAt": "2020-09-13T00:59:43Z", "author": {"login": "xushiyan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "diffHunk": "@@ -60,11 +60,16 @@ public boolean hasNext() {\n   public GenericRecord next() {\n     this.counter--;\n     if (lastRecord == null) {\n-      GenericRecord record = this.generator.getNewPayload();\n+      GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n-      return this.generator.randomize(lastRecord, this.partitionPathFieldNames);\n+      return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n+          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ=="}, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODIyMA==", "bodyText": "+1", "url": "https://github.com/apache/hudi/pull/2045#discussion_r513658220", "createdAt": "2020-10-28T18:06:55Z", "author": {"login": "nsivabalan"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "diffHunk": "@@ -60,11 +60,16 @@ public boolean hasNext() {\n   public GenericRecord next() {\n     this.counter--;\n     if (lastRecord == null) {\n-      GenericRecord record = this.generator.getNewPayload();\n+      GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n-      return this.generator.randomize(lastRecord, this.partitionPathFieldNames);\n+      return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n+          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ=="}, "originalCommit": {"oid": "666d71d5f06719e167d8bc1ec829771ae5929985"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4250, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}