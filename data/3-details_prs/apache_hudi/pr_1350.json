{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjI5ODk4", "number": 1350, "title": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nReplace Guava's Hashing call with equivalent.\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-02-22T20:45:33Z", "url": "https://github.com/apache/hudi/pull/1350", "merged": true, "mergeCommit": {"oid": "99b7e9eb9ef8827c1e06b7e8621b6be6403b061e"}, "closed": true, "closedAt": "2020-03-14T00:28:06Z", "author": {"login": "smarthi"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcG6powABqjMwNjI5NzI0NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO3m-HAFqTM3NDc3MjA2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDYxMjYy", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-363061262", "createdAt": "2020-02-23T02:12:34Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMjoxMjozNFrOFtN22Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMjoxMjozNFrOFtN22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzI3Mw==", "bodyText": "How about adding checkState to ValidationUtils?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382957273", "createdAt": "2020-02-23T02:12:34Z", "author": {"login": "leesf"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/minicluster/HdfsTestService.java", "diffHunk": "@@ -66,7 +66,7 @@ public Configuration getHadoopConf() {\n   }\n \n   public MiniDFSCluster start(boolean format) throws IOException {\n-    Preconditions.checkState(workDir != null, \"The work dir must be set before starting cluster.\");\n+    Objects.requireNonNull(workDir, \"The work dir must be set before starting cluster.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDYxMjg3", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-363061287", "createdAt": "2020-02-23T02:13:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMjoxMzozM1rOFtN3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMjoxMzozM1rOFtN3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzMxMw==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382957313", "createdAt": "2020-02-23T02:13:33Z", "author": {"login": "leesf"}, "path": "hudi-hive/src/test/java/org/apache/hudi/hive/util/HiveTestService.java", "diffHunk": "@@ -87,7 +87,7 @@ public Configuration getHadoopConf() {\n   }\n \n   public HiveServer2 start() throws IOException {\n-    Preconditions.checkState(workDir != null, \"The work dir must be set before starting cluster.\");\n+    Objects.requireNonNull(workDir, \"The work dir must be set before starting cluster.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDYxNDM0", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-363061434", "createdAt": "2020-02-23T02:17:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMjoxNzozN1rOFtN3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMjoxNzozN1rOFtN3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzUwMw==", "bodyText": "How about removing the LOGGER and throwing exception here? though Objects.requireNonNull(md) would also throw exception if md is null.", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382957503", "createdAt": "2020-02-23T02:17:37Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +41,28 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md = null;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      LOGGER.error(\"Invalid Algorithm Specified: {}\", algorithmName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjQ5ODkx", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-364649891", "createdAt": "2020-02-26T06:33:57Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjozMzo1N1rOFufoNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjozMzo1N1rOFufoNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NzAxMw==", "bodyText": "Can we put this back the original place?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r384297013", "createdAt": "2020-02-26T06:33:57Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/main/java/org/apache/hudi/io/compact/HoodieMergeOnReadTableCompactor.java", "diffHunk": "@@ -18,6 +18,7 @@\n \n package org.apache.hudi.io.compact;\n \n+import com.google.common.collect.Sets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDY5NDQz", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-374069443", "createdAt": "2020-03-13T06:15:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjoxNToxMFrOF14pmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjoxODozNFrOF14s8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0NzAwMw==", "bodyText": "can we move this try-catch block to a method for reuse?  Also let's have that throw a HoodieRuntimeException instead of logging the error.. we cannot really make reasonable progress otherwise..  ?\nShould we change from MD5 to something else? We are not doing anything secure here.. just want something that will give good uniform hashing", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392047003", "createdAt": "2020-03-13T06:15:10Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/BucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -144,7 +144,12 @@ public int numPartitions() {\n   @Override\n   public int getPartition(Object key) {\n     final Pair<String, String> parts = (Pair<String, String>) key;\n-    final long hashOfKey = Hashing.md5().hashString(parts.getRight(), StandardCharsets.UTF_8).asLong();\n+    long hashOfKey = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0NzA1NQ==", "bodyText": "same here.. new method?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392047055", "createdAt": "2020-03-13T06:15:25Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieCopyOnWriteTable.java", "diffHunk": "@@ -732,8 +732,12 @@ public int getPartition(Object key) {\n         // pick the target bucket to use based on the weights.\n         double totalWeight = 0.0;\n         final long totalInserts = Math.max(1, globalStat.getNumInserts());\n-        final long hashOfKey =\n-            Hashing.md5().hashString(keyLocation._1().getRecordKey(), StandardCharsets.UTF_8).asLong();\n+        long hashOfKey = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0Nzg1Ng==", "bodyText": "nit: remove extra newline?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392047856", "createdAt": "2020-03-13T06:18:34Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/HoodieTableFileSystemView.java", "diffHunk": "@@ -142,7 +142,7 @@ protected void resetPendingCompactionOperations(Stream<Pair<String, CompactionOp\n   @Override\n   protected void addPendingCompactionOperations(Stream<Pair<String, CompactionOperation>> operations) {\n     operations.forEach(opInstantPair -> {\n-      Preconditions.checkArgument(!fgIdToPendingCompaction.containsKey(opInstantPair.getValue().getFileGroupId()),\n+      ValidationUtils.checkArgument(!fgIdToPendingCompaction.containsKey(opInstantPair.getValue().getFileGroupId()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "903224d0b3b2968905efba40309522f8cead8f6f", "author": {"user": {"login": "smarthi", "name": "Suneel Marthi"}}, "url": "https://github.com/apache/hudi/commit/903224d0b3b2968905efba40309522f8cead8f6f", "committedDate": "2020-03-13T10:51:16Z", "message": "HUDI-"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NDIxOTA4", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-374421908", "createdAt": "2020-03-13T16:02:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjowMjoyN1rOF2JYGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjowNDozOFrOF2Jc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMTA0OA==", "bodyText": "combine return and bytes assignment lines?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392321048", "createdAt": "2020-03-13T16:02:27Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,28 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    byte[] bytes = Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMTg2Mg==", "bodyText": "if we assert that its larger than 8 bytes, do we have to pad?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392321862", "createdAt": "2020-03-13T16:03:57Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,28 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    byte[] bytes = Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8));\n+    return asLong(bytes);\n+  }\n+\n+  private static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes (it only has %s bytes).\");\n+    return padToLong(bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMjI3OQ==", "bodyText": "this should only be throwing HoodieException now?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392322279", "createdAt": "2020-03-13T16:04:38Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/util/TestNumericUtils.java", "diffHunk": "@@ -37,6 +40,13 @@ public void testHumanReadableByteCount() {\n     assertEquals(\"27.0 GB\", NumericUtils.humanReadableByteCount(28991029248L));\n     assertEquals(\"1.7 TB\", NumericUtils.humanReadableByteCount(1855425871872L));\n     assertEquals(\"8.0 EB\", NumericUtils.humanReadableByteCount(9223372036854775807L));\n+  }\n \n+  @Test\n+  public void testGetMessageDigestHash() throws NoSuchAlgorithmException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjQ0NjUx", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-374644651", "createdAt": "2020-03-13T22:06:50Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "author": {"user": {"login": "smarthi", "name": "Suneel Marthi"}}, "url": "https://github.com/apache/hudi/commit/ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "committedDate": "2020-03-13T23:58:34Z", "message": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "author": {"user": {"login": "smarthi", "name": "Suneel Marthi"}}, "url": "https://github.com/apache/hudi/commit/ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "committedDate": "2020-03-13T23:58:34Z", "message": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzcxOTg3", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-374771987", "createdAt": "2020-03-15T05:03:50Z", "commit": {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNTowMzo1MFrOF2c9sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNTowMzo1MFrOF2c9sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ==", "bodyText": "do we need & 0xFF ?\nwould it work if we do\nlong retVal = bytes[0] ?", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392641969", "createdAt": "2020-03-15T05:03:50Z", "author": {"login": "s-sanjay"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,27 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    return asLong(Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8)));\n+  }\n+\n+  public static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes.\");\n+    return padToLong(bytes);\n+  }\n+\n+  public static long padToLong(byte[] bytes) {\n+    long retVal = (bytes[0] & 0xFF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzcyMDY0", "url": "https://github.com/apache/hudi/pull/1350#pullrequestreview-374772064", "createdAt": "2020-03-15T05:06:34Z", "commit": {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNTowNjozNFrOF2c-GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNTowNjozNFrOF2c-GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjA3Mw==", "bodyText": "wondering instead of making this public, if we can make it private and then test the asLong method\nalso would it help in readability if we unroll the for loop like this ?\nbyte[] padded = Arrays.copyOf(bytes, 8);\nlong retVal =  padded[0]\nretVal |= (padded[1] << i * 8)\nretVal |= (padded[2] << i * 16)\nretVal |= (padded[3] << i * 24)\nretVal |= (padded[4] << i * 32)\nretVal |= (padded[5] << i * 40)\nretVal |= (padded[6] << i * 48)\nretVal |= (padded[7] << i * 56)", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392642073", "createdAt": "2020-03-15T05:06:34Z", "author": {"login": "s-sanjay"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,27 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    return asLong(Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8)));\n+  }\n+\n+  public static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes.\");\n+    return padToLong(bytes);\n+  }\n+\n+  public static long padToLong(byte[] bytes) {\n+    long retVal = (bytes[0] & 0xFF);\n+    for (int i = 1; i < Math.min(bytes.length, 8); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3645, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}