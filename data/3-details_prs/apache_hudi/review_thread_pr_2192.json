{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MjI2MTYx", "number": 2192, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNDoyMlrOE03JQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNzo1NlrOFAmz2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODY0ODk4OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNDoyMlrOHs0YLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNDoyMlrOHs0YLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1NzU1MQ==", "bodyText": "Can you reference the jira number as part of this class Javadoc so that developers would know why this class exist ?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516757551", "createdAt": "2020-11-03T15:34:22Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.schema;\n+\n+import org.apache.hudi.AvroConversionUtils;\n+import org.apache.hudi.common.config.TypedProperties;\n+\n+import org.apache.avro.Schema;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroPostProcessor extends SchemaPostProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODY2MTU5OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNjo1NFrOHs0f5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzoyMToxNlrOHxtVzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTUyNg==", "bodyText": "Can you add a check that post processed schema is different from original schema.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516759526", "createdAt": "2020-11-03T15:36:54Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -45,14 +50,32 @@ public void testPostProcessor() throws IOException {\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4NDM4MA==", "bodyText": "@liujinhui1994 : Rest looks good. Can you add a assertion to ensure the 2 schemas are different in this case", "url": "https://github.com/apache/hudi/pull/2192#discussion_r521884380", "createdAt": "2020-11-12T07:19:23Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -45,14 +50,32 @@ public void testPostProcessor() throws IOException {\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTUyNg=="}, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4NTEzMw==", "bodyText": "Ok i will handle it", "url": "https://github.com/apache/hudi/pull/2192#discussion_r521885133", "createdAt": "2020-11-12T07:21:16Z", "author": {"login": "liujinhui1994"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -45,14 +50,32 @@ public void testPostProcessor() throws IOException {\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTUyNg=="}, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODY2OTIyOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozODo0M1rOHs0k7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozODo0M1rOHs0k7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MDgxNA==", "bodyText": "I think it is safer to add a configuration (enabled by default) if users do not need this feature.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516760814", "createdAt": "2020-11-03T15:38:43Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -413,14 +414,19 @@ public static SchemaProviderWithPostProcessor wrapSchemaProviderWithPostProcesso\n     if (provider instanceof  SchemaProviderWithPostProcessor) {\n       return (SchemaProviderWithPostProcessor)provider;\n     }\n+\n     String schemaPostProcessorClass = cfg.getString(Config.SCHEMA_POST_PROCESSOR_PROP, null);\n+    if (transformerClassNames != null && !transformerClassNames.isEmpty() && StringUtils.isNullOrEmpty(schemaPostProcessorClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTc4OTYyOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/SparkAvroSchemaProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyMjo1NVrOH-_E7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNDo0NFrOH-_HQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzIxNQ==", "bodyText": "Does SparkAvroTestSchemaProvider look better?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807215", "createdAt": "2020-12-04T03:22:55Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/SparkAvroSchemaProvider.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroSchemaProvider extends SchemaProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzgwOA==", "bodyText": "Or define a static inner class in TestSchemaPostProcessor?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807808", "createdAt": "2020-12-04T03:24:44Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/SparkAvroSchemaProvider.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroSchemaProvider extends SchemaProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzIxNQ=="}, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTc5MTU0OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyMzo0NFrOH-_F7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyMzo0NFrOH-_F7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzQ2OQ==", "bodyText": "Please add a backspace before ,null.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807469", "createdAt": "2020-12-04T03:23:44Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTc5NzYxOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNjoxM1rOH-_JIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNjoxM1rOH-_JIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODI5MA==", "bodyText": "IMO, this naming is not good.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808290", "createdAt": "2020-12-04T03:26:13Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTc5OTg1OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNzowOVrOH-_KUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNzowOVrOH-_KUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODU5NA==", "bodyText": "WDYT about naming it to be testSparkAvroSchemaPostProcessor?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808594", "createdAt": "2020-12-04T03:27:09Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();\n+    assertEquals(schema.getType(), Type.RECORD);\n+    assertEquals(schema.getName(), \"hoodie_source\");\n+    assertEquals(schema.getNamespace(), \"hoodie.source\");\n+    assertNotNull(schema.getField(\"day\"));\n+  }\n+\n+  @Test\n+  public void testSparkAvroSchema() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTgwMTg1OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNzo1NlrOH-_LZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNzo1NlrOH-_LZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODg2OA==", "bodyText": "wrong place", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808868", "createdAt": "2020-12-04T03:27:56Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -22,15 +22,20 @@\n import org.apache.hudi.utilities.schema.SchemaPostProcessor;\n import org.apache.hudi.utilities.schema.SchemaPostProcessor.Config;\n import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.hudi.utilities.schema.SparkAvroPostProcessor;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n \n import org.apache.avro.Schema;\n import org.apache.avro.Schema.Type;\n import org.apache.avro.SchemaBuilder;\n+\n+import org.apache.hudi.utilities.transform.FlatteningTransformer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4112, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}