{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODk3OTMw", "number": 1769, "title": "[DOC] Add document for the use of metrics system in Hudi.", "bodyText": "What is the purpose of the pull request\n\nISSUEID: HUDI-983\nAdd document for the use of metrics system in Hudi. Add JmxMetricsReporter, MetricsGraphiteReporter and DatadogReporter.\nMove deployment#metrics to the new section.\n\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-06-27T11:21:09Z", "url": "https://github.com/apache/hudi/pull/1769", "merged": true, "mergeCommit": {"oid": "8cb5617d16a46ecae4432c520d7a5fe78fd71b2a"}, "closed": true, "closedAt": "2020-07-23T05:19:36Z", "author": {"login": "shenh062326"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxeSu1gFqTQ0MjU4MTU2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3ocp0gFqTQ1Mzg0MTEzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTgxNTYx", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-442581561", "createdAt": "2020-07-04T02:05:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODA4MTM4", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-446808138", "createdAt": "2020-07-11T15:01:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMTozM1rOGwNUyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMTozM1rOGwNUyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwMzE0NQ==", "bodyText": "will sets the Datadog API site, -> will set the Datadog API site.", "url": "https://github.com/apache/hudi/pull/1769#discussion_r453203145", "createdAt": "2020-07-11T15:01:33Z", "author": {"login": "leesf"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=GRAPHITE\n+  hoodie.metrics.graphite.host=192.168.0.106\n+  hoodie.metrics.graphite.port=2003\n+  hoodie.metrics.graphite.metric.prefix=<your metrics prefix>\n+  ```\n+#### Demo\n+As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.\n+  <figure>\n+      <img class=\"docimage\" src=\"/assets/images/hudi_graphite_metrics.png\" alt=\"hudi_graphite_metrics.png\" style=\"max-width: 100%\" />\n+  </figure>\n+\n+### DatadogMetricsReporter\n+\n+DatadogMetricsReporter is a implementation of Datadog reporter.\n+A reporter which publishes metric values to Datadog monitoring service via Datadog HTTP API.\n+\n+#### Configurations\n+The following is an example of configuration as Datadog. The detailed configuration can refer to [here](configurations.html#datadog).\n+\n+```properties\n+hoodie.metrics.on=true\n+hoodie.metrics.reporter.type=DATADOG\n+hoodie.metrics.datadog.api.site=EU # or US\n+hoodie.metrics.datadog.api.key=<your api key>\n+hoodie.metrics.datadog.metric.prefix=<your metrics prefix>\n+```\n+\n+ * `hoodie.metrics.datadog.api.site` will sets the Datadog API site, It determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODA4MTY5", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-446808169", "createdAt": "2020-07-11T15:02:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMjowM1rOGwNVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMjowM1rOGwNVAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwMzIwMg==", "bodyText": "will set set the api key. -> will set the api key.", "url": "https://github.com/apache/hudi/pull/1769#discussion_r453203202", "createdAt": "2020-07-11T15:02:03Z", "author": {"login": "leesf"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=GRAPHITE\n+  hoodie.metrics.graphite.host=192.168.0.106\n+  hoodie.metrics.graphite.port=2003\n+  hoodie.metrics.graphite.metric.prefix=<your metrics prefix>\n+  ```\n+#### Demo\n+As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.\n+  <figure>\n+      <img class=\"docimage\" src=\"/assets/images/hudi_graphite_metrics.png\" alt=\"hudi_graphite_metrics.png\" style=\"max-width: 100%\" />\n+  </figure>\n+\n+### DatadogMetricsReporter\n+\n+DatadogMetricsReporter is a implementation of Datadog reporter.\n+A reporter which publishes metric values to Datadog monitoring service via Datadog HTTP API.\n+\n+#### Configurations\n+The following is an example of configuration as Datadog. The detailed configuration can refer to [here](configurations.html#datadog).\n+\n+```properties\n+hoodie.metrics.on=true\n+hoodie.metrics.reporter.type=DATADOG\n+hoodie.metrics.datadog.api.site=EU # or US\n+hoodie.metrics.datadog.api.key=<your api key>\n+hoodie.metrics.datadog.metric.prefix=<your metrics prefix>\n+```\n+\n+ * `hoodie.metrics.datadog.api.site` will sets the Datadog API site, It determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.\n+ * `hoodie.metrics.datadog.api.key` will set set the api key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODA4MTky", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-446808192", "createdAt": "2020-07-11T15:02:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMjoyOFrOGwNVMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMjoyOFrOGwNVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwMzI1MA==", "bodyText": "helps -> help  and one blank before Note that", "url": "https://github.com/apache/hudi/pull/1769#discussion_r453203250", "createdAt": "2020-07-11T15:02:28Z", "author": {"login": "leesf"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=GRAPHITE\n+  hoodie.metrics.graphite.host=192.168.0.106\n+  hoodie.metrics.graphite.port=2003\n+  hoodie.metrics.graphite.metric.prefix=<your metrics prefix>\n+  ```\n+#### Demo\n+As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.\n+  <figure>\n+      <img class=\"docimage\" src=\"/assets/images/hudi_graphite_metrics.png\" alt=\"hudi_graphite_metrics.png\" style=\"max-width: 100%\" />\n+  </figure>\n+\n+### DatadogMetricsReporter\n+\n+DatadogMetricsReporter is a implementation of Datadog reporter.\n+A reporter which publishes metric values to Datadog monitoring service via Datadog HTTP API.\n+\n+#### Configurations\n+The following is an example of configuration as Datadog. The detailed configuration can refer to [here](configurations.html#datadog).\n+\n+```properties\n+hoodie.metrics.on=true\n+hoodie.metrics.reporter.type=DATADOG\n+hoodie.metrics.datadog.api.site=EU # or US\n+hoodie.metrics.datadog.api.key=<your api key>\n+hoodie.metrics.datadog.metric.prefix=<your metrics prefix>\n+```\n+\n+ * `hoodie.metrics.datadog.api.site` will sets the Datadog API site, It determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.\n+ * `hoodie.metrics.datadog.api.key` will set set the api key.\n+ * `hoodie.metrics.datadog.metric.prefix` will helps segregate metrics by setting different prefixes for different jobs.Note that it will use `.` to delimit the prefix and the metric name. For example, if the prefix is set to foo, then foo. will be prepended to the metric name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODA4Mjkx", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-446808291", "createdAt": "2020-07-11T15:03:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMzo1OVrOGwNVmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTowMzo1OVrOGwNVmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwMzM1NQ==", "bodyText": "turn on -> turned on", "url": "https://github.com/apache/hudi/pull/1769#discussion_r453203355", "createdAt": "2020-07-11T15:03:59Z", "author": {"login": "leesf"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=GRAPHITE\n+  hoodie.metrics.graphite.host=192.168.0.106\n+  hoodie.metrics.graphite.port=2003\n+  hoodie.metrics.graphite.metric.prefix=<your metrics prefix>\n+  ```\n+#### Demo\n+As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.\n+  <figure>\n+      <img class=\"docimage\" src=\"/assets/images/hudi_graphite_metrics.png\" alt=\"hudi_graphite_metrics.png\" style=\"max-width: 100%\" />\n+  </figure>\n+\n+### DatadogMetricsReporter\n+\n+DatadogMetricsReporter is a implementation of Datadog reporter.\n+A reporter which publishes metric values to Datadog monitoring service via Datadog HTTP API.\n+\n+#### Configurations\n+The following is an example of configuration as Datadog. The detailed configuration can refer to [here](configurations.html#datadog).\n+\n+```properties\n+hoodie.metrics.on=true\n+hoodie.metrics.reporter.type=DATADOG\n+hoodie.metrics.datadog.api.site=EU # or US\n+hoodie.metrics.datadog.api.key=<your api key>\n+hoodie.metrics.datadog.metric.prefix=<your metrics prefix>\n+```\n+\n+ * `hoodie.metrics.datadog.api.site` will sets the Datadog API site, It determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.\n+ * `hoodie.metrics.datadog.api.key` will set set the api key.\n+ * `hoodie.metrics.datadog.metric.prefix` will helps segregate metrics by setting different prefixes for different jobs.Note that it will use `.` to delimit the prefix and the metric name. For example, if the prefix is set to foo, then foo. will be prepended to the metric name.\n+\n+#### Demo\n+In this demo, we ran a `HoodieDeltaStreamer` job with metrics turn on and other configurations set properly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODA4MzU5", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-446808359", "createdAt": "2020-07-11T15:05:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDQ1NjUy", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-451045652", "createdAt": "2020-07-18T09:45:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwOTo0NTo1OVrOGznKtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxMDoxODoyOVrOGznU5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MjI3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n          \n          \n            \n            In this section, we will introduce `HoodieMetrics` and `MetricsReporter` in Hudi. You can view the metrics-related configurations [here](configurations.html#metrics-configs).", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456772276", "createdAt": "2020-07-18T09:45:59Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MjU4MA==", "bodyText": "configured with the right table and environment for metrics\n\nDo you think it'll be clearer to illustrate how to achieve this before moving on to the followings?", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456772580", "createdAt": "2020-07-18T09:49:48Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3Mjc2MQ==", "bodyText": "produces the following graphite metrics\n\nWhy is it graphite metrics? this is implementation-agnostic metrics right?", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456772761", "createdAt": "2020-07-18T09:51:59Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MjU4MA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MzI3MA==", "bodyText": "you meant to introduce HoodieMetrics right?", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456773270", "createdAt": "2020-07-18T09:58:29Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MjI3Ng=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MzMyNw==", "bodyText": "Did you mean to introduce HoodieMetrics ? if so, please align on the class name for the section", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456773327", "createdAt": "2020-07-18T09:59:09Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MzQ4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n          \n          \n            \n             - **Commit Duration** - the amount of time it took to successfully commit a batch of records", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456773481", "createdAt": "2020-07-18T10:00:54Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MzU4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n          \n          \n            \n             - **Rollback Duration** - Similarly, the amount of time taken to undo partial data left over by a failed commit (rollback happens automatically after a failing write)", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456773589", "createdAt": "2020-07-18T10:02:07Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3Mzg1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * `hoodie.metrics.datadog.api.site` will set the Datadog API site, It determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.\n          \n          \n            \n             * `hoodie.metrics.datadog.api.site` will set the Datadog API site, which determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456773853", "createdAt": "2020-07-18T10:05:11Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=GRAPHITE\n+  hoodie.metrics.graphite.host=192.168.0.106\n+  hoodie.metrics.graphite.port=2003\n+  hoodie.metrics.graphite.metric.prefix=<your metrics prefix>\n+  ```\n+#### Demo\n+As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.\n+  <figure>\n+      <img class=\"docimage\" src=\"/assets/images/hudi_graphite_metrics.png\" alt=\"hudi_graphite_metrics.png\" style=\"max-width: 100%\" />\n+  </figure>\n+\n+### DatadogMetricsReporter\n+\n+DatadogMetricsReporter is a implementation of Datadog reporter.\n+A reporter which publishes metric values to Datadog monitoring service via Datadog HTTP API.\n+\n+#### Configurations\n+The following is an example of configuration as Datadog. The detailed configuration can refer to [here](configurations.html#datadog).\n+\n+```properties\n+hoodie.metrics.on=true\n+hoodie.metrics.reporter.type=DATADOG\n+hoodie.metrics.datadog.api.site=EU # or US\n+hoodie.metrics.datadog.api.key=<your api key>\n+hoodie.metrics.datadog.metric.prefix=<your metrics prefix>\n+```\n+\n+ * `hoodie.metrics.datadog.api.site` will set the Datadog API site, It determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MzkzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * `hoodie.metrics.datadog.metric.prefix` will help segregate metrics by setting different prefixes for different jobs.Note that it will use `.` to delimit the prefix and the metric name. For example, if the prefix is set to foo, then foo. will be prepended to the metric name.\n          \n          \n            \n             * `hoodie.metrics.datadog.metric.prefix` will help segregate metrics by setting different prefixes for different jobs. Note that it will use `.` to delimit the prefix and the metric name. For example, if the prefix is set to `foo`, then `foo.` will be prepended to the metric name.", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456773930", "createdAt": "2020-07-18T10:06:04Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=GRAPHITE\n+  hoodie.metrics.graphite.host=192.168.0.106\n+  hoodie.metrics.graphite.port=2003\n+  hoodie.metrics.graphite.metric.prefix=<your metrics prefix>\n+  ```\n+#### Demo\n+As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.\n+  <figure>\n+      <img class=\"docimage\" src=\"/assets/images/hudi_graphite_metrics.png\" alt=\"hudi_graphite_metrics.png\" style=\"max-width: 100%\" />\n+  </figure>\n+\n+### DatadogMetricsReporter\n+\n+DatadogMetricsReporter is a implementation of Datadog reporter.\n+A reporter which publishes metric values to Datadog monitoring service via Datadog HTTP API.\n+\n+#### Configurations\n+The following is an example of configuration as Datadog. The detailed configuration can refer to [here](configurations.html#datadog).\n+\n+```properties\n+hoodie.metrics.on=true\n+hoodie.metrics.reporter.type=DATADOG\n+hoodie.metrics.datadog.api.site=EU # or US\n+hoodie.metrics.datadog.api.key=<your api key>\n+hoodie.metrics.datadog.metric.prefix=<your metrics prefix>\n+```\n+\n+ * `hoodie.metrics.datadog.api.site` will set the Datadog API site, It determines whether the requests will be sent to api.datadoghq.eu (EU) or api.datadoghq.com (US). Set this according to your Datadog account settings.\n+ * `hoodie.metrics.datadog.api.key` will set the api key.\n+ * `hoodie.metrics.datadog.metric.prefix` will help segregate metrics by setting different prefixes for different jobs.Note that it will use `.` to delimit the prefix and the metric name. For example, if the prefix is set to foo, then foo. will be prepended to the metric name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3NDA1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n          \n          \n            \n            MetricsGraphiteReporter is an implementation of Graphite reporter, which connects to a Graphite server and send metrics to it.", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456774052", "createdAt": "2020-07-18T10:07:55Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3NDE1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n          \n          \n            \n            The following is an example of `MetricsGraphiteReporter`. More detailed configurations can be referenced [here](configurations.html#graphite).", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456774158", "createdAt": "2020-07-18T10:09:15Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3NDcwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.\n          \n          \n            \n            As configured above, assuming a Graphite server is running on host 192.168.0.106 and port 2003, a running Hudi job will connect and report metrics data to it. Below is an illustration of monitoring Hudi metrics through Graphite.", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456774700", "createdAt": "2020-07-18T10:15:51Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n+\n+### JmxMetricsReporter\n+\n+JmxMetricsReporter is a implementation of Jmx reporter, which used to report jmx metric.\n+\n+#### Configurations\n+The following is an example of configuration as JXM. The detailed configuration can refer to [here](configurations.html#jmx).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=JMX\n+  hoodie.metrics.jmx.host=192.168.0.106\n+  hoodie.metrics.jmx.port=4001\n+  ```\n+\n+#### Demo\n+As configuration above, Hudi metrics will started JMX server on port 4001. Then we can start jconsole to connect to 192.168.0.106:4001. Below is a sample of monitoring hudi jmx metrics through jconsole.\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_jxm_metrics.png\" alt=\"hudi_jxm_metrics.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+### MetricsGraphiteReporter\n+\n+MetricsGraphiteReporter is a implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.\n+\n+#### Configurations\n+The following is an example of configuration as GRAPHITE. The detailed configuration can refer to [here](configurations.html#graphite).\n+\n+  ```properties\n+  hoodie.metrics.on=true\n+  hoodie.metrics.reporter.type=GRAPHITE\n+  hoodie.metrics.graphite.host=192.168.0.106\n+  hoodie.metrics.graphite.port=2003\n+  hoodie.metrics.graphite.metric.prefix=<your metrics prefix>\n+  ```\n+#### Demo\n+As configuration above, we should first start graphite server on host 192.168.0.106 and port 2003, Hudi metrics will connect to graphite server, and report Hudi metrics to graphite server. Below is a sample of monitoring hudi metrics through graphite.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3NDg4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.\n          \n          \n            \n            MetricsReporter provides APIs for reporting metrics to user-specified backends. Currently, the implementations include InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.", "url": "https://github.com/apache/hudi/pull/1769#discussion_r456774886", "createdAt": "2020-07-18T10:18:29Z", "author": {"login": "xushiyan"}, "path": "docs/_docs/2_8_metrics.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Metrics Guide\n+keywords: hudi, administration, operation, devops, metrics\n+permalink: /docs/metrics.html\n+summary: This section offers an overview of metrics in Hudi\n+toc: true\n+last_modified_at: 2020-06-20T15:59:57-04:00\n+---\n+\n+In this section, We will introduce the metrics and metricsReporter in Hudi. You can view the metrics configuration [here](configurations.html#metrics-configs).\n+\n+## Metrics\n+\n+Once the Hudi writer is configured with the right table and environment for metrics, it produces the following graphite metrics, that aid in debugging hudi tables\n+\n+ - **Commit Duration** - This is amount of time it took to successfully commit a batch of records\n+ - **Rollback Duration** - Similarly, amount of time taken to undo partial data left over by a failed commit (happens everytime automatically after a failing write)\n+ - **File Level metrics** - Shows the amount of new files added, versions, deleted (cleaned) in each commit\n+ - **Record Level Metrics** - Total records inserted/updated etc per commit\n+ - **Partition Level metrics** - number of partitions upserted (super useful to understand sudden spikes in commit duration)\n+\n+These metrics can then be plotted on a standard tool like grafana. Below is a sample commit duration chart.\n+\n+<figure>\n+    <img class=\"docimage\" src=\"/assets/images/hudi_commit_duration.png\" alt=\"hudi_commit_duration.png\" style=\"max-width: 100%\" />\n+</figure>\n+\n+## MetricsReporter\n+\n+MetricsReporter is a interface for report metrics to user specified place. Currently, it's implementations has InMemoryMetricsReporter, JmxMetricsReporter, MetricsGraphiteReporter and DatadogMetricsReporter. Since InMemoryMetricsReporter is only used for testing, we will introduce the other three implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b6d2c8ceae45c32897b3f5189d305bd9257a4e4", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/8b6d2c8ceae45c32897b3f5189d305bd9257a4e4", "committedDate": "2020-07-19T05:28:33Z", "message": "[DOC] Add document for the use of metrics system in Hudi."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "8b6d2c8ceae45c32897b3f5189d305bd9257a4e4", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/8b6d2c8ceae45c32897b3f5189d305bd9257a4e4", "committedDate": "2020-07-19T05:28:33Z", "message": "[DOC] Add document for the use of metrics system in Hudi."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTUwODY5", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-451150869", "createdAt": "2020-07-19T17:53:15Z", "commit": {"oid": "8b6d2c8ceae45c32897b3f5189d305bd9257a4e4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODQxMTMy", "url": "https://github.com/apache/hudi/pull/1769#pullrequestreview-453841132", "createdAt": "2020-07-23T05:19:25Z", "commit": {"oid": "8b6d2c8ceae45c32897b3f5189d305bd9257a4e4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2870, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}