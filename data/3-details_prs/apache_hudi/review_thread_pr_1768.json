{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODQyMzA0", "number": 1768, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwODo0ODo0OFrOEJVIRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDoyNVrOETrflA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjE4ODIxOnYy", "diffSide": "RIGHT", "path": "hudi-common/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwODo0ODo0OFrOGp0XOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjoyOVrOGq3DcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMjcxNQ==", "bodyText": "hudi-common is a base module and feels a little weird that it relies on spark-core/spark-sql, would we remove them and move getAllDataFilesForMarkers method to hudi-client module, wdyt? cc @bvaradar @vinothchandar", "url": "https://github.com/apache/hudi/pull/1768#discussion_r446502715", "createdAt": "2020-06-27T08:48:48Z", "author": {"login": "leesf"}, "path": "hudi-common/pom.xml", "diffHunk": "@@ -147,6 +147,16 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <!-- Spark -->\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-core_${scala.binary.version}</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-sql_${scala.binary.version}</artifactId>\n+    </dependency>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMTM1MQ==", "bodyText": "yes.. we cannot depend on spark in hudi-common", "url": "https://github.com/apache/hudi/pull/1768#discussion_r446621351", "createdAt": "2020-06-28T08:48:12Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/pom.xml", "diffHunk": "@@ -147,6 +147,16 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <!-- Spark -->\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-core_${scala.binary.version}</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-sql_${scala.binary.version}</artifactId>\n+    </dependency>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMjcxNQ=="}, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NDI2Mg==", "bodyText": "Okay so is the suggestion to move this method over to HoodieTable in hudi-client module, considering that is the only place this method is used ?", "url": "https://github.com/apache/hudi/pull/1768#discussion_r447264262", "createdAt": "2020-06-29T21:27:26Z", "author": {"login": "umehrot2"}, "path": "hudi-common/pom.xml", "diffHunk": "@@ -147,6 +147,16 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <!-- Spark -->\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-core_${scala.binary.version}</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-sql_${scala.binary.version}</artifactId>\n+    </dependency>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMjcxNQ=="}, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTM3Ng==", "bodyText": "yes.. that ll do..", "url": "https://github.com/apache/hudi/pull/1768#discussion_r447595376", "createdAt": "2020-06-30T10:56:29Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/pom.xml", "diffHunk": "@@ -147,6 +147,16 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <!-- Spark -->\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-core_${scala.binary.version}</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.spark</groupId>\n+      <artifactId>spark-sql_${scala.binary.version}</artifactId>\n+    </dependency>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMjcxNQ=="}, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzE5MDcyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwODo1NToxOVrOGp7qbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwODo1NToxOVrOGp7qbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMjMxNw==", "bodyText": "i think this is the reason for needing spark in hudi-common.. we can move refactor the code to hudi-client..\nIn fact, #1755  has already modularized this more..", "url": "https://github.com/apache/hudi/pull/1768#discussion_r446622317", "createdAt": "2020-06-28T08:55:19Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java", "diffHunk": "@@ -199,16 +201,40 @@ public static String getRelativePartitionPath(Path basePath, Path partitionPath)\n     return partitions;\n   }\n \n-  public static List<String> getAllDataFilesForMarkers(FileSystem fs, String basePath, String instantTs,\n-      String markerDir, String baseFileExtension) throws IOException {\n-    List<String> dataFiles = new LinkedList<>();\n-    processFiles(fs, markerDir, (status) -> {\n-      String pathStr = status.getPath().toString();\n-      if (pathStr.endsWith(HoodieTableMetaClient.MARKER_EXTN)) {\n-        dataFiles.add(FSUtils.translateMarkerToDataPath(basePath, pathStr, instantTs, baseFileExtension));\n+  public static Set<String> getAllDataFilesForMarkers(JavaSparkContext jsc, FileSystem fs, String basePath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzE5Mjc0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwODo1NjozOVrOGp7rVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjowMDo0OFrOGyS0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMjU1MQ==", "bodyText": "@umehrot2 so seems like, for object stores this is different..  and makes sense completely to do parallel cleaning of individual files.", "url": "https://github.com/apache/hudi/pull/1768#discussion_r446622551", "createdAt": "2020-06-28T08:56:39Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "diffHunk": "@@ -386,13 +389,26 @@ public void finalizeWrite(JavaSparkContext jsc, String instantTs, List<HoodieWri\n    *\n    * @param instantTs Instant Time\n    */\n-  public void deleteMarkerDir(String instantTs) {\n+  public void deleteMarkerDir(JavaSparkContext jsc, String instantTs) {\n     try {\n       FileSystem fs = getMetaClient().getFs();\n       Path markerDir = new Path(metaClient.getMarkerFolderPath(instantTs));\n+\n       if (fs.exists(markerDir)) {\n         // For append only case, we do not write to marker dir. Hence, the above check\n-        LOG.info(\"Removing marker directory=\" + markerDir);\n+        LOG.info(\"Removing marker directory = \" + markerDir);\n+\n+        FileStatus[] fileStatuses = fs.listStatus(markerDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMjgwOA==", "bodyText": "cc @n3nash should we have flag to protect this for HDFS.. i.e if the recursive delete works better there (IIUC). you might want to tradeoff less RPCs ..?\nwe can override defaults at spark datasource level, and set these based on StorageSchemes as well.", "url": "https://github.com/apache/hudi/pull/1768#discussion_r446622808", "createdAt": "2020-06-28T08:58:15Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "diffHunk": "@@ -386,13 +389,26 @@ public void finalizeWrite(JavaSparkContext jsc, String instantTs, List<HoodieWri\n    *\n    * @param instantTs Instant Time\n    */\n-  public void deleteMarkerDir(String instantTs) {\n+  public void deleteMarkerDir(JavaSparkContext jsc, String instantTs) {\n     try {\n       FileSystem fs = getMetaClient().getFs();\n       Path markerDir = new Path(metaClient.getMarkerFolderPath(instantTs));\n+\n       if (fs.exists(markerDir)) {\n         // For append only case, we do not write to marker dir. Hence, the above check\n-        LOG.info(\"Removing marker directory=\" + markerDir);\n+        LOG.info(\"Removing marker directory = \" + markerDir);\n+\n+        FileStatus[] fileStatuses = fs.listStatus(markerDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMjU1MQ=="}, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5MDI1OQ==", "bodyText": "@vinothchandar I don't think there is any different between EmrFS which uses S3 vs HDFS working w.r.t RPC calls made here. EmrFS just implements the HDFS interface, but the internals like RPC calls to the namenode etc. remain the same.", "url": "https://github.com/apache/hudi/pull/1768#discussion_r455390259", "createdAt": "2020-07-15T22:00:48Z", "author": {"login": "umehrot2"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "diffHunk": "@@ -386,13 +389,26 @@ public void finalizeWrite(JavaSparkContext jsc, String instantTs, List<HoodieWri\n    *\n    * @param instantTs Instant Time\n    */\n-  public void deleteMarkerDir(String instantTs) {\n+  public void deleteMarkerDir(JavaSparkContext jsc, String instantTs) {\n     try {\n       FileSystem fs = getMetaClient().getFs();\n       Path markerDir = new Path(metaClient.getMarkerFolderPath(instantTs));\n+\n       if (fs.exists(markerDir)) {\n         // For append only case, we do not write to marker dir. Hence, the above check\n-        LOG.info(\"Removing marker directory=\" + markerDir);\n+        LOG.info(\"Removing marker directory = \" + markerDir);\n+\n+        FileStatus[] fileStatuses = fs.listStatus(markerDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMjU1MQ=="}, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzE5NzQ1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwOTowMDowN1rOGp7tfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyODoyNVrOGqi3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMzEwMg==", "bodyText": "Math.min(subDirectories.size(), parallelism)?", "url": "https://github.com/apache/hudi/pull/1768#discussion_r446623102", "createdAt": "2020-06-28T09:00:07Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java", "diffHunk": "@@ -199,16 +201,40 @@ public static String getRelativePartitionPath(Path basePath, Path partitionPath)\n     return partitions;\n   }\n \n-  public static List<String> getAllDataFilesForMarkers(FileSystem fs, String basePath, String instantTs,\n-      String markerDir, String baseFileExtension) throws IOException {\n-    List<String> dataFiles = new LinkedList<>();\n-    processFiles(fs, markerDir, (status) -> {\n-      String pathStr = status.getPath().toString();\n-      if (pathStr.endsWith(HoodieTableMetaClient.MARKER_EXTN)) {\n-        dataFiles.add(FSUtils.translateMarkerToDataPath(basePath, pathStr, instantTs, baseFileExtension));\n+  public static Set<String> getAllDataFilesForMarkers(JavaSparkContext jsc, FileSystem fs, String basePath,\n+      String instantTs, String markerDir, String baseFileExtension, int parallelism) throws IOException {\n+    FileStatus[] topLevelStatuses = fs.listStatus(new Path(markerDir));\n+\n+    Set<String> dataFiles = new HashSet<>();\n+\n+    List<String> subDirectories = new ArrayList<>();\n+    for (FileStatus topLevelStatus: topLevelStatuses) {\n+      if (topLevelStatus.isFile()) {\n+        String pathStr = topLevelStatus.getPath().toString();\n+        if (pathStr.endsWith(HoodieTableMetaClient.MARKER_EXTN)) {\n+          dataFiles.add(FSUtils.translateMarkerToDataPath(basePath, pathStr, instantTs, baseFileExtension));\n+        }\n+      } else {\n+        subDirectories.add(topLevelStatus.getPath().toString());\n       }\n-      return true;\n-    }, false);\n+    }\n+\n+    parallelism = subDirectories.size() < parallelism ? subDirectories.size() : parallelism;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NDcxNg==", "bodyText": "Will address in the next revision, one I have more feedback as needed from @n3nash", "url": "https://github.com/apache/hudi/pull/1768#discussion_r447264716", "createdAt": "2020-06-29T21:28:25Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java", "diffHunk": "@@ -199,16 +201,40 @@ public static String getRelativePartitionPath(Path basePath, Path partitionPath)\n     return partitions;\n   }\n \n-  public static List<String> getAllDataFilesForMarkers(FileSystem fs, String basePath, String instantTs,\n-      String markerDir, String baseFileExtension) throws IOException {\n-    List<String> dataFiles = new LinkedList<>();\n-    processFiles(fs, markerDir, (status) -> {\n-      String pathStr = status.getPath().toString();\n-      if (pathStr.endsWith(HoodieTableMetaClient.MARKER_EXTN)) {\n-        dataFiles.add(FSUtils.translateMarkerToDataPath(basePath, pathStr, instantTs, baseFileExtension));\n+  public static Set<String> getAllDataFilesForMarkers(JavaSparkContext jsc, FileSystem fs, String basePath,\n+      String instantTs, String markerDir, String baseFileExtension, int parallelism) throws IOException {\n+    FileStatus[] topLevelStatuses = fs.listStatus(new Path(markerDir));\n+\n+    Set<String> dataFiles = new HashSet<>();\n+\n+    List<String> subDirectories = new ArrayList<>();\n+    for (FileStatus topLevelStatus: topLevelStatuses) {\n+      if (topLevelStatus.isFile()) {\n+        String pathStr = topLevelStatus.getPath().toString();\n+        if (pathStr.endsWith(HoodieTableMetaClient.MARKER_EXTN)) {\n+          dataFiles.add(FSUtils.translateMarkerToDataPath(basePath, pathStr, instantTs, baseFileExtension));\n+        }\n+      } else {\n+        subDirectories.add(topLevelStatus.getPath().toString());\n       }\n-      return true;\n-    }, false);\n+    }\n+\n+    parallelism = subDirectories.size() < parallelism ? subDirectories.size() : parallelism;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMzEwMg=="}, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzE5Nzk4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwOTowMDozMVrOGp7tug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwOTowMDozMVrOGp7tug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMzE2Mg==", "bodyText": "similar question here.. cc @n3nash ..", "url": "https://github.com/apache/hudi/pull/1768#discussion_r446623162", "createdAt": "2020-06-28T09:00:31Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java", "diffHunk": "@@ -199,16 +201,40 @@ public static String getRelativePartitionPath(Path basePath, Path partitionPath)\n     return partitions;\n   }\n \n-  public static List<String> getAllDataFilesForMarkers(FileSystem fs, String basePath, String instantTs,\n-      String markerDir, String baseFileExtension) throws IOException {\n-    List<String> dataFiles = new LinkedList<>();\n-    processFiles(fs, markerDir, (status) -> {\n-      String pathStr = status.getPath().toString();\n-      if (pathStr.endsWith(HoodieTableMetaClient.MARKER_EXTN)) {\n-        dataFiles.add(FSUtils.translateMarkerToDataPath(basePath, pathStr, instantTs, baseFileExtension));\n+  public static Set<String> getAllDataFilesForMarkers(JavaSparkContext jsc, FileSystem fs, String basePath,\n+      String instantTs, String markerDir, String baseFileExtension, int parallelism) throws IOException {\n+    FileStatus[] topLevelStatuses = fs.listStatus(new Path(markerDir));\n+\n+    Set<String> dataFiles = new HashSet<>();\n+\n+    List<String> subDirectories = new ArrayList<>();\n+    for (FileStatus topLevelStatus: topLevelStatuses) {\n+      if (topLevelStatus.isFile()) {\n+        String pathStr = topLevelStatus.getPath().toString();\n+        if (pathStr.endsWith(HoodieTableMetaClient.MARKER_EXTN)) {\n+          dataFiles.add(FSUtils.translateMarkerToDataPath(basePath, pathStr, instantTs, baseFileExtension));\n+        }\n+      } else {\n+        subDirectories.add(topLevelStatus.getPath().toString());\n       }\n-      return true;\n-    }, false);\n+    }\n+\n+    parallelism = subDirectories.size() < parallelism ? subDirectories.size() : parallelism;\n+    dataFiles.addAll(jsc.parallelize(subDirectories, parallelism).flatMap(directory -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fb69418431621ba4dbb1b42ac5c4d68be9b9137"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY5NTE4OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/MarkerFiles.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNzowMFrOG5i81w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNzowMFrOG5i81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NDY0Nw==", "bodyText": "note to self: this will still work when subPath is a file. i.e non-partitioned tables", "url": "https://github.com/apache/hudi/pull/1768#discussion_r462994647", "createdAt": "2020-07-30T13:27:00Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/MarkerFiles.java", "diffHunk": "@@ -64,44 +69,87 @@ public MarkerFiles(HoodieTable<?> table, String instantTime) {\n         instantTime);\n   }\n \n-  public void quietDeleteMarkerDir() {\n+  public void quietDeleteMarkerDir(JavaSparkContext jsc, int parallelism) {\n     try {\n-      deleteMarkerDir();\n+      deleteMarkerDir(jsc, parallelism);\n     } catch (HoodieIOException ioe) {\n       LOG.warn(\"Error deleting marker directory for instant \" + instantTime, ioe);\n     }\n   }\n \n   /**\n    * Delete Marker directory corresponding to an instant.\n+   *\n+   * @param jsc Java Spark Context\n+   * @param parallelism Spark parallelism for deletion\n    */\n-  public boolean deleteMarkerDir() {\n+  public boolean deleteMarkerDir(JavaSparkContext jsc, int parallelism) {\n     try {\n-      boolean result = fs.delete(markerDirPath, true);\n-      if (result) {\n+      if (fs.exists(markerDirPath)) {\n+        FileStatus[] fileStatuses = fs.listStatus(markerDirPath);\n+        List<String> markerDirSubPaths = Arrays.stream(fileStatuses)\n+                .map(fileStatus -> fileStatus.getPath().toString())\n+                .collect(Collectors.toList());\n+\n+        if (markerDirSubPaths.size() > 0) {\n+          SerializableConfiguration conf = new SerializableConfiguration(fs.getConf());\n+          parallelism = Math.min(markerDirSubPaths.size(), parallelism);\n+          jsc.parallelize(markerDirSubPaths, parallelism).foreach(subPathStr -> {\n+            Path subPath = new Path(subPathStr);\n+            FileSystem fileSystem = subPath.getFileSystem(conf.get());\n+            fileSystem.delete(subPath, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8e6f48f849608d8178122d63f036a9462b918c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDcwOTk2OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/MarkerFiles.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDoyNVrOG5jFyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNDo1NjoxM1rOG57-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NjkzOQ==", "bodyText": "nit: better to have the static methods right at the top?", "url": "https://github.com/apache/hudi/pull/1768#discussion_r462996939", "createdAt": "2020-07-30T13:30:25Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/MarkerFiles.java", "diffHunk": "@@ -110,6 +158,10 @@ private String translateMarkerToDataPath(String markerPath) {\n     return MarkerFiles.stripMarkerSuffix(rPath);\n   }\n \n+  public static String stripMarkerSuffix(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8e6f48f849608d8178122d63f036a9462b918c"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMzYwNA==", "bodyText": "I can change it back, but is there a code style guide we are following ? I haven't seen this rule in google style guide for java atleast.", "url": "https://github.com/apache/hudi/pull/1768#discussion_r463323604", "createdAt": "2020-07-30T23:20:32Z", "author": {"login": "umehrot2"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/MarkerFiles.java", "diffHunk": "@@ -110,6 +158,10 @@ private String translateMarkerToDataPath(String markerPath) {\n     return MarkerFiles.stripMarkerSuffix(rPath);\n   }\n \n+  public static String stripMarkerSuffix(String path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NjkzOQ=="}, "originalCommit": {"oid": "be8e6f48f849608d8178122d63f036a9462b918c"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDcwMw==", "bodyText": "this is not checkstyle enforced atm. So I am happy to let this be.", "url": "https://github.com/apache/hudi/pull/1768#discussion_r463404703", "createdAt": "2020-07-31T04:56:13Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/MarkerFiles.java", "diffHunk": "@@ -110,6 +158,10 @@ private String translateMarkerToDataPath(String markerPath) {\n     return MarkerFiles.stripMarkerSuffix(rPath);\n   }\n \n+  public static String stripMarkerSuffix(String path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NjkzOQ=="}, "originalCommit": {"oid": "be8e6f48f849608d8178122d63f036a9462b918c"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4513, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}