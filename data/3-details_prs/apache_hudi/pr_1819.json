{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NzMxNDk4", "number": 1819, "title": "[HUDI-1058] Make delete marker configurable", "bodyText": "What is the purpose of the pull request\nusers can specify any boolean field for delete marker and _hoodie_is_deleted remains as default.\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-07-11T07:03:13Z", "url": "https://github.com/apache/hudi/pull/1819", "merged": true, "mergeCommit": {"oid": "433d7d2c9886fed161557efe88b62ebdce0fe5df"}, "closed": true, "closedAt": "2020-08-03T15:06:32Z", "author": {"login": "shenh062326"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcz5vLCAFqTQ0NjgwODc4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7TOOigFqTQ2MDA5MjgxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODA4Nzg4", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-446808788", "createdAt": "2020-07-11T15:12:20Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODE5NDU5", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-446819459", "createdAt": "2020-07-11T18:11:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODoxMjowN1rOGwOXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODoyOTo1OVrOGwOdZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMDIxOA==", "bodyText": "typo: it should be userDefinedXXX", "url": "https://github.com/apache/hudi/pull/1819#discussion_r453220218", "createdAt": "2020-07-11T18:12:07Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -36,6 +36,9 @@\n public class OverwriteWithLatestAvroPayload extends BaseAvroPayload\n     implements HoodieRecordPayload<OverwriteWithLatestAvroPayload> {\n \n+  public static final String DEFAULT_DELETE_FIELD = \"_hoodie_is_deleted\";\n+  private String userDefineDeleteField = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTY2Mw==", "bodyText": "The only caller to this method is org.apache.hudi.io.HoodieMergeHandle#write, where you have access to HoodieWriteConfig config.\nIf you make the configuration delete.field accessible from HoodieWriteConfig then make this method\ncombineAndGetUpdateValue(IndexedRecord currentValue, Schema schema, Option<String> deleteField) {\n}\nthen the overall logic will be simplified a lot.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r453221663", "createdAt": "2020-07-11T18:29:20Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -67,7 +74,8 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n \n     GenericRecord genericRecord = (GenericRecord) recordOption.get();\n     // combining strategy here trivially ignores currentValue on disk and writes this record\n-    Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n+    String deleteField = userDefineDeleteField == null ? DEFAULT_DELETE_FIELD : userDefineDeleteField;\n+    Object deleteMarker = genericRecord.get(deleteField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTczMg==", "bodyText": "not necessary if config goes to HoodieWriteConfig", "url": "https://github.com/apache/hudi/pull/1819#discussion_r453221732", "createdAt": "2020-07-11T18:29:59Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/HoodieDeltaStreamer.java", "diffHunk": "@@ -202,6 +202,10 @@ public Operation convert(String value) throws ParameterException {\n         + \" to break ties between records with same key in input data. Default: 'ts' holding unix timestamp of record\")\n     public String sourceOrderingField = \"ts\";\n \n+    @Parameter(names = {\"--source-delete-field\"}, description = \"Field within source record to decide\"\n+            + \" is this record is delete record. Default: \" + OverwriteWithLatestAvroPayload.DEFAULT_DELETE_FIELD)\n+    public String sourceDeleteField = OverwriteWithLatestAvroPayload.DEFAULT_DELETE_FIELD;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDI5MjQ3", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-449429247", "createdAt": "2020-07-16T00:27:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDoyNzoxNVrOGyV3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDoyNzoxNVrOGyV3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0MDE1OA==", "bodyText": "we can simplify this(I haven't gone through the entire patch yet). If you set default value for this config param to \"_hoodie_is_deleted\", then you don't need to check for isEmpty. also within OverwriteWithLatestAvroPayload, you could just take in the deleteKeyField as is. either it will point to \"_hoodie_is_deleted\" if not set. Else it will point to the one user has over-written.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r455440158", "createdAt": "2020-07-16T00:27:15Z", "author": {"login": "nsivabalan"}, "path": "hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java", "diffHunk": "@@ -176,11 +177,21 @@ public static KeyGenerator createKeyGenerator(TypedProperties props) throws IOEx\n   /**\n    * Create a payload class via reflection, passing in an ordering/precombine value.\n    */\n-  public static HoodieRecordPayload createPayload(String payloadClass, GenericRecord record, Comparable orderingVal)\n-      throws IOException {\n+  public static HoodieRecordPayload createPayload(String payloadClass, GenericRecord record,\n+                                                  Comparable orderingVal,\n+                                                  String deleteField) throws IOException {\n     try {\n-      return (HoodieRecordPayload) ReflectionUtils.loadClass(payloadClass,\n-          new Class<?>[] {GenericRecord.class, Comparable.class}, record, orderingVal);\n+      HoodieRecordPayload payload = null;\n+      if (payloadClass.equals(OverwriteWithLatestAvroPayload.class.getName()) &&\n+              !deleteField.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDI5NDU0", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-449429454", "createdAt": "2020-07-16T00:27:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzM3MzUz", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-449737353", "createdAt": "2020-07-16T10:54:49Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NDo0OVrOGylwFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1Nzo1NFrOGyl2JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMDUwMQ==", "bodyText": "you might as well define the default var in this class rather than OverwriteWithLatestAvroPayload.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r455700501", "createdAt": "2020-07-16T10:54:49Z", "author": {"login": "nsivabalan"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/DataSourceOptions.scala", "diffHunk": "@@ -184,6 +184,13 @@ object DataSourceWriteOptions {\n   val PAYLOAD_CLASS_OPT_KEY = \"hoodie.datasource.write.payload.class\"\n   val DEFAULT_PAYLOAD_OPT_VAL = classOf[OverwriteWithLatestAvroPayload].getName\n \n+  /**\n+   * Field used in OverwriteWithLatestAvroPayload combineAndGetUpdateValue, When two records have the same\n+   * key value, we will check if the new record is deleted by the delete field.\n+   */\n+  val DELETE_FIELD_OPT_KEY = \"hoodie.datasource.write.delete.field\"\n+  val DEFAULT_DELETE_FIELD_OPT_VAL = OverwriteWithLatestAvroPayload.DEFAULT_DELETE_FIELD", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMTQwNA==", "bodyText": "can we name it as \"isDeletedField\" or \"isDeletedMarkerField\". may or may not be user defined and hence.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r455701404", "createdAt": "2020-07-16T10:56:32Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -36,6 +36,9 @@\n public class OverwriteWithLatestAvroPayload extends BaseAvroPayload\n     implements HoodieRecordPayload<OverwriteWithLatestAvroPayload> {\n \n+  public static final String DEFAULT_DELETE_FIELD = \"_hoodie_is_deleted\";\n+  private String userDefinedDeleteField = DEFAULT_DELETE_FIELD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMjA1Mg==", "bodyText": "this leakage is what I wish to avoid. Why would these classes access OverwriteWithLatestAvroPayload. moving it to DatasourceUtils or some config classes makes sense.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r455702052", "createdAt": "2020-07-16T10:57:54Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/HoodieDeltaStreamer.java", "diffHunk": "@@ -202,6 +202,10 @@ public Operation convert(String value) throws ParameterException {\n         + \" to break ties between records with same key in input data. Default: 'ts' holding unix timestamp of record\")\n     public String sourceOrderingField = \"ts\";\n \n+    @Parameter(names = {\"--source-delete-field\"}, description = \"Field within source record to decide\"\n+            + \" is this record is deleted. Default: \" + OverwriteWithLatestAvroPayload.DEFAULT_DELETE_FIELD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNjgwNzM4", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-450680738", "createdAt": "2020-07-17T13:58:50Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo1ODo1MFrOGzUGug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo1ODo1MFrOGzUGug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1OTk2Mg==", "bodyText": "sorry, don't understand why we need this. the config value will either refer to \"_hoodie_is_deleted\" if not set, or will refer to the user defined prop. So, we could initialize isDeletedField = null and set it in constructor. correct me if my understanding is wrong.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r456459962", "createdAt": "2020-07-17T13:58:50Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -36,6 +36,9 @@\n public class OverwriteWithLatestAvroPayload extends BaseAvroPayload\n     implements HoodieRecordPayload<OverwriteWithLatestAvroPayload> {\n \n+  public static final String DEFAULT_DELETE_FIELD = \"_hoodie_is_deleted\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "0dffe20b74d1cba02986c23206249fbd6714279a", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/0dffe20b74d1cba02986c23206249fbd6714279a", "committedDate": "2020-07-18T09:39:51Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjkxMzkx", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-451691391", "createdAt": "2020-07-20T15:01:00Z", "commit": {"oid": "0dffe20b74d1cba02986c23206249fbd6714279a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowMTowMFrOG0RrLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNToyMVrOG0R6lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2ODcxNw==", "bodyText": "sorry, I didn't realize the other constructor. We could then initialize isDeletedField = \"_hoodie_is_deleted\"; So that one of the constructors will over-ride the value.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r457468717", "createdAt": "2020-07-20T15:01:00Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -66,8 +74,9 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n     }\n \n     GenericRecord genericRecord = (GenericRecord) recordOption.get();\n-    // combining strategy here trivially ignores currentValue on disk and writes this record\n-    Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n+    // combining strategy here trivially ignores currentValue on disk and writes this record\u5417\n+    String deleteField = isDeletedField == null ? \"_hoodie_is_deleted\" : isDeletedField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dffe20b74d1cba02986c23206249fbd6714279a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjY2MA==", "bodyText": "all we need is a config here. don't think we need to initialize writeClient here.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r457472660", "createdAt": "2020-07-20T15:05:21Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -337,9 +337,15 @@ private void refreshTimeline() throws IOException {\n     }\n \n     JavaRDD<GenericRecord> avroRDD = avroRDDOptional.get();\n+    if (writeClient == null) {\n+      this.schemaProvider = schemaProvider;\n+      setupWriteClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dffe20b74d1cba02986c23206249fbd6714279a"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dffe20b74d1cba02986c23206249fbd6714279a", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/0dffe20b74d1cba02986c23206249fbd6714279a", "committedDate": "2020-07-18T09:39:51Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "2c17a9ffada5cf665093841a2c77fe91fb1de980", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/2c17a9ffada5cf665093841a2c77fe91fb1de980", "committedDate": "2020-07-21T15:23:03Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c17a9ffada5cf665093841a2c77fe91fb1de980", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/2c17a9ffada5cf665093841a2c77fe91fb1de980", "committedDate": "2020-07-21T15:23:03Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "e5c7bf8df6bc7bd41c6a5c0c7fa605b758d91cec", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/e5c7bf8df6bc7bd41c6a5c0c7fa605b758d91cec", "committedDate": "2020-07-23T12:21:36Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5c7bf8df6bc7bd41c6a5c0c7fa605b758d91cec", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/e5c7bf8df6bc7bd41c6a5c0c7fa605b758d91cec", "committedDate": "2020-07-23T12:21:36Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "1f06ae2e0a135f29090a0b4ac25c52d8e8884c95", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/1f06ae2e0a135f29090a0b4ac25c52d8e8884c95", "committedDate": "2020-07-24T10:21:03Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f06ae2e0a135f29090a0b4ac25c52d8e8884c95", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/1f06ae2e0a135f29090a0b4ac25c52d8e8884c95", "committedDate": "2020-07-24T10:21:03Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "c6b53e26db81ed78257a10aaf4a8487d4ee63e20", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/c6b53e26db81ed78257a10aaf4a8487d4ee63e20", "committedDate": "2020-07-24T12:44:47Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6b53e26db81ed78257a10aaf4a8487d4ee63e20", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/c6b53e26db81ed78257a10aaf4a8487d4ee63e20", "committedDate": "2020-07-24T12:44:47Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "1caaef3b8e29212000a1f95e2341ad7be8780e11", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/1caaef3b8e29212000a1f95e2341ad7be8780e11", "committedDate": "2020-07-25T10:30:45Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1caaef3b8e29212000a1f95e2341ad7be8780e11", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/1caaef3b8e29212000a1f95e2341ad7be8780e11", "committedDate": "2020-07-25T10:30:45Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/78d1bbc79001dad1d8a2f6c92841707befa35191", "committedDate": "2020-07-25T10:58:14Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjkxNjYy", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-455291662", "createdAt": "2020-07-25T15:27:21Z", "commit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNToyNzoyMVrOG3Fhbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDoxMTozN1rOG3MrOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTM0Mg==", "bodyText": "can we name something like \"deleteMarkerField\" or something. Feel \"deletedField\" conveys the field is deleted.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415342", "createdAt": "2020-07-25T15:27:21Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -36,6 +36,8 @@\n public class OverwriteWithLatestAvroPayload extends BaseAvroPayload\n     implements HoodieRecordPayload<OverwriteWithLatestAvroPayload> {\n \n+  private String deletedField = \"_hoodie_is_deleted\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTQ2Ng==", "bodyText": "can we test for both cases, i.e. user defined field and non user defined field for detele marker field", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415466", "createdAt": "2020-07-25T15:29:08Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,16 +55,16 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(deleteField, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTY4NQ==", "bodyText": "try to avoid hardcoding test records. If you generate in a for loop, it wud be easy to scale tests.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415685", "createdAt": "2020-07-25T15:31:23Z", "author": {"login": "nsivabalan"}, "path": "hudi-spark/src/test/scala/org/apache/hudi/functional/HoodieSparkSqlWriterSuite.scala", "diffHunk": "@@ -100,6 +100,53 @@ class HoodieSparkSqlWriterSuite extends FunSuite with Matchers {\n     }\n   }\n \n+  test(\"test OverwriteWithLatestAvroPayload with user defined delete field\") {\n+    val session = SparkSession.builder()\n+      .appName(\"test_append_mode\")\n+      .master(\"local[2]\")\n+      .config(\"spark.serializer\", \"org.apache.spark.serializer.KryoSerializer\")\n+      .getOrCreate()\n+    val path = java.nio.file.Files.createTempDirectory(\"hoodie_test_path1\")\n+\n+    try {\n+      val sqlContext = session.sqlContext\n+      val hoodieFooTableName = \"hoodie_foo_tbl\"\n+\n+      val keyField = \"id\"\n+      val deleteField = \"delete_field\"\n+\n+      //create a new table\n+      val fooTableModifier = Map(\"path\" -> path.toAbsolutePath.toString,\n+        HoodieWriteConfig.TABLE_NAME -> hoodieFooTableName,\n+        \"hoodie.insert.shuffle.parallelism\" -> \"2\",\n+        \"hoodie.upsert.shuffle.parallelism\" -> \"2\",\n+        DELETE_FIELD_OPT_KEY -> deleteField,\n+        RECORDKEY_FIELD_OPT_KEY -> keyField)\n+      val fooTableParams = HoodieSparkSqlWriter.parametersWithWriteDefaults(fooTableModifier)\n+\n+      val dataFrame = session.createDataFrame(Seq(\n+        (12, \"ming\", 20.23, \"2018-01-01T13:51:39.340396Z\", false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTc0NA==", "bodyText": "can we also compare the record actually matches the active one and not the deleted one.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415744", "createdAt": "2020-07-25T15:31:58Z", "author": {"login": "nsivabalan"}, "path": "hudi-spark/src/test/scala/org/apache/hudi/functional/HoodieSparkSqlWriterSuite.scala", "diffHunk": "@@ -100,6 +100,53 @@ class HoodieSparkSqlWriterSuite extends FunSuite with Matchers {\n     }\n   }\n \n+  test(\"test OverwriteWithLatestAvroPayload with user defined delete field\") {\n+    val session = SparkSession.builder()\n+      .appName(\"test_append_mode\")\n+      .master(\"local[2]\")\n+      .config(\"spark.serializer\", \"org.apache.spark.serializer.KryoSerializer\")\n+      .getOrCreate()\n+    val path = java.nio.file.Files.createTempDirectory(\"hoodie_test_path1\")\n+\n+    try {\n+      val sqlContext = session.sqlContext\n+      val hoodieFooTableName = \"hoodie_foo_tbl\"\n+\n+      val keyField = \"id\"\n+      val deleteField = \"delete_field\"\n+\n+      //create a new table\n+      val fooTableModifier = Map(\"path\" -> path.toAbsolutePath.toString,\n+        HoodieWriteConfig.TABLE_NAME -> hoodieFooTableName,\n+        \"hoodie.insert.shuffle.parallelism\" -> \"2\",\n+        \"hoodie.upsert.shuffle.parallelism\" -> \"2\",\n+        DELETE_FIELD_OPT_KEY -> deleteField,\n+        RECORDKEY_FIELD_OPT_KEY -> keyField)\n+      val fooTableParams = HoodieSparkSqlWriter.parametersWithWriteDefaults(fooTableModifier)\n+\n+      val dataFrame = session.createDataFrame(Seq(\n+        (12, \"ming\", 20.23, \"2018-01-01T13:51:39.340396Z\", false),\n+        (34, \"zhi\", 21.323, \"2018-01-01T13:52:39.340396Z\", false)\n+      )) toDF(keyField, \"name\", \"weight\", \"ts\", deleteField)\n+\n+      HoodieSparkSqlWriter.write(sqlContext, SaveMode.Append, fooTableParams, dataFrame)\n+      val recordCount1 = sqlContext.read.format(\"org.apache.hudi\").load(path.toString + \"/*/*.parquet\").count\n+      assert(recordCount1 == 2, \"result should be 2, but get \" + recordCount1)\n+\n+      val dataFrame2 = session.createDataFrame(Seq(\n+        (12, \"ming\", 20.23, \"2018-01-01T13:53:39.340396Z\", true),\n+        (34, \"zhi\", 30.3, \"2018-01-01T13:54:39.340396Z\", false)\n+      )) toDF(keyField, \"name\", \"weight\", \"ts\", deleteField)\n+      HoodieSparkSqlWriter.write(sqlContext, SaveMode.Append, fooTableParams, dataFrame2)\n+\n+      val recordCount = sqlContext.read.format(\"org.apache.hudi\").load(path.toString + \"/*/*.parquet\").count\n+      assert(recordCount == 1, \"result should be 1, but get \" + recordCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTgzMQ==", "bodyText": "why not move this method to HoodieTestDataGenerator?", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415831", "createdAt": "2020-07-25T15:33:12Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  private static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMjUzOQ==", "bodyText": "can we test for both default and user defined fields here.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460532539", "createdAt": "2020-07-26T14:11:37Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  private static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {\n+    return IntStream.range(0, n).boxed().map(i -> {\n+      String partitionPath = \"partitionPath1\";\n+      HoodieKey key = new HoodieKey(\"id_\" + i, partitionPath);\n+      HoodieTestDataGenerator.KeyPartition kp = new HoodieTestDataGenerator.KeyPartition();\n+      kp.key = key;\n+      kp.partitionPath = partitionPath;\n+      return HoodieTestDataGenerator.generateGenericRecord(\n+          key.getRecordKey(), \"rider-\" + instantTime, \"driver-\" + instantTime, instantTime, isDeleteRecord, false);\n+    }).collect(Collectors.toList());\n+  }\n+\n+  @Test\n+  public void testOverwriteLatestAvroPayload() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/78d1bbc79001dad1d8a2f6c92841707befa35191", "committedDate": "2020-07-25T10:58:14Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "45ff53fe7aa952600b0361c0c162b747f7169949", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/45ff53fe7aa952600b0361c0c162b747f7169949", "committedDate": "2020-07-28T15:39:23Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45ff53fe7aa952600b0361c0c162b747f7169949", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/45ff53fe7aa952600b0361c0c162b747f7169949", "committedDate": "2020-07-28T15:39:23Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/8242cad9ee116261546bd067820630a3ea581df1", "committedDate": "2020-07-29T01:46:07Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDkwMjc3", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-459090277", "createdAt": "2020-07-31T10:58:12Z", "commit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo1ODoxMlrOG6Ej1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxMjowNFrOG6E4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NTMwMA==", "bodyText": "lets be uniform throughout. getDeleteMarkerField.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463545300", "createdAt": "2020-07-31T10:58:12Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -251,6 +253,10 @@ public int getMaxConsistencyCheckIntervalMs() {\n     return Integer.parseInt(props.getProperty(MAX_CONSISTENCY_CHECK_INTERVAL_MS_PROP));\n   }\n \n+  public String getDeleteField() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NTQ2OA==", "bodyText": "deleteMarkerField", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463545468", "createdAt": "2020-07-31T10:58:43Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -37,14 +37,17 @@\n public class TestOverwriteWithLatestAvroPayload {\n \n   private Schema schema;\n+  String defaultDeleteField = \"_hoodie_is_deleted\";\n+  String deleteField = \"delete_field\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjQzNQ==", "bodyText": "shouldn't this also be false.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463546435", "createdAt": "2020-07-31T11:00:55Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,13 +57,15 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteField, false);\n+    record1.put(deleteField, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjQ3OQ==", "bodyText": "same here.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463546479", "createdAt": "2020-07-31T11:01:02Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,13 +57,15 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteField, false);\n+    record1.put(deleteField, true);\n \n     GenericRecord record2 = new GenericData.Record(schema);\n     record2.put(\"id\", \"2\");\n     record2.put(\"partition\", \"partition1\");\n     record2.put(\"ts\", 1L);\n-    record2.put(\"_hoodie_is_deleted\", false);\n+    record2.put(defaultDeleteField, false);\n+    record2.put(deleteField, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Nzc1Mg==", "bodyText": "can we also fix lines 70 and 71. While creating the OverwriteWithLatestAvroPayload, pass in the delete field marker. Again, can we test for both default and user defined. So, since these are active field, existing assertions should work.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463547752", "createdAt": "2020-07-31T11:04:29Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -80,13 +85,16 @@ public void testDeletedRecord() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteField, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODAzMw==", "bodyText": "generateGenericRecords.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548033", "createdAt": "2020-07-31T11:05:08Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java", "diffHunk": "@@ -177,6 +178,18 @@ public RawTripTestPayload generateRandomValueAsPerSchema(String schemaStr, Hoodi\n     return null;\n   }\n \n+  public static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODQzMg==", "bodyText": "deleteMarkerField", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548432", "createdAt": "2020-07-31T11:06:10Z", "author": {"login": "nsivabalan"}, "path": "hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java", "diffHunk": "@@ -215,11 +216,20 @@ public static HoodieDateTimeParser createDateTimeParser(TypedProperties props, S\n   /**\n    * Create a payload class via reflection, passing in an ordering/precombine value.\n    */\n-  public static HoodieRecordPayload createPayload(String payloadClass, GenericRecord record, Comparable orderingVal)\n-      throws IOException {\n+  public static HoodieRecordPayload createPayload(String payloadClass, GenericRecord record,\n+                                                  Comparable orderingVal,\n+                                                  String deleteField) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODQ3OA==", "bodyText": "deleteMarkerField", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548478", "createdAt": "2020-07-31T11:06:18Z", "author": {"login": "nsivabalan"}, "path": "hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java", "diffHunk": "@@ -275,8 +285,9 @@ public static HoodieWriteClient createHoodieClient(JavaSparkContext jssc, String\n   }\n \n   public static HoodieRecord createHoodieRecord(GenericRecord gr, Comparable orderingVal, HoodieKey hKey,\n-                                                String payloadClass) throws IOException {\n-    HoodieRecordPayload payload = DataSourceUtils.createPayload(payloadClass, gr, orderingVal);\n+                                                String payloadClass,\n+                                                String deleteField) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODk1Ng==", "bodyText": "deleteMarkerField", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548956", "createdAt": "2020-07-31T11:07:35Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -337,9 +337,11 @@ private void refreshTimeline() throws IOException {\n     }\n \n     JavaRDD<GenericRecord> avroRDD = avroRDDOptional.get();\n+    String deleteField = props.getString(HoodieWriteConfig.DELETE_FIELD_PROP, HoodieWriteConfig.DEFAULT_DELETE_FIELD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTE5Mw==", "bodyText": "private", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463549193", "createdAt": "2020-07-31T11:08:16Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  @Test\n+  public void testOverwriteLatestAvroPayload() throws Exception {\n+    // test defaultDeleteField\n+    this.testOverwriteLatestAvroPayload(null);\n+\n+    // test userDefinedDeleteField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+  }\n+\n+  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTk0Mw==", "bodyText": "is it possible to verify the records for equality ?", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463549943", "createdAt": "2020-07-31T11:10:18Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  @Test\n+  public void testOverwriteLatestAvroPayload() throws Exception {\n+    // test defaultDeleteField\n+    this.testOverwriteLatestAvroPayload(null);\n+\n+    // test userDefinedDeleteField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+  }\n+\n+  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n+    String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n+    List<GenericRecord> records = HoodieTestDataGenerator.genericRecords(5, false, 0);\n+    Helpers.saveParquetToDFS(records, new Path(path));\n+\n+    TypedProperties parquetProps = new TypedProperties();\n+    parquetProps.setProperty(\"include\", \"base.properties\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n+    parquetProps.setProperty(\"hoodie.deltastreamer.source.dfs.root\", PARQUET_SOURCE_ROOT);\n+    if (deleteMarkerField != null) {\n+      parquetProps.setProperty(HoodieWriteConfig.DELETE_FIELD_PROP, deleteMarkerField);\n+    }\n+    Helpers.savePropsToDFS(parquetProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_PARQUET);\n+\n+    String tableBasePath = dfsBasePath + \"/test_overwrite_lastest_avro_payload_table\";\n+\n+    HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(\n+        TestHoodieDeltaStreamer.TestHelpers.makeConfig(tableBasePath, HoodieDeltaStreamer.Operation.INSERT, ParquetDFSSource.class.getName(),\n+            null, PROPS_FILENAME_TEST_PARQUET, false,\n+            false, 100000, false, null, null, \"timestamp\"), jsc);\n+    deltaStreamer.sync();\n+    TestHoodieDeltaStreamer.TestHelpers.assertRecordCount(5, tableBasePath + \"/*/*.parquet\", sqlContext);\n+\n+    String path2 = PARQUET_SOURCE_ROOT + \"/2.parquet\";\n+    List<GenericRecord> records2 = HoodieTestDataGenerator.genericRecords(2, true, 1);\n+    Helpers.saveParquetToDFS(records2, new Path(path2));\n+    deltaStreamer.sync();\n+\n+    TestHoodieDeltaStreamer.TestHelpers.assertRecordCount(3, tableBasePath + \"/*/*.parquet\", sqlContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MDU3Nw==", "bodyText": "we could move this to a private method and so lines 99 tp 108 and 110 to 120 can re-use code", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463550577", "createdAt": "2020-07-31T11:12:04Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -98,6 +106,18 @@ public void testDeletedRecord() throws IOException {\n \n     assertEquals(payload1.combineAndGetUpdateValue(delRecord1, schema).get(), record1);\n     assertFalse(payload2.combineAndGetUpdateValue(record1, schema).isPresent());\n+\n+    // test userDefinedDeleteField", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8242cad9ee116261546bd067820630a3ea581df1", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/8242cad9ee116261546bd067820630a3ea581df1", "committedDate": "2020-07-29T01:46:07Z", "message": "[HUDI-1058] Make delete marker configurable"}, "afterCommit": {"oid": "9d8cceff60a7897df5d40a534680ed651f194e19", "author": {"user": {"login": "umehrot2", "name": "Udit Mehrotra"}}, "url": "https://github.com/apache/hudi/commit/9d8cceff60a7897df5d40a534680ed651f194e19", "committedDate": "2020-08-01T08:09:51Z", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d8cceff60a7897df5d40a534680ed651f194e19", "author": {"user": {"login": "umehrot2", "name": "Udit Mehrotra"}}, "url": "https://github.com/apache/hudi/commit/9d8cceff60a7897df5d40a534680ed651f194e19", "committedDate": "2020-08-01T08:09:51Z", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>"}, "afterCommit": {"oid": "57a2d7a6ba84d227302152a819a076cf4ac68f85", "author": {"user": {"login": "umehrot2", "name": "Udit Mehrotra"}}, "url": "https://github.com/apache/hudi/commit/57a2d7a6ba84d227302152a819a076cf4ac68f85", "committedDate": "2020-08-01T08:46:19Z", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57a2d7a6ba84d227302152a819a076cf4ac68f85", "author": {"user": {"login": "umehrot2", "name": "Udit Mehrotra"}}, "url": "https://github.com/apache/hudi/commit/57a2d7a6ba84d227302152a819a076cf4ac68f85", "committedDate": "2020-08-01T08:46:19Z", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>"}, "afterCommit": {"oid": "242c97994194b666c4ed5437ca97a04097cf24d2", "author": {"user": {"login": "umehrot2", "name": "Udit Mehrotra"}}, "url": "https://github.com/apache/hudi/commit/242c97994194b666c4ed5437ca97a04097cf24d2", "committedDate": "2020-08-01T12:56:11Z", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTg5ODM0", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-459589834", "createdAt": "2020-08-01T16:45:56Z", "commit": {"oid": "242c97994194b666c4ed5437ca97a04097cf24d2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjo0NTo1NlrOG6fCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjo0OTo0OFrOG6fD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3OTE5MQ==", "bodyText": "sorry, why making these changes in this PR ? This PR is meant for delete marker field. are these changes related to user defined delete marker field ?", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463979191", "createdAt": "2020-08-01T16:45:56Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -267,15 +268,15 @@ private boolean deleteAllInstantsOlderorEqualsInAuxMetaFolder(HoodieInstant thre\n     return success;\n   }\n \n-  public void archive(List<HoodieInstant> instants) throws HoodieCommitException {\n+  public void archive(JavaSparkContext jsc, List<HoodieInstant> instants) throws HoodieCommitException {\n     try {\n       HoodieTimeline commitTimeline = metaClient.getActiveTimeline().getAllCommitsTimeline().filterCompletedInstants();\n       Schema wrapperSchema = HoodieArchivedMetaEntry.getClassSchema();\n       LOG.info(\"Wrapper schema \" + wrapperSchema.toString());\n       List<IndexedRecord> records = new ArrayList<>();\n       for (HoodieInstant hoodieInstant : instants) {\n         try {\n-          deleteAnyLeftOverMarkerFiles(hoodieInstant);\n+          deleteAnyLeftOverMarkerFiles(jsc, hoodieInstant);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "242c97994194b666c4ed5437ca97a04097cf24d2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3OTQ5Mg==", "bodyText": "actually we could test this way. not sure if you already do that.\nset default marker field value to true and user defined to false. If OverwriteWithLatestAvro is instantiated w/o any marker fields, the record should be deleted. If OverwriteWithLatestAvro is instantiated w/ user defined marker field, the record should be considered active. Vice versa as well. All tests in this class could be done this way to ensure that the other column is treated as yet another user's data column and hoodie does not care about it.", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463979492", "createdAt": "2020-08-01T16:49:48Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,13 +57,15 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteMarkerField, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "242c97994194b666c4ed5437ca97a04097cf24d2"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6048093ce4979eb492251d47499c737acb156fa", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/d6048093ce4979eb492251d47499c737acb156fa", "committedDate": "2020-08-01T23:58:20Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "242c97994194b666c4ed5437ca97a04097cf24d2", "author": {"user": {"login": "umehrot2", "name": "Udit Mehrotra"}}, "url": "https://github.com/apache/hudi/commit/242c97994194b666c4ed5437ca97a04097cf24d2", "committedDate": "2020-08-01T12:56:11Z", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>"}, "afterCommit": {"oid": "d6048093ce4979eb492251d47499c737acb156fa", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/d6048093ce4979eb492251d47499c737acb156fa", "committedDate": "2020-08-01T23:58:20Z", "message": "[HUDI-1058] Make delete marker configurable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDkyODEz", "url": "https://github.com/apache/hudi/pull/1819#pullrequestreview-460092813", "createdAt": "2020-08-03T14:51:21Z", "commit": {"oid": "d6048093ce4979eb492251d47499c737acb156fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2944, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}