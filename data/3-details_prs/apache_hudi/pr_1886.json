{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NDM2MTI4", "number": 1886, "title": "[HUDI-1122] Introduce a kafka implementation of hoodie write commit ca\u2026", "bodyText": "\u2026llback\nTips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nIntroduce a kafka implementation of hoodie write commit callback\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-07-29T13:22:07Z", "url": "https://github.com/apache/hudi/pull/1886", "merged": true, "mergeCommit": {"oid": "b883b6d2682a3043eaf263c86182b19922660fd9"}, "closed": true, "closedAt": "2020-08-20T15:00:59Z", "author": {"login": "wangxianghu"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5rUyFgBqjM1OTkxMzkxODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_uCEMAFqTQ2ODI2MTEyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "938327d9454da570759fa8285416f039be4bde68", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/938327d9454da570759fa8285416f039be4bde68", "committedDate": "2020-07-29T13:17:32Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}, "afterCommit": {"oid": "916cf08d12bbfbee62716637777557e248779026", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/916cf08d12bbfbee62716637777557e248779026", "committedDate": "2020-07-29T13:48:00Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "916cf08d12bbfbee62716637777557e248779026", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/916cf08d12bbfbee62716637777557e248779026", "committedDate": "2020-07-29T13:48:00Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}, "afterCommit": {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "committedDate": "2020-07-29T13:58:24Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Njk2MDc2", "url": "https://github.com/apache/hudi/pull/1886#pullrequestreview-459696076", "createdAt": "2020-08-03T00:47:08Z", "commit": {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMDo0NzowOFrOG6pM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMDo1NToyMFrOG6pRXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NTY0Mw==", "bodyText": "If you do not want to add the comments for @param and @return. Just remove them.", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464145643", "createdAt": "2020-08-03T00:47:08Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.callback.util;\n+\n+import org.apache.hudi.exception.HoodieCommitCallbackException;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Util helps to prepare callback message.\n+ */\n+public class HoodieWriteCommitCallbackUtil {\n+\n+  /**\n+   * Convert data to json string format.\n+   *\n+   * @param obj", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NjE5NQ==", "bodyText": "I am thinking one thing: the config options of the callback feature for Kafka are left in hudi-client, while the implementation hosts in hudi-utilities, if it's suitable.", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464146195", "createdAt": "2020-08-03T00:51:19Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteCommitCallbackConfig.java", "diffHunk": "@@ -91,13 +103,44 @@ public Builder withCallbackHttpApiKey(String apiKey) {\n       return this;\n     }\n \n+    public Builder withCallbackKafkaBootstrapServers(String kafkaBootstrapServers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NjUzMg==", "bodyText": "Shall we use try-with-resource or try-catch block to prevent leaking resources?", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464146532", "createdAt": "2020-08-03T00:53:45Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private KafkaProducer<String, String> producer;\n+  private Properties props;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.producer = HoodieWriteCommitKafkaCallbackUtil.createProducer(props);\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    ProducerRecord<String, String> record = HoodieWriteCommitKafkaCallbackUtil.buildProducerRecord(props, callbackMsg);\n+    producer.send(record, new ProducerSendCallback());\n+    producer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0Njc4MQ==", "bodyText": "IMO, moving the content of this class into HoodieWriteCommitKafkaCallback  is reasonable. WDYT?", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464146781", "createdAt": "2020-08-03T00:55:20Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallbackUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+\n+/**\n+ * Util helps to build kafka callback.\n+ */\n+public class HoodieWriteCommitKafkaCallbackUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "committedDate": "2020-07-29T13:58:24Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}, "afterCommit": {"oid": "c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "committedDate": "2020-08-04T15:05:15Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "committedDate": "2020-08-04T15:05:15Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}, "afterCommit": {"oid": "4fd9416379c83d0ec31146f11ba3ca63d67cc9b2", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/4fd9416379c83d0ec31146f11ba3ca63d67cc9b2", "committedDate": "2020-08-04T15:12:05Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjM5MjQ3", "url": "https://github.com/apache/hudi/pull/1886#pullrequestreview-461639247", "createdAt": "2020-08-05T13:00:37Z", "commit": {"oid": "4fd9416379c83d0ec31146f11ba3ca63d67cc9b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzowMDozN1rOG8ImjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzowMDozN1rOG8ImjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwODY4NA==", "bodyText": "If users configure http callback? Why we only consider Kafka callback here?", "url": "https://github.com/apache/hudi/pull/1886#discussion_r465708684", "createdAt": "2020-08-05T13:00:37Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -535,6 +537,11 @@ private HoodieWriteConfig getHoodieClientConfig(SchemaProvider schemaProvider) {\n     }\n     HoodieWriteConfig config = builder.build();\n \n+    // set default value for {@link HoodieWriteCommitKafkaCallbackConfig} if needed.\n+    if (config.writeCommitCallbackOn() && HoodieWriteCommitKafkaCallback.class.getName().equals(config.getCallbackClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd9416379c83d0ec31146f11ba3ca63d67cc9b2"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fd9416379c83d0ec31146f11ba3ca63d67cc9b2", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/4fd9416379c83d0ec31146f11ba3ca63d67cc9b2", "committedDate": "2020-08-04T15:12:05Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}, "afterCommit": {"oid": "3a549b3f8c45881ed9fabf9131d0470b98b91b68", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/3a549b3f8c45881ed9fabf9131d0470b98b91b68", "committedDate": "2020-08-09T09:34:44Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a549b3f8c45881ed9fabf9131d0470b98b91b68", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/3a549b3f8c45881ed9fabf9131d0470b98b91b68", "committedDate": "2020-08-09T09:34:44Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}, "afterCommit": {"oid": "79f73babaf3233c6a2b54c887cac32d7ce7f46d4", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/79f73babaf3233c6a2b54c887cac32d7ce7f46d4", "committedDate": "2020-08-09T09:37:08Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "committedDate": "2020-08-09T10:05:11Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79f73babaf3233c6a2b54c887cac32d7ce7f46d4", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/79f73babaf3233c6a2b54c887cac32d7ce7f46d4", "committedDate": "2020-08-09T09:37:08Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}, "afterCommit": {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "committedDate": "2020-08-09T10:05:11Z", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjQ1NjU4", "url": "https://github.com/apache/hudi/pull/1886#pullrequestreview-468245658", "createdAt": "2020-08-17T07:57:58Z", "commit": {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzo1Nzo1OFrOHBeP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODowMTowMVrOHBeV9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjIwMg==", "bodyText": "Can we make this variable static to be shared in the whole class?", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471306202", "createdAt": "2020-08-17T07:57:58Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.callback.util;\n+\n+import org.apache.hudi.exception.HoodieCommitCallbackException;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Util helps to prepare callback message.\n+ */\n+public class HoodieWriteCommitCallbackUtil {\n+\n+  /**\n+   * Convert data to json string format.\n+   */\n+  public static String convertToJsonString(Object obj) {\n+    // convert to json\n+    ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjgzNw==", "bodyText": "LOG.error(\"Send kafka callback msg failed : \"\uff0ce);", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471306837", "createdAt": "2020-08-17T07:59:17Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private Properties props;\n+  private String bootstrapServers;\n+  private String topic;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.bootstrapServers = props.getProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS);\n+    this.topic = props.getProperty(CALLBACK_KAFKA_TOPIC);\n+    validateKafkaConfig();\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    try (KafkaProducer<String, String> producer = createProducer(props)) {\n+      ProducerRecord<String, String> record = buildProducerRecord(props, callbackMsg);\n+      producer.send(record);\n+      LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n+    } catch (Exception e) {\n+      LOG.error(\"Send kafka callback msg failed : \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNzEzOA==", "bodyText": "Using LOG.debug?", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471307138", "createdAt": "2020-08-17T07:59:50Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private Properties props;\n+  private String bootstrapServers;\n+  private String topic;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.bootstrapServers = props.getProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS);\n+    this.topic = props.getProperty(CALLBACK_KAFKA_TOPIC);\n+    validateKafkaConfig();\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    try (KafkaProducer<String, String> producer = createProducer(props)) {\n+      ProducerRecord<String, String> record = buildProducerRecord(props, callbackMsg);\n+      producer.send(record);\n+      LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n+    } catch (Exception e) {\n+      LOG.error(\"Send kafka callback msg failed : \" + e);\n+    }\n+  }\n+\n+  /**\n+   * Method helps to create {@link KafkaProducer}. Here we set acks = all and retries = 3 by default to ensure no data\n+   * loss.\n+   *\n+   * @param props Kafka configs\n+   * @return A {@link KafkaProducer}\n+   */\n+  public KafkaProducer<String, String> createProducer(Properties props) {\n+    Properties kafkaProducerProps = new Properties();\n+    // bootstrap.servers\n+    kafkaProducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+    // default \"all\" to ensure no message loss\n+    kafkaProducerProps.setProperty(ProducerConfig.ACKS_CONFIG, props.getProperty(CALLBACK_KAFKA_ACKS));\n+    // retries 3 times by default\n+    kafkaProducerProps.setProperty(ProducerConfig.RETRIES_CONFIG, props.getProperty(CALLBACK_KAFKA_RETRIES));\n+    kafkaProducerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+    kafkaProducerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+\n+    LOG.info(\"Callback kafka producer init with configs: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNzc2NQ==", "bodyText": "Maybe we do not need to break the lines here?", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471307765", "createdAt": "2020-08-17T08:01:01Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private Properties props;\n+  private String bootstrapServers;\n+  private String topic;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.bootstrapServers = props.getProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS);\n+    this.topic = props.getProperty(CALLBACK_KAFKA_TOPIC);\n+    validateKafkaConfig();\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    try (KafkaProducer<String, String> producer = createProducer(props)) {\n+      ProducerRecord<String, String> record = buildProducerRecord(props, callbackMsg);\n+      producer.send(record);\n+      LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n+    } catch (Exception e) {\n+      LOG.error(\"Send kafka callback msg failed : \" + e);\n+    }\n+  }\n+\n+  /**\n+   * Method helps to create {@link KafkaProducer}. Here we set acks = all and retries = 3 by default to ensure no data\n+   * loss.\n+   *\n+   * @param props Kafka configs\n+   * @return A {@link KafkaProducer}\n+   */\n+  public KafkaProducer<String, String> createProducer(Properties props) {\n+    Properties kafkaProducerProps = new Properties();\n+    // bootstrap.servers\n+    kafkaProducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+    // default \"all\" to ensure no message loss\n+    kafkaProducerProps.setProperty(ProducerConfig.ACKS_CONFIG, props.getProperty(CALLBACK_KAFKA_ACKS));\n+    // retries 3 times by default\n+    kafkaProducerProps.setProperty(ProducerConfig.RETRIES_CONFIG, props.getProperty(CALLBACK_KAFKA_RETRIES));\n+    kafkaProducerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+    kafkaProducerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+\n+    LOG.info(\"Callback kafka producer init with configs: \"\n+        + HoodieWriteCommitCallbackUtil.convertToJsonString(kafkaProducerProps));\n+    return new KafkaProducer<String, String>(kafkaProducerProps);\n+  }\n+\n+  /**\n+   * Method helps to create a {@link ProducerRecord}. To ensure the order of the callback messages, we should guarantee\n+   * that the callback message of the same table will goes to the same partition. Therefore, if user does not specify\n+   * the partition, we can use the table name as {@link ProducerRecord} key.\n+   *\n+   * @param props       Kafka configs\n+   * @param callbackMsg Callback message\n+   * @return Callback {@link ProducerRecord}\n+   */\n+  private ProducerRecord<String, String> buildProducerRecord(Properties props, String callbackMsg) {\n+    String partition = props.getProperty(CALLBACK_KAFKA_PARTITION);\n+    if (null != partition) {\n+      return new ProducerRecord<String, String>(topic,\n+          Integer.valueOf(partition),\n+          props.getProperty(TABLE_NAME),\n+          callbackMsg);\n+    } else {\n+      return new ProducerRecord<String, String>(topic,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "author": {"user": {"login": "wangxianghu", "name": "wangxianghu"}}, "url": "https://github.com/apache/hudi/commit/7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "committedDate": "2020-08-17T08:12:29Z", "message": "resolve style issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjYxMTIy", "url": "https://github.com/apache/hudi/pull/1886#pullrequestreview-468261122", "createdAt": "2020-08-17T08:21:12Z", "commit": {"oid": "7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4727, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}