{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTEwODQ5", "number": 2094, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNDo0NVrOEktoOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNjo0MFrOEktqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMxNzcxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNDo0NVrOHT0Nlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNDo0NVrOHT0Nlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MDQzOQ==", "bodyText": "just reordering the APIs. API order is sth like inflight commit, commit, basefile, logfile,", "url": "https://github.com/apache/hudi/pull/2094#discussion_r490540439", "createdAt": "2020-09-17T20:24:45Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "diffHunk": "@@ -268,16 +292,16 @@ public boolean baseFileExists(String partition, String instantTime, String fileI\n     }\n   }\n \n-  public Path getPartitionPath(String partition) {\n-    return new Path(Paths.get(basePath, partition).toUri());\n-  }\n-\n-  public String getBaseFileNameById(String fileId) {\n-    return baseFileName(currentInstantTime, fileId);\n+  public boolean logFilesExist(String partition, String instantTime, String fileId, int... versions) {\n+    return Arrays.stream(versions).allMatch(v -> logFileExists(partition, instantTime, fileId, v));\n   }\n \n-  public Path getBaseFilePath(String partition, String fileId) {\n-    return new Path(Paths.get(basePath, partition, getBaseFileNameById(fileId)).toUri());\n+  public boolean logFileExists(String partition, String instantTime, String fileId, int version) {\n+    try {\n+      return fs.exists(new Path(Paths.get(basePath, partition, logFileName(instantTime, fileId, version)).toString()));\n+    } catch (IOException e) {\n+      throw new HoodieTestTableException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c08c85a98f04ed782e0d27e1248bd733d7f9a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMxODIwOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNDo1MlrOHT0N3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNDo1MlrOHT0N3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MDUxMA==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/2094#discussion_r490540510", "createdAt": "2020-09-17T20:24:52Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "diffHunk": "@@ -292,16 +316,16 @@ public Path getRequestedCompactionFilePath(String instantTime) {\n     return new Path(Paths.get(basePath, HoodieTableMetaClient.AUXILIARYFOLDER_NAME, instantTime + HoodieTimeline.REQUESTED_COMPACTION_EXTENSION).toUri());\n   }\n \n-  public boolean logFilesExist(String partition, String instantTime, String fileId, int... versions) {\n-    return Arrays.stream(versions).allMatch(v -> logFileExists(partition, instantTime, fileId, v));\n+  public Path getPartitionPath(String partition) {\n+    return new Path(Paths.get(basePath, partition).toUri());\n   }\n \n-  public boolean logFileExists(String partition, String instantTime, String fileId, int version) {\n-    try {\n-      return fs.exists(new Path(Paths.get(basePath, partition, logFileName(instantTime, fileId, version)).toString()));\n-    } catch (IOException e) {\n-      throw new HoodieTestTableException(e);\n-    }\n+  public Path getBaseFilePath(String partition, String fileId) {\n+    return new Path(Paths.get(basePath, partition, getBaseFileNameById(fileId)).toUri());\n+  }\n+\n+  public String getBaseFileNameById(String fileId) {\n+    return baseFileName(currentInstantTime, fileId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c08c85a98f04ed782e0d27e1248bd733d7f9a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMyMDY5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/CompactionTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNTozOFrOHT0PjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNTozOFrOHT0PjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MDk0MQ==", "bodyText": "Class that is not an actual test should not start with Test", "url": "https://github.com/apache/hudi/pull/2094#discussion_r490540941", "createdAt": "2020-09-17T20:25:38Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/CompactionTestUtils.java", "diffHunk": "@@ -195,11 +195,11 @@ public static HoodieCompactionPlan createCompactionPlan(HoodieTableMetaClient me\n   /**\n    * The hoodie data file for testing.\n    */\n-  public static class TestHoodieBaseFile extends HoodieBaseFile {\n+  public static class DummyHoodieBaseFile extends HoodieBaseFile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c08c85a98f04ed782e0d27e1248bd733d7f9a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMyMzk4OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/table/action/rollback/TestCopyOnWriteRollbackActionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNjo0MFrOHT0Rvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNjo0MFrOHT0Rvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MTUwMw==", "bodyText": "change to swtich for case completeness", "url": "https://github.com/apache/hudi/pull/2094#discussion_r490541503", "createdAt": "2020-09-17T20:26:40Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/rollback/TestCopyOnWriteRollbackActionExecutor.java", "diffHunk": "@@ -94,34 +89,40 @@ public void testCopyOnWriteRollbackActionExecutorForFileListingAsGenerateFile()\n \n     // assert hoodieRollbackStats\n     assertEquals(hoodieRollbackStats.size(), 3);\n-    hoodieRollbackStats.forEach(stat -> {\n-      if (stat.getPartitionPath().equals(\"2015/03/16\")) {\n-        assertEquals(1, stat.getSuccessDeleteFiles().size());\n-        assertEquals(0, stat.getFailedDeleteFiles().size());\n-        assertEquals(Collections.EMPTY_MAP, stat.getCommandBlocksCount());\n-        assertEquals(\"file:\" + HoodieTestUtils.getDataFilePath(basePath, \"2015/03/16\", commitTime2, file21),\n-            stat.getSuccessDeleteFiles().get(0));\n-      } else if (stat.getPartitionPath().equals(\"2015/03/17\")) {\n-        assertEquals(1, stat.getSuccessDeleteFiles().size());\n-        assertEquals(0, stat.getFailedDeleteFiles().size());\n-        assertEquals(Collections.EMPTY_MAP, stat.getCommandBlocksCount());\n-        assertEquals(\"file:\" + HoodieTestUtils.getDataFilePath(basePath, \"2015/03/17\", commitTime2, file22),\n-            stat.getSuccessDeleteFiles().get(0));\n-      } else if (stat.getPartitionPath().equals(\"2016/03/15\")) {\n-        assertEquals(0, stat.getSuccessDeleteFiles().size());\n-        assertEquals(0, stat.getFailedDeleteFiles().size());\n-        assertEquals(Collections.EMPTY_MAP, stat.getCommandBlocksCount());\n+    for (HoodieRollbackStat stat : hoodieRollbackStats) {\n+      switch (stat.getPartitionPath()) {\n+        case p1:\n+          assertEquals(1, stat.getSuccessDeleteFiles().size());\n+          assertEquals(0, stat.getFailedDeleteFiles().size());\n+          assertEquals(Collections.EMPTY_MAP, stat.getCommandBlocksCount());\n+          assertEquals(testTable.forCommit(\"002\").getBaseFilePath(p1, \"id21\").toString(),\n+              stat.getSuccessDeleteFiles().get(0));\n+          break;\n+        case p2:\n+          assertEquals(1, stat.getSuccessDeleteFiles().size());\n+          assertEquals(0, stat.getFailedDeleteFiles().size());\n+          assertEquals(Collections.EMPTY_MAP, stat.getCommandBlocksCount());\n+          assertEquals(testTable.forCommit(\"002\").getBaseFilePath(p2, \"id22\").toString(),\n+              stat.getSuccessDeleteFiles().get(0));\n+          break;\n+        case p3:\n+          assertEquals(0, stat.getSuccessDeleteFiles().size());\n+          assertEquals(0, stat.getFailedDeleteFiles().size());\n+          assertEquals(Collections.EMPTY_MAP, stat.getCommandBlocksCount());\n+          break;\n+        default:\n+          fail(\"Unexpected partition: \" + stat.getPartitionPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c08c85a98f04ed782e0d27e1248bd733d7f9a"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4289, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}