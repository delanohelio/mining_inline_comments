{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMTM4MDAw", "number": 1302, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxOTo0MlrODcpbbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo0NToxMFrODc-0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY1NDg3OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/TestCleaner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxOTo0MlrOFky5Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxOTo0MlrOFky5Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNjkxNA==", "bodyText": "This line is too long, can we move something to the new line?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374126914", "createdAt": "2020-02-03T14:19:42Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/test/java/org/apache/hudi/TestCleaner.java", "diffHunk": "@@ -1079,19 +1081,17 @@ private void testPendingCompactions(HoodieWriteConfig config, int expNumFilesDel\n     });\n \n     // Test for progress (Did we clean some files ?)\n-    long numFilesUnderCompactionDeleted = hoodieCleanStats.stream().flatMap(cleanStat -> {\n-      return convertPathToFileIdWithCommitTime(newMetaClient, cleanStat.getDeletePathPatterns())\n-          .map(fileIdWithCommitTime -> {\n-            if (expFileIdToPendingCompaction.containsKey(fileIdWithCommitTime.getKey())) {\n-              Assert.assertTrue(\"Deleted instant time must be less than pending compaction\",\n-                  HoodieTimeline.compareTimestamps(\n-                      fileIdToLatestInstantBeforeCompaction.get(fileIdWithCommitTime.getKey()),\n-                      fileIdWithCommitTime.getValue(), HoodieTimeline.GREATER));\n-              return true;\n-            }\n-            return false;\n-          });\n-    }).filter(x -> x).count();\n+    long numFilesUnderCompactionDeleted = hoodieCleanStats.stream().flatMap(cleanStat -> convertPathToFileIdWithCommitTime(newMetaClient, cleanStat.getDeletePathPatterns())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY3NzI0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieGlobalBloomIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNTo0NlrOFkzGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNTo0NlrOFkzGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMDM2NQ==", "bodyText": "Shall we need to add Type here or just \"Unknown key\"?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374130365", "createdAt": "2020-02-03T14:25:46Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieGlobalBloomIndex.java", "diffHunk": "@@ -265,21 +265,29 @@ public void testTagLocation() throws Exception {\n     JavaRDD<HoodieRecord> taggedRecordRDD = index.tagLocation(recordRDD, jsc, table);\n \n     for (HoodieRecord record : taggedRecordRDD.collect()) {\n-      if (record.getRecordKey().equals(\"000\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename0)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange1.getJsonData());\n-      } else if (record.getRecordKey().equals(\"001\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename2)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange2.getJsonData());\n-      } else if (record.getRecordKey().equals(\"002\")) {\n-        assertTrue(!record.isCurrentLocationKnown());\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange3.getJsonData());\n-      } else if (record.getRecordKey().equals(\"003\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename3)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange5.getJsonData());\n-      } else if (record.getRecordKey().equals(\"004\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename3)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange4.getJsonData());\n+      switch (record.getRecordKey()) {\n+        case \"000\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename0));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange1.getJsonData());\n+          break;\n+        case \"001\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename2));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange2.getJsonData());\n+          break;\n+        case \"002\":\n+          assertFalse(record.isCurrentLocationKnown());\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange3.getJsonData());\n+          break;\n+        case \"003\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename3));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange5.getJsonData());\n+          break;\n+        case \"004\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename3));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange4.getJsonData());\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown Key Type :\" + record.getRecordKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY5NzczOnYy", "diffSide": "LEFT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMToyNlrOFkzTQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzozNzoxMVrOFk51eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzU3MA==", "bodyText": "Can we move @Override close to the method so that we do not need to change this /**. WDYT?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374133570", "createdAt": "2020-02-03T14:31:26Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -279,7 +277,7 @@ public void close() throws IOException {\n   }\n \n   @Override\n-  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0MDYzMw==", "bodyText": "done", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374240633", "createdAt": "2020-02-03T17:37:11Z", "author": {"login": "smarthi"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -279,7 +277,7 @@ public void close() throws IOException {\n   }\n \n   @Override\n-  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzU3MA=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcyMTc3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODoyMVrOFkziew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODoyMVrOFkziew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzQ2Nw==", "bodyText": "If it's only a single-line comment, we can use //. WDYT?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137467", "createdAt": "2020-02-03T14:38:21Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -322,7 +322,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n       assertEquals(\"Expect only valid data-file\", dataFileName, dataFiles.get(0).getFileName());\n     }\n \n-    /** Merge API Tests **/\n+    /* Merge API Tests **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcyMjYwOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODozOFrOFkzjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODozOFrOFkzjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzYwMQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137601", "createdAt": "2020-02-03T14:38:38Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -355,7 +355,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n     assertEquals(\"Log File Order check\", fileName4, logFiles.get(0).getFileName());\n     assertEquals(\"Log File Order check\", fileName3, logFiles.get(1).getFileName());\n \n-    /** Data Files API tests */\n+    /* Data Files API tests */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcyMzQ2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODo1MFrOFkzjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODo1MFrOFkzjgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzcyOA==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137728", "createdAt": "2020-02-03T14:38:50Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -507,7 +507,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n     assertEquals(\"Log File Order check\", fileName4, logFiles.get(0).getFileName());\n     assertEquals(\"Log File Order check\", fileName3, logFiles.get(1).getFileName());\n \n-    /** Data Files API tests */\n+    /* Data Files API tests */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcyODg3OnYy", "diffSide": "RIGHT", "path": "hudi-hadoop-mr/src/main/java/org/apache/hudi/hadoop/hive/HoodieCombineHiveInputFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo0MDoyNVrOFkzm5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo0MDoyNVrOFkzm5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzODU5Ng==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374138596", "createdAt": "2020-02-03T14:40:25Z", "author": {"login": "yanghua"}, "path": "hudi-hadoop-mr/src/main/java/org/apache/hudi/hadoop/hive/HoodieCombineHiveInputFormat.java", "diffHunk": "@@ -353,9 +352,9 @@ public int hashCode() {\n     init(job);\n     Map<Path, ArrayList<String>> pathToAliases = mrwork.getPathToAliases();\n     Map<String, Operator<? extends OperatorDesc>> aliasToWork = mrwork.getAliasToWork();\n-    /** MOD - Initialize a custom combine input format shim that will call listStatus on the custom inputFormat **/\n+    /* MOD - Initialize a custom combine input format shim that will call listStatus on the custom inputFormat **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzE1OTI2OnYy", "diffSide": "LEFT", "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeRecordReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo0NToxMFrOFlUeYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo1MDozOVrOFlUp-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NzA5MQ==", "bodyText": "any reason to remove the assert?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374677091", "createdAt": "2020-02-04T13:45:10Z", "author": {"login": "leesf"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeRecordReader.java", "diffHunk": "@@ -491,7 +491,6 @@ public void testSchemaEvolutionAndRollbackBlockInLastLogFile() throws Exception\n     writer = writeRollbackBlockToLogFile(partitionDir, schema, \"fileid0\", commitTime, newCommitTime, \"101\", 1);\n     logFilePaths.add(writer.getLogFile().getPath().toString());\n     writer.close();\n-    assertTrue(\"block - size should be > 0\", size > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3ODQyNQ==", "bodyText": "Intellij IDEA shows that the size is always larger than 0, so the assertion is always true.", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374678425", "createdAt": "2020-02-04T13:47:33Z", "author": {"login": "yanghua"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeRecordReader.java", "diffHunk": "@@ -491,7 +491,6 @@ public void testSchemaEvolutionAndRollbackBlockInLastLogFile() throws Exception\n     writer = writeRollbackBlockToLogFile(partitionDir, schema, \"fileid0\", commitTime, newCommitTime, \"101\", 1);\n     logFilePaths.add(writer.getLogFile().getPath().toString());\n     writer.close();\n-    assertTrue(\"block - size should be > 0\", size > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NzA5MQ=="}, "originalCommit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4MDA1Nw==", "bodyText": "okay, got it.", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374680057", "createdAt": "2020-02-04T13:50:39Z", "author": {"login": "leesf"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeRecordReader.java", "diffHunk": "@@ -491,7 +491,6 @@ public void testSchemaEvolutionAndRollbackBlockInLastLogFile() throws Exception\n     writer = writeRollbackBlockToLogFile(partitionDir, schema, \"fileid0\", commitTime, newCommitTime, \"101\", 1);\n     logFilePaths.add(writer.getLogFile().getPath().toString());\n     writer.close();\n-    assertTrue(\"block - size should be > 0\", size > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NzA5MQ=="}, "originalCommit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 36, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}