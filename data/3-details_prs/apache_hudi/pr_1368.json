{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzQzNDA0", "number": 1368, "title": "[HUDI-650] Modify handleUpdate path to validate partitionPath", "bodyText": "What is the purpose of the pull request\nHoodieTable handleUpdate takes in fileId and list of records. It does not validate all records belong to same partitionPath. This is error prone - there is already at least one test that is passing in records that belong to several partitions to this method. Fix to add partitionPath and also validate all records belong to same partition path.\nI'm not entirely sure this change is needed though. I think its cleaner to include partition path everywhere. It is a good safeguard, but maybe its unlikely this can happen in production. Sending it out since i already spent some time. I can discard if others think this is unnecessary.\nBrief change log\n\nDo not assume first record partition can be used for all remaining records\nTrack partition path in Bucket and in Partitioner\nFail updates if they somehow end up in wrong partition\nFix broken test to validate requests fail\nThere is one other test commented out (looks like by mistake). Bring it back\n\nVerify this pull request\nThis pull request is already covered by existing tests, such as (please describe tests).\nTestCopyOnWriteTable (especially fixed broken testInsertUpsertWithHoodieAvroPayload)\nTestMergeOnReadTable\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-03T04:55:24Z", "url": "https://github.com/apache/hudi/pull/1368", "merged": true, "mergeCommit": {"oid": "83fb9651f368351446bb6ef0c9ebde34cf61b809"}, "closed": true, "closedAt": "2020-03-20T15:37:23Z", "author": {"login": "satishkotha"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKGqaigBqjMwOTMzNjY2MDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPiWsDAFqTM3ODU5MDI2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d1b680316220e2828eb93479e9c214d66f5e737", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/0d1b680316220e2828eb93479e9c214d66f5e737", "committedDate": "2020-03-03T20:15:28Z", "message": "Fix handleUpdate to include partitionPath"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "0d1b680316220e2828eb93479e9c214d66f5e737", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/0d1b680316220e2828eb93479e9c214d66f5e737", "committedDate": "2020-03-03T20:15:28Z", "message": "Fix handleUpdate to include partitionPath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90cd096fe13610a232c0c350b92c41df47a59153", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/90cd096fe13610a232c0c350b92c41df47a59153", "committedDate": "2020-03-03T20:28:17Z", "message": "remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzQ3MDEz", "url": "https://github.com/apache/hudi/pull/1368#pullrequestreview-368347013", "createdAt": "2020-03-03T21:43:45Z", "commit": {"oid": "90cd096fe13610a232c0c350b92c41df47a59153"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c45e281fe88416405a6e8e8defef0c89641557b6", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/c45e281fe88416405a6e8e8defef0c89641557b6", "committedDate": "2020-03-03T21:47:26Z", "message": "trigger Travis rebuild"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a68d29b4d7a247fee3b54c5841fafebb8a2251", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/39a68d29b4d7a247fee3b54c5841fafebb8a2251", "committedDate": "2020-03-04T18:43:26Z", "message": "add partitionpath for AppendHandle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzM1MzM0", "url": "https://github.com/apache/hudi/pull/1368#pullrequestreview-371335334", "createdAt": "2020-03-09T16:27:47Z", "commit": {"oid": "39a68d29b4d7a247fee3b54c5841fafebb8a2251"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoyNzo0N1rOFzv6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoyOTozNVrOFzv_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNjc3Mg==", "bodyText": "Can you add descriptive comments at the function level on what this tests and the steps involved ?", "url": "https://github.com/apache/hudi/pull/1368#discussion_r389806772", "createdAt": "2020-03-09T16:27:47Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/TestMergeOnReadTable.java", "diffHunk": "@@ -1208,6 +1207,83 @@ public void testRollingStatsWithSmallFileHandling() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testHandleUpdateWithMultiplePartitions() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a68d29b4d7a247fee3b54c5841fafebb8a2251"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNzEyMQ==", "bodyText": "Can you add comment on why you are expecting errors here ?", "url": "https://github.com/apache/hudi/pull/1368#discussion_r389807121", "createdAt": "2020-03-09T16:28:21Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/TestMergeOnReadTable.java", "diffHunk": "@@ -1208,6 +1207,83 @@ public void testRollingStatsWithSmallFileHandling() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testHandleUpdateWithMultiplePartitions() throws Exception {\n+    HoodieWriteConfig cfg = getConfig(true);\n+    try (HoodieWriteClient client = getWriteClient(cfg);) {\n+\n+      /**\n+       * Write 1 (only inserts, written as parquet file)\n+       */\n+      String newCommitTime = \"001\";\n+      client.startCommitWithTime(newCommitTime);\n+\n+      List<HoodieRecord> records = dataGen.generateInserts(newCommitTime, 20);\n+      JavaRDD<HoodieRecord> writeRecords = jsc.parallelize(records, 1);\n+\n+      List<WriteStatus> statuses = client.upsert(writeRecords, newCommitTime).collect();\n+      assertNoWriteErrors(statuses);\n+\n+      HoodieTableMetaClient metaClient = new HoodieTableMetaClient(jsc.hadoopConfiguration(), cfg.getBasePath());\n+      HoodieMergeOnReadTable hoodieTable = (HoodieMergeOnReadTable) HoodieTable.getHoodieTable(metaClient, cfg, jsc);\n+\n+      Option<HoodieInstant> deltaCommit = metaClient.getActiveTimeline().getDeltaCommitTimeline().firstInstant();\n+      assertTrue(deltaCommit.isPresent());\n+      assertEquals(\"Delta commit should be 001\", \"001\", deltaCommit.get().getTimestamp());\n+\n+      Option<HoodieInstant> commit = metaClient.getActiveTimeline().getCommitTimeline().firstInstant();\n+      assertFalse(commit.isPresent());\n+\n+      FileStatus[] allFiles = HoodieTestUtils.listAllDataFilesInPath(metaClient.getFs(), cfg.getBasePath());\n+      BaseFileOnlyView roView =\n+              new HoodieTableFileSystemView(metaClient, metaClient.getCommitTimeline().filterCompletedInstants(), allFiles);\n+      Stream<HoodieBaseFile> dataFilesToRead = roView.getLatestBaseFiles();\n+      assertFalse(dataFilesToRead.findAny().isPresent());\n+\n+      roView = new HoodieTableFileSystemView(metaClient, hoodieTable.getCompletedCommitsTimeline(), allFiles);\n+      dataFilesToRead = roView.getLatestBaseFiles();\n+      assertTrue(\"should list the parquet files we wrote in the delta commit\",\n+              dataFilesToRead.findAny().isPresent());\n+\n+      /**\n+       * Write 2 (only updates, written to .log file)\n+       */\n+      newCommitTime = \"002\";\n+      client.startCommitWithTime(newCommitTime);\n+\n+      records = dataGen.generateUpdates(newCommitTime, records);\n+      writeRecords = jsc.parallelize(records, 1);\n+      statuses = client.upsert(writeRecords, newCommitTime).collect();\n+      assertNoWriteErrors(statuses);\n+\n+      /**\n+       * Write 3 (only deletes, written to .log file)\n+       */\n+      final String newDeleteTime = \"004\";\n+      final String partitionPath = records.get(0).getPartitionPath();\n+      final String fileId = statuses.get(0).getFileId();\n+      client.startCommitWithTime(newDeleteTime);\n+\n+      List<HoodieRecord> fewRecordsForDelete = dataGen.generateDeletesFromExistingRecords(records);\n+      JavaRDD<HoodieRecord> deleteRDD = jsc.parallelize(fewRecordsForDelete, 1);\n+\n+      // initialize partitioner\n+      hoodieTable.getUpsertPartitioner(new WorkloadProfile(deleteRDD));\n+      final List<List<WriteStatus>> deleteStatus = jsc.parallelize(Arrays.asList(1)).map(x -> {\n+        return hoodieTable.handleUpdate(newDeleteTime, partitionPath, fileId, fewRecordsForDelete.iterator());\n+      }).map(x -> (List<WriteStatus>) HoodieClientTestUtils.collectStatuses(x)).collect();\n+\n+      // Verify there are  errors\n+      WriteStatus status = deleteStatus.get(0).get(0);\n+      assertTrue(status.hasErrors());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a68d29b4d7a247fee3b54c5841fafebb8a2251"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNzg5Ng==", "bodyText": "Now that all handles have partitionPath, can this be moved to base class (HoodieWriteHandle ?)", "url": "https://github.com/apache/hudi/pull/1368#discussion_r389807896", "createdAt": "2020-03-09T16:29:35Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/io/HoodieMergeHandle.java", "diffHunk": "@@ -61,6 +61,7 @@\n   private Map<String, HoodieRecord<T>> keyToNewRecords;\n   private Set<String> writtenRecordKeys;\n   private HoodieStorageWriter<IndexedRecord> storageWriter;\n+  private String partitionPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a68d29b4d7a247fee3b54c5841fafebb8a2251"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODUyNjc0", "url": "https://github.com/apache/hudi/pull/1368#pullrequestreview-374852674", "createdAt": "2020-03-16T00:32:31Z", "commit": {"oid": "39a68d29b4d7a247fee3b54c5841fafebb8a2251"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMDozMjozMlrOF2iegg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMDozMjozMlrOF2iegg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjczMjI5MA==", "bodyText": "nitpick: delete 4 spaces in front.", "url": "https://github.com/apache/hudi/pull/1368#discussion_r392732290", "createdAt": "2020-03-16T00:32:32Z", "author": {"login": "smarthi"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/TestCopyOnWriteTable.java", "diffHunk": "@@ -209,8 +207,8 @@ public void testUpdateRecords() throws Exception {\n     metaClient = HoodieTableMetaClient.reload(metaClient);\n     final HoodieCopyOnWriteTable newTable = new HoodieCopyOnWriteTable(config, jsc);\n     List<WriteStatus> statuses = jsc.parallelize(Arrays.asList(1)).map(x -> {\n-      return newTable.handleUpdate(newCommitTime, updatedRecord1.getCurrentLocation().getFileId(),\n-          updatedRecords.iterator());\n+      return newTable.handleUpdate(newCommitTime, updatedRecord1.getPartitionPath(),\n+              updatedRecord1.getCurrentLocation().getFileId(), updatedRecords.iterator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a68d29b4d7a247fee3b54c5841fafebb8a2251"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd97065907d24dca0ba03d1bd0b205eac48e1ef6", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/fd97065907d24dca0ba03d1bd0b205eac48e1ef6", "committedDate": "2020-03-16T19:47:37Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTc5Mzg5", "url": "https://github.com/apache/hudi/pull/1368#pullrequestreview-377979389", "createdAt": "2020-03-19T18:17:47Z", "commit": {"oid": "fd97065907d24dca0ba03d1bd0b205eac48e1ef6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxNzo0N1rOF462pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxOToyM1rOF466SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyODgzNw==", "bodyText": "Can you add what the expected and actual partition path was in the exception message ?", "url": "https://github.com/apache/hudi/pull/1368#discussion_r395228837", "createdAt": "2020-03-19T18:17:47Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/io/HoodieAppendHandle.java", "diffHunk": "@@ -295,6 +294,13 @@ private Writer createLogWriter(Option<FileSlice> fileSlice, String baseCommitTim\n   }\n \n   private void writeToBuffer(HoodieRecord<T> record) {\n+    if (!partitionPath.equals(record.getPartitionPath())) {\n+      writeStatus.markFailure(record, new HoodieUpsertException(\"mismatched partition path\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd97065907d24dca0ba03d1bd0b205eac48e1ef6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTc2OQ==", "bodyText": "Same here.", "url": "https://github.com/apache/hudi/pull/1368#discussion_r395229769", "createdAt": "2020-03-19T18:19:23Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/io/HoodieMergeHandle.java", "diffHunk": "@@ -236,6 +233,10 @@ private boolean writeUpdateRecord(HoodieRecord<T> hoodieRecord, Option<IndexedRe\n \n   private boolean writeRecord(HoodieRecord<T> hoodieRecord, Option<IndexedRecord> indexedRecord) {\n     Option recordMetadata = hoodieRecord.getData().getMetadata();\n+    if (!partitionPath.equals(hoodieRecord.getPartitionPath())) {\n+      writeStatus.markFailure(hoodieRecord, new HoodieUpsertException(\"mismatched partition path\"), recordMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd97065907d24dca0ba03d1bd0b205eac48e1ef6"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9291773cb9328258961caa73a77c05b81e0174c", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/b9291773cb9328258961caa73a77c05b81e0174c", "committedDate": "2020-03-20T00:20:35Z", "message": "more detailed exception message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTkwMjYw", "url": "https://github.com/apache/hudi/pull/1368#pullrequestreview-378590260", "createdAt": "2020-03-20T15:36:30Z", "commit": {"oid": "b9291773cb9328258961caa73a77c05b81e0174c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}