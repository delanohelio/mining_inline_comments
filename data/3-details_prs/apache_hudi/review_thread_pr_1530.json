{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTc1MjM1", "number": 1530, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjozMjo1NFrOD0EcZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNDo1MVrOD0k3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTI1MzUwOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjozMjo1NFrOGI02FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzoyMzoxN1rOGJPpNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNzYwNA==", "bodyText": "redundant empty line?", "url": "https://github.com/apache/hudi/pull/1530#discussion_r411907604", "createdAt": "2020-04-21T06:32:54Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -59,9 +58,10 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0NjY3Nw==", "bodyText": "removed", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412346677", "createdAt": "2020-04-21T17:23:17Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -59,9 +58,10 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNzYwNA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTgwMTQ1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozNzo0OVrOGI5w9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzozODoxOFrOGJQTjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4ODIxMw==", "bodyText": "Can we use another name to distinguish each other?", "url": "https://github.com/apache/hudi/pull/1530#discussion_r411988213", "createdAt": "2020-04-21T08:37:49Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The JUnit 5 version of {@link org.apache.hudi.common.HoodieCommonTestHarness}.\n+ * <p>\n+ * To incrementally migrate test classes.\n+ */\n+public class HoodieCommonTestHarness extends org.apache.hudi.common.HoodieCommonTestHarness {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1NzUxNg==", "bodyText": "Fixed. Just note that the name should be renamed back to HoodieCommonTestHarness  once migrations done.", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412357516", "createdAt": "2020-04-21T17:38:18Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The JUnit 5 version of {@link org.apache.hudi.common.HoodieCommonTestHarness}.\n+ * <p>\n+ * To incrementally migrate test classes.\n+ */\n+public class HoodieCommonTestHarness extends org.apache.hudi.common.HoodieCommonTestHarness {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4ODIxMw=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDU2Mjg5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNDowN1rOGJk1xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNDowN1rOGJk1xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5Mzk1Ng==", "bodyText": "here", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412693956", "createdAt": "2020-04-22T06:04:07Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "diffHunk": "@@ -18,41 +18,41 @@\n \n package org.apache.hudi.common.table;\n \n-import org.apache.hudi.common.HoodieCommonTestHarness;\n import org.apache.hudi.common.model.HoodieTestUtils;\n import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n import org.apache.hudi.common.table.timeline.HoodieInstant;\n import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarnessJunit5;\n import org.apache.hudi.common.util.Option;\n \n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n \n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n \n /**\n  * Tests hoodie table meta client {@link HoodieTableMetaClient}.\n  */\n-public class TestHoodieTableMetaClient extends HoodieCommonTestHarness {\n+public class TestHoodieTableMetaClient extends HoodieCommonTestHarnessJunit5 {\n \n-  @Before\n+  @BeforeEach\n   public void init() throws IOException {\n     initMetaClient();\n   }\n \n   @Test\n   public void checkMetadata() {\n-    assertEquals(\"Table name should be raw_trips\", HoodieTestUtils.RAW_TRIPS_TEST_NAME,\n-        metaClient.getTableConfig().getTableName());\n-    assertEquals(\"Basepath should be the one assigned\", basePath, metaClient.getBasePath());\n-    assertEquals(\"Metapath should be ${basepath}/.hoodie\", basePath + \"/.hoodie\", metaClient.getMetaPath());\n+    assertEquals(HoodieTestUtils.RAW_TRIPS_TEST_NAME, metaClient.getTableConfig().getTableName(), \"Table name should be raw_trips\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ebb73afb310bb6c33e5fda2e937a561790b9d6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDU2MzUzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNDoyM1rOGJk2HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNDoyM1rOGJk2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NDA0NQ==", "bodyText": "here", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412694045", "createdAt": "2020-04-22T06:04:23Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "diffHunk": "@@ -67,16 +67,15 @@ public void checkSerDe() {\n     commitTimeline.saveAsComplete(instant, Option.of(\"test-detail\".getBytes()));\n     commitTimeline = commitTimeline.reload();\n     HoodieInstant completedInstant = HoodieTimeline.getCompletedInstant(instant);\n-    assertEquals(\"Commit should be 1 and completed\", completedInstant, commitTimeline.getInstants().findFirst().get());\n-    assertArrayEquals(\"Commit value should be \\\"test-detail\\\"\", \"test-detail\".getBytes(),\n-        commitTimeline.getInstantDetails(completedInstant).get());\n+    assertEquals(completedInstant, commitTimeline.getInstants().findFirst().get(), \"Commit should be 1 and completed\");\n+    assertArrayEquals(\"test-detail\".getBytes(), commitTimeline.getInstantDetails(completedInstant).get(), \"Commit value should be \\\"test-detail\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ebb73afb310bb6c33e5fda2e937a561790b9d6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDU2NDYxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNDo1MVrOGJk2yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNDo1MVrOGJk2yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NDIxOA==", "bodyText": "here", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412694218", "createdAt": "2020-04-22T06:04:51Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "diffHunk": "@@ -85,21 +84,20 @@ public void checkCommitTimeline() {\n     // Commit timeline should not auto-reload every time getActiveCommitTimeline(), it should be cached\n     activeTimeline = metaClient.getActiveTimeline();\n     activeCommitTimeline = activeTimeline.getCommitTimeline();\n-    assertTrue(\"Should be empty commit timeline\", activeCommitTimeline.empty());\n+    assertTrue(activeCommitTimeline.empty(), \"Should be empty commit timeline\");\n \n     HoodieInstant completedInstant = HoodieTimeline.getCompletedInstant(instant);\n     activeTimeline = activeTimeline.reload();\n     activeCommitTimeline = activeTimeline.getCommitTimeline();\n-    assertFalse(\"Should be the 1 commit we made\", activeCommitTimeline.empty());\n-    assertEquals(\"Commit should be 1\", completedInstant, activeCommitTimeline.getInstants().findFirst().get());\n-    assertArrayEquals(\"Commit value should be \\\"test-detail\\\"\", \"test-detail\".getBytes(),\n-        activeCommitTimeline.getInstantDetails(completedInstant).get());\n+    assertFalse(activeCommitTimeline.empty(), \"Should be the 1 commit we made\");\n+    assertEquals(completedInstant, activeCommitTimeline.getInstants().findFirst().get(), \"Commit should be 1\");\n+    assertArrayEquals(\"test-detail\".getBytes(), activeCommitTimeline.getInstantDetails(completedInstant).get(), \"Commit value should be \\\"test-detail\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ebb73afb310bb6c33e5fda2e937a561790b9d6"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4800, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}