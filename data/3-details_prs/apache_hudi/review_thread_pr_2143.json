{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDY2NzE1", "number": 2143, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjoyNDo1NVrOEqJQdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1MTozMFrOEr2Q_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjI3MzE3OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjoyNDo1NVrOHcMFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjoyNDo1NVrOHcMFfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyMDE4OQ==", "bodyText": "refer to hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java#writeRecordsToLogFiles", "url": "https://github.com/apache/hudi/pull/2143#discussion_r499320189", "createdAt": "2020-10-05T02:24:55Z", "author": {"login": "xushiyan"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -128,4 +148,37 @@ public HoodieWriteableTestTable withInserts(String partition, String fileId, Hoo\n \n     return this;\n   }\n+\n+  public HoodieWriteableTestTable withLogAppends(HoodieRecord... records) throws Exception {\n+    return withLogAppends(Arrays.asList(records));\n+  }\n+\n+  public HoodieWriteableTestTable withLogAppends(List<HoodieRecord> records) throws Exception {\n+    for (List<HoodieRecord> groupedRecords: records.stream()\n+        .collect(Collectors.groupingBy(HoodieRecord::getCurrentLocation)).values()) {\n+      appendRecordsToLogFile(groupedRecords);\n+    }\n+    return this;\n+  }\n+\n+  private void appendRecordsToLogFile(List<HoodieRecord> groupedRecords) throws Exception {\n+    String partitionPath = groupedRecords.get(0).getPartitionPath();\n+    HoodieRecordLocation location = groupedRecords.get(0).getCurrentLocation();\n+    try (HoodieLogFormat.Writer logWriter = HoodieLogFormat.newWriterBuilder().onParentPath(new Path(basePath, partitionPath))\n+        .withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(location.getFileId())\n+        .overBaseCommit(location.getInstantTime()).withFs(fs).build()) {\n+      Map<HoodieLogBlock.HeaderMetadataType, String> header = new HashMap<>();\n+      header.put(HoodieLogBlock.HeaderMetadataType.INSTANT_TIME, location.getInstantTime());\n+      header.put(HoodieLogBlock.HeaderMetadataType.SCHEMA, schema.toString());\n+      logWriter.appendBlock(new HoodieAvroDataBlock(groupedRecords.stream().map(r -> {\n+        try {\n+          GenericRecord val = (GenericRecord) r.getData().getInsertValue(schema).get();\n+          HoodieAvroUtils.addHoodieKeyToRecord(val, r.getRecordKey(), r.getPartitionPath(), \"\");\n+          return (IndexedRecord) val;\n+        } catch (IOException e) {\n+          return null;\n+        }\n+      }).collect(Collectors.toList()), header));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9dac8ea23598dc778a4d86058b919580da0d3d"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjI3NjI3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjoyNzoyOFrOHcMHWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjoyNzoyOFrOHcMHWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyMDY2Ng==", "bodyText": "change to return array to work with HoodieTableFileSystemView APIs which take in array", "url": "https://github.com/apache/hudi/pull/2143#discussion_r499320666", "createdAt": "2020-10-05T02:27:28Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestTable.java", "diffHunk": "@@ -348,12 +372,36 @@ public String getBaseFileNameById(String fileId) {\n     return baseFileName(currentInstantTime, fileId);\n   }\n \n-  public List<FileStatus> listAllFiles(String partitionPath) throws IOException {\n-    return FileSystemTestUtils.listRecursive(fs, new Path(Paths.get(basePath, partitionPath).toString()));\n+  public FileStatus[] listAllBaseFiles() throws IOException {\n+    return listAllBaseFiles(HoodieFileFormat.PARQUET.getFileExtension());\n+  }\n+\n+  public FileStatus[] listAllBaseFiles(String fileExtension) throws IOException {\n+    return FileSystemTestUtils.listRecursive(fs, new Path(basePath)).stream()\n+        .filter(status -> status.getPath().getName().endsWith(fileExtension))\n+        .toArray(FileStatus[]::new);\n+  }\n+\n+  public FileStatus[] listAllLogFiles() throws IOException {\n+    return listAllLogFiles(HoodieFileFormat.HOODIE_LOG.getFileExtension());\n+  }\n+\n+  public FileStatus[] listAllLogFiles(String fileExtension) throws IOException {\n+    return FileSystemTestUtils.listRecursive(fs, new Path(basePath)).stream()\n+        .filter(status -> status.getPath().getName().contains(fileExtension))\n+        .toArray(FileStatus[]::new);\n+  }\n+\n+  public FileStatus[] listAllBaseAndLogFiles() throws IOException {\n+    return Stream.concat(Stream.of(listAllBaseFiles()), Stream.of(listAllLogFiles())).toArray(FileStatus[]::new);\n+  }\n+\n+  public FileStatus[] listAllFilesInPartition(String partitionPath) throws IOException {\n+    return FileSystemTestUtils.listRecursive(fs, new Path(Paths.get(basePath, partitionPath).toString())).toArray(new FileStatus[0]);\n   }\n \n-  public List<FileStatus> listAllFilesInTempFolder() throws IOException {\n-    return FileSystemTestUtils.listRecursive(fs, new Path(Paths.get(basePath, HoodieTableMetaClient.TEMPFOLDER_NAME).toString()));\n+  public FileStatus[] listAllFilesInTempFolder() throws IOException {\n+    return FileSystemTestUtils.listRecursive(fs, new Path(Paths.get(basePath, HoodieTableMetaClient.TEMPFOLDER_NAME).toString())).toArray(new FileStatus[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9dac8ea23598dc778a4d86058b919580da0d3d"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDEyODgyOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1MDoyNVrOHe18gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMToyODoxOFrOHe3L5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwMzE2OQ==", "bodyText": "Considering the fluent APIs have one general pattern: method withXXX returns HoodieWriteableTestTable  itself. However, this method and above break this rule. WDYT about renaming them to getFileIdWithInserts or returnFileIdWithInserts?", "url": "https://github.com/apache/hudi/pull/2143#discussion_r502103169", "createdAt": "2020-10-09T00:50:25Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -94,6 +106,10 @@ public String withInserts(String partition) throws Exception {\n   }\n \n   public String withInserts(String partition, HoodieRecord... records) throws Exception {\n+    return withInserts(partition, Arrays.asList(records));\n+  }\n+\n+  public String withInserts(String partition, List<HoodieRecord> records) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9dac8ea23598dc778a4d86058b919580da0d3d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEyMzQ5Mw==", "bodyText": "sounds good.", "url": "https://github.com/apache/hudi/pull/2143#discussion_r502123493", "createdAt": "2020-10-09T01:28:18Z", "author": {"login": "xushiyan"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -94,6 +106,10 @@ public String withInserts(String partition) throws Exception {\n   }\n \n   public String withInserts(String partition, HoodieRecord... records) throws Exception {\n+    return withInserts(partition, Arrays.asList(records));\n+  }\n+\n+  public String withInserts(String partition, List<HoodieRecord> records) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwMzE2OQ=="}, "originalCommit": {"oid": "1d9dac8ea23598dc778a4d86058b919580da0d3d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDEzMzA4OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1MTozMFrOHe1-yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMTozNDo0M1rOHe3RSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwMzc1NQ==", "bodyText": "Logging the detailed exception information looks better?", "url": "https://github.com/apache/hudi/pull/2143#discussion_r502103755", "createdAt": "2020-10-09T00:51:30Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -128,4 +148,37 @@ public HoodieWriteableTestTable withInserts(String partition, String fileId, Hoo\n \n     return this;\n   }\n+\n+  public HoodieWriteableTestTable withLogAppends(HoodieRecord... records) throws Exception {\n+    return withLogAppends(Arrays.asList(records));\n+  }\n+\n+  public HoodieWriteableTestTable withLogAppends(List<HoodieRecord> records) throws Exception {\n+    for (List<HoodieRecord> groupedRecords: records.stream()\n+        .collect(Collectors.groupingBy(HoodieRecord::getCurrentLocation)).values()) {\n+      appendRecordsToLogFile(groupedRecords);\n+    }\n+    return this;\n+  }\n+\n+  private void appendRecordsToLogFile(List<HoodieRecord> groupedRecords) throws Exception {\n+    String partitionPath = groupedRecords.get(0).getPartitionPath();\n+    HoodieRecordLocation location = groupedRecords.get(0).getCurrentLocation();\n+    try (HoodieLogFormat.Writer logWriter = HoodieLogFormat.newWriterBuilder().onParentPath(new Path(basePath, partitionPath))\n+        .withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(location.getFileId())\n+        .overBaseCommit(location.getInstantTime()).withFs(fs).build()) {\n+      Map<HoodieLogBlock.HeaderMetadataType, String> header = new HashMap<>();\n+      header.put(HoodieLogBlock.HeaderMetadataType.INSTANT_TIME, location.getInstantTime());\n+      header.put(HoodieLogBlock.HeaderMetadataType.SCHEMA, schema.toString());\n+      logWriter.appendBlock(new HoodieAvroDataBlock(groupedRecords.stream().map(r -> {\n+        try {\n+          GenericRecord val = (GenericRecord) r.getData().getInsertValue(schema).get();\n+          HoodieAvroUtils.addHoodieKeyToRecord(val, r.getRecordKey(), r.getPartitionPath(), \"\");\n+          return (IndexedRecord) val;\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9dac8ea23598dc778a4d86058b919580da0d3d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEyNDg3NA==", "bodyText": "@yanghua ok fixed.", "url": "https://github.com/apache/hudi/pull/2143#discussion_r502124874", "createdAt": "2020-10-09T01:34:43Z", "author": {"login": "xushiyan"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -128,4 +148,37 @@ public HoodieWriteableTestTable withInserts(String partition, String fileId, Hoo\n \n     return this;\n   }\n+\n+  public HoodieWriteableTestTable withLogAppends(HoodieRecord... records) throws Exception {\n+    return withLogAppends(Arrays.asList(records));\n+  }\n+\n+  public HoodieWriteableTestTable withLogAppends(List<HoodieRecord> records) throws Exception {\n+    for (List<HoodieRecord> groupedRecords: records.stream()\n+        .collect(Collectors.groupingBy(HoodieRecord::getCurrentLocation)).values()) {\n+      appendRecordsToLogFile(groupedRecords);\n+    }\n+    return this;\n+  }\n+\n+  private void appendRecordsToLogFile(List<HoodieRecord> groupedRecords) throws Exception {\n+    String partitionPath = groupedRecords.get(0).getPartitionPath();\n+    HoodieRecordLocation location = groupedRecords.get(0).getCurrentLocation();\n+    try (HoodieLogFormat.Writer logWriter = HoodieLogFormat.newWriterBuilder().onParentPath(new Path(basePath, partitionPath))\n+        .withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(location.getFileId())\n+        .overBaseCommit(location.getInstantTime()).withFs(fs).build()) {\n+      Map<HoodieLogBlock.HeaderMetadataType, String> header = new HashMap<>();\n+      header.put(HoodieLogBlock.HeaderMetadataType.INSTANT_TIME, location.getInstantTime());\n+      header.put(HoodieLogBlock.HeaderMetadataType.SCHEMA, schema.toString());\n+      logWriter.appendBlock(new HoodieAvroDataBlock(groupedRecords.stream().map(r -> {\n+        try {\n+          GenericRecord val = (GenericRecord) r.getData().getInsertValue(schema).get();\n+          HoodieAvroUtils.addHoodieKeyToRecord(val, r.getRecordKey(), r.getPartitionPath(), \"\");\n+          return (IndexedRecord) val;\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwMzc1NQ=="}, "originalCommit": {"oid": "1d9dac8ea23598dc778a4d86058b919580da0d3d"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4324, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}