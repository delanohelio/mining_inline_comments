{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwODg4MTI2", "number": 1418, "title": "[HUDI-678] Make config package spark free", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nMake hudi-client config package spark free.\nBrief change log\n\nIntroduce AbstractConfig and subclass, currently only support SPARK.\nIntroduce ConfigHelpers to create AbstractConfig.\nIntroduce HoodieEngineType enum class, would specify to SPARK, FLINK, NATIVE.\nIntroduce HoodieEngineConfig class to specify HoodieEngine, now only supports SPARK.\n\nVerify this pull request\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-19T09:21:57Z", "url": "https://github.com/apache/hudi/pull/1418", "merged": true, "mergeCommit": {"oid": "8b0a4009a9c662f45a0b7bbbb6f01c2b07c36809"}, "closed": true, "closedAt": "2020-03-26T15:30:27Z", "author": {"login": "leesf"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPJ2MQgBqjMxNDUwNjI3NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRd3C9AFqTM4MjEyNzIwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "b43f27d93f8befdc1212cc3a6ed357da30866aad", "author": {"user": {"login": "leesf", "name": "leesf"}}, "url": "https://github.com/apache/hudi/commit/b43f27d93f8befdc1212cc3a6ed357da30866aad", "committedDate": "2020-03-19T11:59:28Z", "message": "[HUDI-678] Make config package spark free"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b43f27d93f8befdc1212cc3a6ed357da30866aad", "author": {"user": {"login": "leesf", "name": "leesf"}}, "url": "https://github.com/apache/hudi/commit/b43f27d93f8befdc1212cc3a6ed357da30866aad", "committedDate": "2020-03-19T11:59:28Z", "message": "[HUDI-678] Make config package spark free"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5de4068333756f776c78653545d253d0a1b9b92f", "author": {"user": {"login": "leesf", "name": "leesf"}}, "url": "https://github.com/apache/hudi/commit/5de4068333756f776c78653545d253d0a1b9b92f", "committedDate": "2020-03-20T07:21:59Z", "message": "[hotfix] remove useless code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjcwMTM5", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-378270139", "createdAt": "2020-03-20T07:24:53Z", "commit": {"oid": "5de4068333756f776c78653545d253d0a1b9b92f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzoyNDo1M1rOF5Jj9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzoyNDo1M1rOF5Jj9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2OTgxNQ==", "bodyText": "Could only use SparkConfig to place all these methods if only consider spark free, not multi-engine", "url": "https://github.com/apache/hudi/pull/1418#discussion_r395469815", "createdAt": "2020-03-20T07:24:53Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/config/AbstractConfig.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.config;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Abstract config for multi-engine.\n+ */\n+public abstract class AbstractConfig<T> {\n+  protected Properties props;\n+\n+  public AbstractConfig(Properties props) {\n+    this.props = props;\n+  }\n+\n+  public abstract long getMaxMemoryAllowedForMerge(String maxMemoryFraction);\n+\n+  public abstract T getWriteStatusStorageLevel();\n+\n+  public abstract T getBloomIndexInputStorageLevel();\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de4068333756f776c78653545d253d0a1b9b92f"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDU4MTk1", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-379058195", "createdAt": "2020-03-22T22:36:27Z", "commit": {"oid": "5de4068333756f776c78653545d253d0a1b9b92f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjozNjoyN1rOF5zDIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjozNjoyN1rOF5zDIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0OTUzNg==", "bodyText": "I feel we can just make it Spark free for now.. Multi-engine can be dealt with separately..?", "url": "https://github.com/apache/hudi/pull/1418#discussion_r396149536", "createdAt": "2020-03-22T22:36:27Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/config/AbstractConfig.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.config;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Abstract config for multi-engine.\n+ */\n+public abstract class AbstractConfig<T> {\n+  protected Properties props;\n+\n+  public AbstractConfig(Properties props) {\n+    this.props = props;\n+  }\n+\n+  public abstract long getMaxMemoryAllowedForMerge(String maxMemoryFraction);\n+\n+  public abstract T getWriteStatusStorageLevel();\n+\n+  public abstract T getBloomIndexInputStorageLevel();\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2OTgxNQ=="}, "originalCommit": {"oid": "5de4068333756f776c78653545d253d0a1b9b92f"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20438f8880e55440474e0ce0c2a486753845165b", "author": {"user": {"login": "leesf", "name": "leesf"}}, "url": "https://github.com/apache/hudi/commit/20438f8880e55440474e0ce0c2a486753845165b", "committedDate": "2020-03-23T05:54:19Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c65f1cec6ef42df3b05ddb727dd1a96070589be", "author": {"user": {"login": "leesf", "name": "leesf"}}, "url": "https://github.com/apache/hudi/commit/8c65f1cec6ef42df3b05ddb727dd1a96070589be", "committedDate": "2020-03-23T05:56:03Z", "message": "remove empty line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTY1MTc1", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-379165175", "createdAt": "2020-03-23T06:48:44Z", "commit": {"oid": "8c65f1cec6ef42df3b05ddb727dd1a96070589be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTkxMDk4", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-381591098", "createdAt": "2020-03-25T22:43:57Z", "commit": {"oid": "8c65f1cec6ef42df3b05ddb727dd1a96070589be"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo0Mzo1N1rOF7xKHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo0Nzo1OVrOF7xQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNTcwOA==", "bodyText": "single line? (also the usages above)", "url": "https://github.com/apache/hudi/pull/1418#discussion_r398215708", "createdAt": "2020-03-25T22:43:57Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieBloomIndex.java", "diffHunk": "@@ -69,7 +70,8 @@ public HoodieBloomIndex(HoodieWriteConfig config) {\n \n     // Step 0: cache the input record RDD\n     if (config.getBloomIndexUseCaching()) {\n-      recordRDD.persist(config.getBloomIndexInputStorageLevel());\n+      StorageLevel storageLevel = ConfigUtils.getBloomIndexInputStorageLevel(config.getProps());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65f1cec6ef42df3b05ddb727dd1a96070589be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjIxMA==", "bodyText": "rename to SparkConfigUtils? to make it explicit?", "url": "https://github.com/apache/hudi/pull/1418#discussion_r398216210", "createdAt": "2020-03-25T22:45:14Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/utils/ConfigUtils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.utils;\n+\n+import org.apache.hudi.config.HoodieIndexConfig;\n+\n+import org.apache.spark.SparkEnv;\n+import org.apache.spark.storage.StorageLevel;\n+import org.apache.spark.util.Utils;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieMemoryConfig.DEFAULT_MAX_MEMORY_FOR_SPILLABLE_MAP_IN_BYTES;\n+import static org.apache.hudi.config.HoodieMemoryConfig.DEFAULT_MIN_MEMORY_FOR_SPILLABLE_MAP_IN_BYTES;\n+import static org.apache.hudi.config.HoodieWriteConfig.WRITE_STATUS_STORAGE_LEVEL;\n+\n+/**\n+ * Config utils.\n+ */\n+public class ConfigUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65f1cec6ef42df3b05ddb727dd1a96070589be"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjQzOA==", "bodyText": "remove if unused?", "url": "https://github.com/apache/hudi/pull/1418#discussion_r398216438", "createdAt": "2020-03-25T22:45:48Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -565,6 +556,7 @@ public FileSystemViewStorageConfig getClientSpecifiedViewStorageConfig() {\n     private boolean isMemoryConfigSet = false;\n     private boolean isViewConfigSet = false;\n     private boolean isConsistencyGuardSet = false;\n+    private boolean isEngineConfigSet = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65f1cec6ef42df3b05ddb727dd1a96070589be"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNzI2OA==", "bodyText": "Okay.. if we call a Spark specific class here, then this does not achieve the purpose right..\ni.e you cannot move ConfigUtils to hudi-spark and keep config in hudi-writer-common without making hudi-writer-common depend on ConfigUtils?\nWe should change the caller of getMaxMemoryAllowedForMerge to use ConfigUtils.getXX()` just like how you did for storage level?", "url": "https://github.com/apache/hudi/pull/1418#discussion_r398217268", "createdAt": "2020-03-25T22:47:59Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMemoryConfig.java", "diffHunk": "@@ -113,40 +112,8 @@ public Builder withWriteStatusFailureFraction(double failureFraction) {\n       return this;\n     }\n \n-    /**\n-     * Dynamic calculation of max memory to use for for spillable map. user.available.memory = spark.executor.memory *\n-     * (1 - spark.memory.fraction) spillable.available.memory = user.available.memory * hoodie.memory.fraction. Anytime\n-     * the spark.executor.memory or the spark.memory.fraction is changed, the memory used for spillable map changes\n-     * accordingly\n-     */\n     private long getMaxMemoryAllowedForMerge(String maxMemoryFraction) {\n-      final String SPARK_EXECUTOR_MEMORY_PROP = \"spark.executor.memory\";\n-      final String SPARK_EXECUTOR_MEMORY_FRACTION_PROP = \"spark.memory.fraction\";\n-      // This is hard-coded in spark code {@link\n-      // https://github.com/apache/spark/blob/576c43fb4226e4efa12189b41c3bc862019862c6/core/src/main/scala/org/apache/\n-      // spark/memory/UnifiedMemoryManager.scala#L231} so have to re-define this here\n-      final String DEFAULT_SPARK_EXECUTOR_MEMORY_FRACTION = \"0.6\";\n-      // This is hard-coded in spark code {@link\n-      // https://github.com/apache/spark/blob/576c43fb4226e4efa12189b41c3bc862019862c6/core/src/main/scala/org/apache/\n-      // spark/SparkContext.scala#L471} so have to re-define this here\n-      final String DEFAULT_SPARK_EXECUTOR_MEMORY_MB = \"1024\"; // in MB\n-\n-      if (SparkEnv.get() != null) {\n-        // 1 GB is the default conf used by Spark, look at SparkContext.scala\n-        long executorMemoryInBytes = Utils.memoryStringToMb(\n-            SparkEnv.get().conf().get(SPARK_EXECUTOR_MEMORY_PROP, DEFAULT_SPARK_EXECUTOR_MEMORY_MB)) * 1024 * 1024L;\n-        // 0.6 is the default value used by Spark,\n-        // look at {@link\n-        // https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/SparkConf.scala#L507}\n-        double memoryFraction = Double.parseDouble(\n-            SparkEnv.get().conf().get(SPARK_EXECUTOR_MEMORY_FRACTION_PROP, DEFAULT_SPARK_EXECUTOR_MEMORY_FRACTION));\n-        double maxMemoryFractionForMerge = Double.parseDouble(maxMemoryFraction);\n-        double userAvailableMemory = executorMemoryInBytes * (1 - memoryFraction);\n-        long maxMemoryForMerge = (long) Math.floor(userAvailableMemory * maxMemoryFractionForMerge);\n-        return Math.max(DEFAULT_MIN_MEMORY_FOR_SPILLABLE_MAP_IN_BYTES, maxMemoryForMerge);\n-      } else {\n-        return DEFAULT_MAX_MEMORY_FOR_SPILLABLE_MAP_IN_BYTES;\n-      }\n+      return ConfigUtils.getMaxMemoryAllowedForMerge(props, maxMemoryFraction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65f1cec6ef42df3b05ddb727dd1a96070589be"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baed026d9f46420f9575741912ef8d6f84054a2d", "author": {"user": {"login": "leesf", "name": "leesf"}}, "url": "https://github.com/apache/hudi/commit/baed026d9f46420f9575741912ef8d6f84054a2d", "committedDate": "2020-03-26T00:11:44Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNzAxNjEy", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-381701612", "createdAt": "2020-03-26T04:53:31Z", "commit": {"oid": "baed026d9f46420f9575741912ef8d6f84054a2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo1MzozMVrOF73WQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo1MzozMVrOF73WQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNzEyMA==", "bodyText": "if the classes in config call the SparkConfigUtils, then we cannot claim its spark free right..\ncc @yanghua as well", "url": "https://github.com/apache/hudi/pull/1418#discussion_r398317120", "createdAt": "2020-03-26T04:53:31Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMemoryConfig.java", "diffHunk": "@@ -113,52 +112,20 @@ public Builder withWriteStatusFailureFraction(double failureFraction) {\n       return this;\n     }\n \n-    /**\n-     * Dynamic calculation of max memory to use for for spillable map. user.available.memory = spark.executor.memory *\n-     * (1 - spark.memory.fraction) spillable.available.memory = user.available.memory * hoodie.memory.fraction. Anytime\n-     * the spark.executor.memory or the spark.memory.fraction is changed, the memory used for spillable map changes\n-     * accordingly\n-     */\n-    private long getMaxMemoryAllowedForMerge(String maxMemoryFraction) {\n-      final String SPARK_EXECUTOR_MEMORY_PROP = \"spark.executor.memory\";\n-      final String SPARK_EXECUTOR_MEMORY_FRACTION_PROP = \"spark.memory.fraction\";\n-      // This is hard-coded in spark code {@link\n-      // https://github.com/apache/spark/blob/576c43fb4226e4efa12189b41c3bc862019862c6/core/src/main/scala/org/apache/\n-      // spark/memory/UnifiedMemoryManager.scala#L231} so have to re-define this here\n-      final String DEFAULT_SPARK_EXECUTOR_MEMORY_FRACTION = \"0.6\";\n-      // This is hard-coded in spark code {@link\n-      // https://github.com/apache/spark/blob/576c43fb4226e4efa12189b41c3bc862019862c6/core/src/main/scala/org/apache/\n-      // spark/SparkContext.scala#L471} so have to re-define this here\n-      final String DEFAULT_SPARK_EXECUTOR_MEMORY_MB = \"1024\"; // in MB\n-\n-      if (SparkEnv.get() != null) {\n-        // 1 GB is the default conf used by Spark, look at SparkContext.scala\n-        long executorMemoryInBytes = Utils.memoryStringToMb(\n-            SparkEnv.get().conf().get(SPARK_EXECUTOR_MEMORY_PROP, DEFAULT_SPARK_EXECUTOR_MEMORY_MB)) * 1024 * 1024L;\n-        // 0.6 is the default value used by Spark,\n-        // look at {@link\n-        // https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/SparkConf.scala#L507}\n-        double memoryFraction = Double.parseDouble(\n-            SparkEnv.get().conf().get(SPARK_EXECUTOR_MEMORY_FRACTION_PROP, DEFAULT_SPARK_EXECUTOR_MEMORY_FRACTION));\n-        double maxMemoryFractionForMerge = Double.parseDouble(maxMemoryFraction);\n-        double userAvailableMemory = executorMemoryInBytes * (1 - memoryFraction);\n-        long maxMemoryForMerge = (long) Math.floor(userAvailableMemory * maxMemoryFractionForMerge);\n-        return Math.max(DEFAULT_MIN_MEMORY_FOR_SPILLABLE_MAP_IN_BYTES, maxMemoryForMerge);\n-      } else {\n-        return DEFAULT_MAX_MEMORY_FOR_SPILLABLE_MAP_IN_BYTES;\n-      }\n-    }\n-\n     public HoodieMemoryConfig build() {\n       HoodieMemoryConfig config = new HoodieMemoryConfig(props);\n       setDefaultOnCondition(props, !props.containsKey(MAX_MEMORY_FRACTION_FOR_COMPACTION_PROP),\n           MAX_MEMORY_FRACTION_FOR_COMPACTION_PROP, DEFAULT_MAX_MEMORY_FRACTION_FOR_COMPACTION);\n       setDefaultOnCondition(props, !props.containsKey(MAX_MEMORY_FRACTION_FOR_MERGE_PROP),\n           MAX_MEMORY_FRACTION_FOR_MERGE_PROP, DEFAULT_MAX_MEMORY_FRACTION_FOR_MERGE);\n+      long maxMemoryAllowedForMerge =\n+          SparkConfigUtils.getMaxMemoryAllowedForMerge(props.getProperty(MAX_MEMORY_FRACTION_FOR_MERGE_PROP));\n       setDefaultOnCondition(props, !props.containsKey(MAX_MEMORY_FOR_MERGE_PROP), MAX_MEMORY_FOR_MERGE_PROP,\n-          String.valueOf(getMaxMemoryAllowedForMerge(props.getProperty(MAX_MEMORY_FRACTION_FOR_MERGE_PROP))));\n+          String.valueOf(maxMemoryAllowedForMerge));\n+      long maxMemoryAllowedForCompaction =\n+          SparkConfigUtils.getMaxMemoryAllowedForMerge(props.getProperty(MAX_MEMORY_FRACTION_FOR_COMPACTION_PROP));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baed026d9f46420f9575741912ef8d6f84054a2d"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52ad0ebaab4c41927975e5ff82997ab9d1515777", "author": {"user": {"login": "leesf", "name": "leesf"}}, "url": "https://github.com/apache/hudi/commit/52ad0ebaab4c41927975e5ff82997ab9d1515777", "committedDate": "2020-03-26T10:29:47Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxODc4OTM4", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-381878938", "createdAt": "2020-03-26T10:31:48Z", "commit": {"oid": "52ad0ebaab4c41927975e5ff82997ab9d1515777"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozMTo0OVrOF8Agdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozMTo0OVrOF8Agdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NzE5MA==", "bodyText": "unused methods, remove them.", "url": "https://github.com/apache/hudi/pull/1418#discussion_r398467190", "createdAt": "2020-03-26T10:31:49Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -503,22 +494,6 @@ public int getJmxPort() {\n   /**\n    * memory configs.\n    */\n-  public Double getMaxMemoryFractionPerPartitionMerge() {\n-    return Double.valueOf(props.getProperty(HoodieMemoryConfig.MAX_MEMORY_FRACTION_FOR_MERGE_PROP));\n-  }\n-\n-  public Double getMaxMemoryFractionPerCompaction() {\n-    return Double.valueOf(props.getProperty(HoodieMemoryConfig.MAX_MEMORY_FRACTION_FOR_COMPACTION_PROP));\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ad0ebaab4c41927975e5ff82997ab9d1515777"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTM2ODA3", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-381936807", "createdAt": "2020-03-26T11:55:56Z", "commit": {"oid": "52ad0ebaab4c41927975e5ff82997ab9d1515777"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTI3MjA2", "url": "https://github.com/apache/hudi/pull/1418#pullrequestreview-382127206", "createdAt": "2020-03-26T15:30:10Z", "commit": {"oid": "52ad0ebaab4c41927975e5ff82997ab9d1515777"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3963, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}