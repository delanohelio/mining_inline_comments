{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjQzMDgw", "number": 1851, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToxNzowMFrOEQ2kVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0OTozNVrOERS08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTA2NzExOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/metrics/MetricsReporterFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToxNzowMFrOG1PPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxMDoyMlrOG1Vjyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NzM4NA==", "bodyText": "we would remove this, please refer to https://github.com/apache/hudi/blob/master/hudi-client/src/main/java/org/apache/hudi/index/HoodieIndex.java#L56", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458477384", "createdAt": "2020-07-22T01:17:00Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/metrics/MetricsReporterFactory.java", "diffHunk": "@@ -48,6 +51,10 @@ public static MetricsReporter createReporter(HoodieWriteConfig config, MetricReg\n       case DATADOG:\n         reporter = new DatadogMetricsReporter(config, registry);\n         break;\n+      case USER_DEFINED:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MDkzOQ==", "bodyText": "Ok, look good", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458580939", "createdAt": "2020-07-22T07:10:22Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/main/java/org/apache/hudi/metrics/MetricsReporterFactory.java", "diffHunk": "@@ -48,6 +51,10 @@ public static MetricsReporter createReporter(HoodieWriteConfig config, MetricReg\n       case DATADOG:\n         reporter = new DatadogMetricsReporter(config, registry);\n         break;\n+      case USER_DEFINED:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NzM4NA=="}, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTA2NzYxOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/metrics/MetricsReporterType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToxNzoxOFrOG1PPmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxMDoxMVrOG1VjZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NzQ2NQ==", "bodyText": "would remove USER_DEFINED.", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458477465", "createdAt": "2020-07-22T01:17:18Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/metrics/MetricsReporterType.java", "diffHunk": "@@ -22,5 +22,5 @@\n  * Types of the reporter. Right now we only support Graphite. We can include JMX and CSV in the future.\n  */\n public enum MetricsReporterType {\n-  GRAPHITE, INMEMORY, JMX, DATADOG\n+  GRAPHITE, INMEMORY, JMX, DATADOG, USER_DEFINED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MDgzOA==", "bodyText": "Yes, no need any more", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458580838", "createdAt": "2020-07-22T07:10:11Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/main/java/org/apache/hudi/metrics/MetricsReporterType.java", "diffHunk": "@@ -22,5 +22,5 @@\n  * Types of the reporter. Right now we only support Graphite. We can include JMX and CSV in the future.\n  */\n public enum MetricsReporterType {\n-  GRAPHITE, INMEMORY, JMX, DATADOG\n+  GRAPHITE, INMEMORY, JMX, DATADOG, USER_DEFINED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NzQ2NQ=="}, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTA3MDA0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/metrics/userdefined/DefaultUserDefinedMetricsReporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToxODo0OVrOG1PRAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowOTozOFrOG1Viag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NzgyNg==", "bodyText": "if just used for testing, we would move it into test class.", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458477826", "createdAt": "2020-07-22T01:18:49Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/metrics/userdefined/DefaultUserDefinedMetricsReporter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metrics.userdefined;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+import java.io.Closeable;\n+import java.util.Properties;\n+\n+/**\n+ * Used for testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MDU4Ng==", "bodyText": "Moved to test classes", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458580586", "createdAt": "2020-07-22T07:09:38Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/main/java/org/apache/hudi/metrics/userdefined/DefaultUserDefinedMetricsReporter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metrics.userdefined;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+import java.io.Closeable;\n+import java.util.Properties;\n+\n+/**\n+ * Used for testing.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NzgyNg=="}, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTA3NDIyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToyMDo0M1rOG1PTQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowOToyMlrOG1Vh8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3ODQwMA==", "bodyText": "DEFUALT would be empty string. also please refer to \n  \n    \n      hudi/hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java\n    \n    \n         Line 42\n      in\n      5e7ab11\n    \n    \n    \n    \n\n        \n          \n           public static final String DEFAULT_INDEX_CLASS = \"\";", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458478400", "createdAt": "2020-07-22T01:20:43Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "diffHunk": "@@ -58,6 +59,12 @@\n \n   public static final String GRAPHITE_METRIC_PREFIX = GRAPHITE_PREFIX + \".metric.prefix\";\n \n+  // User defined\n+  public static final String USER_DEFINED_REPORTER_PREFIX = METRIC_PREFIX + \".user.defined\";\n+  public static final String USER_DEFINED_REPORTER_CLASS = USER_DEFINED_REPORTER_PREFIX + \".class\";\n+\n+  public static final String DEFAULT_USER_DEFINED_REPORTER_CLASS = DefaultUserDefinedMetricsReporter.class.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MDQ2NA==", "bodyText": "Good idea, got it", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458580464", "createdAt": "2020-07-22T07:09:22Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "diffHunk": "@@ -58,6 +59,12 @@\n \n   public static final String GRAPHITE_METRIC_PREFIX = GRAPHITE_PREFIX + \".metric.prefix\";\n \n+  // User defined\n+  public static final String USER_DEFINED_REPORTER_PREFIX = METRIC_PREFIX + \".user.defined\";\n+  public static final String USER_DEFINED_REPORTER_CLASS = USER_DEFINED_REPORTER_PREFIX + \".class\";\n+\n+  public static final String DEFAULT_USER_DEFINED_REPORTER_CLASS = DefaultUserDefinedMetricsReporter.class.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3ODQwMA=="}, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTA3NzEzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToyMjoyMVrOG1PU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowODo0OVrOG1Vg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3ODgyOQ==", "bodyText": "would rename to METRICS_REPORTER_CLASS = \"metrics.reporter.class\" ?", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458478829", "createdAt": "2020-07-22T01:22:21Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "diffHunk": "@@ -58,6 +59,12 @@\n \n   public static final String GRAPHITE_METRIC_PREFIX = GRAPHITE_PREFIX + \".metric.prefix\";\n \n+  // User defined\n+  public static final String USER_DEFINED_REPORTER_PREFIX = METRIC_PREFIX + \".user.defined\";\n+  public static final String USER_DEFINED_REPORTER_CLASS = USER_DEFINED_REPORTER_PREFIX + \".class\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MDE4NA==", "bodyText": "the full key name will be like \"hoodie.metrics.reporter.class\" ?", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458580184", "createdAt": "2020-07-22T07:08:49Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "diffHunk": "@@ -58,6 +59,12 @@\n \n   public static final String GRAPHITE_METRIC_PREFIX = GRAPHITE_PREFIX + \".metric.prefix\";\n \n+  // User defined\n+  public static final String USER_DEFINED_REPORTER_PREFIX = METRIC_PREFIX + \".user.defined\";\n+  public static final String USER_DEFINED_REPORTER_CLASS = USER_DEFINED_REPORTER_PREFIX + \".class\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3ODgyOQ=="}, "originalCommit": {"oid": "b8d6b93de3f3c4071dc81610f9d65f8668c6a270"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjMzNDI1OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestIllegalMetricReporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo0NzozNVrOG1bGng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoyMzo0OFrOG1cUbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3MTc3NA==", "bodyText": "This class along with TestMetricReporter would both move to TestMetricsReporterFactory.java ?", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458671774", "createdAt": "2020-07-22T09:47:35Z", "author": {"login": "leesf"}, "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestIllegalMetricReporter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.metrics;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Test class for user defined metric reporter.\n+ */\n+public class TestIllegalMetricReporter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "572cf6e5f9d15cff0a2bf0baee058d80261f4289"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5MTY5NQ==", "bodyText": "Ok, let me try, actually I tried before, and static public class seem could not be about to create instance ....", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458691695", "createdAt": "2020-07-22T10:23:48Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestIllegalMetricReporter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.metrics;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Test class for user defined metric reporter.\n+ */\n+public class TestIllegalMetricReporter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3MTc3NA=="}, "originalCommit": {"oid": "572cf6e5f9d15cff0a2bf0baee058d80261f4289"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjMzODg1OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/exception/HoodieMetricsException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo0ODo1NVrOG1bJjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoyMzo1N1rOG1cUwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3MjUyNA==", "bodyText": "Let's use HoodieException instead of creating a new Exception class?", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458672524", "createdAt": "2020-07-22T09:48:55Z", "author": {"login": "leesf"}, "path": "hudi-client/src/main/java/org/apache/hudi/exception/HoodieMetricsException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.exception;\n+\n+/**\n+ * <p>\n+ * Exception thrown when error happens on metrics process.\n+ * </p>\n+ */\n+public class HoodieMetricsException extends HoodieException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "572cf6e5f9d15cff0a2bf0baee058d80261f4289"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5MTc3Ng==", "bodyText": "OK, got it", "url": "https://github.com/apache/hudi/pull/1851#discussion_r458691776", "createdAt": "2020-07-22T10:23:57Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/main/java/org/apache/hudi/exception/HoodieMetricsException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.exception;\n+\n+/**\n+ * <p>\n+ * Exception thrown when error happens on metrics process.\n+ * </p>\n+ */\n+public class HoodieMetricsException extends HoodieException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3MjUyNA=="}, "originalCommit": {"oid": "572cf6e5f9d15cff0a2bf0baee058d80261f4289"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY5NTk3OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestMetricsReporterFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0ODo1N1rOG17YBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1ODoyNVrOG18PUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMDUxOQ==", "bodyText": "would rename to DummyMetricsReporter", "url": "https://github.com/apache/hudi/pull/1851#discussion_r459200519", "createdAt": "2020-07-23T03:48:57Z", "author": {"login": "leesf"}, "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestMetricsReporterFactory.java", "diffHunk": "@@ -45,4 +52,53 @@ public void metricsReporterFactoryShouldReturnReporter() {\n     MetricsReporter reporter = MetricsReporterFactory.createReporter(config, registry);\n     assertTrue(reporter instanceof InMemoryMetricsReporter);\n   }\n+\n+  @Test\n+  public void metricsReporterFactoryShouldReturnUserDefinedReporter() {\n+    when(config.getMetricReporterClassName()).thenReturn(TestMetricReporter.class.getName());\n+\n+    Properties props = new Properties();\n+    props.setProperty(\"testKey\", \"testValue\");\n+\n+    when(config.getProps()).thenReturn(props);\n+    MetricsReporter reporter = MetricsReporterFactory.createReporter(config, registry);\n+    assertTrue(reporter instanceof AbstractUserDefinedMetricsReporter);\n+    assertEquals(props, ((TestMetricReporter) reporter).getProps());\n+    assertEquals(registry, ((TestMetricReporter) reporter).getRegistry());\n+  }\n+\n+  @Test\n+  public void metricsReporterFactoryShouldThrowExceptionWhenMetricsReporterClassIsIllegal() {\n+    when(config.getMetricReporterClassName()).thenReturn(TestIllegalMetricReporter.class.getName());\n+    when(config.getProps()).thenReturn(new Properties());\n+    assertThrows(HoodieException.class, () -> MetricsReporterFactory.createReporter(config, registry));\n+  }\n+\n+  public static class TestMetricReporter extends AbstractUserDefinedMetricsReporter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a1af526d37c23bcf9be98d36cebbd03c52e47a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDY3NA==", "bodyText": "That's easy", "url": "https://github.com/apache/hudi/pull/1851#discussion_r459214674", "createdAt": "2020-07-23T04:58:25Z", "author": {"login": "zherenyu831"}, "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestMetricsReporterFactory.java", "diffHunk": "@@ -45,4 +52,53 @@ public void metricsReporterFactoryShouldReturnReporter() {\n     MetricsReporter reporter = MetricsReporterFactory.createReporter(config, registry);\n     assertTrue(reporter instanceof InMemoryMetricsReporter);\n   }\n+\n+  @Test\n+  public void metricsReporterFactoryShouldReturnUserDefinedReporter() {\n+    when(config.getMetricReporterClassName()).thenReturn(TestMetricReporter.class.getName());\n+\n+    Properties props = new Properties();\n+    props.setProperty(\"testKey\", \"testValue\");\n+\n+    when(config.getProps()).thenReturn(props);\n+    MetricsReporter reporter = MetricsReporterFactory.createReporter(config, registry);\n+    assertTrue(reporter instanceof AbstractUserDefinedMetricsReporter);\n+    assertEquals(props, ((TestMetricReporter) reporter).getProps());\n+    assertEquals(registry, ((TestMetricReporter) reporter).getRegistry());\n+  }\n+\n+  @Test\n+  public void metricsReporterFactoryShouldThrowExceptionWhenMetricsReporterClassIsIllegal() {\n+    when(config.getMetricReporterClassName()).thenReturn(TestIllegalMetricReporter.class.getName());\n+    when(config.getProps()).thenReturn(new Properties());\n+    assertThrows(HoodieException.class, () -> MetricsReporterFactory.createReporter(config, registry));\n+  }\n+\n+  public static class TestMetricReporter extends AbstractUserDefinedMetricsReporter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMDUxOQ=="}, "originalCommit": {"oid": "b1a1af526d37c23bcf9be98d36cebbd03c52e47a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY5NzE0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestMetricsReporterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0OTozNVrOG17Ynw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0OTozNVrOG17Ynw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMDY3MQ==", "bodyText": "would rename to IllegalTestMetricsReporter", "url": "https://github.com/apache/hudi/pull/1851#discussion_r459200671", "createdAt": "2020-07-23T03:49:35Z", "author": {"login": "leesf"}, "path": "hudi-client/src/test/java/org/apache/hudi/metrics/TestMetricsReporterFactory.java", "diffHunk": "@@ -45,4 +52,53 @@ public void metricsReporterFactoryShouldReturnReporter() {\n     MetricsReporter reporter = MetricsReporterFactory.createReporter(config, registry);\n     assertTrue(reporter instanceof InMemoryMetricsReporter);\n   }\n+\n+  @Test\n+  public void metricsReporterFactoryShouldReturnUserDefinedReporter() {\n+    when(config.getMetricReporterClassName()).thenReturn(TestMetricReporter.class.getName());\n+\n+    Properties props = new Properties();\n+    props.setProperty(\"testKey\", \"testValue\");\n+\n+    when(config.getProps()).thenReturn(props);\n+    MetricsReporter reporter = MetricsReporterFactory.createReporter(config, registry);\n+    assertTrue(reporter instanceof AbstractUserDefinedMetricsReporter);\n+    assertEquals(props, ((TestMetricReporter) reporter).getProps());\n+    assertEquals(registry, ((TestMetricReporter) reporter).getRegistry());\n+  }\n+\n+  @Test\n+  public void metricsReporterFactoryShouldThrowExceptionWhenMetricsReporterClassIsIllegal() {\n+    when(config.getMetricReporterClassName()).thenReturn(TestIllegalMetricReporter.class.getName());\n+    when(config.getProps()).thenReturn(new Properties());\n+    assertThrows(HoodieException.class, () -> MetricsReporterFactory.createReporter(config, registry));\n+  }\n+\n+  public static class TestMetricReporter extends AbstractUserDefinedMetricsReporter {\n+\n+    public TestMetricReporter(Properties props, MetricRegistry registry) {\n+      super(props, registry);\n+    }\n+\n+    @Override\n+    public void start() {}\n+\n+    @Override\n+    public void report() {}\n+\n+    @Override\n+    public Closeable getReporter() {\n+      return null;\n+    }\n+\n+    @Override\n+    public void stop() {}\n+  }\n+\n+  public static class TestIllegalMetricReporter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a1af526d37c23bcf9be98d36cebbd03c52e47a"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4584, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}