{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzQ2ODAy", "number": 1187, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjoxOTowOFrODXWRwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjo0ODo0NFrODaAMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA4ODM0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjoxOTowOFrOFcnGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjowOTo0MlrOFee7Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTAyOQ==", "bodyText": "should we include \"global\" in the name. Bcoz, this is applicable only incase of global. In case of regular, the new record will be inserted as a new entry to new partition path.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r365545029", "createdAt": "2020-01-11T22:19:08Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,9 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  public static final String BLOOM_INDEX_SHOULD_UPDATE_PARTITION_PATH = \"hoodie.bloom.index.should.update.partition.path\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTA5NA==", "bodyText": "Also, can we add some java docs since the property is not very intuitive.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r365545094", "createdAt": "2020-01-11T22:20:58Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,9 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  public static final String BLOOM_INDEX_SHOULD_UPDATE_PARTITION_PATH = \"hoodie.bloom.index.should.update.partition.path\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTAyOQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwODI3MA==", "bodyText": "Renamed and added docs.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r367508270", "createdAt": "2020-01-16T16:09:42Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,9 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  public static final String BLOOM_INDEX_SHOULD_UPDATE_PARTITION_PATH = \"hoodie.bloom.index.should.update.partition.path\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTAyOQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA4ODg0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjoyMToxNFrOFcnGiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMDo1NFrOFee98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTA5Nw==", "bodyText": "would appreciate if you can add java docs", "url": "https://github.com/apache/hudi/pull/1187#discussion_r365545097", "createdAt": "2020-01-11T22:21:14Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -431,6 +431,10 @@ public StorageLevel getBloomIndexInputStorageLevel() {\n     return StorageLevel.fromString(props.getProperty(HoodieIndexConfig.BLOOM_INDEX_INPUT_STORAGE_LEVEL));\n   }\n \n+  public boolean getBloomIndexShouldUpdatePartitionPath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwODk3Ng==", "bodyText": "@nsivabalan I think for a simple a getter that fetch the property, the javadoc is accessible from the property itself. I've added the docs there. So can i skip it here?", "url": "https://github.com/apache/hudi/pull/1187#discussion_r367508976", "createdAt": "2020-01-16T16:10:54Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -431,6 +431,10 @@ public StorageLevel getBloomIndexInputStorageLevel() {\n     return StorageLevel.fromString(props.getProperty(HoodieIndexConfig.BLOOM_INDEX_INPUT_STORAGE_LEVEL));\n   }\n \n+  public boolean getBloomIndexShouldUpdatePartitionPath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTA5Nw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA5NDIzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjo0MDo0MlrOFcnJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo0MTozNFrOFed1WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTc5OA==", "bodyText": "I guess we need to have a if else case here. Let me try to explain my understanding. correct me if its wrong.\nThe scenario we are trying to tackle is, insertion for a record happened in PartitionPath1, while update is sent to PartitionPath2. With the newly added cofig value set to true, we want the update operation to insert in PartitionPath2 and also delete in PartitionPath1.\nSo, in this case, after the left outer join, here are the values for the record\nrecord._1 -> incoming record. recordKey1, PartitionPath2\nrecord._2 -> Tuple2<HoodieRecordLocation, HoodieKey> after index look up. should refer to recordKey1, PartitionPath1.\n`\nif (recordLocationHoodieKeyPair.isPresent()) {\n    if(recordLocationHoodieKeyPair.get()._2.getPartitionPath().equals(hoodieRecord.getPartitionPath())){\n      return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n    } else {\n      if(config value is true) {\n        // need to add two records. one delete in old partition path and an insert into new one.\n        HoodieRecord<T> emptyRecord = new HoodieRecord(recordLocationHoodieKeyPair.get()._2,\n            new EmptyHoodieRecordPayload());\n        HoodieRecord<T> taggedRecord = getTaggedRecord(hoodieRecord, Option.empty());\n        return Arrays.asList(emptyRecord, taggedRecord).iterator();\n        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n      } else{\n        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n      }\n    }\n\n    // Record key matched to file\n   // return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n  } else {\n    return getTaggedRecord(hoodieRecord, Option.empty());\n  }\n\n`", "url": "https://github.com/apache/hudi/pull/1187#discussion_r365545798", "createdAt": "2020-01-11T22:40:42Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,23 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getBloomIndexShouldUpdatePartitionPath()) {\n+          HoodieRecord<T> emptyRecord = new HoodieRecord(recordLocationHoodieKeyPair.get()._2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5MDM5Mg==", "bodyText": "Exactly @nsivabalan . I understood the logic but missed the part of checking path update.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r367490392", "createdAt": "2020-01-16T15:41:34Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,23 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getBloomIndexShouldUpdatePartitionPath()) {\n+          HoodieRecord<T> emptyRecord = new HoodieRecord(recordLocationHoodieKeyPair.get()._2,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTc5OA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDEwNzY2OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzoyNjoxNFrOFgb8_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxOTowNjoxMlrOFh1ZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NjczMw==", "bodyText": "minor: \"when set to true, an update to a record with diff partition compared to its existence, will insert the record to new partition and delete from old partition. When set to false, record will be updated to old partition\".", "url": "https://github.com/apache/hudi/pull/1187#discussion_r369556733", "createdAt": "2020-01-22T13:26:14Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,17 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  /**\n+   * Only applies if index type is GLOBAL_BLOOM.\n+   * <p>\n+   * When set to true, an update including the partition path of a record that already exists will result in inserting", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MTQ2NQ==", "bodyText": "can we also add this to the configurations md file , to keep the docs upto date?", "url": "https://github.com/apache/hudi/pull/1187#discussion_r370981465", "createdAt": "2020-01-26T08:27:21Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,17 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  /**\n+   * Only applies if index type is GLOBAL_BLOOM.\n+   * <p>\n+   * When set to true, an update including the partition path of a record that already exists will result in inserting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NjczMw=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMjE4OA==", "bodyText": "can we also add this to the configurations md file , to keep the docs upto date?\n\nThe docs update PR is in #1190 . I'll update it once this is merged.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r371022188", "createdAt": "2020-01-26T19:06:12Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,17 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  /**\n+   * Only applies if index type is GLOBAL_BLOOM.\n+   * <p>\n+   * When set to true, an update including the partition path of a record that already exists will result in inserting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NjczMw=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDEyODYzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzozMzoxNFrOFgcJ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxODo1MTo0MFrOFh1WJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2MDAzNQ==", "bodyText": "can we add a comment here. for eg \"If partition path differs from incoming record to those in index, and if config for partition path update is set to true,\na. insert to new partition from incoming record\nb. delete existing record from existing partition from index\".", "url": "https://github.com/apache/hudi/pull/1187#discussion_r369560035", "createdAt": "2020-01-22T13:33:14Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,24 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getGlobalBloomIndexShouldUpdatePartitionPath()\n+            && !recordLocationHoodieKeyPair.get()._2.getPartitionPath().equals(hoodieRecord.getPartitionPath())) {\n+          HoodieRecord<T> emptyRecord = new HoodieRecord(recordLocationHoodieKeyPair.get()._2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMTI5Nw==", "bodyText": "Ok I'll just explain the purposes of those 2 HoodieRecords, which I think it'd be clear enough.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r371021297", "createdAt": "2020-01-26T18:50:58Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,24 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getGlobalBloomIndexShouldUpdatePartitionPath()\n+            && !recordLocationHoodieKeyPair.get()._2.getPartitionPath().equals(hoodieRecord.getPartitionPath())) {\n+          HoodieRecord<T> emptyRecord = new HoodieRecord(recordLocationHoodieKeyPair.get()._2,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2MDAzNQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMTM1MA==", "bodyText": "+1", "url": "https://github.com/apache/hudi/pull/1187#discussion_r371021350", "createdAt": "2020-01-26T18:51:40Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,24 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getGlobalBloomIndexShouldUpdatePartitionPath()\n+            && !recordLocationHoodieKeyPair.get()._2.getPartitionPath().equals(hoodieRecord.getPartitionPath())) {\n+          HoodieRecord<T> emptyRecord = new HoodieRecord(recordLocationHoodieKeyPair.get()._2,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2MDAzNQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDEyOTAwOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzozMzoyMVrOFgcKGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzozMzoyMVrOFgcKGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2MDA4OA==", "bodyText": "can we add a comment here mentioning which branch this else part serves. For eg, \"Either if partition path matches from incoming record to those in index, or if config value for partition path update is set to false, choose the partition path from index and update the record, ignoring the partition from incoming record\".", "url": "https://github.com/apache/hudi/pull/1187#discussion_r369560088", "createdAt": "2020-01-22T13:33:21Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,24 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getGlobalBloomIndexShouldUpdatePartitionPath()\n+            && !recordLocationHoodieKeyPair.get()._2.getPartitionPath().equals(hoodieRecord.getPartitionPath())) {\n+          HoodieRecord<T> emptyRecord = new HoodieRecord(recordLocationHoodieKeyPair.get()._2,\n+              new EmptyHoodieRecordPayload());\n+          HoodieRecord<T> taggedRecord = getTaggedRecord(hoodieRecord, Option.empty());\n+          return Arrays.asList(emptyRecord, taggedRecord).iterator();\n+        } else {\n+          return Collections.singletonList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTkyNDczOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjo0Nzo1MFrOFgtuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxOToxNToxNFrOFh1bnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Nzg0OA==", "bodyText": "minor: Would be good if we first check partition path differs and then check config value. Bcoz, the config value doesn't matter if partition path matches. So, for readability purposes would be good to swap the condition checks.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r369847848", "createdAt": "2020-01-22T22:47:50Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,24 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getGlobalBloomIndexShouldUpdatePartitionPath()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMDc2OQ==", "bodyText": "I can actually make the argument otherwise :) .. the first check is easier to read and I only need to both with the second one, if first passes.. we can leave this to @xushiyan  to make the call.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r371020769", "createdAt": "2020-01-26T18:42:35Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,24 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getGlobalBloomIndexShouldUpdatePartitionPath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Nzg0OA=="}, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMjc0OQ==", "bodyText": "2nd thought on this: we should treat a configuration as the dominating factor and the partition equality check as a supporting factor. Doing it the other way will diminish the purpose of a configuration. Hence I would keep that order as is. Thanks for bringing thoughts to it!", "url": "https://github.com/apache/hudi/pull/1187#discussion_r371022749", "createdAt": "2020-01-26T19:15:14Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/HoodieGlobalBloomIndex.java", "diffHunk": "@@ -114,14 +117,24 @@ public HoodieGlobalBloomIndex(HoodieWriteConfig config) {\n         keyLocationPairRDD.mapToPair(p -> new Tuple2<>(p._1.getRecordKey(), new Tuple2<>(p._2, p._1)));\n \n     // Here as the recordRDD might have more data than rowKeyRDD (some rowKeys' fileId is null), so we do left outer join.\n-    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().map(record -> {\n+    return incomingRowKeyRecordPairRDD.leftOuterJoin(existingRecordKeyToRecordLocationHoodieKeyMap).values().flatMap(record -> {\n       final HoodieRecord<T> hoodieRecord = record._1;\n       final Optional<Tuple2<HoodieRecordLocation, HoodieKey>> recordLocationHoodieKeyPair = record._2;\n       if (recordLocationHoodieKeyPair.isPresent()) {\n         // Record key matched to file\n-        return getTaggedRecord(new HoodieRecord<>(recordLocationHoodieKeyPair.get()._2, hoodieRecord.getData()), Option.ofNullable(recordLocationHoodieKeyPair.get()._1));\n+        if (config.getGlobalBloomIndexShouldUpdatePartitionPath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Nzg0OA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTkyNzI5OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjo0ODo0NFrOFgtvtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxOTowNDowNFrOFh1ZBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0ODI0NQ==", "bodyText": "@vinothchandar : does the config param looks good. I am okay with this. just wanted your opinion.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r369848245", "createdAt": "2020-01-22T22:48:44Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,17 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  /**\n+   * Only applies if index type is GLOBAL_BLOOM.\n+   * <p>\n+   * When set to true, an update including the partition path of a record that already exists will result in inserting\n+   * the incoming record into the new partition and deleting the original record in the old partition.\n+   * <p>\n+   * When set to false, the original record will only be updated in the old partition.\n+   */\n+  public static final String GLOBAL_BLOOM_INDEX_SHOULD_UPDATE_PARTITION_PATH = \"hoodie.global.bloom.index.should.update.partition.path\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMDUxNg==", "bodyText": "Since this applies to the bloom index, can we slightly rename to hoodie.bloom.index.update.partition.path and also shorten it a bit", "url": "https://github.com/apache/hudi/pull/1187#discussion_r371020516", "createdAt": "2020-01-26T18:37:41Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,17 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  /**\n+   * Only applies if index type is GLOBAL_BLOOM.\n+   * <p>\n+   * When set to true, an update including the partition path of a record that already exists will result in inserting\n+   * the incoming record into the new partition and deleting the original record in the old partition.\n+   * <p>\n+   * When set to false, the original record will only be updated in the old partition.\n+   */\n+  public static final String GLOBAL_BLOOM_INDEX_SHOULD_UPDATE_PARTITION_PATH = \"hoodie.global.bloom.index.should.update.partition.path\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0ODI0NQ=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMjA4NQ==", "bodyText": "Since this applies to the bloom index, can we slightly rename to hoodie.bloom.index.update.partition.path and also shorten it a bit\n\nI like the brevity. As the docs specify as \"only apply to GLOBAL_BLOOM\", it is unlikely to confuse users.", "url": "https://github.com/apache/hudi/pull/1187#discussion_r371022085", "createdAt": "2020-01-26T19:04:04Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieIndexConfig.java", "diffHunk": "@@ -77,6 +77,17 @@\n   public static final String BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"hoodie.bloom.index.input.storage.level\";\n   public static final String DEFAULT_BLOOM_INDEX_INPUT_STORAGE_LEVEL = \"MEMORY_AND_DISK_SER\";\n \n+  /**\n+   * Only applies if index type is GLOBAL_BLOOM.\n+   * <p>\n+   * When set to true, an update including the partition path of a record that already exists will result in inserting\n+   * the incoming record into the new partition and deleting the original record in the old partition.\n+   * <p>\n+   * When set to false, the original record will only be updated in the old partition.\n+   */\n+  public static final String GLOBAL_BLOOM_INDEX_SHOULD_UPDATE_PARTITION_PATH = \"hoodie.global.bloom.index.should.update.partition.path\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0ODI0NQ=="}, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 69, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}