{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODY1MTkz", "number": 2275, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoxNzoyMFrOE-8ZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzowNDoyOFrOFJT1sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDM2NjM5OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/table/action/commit/TestCopyOnWriteActionExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDoxNzoyMFrOH8Xjog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTowMDowNVrOICZCfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjU2Mg==", "bodyText": "please avoid sleep in tests. It tends to cause flakiness. If we can write the test such that it waits til a certain condition is met (or times out), that would be much more preferable.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r533062562", "createdAt": "2020-12-01T04:17:20Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/table/action/commit/TestCopyOnWriteActionExecutor.java", "diffHunk": "@@ -456,4 +479,95 @@ public void testBulkInsertRecords(String bulkInsertMode) throws Exception {\n   public void testBulkInsertRecordsWithGlobalSort(String bulkInsertMode) throws Exception {\n     testBulkInsertRecords(bulkInsertMode);\n   }\n+\n+  protected HoodieInstant createRequestedReplaceInstant(HoodieTableMetaClient metaClient, String clusterTime, List<FileSlice>[] fileSlices) throws IOException {\n+    HoodieClusteringPlan clusteringPlan =\n+        ClusteringUtils.createClusteringPlan(CLUSTERING_STRATEGY_CLASS, STRATEGY_PARAMS, fileSlices, Collections.emptyMap());\n+\n+    HoodieInstant clusteringInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, clusterTime);\n+    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n+        .setClusteringPlan(clusteringPlan).setOperationType(WriteOperationType.CLUSTER.name()).build();\n+    metaClient.getActiveTimeline().saveToPendingReplaceCommit(clusteringInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n+    return clusteringInstant;\n+  }\n+\n+  @Test\n+  public void testUpdateRejectForClustering() throws Exception {\n+    Properties properties = new Properties();\n+    // set max bytes small can easy generate multi file group\n+    properties.setProperty(HoodieStorageConfig.PARQUET_FILE_MAX_BYTES, \"1024\");\n+    HoodieWriteConfig config = makeHoodieClientConfig(properties);\n+    String firstCommitTime = makeNewCommitTime();\n+    SparkRDDWriteClient writeClient = getHoodieWriteClient(config);\n+    writeClient.startCommitWithTime(firstCommitTime);\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+    String partitionPath = \"2016/01/31\";\n+\n+    // 1. insert three record with two filegroup\n+    HoodieSparkCopyOnWriteTable table = (HoodieSparkCopyOnWriteTable) HoodieSparkTable.create(config, context, metaClient);\n+    // Get some records belong to the same partition (2016/01/31)\n+    String recordStr1 = \"{\\\"_row_key\\\":\\\"8eb5b87a-1feh-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":12}\";\n+    String recordStr2 = \"{\\\"_row_key\\\":\\\"8eb5b87b-1feu-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:20:41.415Z\\\",\\\"number\\\":100}\";\n+    String recordStr3 = \"{\\\"_row_key\\\":\\\"8eb5b87c-1fej-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":15}\";\n+\n+    List<HoodieRecord> records = new ArrayList<>();\n+    RawTripTestPayload rowChange1 = new RawTripTestPayload(recordStr1);\n+    records.add(new HoodieRecord(new HoodieKey(rowChange1.getRowKey(), rowChange1.getPartitionPath()), rowChange1));\n+    RawTripTestPayload rowChange2 = new RawTripTestPayload(recordStr2);\n+    records.add(new HoodieRecord(new HoodieKey(rowChange2.getRowKey(), rowChange2.getPartitionPath()), rowChange2));\n+    RawTripTestPayload rowChange3 = new RawTripTestPayload(recordStr3);\n+    records.add(new HoodieRecord(new HoodieKey(rowChange3.getRowKey(), rowChange3.getPartitionPath()), rowChange3));\n+\n+    writeClient.insert(jsc.parallelize(records, 1), firstCommitTime);\n+    List<String> firstInsertFileGroupIds = table.getFileSystemView().getAllFileGroups(partitionPath)\n+        .map(fileGroup -> fileGroup.getFileGroupId().getFileId()).collect(Collectors.toList());\n+    List<List<FileSlice>> firstInsertFileSlicesList = table.getFileSystemView().getAllFileGroups(partitionPath)\n+        .map(fileGroup -> fileGroup.getAllFileSlices().collect(Collectors.toList())).collect(Collectors.toList());\n+    assertEquals(2, firstInsertFileGroupIds.size());\n+    List<FileSlice>[] fileSlices = (List<FileSlice>[])firstInsertFileSlicesList.toArray(new List[firstInsertFileSlicesList.size()]);\n+\n+    // 2. generate clustering plan the filegroups\n+    String clusterTime1 = \"1\";\n+    createRequestedReplaceInstant(this.metaClient, clusterTime1, fileSlices);\n+\n+    // 3. insert one record with no updating reject exception\n+    String insertRecordStr4 = \"{\\\"_row_key\\\":\\\"8eb5b87d-1fej-4edd-87b4-6ec96dc40pp0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":51}\";\n+    RawTripTestPayload rowChange4 = new RawTripTestPayload(insertRecordStr4);\n+    HoodieRecord insertedRecord1 =\n+        new HoodieRecord(new HoodieKey(rowChange4.getRowKey(), rowChange4.getPartitionPath()), rowChange4);\n+    List<HoodieRecord> insertRecords = Arrays.asList(insertedRecord1);\n+    Thread.sleep(1000);\n+    String secondCommitTime = makeNewCommitTime();\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+    writeClient.startCommitWithTime(secondCommitTime);\n+    List<WriteStatus> statuses = writeClient.upsert(jsc.parallelize(insertRecords), secondCommitTime).collect();\n+    assertEquals(1, statuses.size());\n+\n+    // 4. insert one record and update one record\n+    String insertRecordStr5 = \"{\\\"_row_key\\\":\\\"8eb5b87d-1fej-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":51}\";\n+    // We update the 1st record & add a new record\n+    String updateRecordStr1 = \"{\\\"_row_key\\\":\\\"8eb5b87a-1feh-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":15}\";\n+    RawTripTestPayload updateRowChanges1 = new RawTripTestPayload(updateRecordStr1);\n+    HoodieRecord updatedRecord1 = new HoodieRecord(\n+        new HoodieKey(updateRowChanges1.getRowKey(), updateRowChanges1.getPartitionPath()), updateRowChanges1);\n+    RawTripTestPayload rowChange5 = new RawTripTestPayload(insertRecordStr5);\n+    HoodieRecord insertedRecord2 =\n+        new HoodieRecord(new HoodieKey(rowChange5.getRowKey(), rowChange5.getPartitionPath()), rowChange5);\n+    List<HoodieRecord> updatedRecords = Arrays.asList(updatedRecord1, insertedRecord2);\n+    Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3ODMwMQ==", "bodyText": "okay", "url": "https://github.com/apache/hudi/pull/2275#discussion_r539378301", "createdAt": "2020-12-09T15:00:05Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/table/action/commit/TestCopyOnWriteActionExecutor.java", "diffHunk": "@@ -456,4 +479,95 @@ public void testBulkInsertRecords(String bulkInsertMode) throws Exception {\n   public void testBulkInsertRecordsWithGlobalSort(String bulkInsertMode) throws Exception {\n     testBulkInsertRecords(bulkInsertMode);\n   }\n+\n+  protected HoodieInstant createRequestedReplaceInstant(HoodieTableMetaClient metaClient, String clusterTime, List<FileSlice>[] fileSlices) throws IOException {\n+    HoodieClusteringPlan clusteringPlan =\n+        ClusteringUtils.createClusteringPlan(CLUSTERING_STRATEGY_CLASS, STRATEGY_PARAMS, fileSlices, Collections.emptyMap());\n+\n+    HoodieInstant clusteringInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, clusterTime);\n+    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n+        .setClusteringPlan(clusteringPlan).setOperationType(WriteOperationType.CLUSTER.name()).build();\n+    metaClient.getActiveTimeline().saveToPendingReplaceCommit(clusteringInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n+    return clusteringInstant;\n+  }\n+\n+  @Test\n+  public void testUpdateRejectForClustering() throws Exception {\n+    Properties properties = new Properties();\n+    // set max bytes small can easy generate multi file group\n+    properties.setProperty(HoodieStorageConfig.PARQUET_FILE_MAX_BYTES, \"1024\");\n+    HoodieWriteConfig config = makeHoodieClientConfig(properties);\n+    String firstCommitTime = makeNewCommitTime();\n+    SparkRDDWriteClient writeClient = getHoodieWriteClient(config);\n+    writeClient.startCommitWithTime(firstCommitTime);\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+    String partitionPath = \"2016/01/31\";\n+\n+    // 1. insert three record with two filegroup\n+    HoodieSparkCopyOnWriteTable table = (HoodieSparkCopyOnWriteTable) HoodieSparkTable.create(config, context, metaClient);\n+    // Get some records belong to the same partition (2016/01/31)\n+    String recordStr1 = \"{\\\"_row_key\\\":\\\"8eb5b87a-1feh-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":12}\";\n+    String recordStr2 = \"{\\\"_row_key\\\":\\\"8eb5b87b-1feu-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:20:41.415Z\\\",\\\"number\\\":100}\";\n+    String recordStr3 = \"{\\\"_row_key\\\":\\\"8eb5b87c-1fej-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":15}\";\n+\n+    List<HoodieRecord> records = new ArrayList<>();\n+    RawTripTestPayload rowChange1 = new RawTripTestPayload(recordStr1);\n+    records.add(new HoodieRecord(new HoodieKey(rowChange1.getRowKey(), rowChange1.getPartitionPath()), rowChange1));\n+    RawTripTestPayload rowChange2 = new RawTripTestPayload(recordStr2);\n+    records.add(new HoodieRecord(new HoodieKey(rowChange2.getRowKey(), rowChange2.getPartitionPath()), rowChange2));\n+    RawTripTestPayload rowChange3 = new RawTripTestPayload(recordStr3);\n+    records.add(new HoodieRecord(new HoodieKey(rowChange3.getRowKey(), rowChange3.getPartitionPath()), rowChange3));\n+\n+    writeClient.insert(jsc.parallelize(records, 1), firstCommitTime);\n+    List<String> firstInsertFileGroupIds = table.getFileSystemView().getAllFileGroups(partitionPath)\n+        .map(fileGroup -> fileGroup.getFileGroupId().getFileId()).collect(Collectors.toList());\n+    List<List<FileSlice>> firstInsertFileSlicesList = table.getFileSystemView().getAllFileGroups(partitionPath)\n+        .map(fileGroup -> fileGroup.getAllFileSlices().collect(Collectors.toList())).collect(Collectors.toList());\n+    assertEquals(2, firstInsertFileGroupIds.size());\n+    List<FileSlice>[] fileSlices = (List<FileSlice>[])firstInsertFileSlicesList.toArray(new List[firstInsertFileSlicesList.size()]);\n+\n+    // 2. generate clustering plan the filegroups\n+    String clusterTime1 = \"1\";\n+    createRequestedReplaceInstant(this.metaClient, clusterTime1, fileSlices);\n+\n+    // 3. insert one record with no updating reject exception\n+    String insertRecordStr4 = \"{\\\"_row_key\\\":\\\"8eb5b87d-1fej-4edd-87b4-6ec96dc40pp0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":51}\";\n+    RawTripTestPayload rowChange4 = new RawTripTestPayload(insertRecordStr4);\n+    HoodieRecord insertedRecord1 =\n+        new HoodieRecord(new HoodieKey(rowChange4.getRowKey(), rowChange4.getPartitionPath()), rowChange4);\n+    List<HoodieRecord> insertRecords = Arrays.asList(insertedRecord1);\n+    Thread.sleep(1000);\n+    String secondCommitTime = makeNewCommitTime();\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+    writeClient.startCommitWithTime(secondCommitTime);\n+    List<WriteStatus> statuses = writeClient.upsert(jsc.parallelize(insertRecords), secondCommitTime).collect();\n+    assertEquals(1, statuses.size());\n+\n+    // 4. insert one record and update one record\n+    String insertRecordStr5 = \"{\\\"_row_key\\\":\\\"8eb5b87d-1fej-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":51}\";\n+    // We update the 1st record & add a new record\n+    String updateRecordStr1 = \"{\\\"_row_key\\\":\\\"8eb5b87a-1feh-4edd-87b4-6ec96dc405a0\\\",\"\n+        + \"\\\"time\\\":\\\"2016-01-31T03:16:41.415Z\\\",\\\"number\\\":15}\";\n+    RawTripTestPayload updateRowChanges1 = new RawTripTestPayload(updateRecordStr1);\n+    HoodieRecord updatedRecord1 = new HoodieRecord(\n+        new HoodieKey(updateRowChanges1.getRowKey(), updateRowChanges1.getPartitionPath()), updateRowChanges1);\n+    RawTripTestPayload rowChange5 = new RawTripTestPayload(insertRecordStr5);\n+    HoodieRecord insertedRecord2 =\n+        new HoodieRecord(new HoodieKey(rowChange5.getRowKey(), rowChange5.getPartitionPath()), rowChange5);\n+    List<HoodieRecord> updatedRecords = Arrays.asList(updatedRecord1, insertedRecord2);\n+    Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjU2Mg=="}, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDY1MDM4OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo0MToyM1rOH8aGpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNzoxNjowM1rOIElRfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNDI5Mg==", "bodyText": "I think we need to think more about the algorithm here.  For example,\n\nf1, f2, f3 are file groups in partition.\nAssume there is pending clustering on all file groups f1, f2, f3.\nf3 is a small file. So we buildProfile would assign inserts to f3.\napplying update strategy will throw error because f3 is included.\n\nInstead, we may want to change buildProfile to exclude file groups that are in pending clustering. So, new file f4 would be created in step#3 and ingestion can continue. This way inserts can continue without errors.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r533104292", "createdAt": "2020-12-01T06:41:23Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "diffHunk": "@@ -103,6 +104,9 @@ public BaseSparkCommitActionExecutor(HoodieEngineContext context,\n     if (isWorkloadProfileNeeded()) {\n       profile = new WorkloadProfile(buildProfile(inputRecordsRDD));\n       LOG.info(\"Workload profile :\" + profile);\n+      // apply clustering update strategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY3NTkwMw==", "bodyText": "this is a good case , for generate new file f4 , can exclude small files in clustering", "url": "https://github.com/apache/hudi/pull/2275#discussion_r541675903", "createdAt": "2020-12-12T17:16:03Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "diffHunk": "@@ -103,6 +104,9 @@ public BaseSparkCommitActionExecutor(HoodieEngineContext context,\n     if (isWorkloadProfileNeeded()) {\n       profile = new WorkloadProfile(buildProfile(inputRecordsRDD));\n       LOG.info(\"Workload profile :\" + profile);\n+      // apply clustering update strategy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNDI5Mg=="}, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDY2MjgwOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo0NTozOVrOH8aN1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNzoxODozMVrOIElWkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNjEzNQ==", "bodyText": "what happens if workload profile is not needed? Is there a better place to do this validation? Can we do this after tagLocation is done? If any of the records have location to files in pending clustering, we can throw error.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r533106135", "createdAt": "2020-12-01T06:45:39Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "diffHunk": "@@ -103,6 +104,9 @@ public BaseSparkCommitActionExecutor(HoodieEngineContext context,\n     if (isWorkloadProfileNeeded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY3NzIwMQ==", "bodyText": "it is make sense. But now BaseSparkCommitActionExecutor.getUpsertPartitioner depend on profile, we can be consistent with getUpsertPartitioner.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r541677201", "createdAt": "2020-12-12T17:18:31Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "diffHunk": "@@ -103,6 +104,9 @@ public BaseSparkCommitActionExecutor(HoodieEngineContext context,\n     if (isWorkloadProfileNeeded()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNjEzNQ=="}, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDY2NDM3OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/UpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo0NjoyMFrOH8aOsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowNToxOFrOIDQyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNjM1NA==", "bodyText": "Good idea by adding this interface to keep it generic. Please add javadoc.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r533106354", "createdAt": "2020-12-01T06:46:20Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.table.WorkloadProfile;\n+\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5MTYzMw==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2275#discussion_r540291633", "createdAt": "2020-12-10T16:05:18Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.table.WorkloadProfile;\n+\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNjM1NA=="}, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDY2NzYxOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo0NzozOVrOH8aQjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowNTowNlrOIDQxoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNjgyOA==", "bodyText": "Since you are doing contains, is it better to change its type to Set?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r533106828", "createdAt": "2020-12-01T06:47:39Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.WorkloadStat;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RejectUpdateStrategy implements UpdateStrategy {\n+  private static final Logger LOG = LogManager.getLogger(RejectUpdateStrategy.class);\n+\n+  @Override\n+  public void apply(List<Pair<HoodieFileGroupId, HoodieInstant>> fileGroupsInPendingClustering, WorkloadProfile workloadProfile) {\n+    List<Pair<String, String>> partitionPathAndFileIds = fileGroupsInPendingClustering.stream()\n+        .map(entry -> Pair.of(entry.getLeft().getPartitionPath(), entry.getLeft().getFileId())).collect(Collectors.toList());\n+    if (partitionPathAndFileIds.size() == 0) {\n+      return;\n+    }\n+\n+    Set<Map.Entry<String, WorkloadStat>> partitionStatEntries = workloadProfile.getPartitionPathStatMap().entrySet();\n+    for (Map.Entry<String, WorkloadStat> partitionStat : partitionStatEntries) {\n+      for (Map.Entry<String, Pair<String, Long>> updateLocEntry :\n+              partitionStat.getValue().getUpdateLocationToCount().entrySet()) {\n+        String partitionPath = partitionStat.getKey();\n+        String fileId = updateLocEntry.getKey();\n+        if (partitionPathAndFileIds.contains(Pair.of(partitionPath, fileId))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5MTQ4OA==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2275#discussion_r540291488", "createdAt": "2020-12-10T16:05:06Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.WorkloadStat;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RejectUpdateStrategy implements UpdateStrategy {\n+  private static final Logger LOG = LogManager.getLogger(RejectUpdateStrategy.class);\n+\n+  @Override\n+  public void apply(List<Pair<HoodieFileGroupId, HoodieInstant>> fileGroupsInPendingClustering, WorkloadProfile workloadProfile) {\n+    List<Pair<String, String>> partitionPathAndFileIds = fileGroupsInPendingClustering.stream()\n+        .map(entry -> Pair.of(entry.getLeft().getPartitionPath(), entry.getLeft().getFileId())).collect(Collectors.toList());\n+    if (partitionPathAndFileIds.size() == 0) {\n+      return;\n+    }\n+\n+    Set<Map.Entry<String, WorkloadStat>> partitionStatEntries = workloadProfile.getPartitionPathStatMap().entrySet();\n+    for (Map.Entry<String, WorkloadStat> partitionStat : partitionStatEntries) {\n+      for (Map.Entry<String, Pair<String, Long>> updateLocEntry :\n+              partitionStat.getValue().getUpdateLocationToCount().entrySet()) {\n+        String partitionPath = partitionStat.getKey();\n+        String fileId = updateLocEntry.getKey();\n+        if (partitionPathAndFileIds.contains(Pair.of(partitionPath, fileId))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNjgyOA=="}, "originalCommit": {"oid": "f3fc86bbf9ec02e59b9b161b99f4ee2b13a33d3b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjE5ODIxOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTozMDowMFrOIIwLSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNToyMFrOIKmh-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA0ODg0Mw==", "bodyText": "can you please add javadoc for class and properties in class. Looks like we will need to resolve conflicts with clustering PR", "url": "https://github.com/apache/hudi/pull/2275#discussion_r546048843", "createdAt": "2020-12-18T19:30:00Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.config;\n+\n+import org.apache.hudi.common.config.DefaultHoodieConfig;\n+import org.apache.hudi.table.action.clustering.update.RejectUpdateStrategy;\n+import org.apache.hudi.table.action.clustering.update.UpdateStrategy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+public class HoodieClusteringConfig extends DefaultHoodieConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5e49e1a2f55fae5958a358c14284fa0a70c78a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4Nzk2Mw==", "bodyText": "done  have merge master", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547987963", "createdAt": "2020-12-23T14:35:20Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.config;\n+\n+import org.apache.hudi.common.config.DefaultHoodieConfig;\n+import org.apache.hudi.table.action.clustering.update.RejectUpdateStrategy;\n+import org.apache.hudi.table.action.clustering.update.UpdateStrategy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+public class HoodieClusteringConfig extends DefaultHoodieConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA0ODg0Mw=="}, "originalCommit": {"oid": "0f5e49e1a2f55fae5958a358c14284fa0a70c78a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjIxNTc2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTozNTo1MlrOIIwV2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNTozN1rOIKmiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA1MTU0NA==", "bodyText": "Why not collect Set of HoodieFileGroupId? I'd avoid Pair as much as possible because its not that easy to read.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r546051544", "createdAt": "2020-12-18T19:35:52Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.WorkloadStat;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RejectUpdateStrategy implements UpdateStrategy {\n+  private static final Logger LOG = LogManager.getLogger(RejectUpdateStrategy.class);\n+\n+  @Override\n+  public void apply(List<Pair<HoodieFileGroupId, HoodieInstant>> fileGroupsInPendingClustering, WorkloadProfile workloadProfile) {\n+    Set<Pair<String, String>> partitionPathAndFileIds = fileGroupsInPendingClustering.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5e49e1a2f55fae5958a358c14284fa0a70c78a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODA3NA==", "bodyText": "done", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547988074", "createdAt": "2020-12-23T14:35:37Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.WorkloadStat;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RejectUpdateStrategy implements UpdateStrategy {\n+  private static final Logger LOG = LogManager.getLogger(RejectUpdateStrategy.class);\n+\n+  @Override\n+  public void apply(List<Pair<HoodieFileGroupId, HoodieInstant>> fileGroupsInPendingClustering, WorkloadProfile workloadProfile) {\n+    Set<Pair<String, String>> partitionPathAndFileIds = fileGroupsInPendingClustering.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA1MTU0NA=="}, "originalCommit": {"oid": "0f5e49e1a2f55fae5958a358c14284fa0a70c78a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjMyMTYzOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/UpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDowMTo1N1rOIKHpqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNjoyNVrOIKmj2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4MjAyNA==", "bodyText": "I may have mentioned this earlier, consider removing WorkloadProfile and send fileGroupsWithUpdates.\nI think sending taggedRecords as additional parameter will also be useful. In future, we may want to update tagged records location to a different fileId.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547482024", "createdAt": "2020-12-22T20:01:57Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.table.WorkloadProfile;\n+\n+import java.util.List;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public interface UpdateStrategy  {\n+\n+  /**\n+   * check the update records to the file group in clustering.\n+   * @param fileGroupsInPendingClustering\n+   * @param workloadProfile workloadProfile have the records update info,\n+   *                       just like BaseSparkCommitActionExecutor.getUpsertPartitioner use it.\n+   */\n+  void apply(List<Pair<HoodieFileGroupId, HoodieInstant>> fileGroupsInPendingClustering, WorkloadProfile workloadProfile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c48629439c491fffbade1e12b73761b29746b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODQ0MQ==", "bodyText": "make sense , now taggedRecords as parameter , the update file groupid get from taggedRecords", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547988441", "createdAt": "2020-12-23T14:36:25Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.table.WorkloadProfile;\n+\n+import java.util.List;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public interface UpdateStrategy  {\n+\n+  /**\n+   * check the update records to the file group in clustering.\n+   * @param fileGroupsInPendingClustering\n+   * @param workloadProfile workloadProfile have the records update info,\n+   *                       just like BaseSparkCommitActionExecutor.getUpsertPartitioner use it.\n+   */\n+  void apply(List<Pair<HoodieFileGroupId, HoodieInstant>> fileGroupsInPendingClustering, WorkloadProfile workloadProfile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4MjAyNA=="}, "originalCommit": {"oid": "f6c48629439c491fffbade1e12b73761b29746b0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjM0MDI2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDowODoyNFrOIKH0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNjo0NlrOIKmkgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NDgwNA==", "bodyText": "Should we add a constructor to take engineContext (similar to clustering strategy). For some of the future strategies, we need engineContext. So it'd be helpful if we start with that.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547484804", "createdAt": "2020-12-22T20:08:24Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.WorkloadStat;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RejectUpdateStrategy implements UpdateStrategy {\n+  private static final Logger LOG = LogManager.getLogger(RejectUpdateStrategy.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c48629439c491fffbade1e12b73761b29746b0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODYwOA==", "bodyText": "done", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547988608", "createdAt": "2020-12-23T14:36:46Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/clustering/update/RejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.clustering.update;\n+\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.WorkloadStat;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RejectUpdateStrategy implements UpdateStrategy {\n+  private static final Logger LOG = LogManager.getLogger(RejectUpdateStrategy.class);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NDgwNA=="}, "originalCommit": {"oid": "f6c48629439c491fffbade1e12b73761b29746b0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjM0NjE0OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoxMDo0OVrOIKH3-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNzowMFrOIKmk5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NTY5MA==", "bodyText": "Maybe this can also be moved into UpdateStrategy? i.e., UpdateStrategy#filterSmallFiles(List smallFiles) removes small files  in pending clustering.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547485690", "createdAt": "2020-12-22T20:10:49Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +140,21 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    // get the in pending clustering fileId for each partition path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c48629439c491fffbade1e12b73761b29746b0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODcwOA==", "bodyText": "done", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547988708", "createdAt": "2020-12-23T14:37:00Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +140,21 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    // get the in pending clustering fileId for each partition path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NTY5MA=="}, "originalCommit": {"oid": "f6c48629439c491fffbade1e12b73761b29746b0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjM0OTk0OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoxMjoxNFrOIKH6KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoxMjoxNFrOIKH6KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NjI0OA==", "bodyText": "looks like Map<String, Set> makes more sense because we only do contains check?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r547486248", "createdAt": "2020-12-22T20:12:14Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +140,21 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    // get the in pending clustering fileId for each partition path\n+    Map<String, List<String>>  partitionPathToInPendingClusteringFileId =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c48629439c491fffbade1e12b73761b29746b0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg1Nzg3OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjowNTo0M1rOIKpG8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozNTozNlrOIKp7yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMDE5Mg==", "bodyText": "use SparkRejectUpdateStrategy.class.getName?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548030192", "createdAt": "2020-12-23T16:05:43Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "diffHunk": "@@ -73,9 +73,13 @@\n   public static final String CLUSTERING_TARGET_FILE_MAX_BYTES = CLUSTERING_STRATEGY_PARAM_PREFIX + \"target.file.max.bytes\";\n   public static final String DEFAULT_CLUSTERING_TARGET_FILE_MAX_BYTES = String.valueOf(1 * 1024 * 1024 * 1024L); // 1GB\n   \n-  // constants related to clustering that may be used by more than 1 strategy.\n+  // Constants related to clustering that may be used by more than 1 strategy.\n   public static final String CLUSTERING_SORT_COLUMNS_PROPERTY = HoodieClusteringConfig.CLUSTERING_STRATEGY_PARAM_PREFIX + \"sort.columns\";\n \n+  // When file groups is in clustering, need to handle the update to these file groups. Default strategy just reject the update\n+  public static final String CLUSTERING_UPDATES_STRATEGY_PROP = \"hoodie.clustering.updates.strategy\";\n+  public static final String DEFAULT_CLUSTERING_UPDATES_STRATEGY = \"org.apache.hudi.client.clustering.update.strategy.SparkRejectUpdateStrategy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0MzcyMg==", "bodyText": "SparkRejectUpdateStrategy is in hudi-spark, hudi-client-common not depend hudi-spark", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548043722", "createdAt": "2020-12-23T16:35:36Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "diffHunk": "@@ -73,9 +73,13 @@\n   public static final String CLUSTERING_TARGET_FILE_MAX_BYTES = CLUSTERING_STRATEGY_PARAM_PREFIX + \"target.file.max.bytes\";\n   public static final String DEFAULT_CLUSTERING_TARGET_FILE_MAX_BYTES = String.valueOf(1 * 1024 * 1024 * 1024L); // 1GB\n   \n-  // constants related to clustering that may be used by more than 1 strategy.\n+  // Constants related to clustering that may be used by more than 1 strategy.\n   public static final String CLUSTERING_SORT_COLUMNS_PROPERTY = HoodieClusteringConfig.CLUSTERING_STRATEGY_PARAM_PREFIX + \"sort.columns\";\n \n+  // When file groups is in clustering, need to handle the update to these file groups. Default strategy just reject the update\n+  public static final String CLUSTERING_UPDATES_STRATEGY_PROP = \"hoodie.clustering.updates.strategy\";\n+  public static final String DEFAULT_CLUSTERING_UPDATES_STRATEGY = \"org.apache.hudi.client.clustering.update.strategy.SparkRejectUpdateStrategy\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMDE5Mg=="}, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg2Mjk3OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjowNzowOVrOIKpJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjowNzowOVrOIKpJzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMDkyNQ==", "bodyText": "please use\n`/**\n\nexclude ....\n*/` ?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548030925", "createdAt": "2020-12-23T16:07:09Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.cluster.strategy;\n+\n+import org.apache.hudi.client.common.HoodieEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.table.action.commit.SmallFile;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public abstract class UpdateStrategy<T extends HoodieRecordPayload<T>, I>  {\n+\n+  private final HoodieEngineContext engineContext;\n+\n+  protected UpdateStrategy(HoodieEngineContext engineContext) {\n+    this.engineContext = engineContext;\n+  }\n+\n+  /**\n+   * check the update records to the file group in clustering.\n+   * @param fileGroupsInPendingClustering\n+   * @param taggedRecordsRDD the records will write, can get the update record,\n+   *                        future can update tagged records location to a different fileId.\n+   */\n+  public abstract void apply(Set<HoodieFileGroupId> fileGroupsInPendingClustering, I taggedRecordsRDD);\n+\n+  public HoodieEngineContext getEngineContext() {\n+    return engineContext;\n+  }\n+\n+  // exclude the small file in pending clustering, because in pending clustering file not support update now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg2ODg5OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjowOTowOVrOIKpNSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjowOTowOVrOIKpNSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMTgxOQ==", "bodyText": "If some file groups have updates or inserts, just throws exception now ?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548031819", "createdAt": "2020-12-23T16:09:09Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.clustering.update.strategy;\n+\n+import org.apache.hudi.client.common.HoodieSparkEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.action.cluster.strategy.UpdateStrategy;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaRDD;\n+import scala.Tuple2;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Update trategy Strategy based on following.\n+ * if some file group have update write ,just throw exception now", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg3MTQyOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxMDowNlrOIKpO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxMDowNlrOIKpO0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjIwOQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548032209", "createdAt": "2020-12-23T16:10:06Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -129,6 +130,16 @@ private int addUpdateBucket(String partitionPath, String fileIdHint) {\n     return bucket;\n   }\n \n+  // get the in pending clustering fileId for each partition path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg4MTAzOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxMzo0NlrOIKpUzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0Mjo1NFrOIKqIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMzc0MA==", "bodyText": "files update are not supported in pending clustering currently?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548033740", "createdAt": "2020-12-23T16:13:46Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +151,15 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    Map<String, Set<String>> partitionPathToPendingClusteringFileGroupsId = getPartitionPathToPendingClusteringFileGroupsId();\n+\n     for (String partitionPath : partitionPaths) {\n       WorkloadStat pStat = profile.getWorkloadStat(partitionPath);\n       if (pStat.getNumInserts() > 0) {\n+        // exclude the small file in pending clustering, because in pending clustering file not support update now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0Njk3OA==", "bodyText": "insert to small files update will conflict to clustering. resolved this case:\nf1, f2, f3 are file groups in partition.\nAssume there is pending clustering on all file groups f1, f2, f3.\nf3 is a small file. So we buildProfile would assign inserts to f3.\napplying update strategy will throw error because f3 is included.\nInstead, we may want to change buildProfile to exclude file groups that are in pending clustering. So, new file f4 would be created in step#3 and ingestion can continue. This way inserts can continue without errors.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548046978", "createdAt": "2020-12-23T16:42:54Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +151,15 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    Map<String, Set<String>> partitionPathToPendingClusteringFileGroupsId = getPartitionPathToPendingClusteringFileGroupsId();\n+\n     for (String partitionPath : partitionPaths) {\n       WorkloadStat pStat = profile.getWorkloadStat(partitionPath);\n       if (pStat.getNumInserts() > 0) {\n+        // exclude the small file in pending clustering, because in pending clustering file not support update now.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMzc0MA=="}, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg5MDc4OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxNzowN1rOIKpamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0NToyMFrOIKqMmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzNTIyNw==", "bodyText": "moving to ClusteringUtils would be more proper?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548035227", "createdAt": "2020-12-23T16:17:07Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.cluster.strategy;\n+\n+import org.apache.hudi.client.common.HoodieEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.table.action.commit.SmallFile;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public abstract class UpdateStrategy<T extends HoodieRecordPayload<T>, I>  {\n+\n+  private final HoodieEngineContext engineContext;\n+\n+  protected UpdateStrategy(HoodieEngineContext engineContext) {\n+    this.engineContext = engineContext;\n+  }\n+\n+  /**\n+   * check the update records to the file group in clustering.\n+   * @param fileGroupsInPendingClustering\n+   * @param taggedRecordsRDD the records will write, can get the update record,\n+   *                        future can update tagged records location to a different fileId.\n+   */\n+  public abstract void apply(Set<HoodieFileGroupId> fileGroupsInPendingClustering, I taggedRecordsRDD);\n+\n+  public HoodieEngineContext getEngineContext() {\n+    return engineContext;\n+  }\n+\n+  // exclude the small file in pending clustering, because in pending clustering file not support update now.\n+  public static List<SmallFile> filterSmallFiles(final Set<String> pendingClusteringFileGroupsId, final List<SmallFile> smallFiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0ODAyNQ==", "bodyText": "filterSmallFiles is  strongly related with  clustering update strategy.  In updateStrategy.java will be better", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548048025", "createdAt": "2020-12-23T16:45:20Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.cluster.strategy;\n+\n+import org.apache.hudi.client.common.HoodieEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.table.action.commit.SmallFile;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public abstract class UpdateStrategy<T extends HoodieRecordPayload<T>, I>  {\n+\n+  private final HoodieEngineContext engineContext;\n+\n+  protected UpdateStrategy(HoodieEngineContext engineContext) {\n+    this.engineContext = engineContext;\n+  }\n+\n+  /**\n+   * check the update records to the file group in clustering.\n+   * @param fileGroupsInPendingClustering\n+   * @param taggedRecordsRDD the records will write, can get the update record,\n+   *                        future can update tagged records location to a different fileId.\n+   */\n+  public abstract void apply(Set<HoodieFileGroupId> fileGroupsInPendingClustering, I taggedRecordsRDD);\n+\n+  public HoodieEngineContext getEngineContext() {\n+    return engineContext;\n+  }\n+\n+  // exclude the small file in pending clustering, because in pending clustering file not support update now.\n+  public static List<SmallFile> filterSmallFiles(final Set<String> pendingClusteringFileGroupsId, final List<SmallFile> smallFiles) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzNTIyNw=="}, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg5MzM5OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxNzo1OVrOIKpcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxNzo1OVrOIKpcJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzNTYyMQ==", "bodyText": "extra space", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548035621", "createdAt": "2020-12-23T16:17:59Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +151,15 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    Map<String, Set<String>> partitionPathToPendingClusteringFileGroupsId = getPartitionPathToPendingClusteringFileGroupsId();\n+\n     for (String partitionPath : partitionPaths) {\n       WorkloadStat pStat = profile.getWorkloadStat(partitionPath);\n       if (pStat.getNumInserts() > 0) {\n+        // exclude the small file in pending clustering, because in pending clustering file not support update now.\n+        Set<String> inPendingClusteringFileId = partitionPathToPendingClusteringFileGroupsId.getOrDefault(partitionPath, Collections.emptySet());\n+        List<SmallFile> smallFiles = UpdateStrategy.filterSmallFiles(inPendingClusteringFileId,  partitionSmallFilesMap.get(partitionPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg5NTU2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxODo0NVrOIKpdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxODo0NVrOIKpdaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzNTk0Nw==", "bodyText": "parameters put into two lines?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548035947", "createdAt": "2020-12-23T16:18:45Z", "author": {"login": "leesf"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "diffHunk": "@@ -681,6 +697,72 @@ private void assertActualAndExpectedPartitionPathRecordKeyMatches(Set<Pair<Strin\n     }\n   }\n \n+  private Pair<List<WriteStatus>, List<HoodieRecord>> insertBatchRecords(SparkRDDWriteClient client, String commitTime, Integer recordNum, int expectStatueSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a20f74484458fa4bdf45f25b2612a1d75fdb35"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzc0ODkzOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDo1Nzo0MVrOIK7xjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMjoyNToxMFrOIK81Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNjAxMg==", "bodyText": "why is this a static method? If clustering is not enabled on a table, this filtering is expensive. Should we add 'default' strategy for that case? The default strategy would not do any filtering.\nIf clustering is enabled, we would use RejectUpdateStrategy and that does filtering.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548336012", "createdAt": "2020-12-24T00:57:41Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +154,15 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    Map<String, Set<String>> partitionPathToPendingClusteringFileGroupsId = getPartitionPathToPendingClusteringFileGroupsId();\n+\n     for (String partitionPath : partitionPaths) {\n       WorkloadStat pStat = profile.getWorkloadStat(partitionPath);\n       if (pStat.getNumInserts() > 0) {\n+        // exclude the small file in pending clustering, because in pending clustering file not support update now.\n+        Set<String> inPendingClusteringFileId = partitionPathToPendingClusteringFileGroupsId.getOrDefault(partitionPath, Collections.emptySet());\n+        List<SmallFile> smallFiles = UpdateStrategy.filterSmallFiles(inPendingClusteringFileId, partitionSmallFilesMap.get(partitionPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df57a7fc38dce9bc99cbabdd0fa9116ed9a61af8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM1MzMzOA==", "bodyText": "thanks\n1\u3001\"why is this a static method?\":   because transform updatestrategy into UpsertPartitioner  may be modify the UpsertPartitioner construct.  I will add updatestrategy param to UpsertPartitioner construct\n2\u3001\" If clustering is not enabled on a table, this filtering is expensive. Should we add 'default' strategy for that case? The default strategy would not do any filtering.\"  make sense", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548353338", "createdAt": "2020-12-24T02:25:10Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -140,11 +154,15 @@ private void assignInserts(WorkloadProfile profile, HoodieEngineContext context)\n     Map<String, List<SmallFile>> partitionSmallFilesMap =\n         getSmallFilesForPartitions(new ArrayList<String>(partitionPaths), context);\n \n+    Map<String, Set<String>> partitionPathToPendingClusteringFileGroupsId = getPartitionPathToPendingClusteringFileGroupsId();\n+\n     for (String partitionPath : partitionPaths) {\n       WorkloadStat pStat = profile.getWorkloadStat(partitionPath);\n       if (pStat.getNumInserts() > 0) {\n+        // exclude the small file in pending clustering, because in pending clustering file not support update now.\n+        Set<String> inPendingClusteringFileId = partitionPathToPendingClusteringFileGroupsId.getOrDefault(partitionPath, Collections.emptySet());\n+        List<SmallFile> smallFiles = UpdateStrategy.filterSmallFiles(inPendingClusteringFileId, partitionSmallFilesMap.get(partitionPath));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNjAxMg=="}, "originalCommit": {"oid": "df57a7fc38dce9bc99cbabdd0fa9116ed9a61af8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk2NTY2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMDoxMlrOIK9omQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzo1OTozM1rOIK9-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjQ4OQ==", "bodyText": "can you change it to retrun taggedRecords? You can just simply return same taggedRecordsRDD. This will be helpful later on if we want to store updates in a different file group and later reconcile.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548366489", "createdAt": "2020-12-24T03:30:12Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.cluster.strategy;\n+\n+import org.apache.hudi.client.common.HoodieEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.table.action.commit.SmallFile;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public abstract class UpdateStrategy<T extends HoodieRecordPayload<T>, I>  {\n+\n+  private final HoodieEngineContext engineContext;\n+\n+  protected UpdateStrategy(HoodieEngineContext engineContext) {\n+    this.engineContext = engineContext;\n+  }\n+\n+  /**\n+   * Check the update records to the file group in clustering.\n+   * @param fileGroupsInPendingClustering\n+   * @param taggedRecordsRDD the records will write, can get the update record,\n+   *                        future can update tagged records location to a different fileId.\n+   */\n+  public abstract void apply(Set<HoodieFileGroupId> fileGroupsInPendingClustering, I taggedRecordsRDD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df57a7fc38dce9bc99cbabdd0fa9116ed9a61af8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjA1Mw==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548372053", "createdAt": "2020-12-24T03:59:33Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.cluster.strategy;\n+\n+import org.apache.hudi.client.common.HoodieEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.table.action.commit.SmallFile;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public abstract class UpdateStrategy<T extends HoodieRecordPayload<T>, I>  {\n+\n+  private final HoodieEngineContext engineContext;\n+\n+  protected UpdateStrategy(HoodieEngineContext engineContext) {\n+    this.engineContext = engineContext;\n+  }\n+\n+  /**\n+   * Check the update records to the file group in clustering.\n+   * @param fileGroupsInPendingClustering\n+   * @param taggedRecordsRDD the records will write, can get the update record,\n+   *                        future can update tagged records location to a different fileId.\n+   */\n+  public abstract void apply(Set<HoodieFileGroupId> fileGroupsInPendingClustering, I taggedRecordsRDD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjQ4OQ=="}, "originalCommit": {"oid": "df57a7fc38dce9bc99cbabdd0fa9116ed9a61af8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTcwNTU0OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToxNzo1OFrOILebtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToxNzo1OFrOILebtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMzg2MA==", "bodyText": "Change property to hoodie.clustering.async.enabled?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548903860", "createdAt": "2020-12-25T19:17:58Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieClusteringConfig.java", "diffHunk": "@@ -73,9 +73,17 @@\n   public static final String CLUSTERING_TARGET_FILE_MAX_BYTES = CLUSTERING_STRATEGY_PARAM_PREFIX + \"target.file.max.bytes\";\n   public static final String DEFAULT_CLUSTERING_TARGET_FILE_MAX_BYTES = String.valueOf(1 * 1024 * 1024 * 1024L); // 1GB\n   \n-  // constants related to clustering that may be used by more than 1 strategy.\n+  // Constants related to clustering that may be used by more than 1 strategy.\n   public static final String CLUSTERING_SORT_COLUMNS_PROPERTY = HoodieClusteringConfig.CLUSTERING_STRATEGY_PARAM_PREFIX + \"sort.columns\";\n \n+  // When file groups is in clustering, need to handle the update to these file groups. Default strategy just reject the update\n+  public static final String CLUSTERING_UPDATES_STRATEGY_PROP = \"hoodie.clustering.updates.strategy\";\n+  public static final String DEFAULT_CLUSTERING_UPDATES_STRATEGY = \"org.apache.hudi.client.clustering.update.strategy.SparkRejectUpdateStrategy\";\n+\n+  // Async clustering\n+  public static final String ASYNC_CLUSTERING_ENABLE_OPT_KEY = \"hoodie.clustering.async\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTcwNjEyOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToxODozOFrOILeb8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToxODozOFrOILeb8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwMzkyMQ==", "bodyText": "nit: isClusteringEnabled?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548903921", "createdAt": "2020-12-25T19:18:38Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -394,6 +395,15 @@ public boolean isInlineClustering() {\n     return Boolean.parseBoolean(props.getProperty(HoodieClusteringConfig.INLINE_CLUSTERING_PROP));\n   }\n \n+  public boolean isAsyncClustering() {\n+    return Boolean.parseBoolean(props.getProperty(HoodieClusteringConfig.ASYNC_CLUSTERING_ENABLE_OPT_KEY));\n+  }\n+\n+  public boolean isClusteringEnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTcwNjkwOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToxOToxOVrOILecQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToxOToxOVrOILecQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwNDAwMw==", "bodyText": "nit: isAsyncClusteringEnabled?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548904003", "createdAt": "2020-12-25T19:19:19Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -394,6 +395,15 @@ public boolean isInlineClustering() {\n     return Boolean.parseBoolean(props.getProperty(HoodieClusteringConfig.INLINE_CLUSTERING_PROP));\n   }\n \n+  public boolean isAsyncClustering() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTcwOTM3OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToyMzo0N1rOILedUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMjozNzo0MVrOILgSXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwNDI3NQ==", "bodyText": "What is the reason for collecting only fileId? HoodieFileGroupId will be more accurate because there may be two partitions with same fileId (Unlikely, but can happen). FileGroupId supports equals/hashcode, so it should not be a big change to do this on HoodieFileGroupId.", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548904275", "createdAt": "2020-12-25T19:23:47Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.clustering.update.strategy;\n+\n+import org.apache.hudi.client.common.HoodieSparkEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.action.cluster.strategy.UpdateStrategy;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaRDD;\n+import scala.Tuple2;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Update strategy based on following.\n+ * if some file group have update record, just throw exception now\n+ */\n+public class SparkRejectUpdateStrategy<T extends HoodieRecordPayload<T>> extends UpdateStrategy<T, JavaRDD<HoodieRecord<T>>> {\n+  private static final Logger LOG = LogManager.getLogger(SparkRejectUpdateStrategy.class);\n+\n+  public SparkRejectUpdateStrategy(HoodieSparkEngineContext engineContext, HashSet<HoodieFileGroupId> fileGroupsInPendingClustering) {\n+    super(engineContext, fileGroupsInPendingClustering);\n+  }\n+\n+  private List<Tuple2<String, String>> getPartitionPathToFileGroupsIdWithUpdates(JavaRDD<HoodieRecord<T>> inputRecords) {\n+    List<Tuple2<String, String>> fileGroupsIdWithUpdates = inputRecords\n+        .filter(record -> record.getCurrentLocation() != null)\n+        .map(record -> new Tuple2<>(record.getPartitionPath(), record.getCurrentLocation().getFileId())).distinct().collect();\n+    return fileGroupsIdWithUpdates;\n+  }\n+\n+  @Override\n+  public JavaRDD<HoodieRecord<T>> handleRecordUpdate(JavaRDD<HoodieRecord<T>> taggedRecordsRDD) {\n+    Set<String> pendingClusteringFileGroupIds =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNDIzOA==", "bodyText": "okay", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548934238", "createdAt": "2020-12-26T02:37:41Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.clustering.update.strategy;\n+\n+import org.apache.hudi.client.common.HoodieSparkEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.action.cluster.strategy.UpdateStrategy;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaRDD;\n+import scala.Tuple2;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Update strategy based on following.\n+ * if some file group have update record, just throw exception now\n+ */\n+public class SparkRejectUpdateStrategy<T extends HoodieRecordPayload<T>> extends UpdateStrategy<T, JavaRDD<HoodieRecord<T>>> {\n+  private static final Logger LOG = LogManager.getLogger(SparkRejectUpdateStrategy.class);\n+\n+  public SparkRejectUpdateStrategy(HoodieSparkEngineContext engineContext, HashSet<HoodieFileGroupId> fileGroupsInPendingClustering) {\n+    super(engineContext, fileGroupsInPendingClustering);\n+  }\n+\n+  private List<Tuple2<String, String>> getPartitionPathToFileGroupsIdWithUpdates(JavaRDD<HoodieRecord<T>> inputRecords) {\n+    List<Tuple2<String, String>> fileGroupsIdWithUpdates = inputRecords\n+        .filter(record -> record.getCurrentLocation() != null)\n+        .map(record -> new Tuple2<>(record.getPartitionPath(), record.getCurrentLocation().getFileId())).distinct().collect();\n+    return fileGroupsIdWithUpdates;\n+  }\n+\n+  @Override\n+  public JavaRDD<HoodieRecord<T>> handleRecordUpdate(JavaRDD<HoodieRecord<T>> taggedRecordsRDD) {\n+    Set<String> pendingClusteringFileGroupIds =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwNDI3NQ=="}, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTcxMjMxOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToyNzozOVrOILeemA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOToyNzozOVrOILeemA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwNDYwMA==", "bodyText": "the class 'org.apache.hudi.DefaultClusteringStrategy' doesnt seem to exist. could you explain what this is doing? can we use default from clustering config?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548904600", "createdAt": "2020-12-25T19:27:39Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "diffHunk": "@@ -110,6 +120,13 @@\n public class TestHoodieClientOnCopyOnWriteStorage extends HoodieClientTestBase {\n \n   private static final Logger LOG = LogManager.getLogger(TestHoodieClientOnCopyOnWriteStorage.class);\n+  private static final String CLUSTERING_STRATEGY_CLASS = \"org.apache.hudi.DefaultClusteringStrategy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTcxNDY2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxOTozMToyMlrOILefoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMjozODoyNVrOILgSfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwNDg2NA==", "bodyText": "this looks out of place. move this to line 742?", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548904864", "createdAt": "2020-12-25T19:31:22Z", "author": {"login": "satishkotha"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "diffHunk": "@@ -681,6 +698,75 @@ private void assertActualAndExpectedPartitionPathRecordKeyMatches(Set<Pair<Strin\n     }\n   }\n \n+  private Pair<List<WriteStatus>, List<HoodieRecord>> insertBatchRecords(SparkRDDWriteClient client, String commitTime,\n+                                                                         Integer recordNum, int expectStatueSize) {\n+    client.startCommitWithTime(commitTime);\n+    List<HoodieRecord> inserts1 = dataGen.generateInserts(commitTime, recordNum);\n+    JavaRDD<HoodieRecord> insertRecordsRDD1 = jsc.parallelize(inserts1, 1);\n+    List<WriteStatus> statuses = client.upsert(insertRecordsRDD1, commitTime).collect();\n+    assertNoWriteErrors(statuses);\n+    assertEquals(expectStatueSize, statuses.size(), \"check expect statue size.\");\n+    return Pair.of(statuses, inserts1);\n+  }\n+\n+  @Test\n+  public void testUpdateRejectForClustering() throws IOException {\n+    final String testPartitionPath = \"2016/09/26\";\n+    dataGen = new HoodieTestDataGenerator(new String[] {testPartitionPath});\n+    Properties props = new Properties();\n+    props.setProperty(\"hoodie.clustering.async\", \"true\");\n+    HoodieWriteConfig config = getSmallInsertWriteConfig(100,\n+        TRIP_EXAMPLE_SCHEMA, dataGen.getEstimatedFileSizeInBytes(150), props);\n+    SparkRDDWriteClient client = getHoodieWriteClient(config, false);\n+    HoodieSparkCopyOnWriteTable table = (HoodieSparkCopyOnWriteTable) HoodieSparkTable.create(config, context, metaClient);\n+\n+    //1. insert to generate 2 file group\n+    String commitTime1 = \"001\";\n+    Pair<List<WriteStatus>, List<HoodieRecord>> upsertResult = insertBatchRecords(client, commitTime1, 600, 2);\n+    List<WriteStatus> statuses = upsertResult.getKey();\n+    List<HoodieRecord> inserts1 = upsertResult.getValue();\n+    List<String> fileGroupIds1 = table.getFileSystemView().getAllFileGroups(testPartitionPath)\n+        .map(fileGroup -> fileGroup.getFileGroupId().getFileId()).collect(Collectors.toList());\n+    assertEquals(2, fileGroupIds1.size());\n+\n+    // 2. generate clustering plan for fileGroupIds1 file groups\n+    String commitTime2 = \"002\";\n+    List<List<FileSlice>> firstInsertFileSlicesList = table.getFileSystemView().getAllFileGroups(testPartitionPath)\n+        .map(fileGroup -> fileGroup.getAllFileSlices().collect(Collectors.toList())).collect(Collectors.toList());\n+    List<FileSlice>[] fileSlices = (List<FileSlice>[])firstInsertFileSlicesList.toArray(new List[firstInsertFileSlicesList.size()]);\n+    createRequestedReplaceInstant(this.metaClient, commitTime2, fileSlices);\n+\n+    // 3. insert one record with no updating reject exception, and not merge the small file, just generate a new file group\n+    String commitTime3 = \"003\";\n+    statuses = insertBatchRecords(client, commitTime3, 1, 1).getKey();\n+    List<String> fileGroupIds2 = table.getFileSystemView().getAllFileGroups(testPartitionPath)\n+        .map(fileGroup -> fileGroup.getFileGroupId().getFileId()).collect(Collectors.toList());\n+    assertEquals(3, fileGroupIds2.size());\n+\n+\n+    // 4. update one record for the clustering two file groups, throw reject update exception\n+    String commitTime4 = \"004\";\n+    client.startCommitWithTime(commitTime4);\n+    List<HoodieRecord> insertsAndUpdates3 = new ArrayList<>();\n+    insertsAndUpdates3.addAll(dataGen.generateUpdates(commitTime4, inserts1));\n+    assertNoWriteErrors(statuses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNDI3MQ==", "bodyText": "have remove it , because in insertBatchRecords have do it .", "url": "https://github.com/apache/hudi/pull/2275#discussion_r548934271", "createdAt": "2020-12-26T02:38:25Z", "author": {"login": "lw309637554"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "diffHunk": "@@ -681,6 +698,75 @@ private void assertActualAndExpectedPartitionPathRecordKeyMatches(Set<Pair<Strin\n     }\n   }\n \n+  private Pair<List<WriteStatus>, List<HoodieRecord>> insertBatchRecords(SparkRDDWriteClient client, String commitTime,\n+                                                                         Integer recordNum, int expectStatueSize) {\n+    client.startCommitWithTime(commitTime);\n+    List<HoodieRecord> inserts1 = dataGen.generateInserts(commitTime, recordNum);\n+    JavaRDD<HoodieRecord> insertRecordsRDD1 = jsc.parallelize(inserts1, 1);\n+    List<WriteStatus> statuses = client.upsert(insertRecordsRDD1, commitTime).collect();\n+    assertNoWriteErrors(statuses);\n+    assertEquals(expectStatueSize, statuses.size(), \"check expect statue size.\");\n+    return Pair.of(statuses, inserts1);\n+  }\n+\n+  @Test\n+  public void testUpdateRejectForClustering() throws IOException {\n+    final String testPartitionPath = \"2016/09/26\";\n+    dataGen = new HoodieTestDataGenerator(new String[] {testPartitionPath});\n+    Properties props = new Properties();\n+    props.setProperty(\"hoodie.clustering.async\", \"true\");\n+    HoodieWriteConfig config = getSmallInsertWriteConfig(100,\n+        TRIP_EXAMPLE_SCHEMA, dataGen.getEstimatedFileSizeInBytes(150), props);\n+    SparkRDDWriteClient client = getHoodieWriteClient(config, false);\n+    HoodieSparkCopyOnWriteTable table = (HoodieSparkCopyOnWriteTable) HoodieSparkTable.create(config, context, metaClient);\n+\n+    //1. insert to generate 2 file group\n+    String commitTime1 = \"001\";\n+    Pair<List<WriteStatus>, List<HoodieRecord>> upsertResult = insertBatchRecords(client, commitTime1, 600, 2);\n+    List<WriteStatus> statuses = upsertResult.getKey();\n+    List<HoodieRecord> inserts1 = upsertResult.getValue();\n+    List<String> fileGroupIds1 = table.getFileSystemView().getAllFileGroups(testPartitionPath)\n+        .map(fileGroup -> fileGroup.getFileGroupId().getFileId()).collect(Collectors.toList());\n+    assertEquals(2, fileGroupIds1.size());\n+\n+    // 2. generate clustering plan for fileGroupIds1 file groups\n+    String commitTime2 = \"002\";\n+    List<List<FileSlice>> firstInsertFileSlicesList = table.getFileSystemView().getAllFileGroups(testPartitionPath)\n+        .map(fileGroup -> fileGroup.getAllFileSlices().collect(Collectors.toList())).collect(Collectors.toList());\n+    List<FileSlice>[] fileSlices = (List<FileSlice>[])firstInsertFileSlicesList.toArray(new List[firstInsertFileSlicesList.size()]);\n+    createRequestedReplaceInstant(this.metaClient, commitTime2, fileSlices);\n+\n+    // 3. insert one record with no updating reject exception, and not merge the small file, just generate a new file group\n+    String commitTime3 = \"003\";\n+    statuses = insertBatchRecords(client, commitTime3, 1, 1).getKey();\n+    List<String> fileGroupIds2 = table.getFileSystemView().getAllFileGroups(testPartitionPath)\n+        .map(fileGroup -> fileGroup.getFileGroupId().getFileId()).collect(Collectors.toList());\n+    assertEquals(3, fileGroupIds2.size());\n+\n+\n+    // 4. update one record for the clustering two file groups, throw reject update exception\n+    String commitTime4 = \"004\";\n+    client.startCommitWithTime(commitTime4);\n+    List<HoodieRecord> insertsAndUpdates3 = new ArrayList<>();\n+    insertsAndUpdates3.addAll(dataGen.generateUpdates(commitTime4, inserts1));\n+    assertNoWriteErrors(statuses);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwNDg2NA=="}, "originalCommit": {"oid": "93751e46cb2e730713e300f6c6bffa2a7a1a51a8"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzA1NzYxOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMjo1MjowMlrOILnwxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMjo1MjowMlrOILnwxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1NjcxMQ==", "bodyText": "This looks like will be applicable for an RDD of records, if yes, rename this to 'handleUpdate'", "url": "https://github.com/apache/hudi/pull/2275#discussion_r549056711", "createdAt": "2020-12-27T02:52:02Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.cluster.strategy;\n+\n+import org.apache.hudi.client.common.HoodieEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+\n+import java.util.Set;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public abstract class UpdateStrategy<T extends HoodieRecordPayload<T>, I> {\n+\n+  protected final HoodieEngineContext engineContext;\n+  protected Set<HoodieFileGroupId> fileGroupsInPendingClustering;\n+\n+  protected UpdateStrategy(HoodieEngineContext engineContext, Set<HoodieFileGroupId> fileGroupsInPendingClustering) {\n+    this.engineContext = engineContext;\n+    this.fileGroupsInPendingClustering = fileGroupsInPendingClustering;\n+  }\n+\n+  /**\n+   * Check the update records to the file group in clustering.\n+   * @param taggedRecordsRDD the records will write, can get the update record,\n+   *                         future can update tagged records location to a different fileId.\n+   * @return the recordsRDD strategy updated\n+   */\n+  public abstract I handleRecordUpdate(I taggedRecordsRDD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5372851ab6bd08c19faa7fc670fd00c8df9624b8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzA1Nzk1OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMjo1Mjo0MlrOILnw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMjo1Mjo0MlrOILnw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1Njc0Ng==", "bodyText": "Rename to getGroupIdsWithUpdate", "url": "https://github.com/apache/hudi/pull/2275#discussion_r549056746", "createdAt": "2020-12-27T02:52:42Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.clustering.update.strategy;\n+\n+import org.apache.hudi.client.common.HoodieSparkEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.action.cluster.strategy.UpdateStrategy;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaRDD;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+\n+/**\n+ * Update strategy based on following.\n+ * if some file group have update record, just throw exception now\n+ */\n+public class SparkRejectUpdateStrategy<T extends HoodieRecordPayload<T>> extends UpdateStrategy<T, JavaRDD<HoodieRecord<T>>> {\n+  private static final Logger LOG = LogManager.getLogger(SparkRejectUpdateStrategy.class);\n+\n+  public SparkRejectUpdateStrategy(HoodieSparkEngineContext engineContext, HashSet<HoodieFileGroupId> fileGroupsInPendingClustering) {\n+    super(engineContext, fileGroupsInPendingClustering);\n+  }\n+\n+  private List<HoodieFileGroupId> getFileGroupIdsWithRecordUpdate(JavaRDD<HoodieRecord<T>> inputRecords) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5372851ab6bd08c19faa7fc670fd00c8df9624b8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzA2MjQyOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMjo1OTowMlrOILnywQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMjo1OTowMlrOILnywQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1NzIxNw==", "bodyText": "rename this to clusteringHandleUpdate as well, records is implied", "url": "https://github.com/apache/hudi/pull/2275#discussion_r549057217", "createdAt": "2020-12-27T02:59:02Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/BaseSparkCommitActionExecutor.java", "diffHunk": "@@ -88,6 +93,18 @@ public BaseSparkCommitActionExecutor(HoodieEngineContext context,\n     super(context, config, table, instantTime, operationType, extraMetadata);\n   }\n \n+  private JavaRDD<HoodieRecord<T>> clusteringHandleRecordsUpdate(JavaRDD<HoodieRecord<T>> inputRecordsRDD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5372851ab6bd08c19faa7fc670fd00c8df9624b8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzA2MzIzOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzowMDoyMVrOILnzFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzowMDoyMVrOILnzFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1NzMwMw==", "bodyText": "Nit -> remove the \"just throw exception now\" to \"throw exception\"", "url": "https://github.com/apache/hudi/pull/2275#discussion_r549057303", "createdAt": "2020-12-27T03:00:21Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/client/clustering/update/strategy/SparkRejectUpdateStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.clustering.update.strategy;\n+\n+import org.apache.hudi.client.common.HoodieSparkEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.exception.HoodieClusteringUpdateException;\n+import org.apache.hudi.table.action.cluster.strategy.UpdateStrategy;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaRDD;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+\n+/**\n+ * Update strategy based on following.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5372851ab6bd08c19faa7fc670fd00c8df9624b8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzA2NDE1OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzowMjo0MFrOILnzfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzowMjo0MFrOILnzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1NzQwNA==", "bodyText": "Nit : for comments, please replace with \"the records to write, tagged with target file id\"", "url": "https://github.com/apache/hudi/pull/2275#discussion_r549057404", "createdAt": "2020-12-27T03:02:40Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/cluster/strategy/UpdateStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.cluster.strategy;\n+\n+import org.apache.hudi.client.common.HoodieEngineContext;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+\n+import java.util.Set;\n+\n+/**\n+ * When file groups in clustering, write records to these file group need to check.\n+ */\n+public abstract class UpdateStrategy<T extends HoodieRecordPayload<T>, I> {\n+\n+  protected final HoodieEngineContext engineContext;\n+  protected Set<HoodieFileGroupId> fileGroupsInPendingClustering;\n+\n+  protected UpdateStrategy(HoodieEngineContext engineContext, Set<HoodieFileGroupId> fileGroupsInPendingClustering) {\n+    this.engineContext = engineContext;\n+    this.fileGroupsInPendingClustering = fileGroupsInPendingClustering;\n+  }\n+\n+  /**\n+   * Check the update records to the file group in clustering.\n+   * @param taggedRecordsRDD the records will write, can get the update record,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5372851ab6bd08c19faa7fc670fd00c8df9624b8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzA2NTQ0OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzowNDoyOFrOILn0Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzowNDoyOFrOILn0Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1NzUzOQ==", "bodyText": "Please Change to : \"exclude small file handling for clustering since update path is not supported\"", "url": "https://github.com/apache/hudi/pull/2275#discussion_r549057539", "createdAt": "2020-12-27T03:04:28Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -129,6 +129,34 @@ private int addUpdateBucket(String partitionPath, String fileIdHint) {\n     return bucket;\n   }\n \n+  /**\n+   * Get the in pending clustering fileId for each partition path.\n+   * @return partition path to pending clustering file groups id\n+   */\n+  private Map<String, Set<String>> getPartitionPathToPendingClusteringFileGroupsId() {\n+    Map<String, Set<String>>  partitionPathToInPendingClusteringFileId =\n+        table.getFileSystemView().getFileGroupsInPendingClustering()\n+            .map(fileGroupIdAndInstantPair ->\n+                Pair.of(fileGroupIdAndInstantPair.getKey().getPartitionPath(), fileGroupIdAndInstantPair.getKey().getFileId()))\n+            .collect(Collectors.groupingBy(Pair::getKey, Collectors.mapping(Pair::getValue, Collectors.toSet())));\n+    return partitionPathToInPendingClusteringFileId;\n+  }\n+\n+  /**\n+   * Exclude the small file in pending clustering, because in pending clustering file not support update now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5372851ab6bd08c19faa7fc670fd00c8df9624b8"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4198, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}