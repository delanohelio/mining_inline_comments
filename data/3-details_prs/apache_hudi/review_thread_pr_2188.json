{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NDMxNjQw", "number": 2188, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNTozNlrOEy3g7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNzoyOTo1OVrOFdLJEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzczODA3OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNTozNlrOHpvxTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNTozNlrOHpvxTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNjMzNA==", "bodyText": "Surprised checkstyle is not failing for no space after the \",\"", "url": "https://github.com/apache/hudi/pull/2188#discussion_r513536334", "createdAt": "2020-10-28T15:25:36Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -171,6 +173,10 @@ private Get generateStatement(String key) throws IOException {\n         .addColumn(SYSTEM_COLUMN_FAMILY, FILE_NAME_COLUMN).addColumn(SYSTEM_COLUMN_FAMILY, PARTITION_PATH_COLUMN);\n   }\n \n+  private Get generateStatement(String key, long startTime, long endTime) throws IOException {\n+    return generateStatement(key).setTimeRange(startTime,endTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c39fbc41b88a704dce77a3b475c1c49e37fd32a"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzc0Nzk2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNzo0MlrOHpv3wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoxNTowMVrOHxO6Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzk4Ng==", "bodyText": "@hj2016 We don't fire deletes to Hbase to enable rollback, instead, we just check for whether that update is present or not, if that entry is not valid, the record key will be re-ingested and the entry will be overwritten. Can you talk about a use-case where you require to delete entries ?", "url": "https://github.com/apache/hudi/pull/2188#discussion_r513537986", "createdAt": "2020-10-28T15:27:42Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,61 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c39fbc41b88a704dce77a3b475c1c49e37fd32a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyOTAzNA==", "bodyText": "Of course, the checkIfValidCommit method will detect whether the index commitTime is a valid index, and it has no effect on writing data after rollback. Here, it is possible to write hbase index data incorrectly without deleting the last commit failure. But what I consider is to ensure that the data and the content of the index are consistent. Is it possible to add a configuration here for users to choose? Or is it better not to delete?", "url": "https://github.com/apache/hudi/pull/2188#discussion_r514229034", "createdAt": "2020-10-29T12:44:26Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,61 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzk4Ng=="}, "originalCommit": {"oid": "8c39fbc41b88a704dce77a3b475c1c49e37fd32a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3NjcyOA==", "bodyText": "@hj2016 The problem with firing deletes is that you end up putting extra load on the Hbase cluster for every rollback which is undesirable. The index and data should eventually be in sync always, let me explain how :\n\nSay the batch of records with 4 records (uuid1, uuid2, uuid3, uuid4) was inserted into the index but the batch failed.\nRollback will delete the data but let the index be\nThe next batch of records with 6 records (uuid1, uuid2, uuid3, uuid4, uuid5, uuid6) will now be retried. The HbaseIndex for the first 4 records will be overwritten and there won't be any dangling or remnant indexes.\nThe one way this can happen is if you tried a batch of records, they failed and then you skipped those batch of records, which isn't a very common scenario.\nIf there is another use-case for which you want to delete the records from Hbase, we can consider having a config, let me know.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r514276728", "createdAt": "2020-10-29T13:55:17Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,61 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzk4Ng=="}, "originalCommit": {"oid": "8c39fbc41b88a704dce77a3b475c1c49e37fd32a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc1OTMxNQ==", "bodyText": "ok, then I add a parameter to control, the default is not to delete. how do you feel?", "url": "https://github.com/apache/hudi/pull/2188#discussion_r514759315", "createdAt": "2020-10-30T03:08:06Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,61 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzk4Ng=="}, "originalCommit": {"oid": "8c39fbc41b88a704dce77a3b475c1c49e37fd32a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxOTExNw==", "bodyText": "Okay, that makes sense to me, please go ahead with the change.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r520019117", "createdAt": "2020-11-09T18:15:20Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,61 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzk4Ng=="}, "originalCommit": {"oid": "8c39fbc41b88a704dce77a3b475c1c49e37fd32a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4NjUxMA==", "bodyText": "@n3nash  I have changed it. Can you please confirm my pr  when you free?", "url": "https://github.com/apache/hudi/pull/2188#discussion_r521386510", "createdAt": "2020-11-11T14:15:01Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,61 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzk4Ng=="}, "originalCommit": {"oid": "8c39fbc41b88a704dce77a3b475c1c49e37fd32a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjcwNzIyOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/SparkWriteHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxODoyMzo1NVrOILlYuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoxNDozNlrOIMFeZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzc4NQ==", "bodyText": "not sure why this is required. this is within reduceByKey and so rec1.getKey and rec2.getKey should be same right?", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549017785", "createdAt": "2020-12-26T18:23:55Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/SparkWriteHelper.java", "diffHunk": "@@ -62,7 +62,7 @@ public static SparkWriteHelper newInstance() {\n       // we cannot allow the user to change the key or partitionPath, since that will affect\n       // everything\n       // so pick it from one of the records.\n-      return new HoodieRecord<T>(rec1.getKey(), reducedData);\n+      return new HoodieRecord<T>(rec1.getData().equals(reducedData) ? rec1.getKey() : rec2.getKey(), reducedData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI0MDE0Mw==", "bodyText": "For example, there are two data with the same primary key for upsert\nid partitionPath updateTime\n1 2018 2019-01-01\n1 2019 2019-02-01\nAfter the data is deduplicated,\nExpected return: (1,2019)->(1,2019,2019-02-01)\nActual return: (1,2018)->(1,2019,2019-02-01)\nIn this way, the hoodile key and the data content will be inconsistent, resulting in writing to the wrong partition.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549240143", "createdAt": "2020-12-28T07:13:31Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/SparkWriteHelper.java", "diffHunk": "@@ -62,7 +62,7 @@ public static SparkWriteHelper newInstance() {\n       // we cannot allow the user to change the key or partitionPath, since that will affect\n       // everything\n       // so pick it from one of the records.\n-      return new HoodieRecord<T>(rec1.getKey(), reducedData);\n+      return new HoodieRecord<T>(rec1.getData().equals(reducedData) ? rec1.getKey() : rec2.getKey(), reducedData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzc4NQ=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0MzUyNQ==", "bodyText": "When I was resolving conflicts, it seemed that someone encountered a similar problem. #2248", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549543525", "createdAt": "2020-12-29T02:14:36Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/SparkWriteHelper.java", "diffHunk": "@@ -62,7 +62,7 @@ public static SparkWriteHelper newInstance() {\n       // we cannot allow the user to change the key or partitionPath, since that will affect\n       // everything\n       // so pick it from one of the records.\n-      return new HoodieRecord<T>(rec1.getKey(), reducedData);\n+      return new HoodieRecord<T>(rec1.getData().equals(reducedData) ? rec1.getKey() : rec2.getKey(), reducedData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzc4NQ=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjcwODA0OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxODoyNToxM1rOILlZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjoyMjo1NFrOIhgZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzg3NQ==", "bodyText": "can you remove comment in line 488.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549017875", "createdAt": "2020-12-26T18:25:13Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,68 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI0MDM0NQ==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549240345", "createdAt": "2020-12-28T07:14:25Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,68 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzg3NQ=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0MTc4Ng==", "bodyText": "@hj2016 Can you please make the following changes :\n`public boolean rollbackCommit(String instantTime) {\nif (config.getHBaseIndexRollbackSync()) {\n// \n}\nreturn true;\n`\nThis keeps old behavior unchanged and safe and allows you to control deletes via the config.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r550341786", "createdAt": "2020-12-30T22:14:09Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,68 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzg3NQ=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY3NDAyOA==", "bodyText": "There will be problems with the hbase index. The scenario that needs to be rolled back is that the hbase partition change is turned on and an error is reported after the hbase index is written for some reasons (some reasons may be due to jvm memory overflow, hbase suddenly crashes), for example, At the beginning, the data was id:1 partition:2019, and then another commit failed and the index was written to hbase. At this time, the index partition was changed to 2020. So the next time the data is written, it will only be written to In the 2020 partition, resulting in data duplication. After judging based on the rollbackSync parameter, the following logic will not be executed. If you set hbase.index.rollback.sync = false, hoodie.hbase.index.update.partition.path = true, there will still be problems. I think it would be more reasonable to write like this:\nif (!config.getHbaseIndexUpdatePartitionPath()){\nreturn true;\n}\nsynchronized (SparkHoodieHBaseIndex.class) {\n....\n}\nreturn true;\nBecause only when the partition changes, problems may occur.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r551674028", "createdAt": "2021-01-05T02:00:27Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,68 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzg3NQ=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAwNDY4Nw==", "bodyText": "@n3nash : looks like author is waiting for your response.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r572004687", "createdAt": "2021-02-08T12:22:54Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,68 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNzg3NQ=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjcwOTc3OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxODoyNjo1NlrOILlZxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwODoxNTozOFrOILz5Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxODA1NA==", "bodyText": "why commented out code", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549018054", "createdAt": "2020-12-26T18:26:56Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,68 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {\n+      if (hbaseConnection == null || hbaseConnection.isClosed()) {\n+        hbaseConnection = getHBaseConnection();\n+      }\n+    }\n+    try (HTable hTable = (HTable) hbaseConnection.getTable(TableName.valueOf(tableName));\n+         BufferedMutator mutator = hbaseConnection.getBufferedMutator(TableName.valueOf(tableName))) {\n+      int multiGetBatchSize = config.getHbaseIndexGetBatchSize();\n+      boolean rollbackSync = config.getHBaseIndexRollbackSync();\n+\n+      Long rollbackTime = HoodieActiveTimeline.COMMIT_FORMATTER.parse(instantTime).getTime();\n+      Long currentTime = new Date().getTime();\n+      Scan scan = new Scan();\n+      scan.addFamily(SYSTEM_COLUMN_FAMILY);\n+      scan.setTimeRange(rollbackTime, currentTime);\n+      ResultScanner scanner = hTable.getScanner(scan);\n+      Iterator<Result> scannerIterator = scanner.iterator();\n+\n+      List<Get> statements = new ArrayList<>();\n+      List<Result> currentVersionResults = new ArrayList<Result>();\n+      List<Mutation> mutations = new ArrayList<>();\n+      while (scannerIterator.hasNext()) {\n+        Result result = scannerIterator.next();\n+        currentVersionResults.add(result);\n+        statements.add(generateStatement(Bytes.toString(result.getRow()), 0L, rollbackTime - 1));\n+\n+        if (scannerIterator.hasNext() &&  statements.size() < multiGetBatchSize) {\n+          continue;\n+        }\n+        Result[] lastVersionResults = hTable.get(statements);\n+        for (int i = 0; i < lastVersionResults.length; i++) {\n+          Result lastVersionResult = lastVersionResults[i];\n+          if (null == lastVersionResult.getRow() && rollbackSync) {\n+            Result currentVersionResult = currentVersionResults.get(i);\n+            Delete delete = new Delete(currentVersionResult.getRow());\n+            // delete.addColumn(SYSTEM_COLUMN_FAMILY, COMMIT_TS_COLUMN, currentTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1NTUxMQ==", "bodyText": "Because I thought it was necessary to specify the column to delete, I later found that it is not necessary to specify the column. I think I can delete the comment code.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549255511", "createdAt": "2020-12-28T08:15:38Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -480,6 +486,68 @@ private Integer getNumRegionServersAliveForTable() {\n   @Override\n   public boolean rollbackCommit(String instantTime) {\n     // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    synchronized (SparkHoodieHBaseIndex.class) {\n+      if (hbaseConnection == null || hbaseConnection.isClosed()) {\n+        hbaseConnection = getHBaseConnection();\n+      }\n+    }\n+    try (HTable hTable = (HTable) hbaseConnection.getTable(TableName.valueOf(tableName));\n+         BufferedMutator mutator = hbaseConnection.getBufferedMutator(TableName.valueOf(tableName))) {\n+      int multiGetBatchSize = config.getHbaseIndexGetBatchSize();\n+      boolean rollbackSync = config.getHBaseIndexRollbackSync();\n+\n+      Long rollbackTime = HoodieActiveTimeline.COMMIT_FORMATTER.parse(instantTime).getTime();\n+      Long currentTime = new Date().getTime();\n+      Scan scan = new Scan();\n+      scan.addFamily(SYSTEM_COLUMN_FAMILY);\n+      scan.setTimeRange(rollbackTime, currentTime);\n+      ResultScanner scanner = hTable.getScanner(scan);\n+      Iterator<Result> scannerIterator = scanner.iterator();\n+\n+      List<Get> statements = new ArrayList<>();\n+      List<Result> currentVersionResults = new ArrayList<Result>();\n+      List<Mutation> mutations = new ArrayList<>();\n+      while (scannerIterator.hasNext()) {\n+        Result result = scannerIterator.next();\n+        currentVersionResults.add(result);\n+        statements.add(generateStatement(Bytes.toString(result.getRow()), 0L, rollbackTime - 1));\n+\n+        if (scannerIterator.hasNext() &&  statements.size() < multiGetBatchSize) {\n+          continue;\n+        }\n+        Result[] lastVersionResults = hTable.get(statements);\n+        for (int i = 0; i < lastVersionResults.length; i++) {\n+          Result lastVersionResult = lastVersionResults[i];\n+          if (null == lastVersionResult.getRow() && rollbackSync) {\n+            Result currentVersionResult = currentVersionResults.get(i);\n+            Delete delete = new Delete(currentVersionResult.getRow());\n+            // delete.addColumn(SYSTEM_COLUMN_FAMILY, COMMIT_TS_COLUMN, currentTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxODA1NA=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjcxMDQ2OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxODoyODoxMlrOILlaEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMToyODo1OVrOIMFDUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxODEyOA==", "bodyText": "so can you confirm that this test fails if not for the fix?", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549018128", "createdAt": "2020-12-26T18:28:12Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -263,6 +265,66 @@ public void testTagLocationAndDuplicateUpdate() throws Exception {\n         && record.getCurrentLocation().getInstantTime().equals(newCommitTime))).distinct().count());\n   }\n \n+  @Test\n+  public void testTagLocationAndPartitionPathUpdateWithRollback() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUzNjU5NA==", "bodyText": "yes", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549536594", "createdAt": "2020-12-29T01:28:59Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -263,6 +265,66 @@ public void testTagLocationAndDuplicateUpdate() throws Exception {\n         && record.getCurrentLocation().getInstantTime().equals(newCommitTime))).distinct().count());\n   }\n \n+  @Test\n+  public void testTagLocationAndPartitionPathUpdateWithRollback() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxODEyOA=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDM4NDc5OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNTowNDoyNVrOILxbCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMToyODo1NlrOIMFDRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIxNDk4NQ==", "bodyText": "Please rename this to `testTagLocationAndPartitionPathUpdateWithExplicitRollback\"", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549214985", "createdAt": "2020-12-28T05:04:25Z", "author": {"login": "n3nash"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -263,6 +265,66 @@ public void testTagLocationAndDuplicateUpdate() throws Exception {\n         && record.getCurrentLocation().getInstantTime().equals(newCommitTime))).distinct().count());\n   }\n \n+  @Test\n+  public void testTagLocationAndPartitionPathUpdateWithRollback() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUzNjU4Mw==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2188#discussion_r549536583", "createdAt": "2020-12-29T01:28:56Z", "author": {"login": "hj2016"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -263,6 +265,66 @@ public void testTagLocationAndDuplicateUpdate() throws Exception {\n         && record.getCurrentLocation().getInstantTime().equals(newCommitTime))).distinct().count());\n   }\n \n+  @Test\n+  public void testTagLocationAndPartitionPathUpdateWithRollback() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIxNDk4NQ=="}, "originalCommit": {"oid": "8cb722529e0ef56bc252edf37e3700c2e0381f6a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MTMwMDYyOnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNzoxODo0NFrOIpiy3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNzoxODo0NFrOIpiy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDQzMjYwNQ==", "bodyText": "getHBaseIndexRollbackSync", "url": "https://github.com/apache/hudi/pull/2188#discussion_r580432605", "createdAt": "2021-02-22T17:18:44Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/index/hbase/SparkHoodieHBaseIndex.java", "diffHunk": "@@ -537,7 +545,71 @@ private Integer getNumRegionServersAliveForTable() {\n \n   @Override\n   public boolean rollbackCommit(String instantTime) {\n-    // Rollback in HbaseIndex is managed via method {@link #checkIfValidCommit()}\n+    int multiGetBatchSize = config.getHbaseIndexGetBatchSize();\n+    boolean rollbackSync = config.getHBaseIndexRollbackSync();\n+\n+    if (!config.getHbaseIndexUpdatePartitionPath()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904625fb213b5ec4f6b7f6a218af15dff535d37"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MTM1NTY5OnYy", "diffSide": "RIGHT", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNzoyOTo1OVrOIpjUvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNzoyOTo1OVrOIpjUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDQ0MTI3Nw==", "bodyText": "Can you point me to the place where we set the new config to true.", "url": "https://github.com/apache/hudi/pull/2188#discussion_r580441277", "createdAt": "2021-02-22T17:29:59Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -268,6 +268,66 @@ public void testTagLocationAndDuplicateUpdate() throws Exception {\n         && record.getCurrentLocation().getInstantTime().equals(newCommitTime))).distinct().count());\n   }\n \n+  @Test\n+  public void testTagLocationAndPartitionPathUpdateWithExplicitRollback() throws Exception {\n+    final int numRecords = 10;\n+    final String oldPartitionPath = \"1970/01/01\";\n+    final String emptyHoodieRecordPayloadClasssName = EmptyHoodieRecordPayload.class.getName();\n+    HoodieWriteConfig config = getConfig(true);\n+    SparkHoodieHBaseIndex index = new SparkHoodieHBaseIndex(getConfig(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904625fb213b5ec4f6b7f6a218af15dff535d37"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4103, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}