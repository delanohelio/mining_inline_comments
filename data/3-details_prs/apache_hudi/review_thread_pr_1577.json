{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzI0NjAz", "number": 1577, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMjo0M1rOD4F2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzoyNzoxMFrOEJazLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQyNzY3OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMjo0M1rOGOuVGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDoyMDoxN1rOGmoK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MjMxNQ==", "bodyText": "let's move this into its own method for readability?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r418092315", "createdAt": "2020-04-30T15:22:43Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -339,8 +352,13 @@ protected void postCommit(HoodieCommitMetadata metadata, String instantTime,\n       archiveLog.archiveIfRequired(jsc);\n       if (config.isAutoClean()) {\n         // Call clean to cleanup if there is anything to cleanup after the commit,\n-        LOG.info(\"Auto cleaning is enabled. Running cleaner now\");\n-        clean(instantTime);\n+        if (config.isRunParallelAutoClean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzIxOA==", "bodyText": "Done", "url": "https://github.com/apache/hudi/pull/1577#discussion_r443157218", "createdAt": "2020-06-20T20:20:17Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -339,8 +352,13 @@ protected void postCommit(HoodieCommitMetadata metadata, String instantTime,\n       archiveLog.archiveIfRequired(jsc);\n       if (config.isAutoClean()) {\n         // Call clean to cleanup if there is anything to cleanup after the commit,\n-        LOG.info(\"Auto cleaning is enabled. Running cleaner now\");\n-        clean(instantTime);\n+        if (config.isRunParallelAutoClean()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MjMxNQ=="}, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQzMzU1OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNDowM1rOGOuY3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNToxOVrOGOuckA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MzI3OA==", "bodyText": "lets move this to its own class?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r418093278", "createdAt": "2020-04-30T15:24:03Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -677,4 +714,27 @@ private void rollbackPendingCommits() {\n     });\n     return compactionInstantTimeOpt;\n   }\n+\n+  /**\n+   * Auto Clean service running concurrently.\n+   */\n+  private static class AutoCleanerService extends AbstractAsyncService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDIyNA==", "bodyText": "And even the spawnAutoCleanerIfEnabled and waitForAutoCleanerToShutdown as static helpers in this class.. (trying to avoid code creep inside HoodieWriteClient :))", "url": "https://github.com/apache/hudi/pull/1577#discussion_r418094224", "createdAt": "2020-04-30T15:25:19Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -677,4 +714,27 @@ private void rollbackPendingCommits() {\n     });\n     return compactionInstantTimeOpt;\n   }\n+\n+  /**\n+   * Auto Clean service running concurrently.\n+   */\n+  private static class AutoCleanerService extends AbstractAsyncService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MzI3OA=="}, "originalCommit": null, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ0MjA1OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNTo1OFrOGOueQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDoyMTowN1rOGmoLIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDY1Ng==", "bodyText": "move to constructor and reuse for the duration of a HoodieWriteClient ?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r418094656", "createdAt": "2020-04-30T15:25:58Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -677,4 +714,27 @@ private void rollbackPendingCommits() {\n     });\n     return compactionInstantTimeOpt;\n   }\n+\n+  /**\n+   * Auto Clean service running concurrently.\n+   */\n+  private static class AutoCleanerService extends AbstractAsyncService {\n+\n+    private final HoodieWriteClient writeClient;\n+    private final String cleanInstant;\n+\n+    private AutoCleanerService(HoodieWriteClient writeClient, String cleanInstant) {\n+      this.writeClient = writeClient;\n+      this.cleanInstant = cleanInstant;\n+    }\n+\n+    @Override\n+    protected Pair<CompletableFuture, ExecutorService> startService() {\n+      ExecutorService executor = Executors.newFixedThreadPool(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzI4MA==", "bodyText": "Move to constructor of AutoCleanerService", "url": "https://github.com/apache/hudi/pull/1577#discussion_r443157280", "createdAt": "2020-06-20T20:21:07Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -677,4 +714,27 @@ private void rollbackPendingCommits() {\n     });\n     return compactionInstantTimeOpt;\n   }\n+\n+  /**\n+   * Auto Clean service running concurrently.\n+   */\n+  private static class AutoCleanerService extends AbstractAsyncService {\n+\n+    private final HoodieWriteClient writeClient;\n+    private final String cleanInstant;\n+\n+    private AutoCleanerService(HoodieWriteClient writeClient, String cleanInstant) {\n+      this.writeClient = writeClient;\n+      this.cleanInstant = cleanInstant;\n+    }\n+\n+    @Override\n+    protected Pair<CompletableFuture, ExecutorService> startService() {\n+      ExecutorService executor = Executors.newFixedThreadPool(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDY1Ng=="}, "originalCommit": null, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ0NDQyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/clean/CleanPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNjozNlrOGOuf7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNjozNlrOGOuf7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NTA4Nw==", "bodyText": "this is from the other PR.", "url": "https://github.com/apache/hudi/pull/1577#discussion_r418095087", "createdAt": "2020-04-30T15:26:36Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/clean/CleanPlanner.java", "diffHunk": "@@ -111,10 +111,15 @@ public CleanPlanner(HoodieTable<T> hoodieTable, HoodieWriteConfig config) {\n    * @throws IOException when underlying file-system throws this exception\n    */\n   public List<String> getPartitionPathsToClean(Option<HoodieInstant> newInstantToRetain) throws IOException {\n-    if (config.incrementalCleanerModeEnabled() && newInstantToRetain.isPresent()\n+\n+    if (!newInstantToRetain.isPresent() && (HoodieCleaningPolicy.KEEP_LATEST_COMMITS == config.getCleanerPolicy())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ0ODgxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/async/AbstractAsyncService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNzozMFrOGOuitQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDoyMTo0MVrOGmoLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NTc5Nw==", "bodyText": "does this really belong in hudi-common or it can stay in hudi-client (execution package?)", "url": "https://github.com/apache/hudi/pull/1577#discussion_r418095797", "createdAt": "2020-04-30T15:27:30Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/async/AbstractAsyncService.java", "diffHunk": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi.utilities.deltastreamer;\n+package org.apache.hudi.common.async;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzMwNg==", "bodyText": "Moved to hudi-client", "url": "https://github.com/apache/hudi/pull/1577#discussion_r443157306", "createdAt": "2020-06-20T20:21:41Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/async/AbstractAsyncService.java", "diffHunk": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi.utilities.deltastreamer;\n+package org.apache.hudi.common.async;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NTc5Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwNDU0OnYy", "diffSide": "LEFT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/integ/ITTestCleansCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0NDozMVrOGmoeFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDo1MzoyNVrOGmsdKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjEzNA==", "bodyText": "@yanghua : I went ahead and removed this class. I have added a jira : https://issues.apache.org/jira/browse/HUDI-1033 to go through other such examples and see if multiple CLI tests are still needed.", "url": "https://github.com/apache/hudi/pull/1577#discussion_r443162134", "createdAt": "2020-06-20T21:44:31Z", "author": {"login": "bvaradar"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/integ/ITTestCleansCommand.java", "diffHunk": "@@ -1,106 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNzQzMg==", "bodyText": "Hi @bvaradar replied you on the jira.", "url": "https://github.com/apache/hudi/pull/1577#discussion_r443227432", "createdAt": "2020-06-21T14:53:25Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/integ/ITTestCleansCommand.java", "diffHunk": "@@ -1,106 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjEzNA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA2OTczOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/async/AbstractAsyncService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjoyMDoxOFrOGp6uKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjoyMDoxOFrOGp6uKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNjg4OA==", "bodyText": "org.apache.hudi.client.service is a better location? we should have this, the timeline server etc in a single place?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446606888", "createdAt": "2020-06-28T06:20:18Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/async/AbstractAsyncService.java", "diffHunk": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi.utilities.deltastreamer;\n+package org.apache.hudi.async;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA3MDIwOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/async/AbstractAsyncService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjoyMTowM1rOGp6uZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjoyMTowM1rOGp6uZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNjk1MQ==", "bodyText": "we ideally should be reusing the same for #1752 ?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446606951", "createdAt": "2020-06-28T06:21:03Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/async/AbstractAsyncService.java", "diffHunk": "@@ -32,11 +32,11 @@\n import java.util.function.Function;\n \n /**\n- * Base Class for running delta-sync/compaction in separate thread and controlling their life-cycle.\n+ * Base Class for running clean/delta-sync/compaction in separate thread and controlling their life-cycle.\n  */\n-public abstract class AbstractDeltaStreamerService implements Serializable {\n+public abstract class AbstractAsyncService implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA4Mjc1OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjozOTowMFrOGp60XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjozOToyM1rOGp60iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODQ3Nw==", "bodyText": "just rename to AsyncCleanerService", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446608477", "createdAt": "2020-06-28T06:39:00Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -81,6 +81,8 @@\n   private final transient HoodieMetrics metrics;\n   private transient Timer.Context compactionTimer;\n \n+  private transient AutoCleanerService autoCleanerService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODUyMQ==", "bodyText": "auto or not, is a configuration that should not be leaked into class names.", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446608521", "createdAt": "2020-06-28T06:39:23Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -81,6 +81,8 @@\n   private final transient HoodieMetrics metrics;\n   private transient Timer.Context compactionTimer;\n \n+  private transient AutoCleanerService autoCleanerService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODQ3Nw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA5MDAwOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjo0ODoxNlrOGp631g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjo0ODoxNlrOGp631g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTM2Ng==", "bodyText": "there are a lot of terms being overloaded here -- parallel, async, auto.. what you mean by parallel is async.. correct?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446609366", "createdAt": "2020-06-28T06:48:16Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -338,15 +346,27 @@ protected void postCommit(HoodieCommitMetadata metadata, String instantTime,\n       // We cannot have unbounded commit files. Archive commits if we have to archive\n       HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, createMetaClient(true));\n       archiveLog.archiveIfRequired(hadoopConf);\n-      if (config.isAutoClean()) {\n-        // Call clean to cleanup if there is anything to cleanup after the commit,\n+      autoCleanOnCommit(instantTime);\n+    } catch (IOException ioe) {\n+      throw new HoodieIOException(ioe.getMessage(), ioe);\n+    }\n+  }\n+\n+  /**\n+   * Handle auto clean during commit.\n+   * @param instantTime\n+   */\n+  private void autoCleanOnCommit(String instantTime) {\n+    if (config.isAutoClean()) {\n+      // Call clean to cleanup if there is anything to cleanup after the commit,\n+      if (config.isRunParallelAutoClean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzEwNDczOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/AutoCleanerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzowOTo0MFrOGp6_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzowOTo0MFrOGp6_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMTI5Nw==", "bodyText": "This class feels more like a AsyncTask , rather than a service.. i.e something that is long running and accepts tasks.. can we file a follow on to clean this code uop?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446611297", "createdAt": "2020-06-28T07:09:40Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/AutoCleanerService.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client;\n+\n+import org.apache.hudi.async.AbstractAsyncService;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Auto Clean service running concurrently with write operation.\n+ */\n+class AutoCleanerService extends AbstractAsyncService {\n+\n+  private static final Logger LOG = LogManager.getLogger(AutoCleanerService.class);\n+\n+  private final HoodieWriteClient writeClient;\n+  private final String cleanInstant;\n+  private final transient ExecutorService executor = Executors.newFixedThreadPool(1);\n+\n+  protected AutoCleanerService(HoodieWriteClient writeClient, String cleanInstant) {\n+    this.writeClient = writeClient;\n+    this.cleanInstant = cleanInstant;\n+  }\n+\n+  @Override\n+  protected Pair<CompletableFuture, ExecutorService> startService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzEwNjUxOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzoxMjoxOVrOGp7ARQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzoxMjoxOVrOGp7ARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMTUyNQ==", "bodyText": "how come the return value is never set to the instance variable?", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446611525", "createdAt": "2020-06-28T07:12:19Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -254,6 +260,7 @@ public static SparkConf registerClasses(SparkConf conf) {\n     HoodieTable<T> table = getTableAndInitCtx(WriteOperationType.BULK_INSERT);\n     table.validateInsertSchema();\n     setOperationType(WriteOperationType.BULK_INSERT);\n+    AutoCleanerService.spawnAutoCleanerIfEnabled(this, instantTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzExNzI2OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzoyNzoxMFrOGp7F9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzoyNzoxMFrOGp7F9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMjk4Mw==", "bodyText": "this kind of resetting is probably needed after each write operation as well? may be its fine to just reinitialize the service after waitForCompletion.. food for thought..", "url": "https://github.com/apache/hudi/pull/1577#discussion_r446612983", "createdAt": "2020-06-28T07:27:10Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -477,6 +497,8 @@ public HoodieRestoreMetadata restoreToInstant(final String instantTime) throws H\n    */\n   @Override\n   public void close() {\n+    AutoCleanerService.shutdownAutoCleaner(autoCleanerService);\n+    autoCleanerService = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4606, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}