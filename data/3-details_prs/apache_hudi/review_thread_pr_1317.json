{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyOTYxMTk0", "number": 1317, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzowOTowN1rODeWVTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1Nzo0N1rODez_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTQ5NzczOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/DiskBasedMap.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzowOTowN1rOFnb0kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoyNzoxMlrOFncHLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDYxMA==", "bodyText": "why change these?", "url": "https://github.com/apache/hudi/pull/1317#discussion_r376894610", "createdAt": "2020-02-10T07:09:07Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/DiskBasedMap.java", "diffHunk": "@@ -223,8 +223,8 @@ private R get(ValueMetadata entry) {\n   private synchronized R put(T key, R value, boolean flush) {\n     try {\n       byte[] val = SerializationUtils.serialize(value);\n-      Integer valueSize = val.length;\n-      Long timestamp = System.currentTimeMillis();\n+      int valueSize = val.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e46bdda66a74eeb622db3f61706a6c925a81ec7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NzI2Mw==", "bodyText": "The type of val.lenght is primitive type(int), the type of System.currentTimeMillis() is primitive type(long).", "url": "https://github.com/apache/hudi/pull/1317#discussion_r376897263", "createdAt": "2020-02-10T07:19:02Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/DiskBasedMap.java", "diffHunk": "@@ -223,8 +223,8 @@ private R get(ValueMetadata entry) {\n   private synchronized R put(T key, R value, boolean flush) {\n     try {\n       byte[] val = SerializationUtils.serialize(value);\n-      Integer valueSize = val.length;\n-      Long timestamp = System.currentTimeMillis();\n+      int valueSize = val.length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDYxMA=="}, "originalCommit": {"oid": "7e46bdda66a74eeb622db3f61706a6c925a81ec7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5ODQ3Mw==", "bodyText": "Will revert it if this against contribution guide. Thanks", "url": "https://github.com/apache/hudi/pull/1317#discussion_r376898473", "createdAt": "2020-02-10T07:23:39Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/DiskBasedMap.java", "diffHunk": "@@ -223,8 +223,8 @@ private R get(ValueMetadata entry) {\n   private synchronized R put(T key, R value, boolean flush) {\n     try {\n       byte[] val = SerializationUtils.serialize(value);\n-      Integer valueSize = val.length;\n-      Long timestamp = System.currentTimeMillis();\n+      int valueSize = val.length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDYxMA=="}, "originalCommit": {"oid": "7e46bdda66a74eeb622db3f61706a6c925a81ec7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5OTM3NQ==", "bodyText": "Done.", "url": "https://github.com/apache/hudi/pull/1317#discussion_r376899375", "createdAt": "2020-02-10T07:27:12Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/DiskBasedMap.java", "diffHunk": "@@ -223,8 +223,8 @@ private R get(ValueMetadata entry) {\n   private synchronized R put(T key, R value, boolean flush) {\n     try {\n       byte[] val = SerializationUtils.serialize(value);\n-      Integer valueSize = val.length;\n-      Long timestamp = System.currentTimeMillis();\n+      int valueSize = val.length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDYxMA=="}, "originalCommit": {"oid": "7e46bdda66a74eeb622db3f61706a6c925a81ec7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjM1NjA2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieRecordSizeEstimator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1Nzo0N1rOFoJ3_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjowNzozMFrOFoPFLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0OTE1MQ==", "bodyText": "Would be still keep to LOG.info or Any reason to change to debug?", "url": "https://github.com/apache/hudi/pull/1317#discussion_r377649151", "createdAt": "2020-02-11T13:57:47Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieRecordSizeEstimator.java", "diffHunk": "@@ -49,8 +48,9 @@ public long sizeEstimate(HoodieRecord<T> hoodieRecord) {\n     // note the sizes and differences. A correct estimation in such cases is handled in\n     /** {@link ExternalSpillableMap} **/\n     long sizeOfRecord = ObjectSizeCalculator.getObjectSize(hoodieRecord);\n-    long sizeOfSchema = ObjectSizeCalculator.getObjectSize(schema);\n-    LOG.info(\"SizeOfRecord => \" + sizeOfRecord + \" SizeOfSchema => \" + sizeOfSchema);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"SizeOfRecord => \" + sizeOfRecord + \" SizeOfSchema => \" + sizeOfSchema);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9784ca2f0df2e9da85ee0c548ac05a487aec4049"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMTkwMA==", "bodyText": "Thanks for reviewing this. Use LOG.info will print each time when you put an element, LOG.debug is better.", "url": "https://github.com/apache/hudi/pull/1317#discussion_r377731900", "createdAt": "2020-02-11T16:03:31Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieRecordSizeEstimator.java", "diffHunk": "@@ -49,8 +48,9 @@ public long sizeEstimate(HoodieRecord<T> hoodieRecord) {\n     // note the sizes and differences. A correct estimation in such cases is handled in\n     /** {@link ExternalSpillableMap} **/\n     long sizeOfRecord = ObjectSizeCalculator.getObjectSize(hoodieRecord);\n-    long sizeOfSchema = ObjectSizeCalculator.getObjectSize(schema);\n-    LOG.info(\"SizeOfRecord => \" + sizeOfRecord + \" SizeOfSchema => \" + sizeOfSchema);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"SizeOfRecord => \" + sizeOfRecord + \" SizeOfSchema => \" + sizeOfSchema);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0OTE1MQ=="}, "originalCommit": {"oid": "9784ca2f0df2e9da85ee0c548ac05a487aec4049"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNDQ0Nw==", "bodyText": "More, HoodieRecordSizeEstimator is mainly used in ExternalSpillableMap, ExternalSpillableMap#put has logged it.\nif (shouldEstimatePayloadSize && estimatedPayloadSize == 0) {\n  // At first, use the sizeEstimate of a record being inserted into the spillable map.\n  // Note, the converter may over estimate the size of a record in the JVM\n  this.estimatedPayloadSize = keySizeEstimator.sizeEstimate(key) + valueSizeEstimator.sizeEstimate(value);\n  LOG.info(\"Estimated Payload size => \" + estimatedPayloadSize);\n}", "url": "https://github.com/apache/hudi/pull/1317#discussion_r377734447", "createdAt": "2020-02-11T16:07:30Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieRecordSizeEstimator.java", "diffHunk": "@@ -49,8 +48,9 @@ public long sizeEstimate(HoodieRecord<T> hoodieRecord) {\n     // note the sizes and differences. A correct estimation in such cases is handled in\n     /** {@link ExternalSpillableMap} **/\n     long sizeOfRecord = ObjectSizeCalculator.getObjectSize(hoodieRecord);\n-    long sizeOfSchema = ObjectSizeCalculator.getObjectSize(schema);\n-    LOG.info(\"SizeOfRecord => \" + sizeOfRecord + \" SizeOfSchema => \" + sizeOfSchema);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"SizeOfRecord => \" + sizeOfRecord + \" SizeOfSchema => \" + sizeOfSchema);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0OTE1MQ=="}, "originalCommit": {"oid": "9784ca2f0df2e9da85ee0c548ac05a487aec4049"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 49, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}