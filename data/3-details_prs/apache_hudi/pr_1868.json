{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDM3MjQ3", "number": 1868, "title": "[HUDI-1083] Optimization in determining insert bucket location for a given key", "bodyText": "What is the purpose of the pull request\n\nDo binary search and find the right bucket in UpsertPartitioner.java would cut cost from O(N) to log N.\n\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-07-24T02:08:07Z", "url": "https://github.com/apache/hudi/pull/1868", "merged": true, "mergeCommit": {"oid": "1d09c02f1cb9a3929995fb6df1bb7d58cdcb3eb3"}, "closed": true, "closedAt": "2020-08-22T11:41:40Z", "author": {"login": "shenh062326"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4hdhKgBqjM1ODY2NTM2MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9bP_fABqjM2MzcyNDUxODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d15596b8eb6274248a5f00f2187c43dad10c7dbc", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/d15596b8eb6274248a5f00f2187c43dad10c7dbc", "committedDate": "2020-07-24T02:05:53Z", "message": "[HUDI-1083] Minor optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "fda721a60bfa67d8b3729dbd0dd11e2a3cd900ca", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/fda721a60bfa67d8b3729dbd0dd11e2a3cd900ca", "committedDate": "2020-07-25T23:44:46Z", "message": "[HUDI-1083] Minor optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fda721a60bfa67d8b3729dbd0dd11e2a3cd900ca", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/fda721a60bfa67d8b3729dbd0dd11e2a3cd900ca", "committedDate": "2020-07-25T23:44:46Z", "message": "[HUDI-1083] Minor optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "3bddd74c390b760dc2e6e17fc88f306ac3610aed", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/3bddd74c390b760dc2e6e17fc88f306ac3610aed", "committedDate": "2020-07-25T23:51:09Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bddd74c390b760dc2e6e17fc88f306ac3610aed", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/3bddd74c390b760dc2e6e17fc88f306ac3610aed", "committedDate": "2020-07-25T23:51:09Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "f0bb6c70e8ab7192d10bfb2adba202d0a77b3973", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/f0bb6c70e8ab7192d10bfb2adba202d0a77b3973", "committedDate": "2020-07-26T11:01:55Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0bb6c70e8ab7192d10bfb2adba202d0a77b3973", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/f0bb6c70e8ab7192d10bfb2adba202d0a77b3973", "committedDate": "2020-07-26T11:01:55Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/73c63f1205a1d90b7f103390bb3aa180f1e4d79c", "committedDate": "2020-07-26T12:41:37Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzY4OTE0", "url": "https://github.com/apache/hudi/pull/1868#pullrequestreview-455368914", "createdAt": "2020-07-26T14:25:47Z", "commit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDoyNTo0N1rOG3MxKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDozMTo1MlrOG3M0Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDA1Nw==", "bodyText": "Somehow I don't feel comfortable adding cumulative weights to InsertBucket class. Each Insert bucket doesn't have anything to do with strict ordering wrt other buckets. UpsertPartitioner has some ordering for its own purpose.\nCan we try something like this.\npartitionPathToInsertBucketInfo : Map<String, List/Array of Pair of <Insert Bucket number, cumulative weight> >\nInsertBucketMap: Map of insert bucket number to InsertBucket object.\ngetPartition(key)\nwill first look at partitionPathToInsertBucketInfo to fetch list of cumulative weights of all insert buckets along with insert bucket nos. Once we found the target bucket number, we can look into other map.\nOr you can store InsertBucket itself in the value of partitionPathToInsertBucketInfo to avoid another look up. Tuple3<cumulativeWeight, InsetBucket>", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534057", "createdAt": "2020-07-26T14:25:47Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucket.java", "diffHunk": "@@ -18,24 +18,31 @@\n \n package org.apache.hudi.table.action.commit;\n \n+import org.jetbrains.annotations.NotNull;\n+\n import java.io.Serializable;\n \n /**\n  * Helper class for an insert bucket along with the weight [0.0, 1.0] that defines the amount of incoming inserts that\n  * should be allocated to the bucket.\n  */\n-public class InsertBucket implements Serializable {\n+public class InsertBucket implements Serializable, Comparable<InsertBucket> {\n \n   int bucketNumber;\n-  // fraction of total inserts, that should go into this bucket\n-  double weight;\n+  // cumulate fraction of total inserts, that should go into this bucket and the previous bucket.\n+  double cumulativeWeight;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDI2NQ==", "bodyText": "why not Collections.binarySearch() ?", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534265", "createdAt": "2020-07-26T14:27:58Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ==", "bodyText": "sorry why do we need this? if not found, why not return the first bucket ?", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534315", "createdAt": "2020-07-26T14:28:37Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDgxOQ==", "bodyText": "also, ideally we should not hit this scenario only. If our bin packing is good, cumulative weight of last entry should be 1.0.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534819", "createdAt": "2020-07-26T14:31:52Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ=="}, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/73c63f1205a1d90b7f103390bb3aa180f1e4d79c", "committedDate": "2020-07-26T12:41:37Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "1c08902e9f7dc0caaadc36b1e2b614d927e4168d", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/1c08902e9f7dc0caaadc36b1e2b614d927e4168d", "committedDate": "2020-07-27T15:23:46Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c08902e9f7dc0caaadc36b1e2b614d927e4168d", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/1c08902e9f7dc0caaadc36b1e2b614d927e4168d", "committedDate": "2020-07-27T15:23:46Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "5120a6c6dd275d4bcd4985697774b1a1b2f0c8e4", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/5120a6c6dd275d4bcd4985697774b1a1b2f0c8e4", "committedDate": "2020-07-27T16:00:14Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5120a6c6dd275d4bcd4985697774b1a1b2f0c8e4", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/5120a6c6dd275d4bcd4985697774b1a1b2f0c8e4", "committedDate": "2020-07-27T16:00:14Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "66d3e808986b90275e0cbbac3f858333b02c4ebe", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/66d3e808986b90275e0cbbac3f858333b02c4ebe", "committedDate": "2020-07-27T16:01:06Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66d3e808986b90275e0cbbac3f858333b02c4ebe", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/66d3e808986b90275e0cbbac3f858333b02c4ebe", "committedDate": "2020-07-27T16:01:06Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "cebca40c724b4daddb07cbfb46b8e5769b93f843", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/cebca40c724b4daddb07cbfb46b8e5769b93f843", "committedDate": "2020-07-28T01:27:27Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cebca40c724b4daddb07cbfb46b8e5769b93f843", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/cebca40c724b4daddb07cbfb46b8e5769b93f843", "committedDate": "2020-07-28T01:27:27Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "6d46c9f569fdbd9641bea70779d6e93c1e6695f6", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/6d46c9f569fdbd9641bea70779d6e93c1e6695f6", "committedDate": "2020-07-28T06:19:56Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d46c9f569fdbd9641bea70779d6e93c1e6695f6", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/6d46c9f569fdbd9641bea70779d6e93c1e6695f6", "committedDate": "2020-07-28T06:19:56Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/f3137754443e9739530f125ae99a560fa616fd54", "committedDate": "2020-07-28T14:35:31Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTAwMTE2", "url": "https://github.com/apache/hudi/pull/1868#pullrequestreview-459100116", "createdAt": "2020-07-31T11:18:45Z", "commit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODo0NVrOG6FCEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyNjoyNlrOG6FNGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzA0Mg==", "bodyText": "may be InsertBucketCumulativeWeightPair", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463553042", "createdAt": "2020-07-31T11:18:45Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucket2CumulativeWeight.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.common.util.collection.Pair;\n+\n+public class InsertBucket2CumulativeWeight extends Pair<InsertBucket, Double> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzQzNw==", "bodyText": "we might as well store InsertBucket2CumulativeWeight in this list since you have a class.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463553437", "createdAt": "2020-07-31T11:19:49Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -193,15 +194,17 @@ private void assignInserts(WorkloadProfile profile, JavaSparkContext jsc) {\n         }\n \n         // Go over all such buckets, and assign weights as per amount of incoming inserts.\n-        List<InsertBucket> insertBuckets = new ArrayList<>();\n+        List<Pair<InsertBucket, Double>> insertBuckets = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NTQwNQ==", "bodyText": "gotcha. can we add braces. ((-1*index) -1) in both if condition and in the return statement", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463555405", "createdAt": "2020-07-31T11:25:12Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ=="}, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NTg2NQ==", "bodyText": "you don't need to declare. We could directly call.\nint index = Collections.binarySearch(targetBuckets, new InsertBucket2CumulativeWeight(new InsertBucket(), r));", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463555865", "createdAt": "2020-07-31T11:26:26Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -270,20 +273,25 @@ public int getPartition(Object key) {\n       return updateLocationToBucket.get(location.getFileId());\n     } else {\n       String partitionPath = keyLocation._1().getPartitionPath();\n-      List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n+      List<Pair<InsertBucket, Double>> targetBuckets = partitionPathToInsertBucketInfos.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      Pair<InsertBucket, Double> pair = new InsertBucket2CumulativeWeight(new InsertBucket(), r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54"}, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/f3137754443e9739530f125ae99a560fa616fd54", "committedDate": "2020-07-28T14:35:31Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "24c4106e2d42f016dad9168155d4cac1c23fcd8f", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/24c4106e2d42f016dad9168155d4cac1c23fcd8f", "committedDate": "2020-08-01T07:23:57Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24c4106e2d42f016dad9168155d4cac1c23fcd8f", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/24c4106e2d42f016dad9168155d4cac1c23fcd8f", "committedDate": "2020-08-01T07:23:57Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/feb77c51617ca9dda8f08a5a2a20ea4ed764f602", "committedDate": "2020-08-01T08:49:20Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTg4NzU3", "url": "https://github.com/apache/hudi/pull/1868#pullrequestreview-459588757", "createdAt": "2020-08-01T16:25:43Z", "commit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjoyNTo0M1rOG6e8eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjo0MjoyNlrOG6fBkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzU5Mg==", "bodyText": "java docs as to what does cumulative weight means.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463977592", "createdAt": "2020-08-01T16:25:43Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucketCumulativeWeightPair.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.common.util.collection.Pair;\n+\n+public class InsertBucketCumulativeWeightPair extends Pair<InsertBucket, Double> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzY3Nw==", "bodyText": "did you check if this prints the value or the hash value for InsertBucketCumulativeWeightPair? if hash value, you may need to override toString for InsertBucketCumulativeWeightPair", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463977677", "createdAt": "2020-08-01T16:27:01Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -99,7 +100,7 @@ public UpsertPartitioner(WorkloadProfile profile, JavaSparkContext jsc, HoodieTa\n     assignInserts(profile, jsc);\n \n     LOG.info(\"Total Buckets :\" + totalBuckets + \", buckets info => \" + bucketInfoMap + \", \\n\"\n-        + \"Partition to insert buckets => \" + partitionPathToInsertBuckets + \", \\n\"\n+        + \"Partition to insert buckets => \" + partitionPathToInsertBucketInfos + \", \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Nzg0NQ==", "bodyText": "sorry, probably I mis guided you. (should not happen) but incase the last buckets cumulative weight is not 1.0, there are chances that index value could be equal to size of collection when entry searched for is greater than all entries. Can we accommodate that as well.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463977845", "createdAt": "2020-08-01T16:29:35Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -270,20 +273,24 @@ public int getPartition(Object key) {\n       return updateLocationToBucket.get(location.getFileId());\n     } else {\n       String partitionPath = keyLocation._1().getPartitionPath();\n-      List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n+      List<InsertBucketCumulativeWeightPair> targetBuckets = partitionPathToInsertBucketInfos.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = Collections.binarySearch(targetBuckets, new InsertBucketCumulativeWeightPair(new InsertBucket(), r));\n+\n+      if (index >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODgxOQ==", "bodyText": "typo. weight is 0.08", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463978819", "createdAt": "2020-08-01T16:41:27Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +267,8 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber, \"First insert bucket must be same as update bucket\");\n+    assertEquals(200.0 / 2400, insertBuckets.get(0).getKey().weight, 0.01, \"First insert bucket should have weight 0.5\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODg5OA==", "bodyText": "just curious, why not asserting every buckets weight?", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463978898", "createdAt": "2020-08-01T16:42:26Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +267,8 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber, \"First insert bucket must be same as update bucket\");\n+    assertEquals(200.0 / 2400, insertBuckets.get(0).getKey().weight, 0.01, \"First insert bucket should have weight 0.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODgxOQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/feb77c51617ca9dda8f08a5a2a20ea4ed764f602", "committedDate": "2020-08-01T08:49:20Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "44c13f3eb9e8c723a916721b20dbc2f84e65a49c", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/44c13f3eb9e8c723a916721b20dbc2f84e65a49c", "committedDate": "2020-08-02T00:39:24Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44c13f3eb9e8c723a916721b20dbc2f84e65a49c", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/44c13f3eb9e8c723a916721b20dbc2f84e65a49c", "committedDate": "2020-08-02T00:39:24Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "9b28cdb8a5d4263fc37be7733e3b3578f4a24572", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/9b28cdb8a5d4263fc37be7733e3b3578f4a24572", "committedDate": "2020-08-03T01:33:28Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b28cdb8a5d4263fc37be7733e3b3578f4a24572", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/9b28cdb8a5d4263fc37be7733e3b3578f4a24572", "committedDate": "2020-08-03T01:33:28Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "56ac25dac0913b2a682d9cb9e39ec7968a863f0d", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/56ac25dac0913b2a682d9cb9e39ec7968a863f0d", "committedDate": "2020-08-04T12:17:21Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56ac25dac0913b2a682d9cb9e39ec7968a863f0d", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/56ac25dac0913b2a682d9cb9e39ec7968a863f0d", "committedDate": "2020-08-04T12:17:21Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/556ab6370c37925d036fe700a83370e81f53db8d", "committedDate": "2020-08-04T14:04:54Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTQ1MDY4", "url": "https://github.com/apache/hudi/pull/1868#pullrequestreview-460945068", "createdAt": "2020-08-04T15:50:05Z", "commit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1MDowNlrOG7moBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1MDo0NlrOG7mpsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MjAwNw==", "bodyText": "lets avoid doing one at a time w/ hardcoded expected values. I mean, we should try to do in a loop. Can we build a map of <index -> ExpectedValue>. ExpectedValue should contain bucketNo, bucketType, weight, cumulativeWeight. Once we have this, these 20 lines of assertions will be folded to just 4 to 5 lines.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r465152007", "createdAt": "2020-08-04T15:50:06Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -252,8 +250,27 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(2).bucketType,\n         \"Bucket 2 is INSERT\");\n     assertEquals(3, insertBuckets.size(), \"Total of 3 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(0.5, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber,\n+        \"First insert bucket must be same as update bucket\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MjQzMw==", "bodyText": "same as above. Can we try to fold this up in a loop.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r465152433", "createdAt": "2020-08-04T15:50:46Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +286,34 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/556ab6370c37925d036fe700a83370e81f53db8d", "committedDate": "2020-08-04T14:04:54Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "c878d00f0c17bc49961b287305219a0a95ff8234", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/c878d00f0c17bc49961b287305219a0a95ff8234", "committedDate": "2020-08-06T01:37:18Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c878d00f0c17bc49961b287305219a0a95ff8234", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/c878d00f0c17bc49961b287305219a0a95ff8234", "committedDate": "2020-08-06T01:37:18Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "32124abf97f87521f6514ed22186d85885b03968", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/32124abf97f87521f6514ed22186d85885b03968", "committedDate": "2020-08-06T01:42:04Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32124abf97f87521f6514ed22186d85885b03968", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/32124abf97f87521f6514ed22186d85885b03968", "committedDate": "2020-08-06T01:42:04Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "aa713efe8362aa0c682be59fbdf377ff1c7bbd74", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/aa713efe8362aa0c682be59fbdf377ff1c7bbd74", "committedDate": "2020-08-07T01:55:47Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODk1MjA5", "url": "https://github.com/apache/hudi/pull/1868#pullrequestreview-463895209", "createdAt": "2020-08-09T18:48:50Z", "commit": {"oid": "aa713efe8362aa0c682be59fbdf377ff1c7bbd74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0ODo1MFrOG99Ajw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0ODo1MFrOG99Ajw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNTg4Nw==", "bodyText": "Can't you reuse the same variable ?\nweights = { 0.08, 0.31, 0.31, 0.31};\ncumulativeWeights = { 0.08, 0.39, 0.69, 1.0};", "url": "https://github.com/apache/hudi/pull/1868#discussion_r467615887", "createdAt": "2020-08-09T18:48:50Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +282,10 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+\n+    Double[] weights1 = { 0.08, 0.31, 0.31, 0.31};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa713efe8362aa0c682be59fbdf377ff1c7bbd74"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODk1MjI1", "url": "https://github.com/apache/hudi/pull/1868#pullrequestreview-463895225", "createdAt": "2020-08-09T18:49:02Z", "commit": {"oid": "aa713efe8362aa0c682be59fbdf377ff1c7bbd74"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bd8412968bb66edcef0947c1432a711320e66ca", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/6bd8412968bb66edcef0947c1432a711320e66ca", "committedDate": "2020-08-10T05:20:12Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa713efe8362aa0c682be59fbdf377ff1c7bbd74", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/aa713efe8362aa0c682be59fbdf377ff1c7bbd74", "committedDate": "2020-08-07T01:55:47Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}, "afterCommit": {"oid": "6bd8412968bb66edcef0947c1432a711320e66ca", "author": {"user": {"login": "shenh062326", "name": "Shen Hong"}}, "url": "https://github.com/apache/hudi/commit/6bd8412968bb66edcef0947c1432a711320e66ca", "committedDate": "2020-08-10T05:20:12Z", "message": "[HUDI-1083] Optimization in determining insert bucket location for a given key"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4690, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}