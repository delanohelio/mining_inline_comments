{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0OTc5Mjc2", "number": 1686, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0NzowNlrOEFTRJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0OTowOFrOEFTRkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk0MDIwOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/UtilsCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0NzowNlrOGjbYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0NzowNlrOGjbYSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMTkzMA==", "bodyText": "Shall we change to can not be null!?", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439801930", "createdAt": "2020-06-14T07:47:06Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/UtilsCommand.java", "diffHunk": "@@ -30,9 +31,15 @@\n public class UtilsCommand implements CommandMarker {\n \n   @CliCommand(value = \"utils loadClass\", help = \"Load a class\")\n-  public String loadClass(@CliOption(key = {\"class\"}, help = \"Check mode\") final String clazz) throws Exception {\n-    Class klass = Class.forName(clazz);\n-    return klass.getProtectionDomain().getCodeSource().getLocation().toExternalForm();\n+  public String loadClass(@CliOption(key = {\"class\"}, help = \"Check mode\") final String clazz) {\n+    if (StringUtils.isNullOrEmpty(clazz)) {\n+      return \"Class to be loaded can not null!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk0MDg2OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0ODowM1rOGjbYog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0ODowM1rOGjbYog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjAxOA==", "bodyText": "Use ran or runs?", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802018", "createdAt": "2020-06-14T07:48:03Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk0MTAwOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0ODoxMlrOGjbYsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0ODoxMlrOGjbYsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjAzNQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802035", "createdAt": "2020-06-14T07:48:12Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertTrue(cr.getResult().toString().startsWith(\"file:\")));\n+  }\n+\n+  /**\n+   * Test case for class not found.\n+   */\n+  @Test\n+  public void testLoadClassNotFound() {\n+    String name = \"test.class.NotFound\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk0MTA0OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0ODoyMFrOGjbYuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0ODoyMFrOGjbYuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjA0MQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802041", "createdAt": "2020-06-14T07:48:20Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertTrue(cr.getResult().toString().startsWith(\"file:\")));\n+  }\n+\n+  /**\n+   * Test case for class not found.\n+   */\n+  @Test\n+  public void testLoadClassNotFound() {\n+    String name = \"test.class.NotFound\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertEquals(cr.getResult().toString(), String.format(\"Class %s not found!\", name)));\n+  }\n+\n+  /**\n+   * Test case for load null class.\n+   */\n+  @Test\n+  public void testLoadClassNull() {\n+    String name = \"\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk0MTI4OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0OTowOFrOGjbY4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzo0OTowOFrOGjbY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwMjA4Mw==", "bodyText": "can not null! -> can not be null!?", "url": "https://github.com/apache/hudi/pull/1686#discussion_r439802083", "createdAt": "2020-06-14T07:49:08Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUtilsCommand.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.table.HoodieTable;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class for {@link org.apache.hudi.cli.commands.UtilsCommand}.\n+ */\n+public class TestUtilsCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test case for success load class.\n+   */\n+  @Test\n+  public void testLoadClass() {\n+    String name = HoodieTable.class.getName();\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertTrue(cr.getResult().toString().startsWith(\"file:\")));\n+  }\n+\n+  /**\n+   * Test case for class not found.\n+   */\n+  @Test\n+  public void testLoadClassNotFound() {\n+    String name = \"test.class.NotFound\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertEquals(cr.getResult().toString(), String.format(\"Class %s not found!\", name)));\n+  }\n+\n+  /**\n+   * Test case for load null class.\n+   */\n+  @Test\n+  public void testLoadClassNull() {\n+    String name = \"\";\n+    CommandResult cr = getShell().executeCommand(String.format(\"utils loadClass --class %s\", name));\n+\n+    assertAll(\"Command run success\",\n+        () -> assertTrue(cr.isSuccess()),\n+        () -> assertNotNull(cr.getResult().toString()),\n+        () -> assertEquals(\"Class to be loaded can not null!\", cr.getResult().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4684, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}