{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDA2MjQ4", "number": 1229, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo1Mjo1MVrODYWT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTowOTozMFrODYiRbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODU3OTU2OnYy", "diffSide": "LEFT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo1Mjo1MVrOFeKIyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDo1MDoxNVrOFeN6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NzY4OA==", "bodyText": "why is this ok?", "url": "https://github.com/apache/hudi/pull/1229#discussion_r367167688", "createdAt": "2020-01-15T23:52:51Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java", "diffHunk": "@@ -369,8 +366,6 @@ public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightIns\n     Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n     Preconditions.checkArgument(inflightInstant.isInflight());\n     HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n-    // First write metadata to aux folder", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyOTU5Ng==", "bodyText": "Unlike compaction plan, Cleaner Metadata is never read concurrently read and written. Hence, there is no need to write to .aux folder.", "url": "https://github.com/apache/hudi/pull/1229#discussion_r367229596", "createdAt": "2020-01-16T04:50:15Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java", "diffHunk": "@@ -369,8 +366,6 @@ public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightIns\n     Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n     Preconditions.checkArgument(inflightInstant.isInflight());\n     HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n-    // First write metadata to aux folder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NzY4OA=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDUzOTMzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTowOTozMFrOFecq0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTowOTozMFrOFecq0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MTMxNA==", "bodyText": "but then in the meantime, every reader will be doing two RPCs for this method right? I am thinking about flipping the order.. read from aux first, then fallback to meta path...\nThis way, when we switch to writing in metapath, only the older readers will incur this additional RPC... Does it make sense?", "url": "https://github.com/apache/hudi/pull/1229#discussion_r367471314", "createdAt": "2020-01-16T15:09:30Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java", "diffHunk": "@@ -279,18 +280,28 @@ private void deleteInstantFile(HoodieInstant instant) {\n     return readDataFromPath(detailPath);\n   }\n \n+  public Option<byte[]> readCleanerInfoAsBytes(HoodieInstant instant) {\n+    // Cleaner metadata are always stored only in timeline .hoodie\n+    return readDataFromPath(new Path(metaClient.getMetaPath(), instant.getFileName()));\n+  }\n+\n   //-----------------------------------------------------------------\n   //      BEGIN - COMPACTION RELATED META-DATA MANAGEMENT.\n   //-----------------------------------------------------------------\n \n-  public Option<byte[]> readPlanAsBytes(HoodieInstant instant) {\n-    Path detailPath = null;\n-    if (metaClient.getTimelineLayoutVersion().isNullVersion()) {\n-      detailPath = new Path(metaClient.getMetaAuxiliaryPath(), instant.getFileName());\n-    } else {\n-      detailPath = new Path(metaClient.getMetaPath(), instant.getFileName());\n+  public Option<byte[]> readCompactionPlanAsBytes(HoodieInstant instant) {\n+    try {\n+      // This is going to be the common case in future when 0.5.1 is deployed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4967, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}