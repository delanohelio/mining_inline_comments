{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyODE4MjE1", "number": 2351, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzowMDowN1rOFHX3_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzowMDowN1rOFHX3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjc1NTE2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/metadata/FileSystemBackedTableMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzowMDowN1rOII1U6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxOToyNDo1M1rOIJGtaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEzMzIyNA==", "bodyText": "Here we can use the code from #2343 which @prashantwason is implementing", "url": "https://github.com/apache/hudi/pull/2351#discussion_r546133224", "createdAt": "2020-12-18T23:00:07Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/metadata/FileSystemBackedTableMetadata.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metadata;\n+\n+import org.apache.hudi.common.config.SerializableConfiguration;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class FileSystemBackedTableMetadata implements HoodieTableMetadata {\n+\n+  private final SerializableConfiguration hadoopConf;\n+  private final String datasetBasePath;\n+  private final boolean assumeDatePartitioning;\n+\n+  public FileSystemBackedTableMetadata(SerializableConfiguration conf, String datasetBasePath, boolean assumeDatePartitioning) {\n+    this.hadoopConf = conf;\n+    this.datasetBasePath = datasetBasePath;\n+    this.assumeDatePartitioning = assumeDatePartitioning;\n+  }\n+\n+  @Override\n+  public FileStatus[] getAllFilesInPartition(Path partitionPath) throws IOException {\n+    FileSystem fs = partitionPath.getFileSystem(hadoopConf.get());\n+    return FSUtils.getAllDataFilesInPartition(fs, partitionPath);\n+  }\n+\n+  @Override\n+  public List<String> getAllPartitionPaths() throws IOException {\n+    FileSystem fs = new Path(datasetBasePath).getFileSystem(hadoopConf.get());\n+    if (assumeDatePartitioning) {\n+      return FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, datasetBasePath);\n+    } else {\n+      return FSUtils.getAllFoldersWithPartitionMetaFile(fs, datasetBasePath);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2ca33c085e2125fe4a1d3c8d8327e80bd76351"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxODAyNw==", "bodyText": "Not easy, since this is in hudi-common and we want to keep spark out of this module", "url": "https://github.com/apache/hudi/pull/2351#discussion_r546418027", "createdAt": "2020-12-20T19:24:53Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/metadata/FileSystemBackedTableMetadata.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metadata;\n+\n+import org.apache.hudi.common.config.SerializableConfiguration;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class FileSystemBackedTableMetadata implements HoodieTableMetadata {\n+\n+  private final SerializableConfiguration hadoopConf;\n+  private final String datasetBasePath;\n+  private final boolean assumeDatePartitioning;\n+\n+  public FileSystemBackedTableMetadata(SerializableConfiguration conf, String datasetBasePath, boolean assumeDatePartitioning) {\n+    this.hadoopConf = conf;\n+    this.datasetBasePath = datasetBasePath;\n+    this.assumeDatePartitioning = assumeDatePartitioning;\n+  }\n+\n+  @Override\n+  public FileStatus[] getAllFilesInPartition(Path partitionPath) throws IOException {\n+    FileSystem fs = partitionPath.getFileSystem(hadoopConf.get());\n+    return FSUtils.getAllDataFilesInPartition(fs, partitionPath);\n+  }\n+\n+  @Override\n+  public List<String> getAllPartitionPaths() throws IOException {\n+    FileSystem fs = new Path(datasetBasePath).getFileSystem(hadoopConf.get());\n+    if (assumeDatePartitioning) {\n+      return FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, datasetBasePath);\n+    } else {\n+      return FSUtils.getAllFoldersWithPartitionMetaFile(fs, datasetBasePath);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEzMzIyNA=="}, "originalCommit": {"oid": "0f2ca33c085e2125fe4a1d3c8d8327e80bd76351"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4032, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}