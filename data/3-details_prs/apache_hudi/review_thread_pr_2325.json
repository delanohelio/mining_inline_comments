{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MTQ2Njg5", "number": 2325, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTozNjoyM1rOFVolgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMDo1MDozNVrOFuz9dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjI5Mzc3OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTozNjoyM1rOIeMftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTozNjoyM1rOIeMftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzMjkxNw==", "bodyText": "Remove the empty white space?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568532917", "createdAt": "2021-02-02T11:36:23Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -222,6 +224,8 @@ public String compact(\n           help = \"Parallelism for hoodie compaction\") final String parallelism,\n       @CliOption(key = \"schemaFilePath\", mandatory = true,\n           help = \"Path for Avro schema file\") final String schemaFilePath,\n+      @CliOption(key = \"sparkMaster\", unspecifiedDefaultValue = \"local\",\n+          help = \"Spark Master \") String master,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjMwNDQ2OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTozOTowOFrOIeMmFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTozOTowOFrOIeMmFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNDU0OQ==", "bodyText": "Break the .add into a new line?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568534549", "createdAt": "2021-02-02T11:39:08Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -444,9 +455,12 @@ public String validateCompaction(\n       });\n \n       Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-      TableHeader header = new TableHeader().addTableHeaderField(\"File Id\").addTableHeaderField(\"Base Instant Time\")\n-          .addTableHeaderField(\"Base Data File\").addTableHeaderField(\"Num Delta Files\").addTableHeaderField(\"Valid\")\n-          .addTableHeaderField(\"Error\");\n+      TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjMwNzUxOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTo0MDowMlrOIeMn_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTo0MDowMlrOIeMn_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNTAzNw==", "bodyText": "break the addxxx method into a new line?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568535037", "createdAt": "2021-02-02T11:40:02Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -616,9 +631,12 @@ private String getRenamesToBePrinted(List<RenameOpResult> res, Integer limit, St\n       });\n \n       Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-      TableHeader header = new TableHeader().addTableHeaderField(\"File Id\").addTableHeaderField(\"Source File Path\")\n-          .addTableHeaderField(\"Destination File Path\").addTableHeaderField(\"Rename Executed?\")\n-          .addTableHeaderField(\"Rename Succeeded?\").addTableHeaderField(\"Error\");\n+      TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjMxMzg5OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTo0MTo1M1rOIeMr1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTo0NjowOFrOIfrGLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNjAyMA==", "bodyText": "Why do we need to change this?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568536020", "createdAt": "2021-02-02T11:41:53Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java", "diffHunk": "@@ -194,7 +194,7 @@ public void testShowArchivedCommits() throws Exception {\n     // archived 101 and 102 instants, remove 103 and 104 instant\n     data.remove(\"103\");\n     data.remove(\"104\");\n-    String expected = generateExpectData(3, data);\n+    String expected = generateExpectData(1, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4MjI3OA==", "bodyText": "Why do we need to change this?\n\n\n  \n    \n      hudi/hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java\n    \n    \n         Line 133\n      in\n      647e9fa\n    \n    \n    \n    \n\n        \n          \n           return new HoodieInstant(false, action, instantTime); \n        \n    \n  \n\n\n\n  \n    \n      hudi/hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieInstant.java\n    \n    \n        Lines 103 to 108\n      in\n      647e9fa\n    \n    \n    \n    \n\n        \n          \n           public HoodieInstant(boolean isInflight, String action, String timestamp) { \n        \n\n        \n          \n             // TODO: vb - Preserving for avoiding cascading changes. This constructor will be updated in subsequent PR \n        \n\n        \n          \n             this.state = isInflight ? State.INFLIGHT : State.COMPLETED; \n        \n\n        \n          \n             this.action = action; \n        \n\n        \n          \n             this.timestamp = timestamp; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nnew HoodieInstant(false, action, instantTime) always return COMPLETED when State is not INFLIGHT, so there is 3 COMPLETED records for one instanct. Now, use the real state instead, and can get the correct number.", "url": "https://github.com/apache/hudi/pull/2325#discussion_r570082278", "createdAt": "2021-02-04T09:45:20Z", "author": {"login": "hddong"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java", "diffHunk": "@@ -194,7 +194,7 @@ public void testShowArchivedCommits() throws Exception {\n     // archived 101 and 102 instants, remove 103 and 104 instant\n     data.remove(\"103\");\n     data.remove(\"104\");\n-    String expected = generateExpectData(3, data);\n+    String expected = generateExpectData(1, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNjAyMA=="}, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4Mjg2Mw==", "bodyText": "return new HoodieInstant(HoodieInstant.State.valueOf(record.get(ACTION_STATE).toString()), action, instantTime);", "url": "https://github.com/apache/hudi/pull/2325#discussion_r570082863", "createdAt": "2021-02-04T09:46:08Z", "author": {"login": "hddong"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java", "diffHunk": "@@ -194,7 +194,7 @@ public void testShowArchivedCommits() throws Exception {\n     // archived 101 and 102 instants, remove 103 and 104 instant\n     data.remove(\"103\");\n     data.remove(\"104\");\n-    String expected = generateExpectData(3, data);\n+    String expected = generateExpectData(1, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNjAyMA=="}, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjMyMTY5OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCompactionCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTo0NDowM1rOIeMwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTo1MTo1OFrOIfrW0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNzI1NA==", "bodyText": "Can we follow this naming pattern: testXXXCommand ?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568537254", "createdAt": "2021-02-02T11:44:03Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCompactionCommand.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.avro.model.HoodieCompactionPlan;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.testutils.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.testutils.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.model.HoodieAvroPayload;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.table.timeline.versioning.TimelineLayoutVersion;\n+import org.apache.hudi.common.testutils.CompactionTestUtils;\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.table.HoodieSparkTable;\n+import org.apache.hudi.table.HoodieTimelineArchiveLog;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hudi.common.table.timeline.HoodieTimeline.COMPACTION_ACTION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Test Cases for {@link CompactionCommand}.\n+ */\n+public class TestCompactionCommand extends AbstractShellIntegrationTest {\n+\n+  private String tableName;\n+  private String tablePath;\n+\n+  @BeforeEach\n+  public void init() {\n+    tableName = \"test_table\";\n+    tablePath = basePath + tableName;\n+  }\n+\n+  @Test\n+  public void testVerifyTableType() throws IOException {\n+    // create COW table.\n+    new TableCommand().createTable(\n+        tablePath, tableName, HoodieTableType.COPY_ON_WRITE.name(),\n+        \"\", TimelineLayoutVersion.VERSION_1, HoodieAvroPayload.class.getName());\n+\n+    // expect HoodieException for COPY_ON_WRITE table.\n+    assertThrows(HoodieException.class,\n+        () -> new CompactionCommand().compactionsAll(false, -1, \"\", false, false));\n+  }\n+\n+  @Test\n+  public void testCompactionsAll() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4NzEyMg==", "bodyText": "Can we follow this naming pattern: testXXXCommand ?\n\nAdd java doc for them first as before. Will modify it if needed.", "url": "https://github.com/apache/hudi/pull/2325#discussion_r570087122", "createdAt": "2021-02-04T09:51:58Z", "author": {"login": "hddong"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCompactionCommand.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.avro.model.HoodieCompactionPlan;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.testutils.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.testutils.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.model.HoodieAvroPayload;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.table.timeline.versioning.TimelineLayoutVersion;\n+import org.apache.hudi.common.testutils.CompactionTestUtils;\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.table.HoodieSparkTable;\n+import org.apache.hudi.table.HoodieTimelineArchiveLog;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hudi.common.table.timeline.HoodieTimeline.COMPACTION_ACTION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Test Cases for {@link CompactionCommand}.\n+ */\n+public class TestCompactionCommand extends AbstractShellIntegrationTest {\n+\n+  private String tableName;\n+  private String tablePath;\n+\n+  @BeforeEach\n+  public void init() {\n+    tableName = \"test_table\";\n+    tablePath = basePath + tableName;\n+  }\n+\n+  @Test\n+  public void testVerifyTableType() throws IOException {\n+    // create COW table.\n+    new TableCommand().createTable(\n+        tablePath, tableName, HoodieTableType.COPY_ON_WRITE.name(),\n+        \"\", TimelineLayoutVersion.VERSION_1, HoodieAvroPayload.class.getName());\n+\n+    // expect HoodieException for COPY_ON_WRITE table.\n+    assertThrows(HoodieException.class,\n+        () -> new CompactionCommand().compactionsAll(false, -1, \"\", false, false));\n+  }\n+\n+  @Test\n+  public void testCompactionsAll() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNzI1NA=="}, "originalCommit": {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5Nzk3MDQ2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjoyMjowOVrOI9Pv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjoyMjowOVrOI9Pv5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTA5MjA2OQ==", "bodyText": "\"actionState\" -> ACTION_STATE", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601092069", "createdAt": "2021-03-25T06:22:09Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -108,6 +120,14 @@ public void loadInstantDetailsInMemory(String startTs, String endTs) {\n     loadInstants(startTs, endTs);\n   }\n \n+  public void loadCompactionDetailsInMemory(String startTs, String endTs) {\n+    // load compactionPlan\n+    loadInstants(new TimeRangeFilter(startTs, endTs), true, record ->\n+        record.get(ACTION_TYPE_KEY).toString().equals(HoodieTimeline.COMPACTION_ACTION)\n+            && HoodieInstant.State.INFLIGHT.toString().equals(record.get(\"actionState\").toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5Nzk3NTQ4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjoyMzowMlrOI9PzTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjoyMzowMlrOI9PzTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTA5Mjk0MA==", "bodyText": "This method seems not used anywhere?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601092940", "createdAt": "2021-03-25T06:23:02Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -254,4 +288,19 @@ private int getArchivedFileSuffix(FileStatus f) {\n       return 0;\n     }\n   }\n+\n+  @Override\n+  public HoodieDefaultTimeline getCommitsAndCompactionTimeline() {\n+    // filter in-memory instants\n+    Set<String> validActions = CollectionUtils.createSet(COMMIT_ACTION, DELTA_COMMIT_ACTION, COMPACTION_ACTION, REPLACE_COMMIT_ACTION);\n+    return new HoodieDefaultTimeline(getInstants().filter(i ->\n+        readCommits.keySet().contains(i.getTimestamp()))\n+        .filter(s -> validActions.contains(s.getAction())), details);\n+  }\n+\n+  public HoodieArchivedTimeline filterArchivedCompactionInstant() {\n+    // filter INFLIGHT compaction instants\n+    return new HoodieArchivedTimeline(this.metaClient, getInstants().filter(i ->\n+        i.isInflight() && i.getAction().equals(HoodieTimeline.COMPACTION_ACTION)));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5ODA0ODM4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineMetadataUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjo0MjowOVrOI9QhSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjo0MjowOVrOI9QhSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEwNDcxMw==", "bodyText": "param Class<T> clazz seems redundant", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601104713", "createdAt": "2021-03-25T06:42:09Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineMetadataUtils.java", "diffHunk": "@@ -176,4 +179,13 @@ public static HoodieReplaceCommitMetadata deserializeHoodieReplaceMetadata(byte[\n     ValidationUtils.checkArgument(fileReader.hasNext(), \"Could not deserialize metadata of type \" + clazz);\n     return fileReader.next();\n   }\n+\n+  public static <T extends SpecificRecordBase> T deserializeAvroRecordMetadata(byte[] bytes, Schema schema, Class<T> clazz)\n+      throws IOException {\n+    return  deserializeAvroRecordMetadata(HoodieAvroUtils.bytesToAvro(bytes, schema), schema, clazz);\n+  }\n+\n+  public static <T extends SpecificRecordBase> T deserializeAvroRecordMetadata(Object object, Schema schema, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5ODEyNDQyOnYy", "diffSide": "LEFT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNjo1NjozMlrOI9RQkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMlQwOTo1MzozNVrOJCFd2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw==", "bodyText": "why remove this?", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601116817", "createdAt": "2021-03-25T06:56:32Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEyMDg5MA==", "bodyText": "if we want to load a ts equals compactionInstantTime, can we add a new method that takes only one instantTime as input param? WDYT", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601120890", "createdAt": "2021-03-25T07:01:10Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw=="}, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjE2NjQ5MA==", "bodyText": "if we want to load a ts equals compactionInstantTime, can we add a new method that takes only one instantTime as input param? WDYT\n\nYes, had add it.", "url": "https://github.com/apache/hudi/pull/2325#discussion_r606166490", "createdAt": "2021-04-02T09:53:35Z", "author": {"login": "hddong"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw=="}, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5ODE1NTcxOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNzowMjoxM1rOI9RjYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwNzowMjoxM1rOI9RjYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEyMTYzMw==", "bodyText": "same here", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601121633", "createdAt": "2021-03-25T07:02:13Z", "author": {"login": "wangxianghu"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);\n     try {\n-      archivedTimeline.loadInstantDetailsInMemory(startTs, endTs);\n-      HoodieCompactionPlan compactionPlan = TimelineMetadataUtils.deserializeCompactionPlan(\n-              archivedTimeline.getInstantDetails(instant).get());\n+      archivedTimeline.loadCompactionDetailsInMemory(compactionInstantTime, compactionInstantTime);\n+      HoodieCompactionPlan compactionPlan = TimelineMetadataUtils.deserializeAvroRecordMetadata(\n+              archivedTimeline.getInstantDetails(instant).get(), HoodieCompactionPlan.getClassSchema(),\n+              HoodieCompactionPlan.class);\n       return printCompaction(compactionPlan, sortByField, descending, limit, headerOnly);\n     } finally {\n-      archivedTimeline.clearInstantDetailsFromMemory(startTs, endTs);\n+      archivedTimeline.clearInstantDetailsFromMemory(compactionInstantTime, compactionInstantTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg0NjMwMTM1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMDo1MDozNVrOJEFwOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMDo1MDozNVrOJEFwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODM0Ng==", "bodyText": "@hddong  This constructor is redundant.", "url": "https://github.com/apache/hudi/pull/2325#discussion_r608268346", "createdAt": "2021-04-07T00:50:35Z", "author": {"login": "wangxianghu"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -84,6 +88,14 @@ public HoodieArchivedTimeline(HoodieTableMetaClient metaClient) {\n     this.details = (Function<HoodieInstant, Option<byte[]>> & Serializable) this::getInstantDetails;\n   }\n \n+  public HoodieArchivedTimeline(HoodieTableMetaClient metaClient, Stream<HoodieInstant> instants) {\n+    this.metaClient = metaClient;\n+    setInstants(instants.collect(Collectors.toList()));\n+    // multiple casts will make this lambda serializable -\n+    // http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.16\n+    this.details = (Function<HoodieInstant, Option<byte[]>> & Serializable) this::getInstantDetails;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483bf74186c0b317be886e4c5c3a1a1d3b3a08b8"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}