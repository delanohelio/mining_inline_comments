{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0Njg0NjMz", "number": 1524, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjowOToyMVrODy4FNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1ODozN1rODzBygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc0MjMxOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjowOToyMlrOGHLZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzowODozMVrOGIextA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MDA0NQ==", "bodyText": "Can we try to use the one from TestHoodieDeltaStreamer? That would help avoid code duplication.", "url": "https://github.com/apache/hudi/pull/1524#discussion_r410180045", "createdAt": "2020-04-17T12:09:22Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.apache.hudi.utilities;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.utilities.schema.SchemaPostProcessor;\n+import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.hudi.utilities.schema.SchemaProvider.Config;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.junit.Test;\n+\n+public class TestSchemaPostProcessor {\n+\n+  private TypedProperties properties = new TypedProperties();\n+\n+  @Test\n+  public void testPostProcessor() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n+\n+    JavaSparkContext jsc =\n+        UtilHelpers.buildSparkContext(this.getClass().getName() + \"-hoodie\", \"local[2]\");\n+    SchemaProvider provider =\n+        UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc);\n+\n+    Schema schema = provider.getSourceSchema();\n+    assertEquals(schema.getType(), Type.RECORD);\n+    assertEquals(schema.getName(), \"test\");\n+    assertNotNull(schema.getField(\"testString\"));\n+  }\n+\n+  public static class DummySchemaProvider extends SchemaProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0NjAzNg==", "bodyText": "done", "url": "https://github.com/apache/hudi/pull/1524#discussion_r411546036", "createdAt": "2020-04-20T17:08:31Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.apache.hudi.utilities;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.utilities.schema.SchemaPostProcessor;\n+import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.hudi.utilities.schema.SchemaProvider.Config;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.junit.Test;\n+\n+public class TestSchemaPostProcessor {\n+\n+  private TypedProperties properties = new TypedProperties();\n+\n+  @Test\n+  public void testPostProcessor() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n+\n+    JavaSparkContext jsc =\n+        UtilHelpers.buildSparkContext(this.getClass().getName() + \"-hoodie\", \"local[2]\");\n+    SchemaProvider provider =\n+        UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc);\n+\n+    Schema schema = provider.getSourceSchema();\n+    assertEquals(schema.getType(), Type.RECORD);\n+    assertEquals(schema.getName(), \"test\");\n+    assertNotNull(schema.getField(\"testString\"));\n+  }\n+\n+  public static class DummySchemaProvider extends SchemaProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MDA0NQ=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMyNjU4OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1NjoxNVrOGHbQLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1NjoxNVrOGHbQLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzOTcyNA==", "bodyText": "can we fix the import order here?", "url": "https://github.com/apache/hudi/pull/1524#discussion_r410439724", "createdAt": "2020-04-17T19:56:15Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -18,6 +18,30 @@\n \n package org.apache.hudi.utilities;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringReader;\n+import java.nio.ByteBuffer;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import org.apache.avro.Schema;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMyODA4OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/FilebasedSchemaProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1Njo1MFrOGHbRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1Njo1MFrOGHbRMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzOTk4NQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1524#discussion_r410439985", "createdAt": "2020-04-17T19:56:50Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/FilebasedSchemaProvider.java", "diffHunk": "@@ -18,24 +18,27 @@\n \n package org.apache.hudi.utilities.schema;\n \n+import java.io.IOException;\n+import java.util.Collections;\n+import org.apache.avro.Schema;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMzMDI3OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/NullTargetSchemaRegistryProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1Nzo0NVrOGHbSrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1Nzo0NVrOGHbSrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDM2Ng==", "bodyText": "ditto.", "url": "https://github.com/apache/hudi/pull/1524#discussion_r410440366", "createdAt": "2020-04-17T19:57:45Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/NullTargetSchemaRegistryProvider.java", "diffHunk": "@@ -18,14 +18,14 @@\n \n package org.apache.hudi.utilities.schema;\n \n-import org.apache.hudi.common.config.TypedProperties;\n-\n import org.apache.avro.Schema;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.util.collection.Pair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMzMjgzOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/RowBasedSchemaProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1ODozN1rOGHbUOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1ODozN1rOGHbUOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDc2MA==", "bodyText": "please reorder imports according to our checkstyle rules everywhere.", "url": "https://github.com/apache/hudi/pull/1524#discussion_r410440760", "createdAt": "2020-04-17T19:58:37Z", "author": {"login": "pratyakshsharma"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/RowBasedSchemaProvider.java", "diffHunk": "@@ -22,29 +22,30 @@\n import org.apache.hudi.common.config.TypedProperties;\n \n import org.apache.avro.Schema;\n+import org.apache.hudi.common.util.collection.Pair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4790, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}