{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTM0MjQz", "number": 1332, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozNzowMlrODfwVDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozOTo0MVrODkxRXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjI0MjcxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozNzowMlrOFppRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNDo0NlrOFrSqIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxMjA3MA==", "bodyText": "This is assuming that the block length will always be the last thing written in the footer, can we add comments in the footer writer part to denote this", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379212070", "createdAt": "2020-02-14T01:37:02Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzODc4NQ==", "bodyText": "added comment to the write", "url": "https://github.com/apache/hudi/pull/1332#discussion_r380938785", "createdAt": "2020-02-18T21:14:46Z", "author": {"login": "ramachandranms"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxMjA3MA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjI0NTgxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozOTowNlrOFppTDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozOTowNlrOFppTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxMjU1Ng==", "bodyText": "nit : s/blockSizeFooter/blockSizeFromFooter", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379212556", "createdAt": "2020-02-14T01:39:06Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);\n+    long blockSizeFooter = inputStream.readLong() - MAGIC_BUFFER.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODQ0MjUxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozNDowOFrOFp-SRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNjo0MFrOFrStnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NjQyMA==", "bodyText": "Also, we need some kind of abstraction here, feel like the reading of the block size based on long bytes is leaking here and will open to other issues when trying to evolve the code. For now, can you move this to a method and add a test case just for this ? Make that method @VisibleForTesting so it's available to be called in the test class - this way if the footer is evolved, we have a test to catch issues", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379556420", "createdAt": "2020-02-14T17:34:08Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTY3Nw==", "bodyText": "verified that the tests will fail if the footer is evolved in any way. also added the following logs to better troubleshoot why a corrupted block was detected.\n4828 [main] INFO  org.apache.hudi.common.table.log.HoodieLogFileReader  - Found corrupted block in file HoodieLogFile{pathStr='/var/folders/ch/42h2kyw10_l0509znbppmrsm0000gn/T/junit3752725921138110721/.test-fileid1_100.log.1_1-0-1', fileLen=0}. No magic hash found right after footer block size entry\n\n4700 [main] INFO  org.apache.hudi.common.table.log.HoodieLogFileReader  - Found corrupted block in file HoodieLogFile{pathStr='/var/folders/ch/42h2kyw10_l0509znbppmrsm0000gn/T/junit8143862081174382297/.test-fileid1_100.log.1_1-0-1', fileLen=0}. Header block size(2135) did not match the footer block size(2235)\n\n4316 [main] INFO  org.apache.hudi.common.table.log.HoodieLogFileReader  - Found corrupted block in file HoodieLogFile{pathStr='/var/folders/ch/42h2kyw10_l0509znbppmrsm0000gn/T/junit973614944657653272/.test-fileid1_100.log.1_1-0-1', fileLen=0} with block size(21350) running past EOF```", "url": "https://github.com/apache/hudi/pull/1332#discussion_r380939677", "createdAt": "2020-02-18T21:16:40Z", "author": {"login": "ramachandranms"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NjQyMA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODQ1MDYxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozNzowN1rOFp-XTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzozNDozM1rOFqGaPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NzcwOA==", "bodyText": "This code is pretty complicated to understand. I see that you removed hasNext() and added some code around this + handling of corrupt blocks here. Can this be simplified with hasNext(), checkCorruptBlock() method level abstractions ? We need more logs as well to explain such checks..", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379557708", "createdAt": "2020-02-14T17:37:07Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -362,13 +370,18 @@ public HoodieLogBlock prev() throws IOException {\n     // blocksize should read everything about a block including the length as well\n     try {\n       inputStream.seek(reverseLogFilePosition - blockSize);\n+      // get the block size from head and match it with the block size from tail", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4OTUzNQ==", "bodyText": "talked offline. will create a new JIRA to address reverse reading issues", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379689535", "createdAt": "2020-02-14T23:34:33Z", "author": {"login": "ramachandranms"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -362,13 +370,18 @@ public HoodieLogBlock prev() throws IOException {\n     // blocksize should read everything about a block including the length as well\n     try {\n       inputStream.seek(reverseLogFilePosition - blockSize);\n+      // get the block size from head and match it with the block size from tail", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NzcwOA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODgyNTg4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozOTo0MVrOFxR07Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozOTo0MVrOFxR07Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNjYyMQ==", "bodyText": "Can you add the reason why we subtracting Magic header length", "url": "https://github.com/apache/hudi/pull/1332#discussion_r387216621", "createdAt": "2020-03-03T18:39:41Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,12 +240,24 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);\n+    long blockSizeFromFooter = inputStream.readLong() - MAGIC_BUFFER.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4827, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}