{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzE2MzM2", "number": 1440, "title": "[HUDI-731] Add ChainedTransformer", "bodyText": "Add ChainedTransformer to facilitate chained transformation. A subclass is to supply a list transformers.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-24T01:00:58Z", "url": "https://github.com/apache/hudi/pull/1440", "merged": true, "mergeCommit": {"oid": "5b53b0d85e0d60a37c37941b5a653b0718534e7b"}, "closed": true, "closedAt": "2020-04-01T15:21:32Z", "author": {"login": "xushiyan"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQoT5EABqjMxNTc2ODM0NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTN3WcABqjMxODU4NTYzODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTYwNzk0", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-379960794", "createdAt": "2020-03-24T02:32:03Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozMjowM1rOF6e_ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozNDo1NFrOF6fCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTU3MQ==", "bodyText": "This class missed the Apache license header. And it's strange why the Travis is green? Does it not check this rule? cc @vinothchandar", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396869571", "createdAt": "2020-03-24T02:32:03Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/transform/ChainedTransformer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.apache.hudi.utilities.transform;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTkzOQ==", "bodyText": "It would be better to have a test case which extends ChainedTransformer  and mock some transformer to verify this function.", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396869939", "createdAt": "2020-03-24T02:33:32Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/transform/ChainedTransformer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.apache.hudi.utilities.transform;\n+\n+import org.apache.hudi.common.util.TypedProperties;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+/**\n+ * An abstract {@link Transformer} to chain other {@link Transformer}s and apply sequentially.\n+ * <p>\n+ * A subclass is to supply a {@link List} of {@link Transformer}s in desired sequence.\n+ */\n+public abstract class ChainedTransformer implements Transformer {\n+\n+  protected abstract Supplier<List<Transformer>> supplyTransformers();\n+\n+  @Override\n+  public Dataset<Row> apply(JavaSparkContext jsc, SparkSession sparkSession, Dataset<Row> rowDataset, TypedProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIzNg==", "bodyText": "It's a user-faced feature, we'd better to describe it in the documentation. WDYT?", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396870236", "createdAt": "2020-03-24T02:34:54Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/transform/ChainedTransformer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.apache.hudi.utilities.transform;\n+\n+import org.apache.hudi.common.util.TypedProperties;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+/**\n+ * An abstract {@link Transformer} to chain other {@link Transformer}s and apply sequentially.\n+ * <p>\n+ * A subclass is to supply a {@link List} of {@link Transformer}s in desired sequence.\n+ */\n+public abstract class ChainedTransformer implements Transformer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTkyOTk4", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-379992998", "createdAt": "2020-03-24T04:28:55Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzg5MjUz", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-383389253", "createdAt": "2020-03-29T09:11:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwOToxMToxNFrOF9P9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwOToxMToxNFrOF9P9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2ODk2MQ==", "bodyText": "Can we add a CLI test case for arg --transformer-class so that we can cover the change of this method?", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399768961", "createdAt": "2020-03-29T09:11:14Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -102,11 +104,23 @@ public static SchemaProvider createSchemaProvider(String schemaProviderClass, Ty\n     }\n   }\n \n-  public static Transformer createTransformer(String transformerClass) throws IOException {\n+  public static Transformer createTransformer(String transformerClasses) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDA3NDc1", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-383407475", "createdAt": "2020-03-29T12:48:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMjo0ODozMFrOF9RcCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMjo0ODozMFrOF9RcCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc5MzE2Mg==", "bodyText": "Missing Apache Header.", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399793162", "createdAt": "2020-03-29T12:48:30Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/transform/TestChainedTransformer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.apache.hudi.utilities.transform;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDI3Nzg1", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-383427785", "createdAt": "2020-03-29T16:12:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNjoxMjoxOFrOF9TAMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNjoxMjo0NVrOF9TAVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODgwMQ==", "bodyText": "jcommander supports parsing a list of csvs into a List here already. could we switch to that", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399818801", "createdAt": "2020-03-29T16:12:18Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/HoodieDeltaStreamer.java", "diffHunk": "@@ -195,11 +195,12 @@ public Operation convert(String value) throws ParameterException {\n     public String schemaProviderClassName = null;\n \n     @Parameter(names = {\"--transformer-class\"},\n-        description = \"subclass of org.apache.hudi.utilities.transform.Transformer\"\n+        description = \"A subclass or a list of subclasses of org.apache.hudi.utilities.transform.Transformer\"\n             + \". Allows transforming raw source Dataset to a target Dataset (conforming to target schema) before \"\n             + \"writing. Default : Not set. E:g - org.apache.hudi.utilities.transform.SqlQueryBasedTransformer (which \"\n-            + \"allows a SQL query templated to be passed as a transformation function)\")\n-    public String transformerClassName = null;\n+            + \"allows a SQL query templated to be passed as a transformation function). \"\n+            + \"Pass a comma-separated list of subclass names to chain the transformations.\")\n+    public String transformerClassNames = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODgzNw==", "bodyText": "this logic can be pushed to command line parsing?", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399818837", "createdAt": "2020-03-29T16:12:45Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -102,11 +104,23 @@ public static SchemaProvider createSchemaProvider(String schemaProviderClass, Ty\n     }\n   }\n \n-  public static Transformer createTransformer(String transformerClass) throws IOException {\n+  public static Transformer createTransformer(String transformerClasses) throws IOException {\n     try {\n-      return transformerClass == null ? null : (Transformer) ReflectionUtils.loadClass(transformerClass);\n+      if (transformerClasses == null) {\n+        return null;\n+      }\n+\n+      String[] classNames = Arrays.stream(transformerClasses.split(\",\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTA5MTQz", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-383509143", "createdAt": "2020-03-30T03:23:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoyMzozMFrOF9YcGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoyNToxNlrOF9Ydkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzg2NQ==", "bodyText": "It would be better to add java docs for the test class.", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399907865", "createdAt": "2020-03-30T03:23:30Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestUtilHelpers.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.transform.ChainedTransformer;\n+import org.apache.hudi.utilities.transform.Transformer;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Enclosed.class)\n+public class TestUtilHelpers {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODE3NQ==", "bodyText": "IMO, it is not necessary to create this static class, all the test cases can be placed in the TestUtilHelpers.", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399908175", "createdAt": "2020-03-30T03:24:54Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestUtilHelpers.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.transform.ChainedTransformer;\n+import org.apache.hudi.utilities.transform.Transformer;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Enclosed.class)\n+public class TestUtilHelpers {\n+\n+  public static class TestCreateTransformer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODI0Mw==", "bodyText": "Java doc", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399908243", "createdAt": "2020-03-30T03:25:16Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/transform/TestChainedTransformer.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.transform;\n+\n+import org.apache.hudi.utilities.UtilHelpers;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.apache.spark.sql.types.DataTypes.IntegerType;\n+import static org.apache.spark.sql.types.DataTypes.StringType;\n+import static org.apache.spark.sql.types.DataTypes.createStructField;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestChainedTransformer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "author": {"user": {"login": "xushiyan", "name": "Raymond Xu"}}, "url": "https://github.com/apache/hudi/commit/fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "committedDate": "2020-03-30T23:19:07Z", "message": "[HUDI-731] Add ChainedTransformer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "author": {"user": {"login": "xushiyan", "name": "Raymond Xu"}}, "url": "https://github.com/apache/hudi/commit/fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "committedDate": "2020-03-30T23:19:07Z", "message": "[HUDI-731] Add ChainedTransformer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NDQ3NDAy", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-384447402", "createdAt": "2020-03-31T06:56:17Z", "commit": {"oid": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODMxMjUw", "url": "https://github.com/apache/hudi/pull/1440#pullrequestreview-384831250", "createdAt": "2020-03-31T15:09:02Z", "commit": {"oid": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTowOTowMlrOF-aiZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTowOTowMlrOF-aiZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5MDgyMw==", "bodyText": "let's use Optional instead of null.. NPE are pesky :)", "url": "https://github.com/apache/hudi/pull/1440#discussion_r400990823", "createdAt": "2020-03-31T15:09:02Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -102,11 +104,19 @@ public static SchemaProvider createSchemaProvider(String schemaProviderClass, Ty\n     }\n   }\n \n-  public static Transformer createTransformer(String transformerClass) throws IOException {\n+  public static Transformer createTransformer(List<String> classNames) throws IOException {\n     try {\n-      return transformerClass == null ? null : (Transformer) ReflectionUtils.loadClass(transformerClass);\n+      if (classNames == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2510e16d068a915a850a025ee1caa8b0db041558", "author": {"user": {"login": "xushiyan", "name": "Raymond Xu"}}, "url": "https://github.com/apache/hudi/commit/2510e16d068a915a850a025ee1caa8b0db041558", "committedDate": "2020-04-01T01:59:43Z", "message": "use Option<Transformer>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2510e16d068a915a850a025ee1caa8b0db041558", "author": {"user": {"login": "xushiyan", "name": "Raymond Xu"}}, "url": "https://github.com/apache/hudi/commit/2510e16d068a915a850a025ee1caa8b0db041558", "committedDate": "2020-04-01T01:59:43Z", "message": "use Option<Transformer>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3233, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}