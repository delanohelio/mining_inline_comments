{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwOTkzMjcy", "number": 2074, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjo1Mjo1NVrOEkVLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDozNTozNlrOEn47kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTMxMTcxOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjo1Mjo1NVrOHTNnRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjo1Mjo1NVrOHTNnRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkwODAzNw==", "bodyText": "Why two empty lines?", "url": "https://github.com/apache/hudi/pull/2074#discussion_r489908037", "createdAt": "2020-09-17T02:52:55Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -191,9 +193,13 @@ public DeltaSync(HoodieDeltaStreamer.Config cfg, SparkSession sparkSession, Sche\n     this.transformer = UtilHelpers.createTransformer(cfg.transformerClassNames);\n     this.keyGenerator = DataSourceUtils.createKeyGenerator(props);\n \n+    this.metrics = new HoodieDeltaStreamerMetrics(getHoodieClientConfig(this.schemaProvider));\n+\n     this.formatAdapter = new SourceFormatAdapter(\n-        UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider));\n+        UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider, metrics));\n     this.conf = conf;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086cd7db0eb1d9a4f5911f31fca7cb9b431b243b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU5OTc4OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMTozNjowOVrOHYjyqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMjozMDozNVrOHYkBvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNDI4Mg==", "bodyText": "Replace class name  with XXX.class.getName() should be better", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495514282", "createdAt": "2020-09-27T01:36:09Z", "author": {"login": "wangxianghu"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -190,8 +192,16 @@ public DeltaSync(HoodieDeltaStreamer.Config cfg, SparkSession sparkSession, Sche\n     this.transformer = UtilHelpers.createTransformer(cfg.transformerClassNames);\n     this.keyGenerator = DataSourceUtils.createKeyGenerator(props);\n \n-    this.formatAdapter = new SourceFormatAdapter(\n-        UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider));\n+    this.metrics = new HoodieDeltaStreamerMetrics(getHoodieClientConfig(this.schemaProvider));\n+\n+    if (\"org.apache.hudi.utilities.sources.JsonKafkaSource\".equals(cfg.sourceClassName)\n+            || \"org.apache.hudi.utilities.sources.AvroKafkaSource\".equals(cfg.sourceClassName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed39ee43058bbd3efd46400a9801a0401150e4ea"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxODE0Mg==", "bodyText": "OK, all right", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495518142", "createdAt": "2020-09-27T02:30:35Z", "author": {"login": "liujinhui1994"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -190,8 +192,16 @@ public DeltaSync(HoodieDeltaStreamer.Config cfg, SparkSession sparkSession, Sche\n     this.transformer = UtilHelpers.createTransformer(cfg.transformerClassNames);\n     this.keyGenerator = DataSourceUtils.createKeyGenerator(props);\n \n-    this.formatAdapter = new SourceFormatAdapter(\n-        UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider));\n+    this.metrics = new HoodieDeltaStreamerMetrics(getHoodieClientConfig(this.schemaProvider));\n+\n+    if (\"org.apache.hudi.utilities.sources.JsonKafkaSource\".equals(cfg.sourceClassName)\n+            || \"org.apache.hudi.utilities.sources.AvroKafkaSource\".equals(cfg.sourceClassName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNDI4Mg=="}, "originalCommit": {"oid": "ed39ee43058bbd3efd46400a9801a0401150e4ea"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTYyMDc1OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMjoxMDoxM1rOHYj8Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMjozOToxNlrOHYkEVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNjcyMg==", "bodyText": "@liujinhui1994 thanks for your contribution, I left some comments you can consider.", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495516722", "createdAt": "2020-09-27T02:10:13Z", "author": {"login": "wangxianghu"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java", "diffHunk": "@@ -242,7 +245,7 @@ public void testJsonKafkaSourceWithConfigurableUpperCap() {\n     HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n     TypedProperties props = createPropsForJsonSource(500L, \"earliest\");\n \n-    Source jsonSource = new JsonKafkaSource(props, jsc, sparkSession, schemaProvider);\n+    Source jsonSource = new JsonKafkaSource(props, jsc, sparkSession, schemaProvider, metrics);\n     SourceFormatAdapter kafkaSource = new SourceFormatAdapter(jsonSource);\n \n     // 1. Extract without any checkpoint => get all the data, respecting sourceLimit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed39ee43058bbd3efd46400a9801a0401150e4ea"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxODI1OA==", "bodyText": "It seems we can use the same metric in one sync loop.  how about initializing it at the begging(in DeltaSync ) and deliver it to the source constructor?", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495518258", "createdAt": "2020-09-27T02:31:56Z", "author": {"login": "wangxianghu"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java", "diffHunk": "@@ -242,7 +245,7 @@ public void testJsonKafkaSourceWithConfigurableUpperCap() {\n     HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n     TypedProperties props = createPropsForJsonSource(500L, \"earliest\");\n \n-    Source jsonSource = new JsonKafkaSource(props, jsc, sparkSession, schemaProvider);\n+    Source jsonSource = new JsonKafkaSource(props, jsc, sparkSession, schemaProvider, metrics);\n     SourceFormatAdapter kafkaSource = new SourceFormatAdapter(jsonSource);\n \n     // 1. Extract without any checkpoint => get all the data, respecting sourceLimit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNjcyMg=="}, "originalCommit": {"oid": "ed39ee43058bbd3efd46400a9801a0401150e4ea"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxODgwNg==", "bodyText": "This is also a way. Currently non-kafka souce has not used metic, so I made a judgment and only passed metic when kafka souce", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495518806", "createdAt": "2020-09-27T02:39:16Z", "author": {"login": "liujinhui1994"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java", "diffHunk": "@@ -242,7 +245,7 @@ public void testJsonKafkaSourceWithConfigurableUpperCap() {\n     HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n     TypedProperties props = createPropsForJsonSource(500L, \"earliest\");\n \n-    Source jsonSource = new JsonKafkaSource(props, jsc, sparkSession, schemaProvider);\n+    Source jsonSource = new JsonKafkaSource(props, jsc, sparkSession, schemaProvider, metrics);\n     SourceFormatAdapter kafkaSource = new SourceFormatAdapter(jsonSource);\n \n     // 1. Extract without any checkpoint => get all the data, respecting sourceLimit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNjcyMg=="}, "originalCommit": {"oid": "ed39ee43058bbd3efd46400a9801a0401150e4ea"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTY0MzM3OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMjo0NzowM1rOHYkGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMjo0NzowM1rOHYkGpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTM5Nw==", "bodyText": "Move this check into UtilHelpers#createSource?  use different constructor according to source type\nthis can avoid checking two times", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495519397", "createdAt": "2020-09-27T02:47:03Z", "author": {"login": "wangxianghu"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -190,8 +194,16 @@ public DeltaSync(HoodieDeltaStreamer.Config cfg, SparkSession sparkSession, Sche\n     this.transformer = UtilHelpers.createTransformer(cfg.transformerClassNames);\n     this.keyGenerator = DataSourceUtils.createKeyGenerator(props);\n \n-    this.formatAdapter = new SourceFormatAdapter(\n-        UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider));\n+    this.metrics = new HoodieDeltaStreamerMetrics(getHoodieClientConfig(this.schemaProvider));\n+\n+    if (JsonKafkaSource.class.getName().equals(cfg.sourceClassName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4b7808fbf299645670183fac0b3b05a586d436"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjYyMzc5OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDozMjozNVrOHYrbLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDozMjozNVrOHYrbLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzOTM0Mg==", "bodyText": "Why change this indent?", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495639342", "createdAt": "2020-09-28T00:32:35Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -93,11 +96,19 @@\n   private static final Logger LOG = LogManager.getLogger(UtilHelpers.class);\n \n   public static Source createSource(String sourceClass, TypedProperties cfg, JavaSparkContext jssc,\n-                                    SparkSession sparkSession, SchemaProvider schemaProvider) throws IOException {\n+                                    SparkSession sparkSession, SchemaProvider schemaProvider, HoodieDeltaStreamerMetrics metrics) throws IOException {\n+\n     try {\n+      if (JsonKafkaSource.class.getName().equals(sourceClass)\n+              || AvroKafkaSource.class.getName().equals(sourceClass)) {\n+        return (Source) ReflectionUtils.loadClass(sourceClass,\n+                new Class<?>[]{TypedProperties.class, JavaSparkContext.class, SparkSession.class, SchemaProvider.class, HoodieDeltaStreamerMetrics.class}, cfg,\n+                jssc, sparkSession, schemaProvider, metrics);\n+      }\n+\n       return (Source) ReflectionUtils.loadClass(sourceClass,\n-          new Class<?>[] {TypedProperties.class, JavaSparkContext.class, SparkSession.class, SchemaProvider.class}, cfg,\n-          jssc, sparkSession, schemaProvider);\n+              new Class<?>[] {TypedProperties.class, JavaSparkContext.class, SparkSession.class, SchemaProvider.class}, cfg,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf281f59d808b3ea021012019d3f35ce524fa15"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjYyNDE3OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDozMjo1OFrOHYrbYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDozMjo1OFrOHYrbYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzOTM5NQ==", "bodyText": "The first indent is correct?", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495639395", "createdAt": "2020-09-28T00:32:58Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -190,8 +192,10 @@ public DeltaSync(HoodieDeltaStreamer.Config cfg, SparkSession sparkSession, Sche\n     this.transformer = UtilHelpers.createTransformer(cfg.transformerClassNames);\n     this.keyGenerator = DataSourceUtils.createKeyGenerator(props);\n \n+    this.metrics = new HoodieDeltaStreamerMetrics(getHoodieClientConfig(this.schemaProvider));\n+\n     this.formatAdapter = new SourceFormatAdapter(\n-        UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider));\n+         UtilHelpers.createSource(cfg.sourceClassName, props, jssc, sparkSession, schemaProvider, metrics));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf281f59d808b3ea021012019d3f35ce524fa15"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjYyNjc1OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDozNTozNlrOHYrcsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDozNTozNlrOHYrcsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzOTczMQ==", "bodyText": "delayOffectCalculation  -> delayOffsetCalculation ?", "url": "https://github.com/apache/hudi/pull/2074#discussion_r495639731", "createdAt": "2020-09-28T00:35:36Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java", "diffHunk": "@@ -233,6 +235,18 @@ public KafkaOffsetGen(TypedProperties props) {\n     return checkpointOffsetReseter ? earliestOffsets : checkpointOffsets;\n   }\n \n+  private Long delayOffectCalculation(Option<String> lastCheckpointStr, Set<TopicPartition> topicPartitions, KafkaConsumer consumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf281f59d808b3ea021012019d3f35ce524fa15"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4270, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}