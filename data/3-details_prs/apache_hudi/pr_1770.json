{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTE4MjYw", "number": 1770, "title": "[HUDI-708]Add temps show and unit test for TempViewCommand", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\n1. Add command temps show\n2. Add unit test for TempViewCommand\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-06-27T14:24:19Z", "url": "https://github.com/apache/hudi/pull/1770", "merged": true, "mergeCommit": {"oid": "12ef8c9249249a3c02e6bd8f0392614f8e195982"}, "closed": true, "closedAt": "2020-07-23T00:43:47Z", "author": {"login": "hddong"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0eEeXgBqjM1Mzg2MDkwOTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3kfmggFqTQ1Mzc3NDg0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/1327a38d439b6596717fe231eda335887da9bb4d", "committedDate": "2020-07-13T09:31:51Z", "message": "[HUDI-708]Add unit test for TempViewCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTU0Nzcz", "url": "https://github.com/apache/hudi/pull/1770#pullrequestreview-448554773", "createdAt": "2020-07-15T00:38:04Z", "commit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDozODowNFrOGxqE2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNjoxNFrOGx5z3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMjc3Nw==", "bodyText": "We could introduce a new annotation e.g. @VisibleForTesting in the future just like Flink has done to only open the public method for testing purposes. WDYT? @vinothchandar", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454722777", "createdAt": "2020-07-15T00:38:04Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/HoodieCLI.java", "diffHunk": "@@ -115,4 +115,16 @@ public static synchronized TempViewProvider getTempViewProvider() {\n     return tempViewProvider;\n   }\n \n+  /**\n+   * Close tempViewProvider.\n+   * <p/>\n+   * For test, avoid multiple SparkContexts.\n+   */\n+  public static synchronized void closeTempViewProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDAxNw==", "bodyText": "It would be better to return the similar messages for try and catch block, for example, Query ran successfully?", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454724017", "createdAt": "2020-07-15T00:42:40Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,51 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n-\n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return \"Success queried!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDQzNg==", "bodyText": "Considering it will be used to assert in the test case. Maybe we could define a constant message?", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454724436", "createdAt": "2020-07-15T00:44:27Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,51 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n-\n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return \"Success queried!\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDAxNw=="}, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDc2Ng==", "bodyText": "Shall we introduce another alias (e.g. temps_shoe) to keep the same style with other commands?", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454724766", "createdAt": "2020-07-15T00:45:35Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,51 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n-\n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return \"Success queried!\";\n+    } catch (HoodieException ex) {\n+      return \"Query ran failed!\";\n+    }\n+\n+  }\n+\n+  @CliCommand(value = \"temps show\", help = \"Show all views name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNTA1Mg==", "bodyText": "Do we need to add the keyword name here?", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454725052", "createdAt": "2020-07-15T00:46:42Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,51 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n-\n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return \"Success queried!\";\n+    } catch (HoodieException ex) {\n+      return \"Query ran failed!\";\n+    }\n+\n+  }\n+\n+  @CliCommand(value = \"temps show\", help = \"Show all views name\")\n+  public String showAll() {\n \n-    HoodieCLI.getTempViewProvider().runQuery(sql);\n-    return EMPTY_STRING;\n+    try {\n+      HoodieCLI.getTempViewProvider().showAllTables();\n+      return \"Show all views name successfully!\";\n+    } catch (HoodieException ex) {\n+      return \"Show all views failed!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNTY5OQ==", "bodyText": "IMO, maybe showAllViews is a better name (just a thought)? I understand here is a method named deleteTable.", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454725699", "createdAt": "2020-07-15T00:49:17Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java", "diffHunk": "@@ -101,6 +101,17 @@ public void runQuery(String sqlText) {\n     }\n   }\n \n+  @Override\n+  public void showAllTables() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNjA0OA==", "bodyText": "remove this annotation here.", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454726048", "createdAt": "2020-07-15T00:50:20Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/utils/TempViewProvider.java", "diffHunk": "@@ -18,12 +18,18 @@\n \n package org.apache.hudi.cli.utils;\n \n+import java.io.Closeable;\n import java.util.List;\n \n-public interface TempViewProvider {\n+public interface TempViewProvider extends Closeable {\n   void createOrReplace(String tableName, List<String> headers, List<List<Comparable>> rows);\n \n   void runQuery(String sqlText);\n \n+  void showAllTables();\n+\n   void deleteTable(String tableName);\n+\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTMxMw==", "bodyText": "It would be better to add the access modifier.", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454979313", "createdAt": "2020-07-15T11:23:37Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.testutils.AbstractShellBaseIntegrationTest;\n+import org.apache.hudi.exception.HoodieException;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TestTempViewCommand extends AbstractShellBaseIntegrationTest {\n+\n+  String tableName = \"test_table\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDU3NQ==", "bodyText": "No need to call String.format?", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454980575", "createdAt": "2020-07-15T11:26:14Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.testutils.AbstractShellBaseIntegrationTest;\n+import org.apache.hudi.exception.HoodieException;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TestTempViewCommand extends AbstractShellBaseIntegrationTest {\n+\n+  String tableName = \"test_table\";\n+\n+  @BeforeEach\n+  public void init() {\n+    List<List<Comparable>> rows = new ArrayList<>();\n+    for (int i = 0; i < 3; i++) {\n+      rows.add(Arrays.asList(new Comparable[] {\"c1\", \"c2\", \"c3\"}));\n+    }\n+    HoodieCLI.getTempViewProvider().createOrReplace(tableName, Arrays.asList(\"t1\", \"t2\", \"t3\"), rows);\n+  }\n+\n+  @AfterAll\n+  public static void shutdown() {\n+    if (HoodieCLI.getTempViewProvider() != null) {\n+      HoodieCLI.closeTempViewProvider();\n+    }\n+  }\n+\n+  @Test\n+  public void testQueryWithException() {\n+    CommandResult cr = getShell().executeCommand(String.format(\"temp query --sql 'select * from %s'\", \"table_1\"));\n+    assertTrue(cr.getResult().toString().startsWith(\"Query ran failed!\"));\n+  }\n+\n+  @Test\n+  public void testQuery() {\n+    CommandResult cr = getShell().executeCommand(String.format(\"temp query --sql 'select * from %s'\", tableName));\n+    assertEquals(\"Success queried!\", cr.getResult().toString());\n+  }\n+\n+  @Test\n+  public void testShowAll() {\n+    CommandResult cr = getShell().executeCommand(String.format(\"temps show\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "934ccad3617e92724b7ef38535a8281e0bda47af", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/934ccad3617e92724b7ef38535a8281e0bda47af", "committedDate": "2020-07-20T09:38:27Z", "message": "[HUDI-708]Add unit test for TempViewCommand"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1327a38d439b6596717fe231eda335887da9bb4d", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/1327a38d439b6596717fe231eda335887da9bb4d", "committedDate": "2020-07-13T09:31:51Z", "message": "[HUDI-708]Add unit test for TempViewCommand"}, "afterCommit": {"oid": "934ccad3617e92724b7ef38535a8281e0bda47af", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/934ccad3617e92724b7ef38535a8281e0bda47af", "committedDate": "2020-07-20T09:38:27Z", "message": "[HUDI-708]Add unit test for TempViewCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTE4NTM0", "url": "https://github.com/apache/hudi/pull/1770#pullrequestreview-452918534", "createdAt": "2020-07-22T00:34:30Z", "commit": {"oid": "934ccad3617e92724b7ef38535a8281e0bda47af"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNDozMFrOG1OiUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozODo0NVrOG1Om9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTg3NQ==", "bodyText": "Can we log the detailed exception information before returning the result?", "url": "https://github.com/apache/hudi/pull/1770#discussion_r458465875", "createdAt": "2020-07-22T00:34:30Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,55 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n+  public static final String QUERY_SUCCESS = \"Query ran successfully!\";\n+  public static final String QUERY_FAIL = \"Query ran failed!\";\n+  public static final String SHOW_SUCCESS = \"Show all views name successfully!\";\n \n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return QUERY_SUCCESS;\n+    } catch (HoodieException ex) {\n+      return QUERY_FAIL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934ccad3617e92724b7ef38535a8281e0bda47af"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NzA2Mg==", "bodyText": "IMO, this error description is not correct, right? The throwable not only covers the initialization of the spark context", "url": "https://github.com/apache/hudi/pull/1770#discussion_r458467062", "createdAt": "2020-07-22T00:38:45Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java", "diffHunk": "@@ -101,6 +101,17 @@ public void runQuery(String sqlText) {\n     }\n   }\n \n+  @Override\n+  public void showAllViews() {\n+    try {\n+      sqlContext.sql(\"SHOW TABLES\").show(Integer.MAX_VALUE, false);\n+    } catch (Throwable ex) {\n+      // log full stack trace and rethrow. Without this its difficult to debug failures, if any\n+      LOG.error(\"unable to initialize spark context \", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934ccad3617e92724b7ef38535a8281e0bda47af"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe7974739ee5d1f37c1b86b305086840b04e599d", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/fe7974739ee5d1f37c1b86b305086840b04e599d", "committedDate": "2020-07-22T14:08:30Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzc0ODQw", "url": "https://github.com/apache/hudi/pull/1770#pullrequestreview-453774840", "createdAt": "2020-07-23T00:43:01Z", "commit": {"oid": "fe7974739ee5d1f37c1b86b305086840b04e599d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2871, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}