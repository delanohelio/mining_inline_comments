{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MzU0ODA1", "number": 1466, "title": "[HUDI-742] Fix Java Math Exception", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nTo fix the exception, link: https://issues.apache.org/jira/browse/HUDI-742, discussion: #1455\nBrief change log\n   - modified:   hudi-client/src/main/java/org/apache/hudi/index/bloom/BucketizedBloomCheckPartitioner.java\n   - modified:   hudi-client/src/test/java/org/apache/hudi/index/bloom/TestBucketizedBloomCheckPartitioner.java\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is already covered by existing tests, such as (please describe tests).\n- modified:   hudi-client/src/test/java/org/apache/hudi/index/bloom/TestBucketizedBloomCheckPartitioner.java\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-30T01:10:00Z", "url": "https://github.com/apache/hudi/pull/1466", "merged": true, "mergeCommit": {"oid": "9ecf0ccfb263cee8190afeb965ba350525860d6e"}, "closed": true, "closedAt": "2020-03-31T04:56:21Z", "author": {"login": "EdwinGuo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSm41BgFqTM4MzUyNDc3Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS5MJ3gH2gAyMzk1MzU0ODA1OmQ2OWNmODQwNDkzNTlkNjdhZDAwYzY3MjYyMzFjNzM5OTBlYWFlNDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTI0Nzc2", "url": "https://github.com/apache/hudi/pull/1466#pullrequestreview-383524776", "createdAt": "2020-03-30T04:33:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozMzoyOFrOF9ZTIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozMzoyOFrOF9ZTIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMTk1NA==", "bodyText": "IMO, 94 is unstable, the value depends on different hash methods. I think we can check the partition range, for example. WDYT?\n@Test\npublic void testGetPartitions() {\n  Map<String, Long> comparisons1 = new HashMap<String, Long>() {\n    {\n      IntStream.range(0, 100000).forEach(f -> put(\"f\" + f, 100L));\n    }\n  };\n  BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(1000, comparisons1, 10);\n\n  IntStream.range(0, 100000).forEach(f -> {\n    int partition = p.getPartition(Pair.of(\"f\" + f, \"value\"));\n    assertTrue(\"partition is out of range: \" + partition, 0 <= partition && partition <= 1000);\n  });\n\n}", "url": "https://github.com/apache/hudi/pull/1466#discussion_r399921954", "createdAt": "2020-03-30T04:33:28Z", "author": {"login": "lamberken"}, "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestBucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -79,4 +79,17 @@ public void testNumPartitions() {\n     BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(10000, comparisons1, 10);\n     assertEquals(\"num partitions must equal total buckets\", 100, p.numPartitions());\n   }\n+\n+  @Test\n+  public void testGetPartitions() {\n+    Map<String, Long> comparisons1 = new HashMap<String, Long>() {\n+      {\n+        IntStream.range(0, 10).forEach(f -> put(\"f\" + f, 100L));\n+      }\n+    };\n+    BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(10000, comparisons1, 10);\n+    Object key = Pair.of(\"f0\", \"value0\");\n+    assertEquals(\"candidatePartitions must be a posive number: \", 94, p.getPartition(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTE0NzAz", "url": "https://github.com/apache/hudi/pull/1466#pullrequestreview-383914703", "createdAt": "2020-03-30T14:31:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozMToxOVrOF9sn7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozMToxOVrOF9sn7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzODU3Mg==", "bodyText": "is the cast to (int) necessary still before assigning to idx", "url": "https://github.com/apache/hudi/pull/1466#discussion_r400238572", "createdAt": "2020-03-30T14:31:19Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/BucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -145,7 +145,7 @@ public int getPartition(Object key) {\n     final Pair<String, String> parts = (Pair<String, String>) key;\n     final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", parts.getRight());\n     final List<Integer> candidatePartitions = fileGroupToPartitions.get(parts.getLeft());\n-    final int idx = (int) Math.floorMod(hashOfKey, candidatePartitions.size());\n+    final int idx = (int) Math.floorMod((int) hashOfKey, candidatePartitions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzM3Njgw", "url": "https://github.com/apache/hudi/pull/1466#pullrequestreview-384337680", "createdAt": "2020-03-31T01:10:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMToxMDo0OFrOF-Bw8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMToxMDo0OFrOF-Bw8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NDk0Nw==", "bodyText": "nit: partition is within of range -> partition is out of range ?", "url": "https://github.com/apache/hudi/pull/1466#discussion_r400584947", "createdAt": "2020-03-31T01:10:48Z", "author": {"login": "leesf"}, "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestBucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -79,4 +80,20 @@ public void testNumPartitions() {\n     BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(10000, comparisons1, 10);\n     assertEquals(\"num partitions must equal total buckets\", 100, p.numPartitions());\n   }\n+\n+  @Test\n+  public void testGetPartitions() {\n+    Map<String, Long> comparisons1 = new HashMap<String, Long>() {\n+      {\n+        IntStream.range(0, 100000).forEach(f -> put(\"f\" + f, 100L));\n+      }\n+    };\n+    BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(1000, comparisons1, 10);\n+\n+    IntStream.range(0, 100000).forEach(f -> {\n+      int partition = p.getPartition(Pair.of(\"f\" + f, \"value\"));\n+      assertTrue(\"partition is within of range: \" + partition, 0 <= partition && partition <= 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzM4MDM2", "url": "https://github.com/apache/hudi/pull/1466#pullrequestreview-384338036", "createdAt": "2020-03-31T01:11:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69cf84049359d67ad00c6726231c73990eaae41", "author": {"user": {"login": "EdwinGuo", "name": "Edwin Guo"}}, "url": "https://github.com/apache/hudi/commit/d69cf84049359d67ad00c6726231c73990eaae41", "committedDate": "2020-03-31T01:54:35Z", "message": "[HUDI-742] Fix Java Math Exception\n\n[HUDI-742] Update comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3287, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}