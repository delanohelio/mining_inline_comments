{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzM0Mjc3", "number": 1194, "title": "[HUDI-326] Add support to delete records with only record_key", "bodyText": "Allows HoodieSparkSqlWriter to delete records from a dataframe containing only record keys when using global indices because delete does not use partition from global indices.\nWhat is the purpose of the pull request\nThis pull request allows Hudi deletes with only record_key for global indices. I don't see any way to avoid this because keyGenerators will always fail if the partition value field is not included. Having an API with delete(List deleteKeys) will not be sufficient either as any keyGenerator transformations on the record_key would not happen then. This works around this by allowing the keyGenerators to always pass.\nVerify this pull request\nThis pull request has minimal changes. The changes have been manually tested and verified.", "createdAt": "2020-01-06T22:07:28Z", "url": "https://github.com/apache/hudi/pull/1194", "merged": true, "mergeCommit": {"oid": "1daba24065959dcab3606836bd1d789b3d74cc15"}, "closed": true, "closedAt": "2020-01-16T01:01:30Z", "author": {"login": "bschell"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb32OnUAFqTMzODk4NDc1Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6vdv1AFqTM0MzYxODg3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4OTg0NzUy", "url": "https://github.com/apache/hudi/pull/1194#pullrequestreview-338984752", "createdAt": "2020-01-07T01:11:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMTozNlrOFatk0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMTozNlrOFatk0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDAwMw==", "bodyText": "This is not very desirable since this is only required for deletion purposes and does not add any other value. Each implementation of the Index already has a method that describes whether it's global or not.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r363554003", "createdAt": "2020-01-07T01:11:36Z", "author": {"login": "n3nash"}, "path": "hudi-client/src/main/java/org/apache/hudi/index/HoodieIndex.java", "diffHunk": "@@ -43,6 +44,8 @@\n  */\n public abstract class HoodieIndex<T extends HoodieRecordPayload> implements Serializable {\n \n+  public static EnumSet<IndexType> GLOBAL_INDICES = EnumSet.of(IndexType.GLOBAL_BLOOM, IndexType.HBASE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4OTg1MjA3", "url": "https://github.com/apache/hudi/pull/1194#pullrequestreview-338985207", "createdAt": "2020-01-07T01:13:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMzozMFrOFatmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxMzozMFrOFatmRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDM3NA==", "bodyText": "There is a NonPartitionedKeyGenerator that you can pass and use for deletions. Since as a client you are aware of 2 facts a) Either you are using GLOBAL_INDEX or not b) If this batch is for Deletions, you can configure the hudi client accordingly with a correct partition generator -> https://github.com/apache/incubator-hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/NonpartitionedKeyGenerator.java\nMay be we can extend this class to reflect the correct key generation strategy for deletions with a more reasonable explicit name", "url": "https://github.com/apache/hudi/pull/1194#discussion_r363554374", "createdAt": "2020-01-07T01:13:30Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -161,7 +162,17 @@ private[hudi] object HoodieSparkSqlWriter {\n       // Convert to RDD[HoodieKey]\n       val keyGenerator = DataSourceUtils.createKeyGenerator(toProperties(parameters))\n       val genericRecords: RDD[GenericRecord] = AvroConversionUtils.createRdd(df, structName, nameSpace)\n-      val hoodieKeysToDelete = genericRecords.map(gr => keyGenerator.getKey(gr)).toJavaRDD()\n+      val hoodieKeysToDelete = if (HoodieIndex.GLOBAL_INDICES.contains(parameters(HoodieIndexConfig.INDEX_TYPE_PROP))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTIyNDEx", "url": "https://github.com/apache/hudi/pull/1194#pullrequestreview-340922411", "createdAt": "2020-01-10T02:12:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjoxMjoyOVrOFcIo5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjoxMjoyOVrOFcIo5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTk5MQ==", "bodyText": "Can you use this : https://github.com/apache/incubator-hudi/blob/master/hudi-common/src/main/java/org/apache/hudi/common/util/StringUtils.java#L67 ?\nAnd have the throws Exception in the else part that way you won't need an extra variable to track this.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365045991", "createdAt": "2020-01-10T02:12:29Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {\n+    if (recordKeyFields == null) {\n+      throw new HoodieKeyException(\"Unable to find field names for record key or partition path in cfg\");\n+    }\n+\n+    boolean keyIsNullEmpty = true;\n+    StringBuilder recordKey = new StringBuilder();\n+    for (String recordKeyField : recordKeyFields) {\n+      String recordKeyValue = DataSourceUtils.getNestedFieldValAsString(record, recordKeyField, true);\n+      if (recordKeyValue == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTIzMDA4", "url": "https://github.com/apache/hudi/pull/1194#pullrequestreview-340923008", "createdAt": "2020-01-10T02:15:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjoxNToyMVrOFcIrGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjoxNToyMVrOFcIrGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NjU1Mw==", "bodyText": "If the recordkey is \"null\" what is the advantage of creating a record with this string ? There wouldn't be any records with that value in the first place right ?", "url": "https://github.com/apache/hudi/pull/1194#discussion_r365046553", "createdAt": "2020-01-10T02:15:21Z", "author": {"login": "n3nash"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c", "author": {"user": null}, "url": "https://github.com/apache/hudi/commit/f200c23f454191865f59c9840f988f1430490e2c", "committedDate": "2020-01-11T02:06:02Z", "message": "Add GlobalDeleteKeyGenerator\n\nAdds new GlobalDeleteKeyGenerator for record_key deletes with global indices. Also refactors key generators into their own package."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c", "author": {"user": null}, "url": "https://github.com/apache/hudi/commit/f200c23f454191865f59c9840f988f1430490e2c", "committedDate": "2020-01-11T02:06:02Z", "message": "Add GlobalDeleteKeyGenerator\n\nAdds new GlobalDeleteKeyGenerator for record_key deletes with global indices. Also refactors key generators into their own package."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjUwMTUx", "url": "https://github.com/apache/hudi/pull/1194#pullrequestreview-341650151", "createdAt": "2020-01-13T06:11:27Z", "commit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjE0ODk3", "url": "https://github.com/apache/hudi/pull/1194#pullrequestreview-342214897", "createdAt": "2020-01-13T23:47:17Z", "commit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo0NzoxOFrOFdIS-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1NjoyM1rOFdIcgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4ODk1Mw==", "bodyText": "This is a backwards incompatible change. Users would have custom key generators using configuration : DataSourceWriteOptions.KEYGENERATOR_CLASS_OPT_KEY()\nIt makes sense to move to separate package but we need to call out the change in release notes . Please open a tracking ticket to update release notes for this.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r366088953", "createdAt": "2020-01-13T23:47:18Z", "author": {"login": "bvaradar"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/ComplexKeyGenerator.java", "diffHunk": "@@ -16,8 +16,10 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi;\n+package org.apache.hudi.keygen;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MTM5Mg==", "bodyText": "@bschell : The only difference between GlobalDeleteKeyGenerator and ComplexKeyGenerator is that the former always creates an empty-partition path. right ? In that case, can we simply refactor the getKey() method in ComplexKeyGenerator and have GlobalDeleteKeyGenerator extend ComplexKeyGenerator with necessary changes to make it to work for empty partition-path. The advantage is we use all the logic related  to nested fields handling in one place ? Let me know your thoughts.", "url": "https://github.com/apache/hudi/pull/1194#discussion_r366091392", "createdAt": "2020-01-13T23:56:23Z", "author": {"login": "bvaradar"}, "path": "hudi-spark/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.keygen;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceUtils;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.exception.HoodieKeyException;\n+\n+/**\n+ * Key generator for deletes using global indices. Global index deletes do not require partition value\n+ * so this key generator avoids using partition value for generating HoodieKey.\n+ */\n+public class GlobalDeleteKeyGenerator extends KeyGenerator {\n+\n+  private static final String EMPTY_PARTITION = \"\";\n+  private static final String NULL_RECORDKEY_PLACEHOLDER = \"__null__\";\n+  private static final String EMPTY_RECORDKEY_PLACEHOLDER = \"__empty__\";\n+\n+  protected final List<String> recordKeyFields;\n+\n+  public GlobalDeleteKeyGenerator(TypedProperties config) {\n+    super(config);\n+    this.recordKeyFields = Arrays.asList(config.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()).split(\",\"));\n+  }\n+\n+  @Override\n+  public HoodieKey getKey(GenericRecord record) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjE4ODc5", "url": "https://github.com/apache/hudi/pull/1194#pullrequestreview-343618879", "createdAt": "2020-01-16T01:00:35Z", "commit": {"oid": "f200c23f454191865f59c9840f988f1430490e2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}