{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODI3MjY1", "number": 1200, "title": "[HUDI-514] A schema provider to get metadata through Jdbc", "bodyText": "What is the purpose of the pull request\nIn our production environment, we usually need to synchronize data from mysql, and at the same time, we need to get the schema from the database. So I submitted this PR. A schema provider that obtains metadata through Jdbc calls the Spark JDBC related methods by design. And ensure the uniformity of the schema, such as reading historical data from spark jdbc, and Use delta streamer to synchronize data.", "createdAt": "2020-01-09T08:11:49Z", "url": "https://github.com/apache/hudi/pull/1200", "merged": true, "mergeCommit": {"oid": "dfbee673ef63c7305e131d5dfa17b304b128917f"}, "closed": true, "closedAt": "2020-02-14T02:06:07Z", "author": {"login": "OpenOpened"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4lXfZAH2gAyMzYwODI3MjY1OjlmYTk2NDRjNzI0NTg4YWJhNjhkNDkwYjc0MTc4YmRmZjViNzI3OGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEFx3JAFqTM1ODY3MzgyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9fa9644c724588aba68d490b74178bdff5b7278c", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/9fa9644c724588aba68d490b74178bdff5b7278c", "committedDate": "2020-01-09T08:06:50Z", "message": "A schema provider to get metadata through Jdbc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1926c4490f42ee6cf48cb523e7bd9be9a6cf4d73", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/1926c4490f42ee6cf48cb523e7bd9be9a6cf4d73", "committedDate": "2020-01-09T09:58:28Z", "message": "addition maven compile dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTU2OTI4", "url": "https://github.com/apache/hudi/pull/1200#pullrequestreview-341556928", "createdAt": "2020-01-12T06:55:40Z", "commit": {"oid": "1926c4490f42ee6cf48cb523e7bd9be9a6cf4d73"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjo1NTo0MFrOFcoHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjo1ODowMlrOFcoH_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTc2MA==", "bodyText": "can you clarify why these pom changes are needed?", "url": "https://github.com/apache/hudi/pull/1200#discussion_r365561760", "createdAt": "2020-01-12T06:55:40Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/pom.xml", "diffHunk": "@@ -69,6 +100,12 @@\n   </build>\n \n   <dependencies>\n+    <!-- Scala -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1926c4490f42ee6cf48cb523e7bd9be9a6cf4d73"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTg1Mw==", "bodyText": "could we avoid this and keep this code in Java?", "url": "https://github.com/apache/hudi/pull/1200#discussion_r365561853", "createdAt": "2020-01-12T06:58:02Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/scala/org/apache/hudi/utilities/JdbcProviderUtils.scala", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities\n+\n+import org.apache.avro.Schema\n+import org.apache.hudi.AvroConversionUtils\n+import org.apache.hudi.exception.HoodieException\n+import org.apache.spark.sql.execution.datasources.jdbc.{JDBCOptions, JdbcUtils}\n+import org.apache.spark.sql.jdbc.JdbcDialects\n+\n+import scala.collection.JavaConverters._", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1926c4490f42ee6cf48cb523e7bd9be9a6cf4d73"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b821f630b3f61eab3ac1902c1eed8843291f3de2", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/b821f630b3f61eab3ac1902c1eed8843291f3de2", "committedDate": "2020-01-13T07:56:47Z", "message": "Optimize code and provide test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f78a11b335cfe74cb7dc27cb7cd80179c731931d", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/f78a11b335cfe74cb7dc27cb7cd80179c731931d", "committedDate": "2020-01-13T08:24:06Z", "message": "Merge branch 'master' into jdbc-provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "368fa3c7eabedbe910f23bacc9a03c76734c3a18", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/368fa3c7eabedbe910f23bacc9a03c76734c3a18", "committedDate": "2020-01-14T02:16:38Z", "message": "Merge branch 'github-master' into jdbc-provider\n\n# Conflicts:\n#\thudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieDeltaStreamer.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa755374671875743e1ed3709ed37c5203e22273", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/fa755374671875743e1ed3709ed37c5203e22273", "committedDate": "2020-01-14T02:16:59Z", "message": "Merge remote-tracking branch 'origin/jdbc-provider' into jdbc-provider\n\n# Conflicts:\n#\thudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieDeltaStreamer.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf6bbd9e7d2750706db510a432863853d10f53a9", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/bf6bbd9e7d2750706db510a432863853d10f53a9", "committedDate": "2020-01-14T03:09:16Z", "message": "update code to fit spark 2.4.4 version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a69e3a259e5b164a40dcf8ad5a6742073a4339f", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/2a69e3a259e5b164a40dcf8ad5a6742073a4339f", "committedDate": "2020-01-14T05:36:52Z", "message": "Merge branch 'github-master' into jdbc-provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a4cffeb68b4bae34f9984447d38a58a25074c0c", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/0a4cffeb68b4bae34f9984447d38a58a25074c0c", "committedDate": "2020-01-14T06:26:16Z", "message": "fix bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMzI4Mzcy", "url": "https://github.com/apache/hudi/pull/1200#pullrequestreview-342328372", "createdAt": "2020-01-14T07:20:51Z", "commit": {"oid": "0a4cffeb68b4bae34f9984447d38a58a25074c0c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNzoyMDo1MVrOFdN-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNzoyOToxNVrOFdOHYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE4MjEzNQ==", "bodyText": "rename to getJDBCSchema?", "url": "https://github.com/apache/hudi/pull/1200#discussion_r366182135", "createdAt": "2020-01-14T07:20:51Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -236,4 +250,57 @@ public static TypedProperties readConfig(InputStream in) throws IOException {\n     defaults.load(in);\n     return defaults;\n   }\n+\n+  /***\n+   * call spark function get the schema through jdbc.\n+   * @param options\n+   * @return\n+   * @throws Exception\n+   */\n+  public static Schema getSchema(Map<String, String> options) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4cffeb68b4bae34f9984447d38a58a25074c0c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE4MzA0MQ==", "bodyText": "change to table does not exist!?", "url": "https://github.com/apache/hudi/pull/1200#discussion_r366183041", "createdAt": "2020-01-14T07:24:17Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -236,4 +250,57 @@ public static TypedProperties readConfig(InputStream in) throws IOException {\n     defaults.load(in);\n     return defaults;\n   }\n+\n+  /***\n+   * call spark function get the schema through jdbc.\n+   * @param options\n+   * @return\n+   * @throws Exception\n+   */\n+  public static Schema getSchema(Map<String, String> options) throws Exception {\n+    scala.collection.immutable.Map<String, String> ioptions = toScalaImmutableMap(options);\n+    JDBCOptions jdbcOptions = new JDBCOptions(ioptions);\n+    Connection conn = JdbcUtils.createConnectionFactory(jdbcOptions).apply();\n+    String url = jdbcOptions.url();\n+    String table = jdbcOptions.tableOrQuery();\n+    JdbcOptionsInWrite jdbcOptionsInWrite = new JdbcOptionsInWrite(ioptions);\n+    boolean tableExists = JdbcUtils.tableExists(conn, jdbcOptionsInWrite);\n+    if (tableExists) {\n+      JdbcDialect dialect = JdbcDialects.get(url);\n+      try {\n+        PreparedStatement statement = conn.prepareStatement(dialect.getSchemaQuery(table));\n+        try {\n+          statement.setQueryTimeout(Integer.parseInt(options.get(\"timeout\")));\n+          ResultSet rs = statement.executeQuery();\n+          try {\n+            StructType structType;\n+            if (Boolean.parseBoolean(ioptions.get(\"nullable\").get())) {\n+              structType = JdbcUtils.getSchema(rs, dialect, true);\n+            } else {\n+              structType = JdbcUtils.getSchema(rs, dialect, false);\n+            }\n+            return AvroConversionUtils.convertStructTypeToAvroSchema(structType, table, \"hoodie.\" + table);\n+          } finally {\n+            rs.close();\n+          }\n+        } finally {\n+          statement.close();\n+        }\n+      } finally {\n+        conn.close();\n+      }\n+    } else {\n+      throw new HoodieException(String.format(\"%s table not exists!\", table));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4cffeb68b4bae34f9984447d38a58a25074c0c"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE4MzMyNg==", "bodyText": "import the java collection classes?Map, List, ArrayList ?", "url": "https://github.com/apache/hudi/pull/1200#discussion_r366183326", "createdAt": "2020-01-14T07:25:29Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -236,4 +250,57 @@ public static TypedProperties readConfig(InputStream in) throws IOException {\n     defaults.load(in);\n     return defaults;\n   }\n+\n+  /***\n+   * call spark function get the schema through jdbc.\n+   * @param options\n+   * @return\n+   * @throws Exception\n+   */\n+  public static Schema getSchema(Map<String, String> options) throws Exception {\n+    scala.collection.immutable.Map<String, String> ioptions = toScalaImmutableMap(options);\n+    JDBCOptions jdbcOptions = new JDBCOptions(ioptions);\n+    Connection conn = JdbcUtils.createConnectionFactory(jdbcOptions).apply();\n+    String url = jdbcOptions.url();\n+    String table = jdbcOptions.tableOrQuery();\n+    JdbcOptionsInWrite jdbcOptionsInWrite = new JdbcOptionsInWrite(ioptions);\n+    boolean tableExists = JdbcUtils.tableExists(conn, jdbcOptionsInWrite);\n+    if (tableExists) {\n+      JdbcDialect dialect = JdbcDialects.get(url);\n+      try {\n+        PreparedStatement statement = conn.prepareStatement(dialect.getSchemaQuery(table));\n+        try {\n+          statement.setQueryTimeout(Integer.parseInt(options.get(\"timeout\")));\n+          ResultSet rs = statement.executeQuery();\n+          try {\n+            StructType structType;\n+            if (Boolean.parseBoolean(ioptions.get(\"nullable\").get())) {\n+              structType = JdbcUtils.getSchema(rs, dialect, true);\n+            } else {\n+              structType = JdbcUtils.getSchema(rs, dialect, false);\n+            }\n+            return AvroConversionUtils.convertStructTypeToAvroSchema(structType, table, \"hoodie.\" + table);\n+          } finally {\n+            rs.close();\n+          }\n+        } finally {\n+          statement.close();\n+        }\n+      } finally {\n+        conn.close();\n+      }\n+    } else {\n+      throw new HoodieException(String.format(\"%s table not exists!\", table));\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static <K, V> scala.collection.immutable.Map<K, V> toScalaImmutableMap(java.util.Map<K, V> javaMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4cffeb68b4bae34f9984447d38a58a25074c0c"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE4MzU1NA==", "bodyText": "can we create a separate test class for this? given you are only testing the schema provider?", "url": "https://github.com/apache/hudi/pull/1200#discussion_r366183554", "createdAt": "2020-01-14T07:26:30Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieDeltaStreamer.java", "diffHunk": "@@ -511,6 +524,22 @@ public void testNullSchemaProvider() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testJdbcbasedSchemaProvider() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4cffeb68b4bae34f9984447d38a58a25074c0c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE4NDI5MA==", "bodyText": "any reason why the existing source.avsc won't work for you? Like to avoid creating new schema if possible", "url": "https://github.com/apache/hudi/pull/1200#discussion_r366184290", "createdAt": "2020-01-14T07:29:15Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/resources/delta-streamer-config/source-jdbc.avsc", "diffHunk": "@@ -0,0 +1,59 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4cffeb68b4bae34f9984447d38a58a25074c0c"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d404a1bbc97d087354927b176639bb797048e9", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/95d404a1bbc97d087354927b176639bb797048e9", "committedDate": "2020-01-14T08:49:31Z", "message": "Optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83c671d81e5852240d321a4aba3a009be0aa54a7", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/83c671d81e5852240d321a4aba3a009be0aa54a7", "committedDate": "2020-01-14T09:21:19Z", "message": "Merge branch 'github-master' into jdbc-provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de0566a92663ec85d0e0aa61622a528331e14482", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/de0566a92663ec85d0e0aa61622a528331e14482", "committedDate": "2020-01-14T10:34:36Z", "message": "auto close jsc object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad18cae7d5bd69c2166caf2c26010cd4ffabee59", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/hudi/commit/ad18cae7d5bd69c2166caf2c26010cd4ffabee59", "committedDate": "2020-01-26T18:59:52Z", "message": "Adding license to TestJdbcbasedSchemaProvider class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f53e725d2354bc6eeb54d2819ddb1611b1625c60", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/f53e725d2354bc6eeb54d2819ddb1611b1625c60", "committedDate": "2020-02-08T11:28:25Z", "message": "Merge branch 'github-master' into jdbc-provider\n\n# Conflicts:\n#\thudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e80e2068bfec0df08573e260d896f966cf86b8", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/13e80e2068bfec0df08573e260d896f966cf86b8", "committedDate": "2020-02-08T11:28:30Z", "message": "Merge remote-tracking branch 'origin/jdbc-provider' into jdbc-provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18385136e454b56d4aa0cd4470c7c426aa0965a", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/d18385136e454b56d4aa0cd4470c7c426aa0965a", "committedDate": "2020-02-08T11:44:26Z", "message": "fix bug and resolve conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTQ0NDQy", "url": "https://github.com/apache/hudi/pull/1200#pullrequestreview-355544442", "createdAt": "2020-02-08T11:51:30Z", "commit": {"oid": "d18385136e454b56d4aa0cd4470c7c426aa0965a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMTo1MTozMFrOFnQSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMTo1MTozMFrOFnQSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwNTY5MA==", "bodyText": "Would be changed to try-with-resources? since try-catch-finnaly has been optimized to try-with-resources in the project now.", "url": "https://github.com/apache/hudi/pull/1200#discussion_r376705690", "createdAt": "2020-02-08T11:51:30Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -235,4 +248,57 @@ public static TypedProperties readConfig(InputStream in) throws IOException {\n     defaults.load(in);\n     return defaults;\n   }\n+\n+  /***\n+   * call spark function get the schema through jdbc.\n+   * @param options\n+   * @return\n+   * @throws Exception\n+   */\n+  public static Schema getJDBCSchema(Map<String, String> options) throws Exception {\n+    scala.collection.immutable.Map<String, String> ioptions = toScalaImmutableMap(options);\n+    JDBCOptions jdbcOptions = new JDBCOptions(ioptions);\n+    Connection conn = JdbcUtils.createConnectionFactory(jdbcOptions).apply();\n+    String url = jdbcOptions.url();\n+    String table = jdbcOptions.tableOrQuery();\n+    JdbcOptionsInWrite jdbcOptionsInWrite = new JdbcOptionsInWrite(ioptions);\n+    boolean tableExists = JdbcUtils.tableExists(conn, jdbcOptionsInWrite);\n+    if (tableExists) {\n+      JdbcDialect dialect = JdbcDialects.get(url);\n+      try {\n+        PreparedStatement statement = conn.prepareStatement(dialect.getSchemaQuery(table));\n+        try {\n+          statement.setQueryTimeout(Integer.parseInt(options.get(\"timeout\")));\n+          ResultSet rs = statement.executeQuery();\n+          try {\n+            StructType structType;\n+            if (Boolean.parseBoolean(ioptions.get(\"nullable\").get())) {\n+              structType = JdbcUtils.getSchema(rs, dialect, true);\n+            } else {\n+              structType = JdbcUtils.getSchema(rs, dialect, false);\n+            }\n+            return AvroConversionUtils.convertStructTypeToAvroSchema(structType, table, \"hoodie.\" + table);\n+          } finally {\n+            rs.close();\n+          }\n+        } finally {\n+          statement.close();\n+        }\n+      } finally {\n+        conn.close();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18385136e454b56d4aa0cd4470c7c426aa0965a"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57061ed4cc570c1c89739ddb020b000d534c7e5d", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/57061ed4cc570c1c89739ddb020b000d534c7e5d", "committedDate": "2020-02-08T13:05:49Z", "message": "try-with-resources code optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "013babffb8e5f221d34812c0b19950e8b7dfb60e", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/013babffb8e5f221d34812c0b19950e8b7dfb60e", "committedDate": "2020-02-08T14:00:04Z", "message": "fix code style problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450dde982f8c4550c088a15048fe9a10d3c70729", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/450dde982f8c4550c088a15048fe9a10d3c70729", "committedDate": "2020-02-08T14:57:09Z", "message": "fix variable name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7914c163e895ad103278c22bd11eb4e07fd368a", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/f7914c163e895ad103278c22bd11eb4e07fd368a", "committedDate": "2020-02-10T03:39:57Z", "message": "addition a little comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTE3NzIx", "url": "https://github.com/apache/hudi/pull/1200#pullrequestreview-355917721", "createdAt": "2020-02-10T13:03:04Z", "commit": {"oid": "f7914c163e895ad103278c22bd11eb4e07fd368a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzowMzowNFrOFnlOZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzowMzowNFrOFnlOZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0ODY3OA==", "bodyText": "I think we could remove this line, If we copy from other projects, we may need add copyright to LICENSE. but if copied from stackoverflow, it would be removed.", "url": "https://github.com/apache/hudi/pull/1200#discussion_r377048678", "createdAt": "2020-02-10T13:03:04Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -235,4 +248,57 @@ public static TypedProperties readConfig(InputStream in) throws IOException {\n     defaults.load(in);\n     return defaults;\n   }\n+\n+  /***\n+   * call spark function get the schema through jdbc.\n+   * The code logic implementation refers to spark 2.4.x and spark 3.x.\n+   * @param options\n+   * @return\n+   * @throws Exception\n+   */\n+  public static Schema getJDBCSchema(Map<String, String> options) throws Exception {\n+    scala.collection.immutable.Map<String, String> ioptions = toScalaImmutableMap(options);\n+    JDBCOptions jdbcOptions = new JDBCOptions(ioptions);\n+    Connection conn = JdbcUtils.createConnectionFactory(jdbcOptions).apply();\n+    String url = jdbcOptions.url();\n+    String table = jdbcOptions.tableOrQuery();\n+    JdbcOptionsInWrite jdbcOptionsInWrite = new JdbcOptionsInWrite(ioptions);\n+    boolean tableExists = JdbcUtils.tableExists(conn, jdbcOptionsInWrite);\n+\n+    if (tableExists) {\n+      JdbcDialect dialect = JdbcDialects.get(url);\n+      try (PreparedStatement statement = conn.prepareStatement(dialect.getSchemaQuery(table))) {\n+        statement.setQueryTimeout(Integer.parseInt(options.get(\"timeout\")));\n+        try (ResultSet rs = statement.executeQuery()) {\n+          StructType structType;\n+          if (Boolean.parseBoolean(ioptions.get(\"nullable\").get())) {\n+            structType = JdbcUtils.getSchema(rs, dialect, true);\n+          } else {\n+            structType = JdbcUtils.getSchema(rs, dialect, false);\n+          }\n+          return AvroConversionUtils.convertStructTypeToAvroSchema(structType, table, \"hoodie.\" + table);\n+        }\n+      }\n+    } else {\n+      throw new HoodieException(String.format(\"%s table does not exists!\", table));\n+    }\n+  }\n+\n+  /**\n+   * Replace java map with scala immutable map.\n+   * refers: https://stackoverflow.com/questions/11903167/convert-java-util-hashmap-to-scala-collection-immutable-map-in-java/11903737#11903737", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7914c163e895ad103278c22bd11eb4e07fd368a"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44a52a4e60532beaeb75fa136571542328d0308", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/a44a52a4e60532beaeb75fa136571542328d0308", "committedDate": "2020-02-10T14:01:51Z", "message": "remove extra comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Njc4NzE2", "url": "https://github.com/apache/hudi/pull/1200#pullrequestreview-356678716", "createdAt": "2020-02-11T14:02:42Z", "commit": {"oid": "a44a52a4e60532beaeb75fa136571542328d0308"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca14ac95db69fc7701e0453df01119d42204f509", "author": {"user": {"login": "OpenOpened", "name": "openopen2"}}, "url": "https://github.com/apache/hudi/commit/ca14ac95db69fc7701e0453df01119d42204f509", "committedDate": "2020-02-12T08:19:31Z", "message": "reimplement code using java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjczODIx", "url": "https://github.com/apache/hudi/pull/1200#pullrequestreview-358673821", "createdAt": "2020-02-14T02:05:46Z", "commit": {"oid": "ca14ac95db69fc7701e0453df01119d42204f509"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4299, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}