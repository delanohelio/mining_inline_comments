{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTQwOTUx", "number": 1274, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjo1MjowNFrODaZfVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOToyN1rODdL1-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDA3MTg5OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjo1MjowNFrOFhVIyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDoxMTo0MVrOFhtiJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY0Mg==", "bodyText": "Can we use StringUtils.isNullOrEmpty (in all other places as well) ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370493642", "createdAt": "2020-01-24T06:52:04Z", "author": {"login": "n3nash"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +110,33 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+    if (startTs == null || startTs.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NDY5Mw==", "bodyText": "@satishkotha", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370864693", "createdAt": "2020-01-24T22:09:41Z", "author": {"login": "n3nash"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +110,33 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+    if (startTs == null || startTs.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY0Mg=="}, "originalCommit": null, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MzM0OA==", "bodyText": "sounds good. I'm sending an update", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370893348", "createdAt": "2020-01-25T00:11:41Z", "author": {"login": "satishkotha"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +110,33 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+    if (startTs == null || startTs.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY0Mg=="}, "originalCommit": null, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDA3MjAxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodiePartitionMetadata.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjo1MjoxMlrOFhVI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDoxMTo0N1rOFhtiLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY2Mw==", "bodyText": "Can you explain why we need this change ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370493663", "createdAt": "2020-01-24T06:52:12Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodiePartitionMetadata.java", "diffHunk": "@@ -38,6 +38,7 @@\n   public static final String HOODIE_PARTITION_METAFILE = \".hoodie_partition_metadata\";\n   public static final String PARTITION_DEPTH_KEY = \"partitionDepth\";\n   public static final String COMMIT_TIME_KEY = \"commitTime\";\n+  public static final String ACTION_TYPE_KEY = \"actionType\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxODc3Ng==", "bodyText": "I thought having all metadata constants in one place would make it simpler. This is used in reading archived commit. I can move the constant to ArchivedTimeline if you think thats a better place.", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370818776", "createdAt": "2020-01-24T20:03:10Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodiePartitionMetadata.java", "diffHunk": "@@ -38,6 +38,7 @@\n   public static final String HOODIE_PARTITION_METAFILE = \".hoodie_partition_metadata\";\n   public static final String PARTITION_DEPTH_KEY = \"partitionDepth\";\n   public static final String COMMIT_TIME_KEY = \"commitTime\";\n+  public static final String ACTION_TYPE_KEY = \"actionType\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY2Mw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjUwNA==", "bodyText": "Please move it to the ArchivedTimeline since it makes more senes there", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370862504", "createdAt": "2020-01-24T22:03:06Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodiePartitionMetadata.java", "diffHunk": "@@ -38,6 +38,7 @@\n   public static final String HOODIE_PARTITION_METAFILE = \".hoodie_partition_metadata\";\n   public static final String PARTITION_DEPTH_KEY = \"partitionDepth\";\n   public static final String COMMIT_TIME_KEY = \"commitTime\";\n+  public static final String ACTION_TYPE_KEY = \"actionType\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY2Mw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MzM1OA==", "bodyText": "sounds good. I'm sending an update", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370893358", "createdAt": "2020-01-25T00:11:47Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodiePartitionMetadata.java", "diffHunk": "@@ -38,6 +38,7 @@\n   public static final String HOODIE_PARTITION_METAFILE = \".hoodie_partition_metadata\";\n   public static final String PARTITION_DEPTH_KEY = \"partitionDepth\";\n   public static final String COMMIT_TIME_KEY = \"commitTime\";\n+  public static final String ACTION_TYPE_KEY = \"actionType\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY2Mw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQzMzEzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMzo0MlrOFhrqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTo0Mzo0M1rOFi6WTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjcyNg==", "bodyText": "Any reason to remove if (archivedTimeline == null) check ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370862726", "createdAt": "2020-01-24T22:03:42Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "diffHunk": "@@ -289,11 +288,8 @@ public ConsistencyGuardConfig getConsistencyGuardConfig() {\n    *\n    * @return Active commit timeline\n    */\n-  public synchronized HoodieArchivedTimeline getArchivedTimeline() {\n-    if (archivedTimeline == null) {\n-      archivedTimeline = new HoodieArchivedTimeline(this);\n-    }\n-    return archivedTimeline;\n+  public synchronized HoodieArchivedTimeline getArchivedTimeline(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MzgxOQ==", "bodyText": "archivedTimeline as instance variable does not make sense because we are creating archive timeline for small time window (depending on command line arguments). So we will create mutiple archivedTimelines when someone is paginating through archived commit files. null check prevents us from doing that.\nIn the long term, when we have lazy loading, we can consider creating one instance of ArchivedTimeline that stores all metadata. we can bring back instance variable at that time. Until we have that, this does not make sense.\nLet me know if you think there is a better way to organize this.", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370893819", "createdAt": "2020-01-25T00:14:47Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "diffHunk": "@@ -289,11 +288,8 @@ public ConsistencyGuardConfig getConsistencyGuardConfig() {\n    *\n    * @return Active commit timeline\n    */\n-  public synchronized HoodieArchivedTimeline getArchivedTimeline() {\n-    if (archivedTimeline == null) {\n-      archivedTimeline = new HoodieArchivedTimeline(this);\n-    }\n-    return archivedTimeline;\n+  public synchronized HoodieArchivedTimeline getArchivedTimeline(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjcyNg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4MDI2Mg==", "bodyText": "Isn't the instance variable loaded lazily only when getArchivedTimeline() is called in which case subsequent cases can use that instance variable. I think the concern here is that the only method we expose now is getArchivedTimeline(String startTs, String endTs) and caching the instance variable from that doesn't make sense as you are saying as well. I'm wondering if we should keep an instance variable and keep the same method as before getArchivedTimeline() and then the constructor below is also light. Finally, we expose a method on the archived timeline to filter(startTs, endTs). This way we don't have to create multiple objects for each window invocation. WDYT ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r371580262", "createdAt": "2020-01-28T02:09:44Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "diffHunk": "@@ -289,11 +288,8 @@ public ConsistencyGuardConfig getConsistencyGuardConfig() {\n    *\n    * @return Active commit timeline\n    */\n-  public synchronized HoodieArchivedTimeline getArchivedTimeline() {\n-    if (archivedTimeline == null) {\n-      archivedTimeline = new HoodieArchivedTimeline(this);\n-    }\n-    return archivedTimeline;\n+  public synchronized HoodieArchivedTimeline getArchivedTimeline(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjcyNg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NDA1OQ==", "bodyText": "I initially wanted to do that. But HoodieDefaultTimeline(base class) keeps track of instants in private class variable. And we do all filtering operations on top of that. So, if we reuse same HoodieArchivedTimeline object, we will likely have to change structure of how instants are kept in memory for base class.  I can talk to you more in person tomorrow. But right now, i prefer creating multiple instances of archived timeline because its less error prone IMO.", "url": "https://github.com/apache/hudi/pull/1274#discussion_r371584059", "createdAt": "2020-01-28T02:28:59Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "diffHunk": "@@ -289,11 +288,8 @@ public ConsistencyGuardConfig getConsistencyGuardConfig() {\n    *\n    * @return Active commit timeline\n    */\n-  public synchronized HoodieArchivedTimeline getArchivedTimeline() {\n-    if (archivedTimeline == null) {\n-      archivedTimeline = new HoodieArchivedTimeline(this);\n-    }\n-    return archivedTimeline;\n+  public synchronized HoodieArchivedTimeline getArchivedTimeline(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjcyNg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE1MTg4NQ==", "bodyText": "After talking in person, changed behavior to create single instance of \"HoodieArchivedTimeline\" and load metadata for all  commits.\nNote that this means we read all archived files first. Then do a second pass for details of commits in specific time range. This increases overall time taken by first command. In the example dataset, it took ~20 minutes for initial metadata to load.\nThen subsequent commands are few seconds each.\nWith previous approach we only do one pass on files. All commands are few seconds each.\nSo I think we need to improve metadata to reduce time taken by first step with new approach.", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372151885", "createdAt": "2020-01-29T01:43:43Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "diffHunk": "@@ -289,11 +288,8 @@ public ConsistencyGuardConfig getConsistencyGuardConfig() {\n    *\n    * @return Active commit timeline\n    */\n-  public synchronized HoodieArchivedTimeline getArchivedTimeline() {\n-    if (archivedTimeline == null) {\n-      archivedTimeline = new HoodieArchivedTimeline(this);\n-    }\n-    return archivedTimeline;\n+  public synchronized HoodieArchivedTimeline getArchivedTimeline(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjcyNg=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQzNDYyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTimeline.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowNDoyNVrOFhrrew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMjoxMDo0M1rOFiXeDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2Mjk3MQ==", "bodyText": "The HoodieDefaultTimeline has implementation -> public HoodieDefaultTimeline findInstantsInRange(String startTs, String endTs) already, can we try to reuse that ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370862971", "createdAt": "2020-01-24T22:04:25Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTimeline.java", "diffHunk": "@@ -230,6 +230,14 @@ static boolean compareTimestamps(String commit1, String commit2, BiPredicate<Str\n     return predicateToApply.test(commit1, commit2);\n   }\n \n+  /**\n+   * Return true if specified timestamp is in range (startTs, endTs].\n+   */\n+  static boolean isInRange(String timestamp, String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDA0Ng==", "bodyText": "HoodieDefaultTimeline has changes to use this method. I refactored to make this part reusable\n @Override public HoodieDefaultTimeline findInstantsInRange(String startTs, String endTs) { return new HoodieDefaultTimeline( instants.stream().filter(s -> HoodieTimeline.isInRange(s.getTimestamp(), startTs, endTs)), details); }", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370894046", "createdAt": "2020-01-25T00:16:05Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTimeline.java", "diffHunk": "@@ -230,6 +230,14 @@ static boolean compareTimestamps(String commit1, String commit2, BiPredicate<Str\n     return predicateToApply.test(commit1, commit2);\n   }\n \n+  /**\n+   * Return true if specified timestamp is in range (startTs, endTs].\n+   */\n+  static boolean isInRange(String timestamp, String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2Mjk3MQ=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4MDQyOA==", "bodyText": "makes sense", "url": "https://github.com/apache/hudi/pull/1274#discussion_r371580428", "createdAt": "2020-01-28T02:10:43Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTimeline.java", "diffHunk": "@@ -230,6 +230,14 @@ static boolean compareTimestamps(String commit1, String commit2, BiPredicate<Str\n     return predicateToApply.test(commit1, commit2);\n   }\n \n+  /**\n+   * Return true if specified timestamp is in range (startTs, endTs].\n+   */\n+  static boolean isInRange(String timestamp, String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2Mjk3MQ=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQzNTc1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowNDo1NVrOFhrsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTowNDoxOFrOFiN9hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MzE0OA==", "bodyText": "This is just the prefix right ? May be rename is HOODIE_COMMIT_ARCHIVE_LOG_FILE_NAME_PREFIX ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370863148", "createdAt": "2020-01-24T22:04:55Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -49,34 +60,76 @@\n  * This class can be serialized and de-serialized and on de-serialization the FileSystem is re-initialized.\n  */\n public class HoodieArchivedTimeline extends HoodieDefaultTimeline {\n+  private static final Pattern ARCHIVE_FILE_PATTERN =\n+          Pattern.compile(\"^\\\\.commits_\\\\.archive\\\\.([0-9]*)$\");\n \n   private static final String HOODIE_COMMIT_ARCHIVE_LOG_FILE = \"commits\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDIwOQ==", "bodyText": "regex captures everything [0-9]* at the end gives the suffix and is used for sorting files by 'version'", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370894209", "createdAt": "2020-01-25T00:16:58Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -49,34 +60,76 @@\n  * This class can be serialized and de-serialized and on de-serialization the FileSystem is re-initialized.\n  */\n public class HoodieArchivedTimeline extends HoodieDefaultTimeline {\n+  private static final Pattern ARCHIVE_FILE_PATTERN =\n+          Pattern.compile(\"^\\\\.commits_\\\\.archive\\\\.([0-9]*)$\");\n \n   private static final String HOODIE_COMMIT_ARCHIVE_LOG_FILE = \"commits\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MzE0OA=="}, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQyMjM2Mg==", "bodyText": "I'm referring to this variable HOODIE_COMMIT_ARCHIVE_LOG_FILE that stores just the string commits, regex is a different variable ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r371422362", "createdAt": "2020-01-27T19:00:00Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -49,34 +60,76 @@\n  * This class can be serialized and de-serialized and on de-serialization the FileSystem is re-initialized.\n  */\n public class HoodieArchivedTimeline extends HoodieDefaultTimeline {\n+  private static final Pattern ARCHIVE_FILE_PATTERN =\n+          Pattern.compile(\"^\\\\.commits_\\\\.archive\\\\.([0-9]*)$\");\n \n   private static final String HOODIE_COMMIT_ARCHIVE_LOG_FILE = \"commits\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MzE0OA=="}, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQyNDY0NA==", "bodyText": "oh, my bad. I didnt change that line, so i thought you were referring to the line i changed. I can change HOODIE_COMMIT_ARCHIVE_LOG_FILE to include its prefix", "url": "https://github.com/apache/hudi/pull/1274#discussion_r371424644", "createdAt": "2020-01-27T19:04:18Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -49,34 +60,76 @@\n  * This class can be serialized and de-serialized and on de-serialization the FileSystem is re-initialized.\n  */\n public class HoodieArchivedTimeline extends HoodieDefaultTimeline {\n+  private static final Pattern ARCHIVE_FILE_PATTERN =\n+          Pattern.compile(\"^\\\\.commits_\\\\.archive\\\\.([0-9]*)$\");\n \n   private static final String HOODIE_COMMIT_ARCHIVE_LOG_FILE = \"commits\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MzE0OA=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzU2ODAwOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowMjo0M1rOFjUA8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowMjoyMVrOFjVzwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MjQwMw==", "bodyText": "You can use a defaultValue during the cliOption itself so you don't have to use these checks ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372572403", "createdAt": "2020-01-29T19:02:43Z", "author": {"login": "n3nash"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +111,38 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n-\n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n+    if (StringUtils.isNullOrEmpty(startTs)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3NzIwMQ==", "bodyText": "CLIOption attribute can only be assigned a static value. i think default static value is not that friendly. I chose to pick '10 days before today' which is likely to be commonly used. Let me know if you prefer default constant date instead", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372577201", "createdAt": "2020-01-29T19:12:11Z", "author": {"login": "satishkotha"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +111,38 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n-\n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n+    if (StringUtils.isNullOrEmpty(startTs)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MjQwMw=="}, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMTc5Mw==", "bodyText": "okay, that makes sense", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372601793", "createdAt": "2020-01-29T20:02:21Z", "author": {"login": "n3nash"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +111,38 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n-\n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n+    if (StringUtils.isNullOrEmpty(startTs)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MjQwMw=="}, "originalCommit": null, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzU3MjIzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowNDowNVrOFjUDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxMjoyOVrOFjUUVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MzEwNQ==", "bodyText": "nit : s/removeInstantDetailsFromMemory/clearInstantDetailsFromMemory", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372573105", "createdAt": "2020-01-29T19:04:05Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -96,7 +101,16 @@ private void readObject(java.io.ObjectInputStream in) throws IOException, ClassN\n   }\n \n   public static Path getArchiveLogPath(String archiveFolder) {\n-    return new Path(archiveFolder, HOODIE_COMMIT_ARCHIVE_LOG_FILE);\n+    return new Path(archiveFolder, HOODIE_COMMIT_ARCHIVE_LOG_FILE_PREFIX);\n+  }\n+\n+  public void loadInstantDetailsInMemory(String startTs, String endTs) {\n+    loadInstants(startTs, endTs);\n+  }\n+\n+  public void removeInstantDetailsFromMemory(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3NzM2NQ==", "bodyText": "ok, renamed", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372577365", "createdAt": "2020-01-29T19:12:29Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -96,7 +101,16 @@ private void readObject(java.io.ObjectInputStream in) throws IOException, ClassN\n   }\n \n   public static Path getArchiveLogPath(String archiveFolder) {\n-    return new Path(archiveFolder, HOODIE_COMMIT_ARCHIVE_LOG_FILE);\n+    return new Path(archiveFolder, HOODIE_COMMIT_ARCHIVE_LOG_FILE_PREFIX);\n+  }\n+\n+  public void loadInstantDetailsInMemory(String startTs, String endTs) {\n+    loadInstants(startTs, endTs);\n+  }\n+\n+  public void removeInstantDetailsFromMemory(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MzEwNQ=="}, "originalCommit": null, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzU4MTQwOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowNzoxMFrOFjUJfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODozMzozMFrOFlLpkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3NDU5MQ==", "bodyText": "@vinothchandar can you ack that this is okay to move to this class ? This way the ArchivedTimeline can also use these methods (and is aligned with our thoughts on having the same operations on archived and active timeline..)", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372574591", "createdAt": "2020-01-29T19:07:10Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -143,6 +143,83 @@ public HoodieTimeline filter(Predicate<HoodieInstant> filter) {\n     return new HoodieDefaultTimeline(instants.stream().filter(filter), details);\n   }\n \n+  /**\n+   * Get all instants (commits, delta commits) that produce new data, in the active timeline.\n+   */\n+  public HoodieTimeline getCommitsTimeline() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzOTY1OA==", "bodyText": "@vinothchandar just pinging to resurface this since it might be lost in the large number of notifications :)", "url": "https://github.com/apache/hudi/pull/1274#discussion_r374439658", "createdAt": "2020-02-04T01:59:44Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -143,6 +143,83 @@ public HoodieTimeline filter(Predicate<HoodieInstant> filter) {\n     return new HoodieDefaultTimeline(instants.stream().filter(filter), details);\n   }\n \n+  /**\n+   * Get all instants (commits, delta commits) that produce new data, in the active timeline.\n+   */\n+  public HoodieTimeline getCommitsTimeline() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3NDU5MQ=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzMjQ5OA==", "bodyText": "@n3nash can't think of anything top of my mind.. Should be fine.", "url": "https://github.com/apache/hudi/pull/1274#discussion_r374532498", "createdAt": "2020-02-04T08:33:30Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -143,6 +143,83 @@ public HoodieTimeline filter(Predicate<HoodieInstant> filter) {\n     return new HoodieDefaultTimeline(instants.stream().filter(filter), details);\n   }\n \n+  /**\n+   * Get all instants (commits, delta commits) that produce new data, in the active timeline.\n+   */\n+  public HoodieTimeline getCommitsTimeline() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3NDU5MQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI5Mjk2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOToxMVrOFlpLKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjoxNjoxN1rOFlsy2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjIzMw==", "bodyText": "Please avoid this change as part of this diff", "url": "https://github.com/apache/hudi/pull/1274#discussion_r375016233", "createdAt": "2020-02-05T01:29:11Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "diffHunk": "@@ -135,6 +135,7 @@\n   /**\n    * Total number of rollback blocks seen in a compaction operation.\n    */\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3NTU0Ng==", "bodyText": "Discussed offline. Without this we are not able to read certain archived commits", "url": "https://github.com/apache/hudi/pull/1274#discussion_r375075546", "createdAt": "2020-02-05T06:16:17Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "diffHunk": "@@ -135,6 +135,7 @@\n   /**\n    * Total number of rollback blocks seen in a compaction operation.\n    */\n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjIzMw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI5MzM2OnYy", "diffSide": "LEFT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOToyN1rOFlpLZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjoxNjoyNFrOFlsy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjI5Mw==", "bodyText": "same here, we can address this as part of some other refactoring diff", "url": "https://github.com/apache/hudi/pull/1274#discussion_r375016293", "createdAt": "2020-02-05T01:29:27Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "diffHunk": "@@ -290,7 +291,7 @@ public long getTotalRollbackBlocks() {\n     return totalRollbackBlocks;\n   }\n \n-  public void setTotalRollbackBlocks(Long totalRollbackBlocks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3NTU3Mw==", "bodyText": "Discussed offline. Without this we are not able to read certain archived commits", "url": "https://github.com/apache/hudi/pull/1274#discussion_r375075573", "createdAt": "2020-02-05T06:16:24Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "diffHunk": "@@ -290,7 +291,7 @@ public long getTotalRollbackBlocks() {\n     return totalRollbackBlocks;\n   }\n \n-  public void setTotalRollbackBlocks(Long totalRollbackBlocks) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjI5Mw=="}, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}