{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDEwMDA2", "number": 1246, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTowNToyOVrODZWfmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTowNToyOVrODZWfmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTA5NTI4OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieDeltaStreamer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTowNToyOVrOFfsEcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjoyMToyNVrOFfs30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MjIwOQ==", "bodyText": "is the key to this property right? Isn't \".....target.schema.file\" ?", "url": "https://github.com/apache/hudi/pull/1246#discussion_r368772209", "createdAt": "2020-01-21T01:05:29Z", "author": {"login": "nsivabalan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieDeltaStreamer.java", "diffHunk": "@@ -620,6 +636,62 @@ public void testDistributedTestDataSource() {\n     Assert.assertEquals(1000, c);\n   }\n \n+  private static void prepareParquetDFSFiles(int numRecords) throws IOException {\n+    String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n+    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n+    Helpers.saveParquetToDFS(Helpers.toGenericRecords(\n+        dataGenerator.generateInserts(\"000\", numRecords), dataGenerator), new Path(path));\n+  }\n+\n+  private void prepareParquetDFSSource(boolean useSchemaProvider, boolean hasTransformer) throws IOException {\n+    // Properties used for testing delta-streamer with Parquet source\n+    TypedProperties parquetProps = new TypedProperties();\n+    parquetProps.setProperty(\"include\", \"base.properties\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n+    if (useSchemaProvider) {\n+      parquetProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n+      if (hasTransformer) {\n+        parquetProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce2019b716fc764373c51d21563c9b2a140638a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4NTM2Mw==", "bodyText": "Good catch.  I've found and fixed that in #1165.", "url": "https://github.com/apache/hudi/pull/1246#discussion_r368785363", "createdAt": "2020-01-21T02:21:25Z", "author": {"login": "yihua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieDeltaStreamer.java", "diffHunk": "@@ -620,6 +636,62 @@ public void testDistributedTestDataSource() {\n     Assert.assertEquals(1000, c);\n   }\n \n+  private static void prepareParquetDFSFiles(int numRecords) throws IOException {\n+    String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n+    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n+    Helpers.saveParquetToDFS(Helpers.toGenericRecords(\n+        dataGenerator.generateInserts(\"000\", numRecords), dataGenerator), new Path(path));\n+  }\n+\n+  private void prepareParquetDFSSource(boolean useSchemaProvider, boolean hasTransformer) throws IOException {\n+    // Properties used for testing delta-streamer with Parquet source\n+    TypedProperties parquetProps = new TypedProperties();\n+    parquetProps.setProperty(\"include\", \"base.properties\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n+    if (useSchemaProvider) {\n+      parquetProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n+      if (hasTransformer) {\n+        parquetProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MjIwOQ=="}, "originalCommit": {"oid": "9ce2019b716fc764373c51d21563c9b2a140638a"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4981, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}