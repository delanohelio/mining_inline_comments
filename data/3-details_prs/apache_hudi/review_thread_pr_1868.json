{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDM3MjQ3", "number": 1868, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDoyNTo0N1rOESJ1Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0ODo1MFrOEWmibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDcwOTMxOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDoyNTo0N1rOG3MxKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDoyNTo0N1rOG3MxKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDA1Nw==", "bodyText": "Somehow I don't feel comfortable adding cumulative weights to InsertBucket class. Each Insert bucket doesn't have anything to do with strict ordering wrt other buckets. UpsertPartitioner has some ordering for its own purpose.\nCan we try something like this.\npartitionPathToInsertBucketInfo : Map<String, List/Array of Pair of <Insert Bucket number, cumulative weight> >\nInsertBucketMap: Map of insert bucket number to InsertBucket object.\ngetPartition(key)\nwill first look at partitionPathToInsertBucketInfo to fetch list of cumulative weights of all insert buckets along with insert bucket nos. Once we found the target bucket number, we can look into other map.\nOr you can store InsertBucket itself in the value of partitionPathToInsertBucketInfo to avoid another look up. Tuple3<cumulativeWeight, InsetBucket>", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534057", "createdAt": "2020-07-26T14:25:47Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucket.java", "diffHunk": "@@ -18,24 +18,31 @@\n \n package org.apache.hudi.table.action.commit;\n \n+import org.jetbrains.annotations.NotNull;\n+\n import java.io.Serializable;\n \n /**\n  * Helper class for an insert bucket along with the weight [0.0, 1.0] that defines the amount of incoming inserts that\n  * should be allocated to the bucket.\n  */\n-public class InsertBucket implements Serializable {\n+public class InsertBucket implements Serializable, Comparable<InsertBucket> {\n \n   int bucketNumber;\n-  // fraction of total inserts, that should go into this bucket\n-  double weight;\n+  // cumulate fraction of total inserts, that should go into this bucket and the previous bucket.\n+  double cumulativeWeight;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDcxMDk0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDoyNzo1OFrOG3Mx-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoxNTo0M1rOG3f4YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDI2NQ==", "bodyText": "why not Collections.binarySearch() ?", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534265", "createdAt": "2020-07-26T14:27:58Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NzIwMA==", "bodyText": "Yes, it should be Collections.binarySearch().", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460847200", "createdAt": "2020-07-27T12:15:43Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDI2NQ=="}, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDcxMTMwOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDoyODozN1rOG3MyKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNzowODo0OVrOG6cOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ==", "bodyText": "sorry why do we need this? if not found, why not return the first bucket ?", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534315", "createdAt": "2020-07-26T14:28:37Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDgxOQ==", "bodyText": "also, ideally we should not hit this scenario only. If our bin packing is good, cumulative weight of last entry should be 1.0.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460534819", "createdAt": "2020-07-26T14:31:52Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ=="}, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk2OTc3MQ==", "bodyText": "sorry why do we need this? if not found, why not return the first bucket ?\n\nCollections.binarySearch() will return the index of the search key, if it is contained in the list;   otherwise, (-(insertion point) - 1).  The insertion point is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or list.size() if all  elements in the list are less than the specified key.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r460969771", "createdAt": "2020-07-27T15:20:17Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ=="}, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NTQwNQ==", "bodyText": "gotcha. can we add braces. ((-1*index) -1) in both if condition and in the return statement", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463555405", "createdAt": "2020-07-31T11:25:12Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ=="}, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjk4OQ==", "bodyText": "Sure, I will fix the comments.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463932989", "createdAt": "2020-08-01T07:08:49Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -272,21 +275,44 @@ public int getPartition(Object key) {\n       String partitionPath = keyLocation._1().getPartitionPath();\n       List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = binarySearch(targetBuckets, r);\n+      if (index >= 0) {\n+        return targetBuckets.get(index).bucketNumber;\n+      }\n+\n+      if (-1 * index - 1 < targetBuckets.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNDMxNQ=="}, "originalCommit": {"oid": "73c63f1205a1d90b7f103390bb3aa180f1e4d79c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI5NjU4OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucket2CumulativeWeight.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODo0NVrOG6FCEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODo0NVrOG6FCEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzA0Mg==", "bodyText": "may be InsertBucketCumulativeWeightPair", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463553042", "createdAt": "2020-07-31T11:18:45Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucket2CumulativeWeight.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.common.util.collection.Pair;\n+\n+public class InsertBucket2CumulativeWeight extends Pair<InsertBucket, Double> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI5OTEyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxOTo0OVrOG6FDnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxOTo0OVrOG6FDnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzQzNw==", "bodyText": "we might as well store InsertBucket2CumulativeWeight in this list since you have a class.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463553437", "createdAt": "2020-07-31T11:19:49Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -193,15 +194,17 @@ private void assignInserts(WorkloadProfile profile, JavaSparkContext jsc) {\n         }\n \n         // Go over all such buckets, and assign weights as per amount of incoming inserts.\n-        List<InsertBucket> insertBuckets = new ArrayList<>();\n+        List<Pair<InsertBucket, Double>> insertBuckets = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDMxNTEyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyNjoyNlrOG6FNGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyNjoyNlrOG6FNGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NTg2NQ==", "bodyText": "you don't need to declare. We could directly call.\nint index = Collections.binarySearch(targetBuckets, new InsertBucket2CumulativeWeight(new InsertBucket(), r));", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463555865", "createdAt": "2020-07-31T11:26:26Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -270,20 +273,25 @@ public int getPartition(Object key) {\n       return updateLocationToBucket.get(location.getFileId());\n     } else {\n       String partitionPath = keyLocation._1().getPartitionPath();\n-      List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n+      List<Pair<InsertBucket, Double>> targetBuckets = partitionPathToInsertBucketInfos.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      Pair<InsertBucket, Double> pair = new InsertBucket2CumulativeWeight(new InsertBucket(), r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3137754443e9739530f125ae99a560fa616fd54"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzIzMjY2OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucketCumulativeWeightPair.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjoyNTo0M1rOG6e8eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjoyNTo0M1rOG6e8eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzU5Mg==", "bodyText": "java docs as to what does cumulative weight means.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463977592", "createdAt": "2020-08-01T16:25:43Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertBucketCumulativeWeightPair.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.common.util.collection.Pair;\n+\n+public class InsertBucketCumulativeWeightPair extends Pair<InsertBucket, Double> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzIzMzQwOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjoyNzowMVrOG6e8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMDoxOTozNVrOG6hJXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzY3Nw==", "bodyText": "did you check if this prints the value or the hash value for InsertBucketCumulativeWeightPair? if hash value, you may need to override toString for InsertBucketCumulativeWeightPair", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463977677", "createdAt": "2020-08-01T16:27:01Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -99,7 +100,7 @@ public UpsertPartitioner(WorkloadProfile profile, JavaSparkContext jsc, HoodieTa\n     assignInserts(profile, jsc);\n \n     LOG.info(\"Total Buckets :\" + totalBuckets + \", buckets info => \" + bucketInfoMap + \", \\n\"\n-        + \"Partition to insert buckets => \" + partitionPathToInsertBuckets + \", \\n\"\n+        + \"Partition to insert buckets => \" + partitionPathToInsertBucketInfos + \", \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxMzY2MQ==", "bodyText": "The parent class Pair has toString() method:\n  @Override\n  public String toString() {\n    return new StringBuilder().append('(').append(getLeft()).append(',').append(getRight()).append(')').toString();\n  }", "url": "https://github.com/apache/hudi/pull/1868#discussion_r464013661", "createdAt": "2020-08-02T00:19:35Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -99,7 +100,7 @@ public UpsertPartitioner(WorkloadProfile profile, JavaSparkContext jsc, HoodieTa\n     assignInserts(profile, jsc);\n \n     LOG.info(\"Total Buckets :\" + totalBuckets + \", buckets info => \" + bucketInfoMap + \", \\n\"\n-        + \"Partition to insert buckets => \" + partitionPathToInsertBuckets + \", \\n\"\n+        + \"Partition to insert buckets => \" + partitionPathToInsertBucketInfos + \", \\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzY3Nw=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzIzNDc0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjoyOTozNVrOG6e9dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoyMjozOVrOG7PqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Nzg0NQ==", "bodyText": "sorry, probably I mis guided you. (should not happen) but incase the last buckets cumulative weight is not 1.0, there are chances that index value could be equal to size of collection when entry searched for is greater than all entries. Can we accommodate that as well.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463977845", "createdAt": "2020-08-01T16:29:35Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -270,20 +273,24 @@ public int getPartition(Object key) {\n       return updateLocationToBucket.get(location.getFileId());\n     } else {\n       String partitionPath = keyLocation._1().getPartitionPath();\n-      List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n+      List<InsertBucketCumulativeWeightPair> targetBuckets = partitionPathToInsertBucketInfos.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = Collections.binarySearch(targetBuckets, new InsertBucketCumulativeWeightPair(new InsertBucket(), r));\n+\n+      if (index >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxNDU2Ng==", "bodyText": "The last buckets cumulative weight should be 1, and the search entry should not greater than the last entry.\nEven if the search entry greater than all entries, it will return the last bucketNumber.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r464014566", "createdAt": "2020-08-02T00:33:36Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -270,20 +273,24 @@ public int getPartition(Object key) {\n       return updateLocationToBucket.get(location.getFileId());\n     } else {\n       String partitionPath = keyLocation._1().getPartitionPath();\n-      List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n+      List<InsertBucketCumulativeWeightPair> targetBuckets = partitionPathToInsertBucketInfos.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = Collections.binarySearch(targetBuckets, new InsertBucketCumulativeWeightPair(new InsertBucket(), r));\n+\n+      if (index >= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Nzg0NQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2ODI1Ng==", "bodyText": "From docs, I see that list.size() will be returned.\nthe index of the first element greater than the key, or list.size() if all elements in the list are less than the specified key.\n\nwhich means, it could throw ArrayIndexOutOfBounds. Let me know if I am missing something.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r464468256", "createdAt": "2020-08-03T14:57:14Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -270,20 +273,24 @@ public int getPartition(Object key) {\n       return updateLocationToBucket.get(location.getFileId());\n     } else {\n       String partitionPath = keyLocation._1().getPartitionPath();\n-      List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n+      List<InsertBucketCumulativeWeightPair> targetBuckets = partitionPathToInsertBucketInfos.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = Collections.binarySearch(targetBuckets, new InsertBucketCumulativeWeightPair(new InsertBucket(), r));\n+\n+      if (index >= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Nzg0NQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTc1Mw==", "bodyText": "Below add a testcase for Collections.binarySearch.\n  @Test\n  public void test() {\n    List<Double> cumulativeWeighs = new ArrayList<>();\n    cumulativeWeighs.add(0.1);\n    cumulativeWeighs.add(0.5);\n    cumulativeWeighs.add(1.0);\n\n    assertEquals (0, Collections.binarySearch(cumulativeWeighs, 0.1));\n    assertEquals (1, Collections.binarySearch(cumulativeWeighs, 0.5));\n    assertEquals (2, Collections.binarySearch(cumulativeWeighs, 1.0));\n\n    assertEquals (-1, Collections.binarySearch(cumulativeWeighs, 0.01));\n    assertEquals (-2, Collections.binarySearch(cumulativeWeighs, 0.2));\n    assertEquals (-3, Collections.binarySearch(cumulativeWeighs, 0.6));\n    assertEquals (-4, Collections.binarySearch(cumulativeWeighs, 1.1));\n  }\n\nIf the the search key is bigger than all the elements in the list, it will return (-(insertion point) - 1)= -3 -1 = -4 .\nSo I have to add the following judge:\n      if ((-1 * index - 1) < targetBuckets.size()) {\n        return targetBuckets.get((-1 * index - 1)).getKey().bucketNumber;\n      }", "url": "https://github.com/apache/hudi/pull/1868#discussion_r464775753", "createdAt": "2020-08-04T03:22:39Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/UpsertPartitioner.java", "diffHunk": "@@ -270,20 +273,24 @@ public int getPartition(Object key) {\n       return updateLocationToBucket.get(location.getFileId());\n     } else {\n       String partitionPath = keyLocation._1().getPartitionPath();\n-      List<InsertBucket> targetBuckets = partitionPathToInsertBuckets.get(partitionPath);\n+      List<InsertBucketCumulativeWeightPair> targetBuckets = partitionPathToInsertBucketInfos.get(partitionPath);\n       // pick the target bucket to use based on the weights.\n-      double totalWeight = 0.0;\n       final long totalInserts = Math.max(1, profile.getWorkloadStat(partitionPath).getNumInserts());\n       final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", keyLocation._1().getRecordKey());\n       final double r = 1.0 * Math.floorMod(hashOfKey, totalInserts) / totalInserts;\n-      for (InsertBucket insertBucket : targetBuckets) {\n-        totalWeight += insertBucket.weight;\n-        if (r <= totalWeight) {\n-          return insertBucket.bucketNumber;\n-        }\n+\n+      int index = Collections.binarySearch(targetBuckets, new InsertBucketCumulativeWeightPair(new InsertBucket(), r));\n+\n+      if (index >= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Nzg0NQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI0MzE3OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNjo0MToyN1rOG6fBQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1NTo0MlrOG7PP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODgxOQ==", "bodyText": "typo. weight is 0.08", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463978819", "createdAt": "2020-08-01T16:41:27Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +267,8 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber, \"First insert bucket must be same as update bucket\");\n+    assertEquals(200.0 / 2400, insertBuckets.get(0).getKey().weight, 0.01, \"First insert bucket should have weight 0.5\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODg5OA==", "bodyText": "just curious, why not asserting every buckets weight?", "url": "https://github.com/apache/hudi/pull/1868#discussion_r463978898", "createdAt": "2020-08-01T16:42:26Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +267,8 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber, \"First insert bucket must be same as update bucket\");\n+    assertEquals(200.0 / 2400, insertBuckets.get(0).getKey().weight, 0.01, \"First insert bucket should have weight 0.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODgxOQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxNDg3Mg==", "bodyText": "Yes, it should be 0.08, the testcase is not add by me, I am also curious.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r464014872", "createdAt": "2020-08-02T00:38:49Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +267,8 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber, \"First insert bucket must be same as update bucket\");\n+    assertEquals(200.0 / 2400, insertBuckets.get(0).getKey().weight, 0.01, \"First insert bucket should have weight 0.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODgxOQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3MDYzNw==", "bodyText": "it is fine. Would you mind adding assertions for all buckets.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r464470637", "createdAt": "2020-08-03T15:00:54Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +267,8 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber, \"First insert bucket must be same as update bucket\");\n+    assertEquals(200.0 / 2400, insertBuckets.get(0).getKey().weight, 0.01, \"First insert bucket should have weight 0.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODgxOQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODk4NA==", "bodyText": "Sure, I will add for all buckets.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r464768984", "createdAt": "2020-08-04T02:55:42Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +267,8 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber, \"First insert bucket must be same as update bucket\");\n+    assertEquals(200.0 / 2400, insertBuckets.get(0).getKey().weight, 0.01, \"First insert bucket should have weight 0.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODgxOQ=="}, "originalCommit": {"oid": "feb77c51617ca9dda8f08a5a2a20ea4ed764f602"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTE5NjIxOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1MDowNlrOG7moBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowNDoxM1rOG73hRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MjAwNw==", "bodyText": "lets avoid doing one at a time w/ hardcoded expected values. I mean, we should try to do in a loop. Can we build a map of <index -> ExpectedValue>. ExpectedValue should contain bucketNo, bucketType, weight, cumulativeWeight. Once we have this, these 20 lines of assertions will be folded to just 4 to 5 lines.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r465152007", "createdAt": "2020-08-04T15:50:06Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -252,8 +250,27 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(2).bucketType,\n         \"Bucket 2 is INSERT\");\n     assertEquals(3, insertBuckets.size(), \"Total of 3 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(0.5, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber,\n+        \"First insert bucket must be same as update bucket\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyODgwNQ==", "bodyText": "Got it.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r465428805", "createdAt": "2020-08-05T02:04:13Z", "author": {"login": "shenh062326"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -252,8 +250,27 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(2).bucketType,\n         \"Bucket 2 is INSERT\");\n     assertEquals(3, insertBuckets.size(), \"Total of 3 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(0.5, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber,\n+        \"First insert bucket must be same as update bucket\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MjAwNw=="}, "originalCommit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTE5ODk0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1MDo0NlrOG7mpsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1MDo0NlrOG7mpsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MjQzMw==", "bodyText": "same as above. Can we try to fold this up in a loop.", "url": "https://github.com/apache/hudi/pull/1868#discussion_r465152433", "createdAt": "2020-08-04T15:50:46Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +286,34 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+\n+    assertEquals(0, insertBuckets.get(0).getKey().bucketNumber,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556ab6370c37925d036fe700a83370e81f53db8d"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTM1NTM0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0ODo1MFrOG99Ajw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0ODo1MFrOG99Ajw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNTg4Nw==", "bodyText": "Can't you reuse the same variable ?\nweights = { 0.08, 0.31, 0.31, 0.31};\ncumulativeWeights = { 0.08, 0.39, 0.69, 1.0};", "url": "https://github.com/apache/hudi/pull/1868#discussion_r467615887", "createdAt": "2020-08-09T18:48:50Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/src/test/java/org/apache/hudi/table/action/commit/TestUpsertPartitioner.java", "diffHunk": "@@ -269,8 +282,10 @@ public void testUpsertPartitionerWithSmallInsertHandling() throws Exception {\n     assertEquals(BucketType.INSERT, partitioner.getBucketInfo(3).bucketType,\n         \"Bucket 3 is INSERT\");\n     assertEquals(4, insertBuckets.size(), \"Total of 4 insert buckets\");\n-    assertEquals(0, insertBuckets.get(0).bucketNumber, \"First insert bucket must be same as update bucket\");\n-    assertEquals(200.0 / 2400, insertBuckets.get(0).weight, 0.01, \"First insert bucket should have weight 0.5\");\n+\n+    Double[] weights1 = { 0.08, 0.31, 0.31, 0.31};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa713efe8362aa0c682be59fbdf377ff1c7bbd74"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4344, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}