{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzMyNTUw", "number": 1490, "title": "[HUDI-700]Add unit test for FileSystemViewCommand", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nAdd unit test for FileSystemViewCommand\nBrief change log\n(for example:)\n\nAdd unit test for FileSystemViewCommand\n\nVerify this pull request\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-04-06T15:38:42Z", "url": "https://github.com/apache/hudi/pull/1490", "merged": true, "mergeCommit": {"oid": "a464a2972e83e648585277ebe567703c8285cf1e"}, "closed": true, "closedAt": "2020-04-11T02:12:22Z", "author": {"login": "hddong"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVAi1AAH2gAyMzk5NzMyNTUwOjkyOGZhYWJmMzFmMTkxYmVmZmVjY2Y1MWRjNmJlOGY3ZmQ4YTk0MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWcCDYAFqTM5MTcyNjYzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "928faabf31f191beffeccf51dc6be8f7fd8a9435", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/928faabf31f191beffeccf51dc6be8f7fd8a9435", "committedDate": "2020-04-06T15:36:32Z", "message": "Add test for FileSystemViewCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjkzNTEx", "url": "https://github.com/apache/hudi/pull/1490#pullrequestreview-388693511", "createdAt": "2020-04-06T23:45:47Z", "commit": {"oid": "928faabf31f191beffeccf51dc6be8f7fd8a9435"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo0NTo0N1rOGBt6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo0NTo0N1rOGBt6wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NDA4MQ==", "bodyText": "Line Break here", "url": "https://github.com/apache/hudi/pull/1490#discussion_r404454081", "createdAt": "2020-04-06T23:45:47Z", "author": {"login": "smarthi"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+import org.junit.Before;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928faabf31f191beffeccf51dc6be8f7fd8a9435"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "committedDate": "2020-04-07T01:14:31Z", "message": "Update TestFileSystemViewCommand.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Nzg2NjU4", "url": "https://github.com/apache/hudi/pull/1490#pullrequestreview-389786658", "createdAt": "2020-04-08T09:05:47Z", "commit": {"oid": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTowNTo0N1rOGCl7jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToxMTo1MFrOGCmLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3MTc4OQ==", "bodyText": "Can we convert this field into a local variable?", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405371789", "createdAt": "2020-04-08T09:05:47Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3MjA2NA==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405372064", "createdAt": "2020-04-08T09:06:12Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  private static String TEST_WRITE_TOKEN = \"1-0-1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTMwOA==", "bodyText": "These string literals are the same as FileSystemViewCommand. We can define them as constant fields and reuse them here?", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405375308", "createdAt": "2020-04-08T09:10:57Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  private static String TEST_WRITE_TOKEN = \"1-0-1\";\n+\n+  @Before\n+  public void init() throws IOException {\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    partitionPath = HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+    String fullPartitionPath = tablePath + \"/\" + partitionPath;\n+    new File(fullPartitionPath).mkdirs();\n+\n+    // Generate 2 commits\n+    String commitTime1 = \"1\";\n+    String commitTime2 = \"2\";\n+\n+    String fileId1 = UUID.randomUUID().toString();\n+\n+    // Write date files and log file\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime1, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime2, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+\n+    // Write commit files\n+    new File(tablePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n+    new File(tablePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n+\n+    // Reload meta client and create fsView\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+\n+    fsView = new HoodieTableFileSystemView(metaClient, metaClient.getActiveTimeline(), true);\n+  }\n+\n+  /**\n+   * Test case for 'show fsview all'.\n+   */\n+  @Test\n+  public void testShowCommits() {\n+    // Test default show fsview all\n+    CommandResult cr = getShell().executeCommand(\"show fsview all\");\n+    assertTrue(cr.isSuccess());\n+\n+    // Get all file groups\n+    Stream<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(partitionPath);\n+\n+    List<Comparable[]> rows = new ArrayList<>();\n+    fileGroups.forEach(fg -> fg.getAllFileSlices().forEach(fs -> {\n+      int idx = 0;\n+      // For base file only Views, do not display any delta-file related columns\n+      Comparable[] row = new Comparable[8];\n+      row[idx++] = fg.getPartitionPath();\n+      row[idx++] = fg.getFileGroupId().getFileId();\n+      row[idx++] = fs.getBaseInstantTime();\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getPath() : \"\";\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getFileSize() : -1;\n+      row[idx++] = fs.getLogFiles().count();\n+      row[idx++] = fs.getLogFiles().mapToLong(HoodieLogFile::getFileSize).sum();\n+      row[idx++] = fs.getLogFiles().collect(Collectors.toList()).toString();\n+      rows.add(row);\n+    }));\n+\n+    Function<Object, String> converterFunction =\n+        entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString())));\n+    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n+    fieldNameToConverterMap.put(\"Total Delta File Size\", converterFunction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTg5Ng==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405375896", "createdAt": "2020-04-08T09:11:50Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  private static String TEST_WRITE_TOKEN = \"1-0-1\";\n+\n+  @Before\n+  public void init() throws IOException {\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    partitionPath = HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+    String fullPartitionPath = tablePath + \"/\" + partitionPath;\n+    new File(fullPartitionPath).mkdirs();\n+\n+    // Generate 2 commits\n+    String commitTime1 = \"1\";\n+    String commitTime2 = \"2\";\n+\n+    String fileId1 = UUID.randomUUID().toString();\n+\n+    // Write date files and log file\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime1, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime2, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+\n+    // Write commit files\n+    new File(tablePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n+    new File(tablePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n+\n+    // Reload meta client and create fsView\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+\n+    fsView = new HoodieTableFileSystemView(metaClient, metaClient.getActiveTimeline(), true);\n+  }\n+\n+  /**\n+   * Test case for 'show fsview all'.\n+   */\n+  @Test\n+  public void testShowCommits() {\n+    // Test default show fsview all\n+    CommandResult cr = getShell().executeCommand(\"show fsview all\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32ef3e744178a52189facebb41b0c7083ab20c7a", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/32ef3e744178a52189facebb41b0c7083ab20c7a", "committedDate": "2020-04-09T06:13:12Z", "message": "Add header config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTI1NjQ1", "url": "https://github.com/apache/hudi/pull/1490#pullrequestreview-390525645", "createdAt": "2020-04-09T06:40:01Z", "commit": {"oid": "32ef3e744178a52189facebb41b0c7083ab20c7a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjo0MDowMVrOGDLdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjo0Mjo0NVrOGDLhxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NjY4Nw==", "bodyText": "Can we break this command into a new test case? I always suggest one test method verify one thing. Additionally, this method seems a bit long.", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405986687", "createdAt": "2020-04-09T06:40:01Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderConfig;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  @Before\n+  public void init() throws IOException {\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    String tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    partitionPath = HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+    String fullPartitionPath = tablePath + \"/\" + partitionPath;\n+    new File(fullPartitionPath).mkdirs();\n+\n+    // Generate 2 commits\n+    String commitTime1 = \"1\";\n+    String commitTime2 = \"2\";\n+\n+    String fileId1 = UUID.randomUUID().toString();\n+\n+    // Write date files and log file\n+    String testWriteToken = \"1-0-1\";\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime1, testWriteToken, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime1, 0, testWriteToken))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime2, testWriteToken, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime2, 0, testWriteToken))\n+        .createNewFile();\n+\n+    // Write commit files\n+    new File(tablePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n+    new File(tablePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n+\n+    // Reload meta client and create fsView\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+\n+    fsView = new HoodieTableFileSystemView(metaClient, metaClient.getActiveTimeline(), true);\n+  }\n+\n+  /**\n+   * Test case for 'show fsview all'.\n+   */\n+  @Test\n+  public void testShowCommits() {\n+    // Test default show fsview all\n+    CommandResult cr = getShell().executeCommand(\"show fsview all\");\n+    assertTrue(cr.isSuccess());\n+\n+    // Get all file groups\n+    Stream<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(partitionPath);\n+\n+    List<Comparable[]> rows = new ArrayList<>();\n+    fileGroups.forEach(fg -> fg.getAllFileSlices().forEach(fs -> {\n+      int idx = 0;\n+      // For base file only Views, do not display any delta-file related columns\n+      Comparable[] row = new Comparable[8];\n+      row[idx++] = fg.getPartitionPath();\n+      row[idx++] = fg.getFileGroupId().getFileId();\n+      row[idx++] = fs.getBaseInstantTime();\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getPath() : \"\";\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getFileSize() : -1;\n+      row[idx++] = fs.getLogFiles().count();\n+      row[idx++] = fs.getLogFiles().mapToLong(HoodieLogFile::getFileSize).sum();\n+      row[idx++] = fs.getLogFiles().collect(Collectors.toList()).toString();\n+      rows.add(row);\n+    }));\n+\n+    Function<Object, String> converterFunction =\n+        entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString())));\n+    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n+    fieldNameToConverterMap.put(HoodieTableHeaderConfig.HEADER_TOTAL_DELTA_FILE_SIZE, converterFunction);\n+    fieldNameToConverterMap.put(HoodieTableHeaderConfig.HEADER_DATA_FILE_SIZE, converterFunction);\n+\n+    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderConfig.HEADER_PARTITION)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_FILE_ID)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_BASE_INSTANT)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_DATA_FILE)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_DATA_FILE_SIZE)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_NUM_DELTA_FILES)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_TOTAL_DELTA_FILE_SIZE)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_DELTA_FILES);\n+    String expected = HoodiePrintHelper.print(header, fieldNameToConverterMap, \"\", false, -1, false, rows);\n+    assertEquals(expected, cr.getResult().toString());\n+\n+    // Test command with options, baseFileOnly and maxInstant is 2\n+    cr = getShell().executeCommand(\"show fsview all --baseFileOnly true --maxInstant 2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ef3e744178a52189facebb41b0c7083ab20c7a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4Nzc4Mw==", "bodyText": "Actually, I am thinking if the keyword Config is a good one. It seems this class only defines some config keys or say table header field names? So what about renaming it to HoodieTableHeaderFields or HoodieTableHeaderConfigKeys?", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405987783", "createdAt": "2020-04-09T06:42:45Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderConfig.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli;\n+\n+/**\n+ * Config for table header.\n+ */\n+public class HoodieTableHeaderConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ef3e744178a52189facebb41b0c7083ab20c7a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e93294576bdbceaa5481d95d3caaf9e9c21a6a", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/d1e93294576bdbceaa5481d95d3caaf9e9c21a6a", "committedDate": "2020-04-09T10:04:51Z", "message": "Split method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "409557ed41f841236c391a2018742838ab9778f9", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/409557ed41f841236c391a2018742838ab9778f9", "committedDate": "2020-04-10T01:19:39Z", "message": "reset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzI2NjM1", "url": "https://github.com/apache/hudi/pull/1490#pullrequestreview-391726635", "createdAt": "2020-04-11T02:12:00Z", "commit": {"oid": "409557ed41f841236c391a2018742838ab9778f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3339, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}