{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzQxMzA4", "number": 1724, "title": "[HUDI-696] Add unit test for CommitsCommand", "bodyText": "What is the purpose of the pull request\nFix bug of command commits compare\nAdd unit test for CommitsCommand\nBrief change log\n(for example:)\n\nAdd unit test for CommitsCommand\n\nVerify this pull request\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-06-10T09:51:52Z", "url": "https://github.com/apache/hudi/pull/1724", "merged": true, "mergeCommit": {"oid": "f3a701757b9fb838acc4fb2975f378009d71f104"}, "closed": true, "closedAt": "2020-06-18T13:42:14Z", "author": {"login": "hddong"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqzRaqgFqTQzMDEyNDIzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcseqJKAFqTQzMzI5NDg5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTI0MjMw", "url": "https://github.com/apache/hudi/pull/1724#pullrequestreview-430124230", "createdAt": "2020-06-13T08:35:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwODozNTowNVrOGjWehw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwODozNTowNVrOGjWehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMTYwNw==", "bodyText": "would the sparkMaster and sparkMemory put into sparkProperties? and if so, what's the priority?", "url": "https://github.com/apache/hudi/pull/1724#discussion_r439721607", "createdAt": "2020-06-13T08:35:05Z", "author": {"login": "leesf"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -214,15 +224,18 @@ public String showArchivedCommits(\n     }\n   }\n \n-  @CliCommand(value = \"commits refresh\", help = \"Refresh the commits\")\n-  public String refreshCommits() throws IOException {\n+  @CliCommand(value = {\"commits refresh\", \"refresh\"}, help = \"Refresh the commits\")\n+  public String refreshCommits() {\n     HoodieCLI.refreshTableMetadata();\n     return \"Metadata for table \" + HoodieCLI.getTableMetaClient().getTableConfig().getTableName() + \" refreshed.\";\n   }\n \n   @CliCommand(value = \"commit rollback\", help = \"Rollback a commit\")\n   public String rollbackCommit(@CliOption(key = {\"commit\"}, help = \"Commit to rollback\") final String instantTime,\n-      @CliOption(key = {\"sparkProperties\"}, help = \"Spark Properties File Path\") final String sparkPropertiesPath)\n+      @CliOption(key = {\"sparkProperties\"}, help = \"Spark Properties File Path\") final String sparkPropertiesPath,\n+      @CliOption(key = \"sparkMaster\", unspecifiedDefaultValue = \"\", help = \"Spark Master\") String master,\n+      @CliOption(key = \"sparkMemory\", unspecifiedDefaultValue = \"4G\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTI0MjYz", "url": "https://github.com/apache/hudi/pull/1724#pullrequestreview-430124263", "createdAt": "2020-06-13T08:35:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwODozNTo0OVrOGjWesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwODozNTo0OVrOGjWesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMTY1MA==", "bodyText": "this is a bug?", "url": "https://github.com/apache/hudi/pull/1724#discussion_r439721650", "createdAt": "2020-06-13T08:35:49Z", "author": {"login": "leesf"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -334,27 +351,30 @@ public String showCommitFiles(\n       }\n     }\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"Partition Path\").addTableHeaderField(\"File ID\")\n-        .addTableHeaderField(\"Previous Commit\").addTableHeaderField(\"Total Records Updated\")\n-        .addTableHeaderField(\"Total Records Written\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Errors\").addTableHeaderField(\"File Size\");\n+    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_PARTITION_PATH)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_PREVIOUS_COMMIT)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_RECORDS_UPDATED)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_RECORDS_WRITTEN)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_BYTES_WRITTEN)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_ERRORS)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_SIZE);\n \n     return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending,\n         limit, headerOnly, rows, exportTableName);\n   }\n \n   @CliCommand(value = \"commits compare\", help = \"Compare commits with another Hoodie table\")\n-  public String compareCommits(@CliOption(key = {\"path\"}, help = \"Path of the table to compare to\") final String path)\n-      throws Exception {\n+  public String compareCommits(@CliOption(key = {\"path\"}, help = \"Path of the table to compare to\") final String path) {\n \n     HoodieTableMetaClient source = HoodieCLI.getTableMetaClient();\n     HoodieTableMetaClient target = new HoodieTableMetaClient(HoodieCLI.conf, path);\n     HoodieTimeline targetTimeline = target.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n     HoodieTimeline sourceTimeline = source.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n     String targetLatestCommit =\n-        targetTimeline.getInstants().iterator().hasNext() ? \"0\" : targetTimeline.lastInstant().get().getTimestamp();\n+        targetTimeline.getInstants().iterator().hasNext() ? targetTimeline.lastInstant().get().getTimestamp() : \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0965239f8818a9f739f8bc385dc228eb259ca540", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/0965239f8818a9f739f8bc385dc228eb259ca540", "committedDate": "2020-06-14T14:36:27Z", "message": "[HUDI-696] Add unit test for CommitsCommand"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "0965239f8818a9f739f8bc385dc228eb259ca540", "author": {"user": {"login": "hddong", "name": "hongdd"}}, "url": "https://github.com/apache/hudi/commit/0965239f8818a9f739f8bc385dc228eb259ca540", "committedDate": "2020-06-14T14:36:27Z", "message": "[HUDI-696] Add unit test for CommitsCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjk0ODk3", "url": "https://github.com/apache/hudi/pull/1724#pullrequestreview-433294897", "createdAt": "2020-06-18T13:41:56Z", "commit": {"oid": "0965239f8818a9f739f8bc385dc228eb259ca540"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4979, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}