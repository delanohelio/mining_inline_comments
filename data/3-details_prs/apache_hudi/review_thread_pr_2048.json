{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA3ODM0", "number": 2048, "reviewThreads": {"totalCount": 68, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwODo0MDowMVrOEd9E6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMzo1MDowN1rOEnS_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ0ODQyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwODo0MDowMVrOHJaFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Njo0MlrOHLEIyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjUwMQ==", "bodyText": "As discussed, lets retain all the file-groups but perform filtering in the get APIs. THis would avoid correctness issues in filtering and also makes handling incremental file system view easier.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479626501", "createdAt": "2020-08-29T08:40:01Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -173,29 +180,59 @@ protected void refreshTimeline(HoodieTimeline visibleActiveTimeline) {\n     List<HoodieFileGroup> fileGroups = new ArrayList<>();\n     fileIdSet.forEach(pair -> {\n       String fileId = pair.getValue();\n-      HoodieFileGroup group = new HoodieFileGroup(pair.getKey(), fileId, timeline);\n-      if (baseFiles.containsKey(pair)) {\n-        baseFiles.get(pair).forEach(group::addBaseFile);\n-      }\n-      if (logFiles.containsKey(pair)) {\n-        logFiles.get(pair).forEach(group::addLogFile);\n-      }\n+      String partitionPath = pair.getKey();\n+      if (isExcludeFileGroup(partitionPath, fileId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NDE3MQ==", "bodyText": "Modified. Please take a look. RocksDB needs to be implemented.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481364171", "createdAt": "2020-09-01T18:56:42Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -173,29 +180,59 @@ protected void refreshTimeline(HoodieTimeline visibleActiveTimeline) {\n     List<HoodieFileGroup> fileGroups = new ArrayList<>();\n     fileIdSet.forEach(pair -> {\n       String fileId = pair.getValue();\n-      HoodieFileGroup group = new HoodieFileGroup(pair.getKey(), fileId, timeline);\n-      if (baseFiles.containsKey(pair)) {\n-        baseFiles.get(pair).forEach(group::addBaseFile);\n-      }\n-      if (logFiles.containsKey(pair)) {\n-        logFiles.get(pair).forEach(group::addLogFile);\n-      }\n+      String partitionPath = pair.getKey();\n+      if (isExcludeFileGroup(partitionPath, fileId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjUwMQ=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ3NTI3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceStat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOToxODoyNVrOHJaRjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Njo1OFrOHLEJ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyOTcwOQ==", "bodyText": "Why are we not tracking dropped fileIds ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479629709", "createdAt": "2020-08-29T09:18:25Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceStat.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Statistics about a single Hoodie replace operation.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HoodieReplaceStat extends HoodieWriteStat {\n+\n+  // records from the 'getFileId()' can be written to multiple new file groups. This list tracks all new fileIds\n+  private List<String> newFileIds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NDQ2Mg==", "bodyText": "its part of HoodieWriteStat#fileId", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481364462", "createdAt": "2020-09-01T18:56:58Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceStat.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Statistics about a single Hoodie replace operation.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HoodieReplaceStat extends HoodieWriteStat {\n+\n+  // records from the 'getFileId()' can be written to multiple new file groups. This list tracks all new fileIds\n+  private List<String> newFileIds;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyOTcwOQ=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ3ODc5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RemoteHoodieTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOToyMzo1M1rOHJaTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1NzowNVrOHLEKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMDE0MQ==", "bodyText": "getAllExcludeFileGroups -> getReplacedFileGroups ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479630141", "createdAt": "2020-08-29T09:23:53Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RemoteHoodieTableFileSystemView.java", "diffHunk": "@@ -355,6 +357,18 @@ public RemoteHoodieTableFileSystemView(String server, int port, HoodieTableMetaC\n     }\n   }\n \n+  @Override\n+  public Stream<String> getAllExcludeFileGroups(final String partitionPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NDUzNw==", "bodyText": "changed", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481364537", "createdAt": "2020-09-01T18:57:05Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RemoteHoodieTableFileSystemView.java", "diffHunk": "@@ -355,6 +357,18 @@ public RemoteHoodieTableFileSystemView(String server, int port, HoodieTableMetaC\n     }\n   }\n \n+  @Override\n+  public Stream<String> getAllExcludeFileGroups(final String partitionPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMDE0MQ=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ3OTI5OnYy", "diffSide": "RIGHT", "path": "hudi-timeline-service/src/main/java/org/apache/hudi/timeline/service/FileSystemViewHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOToyNDo0NVrOHJaTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1NzoxMVrOHLEKXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMDIxMQ==", "bodyText": "ALL_EXCLUDE_FILEGROUPS_FOR_PARTITION_URL -> REPLACED_FILEGROUPS_FOR_PARTITION_URL\nLets use a single consistent name \"replaced\" instead of exclude everywhere.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479630211", "createdAt": "2020-08-29T09:24:45Z", "author": {"login": "bvaradar"}, "path": "hudi-timeline-service/src/main/java/org/apache/hudi/timeline/service/FileSystemViewHandler.java", "diffHunk": "@@ -284,6 +284,13 @@ private void registerFileSlicesAPI() {\n       writeValueAsString(ctx, dtos);\n     }, true));\n \n+    app.get(RemoteHoodieTableFileSystemView.ALL_EXCLUDE_FILEGROUPS_FOR_PARTITION_URL, new ViewHandler(ctx -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NDU3NQ==", "bodyText": "changed", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481364575", "createdAt": "2020-09-01T18:57:11Z", "author": {"login": "satishkotha"}, "path": "hudi-timeline-service/src/main/java/org/apache/hudi/timeline/service/FileSystemViewHandler.java", "diffHunk": "@@ -284,6 +284,13 @@ private void registerFileSlicesAPI() {\n       writeValueAsString(ctx, dtos);\n     }, true));\n \n+    app.get(RemoteHoodieTableFileSystemView.ALL_EXCLUDE_FILEGROUPS_FOR_PARTITION_URL, new ViewHandler(ctx -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMDIxMQ=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ4MDE1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOToyNTo0NlrOHJaT5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Nzo1NlrOHLEMAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMDMxMA==", "bodyText": "why is this needed ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479630310", "createdAt": "2020-08-29T09:25:46Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "diffHunk": "@@ -104,4 +104,8 @@ protected SyncableFileSystemView getFileSystemViewWithUnCommittedSlices(HoodieTa\n   protected HoodieTableType getTableType() {\n     return HoodieTableType.COPY_ON_WRITE;\n   }\n+\n+  protected boolean areTimeTravelTestsEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NDk5NQ==", "bodyText": "RocksDB and Remote FileSystemViews are not implemented yet. So i temporarily disabled those tests. Moved this method to view tests instead of common", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481364995", "createdAt": "2020-09-01T18:57:56Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "diffHunk": "@@ -104,4 +104,8 @@ protected SyncableFileSystemView getFileSystemViewWithUnCommittedSlices(HoodieTa\n   protected HoodieTableType getTableType() {\n     return HoodieTableType.COPY_ON_WRITE;\n   }\n+\n+  protected boolean areTimeTravelTestsEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMDMxMA=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ4Njk1OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/java/org/apache/hudi/internal/HoodieDataSourceInternalWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOTozNjoxMFrOHJaXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1ODowNFrOHLEMWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMTExNQ==", "bodyText": "Are you planning to address this TODO as part of this PR ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479631115", "createdAt": "2020-08-29T09:36:10Z", "author": {"login": "bvaradar"}, "path": "hudi-spark/src/main/java/org/apache/hudi/internal/HoodieDataSourceInternalWriter.java", "diffHunk": "@@ -102,7 +102,7 @@ public void commit(WriterCommitMessage[] messages) {\n             .flatMap(m -> m.getWriteStatuses().stream().map(m2 -> m2.getStat())).collect(Collectors.toList());\n \n     try {\n-      writeClient.commitStats(instantTime, writeStatList, Option.empty());\n+      writeClient.commitStats(instantTime, writeStatList, Option.empty(), HoodieTimeline.COMMIT_ACTION); //TODO get action type from HoodieWriterCommitMessage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NTA4MA==", "bodyText": "Fixed", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481365080", "createdAt": "2020-09-01T18:58:04Z", "author": {"login": "satishkotha"}, "path": "hudi-spark/src/main/java/org/apache/hudi/internal/HoodieDataSourceInternalWriter.java", "diffHunk": "@@ -102,7 +102,7 @@ public void commit(WriterCommitMessage[] messages) {\n             .flatMap(m -> m.getWriteStatuses().stream().map(m2 -> m2.getStat())).collect(Collectors.toList());\n \n     try {\n-      writeClient.commitStats(instantTime, writeStatList, Option.empty());\n+      writeClient.commitStats(instantTime, writeStatList, Option.empty(), HoodieTimeline.COMMIT_ACTION); //TODO get action type from HoodieWriterCommitMessage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMTExNQ=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ5MTgyOnYy", "diffSide": "RIGHT", "path": "hudi-timeline-service/src/main/java/org/apache/hudi/timeline/service/handlers/FileSliceHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOTo0Mzo0NlrOHJaZbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1ODoxMVrOHLEMmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMTcyNQ==", "bodyText": "Rename to getReplacedFileGroups", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479631725", "createdAt": "2020-08-29T09:43:46Z", "author": {"login": "bvaradar"}, "path": "hudi-timeline-service/src/main/java/org/apache/hudi/timeline/service/handlers/FileSliceHandler.java", "diffHunk": "@@ -89,6 +89,10 @@ public FileSliceHandler(Configuration conf, FileSystemViewManager viewManager) t\n         .collect(Collectors.toList());\n   }\n \n+  public List<String> getExcludeFileGroups(String basePath, String partitionPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NTE0NA==", "bodyText": "Done", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481365144", "createdAt": "2020-09-01T18:58:11Z", "author": {"login": "satishkotha"}, "path": "hudi-timeline-service/src/main/java/org/apache/hudi/timeline/service/handlers/FileSliceHandler.java", "diffHunk": "@@ -89,6 +89,10 @@ public FileSliceHandler(Configuration conf, FileSystemViewManager viewManager) t\n         .collect(Collectors.toList());\n   }\n \n+  public List<String> getExcludeFileGroups(String basePath, String partitionPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMTcyNQ=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ5NjU5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/SpillableMapBasedFileSystemView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOTo1MTowOVrOHJabtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1OToyMVrOHLEO7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMjMxMA==", "bodyText": "Please follow the same structure like the one we did for compaction.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479632310", "createdAt": "2020-08-29T09:51:09Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/SpillableMapBasedFileSystemView.java", "diffHunk": "@@ -77,6 +79,13 @@ public SpillableMapBasedFileSystemView(HoodieTableMetaClient metaClient, HoodieT\n     }\n   }\n \n+  @Override\n+  protected Map<String, Set<String>> createPartitionToExcludeFileGroups() {\n+    // TODO should we create another spillable directory under baseStoreDir?\n+    // the exclude file group is expected to be small, so use parent class in-memory representation\n+    return super.createPartitionToExcludeFileGroups();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NTc0Mg==", "bodyText": "Please take a look if i did it correctly. (To be honest, dont fully understand compaction implementation in great detail)", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481365742", "createdAt": "2020-09-01T18:59:21Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/SpillableMapBasedFileSystemView.java", "diffHunk": "@@ -77,6 +79,13 @@ public SpillableMapBasedFileSystemView(HoodieTableMetaClient metaClient, HoodieT\n     }\n   }\n \n+  @Override\n+  protected Map<String, Set<String>> createPartitionToExcludeFileGroups() {\n+    // TODO should we create another spillable directory under baseStoreDir?\n+    // the exclude file group is expected to be small, so use parent class in-memory representation\n+    return super.createPartitionToExcludeFileGroups();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMjMxMA=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODQ5NzE4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/TableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwOTo1MjowNFrOHJab_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1OTozMFrOHLEPQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMjM4MQ==", "bodyText": "I think I have mentioned it somewhere else. Lets denote this feature with the consistent term \"Replace\" everywhere.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479632381", "createdAt": "2020-08-29T09:52:04Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/TableFileSystemView.java", "diffHunk": "@@ -148,6 +148,9 @@\n    */\n   Stream<HoodieFileGroup> getAllFileGroups(String partitionPath);\n \n+  Stream<String> getAllExcludeFileGroups(String partitionPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NTgyNQ==", "bodyText": "Done", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481365825", "createdAt": "2020-09-01T18:59:30Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/TableFileSystemView.java", "diffHunk": "@@ -148,6 +148,9 @@\n    */\n   Stream<HoodieFileGroup> getAllFileGroups(String partitionPath);\n \n+  Stream<String> getAllExcludeFileGroups(String partitionPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMjM4MQ=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODUxNzM5OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoyMjoyNFrOHJalfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1OTo0OFrOHLEP4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDgxMw==", "bodyText": "Instead of direct listStatus, can you use FileSystemViewAbstraction to get the file-group and then delete each files in it ? THis way, once consolidated metadata becomes available, you can take advantage of that. cc @prashantwason", "url": "https://github.com/apache/hudi/pull/2048#discussion_r479634813", "createdAt": "2020-08-29T10:22:24Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,44 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {\n+      try {\n+        HoodieCommitMetadata metadata = HoodieCommitMetadata.fromBytes(\n+            metaClient.getActiveTimeline().getInstantDetails(replaceInstant).get(),\n+            HoodieCommitMetadata.class);\n+\n+        metadata.getPartitionToReplaceStats().entrySet().stream().forEach(entry ->\n+            deleteFileGroups(entry.getKey(), entry.getValue().stream().map(e -> e.getFileId()).collect(Collectors.toSet()), instant)\n+        );\n+      } catch (IOException e) {\n+        throw new HoodieCommitException(\"Failed to archive because cannot delete replace files\", e);\n+      }\n+    });\n+  }\n+\n+  private void deleteFileGroups(String partitionPath, Set<String> fileIdsToDelete, HoodieInstant instant) {\n+    try {\n+      FileStatus[] statuses = metaClient.getFs().listStatus(FSUtils.getPartitionPath(metaClient.getBasePath(), partitionPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2NTk4NQ==", "bodyText": "Modified to use FileSystemViews", "url": "https://github.com/apache/hudi/pull/2048#discussion_r481365985", "createdAt": "2020-09-01T18:59:48Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,44 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {\n+      try {\n+        HoodieCommitMetadata metadata = HoodieCommitMetadata.fromBytes(\n+            metaClient.getActiveTimeline().getInstantDetails(replaceInstant).get(),\n+            HoodieCommitMetadata.class);\n+\n+        metadata.getPartitionToReplaceStats().entrySet().stream().forEach(entry ->\n+            deleteFileGroups(entry.getKey(), entry.getValue().stream().map(e -> e.getFileId()).collect(Collectors.toSet()), instant)\n+        );\n+      } catch (IOException e) {\n+        throw new HoodieCommitException(\"Failed to archive because cannot delete replace files\", e);\n+      }\n+    });\n+  }\n+\n+  private void deleteFileGroups(String partitionPath, Set<String> fileIdsToDelete, HoodieInstant instant) {\n+    try {\n+      FileStatus[] statuses = metaClient.getFs().listStatus(FSUtils.getPartitionPath(metaClient.getBasePath(), partitionPath));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDgxMw=="}, "originalCommit": {"oid": "c864f503e6b5c671513c6e27eb8eb73802ddfaaa"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjI4MDQ2OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDowMzoxMFrOHP1ooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDowMzoxMFrOHP1ooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2OTQ0MA==", "bodyText": "can't we just call commit(String, JavaRDD, Option.empty()) without having to implement this?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r486369440", "createdAt": "2020-09-10T14:03:10Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "diffHunk": "@@ -87,44 +88,55 @@ protected AbstractHoodieWriteClient(JavaSparkContext jsc, HoodieIndex index, Hoo\n    * Commit changes performed at the given instantTime marker.\n    */\n   public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses) {\n-    return commit(instantTime, writeStatuses, Option.empty());\n+    HoodieTableMetaClient metaClient = createMetaClient(false);\n+    String actionType = metaClient.getCommitActionType();\n+    return commit(instantTime, writeStatuses, Option.empty(), actionType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9793056d885a74c17e3d0275d348d28684e63b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDEzMTY0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxNDo1MFrOHQ9LSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxNDo1MFrOHQ9LSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MTU3OA==", "bodyText": "rename: to just buildMetdata() , Commit is already  implicit from context.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487541578", "createdAt": "2020-09-13T15:14:50Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "diffHunk": "@@ -87,44 +88,57 @@ protected AbstractHoodieWriteClient(JavaSparkContext jsc, HoodieIndex index, Hoo\n    * Commit changes performed at the given instantTime marker.\n    */\n   public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses) {\n-    return commit(instantTime, writeStatuses, Option.empty());\n+    HoodieTableMetaClient metaClient = createMetaClient(false);\n+    String actionType = metaClient.getCommitActionType();\n+    return commit(instantTime, writeStatuses, Option.empty(), actionType);\n+  }\n+\n+  /**\n+   * Complete changes performed at the given instantTime marker with specified action.\n+   */\n+  public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses, String commitActionType) {\n+    return commit(instantTime, writeStatuses, Option.empty(), commitActionType);\n   }\n \n   /**\n+   *\n    * Commit changes performed at the given instantTime marker.\n    */\n   public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses,\n-      Option<Map<String, String>> extraMetadata) {\n-    List<HoodieWriteStat> stats = writeStatuses.map(WriteStatus::getStat).collect();\n-    return commitStats(instantTime, stats, extraMetadata);\n+                        Option<Map<String, String>> extraMetadata) {\n+    HoodieTableMetaClient metaClient = createMetaClient(false);\n+    String actionType = metaClient.getCommitActionType();\n+    return commit(instantTime, writeStatuses, extraMetadata, actionType);\n   }\n \n-  public boolean commitStats(String instantTime, List<HoodieWriteStat> stats, Option<Map<String, String>> extraMetadata) {\n-    LOG.info(\"Committing \" + instantTime);\n+  /**\n+   * Complete changes performed at the given instantTime marker with specified action.\n+   */\n+  public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses,\n+      Option<Map<String, String>> extraMetadata, String commitActionType) {\n+    List<HoodieWriteStat> writeStats = writeStatuses.filter(w -> !w.isReplacedFileId()).map(WriteStatus::getStat).collect();\n+    List<HoodieWriteStat> replaceStats = writeStatuses.filter(w -> w.isReplacedFileId()).map(WriteStatus::getStat).collect();\n+\n+    return commitStats(instantTime, writeStats, extraMetadata, commitActionType, replaceStats);\n+  }\n+\n+  public boolean commitStats(String instantTime, List<HoodieWriteStat> stats, Option<Map<String, String>> extraMetadata,\n+                             String commitActionType, List<HoodieWriteStat> replaceStats) {\n+    LOG.info(\"Committing \" + instantTime + \" action \" + commitActionType);\n     HoodieTableMetaClient metaClient = createMetaClient(false);\n-    String actionType = metaClient.getCommitActionType();\n     // Create a Hoodie table which encapsulated the commits and files visible\n     HoodieTable<T> table = HoodieTable.create(config, hadoopConf);\n \n     HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n-    HoodieCommitMetadata metadata = new HoodieCommitMetadata();\n-    stats.forEach(stat -> metadata.addWriteStat(stat.getPartitionPath(), stat));\n-\n+    HoodieCommitMetadata metadata = CommitUtils.buildWriteActionMetadata(stats, replaceStats, extraMetadata, operationType, config.getSchema(), commitActionType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDEzMjQxOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxNTozMFrOHQ9Lnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxNTozMFrOHQ9Lnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MTY2Mw==", "bodyText": "note to self: lets see if we can simply the commit() overloaded methods.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487541663", "createdAt": "2020-09-13T15:15:30Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "diffHunk": "@@ -87,44 +88,57 @@ protected AbstractHoodieWriteClient(JavaSparkContext jsc, HoodieIndex index, Hoo\n    * Commit changes performed at the given instantTime marker.\n    */\n   public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses) {\n-    return commit(instantTime, writeStatuses, Option.empty());\n+    HoodieTableMetaClient metaClient = createMetaClient(false);\n+    String actionType = metaClient.getCommitActionType();\n+    return commit(instantTime, writeStatuses, Option.empty(), actionType);\n+  }\n+\n+  /**\n+   * Complete changes performed at the given instantTime marker with specified action.\n+   */\n+  public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses, String commitActionType) {\n+    return commit(instantTime, writeStatuses, Option.empty(), commitActionType);\n   }\n \n   /**\n+   *\n    * Commit changes performed at the given instantTime marker.\n    */\n   public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses,\n-      Option<Map<String, String>> extraMetadata) {\n-    List<HoodieWriteStat> stats = writeStatuses.map(WriteStatus::getStat).collect();\n-    return commitStats(instantTime, stats, extraMetadata);\n+                        Option<Map<String, String>> extraMetadata) {\n+    HoodieTableMetaClient metaClient = createMetaClient(false);\n+    String actionType = metaClient.getCommitActionType();\n+    return commit(instantTime, writeStatuses, extraMetadata, actionType);\n   }\n \n-  public boolean commitStats(String instantTime, List<HoodieWriteStat> stats, Option<Map<String, String>> extraMetadata) {\n-    LOG.info(\"Committing \" + instantTime);\n+  /**\n+   * Complete changes performed at the given instantTime marker with specified action.\n+   */\n+  public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDEzMzk5OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxNzowMVrOHQ9MaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxNzowMVrOHQ9MaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MTg2NQ==", "bodyText": "rename: writeInputRecords()", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487541865", "createdAt": "2020-09-13T15:17:01Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "diffHunk": "@@ -95,6 +93,13 @@ public HoodieWriteMetadata execute(JavaRDD<HoodieRecord<T>> inputRecordsRDD) {\n       saveWorkloadProfileMetadataToInflight(profile, instantTime);\n     }\n \n+    JavaRDD<WriteStatus> writeStatusRDD = processInputRecords(inputRecordsRDD, profile);\n+    HoodieWriteMetadata result = new HoodieWriteMetadata();\n+    updateIndexAndCommitIfNeeded(writeStatusRDD, result);\n+    return result;\n+  }\n+\n+  protected JavaRDD<WriteStatus> processInputRecords(JavaRDD<HoodieRecord<T>> inputRecordsRDD, WorkloadProfile profile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDEzNTYzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxOTowM1rOHQ9NOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToxOTowM1rOHQ9NOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MjA3Mg==", "bodyText": "note to self: see if there is a way to avoid repeating this filtering here again", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487542072", "createdAt": "2020-09-13T15:19:03Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "diffHunk": "@@ -204,41 +212,44 @@ protected void commitOnAutoCommit(HoodieWriteMetadata result) {\n   }\n \n   protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata result) {\n-    commit(extraMetadata, result, result.getWriteStatuses().map(WriteStatus::getStat).collect());\n+    List<HoodieWriteStat> writeStats = result.getWriteStatuses().filter(w -> !w.isReplacedFileId()).map(WriteStatus::getStat).collect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDEzNzAzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToyMDoxOFrOHQ9N4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToyMDoxOFrOHQ9N4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MjI0MQ==", "bodyText": "rename: completeInstant(), its better to stay close to what the method is doing; using just one terminology", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487542241", "createdAt": "2020-09-13T15:20:18Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "diffHunk": "@@ -204,41 +212,44 @@ protected void commitOnAutoCommit(HoodieWriteMetadata result) {\n   }\n \n   protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata result) {\n-    commit(extraMetadata, result, result.getWriteStatuses().map(WriteStatus::getStat).collect());\n+    List<HoodieWriteStat> writeStats = result.getWriteStatuses().filter(w -> !w.isReplacedFileId()).map(WriteStatus::getStat).collect();\n+    List<HoodieWriteStat> replacedStats = result.getWriteStatuses().filter(w -> w.isReplacedFileId()).map(WriteStatus::getStat).collect();\n+    commit(extraMetadata, result, writeStats, replacedStats);\n   }\n \n-  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata result, List<HoodieWriteStat> stats) {\n-    String actionType = table.getMetaClient().getCommitActionType();\n+  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata result, List<HoodieWriteStat> writeStats, List<HoodieWriteStat> replaceStats) {\n+    String actionType = getCommitActionType();\n     LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n     // Create a Hoodie table which encapsulated the commits and files visible\n     HoodieTable<T> table = HoodieTable.create(config, hadoopConf);\n \n-    HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n-    HoodieCommitMetadata metadata = new HoodieCommitMetadata();\n \n     result.setCommitted(true);\n-    stats.forEach(stat -> metadata.addWriteStat(stat.getPartitionPath(), stat));\n-    result.setWriteStats(stats);\n+    result.setWriteStats(writeStats);\n+    result.setReplaceStats(replaceStats);\n \n     // Finalize write\n-    finalizeWrite(instantTime, stats, result);\n-\n-    // add in extra metadata\n-    if (extraMetadata.isPresent()) {\n-      extraMetadata.get().forEach(metadata::addMetadata);\n-    }\n-    metadata.addMetadata(HoodieCommitMetadata.SCHEMA_KEY, getSchemaToStoreInCommit());\n-    metadata.setOperationType(operationType);\n+    finalizeWrite(instantTime, writeStats, result);\n \n     try {\n-      activeTimeline.saveAsComplete(new HoodieInstant(true, actionType, instantTime),\n-          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n-      LOG.info(\"Committed \" + instantTime);\n+      HoodieCommitMetadata metadata = writeInstant(writeStats, replaceStats, extraMetadata);\n+      result.setCommitMetadata(Option.of(metadata));\n     } catch (IOException e) {\n       throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n           e);\n     }\n-    result.setCommitMetadata(Option.of(metadata));\n+  }\n+\n+  private HoodieCommitMetadata writeInstant(List<HoodieWriteStat>  writeStats, List<HoodieWriteStat> replaceStats, Option<Map<String, String>> extraMetadata) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE0MTQyOnYy", "diffSide": "LEFT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToyNToxOFrOHQ9P8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToyNToxOFrOHQ9P8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Mjc2OQ==", "bodyText": "nts: need to ensure the operation type  is properly set", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487542769", "createdAt": "2020-09-13T15:25:18Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/BaseCommitActionExecutor.java", "diffHunk": "@@ -204,41 +212,44 @@ protected void commitOnAutoCommit(HoodieWriteMetadata result) {\n   }\n \n   protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata result) {\n-    commit(extraMetadata, result, result.getWriteStatuses().map(WriteStatus::getStat).collect());\n+    List<HoodieWriteStat> writeStats = result.getWriteStatuses().filter(w -> !w.isReplacedFileId()).map(WriteStatus::getStat).collect();\n+    List<HoodieWriteStat> replacedStats = result.getWriteStatuses().filter(w -> w.isReplacedFileId()).map(WriteStatus::getStat).collect();\n+    commit(extraMetadata, result, writeStats, replacedStats);\n   }\n \n-  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata result, List<HoodieWriteStat> stats) {\n-    String actionType = table.getMetaClient().getCommitActionType();\n+  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata result, List<HoodieWriteStat> writeStats, List<HoodieWriteStat> replaceStats) {\n+    String actionType = getCommitActionType();\n     LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n     // Create a Hoodie table which encapsulated the commits and files visible\n     HoodieTable<T> table = HoodieTable.create(config, hadoopConf);\n \n-    HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n-    HoodieCommitMetadata metadata = new HoodieCommitMetadata();\n \n     result.setCommitted(true);\n-    stats.forEach(stat -> metadata.addWriteStat(stat.getPartitionPath(), stat));\n-    result.setWriteStats(stats);\n+    result.setWriteStats(writeStats);\n+    result.setReplaceStats(replaceStats);\n \n     // Finalize write\n-    finalizeWrite(instantTime, stats, result);\n-\n-    // add in extra metadata\n-    if (extraMetadata.isPresent()) {\n-      extraMetadata.get().forEach(metadata::addMetadata);\n-    }\n-    metadata.addMetadata(HoodieCommitMetadata.SCHEMA_KEY, getSchemaToStoreInCommit());\n-    metadata.setOperationType(operationType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE0NDgyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNToyOTozNlrOHQ9Rmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1NjowNVrOHQ-jtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MzE5NA==", "bodyText": "I think at the HoodieTable level, the API has to be about replacing file groups and not insertOverwrite (which can be limited to the WriteClient level). This way clustering can also use the same method, to build on top.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487543194", "createdAt": "2020-09-13T15:29:36Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "diffHunk": "@@ -213,6 +213,12 @@ public abstract HoodieWriteMetadata insertPrepped(JavaSparkContext jsc, String i\n   public abstract HoodieWriteMetadata bulkInsertPrepped(JavaSparkContext jsc, String instantTime,\n       JavaRDD<HoodieRecord<T>> preppedRecords,  Option<BulkInsertPartitioner> bulkInsertPartitioner);\n \n+  /**\n+   * Logically delete all existing records and Insert a batch of new records into Hoodie table at the supplied instantTime.\n+   */\n+  public abstract HoodieWriteMetadata insertOverwrite(JavaSparkContext jsc, String instantTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NDIxNQ==", "bodyText": "On second thoughts, I am okay leaving this as-is for now as well. and reeval when acutally implementing clustering", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487564215", "createdAt": "2020-09-13T18:56:05Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "diffHunk": "@@ -213,6 +213,12 @@ public abstract HoodieWriteMetadata insertPrepped(JavaSparkContext jsc, String i\n   public abstract HoodieWriteMetadata bulkInsertPrepped(JavaSparkContext jsc, String instantTime,\n       JavaRDD<HoodieRecord<T>> preppedRecords,  Option<BulkInsertPartitioner> bulkInsertPartitioner);\n \n+  /**\n+   * Logically delete all existing records and Insert a batch of new records into Hoodie table at the supplied instantTime.\n+   */\n+  public abstract HoodieWriteMetadata insertOverwrite(JavaSparkContext jsc, String instantTime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MzE5NA=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE0NTkxOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTozMDoyOVrOHQ9SFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTozMDoyOVrOHQ9SFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0MzMxNw==", "bodyText": "rename: deleteReplacedFileGroups() , to be consistent with our terminology", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487543317", "createdAt": "2020-09-13T15:30:29Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE1ODQyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTo0NToxMlrOHQ9YLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODoxMzo0OVrOHTvX-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NDg3Ng==", "bodyText": "you probably dont want to fetch the fs object each time? Also lets delete in parallel, from the get go?  we will invariably need to do this, much like parallelizing cleaning.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487544876", "createdAt": "2020-09-13T15:45:12Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {\n+      fg.getAllRawFileSlices().forEach(fileSlice -> {\n+        fileSlice.getBaseFile().map(baseFile -> deletePath(baseFile.getFileStatus().getPath(), instant));\n+        fileSlice.getLogFiles().forEach(logFile -> deletePath(logFile.getPath(), instant));\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Because we are creating new 'HoodieTable' and FileSystemView objects in this class constructor,\n+   * partition view may not be loaded correctly.\n+   * Reload all partitions modified by REPLACE action\n+   *\n+   * TODO find a better way to pass the FileSystemView to this class.\n+   */\n+  private void ensureReplacedPartitionsLoadedCorrectly(HoodieInstant instant, TableFileSystemView fileSystemView) {\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {\n+      try {\n+        HoodieReplaceCommitMetadata metadata = HoodieReplaceCommitMetadata.fromBytes(\n+            metaClient.getActiveTimeline().getInstantDetails(replaceInstant).get(),\n+            HoodieReplaceCommitMetadata.class);\n+\n+        metadata.getPartitionToReplaceStats().keySet().forEach(partition -> fileSystemView.getAllFileGroups(partition));\n+      } catch (IOException e) {\n+        throw new HoodieCommitException(\"Failed to archive because cannot delete replace files\", e);\n+      }\n+    });\n+  }\n+\n+  private boolean deletePath(Path path, HoodieInstant instant) {\n+    try {\n+      LOG.info(\"Deleting \" + path + \" before archiving \" + instant);\n+      metaClient.getFs().delete(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODE4MA==", "bodyText": "metaclient.getFs() seems to be following singleton pattern, so it doesnt seem expensive to get this. am i reading it incorrectly?\nI can work to setup parallel deletes", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488208180", "createdAt": "2020-09-14T20:43:06Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {\n+      fg.getAllRawFileSlices().forEach(fileSlice -> {\n+        fileSlice.getBaseFile().map(baseFile -> deletePath(baseFile.getFileStatus().getPath(), instant));\n+        fileSlice.getLogFiles().forEach(logFile -> deletePath(logFile.getPath(), instant));\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Because we are creating new 'HoodieTable' and FileSystemView objects in this class constructor,\n+   * partition view may not be loaded correctly.\n+   * Reload all partitions modified by REPLACE action\n+   *\n+   * TODO find a better way to pass the FileSystemView to this class.\n+   */\n+  private void ensureReplacedPartitionsLoadedCorrectly(HoodieInstant instant, TableFileSystemView fileSystemView) {\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {\n+      try {\n+        HoodieReplaceCommitMetadata metadata = HoodieReplaceCommitMetadata.fromBytes(\n+            metaClient.getActiveTimeline().getInstantDetails(replaceInstant).get(),\n+            HoodieReplaceCommitMetadata.class);\n+\n+        metadata.getPartitionToReplaceStats().keySet().forEach(partition -> fileSystemView.getAllFileGroups(partition));\n+      } catch (IOException e) {\n+        throw new HoodieCommitException(\"Failed to archive because cannot delete replace files\", e);\n+      }\n+    });\n+  }\n+\n+  private boolean deletePath(Path path, HoodieInstant instant) {\n+    try {\n+      LOG.info(\"Deleting \" + path + \" before archiving \" + instant);\n+      metaClient.getFs().delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NDg3Ng=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk5MDc5OQ==", "bodyText": "for parallel deletes, JavaSparkContext is not exposed to Archive process. Since we anyway want to move this to be part of clean, is it ok if  I defer this to https://issues.apache.org/jira/browse/HUDI-1276?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488990799", "createdAt": "2020-09-15T21:40:01Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {\n+      fg.getAllRawFileSlices().forEach(fileSlice -> {\n+        fileSlice.getBaseFile().map(baseFile -> deletePath(baseFile.getFileStatus().getPath(), instant));\n+        fileSlice.getLogFiles().forEach(logFile -> deletePath(logFile.getPath(), instant));\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Because we are creating new 'HoodieTable' and FileSystemView objects in this class constructor,\n+   * partition view may not be loaded correctly.\n+   * Reload all partitions modified by REPLACE action\n+   *\n+   * TODO find a better way to pass the FileSystemView to this class.\n+   */\n+  private void ensureReplacedPartitionsLoadedCorrectly(HoodieInstant instant, TableFileSystemView fileSystemView) {\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {\n+      try {\n+        HoodieReplaceCommitMetadata metadata = HoodieReplaceCommitMetadata.fromBytes(\n+            metaClient.getActiveTimeline().getInstantDetails(replaceInstant).get(),\n+            HoodieReplaceCommitMetadata.class);\n+\n+        metadata.getPartitionToReplaceStats().keySet().forEach(partition -> fileSystemView.getAllFileGroups(partition));\n+      } catch (IOException e) {\n+        throw new HoodieCommitException(\"Failed to archive because cannot delete replace files\", e);\n+      }\n+    });\n+  }\n+\n+  private boolean deletePath(Path path, HoodieInstant instant) {\n+    try {\n+      LOG.info(\"Deleting \" + path + \" before archiving \" + instant);\n+      metaClient.getFs().delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NDg3Ng=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0Nzk4Nw==", "bodyText": "This could become a performance issue when we are deleting lot of replaced files. HoodieTimelineArchiveLog.archive() method is taking JavaSparkContext. right ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489247987", "createdAt": "2020-09-16T08:12:37Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {\n+      fg.getAllRawFileSlices().forEach(fileSlice -> {\n+        fileSlice.getBaseFile().map(baseFile -> deletePath(baseFile.getFileStatus().getPath(), instant));\n+        fileSlice.getLogFiles().forEach(logFile -> deletePath(logFile.getPath(), instant));\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Because we are creating new 'HoodieTable' and FileSystemView objects in this class constructor,\n+   * partition view may not be loaded correctly.\n+   * Reload all partitions modified by REPLACE action\n+   *\n+   * TODO find a better way to pass the FileSystemView to this class.\n+   */\n+  private void ensureReplacedPartitionsLoadedCorrectly(HoodieInstant instant, TableFileSystemView fileSystemView) {\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {\n+      try {\n+        HoodieReplaceCommitMetadata metadata = HoodieReplaceCommitMetadata.fromBytes(\n+            metaClient.getActiveTimeline().getInstantDetails(replaceInstant).get(),\n+            HoodieReplaceCommitMetadata.class);\n+\n+        metadata.getPartitionToReplaceStats().keySet().forEach(partition -> fileSystemView.getAllFileGroups(partition));\n+      } catch (IOException e) {\n+        throw new HoodieCommitException(\"Failed to archive because cannot delete replace files\", e);\n+      }\n+    });\n+  }\n+\n+  private boolean deletePath(Path path, HoodieInstant instant) {\n+    try {\n+      LOG.info(\"Deleting \" + path + \" before archiving \" + instant);\n+      metaClient.getFs().delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NDg3Ng=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2MTE3OA==", "bodyText": "i missed that we already have JavaSparkContext. Implemented parallel clean up. PTAL", "url": "https://github.com/apache/hudi/pull/2048#discussion_r490461178", "createdAt": "2020-09-17T18:13:49Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {\n+      fg.getAllRawFileSlices().forEach(fileSlice -> {\n+        fileSlice.getBaseFile().map(baseFile -> deletePath(baseFile.getFileStatus().getPath(), instant));\n+        fileSlice.getLogFiles().forEach(logFile -> deletePath(logFile.getPath(), instant));\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Because we are creating new 'HoodieTable' and FileSystemView objects in this class constructor,\n+   * partition view may not be loaded correctly.\n+   * Reload all partitions modified by REPLACE action\n+   *\n+   * TODO find a better way to pass the FileSystemView to this class.\n+   */\n+  private void ensureReplacedPartitionsLoadedCorrectly(HoodieInstant instant, TableFileSystemView fileSystemView) {\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {\n+      try {\n+        HoodieReplaceCommitMetadata metadata = HoodieReplaceCommitMetadata.fromBytes(\n+            metaClient.getActiveTimeline().getInstantDetails(replaceInstant).get(),\n+            HoodieReplaceCommitMetadata.class);\n+\n+        metadata.getPartitionToReplaceStats().keySet().forEach(partition -> fileSystemView.getAllFileGroups(partition));\n+      } catch (IOException e) {\n+        throw new HoodieCommitException(\"Failed to archive because cannot delete replace files\", e);\n+      }\n+    });\n+  }\n+\n+  private boolean deletePath(Path path, HoodieInstant instant) {\n+    try {\n+      LOG.info(\"Deleting \" + path + \" before archiving \" + instant);\n+      metaClient.getFs().delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NDg3Ng=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE1OTU0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTo0Njo0NFrOHQ9Yvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0MTo1MVrOHTwUkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NTAyMg==", "bodyText": "we need to do the deletion in parallel.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487545022", "createdAt": "2020-09-13T15:46:44Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NjY2Nw==", "bodyText": "+1", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489246667", "createdAt": "2020-09-16T08:10:24Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NTAyMg=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NjY4OA==", "bodyText": "Implemented parallel execution. PTAL", "url": "https://github.com/apache/hudi/pull/2048#discussion_r490476688", "createdAt": "2020-09-17T18:41:51Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NTAyMg=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE2MDMyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTo0Nzo0N1rOHQ9ZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODoxNDowNVrOHTvYkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NTExNQ==", "bodyText": "probably a check that this is a replace instant as well?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487545115", "createdAt": "2020-09-13T15:47:47Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODYzNw==", "bodyText": "correct. will add it.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488208637", "createdAt": "2020-09-14T20:44:02Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NTExNQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2MTMzMQ==", "bodyText": "Implemented parallel deletion. PTAL.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r490461331", "createdAt": "2020-09-17T18:14:05Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NTExNQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE4MDA4OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjoxMDozOVrOHQ9icQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo0Mzo1M1rOHRl4uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NzUwNQ==", "bodyText": "This seems like a check for whether the instant is a replacecommit or not. if the instant time is a completed instant and replacecommit type, then we must find the instant here, right?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487547505", "createdAt": "2020-09-13T16:10:39Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {\n+      fg.getAllRawFileSlices().forEach(fileSlice -> {\n+        fileSlice.getBaseFile().map(baseFile -> deletePath(baseFile.getFileStatus().getPath(), instant));\n+        fileSlice.getLogFiles().forEach(logFile -> deletePath(logFile.getPath(), instant));\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Because we are creating new 'HoodieTable' and FileSystemView objects in this class constructor,\n+   * partition view may not be loaded correctly.\n+   * Reload all partitions modified by REPLACE action\n+   *\n+   * TODO find a better way to pass the FileSystemView to this class.\n+   */\n+  private void ensureReplacedPartitionsLoadedCorrectly(HoodieInstant instant, TableFileSystemView fileSystemView) {\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODU3MQ==", "bodyText": "correct, i'll restructure this code", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488208571", "createdAt": "2020-09-14T20:43:53Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView\n+        .getReplacedFileGroupsBeforeOrOn(instant.getTimestamp());\n+\n+    fileGroupsToDelete.forEach(fg -> {\n+      fg.getAllRawFileSlices().forEach(fileSlice -> {\n+        fileSlice.getBaseFile().map(baseFile -> deletePath(baseFile.getFileStatus().getPath(), instant));\n+        fileSlice.getLogFiles().forEach(logFile -> deletePath(logFile.getPath(), instant));\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Because we are creating new 'HoodieTable' and FileSystemView objects in this class constructor,\n+   * partition view may not be loaded correctly.\n+   * Reload all partitions modified by REPLACE action\n+   *\n+   * TODO find a better way to pass the FileSystemView to this class.\n+   */\n+  private void ensureReplacedPartitionsLoadedCorrectly(HoodieInstant instant, TableFileSystemView fileSystemView) {\n+    Option<HoodieInstant> replaceInstantOption = metaClient.getActiveTimeline().getCompletedAndReplaceTimeline()\n+        .filter(replaceInstant -> replaceInstant.getTimestamp().equals(instant.getTimestamp())).firstInstant();\n+\n+    replaceInstantOption.ifPresent(replaceInstant -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NzUwNQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE4MzgyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjoxNDo0MVrOHQ9kQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0NDo1OFrOHT5JnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ==", "bodyText": "Do we need to ask the file system view for all the replace file groups? this must be in the metadata already right? As long as we can get the HoodieFileGroup objects corresponding to the filegroup ids in the metadata, we can go ahead? What I am suggesting in an alternative and subjectively cleaner replacement for ensureReplaced... above, which seems to make a dummy read to warm up the datastuctures. I prefer to let that happen naturally on its own as opposed to having this \"special\" call", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487547971", "createdAt": "2020-09-13T16:14:41Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MjMxOA==", "bodyText": "As an after thought, I also realize that if we just encoded the entire file group being replaced into the metadata, (as opposed to just encoding the file ids), we can simply delete the file groups without any interaction with tableFileSytemView at all. Probably a simpler solution even?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487552318", "createdAt": "2020-09-13T16:57:57Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NDQwMw==", "bodyText": "One more consideration, as I went through the remainder of the PR. if there was an pending compaction for the replaced file group, then the file group metadata we encode may miss new base files produced as a result of the compaction. This scenario needs to be thought thru.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487564403", "createdAt": "2020-09-13T18:58:20Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNzI3OA==", "bodyText": "Yes, compaction is the primary reason I only recorded fileId in the replace metadata. When deleting, we can get all file paths (through view or by listing using consolidated metadata) that have same fileId and delete these files.\nThere can be race conditions that compaction might create a new file with replaced fileId after we queried for existing files though. But because FileSystemView#get methods do not include replaced file groups, I think this is unlikely to happen. I'm not sure if there are edge cases with long running compactions.\nPlease suggest any other improvements.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488207278", "createdAt": "2020-09-14T20:41:23Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NTc1MQ==", "bodyText": "Only commit instants older than oldest pending compaction is allowed to be archived. But, if we encode the entire file-group in the replace metadata, we will have race conditions with pending compactions. So, I guess it is safer to figure out the file-group during the time of archiving when it is guaranteed pending compaction is done.\nRegarding the requirement for ensureReplacedPartitionsLoadedCorrectly, If you look at pending compaction handling in filesystem-view, pending compactions are eagerly loaded whenever we construct the filesystem view. This seems to be the case also for replace metadata. Then, why do we need to trigger loading from outside ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489245751", "createdAt": "2020-09-16T08:08:57Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MTc0NQ==", "bodyText": "So, this is tricky to explain. In FileSystemView, only metadata seems to be eagerly loaded. file groups are not eagerly loaded. i.e., fetchAllStoredFileGroups() returns empty.  For replace instants, we need to get List for all replaced fileId. Because fetchAllStoredFileGroups() is empty, its also returning empty list of FileSlices. So we dont delete replaced files.\nI think instead of creating new HoodieTable in constructor. passing that from callers would help workaround this problem. But that is somewhat involved change because of test dependencies. Also, it might be better to refresh partition content in case new files are created by compaction or other process and somehow that is not reflected in table views. This might be safer option.\nLet me know if you want me to work on passing in HoodieTable to HoodieTimelineArchiveLog constructor.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r490491745", "createdAt": "2020-09-17T19:09:10Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4OTkwOA==", "bodyText": "@satishkotha Here is the plan as we discussed.\n\nChange the signature of fileSystemView.getReplacedFileGroupsBeforeOrOn to also take in partitionId\nIn HoodieTimelineArchiveLog.deleteReplacedFileGroups, read the replace metadata (which we are already doing) and for each partition, call fileSystemView.getReplacedFileGroupsBeforeOrOn().\n(2) must be done in such a way that we are calling the fileSystemView.getReplacedFileGroupsBeforeOrOn in parallel.\n\nThis should allow for lazy loading semantics to be retained at file-system view.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r490589908", "createdAt": "2020-09-17T22:09:46Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTM0MA==", "bodyText": "Done. PTAL.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r490621340", "createdAt": "2020-09-17T23:44:58Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -301,6 +304,61 @@ private void deleteAnyLeftOverMarkerFiles(JavaSparkContext jsc, HoodieInstant in\n     }\n   }\n \n+  private void deleteReplacedFiles(HoodieInstant instant) {\n+    if (!instant.isCompleted()) {\n+      // only delete files for completed instants\n+      return;\n+    }\n+\n+    TableFileSystemView fileSystemView = this.table.getFileSystemView();\n+    ensureReplacedPartitionsLoadedCorrectly(instant, fileSystemView);\n+\n+    Stream<HoodieFileGroup> fileGroupsToDelete = fileSystemView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0Nzk3MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE4NjMzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjoxNzoyNlrOHQ9leA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo0NjowMVrOHRl9FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0ODI4MA==", "bodyText": "you can just call startCommitWithTime(instantTime) from here?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487548280", "createdAt": "2020-09-13T16:17:26Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -576,7 +592,8 @@ public String startCommit() {\n       rollbackPendingCommits();\n     }\n     String instantTime = HoodieActiveTimeline.createNewInstantTime();\n-    startCommit(instantTime);\n+    HoodieTableMetaClient metaClient = createMetaClient(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwOTY4NQ==", "bodyText": "sure", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488209685", "createdAt": "2020-09-14T20:46:01Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -576,7 +592,8 @@ public String startCommit() {\n       rollbackPendingCommits();\n     }\n     String instantTime = HoodieActiveTimeline.createNewInstantTime();\n-    startCommit(instantTime);\n+    HoodieTableMetaClient metaClient = createMetaClient(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0ODI4MA=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE4Njg4OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjoxODoxN1rOHQ9lww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1MjozMVrOHRmJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0ODM1NQ==", "bodyText": "can we pass in the metaClient from caller. This seems to introduce additional creations, which all list .hoodie again", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487548355", "createdAt": "2020-09-13T16:18:17Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,15 +603,23 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, metaClient.getCommitActionType());\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  public void startCommitWithTime(String instantTime, String actionType) {\n     // NOTE : Need to ensure that rollback is done before a new commit is started\n     if (rollbackPending) {\n       // Only rollback inflight commit/delta-commits. Do not touch compaction commits\n       rollbackPendingCommits();\n     }\n-    startCommit(instantTime);\n+    startCommit(instantTime, actionType);\n   }\n \n-  private void startCommit(String instantTime) {\n+  private void startCommit(String instantTime, String actionType) {\n     LOG.info(\"Generate a new instant time \" + instantTime);\n     HoodieTableMetaClient metaClient = createMetaClient(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMjkyOA==", "bodyText": "Good point. Will do.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488212928", "createdAt": "2020-09-14T20:52:31Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,15 +603,23 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, metaClient.getCommitActionType());\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  public void startCommitWithTime(String instantTime, String actionType) {\n     // NOTE : Need to ensure that rollback is done before a new commit is started\n     if (rollbackPending) {\n       // Only rollback inflight commit/delta-commits. Do not touch compaction commits\n       rollbackPendingCommits();\n     }\n-    startCommit(instantTime);\n+    startCommit(instantTime, actionType);\n   }\n \n-  private void startCommit(String instantTime) {\n+  private void startCommit(String instantTime, String actionType) {\n     LOG.info(\"Generate a new instant time \" + instantTime);\n     HoodieTableMetaClient metaClient = createMetaClient(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0ODM1NQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE5ODM3OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/HoodieWriteMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjozMjoxMlrOHQ9rTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1ODowOVrOHRmVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0OTc3Mw==", "bodyText": "typo: getReplaceStats", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487549773", "createdAt": "2020-09-13T16:32:12Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/HoodieWriteMetadata.java", "diffHunk": "@@ -94,6 +94,14 @@ public void setWriteStats(List<HoodieWriteStat> writeStats) {\n     this.writeStats = Option.of(writeStats);\n   }\n \n+  public Option<List<HoodieWriteStat>> getReplacetats() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxNTgzNA==", "bodyText": "This is not needed anymore given we are tracking replaced files as boolean in WriteStatus. I removed this.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488215834", "createdAt": "2020-09-14T20:58:09Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/HoodieWriteMetadata.java", "diffHunk": "@@ -94,6 +94,14 @@ public void setWriteStats(List<HoodieWriteStat> writeStats) {\n     this.writeStats = Option.of(writeStats);\n   }\n \n+  public Option<List<HoodieWriteStat>> getReplacetats() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0OTc3Mw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIxMTgxOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo0OTozNlrOHQ9x6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1ODo1NlrOHRmWhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MTQ2Nw==", "bodyText": "why limit to just base files. we may have log files without base files. i.e insert to log files code path", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487551467", "createdAt": "2020-09-13T16:49:36Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.action.HoodieWriteMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.Partitioner;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+public class InsertOverwriteCommitActionExecutor<T extends HoodieRecordPayload<T>>\n+    extends CommitActionExecutor<T> {\n+\n+  private static final Logger LOG = LogManager.getLogger(InsertOverwriteCommitActionExecutor.class);\n+\n+  private final JavaRDD<HoodieRecord<T>> inputRecordsRDD;\n+\n+  public InsertOverwriteCommitActionExecutor(JavaSparkContext jsc,\n+                                             HoodieWriteConfig config, HoodieTable table,\n+                                             String instantTime, JavaRDD<HoodieRecord<T>> inputRecordsRDD) {\n+    super(jsc, config, table, instantTime, WriteOperationType.INSERT_OVERWRITE);\n+    this.inputRecordsRDD = inputRecordsRDD;\n+  }\n+\n+  @Override\n+  public HoodieWriteMetadata execute() {\n+    return WriteHelper.write(instantTime, inputRecordsRDD, jsc, (HoodieTable<T>) table,\n+        config.shouldCombineBeforeInsert(), config.getInsertShuffleParallelism(), this, false);\n+  }\n+\n+  @Override\n+  protected Partitioner getPartitioner(WorkloadProfile profile) {\n+    return new InsertOverwritePartitioner<>(profile, jsc, table, config);\n+  }\n+\n+  @Override\n+  protected String getCommitActionType() {\n+    return HoodieTimeline.REPLACE_COMMIT_ACTION;\n+  }\n+\n+  @Override\n+  protected JavaRDD<WriteStatus> processInputRecords(JavaRDD<HoodieRecord<T>> inputRecordsRDD, WorkloadProfile profile) {\n+    // get all existing fileIds to mark them as replaced\n+    JavaRDD<WriteStatus> replaceStatuses = getAllReplaceWriteStatus(profile);\n+    // do necessary inserts into new file groups\n+    JavaRDD<WriteStatus> writeStatuses = super.processInputRecords(inputRecordsRDD, profile);\n+    return writeStatuses.union(replaceStatuses);\n+  }\n+\n+  private JavaRDD<WriteStatus> getAllReplaceWriteStatus(WorkloadProfile profile) {\n+    JavaRDD<String> partitions = jsc.parallelize(new ArrayList<>(profile.getPartitionPaths()));\n+    JavaRDD<WriteStatus> replaceStatuses = partitions.flatMap(partition ->\n+        getAllExistingFileIds(partition).map(fileId -> getReplaceWriteStatus(partition, fileId)).iterator());\n+\n+    return replaceStatuses;\n+  }\n+\n+  private Stream<String> getAllExistingFileIds(String partitionPath) {\n+    // because new commit is not complete. it is safe to mark all base files as old files\n+    return table.getBaseFileOnlyView().getAllBaseFiles(partitionPath).map(baseFile -> baseFile.getFileId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxNjE5OQ==", "bodyText": "My bad, missed that insert into log files case. I fixed it now. thanks for finding this bug.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488216199", "createdAt": "2020-09-14T20:58:56Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.action.HoodieWriteMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.Partitioner;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+public class InsertOverwriteCommitActionExecutor<T extends HoodieRecordPayload<T>>\n+    extends CommitActionExecutor<T> {\n+\n+  private static final Logger LOG = LogManager.getLogger(InsertOverwriteCommitActionExecutor.class);\n+\n+  private final JavaRDD<HoodieRecord<T>> inputRecordsRDD;\n+\n+  public InsertOverwriteCommitActionExecutor(JavaSparkContext jsc,\n+                                             HoodieWriteConfig config, HoodieTable table,\n+                                             String instantTime, JavaRDD<HoodieRecord<T>> inputRecordsRDD) {\n+    super(jsc, config, table, instantTime, WriteOperationType.INSERT_OVERWRITE);\n+    this.inputRecordsRDD = inputRecordsRDD;\n+  }\n+\n+  @Override\n+  public HoodieWriteMetadata execute() {\n+    return WriteHelper.write(instantTime, inputRecordsRDD, jsc, (HoodieTable<T>) table,\n+        config.shouldCombineBeforeInsert(), config.getInsertShuffleParallelism(), this, false);\n+  }\n+\n+  @Override\n+  protected Partitioner getPartitioner(WorkloadProfile profile) {\n+    return new InsertOverwritePartitioner<>(profile, jsc, table, config);\n+  }\n+\n+  @Override\n+  protected String getCommitActionType() {\n+    return HoodieTimeline.REPLACE_COMMIT_ACTION;\n+  }\n+\n+  @Override\n+  protected JavaRDD<WriteStatus> processInputRecords(JavaRDD<HoodieRecord<T>> inputRecordsRDD, WorkloadProfile profile) {\n+    // get all existing fileIds to mark them as replaced\n+    JavaRDD<WriteStatus> replaceStatuses = getAllReplaceWriteStatus(profile);\n+    // do necessary inserts into new file groups\n+    JavaRDD<WriteStatus> writeStatuses = super.processInputRecords(inputRecordsRDD, profile);\n+    return writeStatuses.union(replaceStatuses);\n+  }\n+\n+  private JavaRDD<WriteStatus> getAllReplaceWriteStatus(WorkloadProfile profile) {\n+    JavaRDD<String> partitions = jsc.parallelize(new ArrayList<>(profile.getPartitionPaths()));\n+    JavaRDD<WriteStatus> replaceStatuses = partitions.flatMap(partition ->\n+        getAllExistingFileIds(partition).map(fileId -> getReplaceWriteStatus(partition, fileId)).iterator());\n+\n+    return replaceStatuses;\n+  }\n+\n+  private Stream<String> getAllExistingFileIds(String partitionPath) {\n+    // because new commit is not complete. it is safe to mark all base files as old files\n+    return table.getBaseFileOnlyView().getAllBaseFiles(partitionPath).map(baseFile -> baseFile.getFileId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MTQ2Nw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIxMzQzOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo1MTozOVrOHQ9ywA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo1MTozOVrOHQ9ywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MTY4MA==", "bodyText": "Seeing such large values in the metadata can be bit confusing. can we set it to -1 instead for now", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487551680", "createdAt": "2020-09-13T16:51:39Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.action.HoodieWriteMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.Partitioner;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+public class InsertOverwriteCommitActionExecutor<T extends HoodieRecordPayload<T>>\n+    extends CommitActionExecutor<T> {\n+\n+  private static final Logger LOG = LogManager.getLogger(InsertOverwriteCommitActionExecutor.class);\n+\n+  private final JavaRDD<HoodieRecord<T>> inputRecordsRDD;\n+\n+  public InsertOverwriteCommitActionExecutor(JavaSparkContext jsc,\n+                                             HoodieWriteConfig config, HoodieTable table,\n+                                             String instantTime, JavaRDD<HoodieRecord<T>> inputRecordsRDD) {\n+    super(jsc, config, table, instantTime, WriteOperationType.INSERT_OVERWRITE);\n+    this.inputRecordsRDD = inputRecordsRDD;\n+  }\n+\n+  @Override\n+  public HoodieWriteMetadata execute() {\n+    return WriteHelper.write(instantTime, inputRecordsRDD, jsc, (HoodieTable<T>) table,\n+        config.shouldCombineBeforeInsert(), config.getInsertShuffleParallelism(), this, false);\n+  }\n+\n+  @Override\n+  protected Partitioner getPartitioner(WorkloadProfile profile) {\n+    return new InsertOverwritePartitioner<>(profile, jsc, table, config);\n+  }\n+\n+  @Override\n+  protected String getCommitActionType() {\n+    return HoodieTimeline.REPLACE_COMMIT_ACTION;\n+  }\n+\n+  @Override\n+  protected JavaRDD<WriteStatus> processInputRecords(JavaRDD<HoodieRecord<T>> inputRecordsRDD, WorkloadProfile profile) {\n+    // get all existing fileIds to mark them as replaced\n+    JavaRDD<WriteStatus> replaceStatuses = getAllReplaceWriteStatus(profile);\n+    // do necessary inserts into new file groups\n+    JavaRDD<WriteStatus> writeStatuses = super.processInputRecords(inputRecordsRDD, profile);\n+    return writeStatuses.union(replaceStatuses);\n+  }\n+\n+  private JavaRDD<WriteStatus> getAllReplaceWriteStatus(WorkloadProfile profile) {\n+    JavaRDD<String> partitions = jsc.parallelize(new ArrayList<>(profile.getPartitionPaths()));\n+    JavaRDD<WriteStatus> replaceStatuses = partitions.flatMap(partition ->\n+        getAllExistingFileIds(partition).map(fileId -> getReplaceWriteStatus(partition, fileId)).iterator());\n+\n+    return replaceStatuses;\n+  }\n+\n+  private Stream<String> getAllExistingFileIds(String partitionPath) {\n+    // because new commit is not complete. it is safe to mark all base files as old files\n+    return table.getBaseFileOnlyView().getAllBaseFiles(partitionPath).map(baseFile -> baseFile.getFileId());\n+  }\n+\n+  private WriteStatus getReplaceWriteStatus(String partitionPath, String fileId) {\n+    // mark file as 'replaced' in metadata. the actual file will be removed later by cleaner to provide snapshot isolation\n+    WriteStatus status = new WriteStatus(false, 0.0);\n+    status.setReplacedFileId(true);\n+    status.setFileId(fileId);\n+    status.setTotalErrorRecords(0);\n+    status.setPartitionPath(partitionPath);\n+    HoodieWriteStat replaceStat = new HoodieWriteStat();\n+    status.setStat(replaceStat);\n+    replaceStat.setPartitionPath(partitionPath);\n+    replaceStat.setFileId(fileId);\n+    replaceStat.setPath(table.getBaseFileOnlyView().getLatestBaseFile(partitionPath, fileId).get().getPath());\n+    status.getStat().setNumDeletes(Integer.MAX_VALUE);//token to indicate all rows are deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIxNzE4OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo1NjoxOFrOHQ90qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMTozNjo0NVrOHSVdIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MjE3MA==", "bodyText": "So, this creates a dependency on the workloadProfile for doing insert overwrite. While we always provide a WorkloadProfile for now, in the future we would like to remove this need for caching data in memory and building the profile.\nCan we try to reimplement this such that\n\nprocessInputRecords(..) just writes the new records and returns WriteStatus for the new file groups alone.\nDuring commit time, after we collect the WriteStatus, we can obtain the replaceStatuses based on the partitions that were actually written to during step above.\n\nThis also gives us a cleaner solution for avoiding the boolean flag we discussed. API is also consistent now, that writeClient.insertOverwrite() only returns the WriteStatus for the new file group IDs.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487552170", "createdAt": "2020-09-13T16:56:18Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.action.HoodieWriteMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.Partitioner;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+public class InsertOverwriteCommitActionExecutor<T extends HoodieRecordPayload<T>>\n+    extends CommitActionExecutor<T> {\n+\n+  private static final Logger LOG = LogManager.getLogger(InsertOverwriteCommitActionExecutor.class);\n+\n+  private final JavaRDD<HoodieRecord<T>> inputRecordsRDD;\n+\n+  public InsertOverwriteCommitActionExecutor(JavaSparkContext jsc,\n+                                             HoodieWriteConfig config, HoodieTable table,\n+                                             String instantTime, JavaRDD<HoodieRecord<T>> inputRecordsRDD) {\n+    super(jsc, config, table, instantTime, WriteOperationType.INSERT_OVERWRITE);\n+    this.inputRecordsRDD = inputRecordsRDD;\n+  }\n+\n+  @Override\n+  public HoodieWriteMetadata execute() {\n+    return WriteHelper.write(instantTime, inputRecordsRDD, jsc, (HoodieTable<T>) table,\n+        config.shouldCombineBeforeInsert(), config.getInsertShuffleParallelism(), this, false);\n+  }\n+\n+  @Override\n+  protected Partitioner getPartitioner(WorkloadProfile profile) {\n+    return new InsertOverwritePartitioner<>(profile, jsc, table, config);\n+  }\n+\n+  @Override\n+  protected String getCommitActionType() {\n+    return HoodieTimeline.REPLACE_COMMIT_ACTION;\n+  }\n+\n+  @Override\n+  protected JavaRDD<WriteStatus> processInputRecords(JavaRDD<HoodieRecord<T>> inputRecordsRDD, WorkloadProfile profile) {\n+    // get all existing fileIds to mark them as replaced\n+    JavaRDD<WriteStatus> replaceStatuses = getAllReplaceWriteStatus(profile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4NzkzNw==", "bodyText": "I refactored it and removed boolean from WriteStatus. PTAL", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488987937", "createdAt": "2020-09-15T21:36:45Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/action/commit/InsertOverwriteCommitActionExecutor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.action.commit;\n+\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieRecordPayload;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.WorkloadProfile;\n+import org.apache.hudi.table.action.HoodieWriteMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.Partitioner;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+public class InsertOverwriteCommitActionExecutor<T extends HoodieRecordPayload<T>>\n+    extends CommitActionExecutor<T> {\n+\n+  private static final Logger LOG = LogManager.getLogger(InsertOverwriteCommitActionExecutor.class);\n+\n+  private final JavaRDD<HoodieRecord<T>> inputRecordsRDD;\n+\n+  public InsertOverwriteCommitActionExecutor(JavaSparkContext jsc,\n+                                             HoodieWriteConfig config, HoodieTable table,\n+                                             String instantTime, JavaRDD<HoodieRecord<T>> inputRecordsRDD) {\n+    super(jsc, config, table, instantTime, WriteOperationType.INSERT_OVERWRITE);\n+    this.inputRecordsRDD = inputRecordsRDD;\n+  }\n+\n+  @Override\n+  public HoodieWriteMetadata execute() {\n+    return WriteHelper.write(instantTime, inputRecordsRDD, jsc, (HoodieTable<T>) table,\n+        config.shouldCombineBeforeInsert(), config.getInsertShuffleParallelism(), this, false);\n+  }\n+\n+  @Override\n+  protected Partitioner getPartitioner(WorkloadProfile profile) {\n+    return new InsertOverwritePartitioner<>(profile, jsc, table, config);\n+  }\n+\n+  @Override\n+  protected String getCommitActionType() {\n+    return HoodieTimeline.REPLACE_COMMIT_ACTION;\n+  }\n+\n+  @Override\n+  protected JavaRDD<WriteStatus> processInputRecords(JavaRDD<HoodieRecord<T>> inputRecordsRDD, WorkloadProfile profile) {\n+    // get all existing fileIds to mark them as replaced\n+    JavaRDD<WriteStatus> replaceStatuses = getAllReplaceWriteStatus(profile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MjE3MA=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIyMDY5OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzowMDo1OVrOHQ92YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjozMzozNVrOHRuSLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MjYwOA==", "bodyText": "please keep test/naming to base and log files. and not leak parquet to the test? Also can you please see if this test can be authored by reusing existing helpers. Its often bit hard to read and reuse the exisiting helpers, but hte more one-offs we introduce, the worse this situation becomes.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487552608", "createdAt": "2020-09-13T17:00:59Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "diffHunk": "@@ -880,6 +880,89 @@ public void testDeletesWithDeleteApi() throws Exception {\n     testDeletes(client, updateBatch3.getRight(), 10, file1, \"007\", 140, keysSoFar);\n   }\n \n+  /**\n+   * Test scenario of writing more file groups than existing number of file groups in partition.\n+   */\n+  @Test\n+  public void testInsertOverwritePartitionHandlingWithMoreRecords() throws Exception {\n+    verifyInsertOverwritePartitionHandling(1000, 3000);\n+  }\n+\n+  /**\n+   * Test scenario of writing fewer file groups than existing number of file groups in partition.\n+   */\n+  @Test\n+  public void testInsertOverwritePartitionHandlingWithFewerRecords() throws Exception {\n+    verifyInsertOverwritePartitionHandling(3000, 1000);\n+  }\n+\n+  /**\n+   * Test scenario of writing similar number file groups in partition.\n+   */\n+  @Test\n+  public void testInsertOverwritePartitionHandlinWithSimilarNumberOfRecords() throws Exception {\n+    verifyInsertOverwritePartitionHandling(3000, 3000);\n+  }\n+\n+  /**\n+   *  1) Do write1 (upsert) with 'batch1RecordsCount' number of records.\n+   *  2) Do write2 (insert overwrite) with 'batch2RecordsCount' number of records.\n+   *\n+   *  Verify that all records in step1 are overwritten\n+   */\n+  private void verifyInsertOverwritePartitionHandling(int batch1RecordsCount, int batch2RecordsCount) throws Exception {\n+    final String testPartitionPath = \"americas\";\n+    HoodieWriteConfig config = getSmallInsertWriteConfig(2000);\n+    HoodieWriteClient client = getHoodieWriteClient(config, false);\n+    dataGen = new HoodieTestDataGenerator(new String[] {testPartitionPath});\n+\n+    // Do Inserts\n+    String commitTime1 = \"001\";\n+    client.startCommitWithTime(commitTime1);\n+    List<HoodieRecord> inserts1 = dataGen.generateInserts(commitTime1, batch1RecordsCount);\n+    JavaRDD<HoodieRecord> insertRecordsRDD1 = jsc.parallelize(inserts1, 2);\n+    List<WriteStatus> statuses = client.upsert(insertRecordsRDD1, commitTime1).collect();\n+    assertNoWriteErrors(statuses);\n+    Set<String> batch1Buckets = statuses.stream().map(s -> s.getFileId()).collect(Collectors.toSet());\n+    verifyParquetFileData(commitTime1, inserts1, statuses);\n+\n+    // Do Insert Overwrite\n+    String commitTime2 = \"002\";\n+    client.startCommitWithTime(commitTime2, HoodieTimeline.REPLACE_COMMIT_ACTION);\n+    List<HoodieRecord> inserts2 = dataGen.generateInserts(commitTime2, batch2RecordsCount);\n+    List<HoodieRecord> insertsAndUpdates2 = new ArrayList<>();\n+    insertsAndUpdates2.addAll(inserts2);\n+    JavaRDD<HoodieRecord> insertAndUpdatesRDD2 = jsc.parallelize(insertsAndUpdates2, 2);\n+    statuses = client.insertOverwrite(insertAndUpdatesRDD2, commitTime2).collect();\n+    assertNoWriteErrors(statuses);\n+    Set<String> replacedBuckets = statuses.stream().filter(s -> s.isReplacedFileId())\n+        .map(s -> s.getFileId()).collect(Collectors.toSet());\n+    assertEquals(batch1Buckets, replacedBuckets);\n+    List<WriteStatus> newBuckets = statuses.stream().filter(s -> !(s.isReplacedFileId()))\n+        .collect(Collectors.toList());\n+    verifyParquetFileData(commitTime2, inserts2, newBuckets);\n+  }\n+\n+  /**\n+   * Verify data in parquet files matches expected records and commit time.\n+   */\n+  private void verifyParquetFileData(String commitTime, List<HoodieRecord> expectedRecords, List<WriteStatus> allStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjE1Ng==", "bodyText": "renamed it for now. I'll look into if there are any other helpers for doing this.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488346156", "createdAt": "2020-09-15T02:33:35Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "diffHunk": "@@ -880,6 +880,89 @@ public void testDeletesWithDeleteApi() throws Exception {\n     testDeletes(client, updateBatch3.getRight(), 10, file1, \"007\", 140, keysSoFar);\n   }\n \n+  /**\n+   * Test scenario of writing more file groups than existing number of file groups in partition.\n+   */\n+  @Test\n+  public void testInsertOverwritePartitionHandlingWithMoreRecords() throws Exception {\n+    verifyInsertOverwritePartitionHandling(1000, 3000);\n+  }\n+\n+  /**\n+   * Test scenario of writing fewer file groups than existing number of file groups in partition.\n+   */\n+  @Test\n+  public void testInsertOverwritePartitionHandlingWithFewerRecords() throws Exception {\n+    verifyInsertOverwritePartitionHandling(3000, 1000);\n+  }\n+\n+  /**\n+   * Test scenario of writing similar number file groups in partition.\n+   */\n+  @Test\n+  public void testInsertOverwritePartitionHandlinWithSimilarNumberOfRecords() throws Exception {\n+    verifyInsertOverwritePartitionHandling(3000, 3000);\n+  }\n+\n+  /**\n+   *  1) Do write1 (upsert) with 'batch1RecordsCount' number of records.\n+   *  2) Do write2 (insert overwrite) with 'batch2RecordsCount' number of records.\n+   *\n+   *  Verify that all records in step1 are overwritten\n+   */\n+  private void verifyInsertOverwritePartitionHandling(int batch1RecordsCount, int batch2RecordsCount) throws Exception {\n+    final String testPartitionPath = \"americas\";\n+    HoodieWriteConfig config = getSmallInsertWriteConfig(2000);\n+    HoodieWriteClient client = getHoodieWriteClient(config, false);\n+    dataGen = new HoodieTestDataGenerator(new String[] {testPartitionPath});\n+\n+    // Do Inserts\n+    String commitTime1 = \"001\";\n+    client.startCommitWithTime(commitTime1);\n+    List<HoodieRecord> inserts1 = dataGen.generateInserts(commitTime1, batch1RecordsCount);\n+    JavaRDD<HoodieRecord> insertRecordsRDD1 = jsc.parallelize(inserts1, 2);\n+    List<WriteStatus> statuses = client.upsert(insertRecordsRDD1, commitTime1).collect();\n+    assertNoWriteErrors(statuses);\n+    Set<String> batch1Buckets = statuses.stream().map(s -> s.getFileId()).collect(Collectors.toSet());\n+    verifyParquetFileData(commitTime1, inserts1, statuses);\n+\n+    // Do Insert Overwrite\n+    String commitTime2 = \"002\";\n+    client.startCommitWithTime(commitTime2, HoodieTimeline.REPLACE_COMMIT_ACTION);\n+    List<HoodieRecord> inserts2 = dataGen.generateInserts(commitTime2, batch2RecordsCount);\n+    List<HoodieRecord> insertsAndUpdates2 = new ArrayList<>();\n+    insertsAndUpdates2.addAll(inserts2);\n+    JavaRDD<HoodieRecord> insertAndUpdatesRDD2 = jsc.parallelize(insertsAndUpdates2, 2);\n+    statuses = client.insertOverwrite(insertAndUpdatesRDD2, commitTime2).collect();\n+    assertNoWriteErrors(statuses);\n+    Set<String> replacedBuckets = statuses.stream().filter(s -> s.isReplacedFileId())\n+        .map(s -> s.getFileId()).collect(Collectors.toSet());\n+    assertEquals(batch1Buckets, replacedBuckets);\n+    List<WriteStatus> newBuckets = statuses.stream().filter(s -> !(s.isReplacedFileId()))\n+        .collect(Collectors.toList());\n+    verifyParquetFileData(commitTime2, inserts2, newBuckets);\n+  }\n+\n+  /**\n+   * Verify data in parquet files matches expected records and commit time.\n+   */\n+  private void verifyParquetFileData(String commitTime, List<HoodieRecord> expectedRecords, List<WriteStatus> allStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MjYwOA=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIyMTM0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/WriteStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzowMTo1MVrOHQ92rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzowMTo1MVrOHQ92rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MjY4NQ==", "bodyText": "rename: isReplaced", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487552685", "createdAt": "2020-09-13T17:01:51Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/WriteStatus.java", "diffHunk": "@@ -52,6 +52,9 @@\n \n   private HoodieWriteStat stat = null;\n \n+  // if true, indicates the fileId in this WriteStatus is being replaced\n+  private boolean isReplacedFileId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIyMjA2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzowMzowN1rOHQ93DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzowMzowN1rOHQ93DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Mjc4MQ==", "bodyText": "now that replace also is replacecommit. should we just leave the getCommitsAndCompactionTimeline() be?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487552781", "createdAt": "2020-09-13T17:03:07Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -110,14 +116,16 @@ protected void init(HoodieTableMetaClient metaClient, HoodieTimeline visibleActi\n    * @param visibleActiveTimeline Visible Active Timeline\n    */\n   protected void refreshTimeline(HoodieTimeline visibleActiveTimeline) {\n-    this.visibleCommitsAndCompactionTimeline = visibleActiveTimeline.getCommitsAndCompactionTimeline();\n+    this.visibleCommitsAndCompactionTimeline = visibleActiveTimeline.getWriteActionTimeline();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIyMjQ0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzowMzozOVrOHQ93PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzowMzozOVrOHQ93PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MjgyOA==", "bodyText": "nit: remove extra line?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487552828", "createdAt": "2020-09-13T17:03:39Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -110,14 +116,16 @@ protected void init(HoodieTableMetaClient metaClient, HoodieTimeline visibleActi\n    * @param visibleActiveTimeline Visible Active Timeline\n    */\n   protected void refreshTimeline(HoodieTimeline visibleActiveTimeline) {\n-    this.visibleCommitsAndCompactionTimeline = visibleActiveTimeline.getCommitsAndCompactionTimeline();\n+    this.visibleCommitsAndCompactionTimeline = visibleActiveTimeline.getWriteActionTimeline();\n+    resetFileGroupsReplaced(visibleCommitsAndCompactionTimeline);\n   }\n \n   /**\n    * Adds the provided statuses into the file system view, and also caches it inside this object.\n    */\n   protected List<HoodieFileGroup> addFilesToView(FileStatus[] statuses) {\n     HoodieTimer timer = new HoodieTimer().startTimer();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI0MTY2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzoyNzowNVrOHQ-AQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzoyNzowNVrOHQ-AQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NTEzOQ==", "bodyText": "please use HoodieTimer to time code segments.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487555139", "createdAt": "2020-09-13T17:27:05Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -196,6 +205,32 @@ protected void refreshTimeline(HoodieTimeline visibleActiveTimeline) {\n     return fileGroups;\n   }\n \n+  /**\n+   * Get replaced instant for each file group by looking at all commit instants.\n+   */\n+  private void resetFileGroupsReplaced(HoodieTimeline timeline) {\n+    Instant indexStartTime = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI0OTgxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozNjozMVrOHQ-EIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozNjozMVrOHQ-EIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NjEzMA==", "bodyText": "I think its sufficient todo this reset in the init() method above, much like pendingCompaction and bootstreap handling. This method is simply used to refresh the timeline i.e the instants that are visible.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487556130", "createdAt": "2020-09-13T17:36:31Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -110,14 +116,16 @@ protected void init(HoodieTableMetaClient metaClient, HoodieTimeline visibleActi\n    * @param visibleActiveTimeline Visible Active Timeline\n    */\n   protected void refreshTimeline(HoodieTimeline visibleActiveTimeline) {\n-    this.visibleCommitsAndCompactionTimeline = visibleActiveTimeline.getCommitsAndCompactionTimeline();\n+    this.visibleCommitsAndCompactionTimeline = visibleActiveTimeline.getWriteActionTimeline();\n+    resetFileGroupsReplaced(visibleCommitsAndCompactionTimeline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1MzgyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0MTo1MVrOHQ-GEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0MTo1MVrOHQ-GEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NjYyNg==", "bodyText": "rename: getReplaceInstant()", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487556626", "createdAt": "2020-09-13T17:41:51Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -727,6 +775,21 @@ private String formatPartitionKey(String partitionStr) {\n    */\n   abstract Stream<HoodieFileGroup> fetchAllStoredFileGroups();\n \n+  /**\n+   * Track instant time for file groups replaced.\n+   */\n+  protected abstract void resetReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups);\n+\n+  /**\n+   * Track instant time for new file groups replaced.\n+   */\n+  protected abstract void addReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups);\n+\n+  /**\n+   * Track instant time for file groups replaced.\n+   */\n+  protected abstract Option<HoodieInstant> getReplacedInstant(final HoodieFileGroupId fileGroupId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1NTk5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0NDo0NFrOHQ-HIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0NDo0NFrOHQ-HIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Njg5OA==", "bodyText": "can you just call isFileGroupReplacedBeforeOrOn(fileGroup, max(instants)) ? without having to implement this again", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487556898", "createdAt": "2020-09-13T17:44:44Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -880,6 +957,30 @@ private FileSlice fetchMergedFileSlice(HoodieFileGroup fileGroup, FileSlice file\n         .fromJavaOptional(fetchLatestFileSlices(partitionPath).filter(fs -> fs.getFileId().equals(fileId)).findFirst());\n   }\n \n+  private boolean isFileGroupReplaced(HoodieFileGroup fileGroup) {\n+    Option<HoodieInstant> hoodieInstantOption = getReplacedInstant(fileGroup.getFileGroupId());\n+    return hoodieInstantOption.isPresent();\n+  }\n+\n+  private boolean isFileGroupReplacedBeforeAny(HoodieFileGroup fileGroup, List<String> instants) {\n+    Option<HoodieInstant> hoodieInstantOption = getReplacedInstant(fileGroup.getFileGroupId());\n+    if (!hoodieInstantOption.isPresent()) {\n+      return false;\n+    }\n+\n+    return HoodieTimeline.compareTimestamps(instants.stream().max(Comparator.naturalOrder()).get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1NzI4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/ActionType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0NTo0MFrOHQ-HuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjozMToxMlrOHRpj6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzA0OQ==", "bodyText": "deltacommit is not here. huh. file a \"code cleanup\" JIRA for later?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487557049", "createdAt": "2020-09-13T17:45:40Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/ActionType.java", "diffHunk": "@@ -22,5 +22,5 @@\n  * The supported action types.\n  */\n public enum ActionType {\n-  commit, savepoint, compaction, clean, rollback\n+  commit, savepoint, compaction, clean, rollback, replacecommit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI2ODc3Nw==", "bodyText": "Filed HUDI-1281", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488268777", "createdAt": "2020-09-14T22:31:12Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/ActionType.java", "diffHunk": "@@ -22,5 +22,5 @@\n  * The supported action types.\n  */\n public enum ActionType {\n-  commit, savepoint, compaction, clean, rollback\n+  commit, savepoint, compaction, clean, rollback, replacecommit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzA0OQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1ODQ5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/CommitUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0Njo1MlrOHQ-IRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoyMzo0M1rOHRuHQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzE5MA==", "bodyText": "please add a simple unit tests for this . testing for e.g that the schema is set, op type is set etc", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487557190", "createdAt": "2020-09-13T17:46:52Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/CommitUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.util;\n+\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieReplaceCommitMetadata;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to generate compaction plan from FileGroup/FileSlice abstraction.\n+ */\n+public class CommitUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(CommitUtils.class);\n+\n+  public static HoodieCommitMetadata buildWriteActionMetadata(List<HoodieWriteStat> writeStats,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MzM2Mw==", "bodyText": "Added", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488343363", "createdAt": "2020-09-15T02:23:43Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/CommitUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.util;\n+\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieReplaceCommitMetadata;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to generate compaction plan from FileGroup/FileSlice abstraction.\n+ */\n+public class CommitUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(CommitUtils.class);\n+\n+  public static HoodieCommitMetadata buildWriteActionMetadata(List<HoodieWriteStat> writeStats,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzE5MA=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1OTgxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/avro/HoodieArchivedMetaEntry.avsc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0ODo0MlrOHQ-I7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoyNDoyM1rOHRuIHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzM1Ng==", "bodyText": "should we just add at the end? not sure if it will be backwards compatible nicely otherwise.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487557356", "createdAt": "2020-09-13T17:48:42Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/avro/HoodieArchivedMetaEntry.avsc", "diffHunk": "@@ -36,6 +36,14 @@\n          ],\n          \"default\": null\n       },\n+      {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MzU4Mg==", "bodyText": "Moved it. will check if its possible to add unit test for backward compatibility.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488343582", "createdAt": "2020-09-15T02:24:23Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/avro/HoodieArchivedMetaEntry.avsc", "diffHunk": "@@ -36,6 +36,14 @@\n          ],\n          \"default\": null\n       },\n+      {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzM1Ng=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1OTk5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieCommitMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0ODo1NlrOHQ-JAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0ODo1NlrOHQ-JAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzM3Ng==", "bodyText": "nit: extra line", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487557376", "createdAt": "2020-09-13T17:48:56Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieCommitMetadata.java", "diffHunk": "@@ -46,11 +46,12 @@\n   public static final String SCHEMA_KEY = \"schema\";\n   private static final Logger LOG = LogManager.getLogger(HoodieCommitMetadata.class);\n   protected Map<String, List<HoodieWriteStat>> partitionToWriteStats;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2MDQ1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0OTo0OVrOHQ-JOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0OTo0OVrOHQ-JOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzQzMg==", "bodyText": "rename: getCompletedReplaceTimeline()  current naming gives the impression that its either completed or replacecommit", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487557432", "createdAt": "2020-09-13T17:49:49Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -113,6 +112,18 @@ public HoodieDefaultTimeline getCommitsAndCompactionTimeline() {\n     return new HoodieDefaultTimeline(instants.stream().filter(s -> validActions.contains(s.getAction())), details);\n   }\n \n+  @Override\n+  public HoodieDefaultTimeline getWriteActionTimeline() {\n+    Set<String> validActions = CollectionUtils.createSet(COMMIT_ACTION, DELTA_COMMIT_ACTION, COMPACTION_ACTION, REPLACE_COMMIT_ACTION);\n+    return new HoodieDefaultTimeline(instants.stream().filter(s -> validActions.contains(s.getAction())), details);\n+  }\n+\n+  @Override\n+  public HoodieTimeline getCompletedAndReplaceTimeline() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2MzM1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/avro/HoodieReplaceCommitMetadata.avsc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1Mjo1OFrOHQ-KjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoyNzozNFrOHRuLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Nzc3Mw==", "bodyText": "for my own understanding, copying the fields from CommitMetadata is the only way to \"inherit\" the avro schema, I guess?\nalso, to be consistent. should we first place the base fields from commit metadata first, and add partitionToReplaceStats at the end?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487557773", "createdAt": "2020-09-13T17:52:58Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/avro/HoodieReplaceCommitMetadata.avsc", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieReplaceCommitMetadata\",\n+   \"fields\":[\n+      {\n+         \"name\":\"partitionToWriteStats\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NDUyMw==", "bodyText": "Moved partitionToReplaceStats at the end. Its also possible to make this reference HoodieCommitMetadata directly i.e.,\nHoodieReplaceCommitMetadata contains HoodieCommitMetadata and replaceFileIds. But converting between json replaceCommit and avro version will require another layer of transform code. So to keep it simple, I copied all the fields from json structure.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488344523", "createdAt": "2020-09-15T02:27:34Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/avro/HoodieReplaceCommitMetadata.avsc", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieReplaceCommitMetadata\",\n+   \"fields\":[\n+      {\n+         \"name\":\"partitionToWriteStats\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Nzc3Mw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2NDI5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceCommitMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NDoyMlrOHQ-LBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoyODo1M1rOHRuNGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Nzg5NA==", "bodyText": "these are the file groups being replaced? I thought we were going to just track the file ids?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487557894", "createdAt": "2020-09-13T17:54:22Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceCommitMetadata.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * All the metadata that gets stored along with a commit.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HoodieReplaceCommitMetadata extends HoodieCommitMetadata {\n+  private static final Logger LOG = LogManager.getLogger(HoodieReplaceCommitMetadata.class);\n+  protected Map<String, List<HoodieWriteStat>> partitionToReplaceStats;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODAwNA==", "bodyText": "if these are the file groups being replaced, then does this contain all the file slices (see my comment around deleting the replaced file groups in timeline archive log)", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558004", "createdAt": "2020-09-13T17:55:26Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceCommitMetadata.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * All the metadata that gets stored along with a commit.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HoodieReplaceCommitMetadata extends HoodieCommitMetadata {\n+  private static final Logger LOG = LogManager.getLogger(HoodieReplaceCommitMetadata.class);\n+  protected Map<String, List<HoodieWriteStat>> partitionToReplaceStats;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Nzg5NA=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NDg1OQ==", "bodyText": "I changed it to List to include only fileIds. I'm inclined against storing all file slices because they can evolve between metadata creation and archival/clean. Let me know if this understanding is incorrect", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488344859", "createdAt": "2020-09-15T02:28:53Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceCommitMetadata.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * All the metadata that gets stored along with a commit.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HoodieReplaceCommitMetadata extends HoodieCommitMetadata {\n+  private static final Logger LOG = LogManager.getLogger(HoodieReplaceCommitMetadata.class);\n+  protected Map<String, List<HoodieWriteStat>> partitionToReplaceStats;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Nzg5NA=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2NTY5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/HoodieTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NTo1OVrOHQ-Lpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NTo1OVrOHQ-Lpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODA1NQ==", "bodyText": "rename: fgIdToReplaceInstants", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558055", "createdAt": "2020-09-13T17:55:59Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/HoodieTableFileSystemView.java", "diffHunk": "@@ -64,6 +64,11 @@\n    */\n   protected Map<HoodieFileGroupId, BootstrapBaseFileMapping> fgIdToBootstrapBaseFile;\n \n+  /**\n+   * Track replace time for replaced file groups.\n+   */\n+  protected Map<HoodieFileGroupId, HoodieInstant> fgIdToReplaceInstant;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2NzU5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1ODo0NFrOHQ-Mgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1ODo0NFrOHQ-Mgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODI3NQ==", "bodyText": "for tests, I suggest using the HoodieWritableTestTable etc instead of introducing new methods. Also please check other utilities to avoid writing a new method here", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558275", "createdAt": "2020-09-13T17:58:44Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java", "diffHunk": "@@ -366,6 +378,14 @@ public static void createCompactionRequestedFile(String basePath, String instant\n     createEmptyFile(basePath, commitFile, configuration);\n   }\n \n+  public static void createDataFile(String basePath, String partitionPath, String instantTime, String fileID, Configuration configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2ODEyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1OToyMVrOHQ-Mvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo1ODo0NVrOHRqe9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODMzNQ==", "bodyText": "why is this change necessayr?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558335", "createdAt": "2020-09-13T17:59:21Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java", "diffHunk": "@@ -378,9 +398,9 @@ public static void createCompactionAuxiliaryMetadata(String basePath, HoodieInst\n         new Path(basePath + \"/\" + HoodieTableMetaClient.AUXILIARYFOLDER_NAME + \"/\" + instant.getFileName());\n     FileSystem fs = FSUtils.getFs(basePath, configuration);\n     try (FSDataOutputStream os = fs.create(commitFile, true)) {\n-      HoodieCompactionPlan workload = new HoodieCompactionPlan();\n+      HoodieCompactionPlan workload = HoodieCompactionPlan.newBuilder().setVersion(1).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Mzg5Mw==", "bodyText": "Version is not being set by default, so reading test plan generated here is failing. So I explicitly set version.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488283893", "createdAt": "2020-09-14T22:58:45Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java", "diffHunk": "@@ -378,9 +398,9 @@ public static void createCompactionAuxiliaryMetadata(String basePath, HoodieInst\n         new Path(basePath + \"/\" + HoodieTableMetaClient.AUXILIARYFOLDER_NAME + \"/\" + instant.getFileName());\n     FileSystem fs = FSUtils.getFs(basePath, configuration);\n     try (FSDataOutputStream os = fs.create(commitFile, true)) {\n-      HoodieCompactionPlan workload = new HoodieCompactionPlan();\n+      HoodieCompactionPlan workload = HoodieCompactionPlan.newBuilder().setVersion(1).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODMzNQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2OTA4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowMDoyNFrOHQ-NMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMDo1M1rOHRqh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODQ1MQ==", "bodyText": "there is nothing specific about replace in this method? should we move this to the test class itself. inline?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558451", "createdAt": "2020-09-13T18:00:24Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -200,6 +199,14 @@ public static void createInflightCommitFiles(String basePath, String... instantT\n     }\n   }\n \n+  public static HoodieWriteStat createReplaceStat(final String partitionPath, final String fileId1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDY1NQ==", "bodyText": "Done.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488284655", "createdAt": "2020-09-14T23:00:53Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -200,6 +199,14 @@ public static void createInflightCommitFiles(String basePath, String... instantT\n     }\n   }\n \n+  public static HoodieWriteStat createReplaceStat(final String partitionPath, final String fileId1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODQ1MQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2OTU3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowMTowNVrOHQ-Naw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjozMTozMlrOHRuQBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODUwNw==", "bodyText": "see earlier comment on whether we need this method.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558507", "createdAt": "2020-09-13T18:01:05Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "diffHunk": "@@ -133,6 +137,21 @@\n    */\n   HoodieTimeline getCommitsAndCompactionTimeline();\n \n+  /**\n+   * Timeline to just include commits (commit/deltacommit), replace and compaction actions.\n+   *\n+   * @return\n+   */\n+  HoodieDefaultTimeline getWriteActionTimeline();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzM4NA==", "bodyText": "To expand, I am wondering if we should just include replacecommit within getCommitsAndCompactionTimeline(). Most of its callers are around compaction/savepoint/restore etc. So we may not be seeing some cases here.\nThings work for now, since filterCompletedInstants() etc are including replace commit in the timeline when filtering for queries. Semantically, if replace is a commit level action that can add new data to the timeline, then we should just treat it like delta commit IMO.\nWould anything break if we did do that?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487563384", "createdAt": "2020-09-13T18:49:23Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "diffHunk": "@@ -133,6 +137,21 @@\n    */\n   HoodieTimeline getCommitsAndCompactionTimeline();\n \n+  /**\n+   * Timeline to just include commits (commit/deltacommit), replace and compaction actions.\n+   *\n+   * @return\n+   */\n+  HoodieDefaultTimeline getWriteActionTimeline();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODUwNw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTYwNA==", "bodyText": "I removed and included getCommitsAndCompactionTimeline. I think we will run into some edge cases for MOR tables where something would break. But don't have concrete examples. We can run it for a while on MOR table and see if works.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488345604", "createdAt": "2020-09-15T02:31:32Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieTimeline.java", "diffHunk": "@@ -133,6 +137,21 @@\n    */\n   HoodieTimeline getCommitsAndCompactionTimeline();\n \n+  /**\n+   * Timeline to just include commits (commit/deltacommit), replace and compaction actions.\n+   *\n+   * @return\n+   */\n+  HoodieDefaultTimeline getWriteActionTimeline();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODUwNw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI3MDczOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RocksDbBasedFileSystemView.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowMjo0NFrOHQ-OBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTowMDozM1rOHScS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODY2Mw==", "bodyText": "@bvaradar if you can take a pass at these, that would be great", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558663", "createdAt": "2020-09-13T18:02:44Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RocksDbBasedFileSystemView.java", "diffHunk": "@@ -371,6 +371,47 @@ void removeBootstrapBaseFileMapping(Stream<BootstrapBaseFileMapping> bootstrapBa\n         schemaHelper.getPrefixForSliceViewByPartitionFile(partitionPath, fileId)).map(Pair::getValue)).findFirst());\n   }\n \n+  @Override\n+  protected void resetReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODkyNg==", "bodyText": "General question I have around incremental file system view and rocksDB like persistent file system view storage is whether we will keep this list updated. i.e when the archival/cleaning runs, how do we ensure the deleted replaced file groups are no longer tracked inside rocksdb.\nI guess the lines below, are doing a bulk delete and insert to achieve the same?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487558926", "createdAt": "2020-09-13T18:05:25Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RocksDbBasedFileSystemView.java", "diffHunk": "@@ -371,6 +371,47 @@ void removeBootstrapBaseFileMapping(Stream<BootstrapBaseFileMapping> bootstrapBa\n         schemaHelper.getPrefixForSliceViewByPartitionFile(partitionPath, fileId)).map(Pair::getValue)).findFirst());\n   }\n \n+  @Override\n+  protected void resetReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODY2Mw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTg0OQ==", "bodyText": "Yes,  we do delete and insert. Definitely, would be helpful to have someone with more experience review this.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488345849", "createdAt": "2020-09-15T02:32:29Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RocksDbBasedFileSystemView.java", "diffHunk": "@@ -371,6 +371,47 @@ void removeBootstrapBaseFileMapping(Stream<BootstrapBaseFileMapping> bootstrapBa\n         schemaHelper.getPrefixForSliceViewByPartitionFile(partitionPath, fileId)).map(Pair::getValue)).findFirst());\n   }\n \n+  @Override\n+  protected void resetReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODY2Mw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5OTk5OQ==", "bodyText": "This part looks good. Going through rest of the code", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489099999", "createdAt": "2020-09-16T01:00:33Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/RocksDbBasedFileSystemView.java", "diffHunk": "@@ -371,6 +371,47 @@ void removeBootstrapBaseFileMapping(Stream<BootstrapBaseFileMapping> bootstrapBa\n         schemaHelper.getPrefixForSliceViewByPartitionFile(partitionPath, fileId)).map(Pair::getValue)).findFirst());\n   }\n \n+  @Override\n+  protected void resetReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODY2Mw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI3NTYxOnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/java/org/apache/hudi/internal/HoodieDataSourceInternalWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowOToyMFrOHQ-Qaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowMTo1NVrOHRqjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTI3NQ==", "bodyText": "better approach for these situations generally is to introduce a commitStats(.) that does not take the last argument and deal with it internally inside WriteClient.\nThis way the code will remain more readable, without having to reference replace stats in bulk_insert, which have nothing to do with each other. hope that makes sense", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487559275", "createdAt": "2020-09-13T18:09:20Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark/src/main/java/org/apache/hudi/internal/HoodieDataSourceInternalWriter.java", "diffHunk": "@@ -102,7 +104,9 @@ public void commit(WriterCommitMessage[] messages) {\n             .flatMap(m -> m.getWriteStatuses().stream().map(m2 -> m2.getStat())).collect(Collectors.toList());\n \n     try {\n-      writeClient.commitStats(instantTime, writeStatList, Option.empty());\n+      writeClient.commitStats(instantTime, writeStatList, Option.empty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDk2NQ==", "bodyText": "Sure. Added new method", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488284965", "createdAt": "2020-09-14T23:01:55Z", "author": {"login": "satishkotha"}, "path": "hudi-spark/src/main/java/org/apache/hudi/internal/HoodieDataSourceInternalWriter.java", "diffHunk": "@@ -102,7 +104,9 @@ public void commit(WriterCommitMessage[] messages) {\n             .flatMap(m -> m.getWriteStatuses().stream().map(m2 -> m2.getStat())).collect(Collectors.toList());\n \n     try {\n-      writeClient.commitStats(instantTime, writeStatList, Option.empty());\n+      writeClient.commitStats(instantTime, writeStatList, Option.empty(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTI3NQ=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI3NzA3OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxMDoyMlrOHQ-RDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMToyMDowNFrOHRm_EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTQzNw==", "bodyText": "should we have a better way of getting the commit action type? I am bit concerned about creating new metaClient just for this.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487559437", "createdAt": "2020-09-13T18:10:22Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -111,6 +111,9 @@ private[hudi] object HoodieSparkSqlWriter {\n         tableConfig = tableMetaClient.getTableConfig\n       }\n \n+      val metaClient = new HoodieTableMetaClient(sparkContext.hadoopConfiguration, path.get)\n+      val commitActionType = DataSourceUtils.getCommitActionType(operation, metaClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNjU3Nw==", "bodyText": "We just need tableType to create commit/deltacommit in the default case. I moved this to a static method in util class and removed dependency on MetaClient.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r488226577", "createdAt": "2020-09-14T21:20:04Z", "author": {"login": "satishkotha"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -111,6 +111,9 @@ private[hudi] object HoodieSparkSqlWriter {\n         tableConfig = tableMetaClient.getTableConfig\n       }\n \n+      val metaClient = new HoodieTableMetaClient(sparkContext.hadoopConfiguration, path.get)\n+      val commitActionType = DataSourceUtils.getCommitActionType(operation, metaClient)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTQzNw=="}, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI3NzcxOnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxMTowN1rOHQ-RYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxMTowN1rOHQ-RYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTUyMQ==", "bodyText": "please remove the scala specific comment. its good to encapsulate like this anyway", "url": "https://github.com/apache/hudi/pull/2048#discussion_r487559521", "createdAt": "2020-09-13T18:11:07Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -376,31 +379,35 @@ private[hudi] object HoodieSparkSqlWriter {\n     metaSyncSuccess\n   }\n \n+  /**\n+   * Scala says method cannot have more than 7 arguments. So group all table/action specific information into a case class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b275dbd20ec82ebe568b47bb28447d92ab996f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTA3MDY2OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozNDozOFrOHSj8hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozNDozOFrOHSj8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNTM1MA==", "bodyText": "Is this needed ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489225350", "createdAt": "2020-09-16T07:34:38Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteResult.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Result of a write operation.\n+ */\n+public class HoodieWriteResult implements Serializable {\n+\n+  private static final long serialVersionUID = 1L;\n+  private static final long RANDOM_SEED = 9038412832L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTI1NDI0OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODoyMzowN1rOHSltkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODoyMzowN1rOHSltkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NDI5MA==", "bodyText": "Move this ReplaceHelper class ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489254290", "createdAt": "2020-09-16T08:23:07Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -370,4 +430,17 @@ private IndexedRecord convertToAvroRecord(HoodieTimeline commitTimeline, HoodieI\n     avroMetaData.getExtraMetadata().put(HoodieRollingStatMetadata.ROLLING_STAT_METADATA_KEY, \"\");\n     return avroMetaData;\n   }\n+\n+  public static org.apache.hudi.avro.model.HoodieReplaceCommitMetadata convertReplaceCommitMetadata(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTI5Nzc5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceCommitMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozMzozOVrOHSmHnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozMzozOVrOHSmHnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2MDk1Ng==", "bodyText": "nit: Can you add @OverRide annotation ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489260956", "createdAt": "2020-09-16T08:33:39Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceCommitMetadata.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * All the metadata that gets stored along with a commit.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HoodieReplaceCommitMetadata extends HoodieCommitMetadata {\n+  private static final Logger LOG = LogManager.getLogger(HoodieReplaceCommitMetadata.class);\n+  protected Map<String, List<String>> partitionToReplaceFileIds;\n+\n+  // for ser/deser\n+  public HoodieReplaceCommitMetadata() {\n+    this(false);\n+  }\n+\n+  public HoodieReplaceCommitMetadata(boolean compacted) {\n+    super(compacted);\n+    partitionToReplaceFileIds = new HashMap<>();\n+  }\n+\n+  public void setPartitionToReplaceFileIds(Map<String, List<String>> partitionToReplaceFileIds) {\n+    this.partitionToReplaceFileIds = partitionToReplaceFileIds;\n+  }\n+\n+  public void addReplaceFileId(String partitionPath, String fileId) {\n+    if (!partitionToReplaceFileIds.containsKey(partitionPath)) {\n+      partitionToReplaceFileIds.put(partitionPath, new ArrayList<>());\n+    }\n+    partitionToReplaceFileIds.get(partitionPath).add(fileId);\n+  }\n+\n+  public List<String> getReplaceFileIds(String partitionPath) {\n+    return partitionToReplaceFileIds.get(partitionPath);\n+  }\n+\n+  public Map<String, List<String>> getPartitionToReplaceFileIds() {\n+    return partitionToReplaceFileIds;\n+  }\n+\n+  public String toJsonString() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwNzA0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTowOFrOHSnLGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0MTo1MVrOHXALsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIzMw==", "bodyText": "@satishkotha : We need to handle case when we restore a .replace instant for incremental timeline file system view.\nAbout the implementation -\nIn addRestoreInstant(), we need to look at HoodieRestoreMetadata.instantsToRollback and for each instants which are .replace types, we need to remove the replace file-group mapping kept in the file-system view.  We would need a reverse mapping of instant to file-group-id and also a way to identify which of the entries in HoodieRestoreMetadata.instantsToRollback is replace metadata. Currently, we only store commit timestamps in HoodieRestoreMetadata.instantsToRollback.\nI think it would be useful if we add an additional field in HoodieRestoreCommitMetadata and HoodieRollbackCommitMetadata to store both the timestamp and commit-action-type and use it here.\nSince, we only read committed replace actions, rollback is fine though.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489278233", "createdAt": "2020-09-16T08:59:08Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java", "diffHunk": "@@ -251,6 +262,28 @@ private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant)\n     LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n   }\n \n+  /**\n+   * Add newly found REPLACE instant.\n+   *\n+   * @param timeline Hoodie Timeline\n+   * @param instant REPLACE Instant\n+   */\n+  private void addReplaceInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4Mzk2Mw==", "bodyText": "Also, can you also add test cases for incremental file-system view for both addReplaceInstant and removeReplaceInstant in TestIncrementalFSViewSync ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r489283963", "createdAt": "2020-09-16T09:08:16Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java", "diffHunk": "@@ -251,6 +262,28 @@ private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant)\n     LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n   }\n \n+  /**\n+   * Add newly found REPLACE instant.\n+   *\n+   * @param timeline Hoodie Timeline\n+   * @param instant REPLACE Instant\n+   */\n+  private void addReplaceInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIzMw=="}, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzEyMg==", "bodyText": "I need to understand this flow a bit more. But, have a question on why we need to track commit-action-type and timestamp. Today, HoodieRollbackMetadata tracks successFiles, deletedFiles etc.  Do you think we can add replacedFileIds also there? This will be empty for regular commits. But for replace commits, it will have some content.  If this value is present, we can remove corresponding fileIds from View#replacedFileGroups. Let me know if i'm missing anything with this approach.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r492303122", "createdAt": "2020-09-21T19:42:08Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java", "diffHunk": "@@ -251,6 +262,28 @@ private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant)\n     LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n   }\n \n+  /**\n+   * Add newly found REPLACE instant.\n+   *\n+   * @param timeline Hoodie Timeline\n+   * @param instant REPLACE Instant\n+   */\n+  private void addReplaceInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIzMw=="}, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjE1OA==", "bodyText": "Discussed with @satishkotha. We will track commit action type along with instant since we have introduced one another type of \"commit\" -> replace. Restore can perform custom handling only for this action type. It is safer to let Incremental file-system view to revert replace mappings (in memory or rocksdb) by providing the replace instant time as it  isrobust in case of partial restore failures.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493002158", "createdAt": "2020-09-22T20:07:04Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java", "diffHunk": "@@ -251,6 +262,28 @@ private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant)\n     LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n   }\n \n+  /**\n+   * Add newly found REPLACE instant.\n+   *\n+   * @param timeline Hoodie Timeline\n+   * @param instant REPLACE Instant\n+   */\n+  private void addReplaceInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIzMw=="}, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MjI5MQ==", "bodyText": "@bvaradar Made the change and added basic test. Please take a look. If the general approach looks good. I'll add more complex tests.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493882291", "createdAt": "2020-09-23T20:41:51Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java", "diffHunk": "@@ -251,6 +262,28 @@ private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant)\n     LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n   }\n \n+  /**\n+   * Add newly found REPLACE instant.\n+   *\n+   * @param timeline Hoodie Timeline\n+   * @param instant REPLACE Instant\n+   */\n+  private void addReplaceInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIzMw=="}, "originalCommit": {"oid": "067c285f5dc762a3753ad4162d02957662daa1d9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM5OTI4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowOTozOVrOHWKi-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozOTozOFrOHXAHPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMzUxMw==", "bodyText": "@satishkotha  : As discussed, All the replace filtering needs to move to getXXX() apis as the fetch APIs are only responsible for fetching file slices/base-files from different types of storage.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493003513", "createdAt": "2020-09-22T20:09:39Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -738,7 +799,9 @@ private String formatPartitionKey(String partitionStr) {\n    * @param commitsToReturn Commits\n    */\n   Stream<FileSlice> fetchLatestFileSliceInRange(List<String> commitsToReturn) {\n-    return fetchAllStoredFileGroups().map(fileGroup -> fileGroup.getLatestFileSliceInRange(commitsToReturn))\n+    return fetchAllStoredFileGroups()\n+        .filter(fileGroup -> !isFileGroupReplacedBeforeAny(fileGroup, commitsToReturn))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a546978c03f71ee3beadd5ea7f65abb7635b407f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MTE1MQ==", "bodyText": "Changed. Please take a look.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493881151", "createdAt": "2020-09-23T20:39:38Z", "author": {"login": "satishkotha"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -738,7 +799,9 @@ private String formatPartitionKey(String partitionStr) {\n    * @param commitsToReturn Commits\n    */\n   Stream<FileSlice> fetchLatestFileSliceInRange(List<String> commitsToReturn) {\n-    return fetchAllStoredFileGroups().map(fileGroup -> fileGroup.getLatestFileSliceInRange(commitsToReturn))\n+    return fetchAllStoredFileGroups()\n+        .filter(fileGroup -> !isFileGroupReplacedBeforeAny(fileGroup, commitsToReturn))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMzUxMw=="}, "originalCommit": {"oid": "a546978c03f71ee3beadd5ea7f65abb7635b407f"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQxODI0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo0MTo1M1rOHXEsnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo0MTo1M1rOHXEsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1NjI1Mw==", "bodyText": "@satishkotha : Dont we need to use instant time when checking for replaced-file here ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493956253", "createdAt": "2020-09-23T23:41:53Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -425,10 +459,14 @@ protected HoodieBaseFile addBootstrapBaseFileIfPresent(HoodieFileGroupId fileGro\n       readLock.lock();\n       String partitionPath = formatPartitionKey(partitionStr);\n       ensurePartitionLoadedCorrectly(partitionPath);\n-      return fetchHoodieFileGroup(partitionPath, fileId).map(fileGroup -> fileGroup.getAllBaseFiles()\n-          .filter(baseFile -> HoodieTimeline.compareTimestamps(baseFile.getCommitTime(), HoodieTimeline.EQUALS,\n-              instantTime)).filter(df -> !isBaseFileDueToPendingCompaction(df)).findFirst().orElse(null))\n-          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, fileId), df));\n+      if (isFileGroupReplaced(partitionPath, fileId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQyNjY3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo0NjoyNlrOHXExuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo0NjoyNlrOHXExuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1NzU2MQ==", "bodyText": "same case here,, we need to use the maxInstantTime passed here instead of the timeline's maxInstant.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493957561", "createdAt": "2020-09-23T23:46:26Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -554,14 +608,16 @@ protected HoodieBaseFile addBootstrapBaseFileIfPresent(HoodieFileGroupId fileGro\n       readLock.lock();\n       String partition = formatPartitionKey(partitionStr);\n       ensurePartitionLoadedCorrectly(partition);\n-      return fetchAllStoredFileGroups(partition).map(fileGroup -> {\n-        Option<FileSlice> fileSlice = fileGroup.getLatestFileSliceBeforeOrOn(maxInstantTime);\n-        // if the file-group is under construction, pick the latest before compaction instant time.\n-        if (fileSlice.isPresent()) {\n-          fileSlice = Option.of(fetchMergedFileSlice(fileGroup, fileSlice.get()));\n-        }\n-        return fileSlice;\n-      }).filter(Option::isPresent).map(Option::get).map(this::addBootstrapBaseFileIfPresent);\n+      return fetchAllStoredFileGroups(partition)\n+          .filter(fg -> !isFileGroupReplaced(fg.getFileGroupId()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTYyNjg0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/avro/HoodieRollbackMetadata.avsc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMToyODoxOFrOHXGlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMToyODoxOFrOHXGlfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4NzE5Ng==", "bodyText": "Can we move this to separate avsc file and reference it here", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493987196", "createdAt": "2020-09-24T01:28:18Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/avro/HoodieRollbackMetadata.avsc", "diffHunk": "@@ -39,6 +39,18 @@\n         \"name\":\"version\",\n         \"type\":[\"int\", \"null\"],\n         \"default\": 1\n+     },\n+     /* overlaps with 'commitsRollback' field. Adding this to track action type for all the instants being rolled back. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTYzMDk4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/CommitUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTozMDo1N1rOHXGn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTozMDo1N1rOHXGn9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4NzgyOA==", "bodyText": "Doc needs fixing.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493987828", "createdAt": "2020-09-24T01:30:57Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/CommitUtils.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.util;\n+\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieReplaceCommitMetadata;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Helper class to generate compaction plan from FileGroup/FileSlice abstraction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY1ODA1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0NzozMVrOHXG3xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0NzozMVrOHXG3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MTg3Ng==", "bodyText": "rename removeReplacedFileIdsAtInstants ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493991876", "createdAt": "2020-09-24T01:47:31Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -727,6 +795,26 @@ private String formatPartitionKey(String partitionStr) {\n    */\n   abstract Stream<HoodieFileGroup> fetchAllStoredFileGroups();\n \n+  /**\n+   * Track instant time for file groups replaced.\n+   */\n+  protected abstract void resetReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups);\n+\n+  /**\n+   * Track instant time for new file groups replaced.\n+   */\n+  protected abstract void addReplacedFileGroups(final Map<HoodieFileGroupId, HoodieInstant> replacedFileGroups);\n+\n+  /**\n+   * Remove file groups that are replaced in any of the specified instants.\n+   */\n+  protected abstract void removeReplacedFileIds(Set<String> instants);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY2ODUyOnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo1NDoxNlrOHXG-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo1NDoxNlrOHXG-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MzUzNg==", "bodyText": "this is no longer needed and can be removed ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r493993536", "createdAt": "2020-09-24T01:54:16Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "diffHunk": "@@ -91,40 +92,47 @@ public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses) {\n   }\n \n   /**\n+   *\n    * Commit changes performed at the given instantTime marker.\n    */\n   public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses,\n-      Option<Map<String, String>> extraMetadata) {\n-    List<HoodieWriteStat> stats = writeStatuses.map(WriteStatus::getStat).collect();\n-    return commitStats(instantTime, stats, extraMetadata);\n+                        Option<Map<String, String>> extraMetadata) {\n+    HoodieTableMetaClient metaClient = createMetaClient(false);\n+    String actionType = metaClient.getCommitActionType();\n+    return commit(instantTime, writeStatuses, extraMetadata, actionType, Collections.emptyMap());\n   }\n \n-  public boolean commitStats(String instantTime, List<HoodieWriteStat> stats, Option<Map<String, String>> extraMetadata) {\n-    LOG.info(\"Committing \" + instantTime);\n+  /**\n+   * Complete changes performed at the given instantTime marker with specified action.\n+   */\n+  public boolean commit(String instantTime, JavaRDD<WriteStatus> writeStatuses,\n+      Option<Map<String, String>> extraMetadata, String commitActionType, Map<String, List<String>> partitionToReplacedFileIds) {\n+    List<HoodieWriteStat> writeStats = writeStatuses.map(WriteStatus::getStat).collect();\n+    return commitStats(instantTime, writeStats, extraMetadata, commitActionType, partitionToReplacedFileIds);\n+  }\n+\n+  public boolean commitStats(String instantTime, List<HoodieWriteStat> stats, Option<Map<String, String>> extraMetadata,\n+                             String commitActionType) {\n+    return commitStats(instantTime, stats, extraMetadata, commitActionType, Collections.emptyMap());\n+  }\n+\n+  public boolean commitStats(String instantTime, List<HoodieWriteStat> stats, Option<Map<String, String>> extraMetadata,\n+                             String commitActionType, Map<String, List<String>> partitionToReplaceFileIds) {\n+    LOG.info(\"Committing \" + instantTime + \" action \" + commitActionType);\n     HoodieTableMetaClient metaClient = createMetaClient(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTc2MDQ5OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo0OToyMFrOHXHz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMzo0ODoxNVrOHX0AQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNzI4NQ==", "bodyText": "We are creating metaclient and loading timeline once here and in the function called in the next line. Can you make sure you create metaclient only once without loading timeline.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r494007285", "createdAt": "2020-09-24T02:49:20Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,24 +602,39 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcyNzQ4NA==", "bodyText": "This is not calling function in the next line (calling method after that). So we only create meta client once. Please double check and let me know if i'm misinterpreting your suggestion.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r494727484", "createdAt": "2020-09-25T03:31:30Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,24 +602,39 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNzI4NQ=="}, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMTMyOQ==", "bodyText": "My bad. Got confused with the method naming :)", "url": "https://github.com/apache/hudi/pull/2048#discussion_r494731329", "createdAt": "2020-09-25T03:48:15Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,24 +602,39 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNzI4NQ=="}, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTc3OTU2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/avro/HoodieRestoreMetadata.avsc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzowMTowNFrOHXH_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzowMTowNFrOHXH_Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAxMDE1NA==", "bodyText": "Can you use pretty print mode (multi-lines) in the same way other section is presented.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r494010154", "createdAt": "2020-09-24T03:01:04Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/avro/HoodieRestoreMetadata.avsc", "diffHunk": "@@ -34,6 +34,8 @@\n         \"name\":\"version\",\n         \"type\":[\"int\", \"null\"],\n         \"default\": 1\n-     }\n+     },\n+     /* overlaps with 'instantsToRollback' field. Adding this to track action type for all the instants being rolled back. */\n+     {\"name\": \"restoreInstantInfo\", \"default\": null, \"type\": {\"type\": \"array\", \"default\": null, \"items\": [\"null\", \"HoodieInstantInfo\"]}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980fed7b4ab7f8d595fe14fc2ffaa1a2eb0962f5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjQxMDk4OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMzo1MDowN1rOHX0B-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo0NDo0MFrOHYvJ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMTc2OA==", "bodyText": "Does this have to be non-static ? Can it be moved to CommitUtils ?", "url": "https://github.com/apache/hudi/pull/2048#discussion_r494731768", "createdAt": "2020-09-25T03:50:07Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,24 +602,39 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, metaClient.getCommitActionType(), metaClient);\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  public void startCommitWithTime(String instantTime, String actionType) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, actionType, metaClient);\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  private void startCommitWithTime(String instantTime, String actionType, HoodieTableMetaClient metaClient) {\n     // NOTE : Need to ensure that rollback is done before a new commit is started\n     if (rollbackPending) {\n       // Only rollback inflight commit/delta-commits. Do not touch compaction commits\n       rollbackPendingCommits();\n     }\n-    startCommit(instantTime);\n+    startCommit(instantTime, actionType, metaClient);\n   }\n \n-  private void startCommit(String instantTime) {\n-    LOG.info(\"Generate a new instant time \" + instantTime);\n-    HoodieTableMetaClient metaClient = createMetaClient(true);\n+  private void startCommit(String instantTime, String actionType, HoodieTableMetaClient metaClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281f2eb0d311c7b54ac850b831cea6d48a47502"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNzk4OQ==", "bodyText": "This is a private method. Do you want to make this public static?  Personally, I think having all startCommit methods in HoodieWriteClient makes more sense because user workflow is\n\nwriteClient#startCommit\nwriteClient#upsert\nwriteClient#commit\n\nBut if you have a strong preference to make this part of CommitUtils, I can move it. let me know.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r495137989", "createdAt": "2020-09-25T17:40:20Z", "author": {"login": "satishkotha"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,24 +602,39 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, metaClient.getCommitActionType(), metaClient);\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  public void startCommitWithTime(String instantTime, String actionType) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, actionType, metaClient);\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  private void startCommitWithTime(String instantTime, String actionType, HoodieTableMetaClient metaClient) {\n     // NOTE : Need to ensure that rollback is done before a new commit is started\n     if (rollbackPending) {\n       // Only rollback inflight commit/delta-commits. Do not touch compaction commits\n       rollbackPendingCommits();\n     }\n-    startCommit(instantTime);\n+    startCommit(instantTime, actionType, metaClient);\n   }\n \n-  private void startCommit(String instantTime) {\n-    LOG.info(\"Generate a new instant time \" + instantTime);\n-    HoodieTableMetaClient metaClient = createMetaClient(true);\n+  private void startCommit(String instantTime, String actionType, HoodieTableMetaClient metaClient) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMTc2OA=="}, "originalCommit": {"oid": "c281f2eb0d311c7b54ac850b831cea6d48a47502"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMDQzOA==", "bodyText": "Lets leave it for now If needed, we can refactor later.", "url": "https://github.com/apache/hudi/pull/2048#discussion_r495700438", "createdAt": "2020-09-28T05:44:40Z", "author": {"login": "bvaradar"}, "path": "hudi-client/src/main/java/org/apache/hudi/client/HoodieWriteClient.java", "diffHunk": "@@ -586,24 +602,39 @@ public String startCommit() {\n    * @param instantTime Instant time to be generated\n    */\n   public void startCommitWithTime(String instantTime) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, metaClient.getCommitActionType(), metaClient);\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  public void startCommitWithTime(String instantTime, String actionType) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    startCommitWithTime(instantTime, actionType, metaClient);\n+  }\n+\n+  /**\n+   * Completes a new commit time for a write operation (insert/update/delete) with specified action.\n+   */\n+  private void startCommitWithTime(String instantTime, String actionType, HoodieTableMetaClient metaClient) {\n     // NOTE : Need to ensure that rollback is done before a new commit is started\n     if (rollbackPending) {\n       // Only rollback inflight commit/delta-commits. Do not touch compaction commits\n       rollbackPendingCommits();\n     }\n-    startCommit(instantTime);\n+    startCommit(instantTime, actionType, metaClient);\n   }\n \n-  private void startCommit(String instantTime) {\n-    LOG.info(\"Generate a new instant time \" + instantTime);\n-    HoodieTableMetaClient metaClient = createMetaClient(true);\n+  private void startCommit(String instantTime, String actionType, HoodieTableMetaClient metaClient) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMTc2OA=="}, "originalCommit": {"oid": "c281f2eb0d311c7b54ac850b831cea6d48a47502"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4256, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}