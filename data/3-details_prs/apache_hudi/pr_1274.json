{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTQwOTUx", "number": 1274, "title": "[HUDI-571] Add 'commits show archived' command to CLI", "bodyText": "What is the purpose of the pull request\nAdd command to show archived commits. This is useful for debugging historical timeline.\nBrief change log\n\nThere is already 'show archived commits' command, but the output is not at all useful. Refactor common timeline methods to HoodieDefaultTimeline to reuse between Active and Archived timeline to make archived commits look similar to active commits\nModify tests to use archived timeline instead of reading files explicitly\n\nOther items planned (to be part of later diffs):\n\nModify all other commands to have 'archived' command. 'savepoints show archived' etc\nThere is no pagination/lazy loading support and if a really long time range is specified, this can result in OOM. To keep the diff small, I'm sending this one first. After I get feedback, i can send another diff to support lazy loading (or pagination).\n\nVerify this pull request\nThis pull request is already covered by existing tests, such as:\n\nTestHoodieCommitArchiveLog.java\nManually verified the change by running CLI locally. Example output:\n`hoodie:$dataset->commits show archived\n\n\n| CommitTime    | Total Bytes Written| Total Files Added| Total Files Updated| Total Partitions Written| Total Records Written| Total Update Records Written| Total Errors|\n|=========================================================================================================================================================================|\n| 20200113224332| 45.7 GB            | 0                | 86                 | 4                       | 97806475             | 107538                      | 0           |\n| 20200113223441| 840.5 MB           | 0                | 1618               | 258                     | 1214615              | 15512                       | 0           |\n| 20200113223441| 840.5 MB           | 0                | 1618               | 258                     | 1214615              | 15512                       | 0           |`", "createdAt": "2020-01-23T01:25:53Z", "url": "https://github.com/apache/hudi/pull/1274", "merged": true, "mergeCommit": {"oid": "462fd025563b0ae8a4d4f28d366a9bbfca070d3f"}, "closed": true, "closedAt": "2020-02-05T19:25:35Z", "author": {"login": "satishkotha"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9ZScggFqTM0Nzc3NDI2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBP9EQgBqjMwMDg3NTAyMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3Nzc0MjY0", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-347774264", "createdAt": "2020-01-24T06:52:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjo1MjowNFrOFhVIyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjo1MjowNFrOFhVIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY0Mg==", "bodyText": "Can we use StringUtils.isNullOrEmpty (in all other places as well) ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370493642", "createdAt": "2020-01-24T06:52:04Z", "author": {"login": "n3nash"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +110,33 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+    if (startTs == null || startTs.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3Nzc0Mjk2", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-347774296", "createdAt": "2020-01-24T06:52:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjo1MjoxMlrOFhVI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjo1MjoxMlrOFhVI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MzY2Mw==", "bodyText": "Can you explain why we need this change ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370493663", "createdAt": "2020-01-24T06:52:12Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodiePartitionMetadata.java", "diffHunk": "@@ -38,6 +38,7 @@\n   public static final String HOODIE_PARTITION_METAFILE = \".hoodie_partition_metadata\";\n   public static final String PARTITION_DEPTH_KEY = \"partitionDepth\";\n   public static final String COMMIT_TIME_KEY = \"commitTime\";\n+  public static final String ACTION_TYPE_KEY = \"actionType\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3Nzc0NDQ3", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-347774447", "createdAt": "2020-01-24T06:52:46Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjUwOTQx", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-348250941", "createdAt": "2020-01-24T22:03:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMzo0MlrOFhrqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMzo0MlrOFhrqhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjcyNg==", "bodyText": "Any reason to remove if (archivedTimeline == null) check ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370862726", "createdAt": "2020-01-24T22:03:42Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "diffHunk": "@@ -289,11 +288,8 @@ public ConsistencyGuardConfig getConsistencyGuardConfig() {\n    *\n    * @return Active commit timeline\n    */\n-  public synchronized HoodieArchivedTimeline getArchivedTimeline() {\n-    if (archivedTimeline == null) {\n-      archivedTimeline = new HoodieArchivedTimeline(this);\n-    }\n-    return archivedTimeline;\n+  public synchronized HoodieArchivedTimeline getArchivedTimeline(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjUxMjU0", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-348251254", "createdAt": "2020-01-24T22:04:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowNDoyNVrOFhrrew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowNDoyNVrOFhrrew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2Mjk3MQ==", "bodyText": "The HoodieDefaultTimeline has implementation -> public HoodieDefaultTimeline findInstantsInRange(String startTs, String endTs) already, can we try to reuse that ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370862971", "createdAt": "2020-01-24T22:04:25Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTimeline.java", "diffHunk": "@@ -230,6 +230,14 @@ static boolean compareTimestamps(String commit1, String commit2, BiPredicate<Str\n     return predicateToApply.test(commit1, commit2);\n   }\n \n+  /**\n+   * Return true if specified timestamp is in range (startTs, endTs].\n+   */\n+  static boolean isInRange(String timestamp, String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjUxNDc2", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-348251476", "createdAt": "2020-01-24T22:04:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowNDo1NVrOFhrsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowNDo1NVrOFhrsLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MzE0OA==", "bodyText": "This is just the prefix right ? May be rename is HOODIE_COMMIT_ARCHIVE_LOG_FILE_NAME_PREFIX ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r370863148", "createdAt": "2020-01-24T22:04:55Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -49,34 +60,76 @@\n  * This class can be serialized and de-serialized and on de-serialization the FileSystem is re-initialized.\n  */\n public class HoodieArchivedTimeline extends HoodieDefaultTimeline {\n+  private static final Pattern ARCHIVE_FILE_PATTERN =\n+          Pattern.compile(\"^\\\\.commits_\\\\.archive\\\\.([0-9]*)$\");\n \n   private static final String HOODIE_COMMIT_ARCHIVE_LOG_FILE = \"commits\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjUzMjMx", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-348253231", "createdAt": "2020-01-24T22:09:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDk1Njgw", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-349095680", "createdAt": "2020-01-28T02:11:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzUwNzU4", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-350350758", "createdAt": "2020-01-29T19:02:43Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowMjo0M1rOFjUA8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowMjo0M1rOFjUA8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MjQwMw==", "bodyText": "You can use a defaultValue during the cliOption itself so you don't have to use these checks ?", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372572403", "createdAt": "2020-01-29T19:02:43Z", "author": {"login": "n3nash"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -62,26 +111,38 @@ public String showCommits(\n       throws IOException {\n \n     HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-    HoodieTimeline timeline = activeTimeline.getCommitsTimeline().filterCompletedInstants();\n-    List<HoodieInstant> commits = timeline.getReverseOrderedInstants().collect(Collectors.toList());\n-    List<Comparable[]> rows = new ArrayList<>();\n-    for (HoodieInstant commit : commits) {\n-      HoodieCommitMetadata commitMetadata =\n-          HoodieCommitMetadata.fromBytes(timeline.getInstantDetails(commit).get(), HoodieCommitMetadata.class);\n-      rows.add(new Comparable[] {commit.getTimestamp(), commitMetadata.fetchTotalBytesWritten(),\n-          commitMetadata.fetchTotalFilesInsert(), commitMetadata.fetchTotalFilesUpdated(),\n-          commitMetadata.fetchTotalPartitionsWritten(), commitMetadata.fetchTotalRecordsWritten(),\n-          commitMetadata.fetchTotalUpdateRecordsWritten(), commitMetadata.fetchTotalWriteErrors()});\n-    }\n-\n-    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-    fieldNameToConverterMap.put(\"Total Bytes Written\", entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString()))));\n+    return printCommits(activeTimeline, limit, sortByField, descending, headerOnly);\n+  }\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"CommitTime\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Files Added\").addTableHeaderField(\"Total Files Updated\")\n-        .addTableHeaderField(\"Total Partitions Written\").addTableHeaderField(\"Total Records Written\")\n-        .addTableHeaderField(\"Total Update Records Written\").addTableHeaderField(\"Total Errors\");\n-    return HoodiePrintHelper.print(header, fieldNameToConverterMap, sortByField, descending, limit, headerOnly, rows);\n+  @CliCommand(value = \"commits show archived\", help = \"Show the archived commits\")\n+  public String showArchivedCommits(\n+          @CliOption(key = {\"startTs\"},  mandatory = false, help = \"start time for commits, default: now - 10 days\")\n+          String startTs,\n+          @CliOption(key = {\"endTs\"},  mandatory = false, help = \"end time for commits, default: now - 1 day\")\n+          String endTs,\n+          @CliOption(key = {\"limit\"}, mandatory = false, help = \"Limit commits\", unspecifiedDefaultValue = \"-1\")\n+          final Integer limit,\n+          @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\")\n+          final String sortByField,\n+          @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\")\n+          final boolean descending,\n+          @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\", unspecifiedDefaultValue = \"false\")\n+          final boolean headerOnly)\n+          throws IOException {\n+    if (StringUtils.isNullOrEmpty(startTs)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzUxNjE3", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-350351617", "createdAt": "2020-01-29T19:04:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowNDowNVrOFjUDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowNDowNVrOFjUDsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MzEwNQ==", "bodyText": "nit : s/removeInstantDetailsFromMemory/clearInstantDetailsFromMemory", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372573105", "createdAt": "2020-01-29T19:04:05Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -96,7 +101,16 @@ private void readObject(java.io.ObjectInputStream in) throws IOException, ClassN\n   }\n \n   public static Path getArchiveLogPath(String archiveFolder) {\n-    return new Path(archiveFolder, HOODIE_COMMIT_ARCHIVE_LOG_FILE);\n+    return new Path(archiveFolder, HOODIE_COMMIT_ARCHIVE_LOG_FILE_PREFIX);\n+  }\n+\n+  public void loadInstantDetailsInMemory(String startTs, String endTs) {\n+    loadInstants(startTs, endTs);\n+  }\n+\n+  public void removeInstantDetailsFromMemory(String startTs, String endTs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzUzNTMy", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-350353532", "createdAt": "2020-01-29T19:07:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowNzoxMFrOFjUJfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowNzoxMFrOFjUJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3NDU5MQ==", "bodyText": "@vinothchandar can you ack that this is okay to move to this class ? This way the ArchivedTimeline can also use these methods (and is aligned with our thoughts on having the same operations on archived and active timeline..)", "url": "https://github.com/apache/hudi/pull/1274#discussion_r372574591", "createdAt": "2020-01-29T19:07:10Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieDefaultTimeline.java", "diffHunk": "@@ -143,6 +143,83 @@ public HoodieTimeline filter(Predicate<HoodieInstant> filter) {\n     return new HoodieDefaultTimeline(instants.stream().filter(filter), details);\n   }\n \n+  /**\n+   * Get all instants (commits, delta commits) that produce new data, in the active timeline.\n+   */\n+  public HoodieTimeline getCommitsTimeline() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzU0MTA0", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-350354104", "createdAt": "2020-01-29T19:08:01Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDE2NDM5", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-353416439", "createdAt": "2020-02-05T01:29:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOToxMVrOFlpLKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOToxMVrOFlpLKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjIzMw==", "bodyText": "Please avoid this change as part of this diff", "url": "https://github.com/apache/hudi/pull/1274#discussion_r375016233", "createdAt": "2020-02-05T01:29:11Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "diffHunk": "@@ -135,6 +135,7 @@\n   /**\n    * Total number of rollback blocks seen in a compaction operation.\n    */\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDE2NTE1", "url": "https://github.com/apache/hudi/pull/1274#pullrequestreview-353416515", "createdAt": "2020-02-05T01:29:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOToyN1rOFlpLZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOToyN1rOFlpLZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjI5Mw==", "bodyText": "same here, we can address this as part of some other refactoring diff", "url": "https://github.com/apache/hudi/pull/1274#discussion_r375016293", "createdAt": "2020-02-05T01:29:27Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/model/HoodieWriteStat.java", "diffHunk": "@@ -290,7 +291,7 @@ public long getTotalRollbackBlocks() {\n     return totalRollbackBlocks;\n   }\n \n-  public void setTotalRollbackBlocks(Long totalRollbackBlocks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c94b175d5d658a6d57f3f2d9534d1aab6d1adb4", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/2c94b175d5d658a6d57f3f2d9534d1aab6d1adb4", "committedDate": "2020-02-05T06:14:39Z", "message": "[HUDI-571] Add 'commits show archived' command to CLI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2c94b175d5d658a6d57f3f2d9534d1aab6d1adb4", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/2c94b175d5d658a6d57f3f2d9534d1aab6d1adb4", "committedDate": "2020-02-05T06:14:39Z", "message": "[HUDI-571] Add 'commits show archived' command to CLI"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4132, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}