{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMTQzODkx", "number": 2172, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1MzoxMlrOExvfLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDowMjowN1rOExvjtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTkzNzExOnYy", "diffSide": "RIGHT", "path": "docker/demo/config/test-suite/complex-dag-cow.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1MzoxMlrOHoAJWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1MzoxMlrOHoAJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNzQ4Mw==", "bodyText": "Is this prod needed ? Also the naming should start from prop1 ?", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511707483", "createdAt": "2020-10-26T03:53:12Z", "author": {"login": "n3nash"}, "path": "docker/demo/config/test-suite/complex-dag-cow.yaml", "diffHunk": "@@ -93,3 +93,50 @@ second_hive_query:\n       result2: 11900\n   type: HiveQueryNode\n   deps: second_upsert\n+fourth_insert:\n+  config:\n+    record_size: 70000\n+    num_insert_partitions: 1\n+    repeat_count: 1\n+    num_records_insert: 1000\n+  deps: second_hive_query\n+  type: InsertNode\n+third_hive_query:\n+  config:\n+    hive_props:\n+      prop2: \"set spark.yarn.queue=\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTkzNzM1OnYy", "diffSide": "RIGHT", "path": "docker/demo/config/test-suite/complex-dag-cow.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1MzoyNlrOHoAJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1MzoyNlrOHoAJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNzUyMQ==", "bodyText": "same here", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511707521", "createdAt": "2020-10-26T03:53:26Z", "author": {"login": "n3nash"}, "path": "docker/demo/config/test-suite/complex-dag-cow.yaml", "diffHunk": "@@ -93,3 +93,50 @@ second_hive_query:\n       result2: 11900\n   type: HiveQueryNode\n   deps: second_upsert\n+fourth_insert:\n+  config:\n+    record_size: 70000\n+    num_insert_partitions: 1\n+    repeat_count: 1\n+    num_records_insert: 1000\n+  deps: second_hive_query\n+  type: InsertNode\n+third_hive_query:\n+  config:\n+    hive_props:\n+      prop2: \"set spark.yarn.queue=\"\n+      prop3: \"set hive.strict.checks.large.query=false\"\n+      prop4: \"set hive.stats.autogather=false\"\n+    hive_queries:\n+      query1: \"select count(*) from testdb.table1 group by `_row_key` having count(*) > 1\"\n+      result1: 0\n+      query2: \"select count(*) from testdb.table1\"\n+      result2: 12900\n+  type: HiveQueryNode\n+  deps: fourth_insert\n+first_delete:\n+  config:\n+    record_size: 70000\n+    num_partitions_delete: 1\n+    num_records_delete: 200\n+  deps: third_hive_query\n+  type: DeleteNode\n+fourth_hive_sync:\n+  config:\n+    queue_name: \"adhoc\"\n+    engine: \"mr\"\n+  type: HiveSyncNode\n+  deps: first_delete\n+fourth_hive_query:\n+  config:\n+    hive_props:\n+      prop2: \"set spark.yarn.queue=\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTkzODIyOnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1NDoxMFrOHoAJ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1NDoxMFrOHoAJ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNzYzMw==", "bodyText": "What does default value \"1\" mean in this case ?", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511707633", "createdAt": "2020-10-26T03:54:10Z", "author": {"login": "n3nash"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java", "diffHunk": "@@ -118,6 +125,10 @@ public int getNumUpsertPartitions() {\n       return Integer.valueOf(configsMap.getOrDefault(NUM_PARTITIONS_UPSERT, 0).toString());\n     }\n \n+    public int getNumDeletePartitions() {\n+      return Integer.valueOf(configsMap.getOrDefault(NUM_PARTITIONS_DELETE, 1).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTkzOTI2OnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/UpsertNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1NTowMFrOHoAKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1NTowMFrOHoAKhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNzc4Mg==", "bodyText": "Nit: revert whitespace changes", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511707782", "createdAt": "2020-10-26T03:55:00Z", "author": {"login": "n3nash"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/UpsertNode.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.apache.hudi.integ.testsuite.HoodieTestSuiteWriter;\n import org.apache.hudi.integ.testsuite.configuration.DeltaConfig.Config;\n import org.apache.hudi.integ.testsuite.generator.DeltaGenerator;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTk0MzQ1OnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1Nzo1MlrOHoAMwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzo1ODoxMlrOHoANBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwODM1NA==", "bodyText": "Should this be renamed from adjustedRDD to something else ?", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511708354", "createdAt": "2020-10-26T03:57:52Z", "author": {"login": "n3nash"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java", "diffHunk": "@@ -155,6 +156,42 @@ public DeltaGenerator(DeltaConfig deltaOutputConfig, JavaSparkContext jsc, Spark\n     }\n   }\n \n+  public JavaRDD<GenericRecord> generateDeletes(Config config) throws IOException {\n+    if (deltaOutputConfig.getDeltaOutputMode() == DeltaOutputMode.DFS) {\n+      DeltaInputReader deltaInputReader = null;\n+      JavaRDD<GenericRecord> adjustedRDD = null;\n+\n+      if (config.getNumDeletePartitions() < 1) {\n+        // randomly generate deletes for a given number of records without regard to partitions and files\n+        deltaInputReader = new DFSAvroDeltaInputReader(sparkSession, schemaStr,\n+            ((DFSDeltaConfig) deltaOutputConfig).getDeltaBasePath(), Option.empty(), Option.empty());\n+        adjustedRDD = deltaInputReader.read(config.getNumRecordsDelete());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwODQyMg==", "bodyText": "Ohh I see, you are trying to reduce number of variables used...", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511708422", "createdAt": "2020-10-26T03:58:12Z", "author": {"login": "n3nash"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java", "diffHunk": "@@ -155,6 +156,42 @@ public DeltaGenerator(DeltaConfig deltaOutputConfig, JavaSparkContext jsc, Spark\n     }\n   }\n \n+  public JavaRDD<GenericRecord> generateDeletes(Config config) throws IOException {\n+    if (deltaOutputConfig.getDeltaOutputMode() == DeltaOutputMode.DFS) {\n+      DeltaInputReader deltaInputReader = null;\n+      JavaRDD<GenericRecord> adjustedRDD = null;\n+\n+      if (config.getNumDeletePartitions() < 1) {\n+        // randomly generate deletes for a given number of records without regard to partitions and files\n+        deltaInputReader = new DFSAvroDeltaInputReader(sparkSession, schemaStr,\n+            ((DFSDeltaConfig) deltaOutputConfig).getDeltaBasePath(), Option.empty(), Option.empty());\n+        adjustedRDD = deltaInputReader.read(config.getNumRecordsDelete());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwODM1NA=="}, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTk0NzIyOnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDowMDo1MlrOHoAO8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDowMDo1MlrOHoAO8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwODkxNA==", "bodyText": "Make this an inline else-if ?", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511708914", "createdAt": "2020-10-26T04:00:52Z", "author": {"login": "n3nash"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -130,43 +132,60 @@ public GenericRecord getUpdatePayload(GenericRecord record, List<String> blackli\n   }\n \n   /**\n-   * Create a new {@link GenericRecord} with random values. Not all the fields have value, it is random, and its value\n-   * is random too.\n+   * Create a new {@link GenericRecord} with random values. Not all the fields have value, it is random, and its value is random too.\n    *\n    * @param schema Schema to create with.\n    * @return A {@link GenericRecord} with random value.\n    */\n   protected GenericRecord convertPartial(Schema schema) {\n     GenericRecord result = new GenericData.Record(schema);\n     for (Schema.Field f : schema.getFields()) {\n-      boolean setNull = random.nextBoolean();\n-      if (!setNull) {\n-        result.put(f.name(), typeConvert(f));\n+      if (f.name().equals(DEFAULT_HOODIE_IS_DELETED_COL)) {\n+        result.put(f.name(), false);\n       } else {\n-        result.put(f.name(), null);\n+        boolean setNull = random.nextBoolean();\n+        if (!setNull) {\n+          result.put(f.name(), typeConvert(f));\n+        } else {\n+          result.put(f.name(), null);\n+        }\n       }\n     }\n     // TODO : pack remaining bytes into a complex field\n     return result;\n   }\n \n   /**\n-   * Set random value to {@link GenericRecord} according to the schema type of field.\n-   * The field in blacklist will not be set.\n+   * Set random value to {@link GenericRecord} according to the schema type of field. The field in blacklist will not be set.\n    *\n-   * @param record          GenericRecord to randomize.\n+   * @param record GenericRecord to randomize.\n    * @param blacklistFields blacklistFields where the filed will not be randomized.\n    * @return Randomized GenericRecord.\n    */\n   protected GenericRecord randomize(GenericRecord record, List<String> blacklistFields) {\n     for (Schema.Field f : record.getSchema().getFields()) {\n-      if (blacklistFields == null || !blacklistFields.contains(f.name())) {\n-        record.put(f.name(), typeConvert(f));\n+      if (f.name().equals(DEFAULT_HOODIE_IS_DELETED_COL)) {\n+        record.put(f.name(), false);\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTk0ODcwOnYy", "diffSide": "RIGHT", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/writer/DFSDeltaWriterAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDowMjowN1rOHoAPzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDowMjowN1rOHoAPzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwOTEzNA==", "bodyText": "Should these be uncommented or removed ?", "url": "https://github.com/apache/hudi/pull/2172#discussion_r511709134", "createdAt": "2020-10-26T04:02:07Z", "author": {"login": "n3nash"}, "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/writer/DFSDeltaWriterAdapter.java", "diffHunk": "@@ -40,10 +40,12 @@ public DFSDeltaWriterAdapter(DeltaInputWriter<GenericRecord> deltaInputGenerator\n   @Override\n   public List<DeltaWriteStats> write(Iterator<GenericRecord> input) throws IOException {\n     while (input.hasNext()) {\n+      //GenericRecord next = input.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8832628562139b75906c9cff38edecac215b1669"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4088, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}