{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjQyNDkw", "number": 1473, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1MDoxMVrODtu95Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzowMzoxNVrODtvJiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjgyMDIxOnYy", "diffSide": "LEFT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/RocksDBDAO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1MDoxMVrOF_VZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NjoyM1rOGDAU3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTI3Nw==", "bodyText": "What if getRocksDB is called repetitively ? It should not init() every time, do we plan to add a different check in init to allow for better code coverage ?", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401955277", "createdAt": "2020-04-01T22:50:11Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/RocksDBDAO.java", "diffHunk": "@@ -75,9 +75,6 @@ public RocksDBDAO(String basePath, String rocksDBBasePath) {\n    * Create RocksDB if not initialized.\n    */\n   private RocksDB getRocksDB() {\n-    if (null == rocksDB) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NTQxMg==", "bodyText": "i looked at the entire code. it seems like init()  gets called from the only constructor in this class. so there will never be a case where rocksDB == null. this code seemed redundant and was never going to get called. that's why removed it. without this code, we are just going to return the rocksDB instance everytime without checking. Also checked the code and there is no where the variable is being set to null", "url": "https://github.com/apache/hudi/pull/1473#discussion_r402445412", "createdAt": "2020-04-02T16:26:29Z", "author": {"login": "ramachandranms"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/RocksDBDAO.java", "diffHunk": "@@ -75,9 +75,6 @@ public RocksDBDAO(String basePath, String rocksDBBasePath) {\n    * Create RocksDB if not initialized.\n    */\n   private RocksDB getRocksDB() {\n-    if (null == rocksDB) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTI3Nw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4OTM3Mg==", "bodyText": "sounds good, thanks for the explanation", "url": "https://github.com/apache/hudi/pull/1473#discussion_r403189372", "createdAt": "2020-04-03T17:47:50Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/RocksDBDAO.java", "diffHunk": "@@ -75,9 +75,6 @@ public RocksDBDAO(String basePath, String rocksDBBasePath) {\n    * Create RocksDB if not initialized.\n    */\n   private RocksDB getRocksDB() {\n-    if (null == rocksDB) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTI3Nw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDI1NQ==", "bodyText": "refactored the code as you requested. lmk if this can be merged. thanks", "url": "https://github.com/apache/hudi/pull/1473#discussion_r405804255", "createdAt": "2020-04-08T20:46:23Z", "author": {"login": "ramachandranms"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/RocksDBDAO.java", "diffHunk": "@@ -75,9 +75,6 @@ public RocksDBDAO(String basePath, String rocksDBBasePath) {\n    * Create RocksDB if not initialized.\n    */\n   private RocksDB getRocksDB() {\n-    if (null == rocksDB) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTI3Nw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjgyMjYxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestRocksDBManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1MToxNVrOF_VbTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTozMTo1NlrOGAlaaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTY2MQ==", "bodyText": "can we make this log ? if there is already an assert, this might not be needed", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401955661", "createdAt": "2020-04-01T22:51:15Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestRocksDBManager.java", "diffHunk": "@@ -99,25 +104,119 @@ public void testRocksDBManager() {\n         List<Pair<String, Payload>> gotPayloads =\n             dbManager.<Payload>prefixSearch(family, prefix).collect(Collectors.toList());\n         Integer expCount = countsMap.get(family).get(prefix);\n+        System.out.printf(\"%s,%s: %d, %d\\n\", prefix, family, expCount == null ? 0L : expCount.longValue(), gotPayloads.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NjE1NQ==", "bodyText": "this was just a debug statement. so removed it", "url": "https://github.com/apache/hudi/pull/1473#discussion_r403266155", "createdAt": "2020-04-03T19:31:56Z", "author": {"login": "ramachandranms"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestRocksDBManager.java", "diffHunk": "@@ -99,25 +104,119 @@ public void testRocksDBManager() {\n         List<Pair<String, Payload>> gotPayloads =\n             dbManager.<Payload>prefixSearch(family, prefix).collect(Collectors.toList());\n         Integer expCount = countsMap.get(family).get(prefix);\n+        System.out.printf(\"%s,%s: %d, %d\\n\", prefix, family, expCount == null ? 0L : expCount.longValue(), gotPayloads.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTY2MQ=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mjg0MzgwOnYy", "diffSide": "RIGHT", "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzowMDoxNFrOF_VoRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo0ODo1M1rOF_0Okg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1ODk4MA==", "bodyText": "Can you add comments for each of the tests you have added to explain what you are trying to test here ? Especially with the mock, it is unclear to a new reader", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401958980", "createdAt": "2020-04-01T23:00:14Z", "author": {"login": "n3nash"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hadoop.realtime;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.AdditionalMatchers.aryEq;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyByte;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+\n+public class TestHoodieRealtimeFileSplit {\n+\n+  private HoodieRealtimeFileSplit split;\n+  private String basePath = \"/tmp\";\n+  private List<String> deltaLogPaths = Collections.singletonList(\"/tmp/1.log\");\n+  private FileSplit baseFileSplit = new FileSplit(new Path(\"/tmp\", \"test.file\"), 0, 100, new String[]{});\n+  private String maxCommitTime = \"10001\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    split = new HoodieRealtimeFileSplit(baseFileSplit, basePath, deltaLogPaths, maxCommitTime);\n+  }\n+\n+  @Test\n+  public void write() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MDMwNg==", "bodyText": "added comments", "url": "https://github.com/apache/hudi/pull/1473#discussion_r402460306", "createdAt": "2020-04-02T16:48:53Z", "author": {"login": "ramachandranms"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hadoop.realtime;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.AdditionalMatchers.aryEq;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyByte;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+\n+public class TestHoodieRealtimeFileSplit {\n+\n+  private HoodieRealtimeFileSplit split;\n+  private String basePath = \"/tmp\";\n+  private List<String> deltaLogPaths = Collections.singletonList(\"/tmp/1.log\");\n+  private FileSplit baseFileSplit = new FileSplit(new Path(\"/tmp\", \"test.file\"), 0, 100, new String[]{});\n+  private String maxCommitTime = \"10001\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    split = new HoodieRealtimeFileSplit(baseFileSplit, basePath, deltaLogPaths, maxCommitTime);\n+  }\n+\n+  @Test\n+  public void write() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1ODk4MA=="}, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mjg1MDAzOnYy", "diffSide": "RIGHT", "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzowMzoxNVrOF_VsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzo0OToxMFrOGAgzVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1OTk5Mg==", "bodyText": "Take a look at https://github.com/apache/incubator-hudi/blob/master/hudi-common/src/test/java/org/apache/hudi/common/HoodieCommonTestHarness.java#L48 to better initialize things like basePath and other variables that you intend to use throughout the execution of the test", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401959992", "createdAt": "2020-04-01T23:03:15Z", "author": {"login": "n3nash"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hadoop.realtime;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.AdditionalMatchers.aryEq;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyByte;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+\n+public class TestHoodieRealtimeFileSplit {\n+\n+  private HoodieRealtimeFileSplit split;\n+  private String basePath = \"/tmp\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0OTM0Nw==", "bodyText": "this is a pure unit test and everything that happens is within the context of this class. all the variables used here are just dummy paths. since i am doing checks on the length of data written down the call stack, it will be hard to validate things if we use temporary folder names given by the testing framework.", "url": "https://github.com/apache/hudi/pull/1473#discussion_r402449347", "createdAt": "2020-04-02T16:32:24Z", "author": {"login": "ramachandranms"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hadoop.realtime;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.AdditionalMatchers.aryEq;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyByte;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+\n+public class TestHoodieRealtimeFileSplit {\n+\n+  private HoodieRealtimeFileSplit split;\n+  private String basePath = \"/tmp\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1OTk5Mg=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5MDYxMg==", "bodyText": "The path is something you can keep in a temporary variable in a @BeforeClass or @before, it's best to use that or if you prefer use the TemporaryFolder from junit -> would like to avoid hard-coded temp paths used for testing", "url": "https://github.com/apache/hudi/pull/1473#discussion_r403190612", "createdAt": "2020-04-03T17:49:10Z", "author": {"login": "n3nash"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hadoop.realtime;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.AdditionalMatchers.aryEq;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyByte;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+\n+public class TestHoodieRealtimeFileSplit {\n+\n+  private HoodieRealtimeFileSplit split;\n+  private String basePath = \"/tmp\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1OTk5Mg=="}, "originalCommit": null, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4735, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}