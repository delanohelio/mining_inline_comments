{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTQ1MDAx", "number": 2281, "title": "[HUDI-1418] Set up flink client unit test infra", "bodyText": "What is the purpose of the pull request\nAdd unit test infra to flink client\nBrief change log\n\nAdded HoodieFlinkTestHarness\nAdded Unit test for JsonStringToHoodieRecordMapFunction\nRefactor HoodieWriteableTestTable to remove Spark components\n\nVerify this pull request\nTODO\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-11-25T15:58:35Z", "url": "https://github.com/apache/hudi/pull/2281", "merged": true, "mergeCommit": {"oid": "c5e8a024f6a2169f8d6256039de00a44fdb2f5a0"}, "closed": true, "closedAt": "2020-12-31T00:57:22Z", "author": {"login": "garyli1019"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgMa0dABqjQwNDA4NzE1NjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrQbiIAFqTU2MDA3MzM5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ed9fd1dded5a9c525c3b343a3569901495f23b7", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/4ed9fd1dded5a9c525c3b343a3569901495f23b7", "committedDate": "2020-11-25T15:52:29Z", "message": "[HUDI-1418] set up flink client unit test infra"}, "afterCommit": {"oid": "72cfa3f4bb2029ce3682a0a48c8c221378dfc698", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/72cfa3f4bb2029ce3682a0a48c8c221378dfc698", "committedDate": "2020-11-26T05:50:46Z", "message": "[HUDI-1418] set up flink client unit test infra"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72cfa3f4bb2029ce3682a0a48c8c221378dfc698", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/72cfa3f4bb2029ce3682a0a48c8c221378dfc698", "committedDate": "2020-11-26T05:50:46Z", "message": "[HUDI-1418] set up flink client unit test infra"}, "afterCommit": {"oid": "29903844aeb9b13067e33f4c65c26c1692014449", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/29903844aeb9b13067e33f4c65c26c1692014449", "committedDate": "2020-12-08T13:05:35Z", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29903844aeb9b13067e33f4c65c26c1692014449", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/29903844aeb9b13067e33f4c65c26c1692014449", "committedDate": "2020-12-08T13:05:35Z", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>"}, "afterCommit": {"oid": "5b5e2fd36f4ffa6cb142f9d2d126a0a13eecb3e6", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/5b5e2fd36f4ffa6cb142f9d2d126a0a13eecb3e6", "committedDate": "2020-12-10T08:40:39Z", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b5e2fd36f4ffa6cb142f9d2d126a0a13eecb3e6", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/5b5e2fd36f4ffa6cb142f9d2d126a0a13eecb3e6", "committedDate": "2020-12-10T08:40:39Z", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>"}, "afterCommit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/f58a7b737e9d7f3ca6119950c665b77823dc94f9", "committedDate": "2020-12-14T14:11:01Z", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MzMyNzMz", "url": "https://github.com/apache/hudi/pull/2281#pullrequestreview-554332733", "createdAt": "2020-12-17T07:19:05Z", "commit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzoxOTowNVrOIHnyUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzoyNjo0N1rOIHn_Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg2MjgwMg==", "bodyText": "Hi @garyli1019 , thanks for adding flink unit test infra.\nhow about enhancing HoodieWriteConfig instead of adding HoodieDataSourceConfig, it seems they have lots in common", "url": "https://github.com/apache/hudi/pull/2281#discussion_r544862802", "createdAt": "2020-12-17T07:19:05Z", "author": {"login": "wangxianghu"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieDataSourceConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.config;\n+\n+import org.apache.hudi.common.config.DefaultHoodieConfig;\n+import org.apache.hudi.common.model.OverwriteWithLatestAvroPayload;\n+import org.apache.hudi.keygen.SimpleAvroKeyGenerator;\n+import org.apache.hudi.keygen.constant.KeyGeneratorOptions;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+public class HoodieDataSourceConfig extends DefaultHoodieConfig {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg2NjE0Ng==", "bodyText": "Most of these options have been defined in DataSourceOptions, I have been planning to move them to hudi-client-common (https://issues.apache.org/jira/browse/HUDI-1438), till then we can reuse these options.\nDo you mind waiting for a while, we can continue this PR when HUDI-1438 is finished\nWDYT \uff1f", "url": "https://github.com/apache/hudi/pull/2281#discussion_r544866146", "createdAt": "2020-12-17T07:26:47Z", "author": {"login": "wangxianghu"}, "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/config/HoodieDataSourceConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.config;\n+\n+import org.apache.hudi.common.config.DefaultHoodieConfig;\n+import org.apache.hudi.common.model.OverwriteWithLatestAvroPayload;\n+import org.apache.hudi.keygen.SimpleAvroKeyGenerator;\n+import org.apache.hudi.keygen.constant.KeyGeneratorOptions;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+public class HoodieDataSourceConfig extends DefaultHoodieConfig {\n+\n+  public static final String TABLE_NAME_PROP = HoodieWriteConfig.TABLE_NAME;\n+  public static final String PRECOMBINE_FIELD_PROP = \"hoodie.datasource.write.precombine.field\";\n+  public static final String RECORDKEY_FIELD_PROP = KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY;\n+  public static final String PARTITIONPATH_FIELD_PROP = KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY;\n+\n+  public static final String WRITE_PAYLOAD_CLASS = \"hoodie.datasource.write.payload.class\";\n+  public static final String DEFAULT_WRITE_PAYLOAD_CLASS = OverwriteWithLatestAvroPayload.class.getName();\n+  public static final String KEYGENERATOR_CLASS_PROP = \"hoodie.datasource.write.keygenerator.class\";\n+  public static final String DEFAULT_KEYGENERATOR_CLASS = SimpleAvroKeyGenerator.class.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDc2OTIz", "url": "https://github.com/apache/hudi/pull/2281#pullrequestreview-554476923", "createdAt": "2020-12-17T10:38:02Z", "commit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDozODowM1rOIHvQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDozOTowN1rOIHvSkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NTA5NA==", "bodyText": "There are many fields that have not been used. Can we add them when we would use them?", "url": "https://github.com/apache/hudi/pull/2281#discussion_r544985094", "createdAt": "2020-12-17T10:38:03Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-flink-client/src/test/java/org/apache/hudi/testutils/HoodieFlinkClientTestHarness.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.client.HoodieFlinkWriteClient;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.test.util.MiniClusterWithClientResource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HoodieFlinkClientTestHarness extends HoodieCommonTestHarness implements Serializable {\n+\n+  protected static final Logger LOG = LogManager.getLogger(HoodieFlinkClientTestHarness.class);\n+  private String testMethodName;\n+  protected transient Configuration hadoopConf = null;\n+  protected transient FileSystem fs;\n+  protected transient HoodieFlinkWriteClient writeClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NTc0Nw==", "bodyText": "Since this method has been deprecated. Can we use the normal one?", "url": "https://github.com/apache/hudi/pull/2281#discussion_r544985747", "createdAt": "2020-12-17T10:39:07Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-flink-client/src/test/java/org/apache/hudi/testutils/HoodieFlinkClientTestHarness.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.client.HoodieFlinkWriteClient;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.test.util.MiniClusterWithClientResource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HoodieFlinkClientTestHarness extends HoodieCommonTestHarness implements Serializable {\n+\n+  protected static final Logger LOG = LogManager.getLogger(HoodieFlinkClientTestHarness.class);\n+  private String testMethodName;\n+  protected transient Configuration hadoopConf = null;\n+  protected transient FileSystem fs;\n+  protected transient HoodieFlinkWriteClient writeClient;\n+  protected transient HoodieTableFileSystemView tableView;\n+  protected transient MiniClusterWithClientResource flinkCluster = null;\n+\n+  // dfs\n+  protected String dfsBasePath;\n+  protected transient HdfsTestService hdfsTestService;\n+  protected transient MiniDFSCluster dfsCluster;\n+  protected transient DistributedFileSystem dfs;\n+\n+  @BeforeEach\n+  public void setTestMethodName(TestInfo testInfo) {\n+    if (testInfo.getTestMethod().isPresent()) {\n+      testMethodName = testInfo.getTestMethod().get().getName();\n+    } else {\n+      testMethodName = \"Unknown\";\n+    }\n+  }\n+\n+  protected void initFlinkMiniCluster() {\n+    flinkCluster = new MiniClusterWithClientResource(\n+        new MiniClusterResourceConfiguration.Builder()\n+            .setNumberSlotsPerTaskManager(2)\n+            .setNumberTaskManagers(1)\n+            .build());\n+  }\n+\n+  protected void initFileSystem() {\n+    hadoopConf = new Configuration();\n+    initFileSystemWithConfiguration(hadoopConf);\n+  }\n+\n+  private void initFileSystemWithConfiguration(Configuration configuration) {\n+    if (basePath == null) {\n+      throw new IllegalStateException(\"The base path has not been initialized.\");\n+    }\n+    fs = FSUtils.getFs(basePath, configuration);\n+    if (fs instanceof LocalFileSystem) {\n+      LocalFileSystem lfs = (LocalFileSystem) fs;\n+      // With LocalFileSystem, with checksum disabled, fs.open() returns an inputStream which is FSInputStream\n+      // This causes ClassCastExceptions in LogRecordScanner (and potentially other places) calling fs.open\n+      // So, for the tests, we enforce checksum verification to circumvent the problem\n+      lfs.setVerifyChecksum(true);\n+    }\n+  }\n+\n+  /**\n+   * Initializes an instance of {@link HoodieTableMetaClient} with a special table type specified by\n+   * {@code getTableType()}.\n+   *\n+   * @throws IOException\n+   */\n+  protected void initMetaClient() throws IOException {\n+    initMetaClient(getTableType());\n+  }\n+\n+  protected void initMetaClient(HoodieTableType tableType) throws IOException {\n+    if (basePath == null) {\n+      throw new IllegalStateException(\"The base path has not been initialized.\");\n+    }\n+    metaClient = HoodieTestUtils.init(hadoopConf, basePath, tableType);\n+  }\n+\n+\n+  /**\n+   * Cleanups file system.\n+   *\n+   * @throws IOException\n+   */\n+  protected void cleanupFileSystem() throws IOException {\n+    if (fs != null) {\n+      LOG.warn(\"Closing file-system instance used in previous test-run\");\n+      fs.close();\n+      fs = null;\n+    }\n+  }\n+\n+  protected void cleanupFlinkMiniCluster() {\n+    if (flinkCluster != null) {\n+      flinkCluster.after();\n+      flinkCluster = null;\n+    }\n+  }\n+\n+  public static class SimpleSink implements SinkFunction<HoodieRecord> {\n+\n+    // must be static\n+    public static List<HoodieRecord> valuesList = new ArrayList<>();\n+\n+    @Override\n+    public synchronized void invoke(HoodieRecord value) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3c9a8d84fe176f7374fa4d6228771e6cce66fa1", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/e3c9a8d84fe176f7374fa4d6228771e6cce66fa1", "committedDate": "2020-12-23T15:43:55Z", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f58a7b737e9d7f3ca6119950c665b77823dc94f9", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/f58a7b737e9d7f3ca6119950c665b77823dc94f9", "committedDate": "2020-12-14T14:11:01Z", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>"}, "afterCommit": {"oid": "47e7bff5653047351ea61e4572141254eb9ea568", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/47e7bff5653047351ea61e4572141254eb9ea568", "committedDate": "2020-12-23T16:24:53Z", "message": "Move datasource config to HoodieWriteConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDEyNTIz", "url": "https://github.com/apache/hudi/pull/2281#pullrequestreview-560012523", "createdAt": "2020-12-30T11:34:49Z", "commit": {"oid": "47e7bff5653047351ea61e4572141254eb9ea568"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozNDo1MFrOIMrUGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTo0NDo1OFrOIMrfEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MzQ4MQ==", "bodyText": "Why do we need to move this code snippet from HoodieClientTestHarness in this PR?", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550163481", "createdAt": "2020-12-30T11:34:50Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "diffHunk": "@@ -52,6 +53,24 @@ protected void initPath() {\n     }\n   }\n \n+  /**\n+   * Initializes a test data generator which used to generate test datas.\n+   *\n+   */\n+  protected void initTestDataGenerator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e7bff5653047351ea61e4572141254eb9ea568"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2NDA5NA==", "bodyText": "Test suite or Test frameworks sounds better?", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550164094", "createdAt": "2020-12-30T11:36:47Z", "author": {"login": "yanghua"}, "path": "hudi-flink/pom.xml", "diffHunk": "@@ -173,5 +173,102 @@\n       <artifactId>bijection-avro_${scala.binary.version}</artifactId>\n       <version>0.9.7</version>\n     </dependency>\n+\n+    <!-- Test -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e7bff5653047351ea61e4572141254eb9ea568"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2NTY4Nw==", "bodyText": "SimpleTestSinkFunction  sounds better?", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550165687", "createdAt": "2020-12-30T11:42:52Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-flink-client/src/test/java/org/apache/hudi/testutils/HoodieFlinkClientTestHarness.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.test.util.MiniClusterWithClientResource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HoodieFlinkClientTestHarness extends HoodieCommonTestHarness implements Serializable {\n+\n+  protected static final Logger LOG = LogManager.getLogger(HoodieFlinkClientTestHarness.class);\n+  private String testMethodName;\n+  protected transient Configuration hadoopConf = null;\n+  protected transient FileSystem fs;\n+  protected transient MiniClusterWithClientResource flinkCluster = null;\n+\n+  @BeforeEach\n+  public void setTestMethodName(TestInfo testInfo) {\n+    if (testInfo.getTestMethod().isPresent()) {\n+      testMethodName = testInfo.getTestMethod().get().getName();\n+    } else {\n+      testMethodName = \"Unknown\";\n+    }\n+  }\n+\n+  protected void initFlinkMiniCluster() {\n+    flinkCluster = new MiniClusterWithClientResource(\n+        new MiniClusterResourceConfiguration.Builder()\n+            .setNumberSlotsPerTaskManager(2)\n+            .setNumberTaskManagers(1)\n+            .build());\n+  }\n+\n+  protected void initFileSystem() {\n+    hadoopConf = new Configuration();\n+    initFileSystemWithConfiguration(hadoopConf);\n+  }\n+\n+  private void initFileSystemWithConfiguration(Configuration configuration) {\n+    if (basePath == null) {\n+      throw new IllegalStateException(\"The base path has not been initialized.\");\n+    }\n+    fs = FSUtils.getFs(basePath, configuration);\n+    if (fs instanceof LocalFileSystem) {\n+      LocalFileSystem lfs = (LocalFileSystem) fs;\n+      // With LocalFileSystem, with checksum disabled, fs.open() returns an inputStream which is FSInputStream\n+      // This causes ClassCastExceptions in LogRecordScanner (and potentially other places) calling fs.open\n+      // So, for the tests, we enforce checksum verification to circumvent the problem\n+      lfs.setVerifyChecksum(true);\n+    }\n+  }\n+\n+  /**\n+   * Initializes an instance of {@link HoodieTableMetaClient} with a special table type specified by\n+   * {@code getTableType()}.\n+   *\n+   * @throws IOException\n+   */\n+  protected void initMetaClient() throws IOException {\n+    initMetaClient(getTableType());\n+  }\n+\n+  protected void initMetaClient(HoodieTableType tableType) throws IOException {\n+    if (basePath == null) {\n+      throw new IllegalStateException(\"The base path has not been initialized.\");\n+    }\n+    metaClient = HoodieTestUtils.init(hadoopConf, basePath, tableType);\n+  }\n+\n+\n+  /**\n+   * Cleanups file system.\n+   *\n+   * @throws IOException\n+   */\n+  protected void cleanupFileSystem() throws IOException {\n+    if (fs != null) {\n+      LOG.warn(\"Closing file-system instance used in previous test-run\");\n+      fs.close();\n+      fs = null;\n+    }\n+  }\n+\n+  protected void cleanupFlinkMiniCluster() {\n+    if (flinkCluster != null) {\n+      flinkCluster.after();\n+      flinkCluster = null;\n+    }\n+  }\n+\n+  public static class SimpleSink implements SinkFunction<HoodieRecord> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e7bff5653047351ea61e4572141254eb9ea568"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2NjI4OA==", "bodyText": "Can we reuse the first constructor?", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550166288", "createdAt": "2020-12-30T11:44:58Z", "author": {"login": "yanghua"}, "path": "hudi-flink/src/main/java/org/apache/hudi/source/JsonStringToHoodieRecordMapFunction.java", "diffHunk": "@@ -40,32 +43,47 @@\n  */\n public class JsonStringToHoodieRecordMapFunction implements MapFunction<String, HoodieRecord> {\n \n-  private final HoodieFlinkStreamer.Config cfg;\n+  private TypedProperties props;\n   private KeyGenerator keyGenerator;\n   private AvroConvertor avroConvertor;\n+  private Option<String> schemaStr = Option.empty();\n+  private String payloadClassName;\n+  private String orderingField;\n \n-  public JsonStringToHoodieRecordMapFunction(HoodieFlinkStreamer.Config cfg) {\n-    this.cfg = cfg;\n+  public JsonStringToHoodieRecordMapFunction(TypedProperties props) {\n+    this.props = props;\n+    init();\n+  }\n+\n+  public JsonStringToHoodieRecordMapFunction(TypedProperties props, String schemaStr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e7bff5653047351ea61e4572141254eb9ea568"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "committedDate": "2020-12-30T13:26:58Z", "message": "Move datasource config to HoodieWriteConfig"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47e7bff5653047351ea61e4572141254eb9ea568", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/47e7bff5653047351ea61e4572141254eb9ea568", "committedDate": "2020-12-23T16:24:53Z", "message": "Move datasource config to HoodieWriteConfig"}, "afterCommit": {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "author": {"user": {"login": "garyli1019", "name": "Gary Li"}}, "url": "https://github.com/apache/hudi/commit/3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "committedDate": "2020-12-30T13:26:58Z", "message": "Move datasource config to HoodieWriteConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDczMzk2", "url": "https://github.com/apache/hudi/pull/2281#pullrequestreview-560073396", "createdAt": "2020-12-30T14:38:37Z", "commit": {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDozODozN1rOIMuiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDo0MTozMVrOIMumEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNjI4OQ==", "bodyText": "This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550216289", "createdAt": "2020-12-30T14:38:37Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-client-common/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -104,29 +80,7 @@ public HoodieWriteableTestTable forCommit(String instantTime) {\n     return (HoodieWriteableTestTable) super.forCommit(instantTime);\n   }\n \n-  public String getFileIdWithInserts(String partition) throws Exception {\n-    return getFileIdWithInserts(partition, new HoodieRecord[0]);\n-  }\n-\n-  public String getFileIdWithInserts(String partition, HoodieRecord... records) throws Exception {\n-    return getFileIdWithInserts(partition, Arrays.asList(records));\n-  }\n-\n-  public String getFileIdWithInserts(String partition, List<HoodieRecord> records) throws Exception {\n-    String fileId = UUID.randomUUID().toString();\n-    withInserts(partition, fileId, records);\n-    return fileId;\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId) throws Exception {\n-    return withInserts(partition, fileId, new HoodieRecord[0]);\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, HoodieRecord... records) throws Exception {\n-    return withInserts(partition, fileId, Arrays.asList(records));\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records) throws Exception {\n+  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records, TaskContextSupplier contextSupplier) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNjMwNA==", "bodyText": "This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550216304", "createdAt": "2020-12-30T14:38:39Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-client-common/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -104,29 +80,7 @@ public HoodieWriteableTestTable forCommit(String instantTime) {\n     return (HoodieWriteableTestTable) super.forCommit(instantTime);\n   }\n \n-  public String getFileIdWithInserts(String partition) throws Exception {\n-    return getFileIdWithInserts(partition, new HoodieRecord[0]);\n-  }\n-\n-  public String getFileIdWithInserts(String partition, HoodieRecord... records) throws Exception {\n-    return getFileIdWithInserts(partition, Arrays.asList(records));\n-  }\n-\n-  public String getFileIdWithInserts(String partition, List<HoodieRecord> records) throws Exception {\n-    String fileId = UUID.randomUUID().toString();\n-    withInserts(partition, fileId, records);\n-    return fileId;\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId) throws Exception {\n-    return withInserts(partition, fileId, new HoodieRecord[0]);\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, HoodieRecord... records) throws Exception {\n-    return withInserts(partition, fileId, Arrays.asList(records));\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records) throws Exception {\n+  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records, TaskContextSupplier contextSupplier) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNzIzMg==", "bodyText": "It would be better to split the non-static and static fields, moreover, it is a logger.", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550217232", "createdAt": "2020-12-30T14:41:31Z", "author": {"login": "yanghua"}, "path": "hudi-client/hudi-flink-client/src/test/java/org/apache/hudi/testutils/HoodieFlinkClientTestHarness.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.test.util.MiniClusterWithClientResource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HoodieFlinkClientTestHarness extends HoodieCommonTestHarness implements Serializable {\n+\n+  protected static final Logger LOG = LogManager.getLogger(HoodieFlinkClientTestHarness.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4364, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}