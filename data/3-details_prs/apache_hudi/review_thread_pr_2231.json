{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDY3MDI5", "number": 2231, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTozNDozNlrOE8C3Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTo1NTozMFrOE8DAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzk2OTAzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTozNDozNlrOH39TZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTowOTo1NFrOH8fXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODExOQ==", "bodyText": "Not directly related to this PR. But given we are now actually evolving this code. Does it make sense to declare all the MemoryLayoutSpecification objects as descriptively named classes? That way this method is very readable.  Food for thought.", "url": "https://github.com/apache/hudi/pull/2231#discussion_r528438119", "createdAt": "2020-11-23T01:34:36Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "diffHunk": "@@ -328,54 +328,53 @@ private static long getPrimitiveFieldSize(Class<?> type) {\n   static MemoryLayoutSpecification getEffectiveMemoryLayoutSpecification() {\n     final String vmName = System.getProperty(\"java.vm.name\");\n     if (vmName == null || !(vmName.startsWith(\"Java HotSpot(TM) \") || vmName.startsWith(\"OpenJDK\")\n-        || vmName.startsWith(\"TwitterJDK\"))) {\n-      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot VM\");\n+        || vmName.startsWith(\"TwitterJDK\") || vmName.startsWith(\"Eclipse OpenJ9\"))) {\n+      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot or Eclipse OpenJ9 VMs\");\n     }\n \n-    final String dataModel = System.getProperty(\"sun.arch.data.model\");\n-    if (\"32\".equals(dataModel)) {\n-      // Running with 32-bit data model\n-      return new MemoryLayoutSpecification() {\n-        @Override\n-        public int getArrayHeaderSize() {\n-          return 12;\n-        }\n+    final String strVmVersion = System.getProperty(\"java.vm.version\");\n+    // Support for OpenJ9 JVM\n+    if (strVmVersion.startsWith(\"openj9\")) {\n+      final String dataModel = System.getProperty(\"sun.arch.data.model\");\n+      if (\"32\".equals(dataModel)) {\n+        // Running with 32-bit data model\n+        return new MemoryLayoutSpecification() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be93b4596ba9c28d774f8cf8025fa46f62d6c40"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc5ODUxNg==", "bodyText": "agree, wasn't sure if it was a good idea to change this as part of this PR but I am happy to make the change.\nI was thinking of having HotSpotMemoryLayoutSpecification and OpenJ9MemoryLayoutSpecification classes, both will implement the MemoryLayoutSpecification interface and will get as a parameter the dataModel that will help it to determine whether it's 32 or 64 bit.\nis this what you had in mind?\nthe downside of this is that each function will in the interface will have multiple if's inside it. for example:\n@Override\n          public int getArrayHeaderSize() {\n            if (\"32\".equals(dataModel)) {\n              return 16;\n            } // assuming here 64 bit \n            else {\n              if (maxMemory < 30L * 1024 * 1024 * 1024) {\n                return 16;\n              } else {\n                return 14;\n              }\n            }\n          }\nanother option is to have class per each combination (hotspot 32 bit, hotspot 64 bit compressed, hotspot 64 bit non compressed, openj9 32 bit, openj9 64 bit compressed, and openj9 64 bit non compressed)", "url": "https://github.com/apache/hudi/pull/2231#discussion_r528798516", "createdAt": "2020-11-23T15:44:05Z", "author": {"login": "guykhazma"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "diffHunk": "@@ -328,54 +328,53 @@ private static long getPrimitiveFieldSize(Class<?> type) {\n   static MemoryLayoutSpecification getEffectiveMemoryLayoutSpecification() {\n     final String vmName = System.getProperty(\"java.vm.name\");\n     if (vmName == null || !(vmName.startsWith(\"Java HotSpot(TM) \") || vmName.startsWith(\"OpenJDK\")\n-        || vmName.startsWith(\"TwitterJDK\"))) {\n-      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot VM\");\n+        || vmName.startsWith(\"TwitterJDK\") || vmName.startsWith(\"Eclipse OpenJ9\"))) {\n+      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot or Eclipse OpenJ9 VMs\");\n     }\n \n-    final String dataModel = System.getProperty(\"sun.arch.data.model\");\n-    if (\"32\".equals(dataModel)) {\n-      // Running with 32-bit data model\n-      return new MemoryLayoutSpecification() {\n-        @Override\n-        public int getArrayHeaderSize() {\n-          return 12;\n-        }\n+    final String strVmVersion = System.getProperty(\"java.vm.version\");\n+    // Support for OpenJ9 JVM\n+    if (strVmVersion.startsWith(\"openj9\")) {\n+      final String dataModel = System.getProperty(\"sun.arch.data.model\");\n+      if (\"32\".equals(dataModel)) {\n+        // Running with 32-bit data model\n+        return new MemoryLayoutSpecification() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODExOQ=="}, "originalCommit": {"oid": "9be93b4596ba9c28d774f8cf8025fa46f62d6c40"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NzcwOA==", "bodyText": "@guykhazma\n\nanother option is to have class per each combination (hotspot 32 bit, hotspot 64 bit compressed, hotspot 64 bit non compressed, openj9 32 bit, openj9 64 bit compressed, and openj9 64 bit non compressed)\n\nI was mulling something like this. not even parameterizing by dataModel. Just pulling all anonymous classes that exist now into named classes. So its easier to maintain. So far, we left this code as-is, given we borrowed it :)", "url": "https://github.com/apache/hudi/pull/2231#discussion_r528877708", "createdAt": "2020-11-23T17:31:02Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "diffHunk": "@@ -328,54 +328,53 @@ private static long getPrimitiveFieldSize(Class<?> type) {\n   static MemoryLayoutSpecification getEffectiveMemoryLayoutSpecification() {\n     final String vmName = System.getProperty(\"java.vm.name\");\n     if (vmName == null || !(vmName.startsWith(\"Java HotSpot(TM) \") || vmName.startsWith(\"OpenJDK\")\n-        || vmName.startsWith(\"TwitterJDK\"))) {\n-      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot VM\");\n+        || vmName.startsWith(\"TwitterJDK\") || vmName.startsWith(\"Eclipse OpenJ9\"))) {\n+      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot or Eclipse OpenJ9 VMs\");\n     }\n \n-    final String dataModel = System.getProperty(\"sun.arch.data.model\");\n-    if (\"32\".equals(dataModel)) {\n-      // Running with 32-bit data model\n-      return new MemoryLayoutSpecification() {\n-        @Override\n-        public int getArrayHeaderSize() {\n-          return 12;\n-        }\n+    final String strVmVersion = System.getProperty(\"java.vm.version\");\n+    // Support for OpenJ9 JVM\n+    if (strVmVersion.startsWith(\"openj9\")) {\n+      final String dataModel = System.getProperty(\"sun.arch.data.model\");\n+      if (\"32\".equals(dataModel)) {\n+        // Running with 32-bit data model\n+        return new MemoryLayoutSpecification() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODExOQ=="}, "originalCommit": {"oid": "9be93b4596ba9c28d774f8cf8025fa46f62d6c40"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0NjM0OA==", "bodyText": "@vinothchandar I have moved all of the memory layout implementations to be under a package called jvm along with the interface.\nwhat do you think?", "url": "https://github.com/apache/hudi/pull/2231#discussion_r528946348", "createdAt": "2020-11-23T19:31:01Z", "author": {"login": "guykhazma"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "diffHunk": "@@ -328,54 +328,53 @@ private static long getPrimitiveFieldSize(Class<?> type) {\n   static MemoryLayoutSpecification getEffectiveMemoryLayoutSpecification() {\n     final String vmName = System.getProperty(\"java.vm.name\");\n     if (vmName == null || !(vmName.startsWith(\"Java HotSpot(TM) \") || vmName.startsWith(\"OpenJDK\")\n-        || vmName.startsWith(\"TwitterJDK\"))) {\n-      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot VM\");\n+        || vmName.startsWith(\"TwitterJDK\") || vmName.startsWith(\"Eclipse OpenJ9\"))) {\n+      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot or Eclipse OpenJ9 VMs\");\n     }\n \n-    final String dataModel = System.getProperty(\"sun.arch.data.model\");\n-    if (\"32\".equals(dataModel)) {\n-      // Running with 32-bit data model\n-      return new MemoryLayoutSpecification() {\n-        @Override\n-        public int getArrayHeaderSize() {\n-          return 12;\n-        }\n+    final String strVmVersion = System.getProperty(\"java.vm.version\");\n+    // Support for OpenJ9 JVM\n+    if (strVmVersion.startsWith(\"openj9\")) {\n+      final String dataModel = System.getProperty(\"sun.arch.data.model\");\n+      if (\"32\".equals(dataModel)) {\n+        // Running with 32-bit data model\n+        return new MemoryLayoutSpecification() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODExOQ=="}, "originalCommit": {"oid": "9be93b4596ba9c28d774f8cf8025fa46f62d6c40"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MDUxOA==", "bodyText": "Hi @vinothchandar any comments?\nthanks", "url": "https://github.com/apache/hudi/pull/2231#discussion_r533190518", "createdAt": "2020-12-01T09:09:54Z", "author": {"login": "guykhazma"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "diffHunk": "@@ -328,54 +328,53 @@ private static long getPrimitiveFieldSize(Class<?> type) {\n   static MemoryLayoutSpecification getEffectiveMemoryLayoutSpecification() {\n     final String vmName = System.getProperty(\"java.vm.name\");\n     if (vmName == null || !(vmName.startsWith(\"Java HotSpot(TM) \") || vmName.startsWith(\"OpenJDK\")\n-        || vmName.startsWith(\"TwitterJDK\"))) {\n-      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot VM\");\n+        || vmName.startsWith(\"TwitterJDK\") || vmName.startsWith(\"Eclipse OpenJ9\"))) {\n+      throw new UnsupportedOperationException(\"ObjectSizeCalculator only supported on HotSpot or Eclipse OpenJ9 VMs\");\n     }\n \n-    final String dataModel = System.getProperty(\"sun.arch.data.model\");\n-    if (\"32\".equals(dataModel)) {\n-      // Running with 32-bit data model\n-      return new MemoryLayoutSpecification() {\n-        @Override\n-        public int getArrayHeaderSize() {\n-          return 12;\n-        }\n+    final String strVmVersion = System.getProperty(\"java.vm.version\");\n+    // Support for OpenJ9 JVM\n+    if (strVmVersion.startsWith(\"openj9\")) {\n+      final String dataModel = System.getProperty(\"sun.arch.data.model\");\n+      if (\"32\".equals(dataModel)) {\n+        // Running with 32-bit data model\n+        return new MemoryLayoutSpecification() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODExOQ=="}, "originalCommit": {"oid": "9be93b4596ba9c28d774f8cf8025fa46f62d6c40"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzk5Mjg0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTo1NTozMFrOH39fUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo0NDozNVrOH4TU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MTE3MA==", "bodyText": "Guess this was the original code. that only handled hotspot vm", "url": "https://github.com/apache/hudi/pull/2231#discussion_r528441170", "createdAt": "2020-11-23T01:55:30Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "diffHunk": "@@ -384,9 +383,69 @@ public int getArrayHeaderSize() {\n \n           @Override\n           public int getObjectHeaderSize() {\n+            return 4;\n+          }\n+\n+          @Override\n+          public int getObjectPadding() {\n+            return 4;\n+          }\n+\n+          @Override\n+          public int getReferenceSize() {\n+            return 4;\n+          }\n+\n+          @Override\n+          public int getSuperclassFieldPadding() {\n+            return 4;\n+          }\n+        };\n+      } else {\n+        // it's a 64-bit uncompressed references object model\n+        return new MemoryLayoutSpecification() {\n+          @Override\n+          public int getArrayHeaderSize() {\n+            return 16;\n+          }\n+\n+          @Override\n+          public int getObjectHeaderSize() {\n+            return 16;\n+          }\n+\n+          @Override\n+          public int getObjectPadding() {\n+            return 8;\n+          }\n+\n+          @Override\n+          public int getReferenceSize() {\n+            return 8;\n+          }\n+\n+          @Override\n+          public int getSuperclassFieldPadding() {\n+            return 8;\n+          }\n+        };\n+      }\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be93b4596ba9c28d774f8cf8025fa46f62d6c40"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc5ODk1NA==", "bodyText": "right, the code for hotspot vm remained the same", "url": "https://github.com/apache/hudi/pull/2231#discussion_r528798954", "createdAt": "2020-11-23T15:44:35Z", "author": {"login": "guykhazma"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ObjectSizeCalculator.java", "diffHunk": "@@ -384,9 +383,69 @@ public int getArrayHeaderSize() {\n \n           @Override\n           public int getObjectHeaderSize() {\n+            return 4;\n+          }\n+\n+          @Override\n+          public int getObjectPadding() {\n+            return 4;\n+          }\n+\n+          @Override\n+          public int getReferenceSize() {\n+            return 4;\n+          }\n+\n+          @Override\n+          public int getSuperclassFieldPadding() {\n+            return 4;\n+          }\n+        };\n+      } else {\n+        // it's a 64-bit uncompressed references object model\n+        return new MemoryLayoutSpecification() {\n+          @Override\n+          public int getArrayHeaderSize() {\n+            return 16;\n+          }\n+\n+          @Override\n+          public int getObjectHeaderSize() {\n+            return 16;\n+          }\n+\n+          @Override\n+          public int getObjectPadding() {\n+            return 8;\n+          }\n+\n+          @Override\n+          public int getReferenceSize() {\n+            return 8;\n+          }\n+\n+          @Override\n+          public int getSuperclassFieldPadding() {\n+            return 8;\n+          }\n+        };\n+      }\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MTE3MA=="}, "originalCommit": {"oid": "9be93b4596ba9c28d774f8cf8025fa46f62d6c40"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4151, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}