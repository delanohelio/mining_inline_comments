{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDkxODU5", "number": 1427, "title": "[HUDI-727]: Copy default values of fields if not present when rewriting incoming record with new schema", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nJust before actually writing record to Hudi dataset, we try to rewrite record with new Avro schema which\u00a0has Hudi metadata columns. In this function, we are only trying to get the values from record without considering field's default value. As a result, schema validation\u00a0fails.\u00a0\nThis PR takes care of considering default values of fields as well.\nBrief change log\n(for example:)\n\nModify AnnotationLocation checkstyle rule in checkstyle.xml\n\nVerify this pull request\n(Please pick either of the following options)\nThis pull request is a trivial rework / code cleanup without any test coverage.\n(or)\nThis pull request is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end.\nAdded HoodieClientWriteTest to verify the change.\nManually verified the change by running a job locally.\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-20T11:53:48Z", "url": "https://github.com/apache/hudi/pull/1427", "merged": true, "mergeCommit": {"oid": "6d7ca2cf7e441ad19d32d7a25739e454f39ed253"}, "closed": true, "closedAt": "2020-04-13T00:55:27Z", "author": {"login": "pratyakshsharma"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPfHx3AH2gAyMzkxNDkxODU5OmIzY2UwNzM3MzAwZTIxNjQyYWZhZmFlYmEzMzYyZGU4YWYxNGZhOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXEIdYAFqTM5MTkxMTE2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b3ce0737300e21642afafaeba3362de8af14fa9d", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/b3ce0737300e21642afafaeba3362de8af14fa9d", "committedDate": "2020-03-20T11:50:30Z", "message": "[HUDI-727]: Copy default values of fields if not present when rewriting incoming record with new schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "704ac03e9ed9bd777774068f732f0ca9b9e79f94", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/704ac03e9ed9bd777774068f732f0ca9b9e79f94", "committedDate": "2020-03-20T12:12:55Z", "message": "[HUDI-727]: small indentation fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTcwMTM4", "url": "https://github.com/apache/hudi/pull/1427#pullrequestreview-379970138", "createdAt": "2020-03-24T03:03:04Z", "commit": {"oid": "704ac03e9ed9bd777774068f732f0ca9b9e79f94"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMzowMzowNFrOF6feJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMzowNDo1N1rOF6ffxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NzM1MQ==", "bodyText": "So the issue seems to be that in the original record created in this way, the default values shows up as null. Even though you have specified default: dummy_val it still is showing up as null in the original record.\nDo you know why that is the case ? When we have specified the default value, why doesn't Avro put it in the record when the field is missing ?\nI tried using the builder, but that expects default values to be specified for each and every field else throws an excpetion:\nGenericRecord rec = new GenericRecordBuilder(new Schema.Parser().parse(EXAMPLE_SCHEMA)).build();\n\nDo you have more research points around why this is the case with Avro ?", "url": "https://github.com/apache/hudi/pull/1427#discussion_r396877351", "createdAt": "2020-03-24T03:03:04Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/util/TestHoodieAvroUtils.java", "diffHunk": "@@ -57,4 +60,16 @@ public void testPropsPresent() {\n     }\n     Assert.assertTrue(\"column pii_col doesn't show up\", piiPresent);\n   }\n+\n+  @Test\n+  public void testDefaultValue() {\n+    GenericRecord rec = new GenericData.Record(new Schema.Parser().parse(EXAMPLE_SCHEMA));\n+    rec.put(\"_row_key\", \"key1\");\n+    rec.put(\"non_pii_col\", \"val1\");\n+    rec.put(\"pii_col\", \"val2\");\n+    rec.put(\"timestamp\", 3.5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704ac03e9ed9bd777774068f732f0ca9b9e79f94"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3Nzc2Nw==", "bodyText": "Are you making these changes to avoid use of deprecated APIs ?", "url": "https://github.com/apache/hudi/pull/1427#discussion_r396877767", "createdAt": "2020-03-24T03:04:57Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -104,15 +103,15 @@ public static Schema addMetadataFields(Schema schema) {\n     List<Schema.Field> parentFields = new ArrayList<>();\n \n     Schema.Field commitTimeField =\n-        new Schema.Field(HoodieRecord.COMMIT_TIME_METADATA_FIELD, METADATA_FIELD_SCHEMA, \"\", NullNode.getInstance());\n+        new Schema.Field(HoodieRecord.COMMIT_TIME_METADATA_FIELD, METADATA_FIELD_SCHEMA, \"\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704ac03e9ed9bd777774068f732f0ca9b9e79f94"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e", "committedDate": "2020-03-27T15:32:41Z", "message": "[HUDI-727]: Added more test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzU2NDEz", "url": "https://github.com/apache/hudi/pull/1427#pullrequestreview-383356413", "createdAt": "2020-03-28T22:50:36Z", "commit": {"oid": "cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMjo1MDozN1rOF9M6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMzozNjowN1rOF9NIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxODk5OA==", "bodyText": "Minor: we probably should do (Object) null to force it to resolve to the new API that accepts object, because null by itself can either refer to JsonNode or an Object", "url": "https://github.com/apache/hudi/pull/1427#discussion_r399718998", "createdAt": "2020-03-28T22:50:37Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -104,15 +103,15 @@ public static Schema addMetadataFields(Schema schema) {\n     List<Schema.Field> parentFields = new ArrayList<>();\n \n     Schema.Field commitTimeField =\n-        new Schema.Field(HoodieRecord.COMMIT_TIME_METADATA_FIELD, METADATA_FIELD_SCHEMA, \"\", NullNode.getInstance());\n+        new Schema.Field(HoodieRecord.COMMIT_TIME_METADATA_FIELD, METADATA_FIELD_SCHEMA, \"\", null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3Nzc2Nw=="}, "originalCommit": {"oid": "704ac03e9ed9bd777774068f732f0ca9b9e79f94"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxOTExOQ==", "bodyText": "Shall we change this line as well to consistently use the object API ?", "url": "https://github.com/apache/hudi/pull/1427#discussion_r399719119", "createdAt": "2020-03-28T22:52:15Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -168,7 +169,7 @@ public static GenericRecord addHoodieKeyToRecord(GenericRecord record, String re\n    */\n   public static Schema appendNullSchemaFields(Schema schema, List<String> newFieldNames) {\n     List<Field> newFields = schema.getFields().stream()\n-        .map(field -> new Field(field.name(), field.schema(), field.doc(), field.defaultValue())).collect(Collectors.toList());\n+        .map(field -> new Field(field.name(), field.schema(), field.doc(), field.defaultVal())).collect(Collectors.toList());\n     for (String newField : newFieldNames) {\n       newFields.add(new Schema.Field(newField, METADATA_FIELD_SCHEMA, \"\", NullNode.getInstance()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMTAxNw==", "bodyText": "This is an internal function call that is being used by both rewriteRecordWithOnlyNewSchemaFields and rewriteRecord. getAllFieldsToWrite does not really make sense in case of rewriteRecordWithOnlyNewSchemaFields and won't really do anything in that case because old and new schema is same.\nI think it would be better to refactor rewrite to receive List<Schema.Field> fieldsToWrite as a parameter instead of schemaWithFields. In case of rewriteRecord we can call  getAllFieldsToWrite and pass its value in the parameter, while in case of rewriteRecordWithOnlyNewSchemaFields just pass schema.getFields() here.", "url": "https://github.com/apache/hudi/pull/1427#discussion_r399721017", "createdAt": "2020-03-28T23:15:52Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -204,8 +205,13 @@ public static GenericRecord rewriteRecordWithOnlyNewSchemaFields(GenericRecord r\n \n   private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFields, Schema newSchema) {\n     GenericRecord newRecord = new GenericData.Record(newSchema);\n-    for (Schema.Field f : schemaWithFields.getFields()) {\n-      newRecord.put(f.name(), record.get(f.name()));\n+    //get union of both the schemas, and then populate the fields in the new record\n+    for (Schema.Field f : getAllFieldsToWrite(schemaWithFields, newSchema)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMjExNQ==", "bodyText": "Why do we need this casting of individual data types ? It seems we can just pass field.defaultVal() as it is because it expects an Object, and field.defaultVal() returns exactly that.", "url": "https://github.com/apache/hudi/pull/1427#discussion_r399722115", "createdAt": "2020-03-28T23:29:16Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +220,63 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields\n+   */\n+  private static List<Field> getAllFieldsToWrite(Schema oldSchema, Schema newSchema) {\n+    Set<Field> allFields = new HashSet<>(oldSchema.getFields());\n+    List<Field> fields = new ArrayList<>(oldSchema.getFields());\n+    for (Schema.Field f : newSchema.getFields()) {\n+      if (!allFields.contains(f) && !isMetadataField(f.name())) {\n+        fields.add(f);\n+      }\n+    }\n+\n+    return fields;\n+  }\n+\n+  private static void populateNewRecordAsPerDataType(GenericRecord record, Field field) {\n+    switch (getSchemaTypeForField(field)) {\n+      case STRING:\n+      case BYTES:\n+      case ENUM:\n+      case FIXED:\n+        record.put(field.name(), field.defaultVal() == null ? null : (String) field.defaultVal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMjMwNQ==", "bodyText": "Shouldn't we return Schema.Type.NULL here ? Seems like the only case where we will reach this line is when type is null.", "url": "https://github.com/apache/hudi/pull/1427#discussion_r399722305", "createdAt": "2020-03-28T23:31:46Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +220,63 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields\n+   */\n+  private static List<Field> getAllFieldsToWrite(Schema oldSchema, Schema newSchema) {\n+    Set<Field> allFields = new HashSet<>(oldSchema.getFields());\n+    List<Field> fields = new ArrayList<>(oldSchema.getFields());\n+    for (Schema.Field f : newSchema.getFields()) {\n+      if (!allFields.contains(f) && !isMetadataField(f.name())) {\n+        fields.add(f);\n+      }\n+    }\n+\n+    return fields;\n+  }\n+\n+  private static void populateNewRecordAsPerDataType(GenericRecord record, Field field) {\n+    switch (getSchemaTypeForField(field)) {\n+      case STRING:\n+      case BYTES:\n+      case ENUM:\n+      case FIXED:\n+        record.put(field.name(), field.defaultVal() == null ? null : (String) field.defaultVal());\n+        break;\n+      case LONG:\n+        record.put(field.name(), field.defaultVal() == null ? null : (long) field.defaultVal());\n+        break;\n+      case INT:\n+        record.put(field.name(), field.defaultVal() == null ? null : (int) field.defaultVal());\n+        break;\n+      case FLOAT:\n+        record.put(field.name(), field.defaultVal() == null ? null : (float) field.defaultVal());\n+        break;\n+      case DOUBLE:\n+        record.put(field.name(), field.defaultVal() == null ? null : (double) field.defaultVal());\n+        break;\n+      case BOOLEAN:\n+        record.put(field.name(), field.defaultVal() == null ? null : (boolean) field.defaultVal());\n+        break;\n+      default:\n+        record.put(field.name(), field.defaultVal());\n+    }\n+  }\n+\n+  private static Schema.Type getSchemaTypeForField(Field field) {\n+    if (!field.schema().getType().equals(Schema.Type.UNION)) {\n+      return field.schema().getType();\n+    }\n+\n+    for (Schema schema : field.schema().getTypes()) {\n+      if (!schema.getType().equals(Schema.Type.NULL)) {\n+        return schema.getType();\n+      }\n+    }\n+\n+    return Schema.Type.STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMjYyMg==", "bodyText": "nit: May be rename this to populateFieldWithDefaultValue as that seems to be the intent of this function.", "url": "https://github.com/apache/hudi/pull/1427#discussion_r399722622", "createdAt": "2020-03-28T23:36:07Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +220,63 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields\n+   */\n+  private static List<Field> getAllFieldsToWrite(Schema oldSchema, Schema newSchema) {\n+    Set<Field> allFields = new HashSet<>(oldSchema.getFields());\n+    List<Field> fields = new ArrayList<>(oldSchema.getFields());\n+    for (Schema.Field f : newSchema.getFields()) {\n+      if (!allFields.contains(f) && !isMetadataField(f.name())) {\n+        fields.add(f);\n+      }\n+    }\n+\n+    return fields;\n+  }\n+\n+  private static void populateNewRecordAsPerDataType(GenericRecord record, Field field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3ec6e97f9b29831032eb3ed20605f9a12d5e5e"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74b8da1566f84ee5aa58a7b09ca2098f2a4abd8e", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/74b8da1566f84ee5aa58a7b09ca2098f2a4abd8e", "committedDate": "2020-03-29T10:42:20Z", "message": "[HUDI-727]: addressed code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDk0NDIz", "url": "https://github.com/apache/hudi/pull/1427#pullrequestreview-383494423", "createdAt": "2020-03-30T02:17:46Z", "commit": {"oid": "74b8da1566f84ee5aa58a7b09ca2098f2a4abd8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTM3ODAz", "url": "https://github.com/apache/hudi/pull/1427#pullrequestreview-384137803", "createdAt": "2020-03-30T18:52:01Z", "commit": {"oid": "74b8da1566f84ee5aa58a7b09ca2098f2a4abd8e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1MjowMlrOF93l7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1ODo0NVrOF932Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxODI4Nw==", "bodyText": "nit: extra line", "url": "https://github.com/apache/hudi/pull/1427#discussion_r400418287", "createdAt": "2020-03-30T18:52:02Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +218,21 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields\n+   */\n+  private static List<Field> getAllFieldsToWrite(Schema oldSchema, Schema newSchema) {\n+    Set<Field> allFields = new HashSet<>(oldSchema.getFields());\n+    List<Field> fields = new ArrayList<>(oldSchema.getFields());\n+    for (Schema.Field f : newSchema.getFields()) {\n+      if (!allFields.contains(f) && !isMetadataField(f.name())) {\n+        fields.add(f);\n+      }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b8da1566f84ee5aa58a7b09ca2098f2a4abd8e"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMDEyNg==", "bodyText": "rename : getNewFieldsToWrite()?", "url": "https://github.com/apache/hudi/pull/1427#discussion_r400420126", "createdAt": "2020-03-30T18:54:55Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +218,21 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields\n+   */\n+  private static List<Field> getAllFieldsToWrite(Schema oldSchema, Schema newSchema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b8da1566f84ee5aa58a7b09ca2098f2a4abd8e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMjQ4Mw==", "bodyText": "for my understanding, I would expect the default value to be handed to us here, already right?\nIs this a avro bug/quirk? How exactly does one use the default value if get() won't hand it. avro expects users to manually fetch it from the schema?", "url": "https://github.com/apache/hudi/pull/1427#discussion_r400422483", "createdAt": "2020-03-30T18:58:45Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/HoodieAvroUtils.java", "diffHunk": "@@ -191,21 +191,25 @@ public static GenericRecord addCommitMetadataToRecord(GenericRecord record, Stri\n    * schema.\n    */\n   public static GenericRecord rewriteRecord(GenericRecord record, Schema newSchema) {\n-    return rewrite(record, record.getSchema(), newSchema);\n+    return rewrite(record, getAllFieldsToWrite(record.getSchema(), newSchema), newSchema);\n   }\n \n   /**\n    * Given a avro record with a given schema, rewrites it into the new schema while setting fields only from the new\n    * schema.\n    */\n   public static GenericRecord rewriteRecordWithOnlyNewSchemaFields(GenericRecord record, Schema newSchema) {\n-    return rewrite(record, newSchema, newSchema);\n+    return rewrite(record, newSchema.getFields(), newSchema);\n   }\n \n-  private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFields, Schema newSchema) {\n+  private static GenericRecord rewrite(GenericRecord record, List<Field> fieldsToWrite, Schema newSchema) {\n     GenericRecord newRecord = new GenericData.Record(newSchema);\n-    for (Schema.Field f : schemaWithFields.getFields()) {\n-      newRecord.put(f.name(), record.get(f.name()));\n+    for (Schema.Field f : fieldsToWrite) {\n+      if (record.get(f.name()) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b8da1566f84ee5aa58a7b09ca2098f2a4abd8e"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb962e49f0a641a0bb1f6acce37547b5fe04831", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/dbb962e49f0a641a0bb1f6acce37547b5fe04831", "committedDate": "2020-04-05T18:26:51Z", "message": "[HUDI-727]: code review comments addressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89d2bf43eeae07d9dedd19f857f1ae83f26ab38e", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/89d2bf43eeae07d9dedd19f857f1ae83f26ab38e", "committedDate": "2020-04-05T18:27:15Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-hudi into hudi-727"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDMwMjQw", "url": "https://github.com/apache/hudi/pull/1427#pullrequestreview-388430240", "createdAt": "2020-04-06T16:42:45Z", "commit": {"oid": "89d2bf43eeae07d9dedd19f857f1ae83f26ab38e"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0Mjo0NlrOGBgkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0ODoxMlrOGBgyiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNTQwNA==", "bodyText": "nit: formatting , missing *", "url": "https://github.com/apache/hudi/pull/1427#discussion_r404235404", "createdAt": "2020-04-06T16:42:46Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +218,20 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d2bf43eeae07d9dedd19f857f1ae83f26ab38e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzYxNw==", "bodyText": "let's avoid overloading the term \"union\" here.. \"Generates a super set of fields from both old and new schema\"", "url": "https://github.com/apache/hudi/pull/1427#discussion_r404237617", "createdAt": "2020-04-06T16:46:07Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +218,20 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNTQwNA=="}, "originalCommit": {"oid": "89d2bf43eeae07d9dedd19f857f1ae83f26ab38e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODE5Nw==", "bodyText": "in that case, let have the name reflect that.. getCombinedFields().. All does not bring out what this is doing IMO.", "url": "https://github.com/apache/hudi/pull/1427#discussion_r404238197", "createdAt": "2020-04-06T16:47:00Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +218,20 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields\n+   */\n+  private static List<Field> getAllFieldsToWrite(Schema oldSchema, Schema newSchema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d2bf43eeae07d9dedd19f857f1ae83f26ab38e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODk4Nw==", "bodyText": "would a LinkedHashSet eliminate the need for a set and a list?", "url": "https://github.com/apache/hudi/pull/1427#discussion_r404238987", "createdAt": "2020-04-06T16:48:12Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "diffHunk": "@@ -214,6 +218,20 @@ private static GenericRecord rewrite(GenericRecord record, Schema schemaWithFiel\n     return newRecord;\n   }\n \n+  /*\n+  This function takes the union of all the fields except hoodie metadata fields\n+   */\n+  private static List<Field> getAllFieldsToWrite(Schema oldSchema, Schema newSchema) {\n+    Set<Field> allFields = new HashSet<>(oldSchema.getFields());\n+    List<Field> fields = new ArrayList<>(oldSchema.getFields());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d2bf43eeae07d9dedd19f857f1ae83f26ab38e"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32f701e40fc66e1178b9ca1e86e244e9c5c8430", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/a32f701e40fc66e1178b9ca1e86e244e9c5c8430", "committedDate": "2020-04-11T16:55:14Z", "message": "[HUDI-727]: integ tests failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8e421b802a21c40629ec41659ab55305479a93", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/0a8e421b802a21c40629ec41659ab55305479a93", "committedDate": "2020-04-12T13:33:33Z", "message": "[HUDI-727]: fixed integ tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a8d429b2f222615d618a22067d3ed60eadc9a33", "author": {"user": {"login": "pratyakshsharma", "name": "Pratyaksh Sharma"}}, "url": "https://github.com/apache/hudi/commit/1a8d429b2f222615d618a22067d3ed60eadc9a33", "committedDate": "2020-04-12T17:25:59Z", "message": "[HUDI-727]: fixed test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTExMTY5", "url": "https://github.com/apache/hudi/pull/1427#pullrequestreview-391911169", "createdAt": "2020-04-13T00:55:12Z", "commit": {"oid": "1a8d429b2f222615d618a22067d3ed60eadc9a33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3991, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}