{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDc0NTMy", "number": 1916, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNDowMlrOEV0ZYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowODoxMFrOEV0fqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE0MDE3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNDowMlrOG8yi-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNDowMlrOG8yi-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NTg5OQ==", "bodyText": "MetricName?", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466395899", "createdAt": "2020-08-06T13:04:02Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java", "diffHunk": "@@ -64,10 +65,15 @@\n \n   public static final String HOODIE_SCHEME_PREFIX = \"hoodie-\";\n \n+  private enum MetricNames {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE0NjQzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNToyN1rOG8ymtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNToyN1rOG8ymtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Njg1Mw==", "bodyText": "missing @OverRide?", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466396853", "createdAt": "2020-08-06T13:05:27Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Lightweight Counter for Hudi Metrics.\n+ */\n+public class Counter implements Metric {\n+\n+  private final AtomicLong count = new AtomicLong();\n+\n+  public void increment() {\n+    this.add(1);\n+  }\n+\n+  public void add(long n) {\n+    this.count.addAndGet(n);\n+  }\n+\n+  public Long getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE1MjQ4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNzowOVrOG8yqng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNzowOVrOG8yqng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Nzg1NA==", "bodyText": "change to HashMap<String, Long> allMetrics = new HashMap<>();", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466397854", "createdAt": "2020-08-06T13:07:09Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+/**\n+ * Lightweight Metrics Registry to track Hudi events.\n+ */\n+public class Registry {\n+  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+  final String name;\n+\n+  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+\n+  private Registry(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * Get (or create) the registry for a provided name.\n+   */\n+  public static synchronized Registry getRegistry(String registryName) {\n+    if (!registryMap.containsKey(registryName)) {\n+      registryMap.put(registryName, new Registry(registryName));\n+    }\n+    return registryMap.get(registryName);\n+  }\n+\n+  /**\n+   * Get all registered metrics.\n+   * @param flush clean all metrics as part of this operation.\n+   * @param prefixWithRegistryName prefix each metric name with the registry name.\n+   * @return\n+   */\n+  public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n+    HashMap allMetrics = new HashMap<String, Long>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE1NjI1OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowODoxMFrOG8ytBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowODoxMFrOG8ytBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODQ3MQ==", "bodyText": "would be rename to clear?", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466398471", "createdAt": "2020-08-06T13:08:10Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+/**\n+ * Lightweight Metrics Registry to track Hudi events.\n+ */\n+public class Registry {\n+  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+  final String name;\n+\n+  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+\n+  private Registry(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * Get (or create) the registry for a provided name.\n+   */\n+  public static synchronized Registry getRegistry(String registryName) {\n+    if (!registryMap.containsKey(registryName)) {\n+      registryMap.put(registryName, new Registry(registryName));\n+    }\n+    return registryMap.get(registryName);\n+  }\n+\n+  /**\n+   * Get all registered metrics.\n+   * @param flush clean all metrics as part of this operation.\n+   * @param prefixWithRegistryName prefix each metric name with the registry name.\n+   * @return\n+   */\n+  public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n+    HashMap allMetrics = new HashMap<String, Long>();\n+    registryMap.forEach((registryName, registry) -> {\n+      allMetrics.putAll(registry.getAllCounts(prefixWithRegistryName));\n+      if (flush) {\n+        registry.flush();\n+      }\n+    });\n+    return allMetrics;\n+  }\n+\n+  public void flush() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4396, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}