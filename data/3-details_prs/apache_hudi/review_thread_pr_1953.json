{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTM1ODM4", "number": 1953, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDozNjoxNlrOEbKdLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoxMzo0MFrOEcTYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTE4MzE5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDozNjoxNlrOHFBB6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDozNjoxNlrOHFBB6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMTgwMg==", "bodyText": "I would suggest to abstract this out into its own function like convertValueForAvroLogicalTypes() and call it from both places instead of using recursive call which is adding overhead of more repetitive checks happening. Since this will be called for each record I would like to keep it as lightweight as possible.\n     if (fieldSchema.getType() == Schema.Type.UNION) {\n           for (Schema schema : fieldSchema.getTypes()) {\n                  return convertValueForAvroLogicalTypes()\n               }\n    } else {\n       return convertValueForAvroLogicalTypes()\n   }", "url": "https://github.com/apache/hudi/pull/1953#discussion_r475021802", "createdAt": "2020-08-22T00:36:16Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "diffHunk": "@@ -431,25 +435,30 @@ private static Object convertValueForSpecificDataTypes(Schema fieldSchema, Objec\n       return fieldValue;\n     }\n \n-    if (isLogicalTypeDate(fieldSchema)) {\n+    if (fieldSchema.getType() == Schema.Type.UNION) {\n+      for (Schema schema : fieldSchema.getTypes()) {\n+        if (schema.getLogicalType() == LogicalTypes.date() || schema.getLogicalType() instanceof LogicalTypes.Decimal) {\n+          return convertValueForSpecificDataTypes(schema, fieldValue);\n+        }\n+      }\n+    } else if (fieldSchema.getLogicalType() == LogicalTypes.date()) {\n+      // special handle for Logical Date type\n       return LocalDate.ofEpochDay(Long.parseLong(fieldValue.toString()));\n+    } else if (fieldSchema.getLogicalType() instanceof LogicalTypes.Decimal) {\n+      // special handle for Logical Decimal type\n+      Decimal dc = (Decimal) fieldSchema.getLogicalType();\n+      DecimalConversion decimalConversion = new DecimalConversion();\n+      if (fieldSchema.getType() == Schema.Type.FIXED) {\n+        return decimalConversion.fromFixed((GenericFixed) fieldValue, fieldSchema,\n+            LogicalTypes.decimal(dc.getPrecision(), dc.getScale()));\n+      } else if (fieldSchema.getType() == Schema.Type.BYTES) {\n+        return decimalConversion.fromBytes((ByteBuffer) fieldValue, fieldSchema,\n+            LogicalTypes.decimal(dc.getPrecision(), dc.getScale()));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3225e96866aadef083a9b310c5d17cd87335dba3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTEzMDMxOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoxMzo0MFrOHGwB9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDoxMjo0NlrOHGzunw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDQzNg==", "bodyText": "Do we need to check this explicitly ? convertValueForAvroLogicalTypes will either ways just return the field value in this case.\nThe check is either ways not being performed in case Schema type is not UNION. It might be okay to remove this.", "url": "https://github.com/apache/hudi/pull/1953#discussion_r476840436", "createdAt": "2020-08-25T23:13:40Z", "author": {"login": "umehrot2"}, "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "diffHunk": "@@ -433,23 +434,46 @@ private static Object convertValueForSpecificDataTypes(Schema fieldSchema, Objec\n       return fieldValue;\n     }\n \n-    if (isLogicalTypeDate(fieldSchema)) {\n-      return LocalDate.ofEpochDay(Long.parseLong(fieldValue.toString()));\n+    if (fieldSchema.getType() == Schema.Type.UNION) {\n+      for (Schema schema : fieldSchema.getTypes()) {\n+        if (schema.getType() != Schema.Type.NULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8bb76135edccfdb2a576adff8a84385d6f32eb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMTAyMw==", "bodyText": "For schema like:\n{\n\"name\":\"event_cost3\",\n\"type\":[\n\"null\",\n{\n\"type\":\"fixed\",\n\"name\":\"dc\",\n\"size\":5,\n\"logicalType\":\"decimal\",\n\"precision\":10,\n\"scale\":6\n}\n]\n\nor\n{\n\"name\":\"event_date3\",\n\"type\":[\n\"null\",\n{\n\"type\":\"int\",\n\"logicalType\":\"date\"\n}\n]\n\nThe first schema it gets is null, w/o this condition, it will directly return the fieldValue w/o any special conversion. BTW this comment remind me to add another test case for decimal type with union.", "url": "https://github.com/apache/hudi/pull/1953#discussion_r476901023", "createdAt": "2020-08-26T00:12:46Z", "author": {"login": "zhedoubushishi"}, "path": "hudi-common/src/main/java/org/apache/hudi/avro/HoodieAvroUtils.java", "diffHunk": "@@ -433,23 +434,46 @@ private static Object convertValueForSpecificDataTypes(Schema fieldSchema, Objec\n       return fieldValue;\n     }\n \n-    if (isLogicalTypeDate(fieldSchema)) {\n-      return LocalDate.ofEpochDay(Long.parseLong(fieldValue.toString()));\n+    if (fieldSchema.getType() == Schema.Type.UNION) {\n+      for (Schema schema : fieldSchema.getTypes()) {\n+        if (schema.getType() != Schema.Type.NULL) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDQzNg=="}, "originalCommit": {"oid": "3f8bb76135edccfdb2a576adff8a84385d6f32eb"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4420, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}