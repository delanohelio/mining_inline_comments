{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNzkwOTgw", "number": 2350, "title": "[HUDI-1493] Fixed schema compatibility check for fields.", "bodyText": "What is the purpose of the pull request\n\nFixed a bug in schema compatibility check where some field types were not allowed.\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\nAlso added a unit test to check for all the allowed field type changes.\n\nBrief change log\nVerify this pull request\nThis pull request is already covered by existing tests, such as (please describe tests).\nmvn test -pl hudi-client/hudi-spark-client -Dtest=TestTableSchemaEvolution\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-12-18T21:53:38Z", "url": "https://github.com/apache/hudi/pull/2350", "merged": true, "mergeCommit": {"oid": "c6bf95233240d75160670ee96c356946c44c6169"}, "closed": true, "closedAt": "2020-12-30T01:02:21Z", "author": {"login": "prashantwason"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnfYm4gBqjQxMzE2MDAzOTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtq33yAFqTU2MzE3NDg1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b7446d747da3e59163d5ffc119b394f9ddbd45b", "author": {"user": {"login": "prashantwason", "name": "Prashant Wason"}}, "url": "https://github.com/apache/hudi/commit/5b7446d747da3e59163d5ffc119b394f9ddbd45b", "committedDate": "2020-12-18T21:48:04Z", "message": "[HUDI-2063] Fixed schama compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes."}, "afterCommit": {"oid": "b50e71b8fd43f36da02765ea719e8de4633ce634", "author": {"user": {"login": "prashantwason", "name": "Prashant Wason"}}, "url": "https://github.com/apache/hudi/commit/b50e71b8fd43f36da02765ea719e8de4633ce634", "committedDate": "2020-12-18T21:53:50Z", "message": "[HUDI-2063] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b50e71b8fd43f36da02765ea719e8de4633ce634", "author": {"user": {"login": "prashantwason", "name": "Prashant Wason"}}, "url": "https://github.com/apache/hudi/commit/b50e71b8fd43f36da02765ea719e8de4633ce634", "committedDate": "2020-12-18T21:53:50Z", "message": "[HUDI-2063] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes."}, "afterCommit": {"oid": "3b7d30adf017914c090bd792dee5a093e3b9ce9e", "author": {"user": {"login": "prashantwason", "name": "Prashant Wason"}}, "url": "https://github.com/apache/hudi/commit/3b7d30adf017914c090bd792dee5a093e3b9ce9e", "committedDate": "2020-12-18T22:53:23Z", "message": "[HUDI-2063] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODQyODE0", "url": "https://github.com/apache/hudi/pull/2350#pullrequestreview-558842814", "createdAt": "2020-12-26T01:36:00Z", "commit": {"oid": "3b7d30adf017914c090bd792dee5a093e3b9ce9e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMTozNjowMFrOILgCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMTozNzo0NlrOILgDCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDE0Ng==", "bodyText": "can we also add vice versa i.e. long to int, and similar evolutions and ensure schema compatibility returns false.", "url": "https://github.com/apache/hudi/pull/2350#discussion_r548930146", "createdAt": "2020-12-26T01:36:00Z", "author": {"login": "nsivabalan"}, "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestTableSchemaEvolution.java", "diffHunk": "@@ -107,10 +107,22 @@ public void testSchemaCompatibilityBasic() throws Exception {\n     assertFalse(TableSchemaResolver.isSchemaCompatible(TRIP_EXAMPLE_SCHEMA, swappedFieldSchema),\n         \"Swapped fields are not compatible\");\n \n-    String typeChangeSchema = TRIP_SCHEMA_PREFIX + MAP_TYPE_SCHEMA + FARE_NESTED_SCHEMA\n+    String typeChangeSchemaDisallowed = TRIP_SCHEMA_PREFIX + MAP_TYPE_SCHEMA + FARE_NESTED_SCHEMA\n         + TIP_NESTED_SCHEMA.replace(\"string\", \"boolean\") + TRIP_SCHEMA_SUFFIX;\n-    assertFalse(TableSchemaResolver.isSchemaCompatible(TRIP_EXAMPLE_SCHEMA, typeChangeSchema),\n-        \"Field type change is not compatible\");\n+    assertFalse(TableSchemaResolver.isSchemaCompatible(TRIP_EXAMPLE_SCHEMA, typeChangeSchemaDisallowed),\n+        \"Incompatible field type change is not allowed\");\n+\n+    // Array of allowed schema field type transitions\n+    String[][] allowedFieldChanges = {\n+        {\"string\", \"bytes\"}, {\"bytes\", \"string\"},\n+        {\"int\", \"long\"}, {\"int\", \"float\"}, {\"long\", \"float\"}, \n+        {\"int\", \"double\"}, {\"float\", \"double\"}, {\"long\", \"double\"}};\n+    for (String[] fieldChange : allowedFieldChanges) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b7d30adf017914c090bd792dee5a093e3b9ce9e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDI3OA==", "bodyText": "@prashantwason : doesn't line 299 needs fixing too? basically any calls to SchemaCompatibility.* should need a fix wrt reader and writer schema arg right?", "url": "https://github.com/apache/hudi/pull/2350#discussion_r548930278", "createdAt": "2020-12-26T01:36:59Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -329,9 +329,11 @@ public static boolean isSchemaCompatible(Schema oldSchema, Schema newSchema) {\n       // All fields in the newSchema record can be populated from the oldSchema record\n       return true;\n     } else {\n-      // Use the checks implemented by\n+      // Use the checks implemented by Avro", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b7d30adf017914c090bd792dee5a093e3b9ce9e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDMxMw==", "bodyText": "and if you agree on this, can we have a test to cover that scenario(which should fail if not for this patch)", "url": "https://github.com/apache/hudi/pull/2350#discussion_r548930313", "createdAt": "2020-12-26T01:37:46Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -329,9 +329,11 @@ public static boolean isSchemaCompatible(Schema oldSchema, Schema newSchema) {\n       // All fields in the newSchema record can be populated from the oldSchema record\n       return true;\n     } else {\n-      // Use the checks implemented by\n+      // Use the checks implemented by Avro", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDI3OA=="}, "originalCommit": {"oid": "3b7d30adf017914c090bd792dee5a093e3b9ce9e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "624d9e8ad3b5edea23442e1485de0f209a18bd86", "author": {"user": {"login": "prashantwason", "name": "Prashant Wason"}}, "url": "https://github.com/apache/hudi/commit/624d9e8ad3b5edea23442e1485de0f209a18bd86", "committedDate": "2020-12-29T22:41:29Z", "message": "[HUDI-1493] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b7d30adf017914c090bd792dee5a093e3b9ce9e", "author": {"user": {"login": "prashantwason", "name": "Prashant Wason"}}, "url": "https://github.com/apache/hudi/commit/3b7d30adf017914c090bd792dee5a093e3b9ce9e", "committedDate": "2020-12-18T22:53:23Z", "message": "[HUDI-2063] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes."}, "afterCommit": {"oid": "624d9e8ad3b5edea23442e1485de0f209a18bd86", "author": {"user": {"login": "prashantwason", "name": "Prashant Wason"}}, "url": "https://github.com/apache/hudi/commit/624d9e8ad3b5edea23442e1485de0f209a18bd86", "committedDate": "2020-12-29T22:41:29Z", "message": "[HUDI-1493] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzQyMDIz", "url": "https://github.com/apache/hudi/pull/2350#pullrequestreview-559742023", "createdAt": "2020-12-29T23:54:54Z", "commit": {"oid": "624d9e8ad3b5edea23442e1485de0f209a18bd86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMTc0ODUz", "url": "https://github.com/apache/hudi/pull/2350#pullrequestreview-563174853", "createdAt": "2021-01-07T02:40:52Z", "commit": {"oid": "624d9e8ad3b5edea23442e1485de0f209a18bd86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMjo0MDo1MlrOIPdLMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMjo0MDo1MlrOIPdLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA3NzU1NA==", "bodyText": "Hi @nsivabalan @prashantwason ,I have test write a \"int\" type to \"long\" type.It fails in the the schema validate .\nHowever,I write a \"long\" to \"int\", it can pass the validate. So I think this \"reverse\" here introduce some problem. I have rollback the \"reverse\" in  #2334 and add some test case. It works well now. Can you take a look when you have time?", "url": "https://github.com/apache/hudi/pull/2350#discussion_r553077554", "createdAt": "2021-01-07T02:40:52Z", "author": {"login": "pengzhiwei2018"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -296,7 +296,7 @@ public MessageType convertAvroSchemaToParquet(Schema schema) {\n   public static boolean isSchemaCompatible(Schema oldSchema, Schema newSchema) {\n     if (oldSchema.getType() == newSchema.getType() && newSchema.getType() == Schema.Type.RECORD) {\n       // record names must match:\n-      if (!SchemaCompatibility.schemaNameEquals(oldSchema, newSchema)) {\n+      if (!SchemaCompatibility.schemaNameEquals(newSchema, oldSchema)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "624d9e8ad3b5edea23442e1485de0f209a18bd86"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4033, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}