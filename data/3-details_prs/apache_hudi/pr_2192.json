{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MjI2MTYx", "number": 2192, "title": "[HUDI-1343] Add standard schema postprocessor which would rewrite the schema using spark-avro conversion", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-10-21T03:40:24Z", "url": "https://github.com/apache/hudi/pull/2192", "merged": true, "mergeCommit": {"oid": "62b392b49c13455199e0372204dedf8a371b452c"}, "closed": true, "closedAt": "2020-12-04T03:28:34Z", "author": {"login": "liujinhui1994"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSt7_2AH2gAyNTA3MjI2MTYxOjhjZmFmMGQ0ZDYxNDJlMzhhMjU3N2Q0ZTg1ZGFjNTY2NjYxYTZiNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdivLz9AFqTU0NDYyOTg4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8cfaf0d4d6142e38a2577d4e85dac566661a6b79", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/8cfaf0d4d6142e38a2577d4e85dac566661a6b79", "committedDate": "2020-10-15T08:59:08Z", "message": "HUDI-1343"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49b4961aec23e2d0398d8d74d4af27747dce24ae", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/49b4961aec23e2d0398d8d74d4af27747dce24ae", "committedDate": "2020-10-15T09:58:02Z", "message": "HUDI-1343"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "632556e73326139664ca498cc5f6a51afd5d4260", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/632556e73326139664ca498cc5f6a51afd5d4260", "committedDate": "2020-10-20T15:33:52Z", "message": "hudi-1343"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e450155d871525aeafeff9f64f0c641a90d1f4", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/e3e450155d871525aeafeff9f64f0c641a90d1f4", "committedDate": "2020-10-20T15:39:20Z", "message": "HUDI-1343"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ac0ae93fc53eabcd27be175c385d1973683594", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/67ac0ae93fc53eabcd27be175c385d1973683594", "committedDate": "2020-10-21T03:35:08Z", "message": "HUDI-1343"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34a029cc4ee87f10e3d60937c9f8b2b3bc0bae29", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/34a029cc4ee87f10e3d60937c9f8b2b3bc0bae29", "committedDate": "2020-10-26T12:49:39Z", "message": "hudi-1343"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b2a2eb62aa1f926334f3e60375057e7d6ca4c7", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/d4b2a2eb62aa1f926334f3e60375057e7d6ca4c7", "committedDate": "2020-10-27T13:09:02Z", "message": "hudi-1343"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/65bfed9e40a788280b35510c31e350399ea81119", "committedDate": "2020-10-28T01:39:15Z", "message": "hudi-1343"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNjE3ODEw", "url": "https://github.com/apache/hudi/pull/2192#pullrequestreview-522617810", "createdAt": "2020-11-03T15:34:21Z", "commit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNDoyMlrOHs0YLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozODo0M1rOHs0k7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1NzU1MQ==", "bodyText": "Can you reference the jira number as part of this class Javadoc so that developers would know why this class exist ?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516757551", "createdAt": "2020-11-03T15:34:22Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.schema;\n+\n+import org.apache.hudi.AvroConversionUtils;\n+import org.apache.hudi.common.config.TypedProperties;\n+\n+import org.apache.avro.Schema;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroPostProcessor extends SchemaPostProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTUyNg==", "bodyText": "Can you add a check that post processed schema is different from original schema.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516759526", "createdAt": "2020-11-03T15:36:54Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -45,14 +50,32 @@ public void testPostProcessor() throws IOException {\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MDgxNA==", "bodyText": "I think it is safer to add a configuration (enabled by default) if users do not need this feature.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516760814", "createdAt": "2020-11-03T15:38:43Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -413,14 +414,19 @@ public static SchemaProviderWithPostProcessor wrapSchemaProviderWithPostProcesso\n     if (provider instanceof  SchemaProviderWithPostProcessor) {\n       return (SchemaProviderWithPostProcessor)provider;\n     }\n+\n     String schemaPostProcessorClass = cfg.getString(Config.SCHEMA_POST_PROCESSOR_PROP, null);\n+    if (transformerClassNames != null && !transformerClassNames.isEmpty() && StringUtils.isNullOrEmpty(schemaPostProcessorClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65bfed9e40a788280b35510c31e350399ea81119"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f82b423fb716655e321dc3bac10962bb338b5151", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/f82b423fb716655e321dc3bac10962bb338b5151", "committedDate": "2020-11-11T03:04:16Z", "message": "hudi-1343\nadd config:hoodie.deltastreamer.schemaprovider.spark_avro_post_processor.enable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e41cb550bd9ad0e508f570248474bcee9f1a19", "author": {"user": null}, "url": "https://github.com/apache/hudi/commit/d8e41cb550bd9ad0e508f570248474bcee9f1a19", "committedDate": "2020-11-18T11:42:24Z", "message": "add Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "author": {"user": {"login": "liujinhui1994", "name": "liujinhui"}}, "url": "https://github.com/apache/hudi/commit/1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "committedDate": "2020-11-18T13:55:09Z", "message": "hudi-1343\nadd Test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NjMxNDc5", "url": "https://github.com/apache/hudi/pull/2192#pullrequestreview-544631479", "createdAt": "2020-12-04T03:28:01Z", "commit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NjI5ODg1", "url": "https://github.com/apache/hudi/pull/2192#pullrequestreview-544629885", "createdAt": "2020-12-04T03:22:55Z", "commit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyMjo1NVrOH-_E7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzoyNzo1NlrOH-_LZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzIxNQ==", "bodyText": "Does SparkAvroTestSchemaProvider look better?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807215", "createdAt": "2020-12-04T03:22:55Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/SparkAvroSchemaProvider.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroSchemaProvider extends SchemaProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzQ2OQ==", "bodyText": "Please add a backspace before ,null.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807469", "createdAt": "2020-12-04T03:23:44Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzgwOA==", "bodyText": "Or define a static inner class in TestSchemaPostProcessor?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807808", "createdAt": "2020-12-04T03:24:44Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/SparkAvroSchemaProvider.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroSchemaProvider extends SchemaProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzIxNQ=="}, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODI5MA==", "bodyText": "IMO, this naming is not good.", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808290", "createdAt": "2020-12-04T03:26:13Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODU5NA==", "bodyText": "WDYT about naming it to be testSparkAvroSchemaPostProcessor?", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808594", "createdAt": "2020-12-04T03:27:09Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();\n+    assertEquals(schema.getType(), Type.RECORD);\n+    assertEquals(schema.getName(), \"hoodie_source\");\n+    assertEquals(schema.getNamespace(), \"hoodie.source\");\n+    assertNotNull(schema.getField(\"day\"));\n+  }\n+\n+  @Test\n+  public void testSparkAvroSchema() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODg2OA==", "bodyText": "wrong place", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808868", "createdAt": "2020-12-04T03:27:56Z", "author": {"login": "yanghua"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -22,15 +22,20 @@\n import org.apache.hudi.utilities.schema.SchemaPostProcessor;\n import org.apache.hudi.utilities.schema.SchemaPostProcessor.Config;\n import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.hudi.utilities.schema.SparkAvroPostProcessor;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n \n import org.apache.avro.Schema;\n import org.apache.avro.Schema.Type;\n import org.apache.avro.SchemaBuilder;\n+\n+import org.apache.hudi.utilities.transform.FlatteningTransformer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4201, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}