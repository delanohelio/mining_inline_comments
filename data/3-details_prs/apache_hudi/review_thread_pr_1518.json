{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDQyMjY5", "number": 1518, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1MToyMlrODyq5Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozNDowMlrODysuWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDU4MTU5OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1MToyMlrOGG2rvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MTozMVrOGWRpWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MDU3NA==", "bodyText": "is n't this block the same as above? why break it up into an else-if?", "url": "https://github.com/apache/hudi/pull/1518#discussion_r409840574", "createdAt": "2020-04-16T20:51:22Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -296,10 +296,21 @@ private void refreshTimeline() throws IOException {\n \n       // Use Transformed Row's schema if not overridden. If target schema is not specified\n       // default to RowBasedSchemaProvider\n-      schemaProvider = this.schemaProvider == null || this.schemaProvider.getTargetSchema() == null\n-          ? transformed.map(r -> (SchemaProvider) new RowBasedSchemaProvider(r.schema())).orElse(\n-          dataAndCheckpoint.getSchemaProvider())\n-          : this.schemaProvider;\n+      if (this.schemaProvider == null) {\n+        schemaProvider =\n+            transformed\n+                .map(r -> (SchemaProvider) new RowBasedSchemaProvider(r.schema()))\n+                .orElse(dataAndCheckpoint.getSchemaProvider());\n+      } else if (this.schemaProvider.getTargetSchema() == null) {\n+        schemaProvider =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDk3MQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hudi/pull/1518#discussion_r426010971", "createdAt": "2020-05-15T19:41:31Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -296,10 +296,21 @@ private void refreshTimeline() throws IOException {\n \n       // Use Transformed Row's schema if not overridden. If target schema is not specified\n       // default to RowBasedSchemaProvider\n-      schemaProvider = this.schemaProvider == null || this.schemaProvider.getTargetSchema() == null\n-          ? transformed.map(r -> (SchemaProvider) new RowBasedSchemaProvider(r.schema())).orElse(\n-          dataAndCheckpoint.getSchemaProvider())\n-          : this.schemaProvider;\n+      if (this.schemaProvider == null) {\n+        schemaProvider =\n+            transformed\n+                .map(r -> (SchemaProvider) new RowBasedSchemaProvider(r.schema()))\n+                .orElse(dataAndCheckpoint.getSchemaProvider());\n+      } else if (this.schemaProvider.getTargetSchema() == null) {\n+        schemaProvider =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MDU3NA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDg4MTUyOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozNDowMlrOGG5h9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzo0OTo1N1rOGV6MPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzIyMg==", "bodyText": "wondering if we can just redo the schema registration without forcing recreating the entire client?", "url": "https://github.com/apache/hudi/pull/1518#discussion_r409887222", "createdAt": "2020-04-16T22:34:02Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -460,8 +471,17 @@ private void syncHive() {\n    * this constraint.\n    */\n   public void setupWriteClient() {\n+    setupWriteClient(schemaProvider, false);\n+  }\n+\n+  /**\n+   * Note that depending on configs and source-type, schemaProvider could either be eagerly or lazily created.\n+   * SchemaProvider creation is a precursor to HoodieWriteClient and AsyncCompactor creation. This method takes care of\n+   * this constraint.\n+   */\n+  private void setupWriteClient(SchemaProvider schemaProvider, boolean forceRecreate) {\n     LOG.info(\"Setting up Hoodie Write Client\");\n-    if ((null != schemaProvider) && (null == writeClient)) {\n+    if (forceRecreate || (null != schemaProvider) && (null == writeClient)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4MTMzMA==", "bodyText": "that is a good question. @bvaradar , any suggestions?", "url": "https://github.com/apache/hudi/pull/1518#discussion_r416381330", "createdAt": "2020-04-28T07:11:13Z", "author": {"login": "afilipchik"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -460,8 +471,17 @@ private void syncHive() {\n    * this constraint.\n    */\n   public void setupWriteClient() {\n+    setupWriteClient(schemaProvider, false);\n+  }\n+\n+  /**\n+   * Note that depending on configs and source-type, schemaProvider could either be eagerly or lazily created.\n+   * SchemaProvider creation is a precursor to HoodieWriteClient and AsyncCompactor creation. This method takes care of\n+   * this constraint.\n+   */\n+  private void setupWriteClient(SchemaProvider schemaProvider, boolean forceRecreate) {\n     LOG.info(\"Setting up Hoodie Write Client\");\n-    if ((null != schemaProvider) && (null == writeClient)) {\n+    if (forceRecreate || (null != schemaProvider) && (null == writeClient)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzIyMg=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MjAzNg==", "bodyText": "@bvaradar ping again :)", "url": "https://github.com/apache/hudi/pull/1518#discussion_r420192036", "createdAt": "2020-05-05T15:19:11Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -460,8 +471,17 @@ private void syncHive() {\n    * this constraint.\n    */\n   public void setupWriteClient() {\n+    setupWriteClient(schemaProvider, false);\n+  }\n+\n+  /**\n+   * Note that depending on configs and source-type, schemaProvider could either be eagerly or lazily created.\n+   * SchemaProvider creation is a precursor to HoodieWriteClient and AsyncCompactor creation. This method takes care of\n+   * this constraint.\n+   */\n+  private void setupWriteClient(SchemaProvider schemaProvider, boolean forceRecreate) {\n     LOG.info(\"Setting up Hoodie Write Client\");\n-    if ((null != schemaProvider) && (null == writeClient)) {\n+    if (forceRecreate || (null != schemaProvider) && (null == writeClient)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzIyMg=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwMzQ3NA==", "bodyText": "I agree. We should just do schema re-registration alone and not recreate client.", "url": "https://github.com/apache/hudi/pull/1518#discussion_r425603474", "createdAt": "2020-05-15T06:58:19Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -460,8 +471,17 @@ private void syncHive() {\n    * this constraint.\n    */\n   public void setupWriteClient() {\n+    setupWriteClient(schemaProvider, false);\n+  }\n+\n+  /**\n+   * Note that depending on configs and source-type, schemaProvider could either be eagerly or lazily created.\n+   * SchemaProvider creation is a precursor to HoodieWriteClient and AsyncCompactor creation. This method takes care of\n+   * this constraint.\n+   */\n+  private void setupWriteClient(SchemaProvider schemaProvider, boolean forceRecreate) {\n     LOG.info(\"Setting up Hoodie Write Client\");\n-    if ((null != schemaProvider) && (null == writeClient)) {\n+    if (forceRecreate || (null != schemaProvider) && (null == writeClient)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzIyMg=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyNjY4Ng==", "bodyText": "Actually, I just realized HoodieWriteConfig schema also needs to be updated in this case. Trying to see if we can have a consistent point of creating WriteClient and SchemaProvider", "url": "https://github.com/apache/hudi/pull/1518#discussion_r425626686", "createdAt": "2020-05-15T07:49:57Z", "author": {"login": "bvaradar"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -460,8 +471,17 @@ private void syncHive() {\n    * this constraint.\n    */\n   public void setupWriteClient() {\n+    setupWriteClient(schemaProvider, false);\n+  }\n+\n+  /**\n+   * Note that depending on configs and source-type, schemaProvider could either be eagerly or lazily created.\n+   * SchemaProvider creation is a precursor to HoodieWriteClient and AsyncCompactor creation. This method takes care of\n+   * this constraint.\n+   */\n+  private void setupWriteClient(SchemaProvider schemaProvider, boolean forceRecreate) {\n     LOG.info(\"Setting up Hoodie Write Client\");\n-    if ((null != schemaProvider) && (null == writeClient)) {\n+    if (forceRecreate || (null != schemaProvider) && (null == writeClient)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzIyMg=="}, "originalCommit": null, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4781, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}