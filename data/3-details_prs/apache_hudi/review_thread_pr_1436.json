{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTI5OTg4", "number": 1436, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMzozNDo1MFrODqHd8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowOTowMlrODrDF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDg5MTM2OnYy", "diffSide": "LEFT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/HoodieSnapshotExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMzozNDo1MFrOF5sTKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMzozNDo1MFrOF5sTKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzODk1Mw==", "bodyText": "We don't want to accidentally delete output directory.", "url": "https://github.com/apache/hudi/pull/1436#discussion_r396038953", "createdAt": "2020-03-21T23:34:50Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/HoodieSnapshotExporter.java", "diffHunk": "@@ -160,37 +174,36 @@ private void exportAsNonHudi(SparkSession spark, Config cfg, List<String> dataFi\n         ? defaultPartitioner\n         : ReflectionUtils.loadClass(cfg.outputPartitioner);\n \n-    Dataset<Row> sourceDataset = spark.read().parquet(JavaConversions.asScalaIterator(dataFiles.iterator()).toSeq());\n+    final JavaSparkContext jsc = new JavaSparkContext(spark.sparkContext());\n+    final BaseFileOnlyView fsView = getBaseFileOnlyView(jsc, cfg);\n+    Iterator<String> exportingFilePaths = jsc\n+        .parallelize(partitions, partitions.size())\n+        .flatMap(partition -> fsView\n+            .getLatestBaseFilesBeforeOrOn(partition, latestCommitTimestamp)\n+            .map(HoodieBaseFile::getPath).iterator())\n+        .toLocalIterator();\n+\n+    Dataset<Row> sourceDataset = spark.read().parquet(JavaConversions.asScalaIterator(exportingFilePaths).toSeq());\n     partitioner.partition(sourceDataset)\n         .format(cfg.outputFormat)\n         .mode(SaveMode.Overwrite)\n         .save(cfg.targetOutputPath);\n   }\n \n-  private void copySnapshot(JavaSparkContext jsc,\n-      FileSystem fs,\n-      Config cfg,\n-      List<String> partitions,\n-      List<String> dataFiles,\n-      String latestCommitTimestamp,\n-      SerializableConfiguration serConf) throws IOException {\n-    // Make sure the output directory is empty\n-    Path outputPath = new Path(cfg.targetOutputPath);\n-    if (fs.exists(outputPath)) {\n-      LOG.warn(String.format(\"The output path %s targetBasePath already exists, deleting\", outputPath));\n-      fs.delete(new Path(cfg.targetOutputPath), true);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4969833b62c060049f458e6f40d62f7c0cce40c"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDg5MzAyOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/HoodieSnapshotExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMzozODowNFrOF5sUAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMzozODowNFrOF5sUAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzOTE2OQ==", "bodyText": "Fix dataFiles by scanning the current partition.", "url": "https://github.com/apache/hudi/pull/1436#discussion_r396039169", "createdAt": "2020-03-21T23:38:04Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/HoodieSnapshotExporter.java", "diffHunk": "@@ -160,37 +174,36 @@ private void exportAsNonHudi(SparkSession spark, Config cfg, List<String> dataFi\n         ? defaultPartitioner\n         : ReflectionUtils.loadClass(cfg.outputPartitioner);\n \n-    Dataset<Row> sourceDataset = spark.read().parquet(JavaConversions.asScalaIterator(dataFiles.iterator()).toSeq());\n+    final JavaSparkContext jsc = new JavaSparkContext(spark.sparkContext());\n+    final BaseFileOnlyView fsView = getBaseFileOnlyView(jsc, cfg);\n+    Iterator<String> exportingFilePaths = jsc\n+        .parallelize(partitions, partitions.size())\n+        .flatMap(partition -> fsView\n+            .getLatestBaseFilesBeforeOrOn(partition, latestCommitTimestamp)\n+            .map(HoodieBaseFile::getPath).iterator())\n+        .toLocalIterator();\n+\n+    Dataset<Row> sourceDataset = spark.read().parquet(JavaConversions.asScalaIterator(exportingFilePaths).toSeq());\n     partitioner.partition(sourceDataset)\n         .format(cfg.outputFormat)\n         .mode(SaveMode.Overwrite)\n         .save(cfg.targetOutputPath);\n   }\n \n-  private void copySnapshot(JavaSparkContext jsc,\n-      FileSystem fs,\n-      Config cfg,\n-      List<String> partitions,\n-      List<String> dataFiles,\n-      String latestCommitTimestamp,\n-      SerializableConfiguration serConf) throws IOException {\n-    // Make sure the output directory is empty\n-    Path outputPath = new Path(cfg.targetOutputPath);\n-    if (fs.exists(outputPath)) {\n-      LOG.warn(String.format(\"The output path %s targetBasePath already exists, deleting\", outputPath));\n-      fs.delete(new Path(cfg.targetOutputPath), true);\n-    }\n-\n+  private void exportAsHudi(JavaSparkContext jsc, Config cfg, List<String> partitions, String latestCommitTimestamp) throws IOException {\n+    final BaseFileOnlyView fsView = getBaseFileOnlyView(jsc, cfg);\n+    final SerializableConfiguration serConf = new SerializableConfiguration(jsc.hadoopConfiguration());\n     jsc.parallelize(partitions, partitions.size()).flatMap(partition -> {\n       // Only take latest version files <= latestCommit.\n-      FileSystem fs1 = FSUtils.getFs(cfg.sourceBasePath, serConf.newCopy());\n       List<Tuple2<String, String>> filePaths = new ArrayList<>();\n-      dataFiles.forEach(hoodieDataFile -> filePaths.add(new Tuple2<>(partition, hoodieDataFile)));\n+      Stream<HoodieBaseFile> dataFiles = fsView.getLatestBaseFilesBeforeOrOn(partition, latestCommitTimestamp);\n+      dataFiles.forEach(hoodieDataFile -> filePaths.add(new Tuple2<>(partition, hoodieDataFile.getPath())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4969833b62c060049f458e6f40d62f7c0cce40c"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDY1ODM4OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowODowM1rOF7Kp2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowODowM1rOF7Kp2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NDg1Nw==", "bodyText": "use fail assert?", "url": "https://github.com/apache/hudi/pull/1436#discussion_r397584857", "createdAt": "2020-03-25T03:08:03Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -159,18 +161,85 @@ public void testExportAsHudi() throws IOException {\n       assertTrue(dfs.exists(new Path(partition + \"/.hoodie_partition_metadata\")));\n       assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n     }\n+  }\n+\n+  public static class TestHoodieSnapshotExporterForEarlyAbort extends ExporterTestHarness {\n+\n+    private HoodieSnapshotExporter.Config cfg;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+      super.setUp();\n+      cfg = new Config();\n+      cfg.sourceBasePath = sourcePath;\n+      cfg.targetOutputPath = targetPath;\n+      cfg.outputFormat = OutputFormatValidator.HUDI;\n+    }\n \n     @Test\n-    public void testExportEmptyDataset() throws IOException {\n+    public void testExportWhenTargetPathExists() throws IOException {\n+      // make target output path present\n+      dfs.mkdirs(new Path(targetPath));\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bb9e0b111b3d46f6186082c1c8e55571053f8c0"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDY1ODgyOnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowODoyM1rOF7KqHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzozNzoxNVrOF7LGSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NDkyNg==", "bodyText": "would move to catch block?", "url": "https://github.com/apache/hudi/pull/1436#discussion_r397584926", "createdAt": "2020-03-25T03:08:23Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -159,18 +161,85 @@ public void testExportAsHudi() throws IOException {\n       assertTrue(dfs.exists(new Path(partition + \"/.hoodie_partition_metadata\")));\n       assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n     }\n+  }\n+\n+  public static class TestHoodieSnapshotExporterForEarlyAbort extends ExporterTestHarness {\n+\n+    private HoodieSnapshotExporter.Config cfg;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+      super.setUp();\n+      cfg = new Config();\n+      cfg.sourceBasePath = sourcePath;\n+      cfg.targetOutputPath = targetPath;\n+      cfg.outputFormat = OutputFormatValidator.HUDI;\n+    }\n \n     @Test\n-    public void testExportEmptyDataset() throws IOException {\n+    public void testExportWhenTargetPathExists() throws IOException {\n+      // make target output path present\n+      dfs.mkdirs(new Path(targetPath));\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"The target output path already exists.\", t.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bb9e0b111b3d46f6186082c1c8e55571053f8c0"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDAyNg==", "bodyText": "@leesf The reason of checking the assertion in finally is to cover the case when exporter does not throw exception, which should be deemed as failed test. Putting in catch block may still pass in that case. \ud83d\ude04", "url": "https://github.com/apache/hudi/pull/1436#discussion_r397590026", "createdAt": "2020-03-25T03:28:25Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -159,18 +161,85 @@ public void testExportAsHudi() throws IOException {\n       assertTrue(dfs.exists(new Path(partition + \"/.hoodie_partition_metadata\")));\n       assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n     }\n+  }\n+\n+  public static class TestHoodieSnapshotExporterForEarlyAbort extends ExporterTestHarness {\n+\n+    private HoodieSnapshotExporter.Config cfg;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+      super.setUp();\n+      cfg = new Config();\n+      cfg.sourceBasePath = sourcePath;\n+      cfg.targetOutputPath = targetPath;\n+      cfg.outputFormat = OutputFormatValidator.HUDI;\n+    }\n \n     @Test\n-    public void testExportEmptyDataset() throws IOException {\n+    public void testExportWhenTargetPathExists() throws IOException {\n+      // make target output path present\n+      dfs.mkdirs(new Path(targetPath));\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"The target output path already exists.\", t.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NDkyNg=="}, "originalCommit": {"oid": "5bb9e0b111b3d46f6186082c1c8e55571053f8c0"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MjEzNw==", "bodyText": "let me change these cases to using ExpectedException; something to do with\n@Rule\npublic ExpectedException exceptionRule = ExpectedException.none();\nI'll do a small commit and please see if it looks better. I kinda miss junit 5 \ud83d\ude02", "url": "https://github.com/apache/hudi/pull/1436#discussion_r397592137", "createdAt": "2020-03-25T03:37:15Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -159,18 +161,85 @@ public void testExportAsHudi() throws IOException {\n       assertTrue(dfs.exists(new Path(partition + \"/.hoodie_partition_metadata\")));\n       assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n     }\n+  }\n+\n+  public static class TestHoodieSnapshotExporterForEarlyAbort extends ExporterTestHarness {\n+\n+    private HoodieSnapshotExporter.Config cfg;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+      super.setUp();\n+      cfg = new Config();\n+      cfg.sourceBasePath = sourcePath;\n+      cfg.targetOutputPath = targetPath;\n+      cfg.outputFormat = OutputFormatValidator.HUDI;\n+    }\n \n     @Test\n-    public void testExportEmptyDataset() throws IOException {\n+    public void testExportWhenTargetPathExists() throws IOException {\n+      // make target output path present\n+      dfs.mkdirs(new Path(targetPath));\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"The target output path already exists.\", t.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NDkyNg=="}, "originalCommit": {"oid": "5bb9e0b111b3d46f6186082c1c8e55571053f8c0"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDY1OTU3OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowODo0NlrOF7Kqkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowODo0NlrOF7Kqkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTA0Mg==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1436#discussion_r397585042", "createdAt": "2020-03-25T03:08:46Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -159,18 +161,85 @@ public void testExportAsHudi() throws IOException {\n       assertTrue(dfs.exists(new Path(partition + \"/.hoodie_partition_metadata\")));\n       assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n     }\n+  }\n+\n+  public static class TestHoodieSnapshotExporterForEarlyAbort extends ExporterTestHarness {\n+\n+    private HoodieSnapshotExporter.Config cfg;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+      super.setUp();\n+      cfg = new Config();\n+      cfg.sourceBasePath = sourcePath;\n+      cfg.targetOutputPath = targetPath;\n+      cfg.outputFormat = OutputFormatValidator.HUDI;\n+    }\n \n     @Test\n-    public void testExportEmptyDataset() throws IOException {\n+    public void testExportWhenTargetPathExists() throws IOException {\n+      // make target output path present\n+      dfs.mkdirs(new Path(targetPath));\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"The target output path already exists.\", t.getMessage());\n+      }\n+    }\n+\n+    @Test\n+    public void testExportDatasetWithNoCommit() throws IOException {\n+      // delete commit files\n+      List<Path> commitFiles = Arrays.stream(dfs.listStatus(new Path(sourcePath + \"/.hoodie\")))\n+          .map(FileStatus::getPath)\n+          .filter(filePath -> filePath.getName().endsWith(\".commit\"))\n+          .collect(Collectors.toList());\n+      for (Path p : commitFiles) {\n+        dfs.delete(p, false);\n+      }\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"No commits present. Nothing to snapshot.\", t.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bb9e0b111b3d46f6186082c1c8e55571053f8c0"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDY2MDA4OnYy", "diffSide": "RIGHT", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowOTowMlrOF7Kq5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzowOTowMlrOF7Kq5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTEyNg==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1436#discussion_r397585126", "createdAt": "2020-03-25T03:09:02Z", "author": {"login": "leesf"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -159,18 +161,85 @@ public void testExportAsHudi() throws IOException {\n       assertTrue(dfs.exists(new Path(partition + \"/.hoodie_partition_metadata\")));\n       assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n     }\n+  }\n+\n+  public static class TestHoodieSnapshotExporterForEarlyAbort extends ExporterTestHarness {\n+\n+    private HoodieSnapshotExporter.Config cfg;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+      super.setUp();\n+      cfg = new Config();\n+      cfg.sourceBasePath = sourcePath;\n+      cfg.targetOutputPath = targetPath;\n+      cfg.outputFormat = OutputFormatValidator.HUDI;\n+    }\n \n     @Test\n-    public void testExportEmptyDataset() throws IOException {\n+    public void testExportWhenTargetPathExists() throws IOException {\n+      // make target output path present\n+      dfs.mkdirs(new Path(targetPath));\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"The target output path already exists.\", t.getMessage());\n+      }\n+    }\n+\n+    @Test\n+    public void testExportDatasetWithNoCommit() throws IOException {\n+      // delete commit files\n+      List<Path> commitFiles = Arrays.stream(dfs.listStatus(new Path(sourcePath + \"/.hoodie\")))\n+          .map(FileStatus::getPath)\n+          .filter(filePath -> filePath.getName().endsWith(\".commit\"))\n+          .collect(Collectors.toList());\n+      for (Path p : commitFiles) {\n+        dfs.delete(p, false);\n+      }\n+\n+      // export\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"No commits present. Nothing to snapshot.\", t.getMessage());\n+      }\n+\n+      // Check results\n+      assertFalse(dfs.exists(new Path(targetPath)));\n+    }\n+\n+    @Test\n+    public void testExportDatasetWithNoPartition() throws IOException {\n       // delete all source data\n       dfs.delete(new Path(sourcePath + \"/\" + PARTITION_PATH), true);\n \n       // export\n-      new HoodieSnapshotExporter().export(SparkSession.builder().config(jsc.getConf()).getOrCreate(), cfg);\n+      Throwable t = null;\n+      try {\n+        new HoodieSnapshotExporter().export(jsc, cfg);\n+      } catch (Exception e) {\n+        t = e;\n+      } finally {\n+        assertNotNull(t);\n+        assertTrue(t instanceof HoodieSnapshotExporterException);\n+        assertEquals(\"The source dataset has 0 partition to snapshot.\", t.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bb9e0b111b3d46f6186082c1c8e55571053f8c0"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}