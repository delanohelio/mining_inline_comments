{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTM0MjQz", "number": 1332, "title": "[HUDI -409] Match header and footer block length to improve corrupted block detection", "bodyText": "What is the purpose of the pull request\n\nThis PR is to address the JIRA ticket - HUDI-409\nCurrent logic to determine corrupted block (by just using #HUDI# marker alone) fails to address following issues\n\nCrashing the reader if the next block of the corrupted block has the exact same size as amount of missing data from the corrupted block\nStart of the next block is determined solely based on the marker and this can create multiple corrupted block if the partial data of corrupted block has the marker as part of the written data\n\n\n\nBrief change log\n\nMade changes to HoodieLogFileReader's next() and prev() methods. Added additional check to validate if block sizes stored at start and end of the blocks are the same. Report block as corrupted if they don't match\nModified existing unit tests TestHoodieLogFormat#testAppendAndReadOnCorruptedLog() & TestHoodieLogFormat#testAppendAndReadOnCorruptedLogInReverse() to add additional blocks to validate the reader changes\n\nVerify this pull request\nThis change added tests and can be verified as follows:\n\nModified  TestHoodieLogFormat#testAppendAndReadOnCorruptedLog() & TestHoodieLogFormat#testAppendAndReadOnCorruptedLogInReverse() tests to account for the change\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-02-13T23:13:31Z", "url": "https://github.com/apache/hudi/pull/1332", "merged": true, "mergeCommit": {"oid": "9d46ce380a3929605b3838238e8aa07a9918ab7a"}, "closed": true, "closedAt": "2020-03-03T21:26:55Z", "author": {"login": "ramachandranms"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEFXjjAFqTM1ODY2NjIwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKHH-JABqjMwOTM0NzYyNTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjY2MjA4", "url": "https://github.com/apache/hudi/pull/1332#pullrequestreview-358666208", "createdAt": "2020-02-14T01:37:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozNzowMlrOFppRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozNzowMlrOFppRJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxMjA3MA==", "bodyText": "This is assuming that the block length will always be the last thing written in the footer, can we add comments in the footer writer part to denote this", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379212070", "createdAt": "2020-02-14T01:37:02Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjY2NzU2", "url": "https://github.com/apache/hudi/pull/1332#pullrequestreview-358666756", "createdAt": "2020-02-14T01:39:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozOTowNlrOFppTDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTozOTowNlrOFppTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxMjU1Ng==", "bodyText": "nit : s/blockSizeFooter/blockSizeFromFooter", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379212556", "createdAt": "2020-02-14T01:39:06Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);\n+    long blockSizeFooter = inputStream.readLong() - MAGIC_BUFFER.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTA1Mjcy", "url": "https://github.com/apache/hudi/pull/1332#pullrequestreview-359105272", "createdAt": "2020-02-14T17:34:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozNDowOFrOFp-SRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozNDowOFrOFp-SRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NjQyMA==", "bodyText": "Also, we need some kind of abstraction here, feel like the reading of the block size based on long bytes is leaking here and will open to other issues when trying to evolve the code. For now, can you move this to a method and add a test case just for this ? Make that method @VisibleForTesting so it's available to be called in the test class - this way if the footer is evolved, we have a test to catch issues", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379556420", "createdAt": "2020-02-14T17:34:08Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,6 +239,15 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTA2OTMz", "url": "https://github.com/apache/hudi/pull/1332#pullrequestreview-359106933", "createdAt": "2020-02-14T17:37:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozNzowN1rOFp-XTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozNzowN1rOFp-XTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NzcwOA==", "bodyText": "This code is pretty complicated to understand. I see that you removed hasNext() and added some code around this + handling of corrupt blocks here. Can this be simplified with hasNext(), checkCorruptBlock() method level abstractions ? We need more logs as well to explain such checks..", "url": "https://github.com/apache/hudi/pull/1332#discussion_r379557708", "createdAt": "2020-02-14T17:37:07Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -362,13 +370,18 @@ public HoodieLogBlock prev() throws IOException {\n     // blocksize should read everything about a block including the length as well\n     try {\n       inputStream.seek(reverseLogFilePosition - blockSize);\n+      // get the block size from head and match it with the block size from tail", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTA3MzE4", "url": "https://github.com/apache/hudi/pull/1332#pullrequestreview-359107318", "createdAt": "2020-02-14T17:37:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjMzOTU2", "url": "https://github.com/apache/hudi/pull/1332#pullrequestreview-363633956", "createdAt": "2020-02-24T19:15:37Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjI3NDA3", "url": "https://github.com/apache/hudi/pull/1332#pullrequestreview-368227407", "createdAt": "2020-03-03T18:39:41Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozOTo0MVrOFxR07Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozOTo0MVrOFxR07Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNjYyMQ==", "bodyText": "Can you add the reason why we subtracting Magic header length", "url": "https://github.com/apache/hudi/pull/1332#discussion_r387216621", "createdAt": "2020-03-03T18:39:41Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -239,12 +240,24 @@ private boolean isBlockCorrupt(int blocksize) throws IOException {\n       return true;\n     }\n \n+    // check if the blocksize mentioned in the footer is the same as the header; by seeking back the length of a long\n+    // the backward seek does not incur additional IO as {@link org.apache.hadoop.hdfs.DFSInputStream#seek()}\n+    // only moves the index. actual IO happens on the next read operation\n+    inputStream.seek(inputStream.getPos() - Long.BYTES);\n+    long blockSizeFromFooter = inputStream.readLong() - MAGIC_BUFFER.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2344e5613749740b28cf6cb7f6b69396677be1", "author": {"user": {"login": "ramachandranms", "name": "Ramachandran M S"}}, "url": "https://github.com/apache/hudi/commit/be2344e5613749740b28cf6cb7f6b69396677be1", "committedDate": "2020-03-03T19:03:13Z", "message": "[HUDI -409] Match header and footer block length to improve corrupted block detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "be2344e5613749740b28cf6cb7f6b69396677be1", "author": {"user": {"login": "ramachandranms", "name": "Ramachandran M S"}}, "url": "https://github.com/apache/hudi/commit/be2344e5613749740b28cf6cb7f6b69396677be1", "committedDate": "2020-03-03T19:03:13Z", "message": "[HUDI -409] Match header and footer block length to improve corrupted block detection"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3551, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}