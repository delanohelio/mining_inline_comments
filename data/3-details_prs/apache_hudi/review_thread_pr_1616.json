{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTEzMDQ3", "number": 1616, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjoxNDozOVrOD7TufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwODoyMDozMlrOD_Ljhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTE1NzcyOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjoxNDozOVrOGTjX0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODoyMjoxNVrOGZgD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTY2NQ==", "bodyText": "@nsivabalan : Dont we need to have this bounds check even for seek/read (offset-based) APIs ?", "url": "https://github.com/apache/hudi/pull/1616#discussion_r423155665", "createdAt": "2020-05-11T16:14:39Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "diffHunk": "@@ -56,24 +56,29 @@ public long getPos() throws IOException {\n \n   @Override\n   public int read(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     return outerStream.read(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     outerStream.readFully(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer)\n       throws IOException {\n-    outerStream.readFully(startOffset + position, buffer, 0, buffer.length);\n+    readFully(position, buffer, 0, buffer.length);\n   }\n \n   @Override\n   public boolean seekToNewSource(long targetPos) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bddcf662a33079e32d3ae69e06d7995a9bc7e16"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3Njg0Mg==", "bodyText": "+1 we need to rethink this entire class this way ..", "url": "https://github.com/apache/hudi/pull/1616#discussion_r425276842", "createdAt": "2020-05-14T16:36:21Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "diffHunk": "@@ -56,24 +56,29 @@ public long getPos() throws IOException {\n \n   @Override\n   public int read(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     return outerStream.read(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     outerStream.readFully(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer)\n       throws IOException {\n-    outerStream.readFully(startOffset + position, buffer, 0, buffer.length);\n+    readFully(position, buffer, 0, buffer.length);\n   }\n \n   @Override\n   public boolean seekToNewSource(long targetPos) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTY2NQ=="}, "originalCommit": {"oid": "7bddcf662a33079e32d3ae69e06d7995a9bc7e16"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NDU3Nw==", "bodyText": "have fixed seek(targetpos). Trying to understand seekToNewSource(long targetPos). Docs says \"Seek to the given position on an alternate copy of the data. Returns true if alternate copy is found, false otherwise\". I am not sure how to go about this.\nIf we check for bounds and could return false (if targetPos > length), but what in case alternate copy is not found?\nOr I could do something like this.\n@Override\n   public boolean seekToNewSource(long targetPos) throws IOException {\n         boolean returnVal = outerStream.seekToNewSource(startOffset + targetPos)\n         if(returnVal) {\n               if(targetPos > length ) {\n                   returnVal = false\n               }\n          }\n       return returnVal; \n    }", "url": "https://github.com/apache/hudi/pull/1616#discussion_r425494577", "createdAt": "2020-05-15T00:03:30Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "diffHunk": "@@ -56,24 +56,29 @@ public long getPos() throws IOException {\n \n   @Override\n   public int read(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     return outerStream.read(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     outerStream.readFully(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer)\n       throws IOException {\n-    outerStream.readFully(startOffset + position, buffer, 0, buffer.length);\n+    readFully(position, buffer, 0, buffer.length);\n   }\n \n   @Override\n   public boolean seekToNewSource(long targetPos) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTY2NQ=="}, "originalCommit": {"oid": "7bddcf662a33079e32d3ae69e06d7995a9bc7e16"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3MDE1OA==", "bodyText": "@bvaradar ping.", "url": "https://github.com/apache/hudi/pull/1616#discussion_r428970158", "createdAt": "2020-05-21T23:38:18Z", "author": {"login": "nsivabalan"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "diffHunk": "@@ -56,24 +56,29 @@ public long getPos() throws IOException {\n \n   @Override\n   public int read(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     return outerStream.read(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     outerStream.readFully(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer)\n       throws IOException {\n-    outerStream.readFully(startOffset + position, buffer, 0, buffer.length);\n+    readFully(position, buffer, 0, buffer.length);\n   }\n \n   @Override\n   public boolean seekToNewSource(long targetPos) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTY2NQ=="}, "originalCommit": {"oid": "7bddcf662a33079e32d3ae69e06d7995a9bc7e16"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5Mjg5Mw==", "bodyText": "@nsivabalan : Can we do bounds check first and throw error if it fails then delegate. Even if it is a different copy, the offsets are expected to be consistent across copies.", "url": "https://github.com/apache/hudi/pull/1616#discussion_r429392893", "createdAt": "2020-05-22T18:22:15Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "diffHunk": "@@ -56,24 +56,29 @@ public long getPos() throws IOException {\n \n   @Override\n   public int read(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     return outerStream.read(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {\n+      throw new IOException(\"Attempting to read past inline content\");\n+    }\n     outerStream.readFully(startOffset + position, buffer, offset, length);\n   }\n \n   @Override\n   public void readFully(long position, byte[] buffer)\n       throws IOException {\n-    outerStream.readFully(startOffset + position, buffer, 0, buffer.length);\n+    readFully(position, buffer, 0, buffer.length);\n   }\n \n   @Override\n   public boolean seekToNewSource(long targetPos) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTY2NQ=="}, "originalCommit": {"oid": "7bddcf662a33079e32d3ae69e06d7995a9bc7e16"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTc2MTk5OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwODoyMDozMlrOGZtaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwODoyMDo0MlrOGZtasA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMTY4Mg==", "bodyText": "I think the condition be length + offset > this.length. Right ? Can you please check", "url": "https://github.com/apache/hudi/pull/1616#discussion_r429611682", "createdAt": "2020-05-24T08:20:32Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "diffHunk": "@@ -56,24 +60,32 @@ public long getPos() throws IOException {\n \n   @Override\n   public int read(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMTY5Ng==", "bodyText": "@nsivabalan : ^^", "url": "https://github.com/apache/hudi/pull/1616#discussion_r429611696", "createdAt": "2020-05-24T08:20:42Z", "author": {"login": "bvaradar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/inline/InLineFsDataInputStream.java", "diffHunk": "@@ -56,24 +60,32 @@ public long getPos() throws IOException {\n \n   @Override\n   public int read(long position, byte[] buffer, int offset, int length) throws IOException {\n+    if ((length - offset) > this.length) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMTY4Mg=="}, "originalCommit": null, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4643, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}