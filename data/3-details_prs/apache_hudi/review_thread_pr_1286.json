{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NzU3NDI2", "number": 1286, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODo1MTo1NFrODbrpTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODo1MTo1NFrODbrpTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzUzMjMwOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/log/TestHoodieLogFormat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODo1MTo1NFrOFjTq_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTowMToxOVrOFjT-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Njc4MA==", "bodyText": "nit : s/scheme/schema/", "url": "https://github.com/apache/hudi/pull/1286#discussion_r372566780", "createdAt": "2020-01-29T18:51:54Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/log/TestHoodieLogFormat.java", "diffHunk": "@@ -1296,4 +1297,36 @@ public void testBasicAppendAndTraverseInReverse() throws IOException, URISyntaxE\n     assertFalse(reader.hasPrev());\n     reader.close();\n   }\n+\n+  @Test\n+  public void testV0Format() throws IOException, InterruptedException, URISyntaxException {\n+    // HoodieLogFormatVersion.DEFAULT_VERSION has been deprecated so we cannot\n+    // create a writer for it. So these tests are only for the HoodieAvroDataBlock\n+    // of older version.\n+    Schema schema = getSimpleSchema();\n+    List<IndexedRecord> records = SchemaTestUtil.generateTestRecords(0, 100);\n+    List<IndexedRecord> recordsCopy = new ArrayList<>(records);\n+    assertEquals(records.size(), 100);\n+    assertEquals(recordsCopy.size(), 100);\n+    HoodieAvroDataBlock dataBlock = new HoodieAvroDataBlock(records, schema);\n+    byte[] content = dataBlock.getBytes(schema);\n+    assertTrue(content.length > 0);\n+\n+    HoodieLogBlock logBlock = HoodieAvroDataBlock.getBlock(content, schema);\n+    assertEquals(logBlock.getBlockType(), HoodieLogBlockType.AVRO_DATA_BLOCK);\n+    List<IndexedRecord> readRecords = ((HoodieAvroDataBlock)logBlock).getRecords();\n+    assertEquals(readRecords.size(), recordsCopy.size());\n+    for (int i = 0; i < recordsCopy.size(); ++i) {\n+      assertEquals(recordsCopy.get(i), readRecords.get(i));\n+    }\n+\n+    // Reader scheme is optional if it is same as write schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MTY0OA==", "bodyText": "Fixed", "url": "https://github.com/apache/hudi/pull/1286#discussion_r372571648", "createdAt": "2020-01-29T19:01:19Z", "author": {"login": "prashantwason"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/log/TestHoodieLogFormat.java", "diffHunk": "@@ -1296,4 +1297,36 @@ public void testBasicAppendAndTraverseInReverse() throws IOException, URISyntaxE\n     assertFalse(reader.hasPrev());\n     reader.close();\n   }\n+\n+  @Test\n+  public void testV0Format() throws IOException, InterruptedException, URISyntaxException {\n+    // HoodieLogFormatVersion.DEFAULT_VERSION has been deprecated so we cannot\n+    // create a writer for it. So these tests are only for the HoodieAvroDataBlock\n+    // of older version.\n+    Schema schema = getSimpleSchema();\n+    List<IndexedRecord> records = SchemaTestUtil.generateTestRecords(0, 100);\n+    List<IndexedRecord> recordsCopy = new ArrayList<>(records);\n+    assertEquals(records.size(), 100);\n+    assertEquals(recordsCopy.size(), 100);\n+    HoodieAvroDataBlock dataBlock = new HoodieAvroDataBlock(records, schema);\n+    byte[] content = dataBlock.getBytes(schema);\n+    assertTrue(content.length > 0);\n+\n+    HoodieLogBlock logBlock = HoodieAvroDataBlock.getBlock(content, schema);\n+    assertEquals(logBlock.getBlockType(), HoodieLogBlockType.AVRO_DATA_BLOCK);\n+    List<IndexedRecord> readRecords = ((HoodieAvroDataBlock)logBlock).getRecords();\n+    assertEquals(readRecords.size(), recordsCopy.size());\n+    for (int i = 0; i < recordsCopy.size(); ++i) {\n+      assertEquals(recordsCopy.get(i), readRecords.get(i));\n+    }\n+\n+    // Reader scheme is optional if it is same as write schema", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Njc4MA=="}, "originalCommit": null, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 14, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}