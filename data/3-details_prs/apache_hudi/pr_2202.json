{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjQ0Mzg4", "number": 2202, "title": "[HUDI-1352] Add FileSystemView APIs to query pending clustering ops", "bodyText": "What is the purpose of the pull request\nAdd FileSystemView APIs to query pending clustering ops\nBrief change log\n\nClustering is tracked using 'REPLACE' action\nIntroduce metadata for replace requested file. OperationType is set to cluster to differentiate between Clustering and other use cases\nChanges to support IncrementalTimeline pending. HUDI-1353\nChanges to block updates on files in pending clustering is pending HUDI-1354\nHow clustering interacts with other files such as bootstrapped (non-hudi) files is pending.\n\nVerify this pull request\nThis change added tests and can be verified as follows:\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-10-23T22:27:57Z", "url": "https://github.com/apache/hudi/pull/2202", "merged": true, "mergeCommit": {"oid": "33ec88fc3840c47a54b5862e4d276889c4121231"}, "closed": true, "closedAt": "2020-11-05T16:49:58Z", "author": {"login": "satishkotha"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWyG2JABqjM5Mjg3NjUyNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZlLsSAFqTUyNDQ1NjY3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02e72de9122b7736189f6b6d2c306be531488cb9", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/02e72de9122b7736189f6b6d2c306be531488cb9", "committedDate": "2020-10-23T22:20:28Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}, "afterCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/5071687bfd54c1645eb6770398290e9712eb3e0d", "committedDate": "2020-10-28T00:05:58Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzUzODcy", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518753872", "createdAt": "2020-10-28T14:54:41Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1NDo0MVrOHpuOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1NDo0MVrOHpuOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxMTA0NA==", "bodyText": "@satishkotha AVRO has a way to add description with a type called \"doc\", we can either use that or add these comments at the beginning of the avro file.", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513511044", "createdAt": "2020-10-28T14:54:41Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/avro/HoodieClusteringGroup.avsc", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieClusteringGroup\",\n+   \"type\":\"record\",\n+   \"fields\":[\n+      {\n+         /* Group of files that needs to merged. All the slices in a group will belong to same partition initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzU4NTUx", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518758551", "createdAt": "2020-10-28T14:58:43Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1ODo0M1rOHpub9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1ODo0M1rOHpub9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxNDQ4NA==", "bodyText": "At a high level, don't think we need a clustering strategy avsc for this, we can just drive this from Reflection and classnames, just like CompactionPlans ?", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513514484", "createdAt": "2020-10-28T14:58:43Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/avro/HoodieClusteringStrategy.avsc", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzU5NjY0", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518759664", "createdAt": "2020-10-28T14:59:41Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1OTo0MVrOHpufOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1OTo0MVrOHpufOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxNTMyMQ==", "bodyText": "Same comment, just roll up all the datastructures that you need into the HoodieClusteringPlan, is it possible to merge the clustering plan with the insert-overwrite plan ?", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513515321", "createdAt": "2020-10-28T14:59:41Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/avro/HoodieRequestedReplaceMetadata.avsc", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzYwMDEz", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518760013", "createdAt": "2020-10-28T15:00:00Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowMDowMFrOHpugSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowMDowMFrOHpugSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxNTU5NA==", "bodyText": "Same comment, please roll this up into HoodieClusteringPlan.avsc", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513515594", "createdAt": "2020-10-28T15:00:00Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/avro/HoodieSliceInfo.avsc", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzY1OTkz", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518765993", "createdAt": "2020-10-28T15:05:25Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowNToyNVrOHpuxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowNToyNVrOHpuxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDA0OA==", "bodyText": "Alter comments accordingly", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513520048", "createdAt": "2020-10-28T15:05:25Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/dto/ClusteringOpDTO.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+\n+/**\n+ * The data transfer object of compaction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzY3MTI0", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518767124", "createdAt": "2020-10-28T15:06:29Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowNjoyOVrOHpu1Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowNjoyOVrOHpu1Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDkyMw==", "bodyText": "What does a fileID mean here ? Is this the lowest representation of the clustering plan, will the clustering plan contain a bunch of ClusteringOpDTO's ?", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513520923", "createdAt": "2020-10-28T15:06:29Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/dto/ClusteringOpDTO.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.table.timeline.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.collection.Pair;\n+\n+/**\n+ * The data transfer object of compaction.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ClusteringOpDTO {\n+\n+  @JsonProperty(\"id\")\n+  private String fileId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzY5MjY2", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518769266", "createdAt": "2020-10-28T15:08:25Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowODoyNVrOHpu7Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowODoyNVrOHpu7Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMjUxMA==", "bodyText": "Is this comment the right description for this API ?", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513522510", "createdAt": "2020-10-28T15:08:25Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -710,6 +721,40 @@ private String formatPartitionKey(String partitionStr) {\n    */\n   abstract void removePendingCompactionOperations(Stream<Pair<String, CompactionOperation>> operations);\n \n+  /**\n+   * Check if there is an outstanding clustering operation (requested/inflight) scheduled for this file.\n+   *\n+   * @param fgId File-Group Id\n+   * @return true if there is a pending clustering, false otherwise\n+   */\n+  protected abstract boolean isPendingClusteringScheduledForFileId(HoodieFileGroupId fgId);\n+\n+  /**\n+   *  Get pending clustering instant time for specified file group. Return None if file group is not in pending\n+   *  clustering operation.\n+   */\n+  protected abstract Option<HoodieInstant> getPendingClusteringInstant(final HoodieFileGroupId fileGroupId);\n+\n+  /**\n+   * Fetch all file groups in pending clustering.\n+   */\n+  protected abstract Stream<Pair<HoodieFileGroupId, HoodieInstant>> fetchFileGroupsInPendingClustering();\n+\n+  /**\n+   * resets the pending clustering operation and overwrite with the new list.\n+   */\n+  abstract void resetFileGroupsInPendingClustering(Map<HoodieFileGroupId, HoodieInstant> fgIdToInstantMap);\n+\n+  /**\n+   * Add metadata for pending clustering operation to store for given instant.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzY5Nzg5", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518769789", "createdAt": "2020-10-28T15:08:54Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowODo1NFrOHpu8yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowODo1NFrOHpu8yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMjg4OQ==", "bodyText": "How will this API be used ?", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513522889", "createdAt": "2020-10-28T15:08:54Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java", "diffHunk": "@@ -710,6 +721,40 @@ private String formatPartitionKey(String partitionStr) {\n    */\n   abstract void removePendingCompactionOperations(Stream<Pair<String, CompactionOperation>> operations);\n \n+  /**\n+   * Check if there is an outstanding clustering operation (requested/inflight) scheduled for this file.\n+   *\n+   * @param fgId File-Group Id\n+   * @return true if there is a pending clustering, false otherwise\n+   */\n+  protected abstract boolean isPendingClusteringScheduledForFileId(HoodieFileGroupId fgId);\n+\n+  /**\n+   *  Get pending clustering instant time for specified file group. Return None if file group is not in pending\n+   *  clustering operation.\n+   */\n+  protected abstract Option<HoodieInstant> getPendingClusteringInstant(final HoodieFileGroupId fileGroupId);\n+\n+  /**\n+   * Fetch all file groups in pending clustering.\n+   */\n+  protected abstract Stream<Pair<HoodieFileGroupId, HoodieInstant>> fetchFileGroupsInPendingClustering();\n+\n+  /**\n+   * resets the pending clustering operation and overwrite with the new list.\n+   */\n+  abstract void resetFileGroupsInPendingClustering(Map<HoodieFileGroupId, HoodieInstant> fgIdToInstantMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Nzc2ODIx", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518776821", "createdAt": "2020-10-28T15:15:21Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNToyMVrOHpvRAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNToyMVrOHpvRAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA2Ng==", "bodyText": "Can we change this loop to java 8 stream style, fileSliceGroups.stream().foreach()..", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513528066", "createdAt": "2020-10-28T15:15:21Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ClusteringUtils.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.util;\n+\n+import org.apache.hudi.avro.model.HoodieClusteringGroup;\n+import org.apache.hudi.avro.model.HoodieClusteringPlan;\n+import org.apache.hudi.avro.model.HoodieClusteringStrategy;\n+import org.apache.hudi.avro.model.HoodieRequestedReplaceMetadata;\n+import org.apache.hudi.avro.model.HoodieSliceInfo;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.BaseFile;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieIOException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Helper class to generate clustering plan from metadata.\n+ */\n+public class ClusteringUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(ClusteringUtils.class);\n+\n+  public static final String TOTAL_IO_READ_MB = \"TOTAL_IO_READ_MB\";\n+  public static final String TOTAL_LOG_FILE_SIZE = \"TOTAL_LOG_FILES_SIZE\";\n+  public static final String TOTAL_LOG_FILES = \"TOTAL_LOG_FILES\";\n+\n+  /**\n+   * Get all pending clustering plans along with their instants.\n+   */\n+  public static Stream<Pair<HoodieInstant, HoodieClusteringPlan>> getAllPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    List<HoodieInstant> pendingReplaceInstants =\n+        metaClient.getActiveTimeline().filterPendingReplaceTimeline().getInstants().collect(Collectors.toList());\n+    return pendingReplaceInstants.stream().map(instant -> getClusteringPlan(metaClient, instant))\n+        .filter(Option::isPresent).map(Option::get);\n+  }\n+\n+  public static Option<Pair<HoodieInstant, HoodieClusteringPlan>> getClusteringPlan(HoodieTableMetaClient metaClient, HoodieInstant requestedReplaceInstant) {\n+    try {\n+      Option<byte[]> content = metaClient.getActiveTimeline().getInstantDetails(requestedReplaceInstant);\n+      if (!content.isPresent() || content.get().length == 0) {\n+        // few operations create requested file without any content. Assume these are not clustering\n+        LOG.warn(\"No content found in requested file for instant \" + requestedReplaceInstant);\n+        return Option.empty();\n+      }\n+      HoodieRequestedReplaceMetadata requestedReplaceMetadata = TimelineMetadataUtils.deserializeRequestedReplaceMetadta(content.get());\n+      if (WriteOperationType.CLUSTER.name().equals(requestedReplaceMetadata.getOperationType())) {\n+        return Option.of(Pair.of(requestedReplaceInstant, requestedReplaceMetadata.getClusteringPlan()));\n+      }\n+      return Option.empty();\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Error reading clustering plan \" + requestedReplaceInstant.getTimestamp(), e);\n+    }\n+  }\n+\n+  /**\n+   * Get filegroups to pending clustering instant mapping for all pending clustering plans.\n+   * This includes all clustering operattions in 'requested' and 'inflight' states.\n+   */\n+  public static Map<HoodieFileGroupId, HoodieInstant> getAllFileGroupsInPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    Stream<Pair<HoodieInstant, HoodieClusteringPlan>> pendingClusteringPlans = getAllPendingClusteringPlans(metaClient);\n+    Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> resultStream = pendingClusteringPlans.flatMap(clusteringPlan ->\n+        // get all filegroups in the plan\n+        getFileGroupEntriesInClusteringPlan(clusteringPlan.getLeft(), clusteringPlan.getRight()));\n+\n+    Map<HoodieFileGroupId, HoodieInstant> resultMap = resultStream.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    LOG.info(\"Found \" + resultMap.size() + \" files in pending clustering operations\");\n+    return resultMap;\n+  }\n+\n+  public static Stream<Pair<HoodieFileGroupId, HoodieInstant>> getFileGroupsInPendingClusteringInstant(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    Stream<HoodieFileGroupId> partitionToFileIdLists = clusteringPlan.getInputGroups().stream().flatMap(ClusteringUtils::getFileGroupsFromClusteringGroup);\n+    return partitionToFileIdLists.map(e -> Pair.of(e, instant));\n+  }\n+\n+  private static Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> getFileGroupEntriesInClusteringPlan(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    return getFileGroupsInPendingClusteringInstant(instant, clusteringPlan).map(entry ->\n+        new AbstractMap.SimpleEntry<>(entry.getLeft(), entry.getRight()));\n+  }\n+\n+  private static Stream<HoodieFileGroupId> getFileGroupsFromClusteringGroup(HoodieClusteringGroup group) {\n+    return group.getSlices().stream().map(slice -> new HoodieFileGroupId(slice.getPartitionPath(), slice.getFileId()));\n+  }\n+\n+  /**\n+   * Create clustering plan from input fileSliceGroups.\n+   */\n+  public static HoodieClusteringPlan createClusteringPlan(String strategyClassName,\n+                                                          Map<String, String> strategyParams,\n+                                                          List<FileSlice>[] fileSliceGroups) {\n+    List<HoodieClusteringGroup> clusteringGroups = new ArrayList<>();\n+    for (int i = 0; i < fileSliceGroups.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Nzc4Mjk5", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518778299", "createdAt": "2020-10-28T15:16:42Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNjo0MlrOHpvVVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNjo0MlrOHpvVVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyOTE3NA==", "bodyText": "What happens if we don't setExtraMetadata to new Hashmap ? In general, we should only set the params which we need to and rest of the uninitialized params should be handled internally in the HoodieClusteringPlan.", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513529174", "createdAt": "2020-10-28T15:16:42Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ClusteringUtils.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.util;\n+\n+import org.apache.hudi.avro.model.HoodieClusteringGroup;\n+import org.apache.hudi.avro.model.HoodieClusteringPlan;\n+import org.apache.hudi.avro.model.HoodieClusteringStrategy;\n+import org.apache.hudi.avro.model.HoodieRequestedReplaceMetadata;\n+import org.apache.hudi.avro.model.HoodieSliceInfo;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.BaseFile;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieIOException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Helper class to generate clustering plan from metadata.\n+ */\n+public class ClusteringUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(ClusteringUtils.class);\n+\n+  public static final String TOTAL_IO_READ_MB = \"TOTAL_IO_READ_MB\";\n+  public static final String TOTAL_LOG_FILE_SIZE = \"TOTAL_LOG_FILES_SIZE\";\n+  public static final String TOTAL_LOG_FILES = \"TOTAL_LOG_FILES\";\n+\n+  /**\n+   * Get all pending clustering plans along with their instants.\n+   */\n+  public static Stream<Pair<HoodieInstant, HoodieClusteringPlan>> getAllPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    List<HoodieInstant> pendingReplaceInstants =\n+        metaClient.getActiveTimeline().filterPendingReplaceTimeline().getInstants().collect(Collectors.toList());\n+    return pendingReplaceInstants.stream().map(instant -> getClusteringPlan(metaClient, instant))\n+        .filter(Option::isPresent).map(Option::get);\n+  }\n+\n+  public static Option<Pair<HoodieInstant, HoodieClusteringPlan>> getClusteringPlan(HoodieTableMetaClient metaClient, HoodieInstant requestedReplaceInstant) {\n+    try {\n+      Option<byte[]> content = metaClient.getActiveTimeline().getInstantDetails(requestedReplaceInstant);\n+      if (!content.isPresent() || content.get().length == 0) {\n+        // few operations create requested file without any content. Assume these are not clustering\n+        LOG.warn(\"No content found in requested file for instant \" + requestedReplaceInstant);\n+        return Option.empty();\n+      }\n+      HoodieRequestedReplaceMetadata requestedReplaceMetadata = TimelineMetadataUtils.deserializeRequestedReplaceMetadta(content.get());\n+      if (WriteOperationType.CLUSTER.name().equals(requestedReplaceMetadata.getOperationType())) {\n+        return Option.of(Pair.of(requestedReplaceInstant, requestedReplaceMetadata.getClusteringPlan()));\n+      }\n+      return Option.empty();\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Error reading clustering plan \" + requestedReplaceInstant.getTimestamp(), e);\n+    }\n+  }\n+\n+  /**\n+   * Get filegroups to pending clustering instant mapping for all pending clustering plans.\n+   * This includes all clustering operattions in 'requested' and 'inflight' states.\n+   */\n+  public static Map<HoodieFileGroupId, HoodieInstant> getAllFileGroupsInPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    Stream<Pair<HoodieInstant, HoodieClusteringPlan>> pendingClusteringPlans = getAllPendingClusteringPlans(metaClient);\n+    Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> resultStream = pendingClusteringPlans.flatMap(clusteringPlan ->\n+        // get all filegroups in the plan\n+        getFileGroupEntriesInClusteringPlan(clusteringPlan.getLeft(), clusteringPlan.getRight()));\n+\n+    Map<HoodieFileGroupId, HoodieInstant> resultMap = resultStream.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    LOG.info(\"Found \" + resultMap.size() + \" files in pending clustering operations\");\n+    return resultMap;\n+  }\n+\n+  public static Stream<Pair<HoodieFileGroupId, HoodieInstant>> getFileGroupsInPendingClusteringInstant(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    Stream<HoodieFileGroupId> partitionToFileIdLists = clusteringPlan.getInputGroups().stream().flatMap(ClusteringUtils::getFileGroupsFromClusteringGroup);\n+    return partitionToFileIdLists.map(e -> Pair.of(e, instant));\n+  }\n+\n+  private static Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> getFileGroupEntriesInClusteringPlan(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    return getFileGroupsInPendingClusteringInstant(instant, clusteringPlan).map(entry ->\n+        new AbstractMap.SimpleEntry<>(entry.getLeft(), entry.getRight()));\n+  }\n+\n+  private static Stream<HoodieFileGroupId> getFileGroupsFromClusteringGroup(HoodieClusteringGroup group) {\n+    return group.getSlices().stream().map(slice -> new HoodieFileGroupId(slice.getPartitionPath(), slice.getFileId()));\n+  }\n+\n+  /**\n+   * Create clustering plan from input fileSliceGroups.\n+   */\n+  public static HoodieClusteringPlan createClusteringPlan(String strategyClassName,\n+                                                          Map<String, String> strategyParams,\n+                                                          List<FileSlice>[] fileSliceGroups) {\n+    List<HoodieClusteringGroup> clusteringGroups = new ArrayList<>();\n+    for (int i = 0; i < fileSliceGroups.length; i++) {\n+      List<FileSlice> fileSliceGroup = fileSliceGroups[i];\n+      Map<String, Double> groupMetrics = buildMetrics(fileSliceGroup);\n+      List<HoodieSliceInfo> sliceInfos = getFileSliceInfo(fileSliceGroup);\n+      clusteringGroups.add(HoodieClusteringGroup.newBuilder().setSlices(sliceInfos).setMetrics(groupMetrics).build());\n+    }\n+\n+    HoodieClusteringStrategy strategy = HoodieClusteringStrategy.newBuilder()\n+        .setStrategyClassName(strategyClassName).setStrategyParams(strategyParams)\n+        .build();\n+\n+    HoodieClusteringPlan plan = HoodieClusteringPlan.newBuilder()\n+        .setInputGroups(clusteringGroups)\n+        .setExtraMetadata(new HashMap<>())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Nzc4ODc0", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518778874", "createdAt": "2020-10-28T15:17:13Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNzoxM1rOHpvW-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNzoxM1rOHpvW-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyOTU5NQ==", "bodyText": "Should the dataFilePath be empty string or empty Option ?", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513529595", "createdAt": "2020-10-28T15:17:13Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ClusteringUtils.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.util;\n+\n+import org.apache.hudi.avro.model.HoodieClusteringGroup;\n+import org.apache.hudi.avro.model.HoodieClusteringPlan;\n+import org.apache.hudi.avro.model.HoodieClusteringStrategy;\n+import org.apache.hudi.avro.model.HoodieRequestedReplaceMetadata;\n+import org.apache.hudi.avro.model.HoodieSliceInfo;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.BaseFile;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieIOException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Helper class to generate clustering plan from metadata.\n+ */\n+public class ClusteringUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(ClusteringUtils.class);\n+\n+  public static final String TOTAL_IO_READ_MB = \"TOTAL_IO_READ_MB\";\n+  public static final String TOTAL_LOG_FILE_SIZE = \"TOTAL_LOG_FILES_SIZE\";\n+  public static final String TOTAL_LOG_FILES = \"TOTAL_LOG_FILES\";\n+\n+  /**\n+   * Get all pending clustering plans along with their instants.\n+   */\n+  public static Stream<Pair<HoodieInstant, HoodieClusteringPlan>> getAllPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    List<HoodieInstant> pendingReplaceInstants =\n+        metaClient.getActiveTimeline().filterPendingReplaceTimeline().getInstants().collect(Collectors.toList());\n+    return pendingReplaceInstants.stream().map(instant -> getClusteringPlan(metaClient, instant))\n+        .filter(Option::isPresent).map(Option::get);\n+  }\n+\n+  public static Option<Pair<HoodieInstant, HoodieClusteringPlan>> getClusteringPlan(HoodieTableMetaClient metaClient, HoodieInstant requestedReplaceInstant) {\n+    try {\n+      Option<byte[]> content = metaClient.getActiveTimeline().getInstantDetails(requestedReplaceInstant);\n+      if (!content.isPresent() || content.get().length == 0) {\n+        // few operations create requested file without any content. Assume these are not clustering\n+        LOG.warn(\"No content found in requested file for instant \" + requestedReplaceInstant);\n+        return Option.empty();\n+      }\n+      HoodieRequestedReplaceMetadata requestedReplaceMetadata = TimelineMetadataUtils.deserializeRequestedReplaceMetadta(content.get());\n+      if (WriteOperationType.CLUSTER.name().equals(requestedReplaceMetadata.getOperationType())) {\n+        return Option.of(Pair.of(requestedReplaceInstant, requestedReplaceMetadata.getClusteringPlan()));\n+      }\n+      return Option.empty();\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Error reading clustering plan \" + requestedReplaceInstant.getTimestamp(), e);\n+    }\n+  }\n+\n+  /**\n+   * Get filegroups to pending clustering instant mapping for all pending clustering plans.\n+   * This includes all clustering operattions in 'requested' and 'inflight' states.\n+   */\n+  public static Map<HoodieFileGroupId, HoodieInstant> getAllFileGroupsInPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    Stream<Pair<HoodieInstant, HoodieClusteringPlan>> pendingClusteringPlans = getAllPendingClusteringPlans(metaClient);\n+    Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> resultStream = pendingClusteringPlans.flatMap(clusteringPlan ->\n+        // get all filegroups in the plan\n+        getFileGroupEntriesInClusteringPlan(clusteringPlan.getLeft(), clusteringPlan.getRight()));\n+\n+    Map<HoodieFileGroupId, HoodieInstant> resultMap = resultStream.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    LOG.info(\"Found \" + resultMap.size() + \" files in pending clustering operations\");\n+    return resultMap;\n+  }\n+\n+  public static Stream<Pair<HoodieFileGroupId, HoodieInstant>> getFileGroupsInPendingClusteringInstant(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    Stream<HoodieFileGroupId> partitionToFileIdLists = clusteringPlan.getInputGroups().stream().flatMap(ClusteringUtils::getFileGroupsFromClusteringGroup);\n+    return partitionToFileIdLists.map(e -> Pair.of(e, instant));\n+  }\n+\n+  private static Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> getFileGroupEntriesInClusteringPlan(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    return getFileGroupsInPendingClusteringInstant(instant, clusteringPlan).map(entry ->\n+        new AbstractMap.SimpleEntry<>(entry.getLeft(), entry.getRight()));\n+  }\n+\n+  private static Stream<HoodieFileGroupId> getFileGroupsFromClusteringGroup(HoodieClusteringGroup group) {\n+    return group.getSlices().stream().map(slice -> new HoodieFileGroupId(slice.getPartitionPath(), slice.getFileId()));\n+  }\n+\n+  /**\n+   * Create clustering plan from input fileSliceGroups.\n+   */\n+  public static HoodieClusteringPlan createClusteringPlan(String strategyClassName,\n+                                                          Map<String, String> strategyParams,\n+                                                          List<FileSlice>[] fileSliceGroups) {\n+    List<HoodieClusteringGroup> clusteringGroups = new ArrayList<>();\n+    for (int i = 0; i < fileSliceGroups.length; i++) {\n+      List<FileSlice> fileSliceGroup = fileSliceGroups[i];\n+      Map<String, Double> groupMetrics = buildMetrics(fileSliceGroup);\n+      List<HoodieSliceInfo> sliceInfos = getFileSliceInfo(fileSliceGroup);\n+      clusteringGroups.add(HoodieClusteringGroup.newBuilder().setSlices(sliceInfos).setMetrics(groupMetrics).build());\n+    }\n+\n+    HoodieClusteringStrategy strategy = HoodieClusteringStrategy.newBuilder()\n+        .setStrategyClassName(strategyClassName).setStrategyParams(strategyParams)\n+        .build();\n+\n+    HoodieClusteringPlan plan = HoodieClusteringPlan.newBuilder()\n+        .setInputGroups(clusteringGroups)\n+        .setExtraMetadata(new HashMap<>())\n+        .setStrategy(strategy)\n+        .build();\n+\n+    return plan;\n+  }\n+\n+  private static List<HoodieSliceInfo> getFileSliceInfo(List<FileSlice> slices) {\n+    FileSlice slice1 = slices.get(0);\n+    System.out.println(slice1.getLogFiles().count());\n+    System.out.println(slice1.getBaseFile().get());\n+    System.out.println(slice1.getPartitionPath());\n+    return slices.stream().map(slice -> new HoodieSliceInfo().newBuilder()\n+        .setPartitionPath(slice.getPartitionPath())\n+        .setFileId(slice.getFileId())\n+        .setDataFilePath(slice.getBaseFile().map(BaseFile::getPath).orElse(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Nzc5NTM4", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518779538", "createdAt": "2020-10-28T15:17:49Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNzo1MFrOHpvYqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNzo1MFrOHpvYqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMDAyNQ==", "bodyText": "Same question here for data file path empty", "url": "https://github.com/apache/hudi/pull/2202#discussion_r513530025", "createdAt": "2020-10-28T15:17:50Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/ClusteringUtils.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.util;\n+\n+import org.apache.hudi.avro.model.HoodieClusteringGroup;\n+import org.apache.hudi.avro.model.HoodieClusteringPlan;\n+import org.apache.hudi.avro.model.HoodieClusteringStrategy;\n+import org.apache.hudi.avro.model.HoodieRequestedReplaceMetadata;\n+import org.apache.hudi.avro.model.HoodieSliceInfo;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.BaseFile;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroupId;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.model.WriteOperationType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.exception.HoodieIOException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Helper class to generate clustering plan from metadata.\n+ */\n+public class ClusteringUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(ClusteringUtils.class);\n+\n+  public static final String TOTAL_IO_READ_MB = \"TOTAL_IO_READ_MB\";\n+  public static final String TOTAL_LOG_FILE_SIZE = \"TOTAL_LOG_FILES_SIZE\";\n+  public static final String TOTAL_LOG_FILES = \"TOTAL_LOG_FILES\";\n+\n+  /**\n+   * Get all pending clustering plans along with their instants.\n+   */\n+  public static Stream<Pair<HoodieInstant, HoodieClusteringPlan>> getAllPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    List<HoodieInstant> pendingReplaceInstants =\n+        metaClient.getActiveTimeline().filterPendingReplaceTimeline().getInstants().collect(Collectors.toList());\n+    return pendingReplaceInstants.stream().map(instant -> getClusteringPlan(metaClient, instant))\n+        .filter(Option::isPresent).map(Option::get);\n+  }\n+\n+  public static Option<Pair<HoodieInstant, HoodieClusteringPlan>> getClusteringPlan(HoodieTableMetaClient metaClient, HoodieInstant requestedReplaceInstant) {\n+    try {\n+      Option<byte[]> content = metaClient.getActiveTimeline().getInstantDetails(requestedReplaceInstant);\n+      if (!content.isPresent() || content.get().length == 0) {\n+        // few operations create requested file without any content. Assume these are not clustering\n+        LOG.warn(\"No content found in requested file for instant \" + requestedReplaceInstant);\n+        return Option.empty();\n+      }\n+      HoodieRequestedReplaceMetadata requestedReplaceMetadata = TimelineMetadataUtils.deserializeRequestedReplaceMetadta(content.get());\n+      if (WriteOperationType.CLUSTER.name().equals(requestedReplaceMetadata.getOperationType())) {\n+        return Option.of(Pair.of(requestedReplaceInstant, requestedReplaceMetadata.getClusteringPlan()));\n+      }\n+      return Option.empty();\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Error reading clustering plan \" + requestedReplaceInstant.getTimestamp(), e);\n+    }\n+  }\n+\n+  /**\n+   * Get filegroups to pending clustering instant mapping for all pending clustering plans.\n+   * This includes all clustering operattions in 'requested' and 'inflight' states.\n+   */\n+  public static Map<HoodieFileGroupId, HoodieInstant> getAllFileGroupsInPendingClusteringPlans(\n+      HoodieTableMetaClient metaClient) {\n+    Stream<Pair<HoodieInstant, HoodieClusteringPlan>> pendingClusteringPlans = getAllPendingClusteringPlans(metaClient);\n+    Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> resultStream = pendingClusteringPlans.flatMap(clusteringPlan ->\n+        // get all filegroups in the plan\n+        getFileGroupEntriesInClusteringPlan(clusteringPlan.getLeft(), clusteringPlan.getRight()));\n+\n+    Map<HoodieFileGroupId, HoodieInstant> resultMap = resultStream.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    LOG.info(\"Found \" + resultMap.size() + \" files in pending clustering operations\");\n+    return resultMap;\n+  }\n+\n+  public static Stream<Pair<HoodieFileGroupId, HoodieInstant>> getFileGroupsInPendingClusteringInstant(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    Stream<HoodieFileGroupId> partitionToFileIdLists = clusteringPlan.getInputGroups().stream().flatMap(ClusteringUtils::getFileGroupsFromClusteringGroup);\n+    return partitionToFileIdLists.map(e -> Pair.of(e, instant));\n+  }\n+\n+  private static Stream<Map.Entry<HoodieFileGroupId, HoodieInstant>> getFileGroupEntriesInClusteringPlan(\n+      HoodieInstant instant, HoodieClusteringPlan clusteringPlan) {\n+    return getFileGroupsInPendingClusteringInstant(instant, clusteringPlan).map(entry ->\n+        new AbstractMap.SimpleEntry<>(entry.getLeft(), entry.getRight()));\n+  }\n+\n+  private static Stream<HoodieFileGroupId> getFileGroupsFromClusteringGroup(HoodieClusteringGroup group) {\n+    return group.getSlices().stream().map(slice -> new HoodieFileGroupId(slice.getPartitionPath(), slice.getFileId()));\n+  }\n+\n+  /**\n+   * Create clustering plan from input fileSliceGroups.\n+   */\n+  public static HoodieClusteringPlan createClusteringPlan(String strategyClassName,\n+                                                          Map<String, String> strategyParams,\n+                                                          List<FileSlice>[] fileSliceGroups) {\n+    List<HoodieClusteringGroup> clusteringGroups = new ArrayList<>();\n+    for (int i = 0; i < fileSliceGroups.length; i++) {\n+      List<FileSlice> fileSliceGroup = fileSliceGroups[i];\n+      Map<String, Double> groupMetrics = buildMetrics(fileSliceGroup);\n+      List<HoodieSliceInfo> sliceInfos = getFileSliceInfo(fileSliceGroup);\n+      clusteringGroups.add(HoodieClusteringGroup.newBuilder().setSlices(sliceInfos).setMetrics(groupMetrics).build());\n+    }\n+\n+    HoodieClusteringStrategy strategy = HoodieClusteringStrategy.newBuilder()\n+        .setStrategyClassName(strategyClassName).setStrategyParams(strategyParams)\n+        .build();\n+\n+    HoodieClusteringPlan plan = HoodieClusteringPlan.newBuilder()\n+        .setInputGroups(clusteringGroups)\n+        .setExtraMetadata(new HashMap<>())\n+        .setStrategy(strategy)\n+        .build();\n+\n+    return plan;\n+  }\n+\n+  private static List<HoodieSliceInfo> getFileSliceInfo(List<FileSlice> slices) {\n+    FileSlice slice1 = slices.get(0);\n+    System.out.println(slice1.getLogFiles().count());\n+    System.out.println(slice1.getBaseFile().get());\n+    System.out.println(slice1.getPartitionPath());\n+    return slices.stream().map(slice -> new HoodieSliceInfo().newBuilder()\n+        .setPartitionPath(slice.getPartitionPath())\n+        .setFileId(slice.getFileId())\n+        .setDataFilePath(slice.getBaseFile().map(BaseFile::getPath).orElse(\"\"))\n+        .setDeltaFilePaths(slice.getLogFiles().map(f -> f.getPath().getName()).collect(Collectors.toList()))\n+        .setBootstrapFilePath(slice.getBaseFile().map(bf -> bf.getBootstrapBaseFile().map(bbf -> bbf.getPath()).orElse(\"\")).orElse(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzgzMzA3", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-518783307", "createdAt": "2020-10-28T15:21:17Z", "commit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5071687bfd54c1645eb6770398290e9712eb3e0d", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/5071687bfd54c1645eb6770398290e9712eb3e0d", "committedDate": "2020-10-28T00:05:58Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}, "afterCommit": {"oid": "5630f181e6a0a87eef2759947a375a9a63581ab0", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/5630f181e6a0a87eef2759947a375a9a63581ab0", "committedDate": "2020-10-28T20:08:05Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5630f181e6a0a87eef2759947a375a9a63581ab0", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/5630f181e6a0a87eef2759947a375a9a63581ab0", "committedDate": "2020-10-28T20:08:05Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}, "afterCommit": {"oid": "fe11638146b83f0a4ba972bcc7417d868f1872c4", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/fe11638146b83f0a4ba972bcc7417d868f1872c4", "committedDate": "2020-10-28T20:14:52Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe11638146b83f0a4ba972bcc7417d868f1872c4", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/fe11638146b83f0a4ba972bcc7417d868f1872c4", "committedDate": "2020-10-28T20:14:52Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}, "afterCommit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/d20e11d3e47be7af8a62d5c3f9cd0efa500adce3", "committedDate": "2020-10-28T23:26:31Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzE2NjA3", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-519716607", "createdAt": "2020-10-29T14:21:19Z", "commit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzEwNDU0", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-522710454", "createdAt": "2020-11-03T17:10:38Z", "commit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoxMDozOFrOHs4k4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoxNDowMlrOHs4s4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyNjMzNg==", "bodyText": "I wonder if we should start out with the assumption of having all files in a given partition. Does this simplify anything in the design now? I would love to implement this generically right away, otherwise we will spend cycles thinking about migrations, eetc etc down the line.", "url": "https://github.com/apache/hudi/pull/2202#discussion_r516826336", "createdAt": "2020-11-03T17:10:38Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/avro/HoodieClusteringGroup.avsc", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieClusteringGroup\",\n+   \"type\":\"record\",\n+   \"fields\":[\n+      {\n+         /* Group of files that needs to merged. All the slices in a group will belong to same partition initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyNzE5NA==", "bodyText": "this can be fetched from the bootstrap index as well right? its immutable anyway?", "url": "https://github.com/apache/hudi/pull/2202#discussion_r516827194", "createdAt": "2020-11-03T17:12:04Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/avro/HoodieSliceInfo.avsc", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieSliceInfo\",\n+   \"fields\":[\n+      {\n+        \"name\":\"dataFilePath\",\n+        \"type\":[\"null\",\"string\"],\n+        \"default\": null\n+      },\n+      {\n+        \"name\":\"deltaFilePaths\",\n+        \"type\":[\"null\", {\n+           \"type\":\"array\",\n+           \"items\":\"string\"\n+        }],\n+        \"default\": null\n+      },\n+      {\n+        \"name\":\"fileId\",\n+        \"type\":[\"null\",\"string\"]\n+      },\n+      {\n+        \"name\":\"partitionPath\",\n+        \"type\":[\"null\",\"string\"],\n+        \"default\": null\n+      },\n+      {\n+        \"name\":\"bootstrapFilePath\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyNzY5OA==", "bodyText": "or you are just suggesting that the clustreing strategy currently only does it within partitions? (totally reasonable approach!)", "url": "https://github.com/apache/hudi/pull/2202#discussion_r516827698", "createdAt": "2020-11-03T17:12:57Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/avro/HoodieClusteringGroup.avsc", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieClusteringGroup\",\n+   \"type\":\"record\",\n+   \"fields\":[\n+      {\n+         /* Group of files that needs to merged. All the slices in a group will belong to same partition initially.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyNjMzNg=="}, "originalCommit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyODM4Ng==", "bodyText": "lets ensure this also contains a version field? in fact, any of these new avsc should have a version at the start preferably, so we can evolve.", "url": "https://github.com/apache/hudi/pull/2202#discussion_r516828386", "createdAt": "2020-11-03T17:14:02Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/avro/HoodieSliceInfo.avsc", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieSliceInfo\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d20e11d3e47be7af8a62d5c3f9cd0efa500adce3", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/d20e11d3e47be7af8a62d5c3f9cd0efa500adce3", "committedDate": "2020-10-28T23:26:31Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}, "afterCommit": {"oid": "6e6e5f471aec179891b8a74640c5559ff521f809", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/6e6e5f471aec179891b8a74640c5559ff521f809", "committedDate": "2020-11-05T04:09:14Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5973890d4772603e729b3c1de3c3d87e4c5094f3", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/5973890d4772603e729b3c1de3c3d87e4c5094f3", "committedDate": "2020-11-05T04:12:30Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e6e5f471aec179891b8a74640c5559ff521f809", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/6e6e5f471aec179891b8a74640c5559ff521f809", "committedDate": "2020-11-05T04:09:14Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}, "afterCommit": {"oid": "5973890d4772603e729b3c1de3c3d87e4c5094f3", "author": {"user": {"login": "satishkotha", "name": null}}, "url": "https://github.com/apache/hudi/commit/5973890d4772603e729b3c1de3c3d87e4c5094f3", "committedDate": "2020-11-05T04:12:30Z", "message": "[HUDI-1352] Add FileSystemView APIs to query pending clustering operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDU2Njcy", "url": "https://github.com/apache/hudi/pull/2202#pullrequestreview-524456672", "createdAt": "2020-11-05T16:44:35Z", "commit": {"oid": "5973890d4772603e729b3c1de3c3d87e4c5094f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0NDozNVrOHuMQ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0NDozNVrOHuMQ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NzQ3Ng==", "bodyText": "Can we add this as the first field (so no issues with reordering etc) we should always be able to read this", "url": "https://github.com/apache/hudi/pull/2202#discussion_r518197476", "createdAt": "2020-11-05T16:44:35Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/avro/HoodieSliceInfo.avsc", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+{\n+   \"namespace\":\"org.apache.hudi.avro.model\",\n+   \"type\":\"record\",\n+   \"name\":\"HoodieSliceInfo\",\n+   \"fields\":[\n+      {\n+        \"name\":\"dataFilePath\",\n+        \"type\":[\"null\",\"string\"],\n+        \"default\": null\n+      },\n+      {\n+        \"name\":\"deltaFilePaths\",\n+        \"type\":[\"null\", {\n+           \"type\":\"array\",\n+           \"items\":\"string\"\n+        }],\n+        \"default\": null\n+      },\n+      {\n+        \"name\":\"fileId\",\n+        \"type\":[\"null\",\"string\"]\n+      },\n+      {\n+        \"name\":\"partitionPath\",\n+        \"type\":[\"null\",\"string\"],\n+        \"default\": null\n+      },\n+      {\n+        \"name\":\"bootstrapFilePath\",\n+        \"type\":[\"null\", \"string\"],\n+        \"default\": null\n+      },\n+      {\n+        \"name\":\"version\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5973890d4772603e729b3c1de3c3d87e4c5094f3"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4227, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}