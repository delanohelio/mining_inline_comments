{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzODI1MDg3", "number": 2125, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToxNjozMVrOEomflg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMToyOToxMVrOEsPApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDA5MTc0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToxNjozMVrOHZyb-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTo0NDo0NVrOHZ0N5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwMjgxMA==", "bodyText": "Is getTableAvroSchemaWithoutMetadataFields more proper?", "url": "https://github.com/apache/hudi/pull/2125#discussion_r496802810", "createdAt": "2020-09-29T15:16:31Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -175,20 +175,45 @@ public MessageType getTableParquetSchema() throws Exception {\n    * @throws Exception\n    */\n   public Schema getTableAvroSchemaWithoutMetadataFields() throws Exception {\n-    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(false);\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n+    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(timeline.lastInstant().get(), false);\n     return schemaFromCommitMetadata.isPresent() ? schemaFromCommitMetadata.get() :\n            HoodieAvroUtils.removeMetadataFields(getTableAvroSchemaFromDataFile());\n   }\n \n+  /**\n+   * Gets users data schema for a hoodie table in Avro format of the instant.\n+   *\n+   * @param instant will get the instant data schema\n+   * @return  Avro user data schema\n+   * @throws Exception\n+   */\n+  public Schema getTableAvroSchemaWithoutMetadataFieldsForInstant(HoodieInstant instant) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbd9a4e2dc0210cc02b3e31ee2bdbce060c3781"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMTk3NA==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2125#discussion_r496831974", "createdAt": "2020-09-29T15:44:45Z", "author": {"login": "lw309637554"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -175,20 +175,45 @@ public MessageType getTableParquetSchema() throws Exception {\n    * @throws Exception\n    */\n   public Schema getTableAvroSchemaWithoutMetadataFields() throws Exception {\n-    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(false);\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n+    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(timeline.lastInstant().get(), false);\n     return schemaFromCommitMetadata.isPresent() ? schemaFromCommitMetadata.get() :\n            HoodieAvroUtils.removeMetadataFields(getTableAvroSchemaFromDataFile());\n   }\n \n+  /**\n+   * Gets users data schema for a hoodie table in Avro format of the instant.\n+   *\n+   * @param instant will get the instant data schema\n+   * @return  Avro user data schema\n+   * @throws Exception\n+   */\n+  public Schema getTableAvroSchemaWithoutMetadataFieldsForInstant(HoodieInstant instant) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwMjgxMA=="}, "originalCommit": {"oid": "1cbd9a4e2dc0210cc02b3e31ee2bdbce060c3781"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDEwMjUwOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToxODo1M1rOHZyilQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTo0NDozNFrOHZ0NOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNDUwMQ==", "bodyText": "instant,false -> instant, false", "url": "https://github.com/apache/hudi/pull/2125#discussion_r496804501", "createdAt": "2020-09-29T15:18:53Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -175,20 +175,45 @@ public MessageType getTableParquetSchema() throws Exception {\n    * @throws Exception\n    */\n   public Schema getTableAvroSchemaWithoutMetadataFields() throws Exception {\n-    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(false);\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n+    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(timeline.lastInstant().get(), false);\n     return schemaFromCommitMetadata.isPresent() ? schemaFromCommitMetadata.get() :\n            HoodieAvroUtils.removeMetadataFields(getTableAvroSchemaFromDataFile());\n   }\n \n+  /**\n+   * Gets users data schema for a hoodie table in Avro format of the instant.\n+   *\n+   * @param instant will get the instant data schema\n+   * @return  Avro user data schema\n+   * @throws Exception\n+   */\n+  public Schema getTableAvroSchemaWithoutMetadataFieldsForInstant(HoodieInstant instant) throws Exception {\n+    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(instant,false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbd9a4e2dc0210cc02b3e31ee2bdbce060c3781"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMTgwMw==", "bodyText": "ok", "url": "https://github.com/apache/hudi/pull/2125#discussion_r496831803", "createdAt": "2020-09-29T15:44:34Z", "author": {"login": "lw309637554"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -175,20 +175,45 @@ public MessageType getTableParquetSchema() throws Exception {\n    * @throws Exception\n    */\n   public Schema getTableAvroSchemaWithoutMetadataFields() throws Exception {\n-    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(false);\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n+    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(timeline.lastInstant().get(), false);\n     return schemaFromCommitMetadata.isPresent() ? schemaFromCommitMetadata.get() :\n            HoodieAvroUtils.removeMetadataFields(getTableAvroSchemaFromDataFile());\n   }\n \n+  /**\n+   * Gets users data schema for a hoodie table in Avro format of the instant.\n+   *\n+   * @param instant will get the instant data schema\n+   * @return  Avro user data schema\n+   * @throws Exception\n+   */\n+  public Schema getTableAvroSchemaWithoutMetadataFieldsForInstant(HoodieInstant instant) throws Exception {\n+    Option<Schema> schemaFromCommitMetadata = getTableSchemaFromCommitMetadata(instant,false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNDUwMQ=="}, "originalCommit": {"oid": "1cbd9a4e2dc0210cc02b3e31ee2bdbce060c3781"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDQyNTQ0OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/IncrementalRelation.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjo0OTozN1rOHab6JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNDowNDozM1rOHcBu9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4MjI3Nw==", "bodyText": "when commitsToReturn is empty (in case that user pass the end time less than smallest commit in timeline), commitsToReturn.last will throw the following exception\njava.util.NoSuchElementException\n\tat scala.collection.LinearSeqOptimized$class.last(LinearSeqOptimized.scala:148)\n\tat scala.collection.immutable.List.last(List.scala:84)\n\tat org.apache.hudi.IncrementalRelation.<init>(IncrementalRelation.scala:88)\n\tat org.apache.hudi.DefaultSource.createRelation(DefaultSource.scala:95)\n\tat org.apache.hudi.DefaultSource.createRelation(DefaultSource.scala:51)\n\tat org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:318)\n\tat org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:223)\n\tat org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:211)\n\tat org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:178)\nI think we would use the same behavior as before that use the latest commit schema when commitsToReturn is empty, and there is no data returned since the there is no commits between start and end time . @lw309637554 WDYT?", "url": "https://github.com/apache/hudi/pull/2125#discussion_r497482277", "createdAt": "2020-09-30T12:49:37Z", "author": {"login": "leesf"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/IncrementalRelation.scala", "diffHunk": "@@ -82,11 +81,11 @@ class IncrementalRelation(val sqlContext: SQLContext,\n     optParams.getOrElse(DataSourceReadOptions.END_INSTANTTIME_OPT_KEY, lastInstant.getTimestamp))\n     .getInstants.iterator().toList\n \n-  // use schema from a file produced in the latest instant\n-  val latestSchema: StructType = {\n+  // use schema from a file produced in the end instant\n+  val endInstantSchema: StructType = {\n     log.info(\"Inferring schema..\")\n     val schemaResolver = new TableSchemaResolver(metaClient)\n-    val tableSchema = schemaResolver.getTableAvroSchemaWithoutMetadataFields\n+    val tableSchema = schemaResolver.getTableAvroSchemaWithoutMetadataFields(commitsToReturn.last)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0202e025d210f54fd8252641fa7101a2e63e71dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1MDU4Mg==", "bodyText": "thanks for your remind, agree with you", "url": "https://github.com/apache/hudi/pull/2125#discussion_r499150582", "createdAt": "2020-10-03T14:04:33Z", "author": {"login": "lw309637554"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/IncrementalRelation.scala", "diffHunk": "@@ -82,11 +81,11 @@ class IncrementalRelation(val sqlContext: SQLContext,\n     optParams.getOrElse(DataSourceReadOptions.END_INSTANTTIME_OPT_KEY, lastInstant.getTimestamp))\n     .getInstants.iterator().toList\n \n-  // use schema from a file produced in the latest instant\n-  val latestSchema: StructType = {\n+  // use schema from a file produced in the end instant\n+  val endInstantSchema: StructType = {\n     log.info(\"Inferring schema..\")\n     val schemaResolver = new TableSchemaResolver(metaClient)\n-    val tableSchema = schemaResolver.getTableAvroSchemaWithoutMetadataFields\n+    val tableSchema = schemaResolver.getTableAvroSchemaWithoutMetadataFields(commitsToReturn.last)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4MjI3Nw=="}, "originalCommit": {"oid": "0202e025d210f54fd8252641fa7101a2e63e71dc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjE2NDgyOnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/IncrementalRelation.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMDoyNDozOVrOHcLJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMjo0NlrOHcl_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNDg3OQ==", "bodyText": "I think we should introduce a new ReadOption to control this? and default to existing behavior of using the latest schema.", "url": "https://github.com/apache/hudi/pull/2125#discussion_r499304879", "createdAt": "2020-10-05T00:24:39Z", "author": {"login": "vinothchandar"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/IncrementalRelation.scala", "diffHunk": "@@ -82,11 +81,12 @@ class IncrementalRelation(val sqlContext: SQLContext,\n     optParams.getOrElse(DataSourceReadOptions.END_INSTANTTIME_OPT_KEY, lastInstant.getTimestamp))\n     .getInstants.iterator().toList\n \n-  // use schema from a file produced in the latest instant\n-  val latestSchema: StructType = {\n+  // use schema from a file produced in the end instant\n+  val endInstantSchema: StructType = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28e7a1461ca9df16ffa11b42c07082f17aa2e47"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDU4Mw==", "bodyText": "thanks, i think  add a ReadOption to control this make sense now. But as the Time Traveling feature, not only data , but also schema should use the end version.  I also want to know about Hudi\u2019s plan on time travel ?\n@vinothchandar", "url": "https://github.com/apache/hudi/pull/2125#discussion_r499744583", "createdAt": "2020-10-05T17:02:46Z", "author": {"login": "lw309637554"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/IncrementalRelation.scala", "diffHunk": "@@ -82,11 +81,12 @@ class IncrementalRelation(val sqlContext: SQLContext,\n     optParams.getOrElse(DataSourceReadOptions.END_INSTANTTIME_OPT_KEY, lastInstant.getTimestamp))\n     .getInstants.iterator().toList\n \n-  // use schema from a file produced in the latest instant\n-  val latestSchema: StructType = {\n+  // use schema from a file produced in the end instant\n+  val endInstantSchema: StructType = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNDg3OQ=="}, "originalCommit": {"oid": "a28e7a1461ca9df16ffa11b42c07082f17aa2e47"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE4NzI1OnYy", "diffSide": "RIGHT", "path": "hudi-spark/src/main/scala/org/apache/hudi/DataSourceOptions.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMToyOToxMVrOHfcGYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxNzo0N1rOHfe5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyODI4OA==", "bodyText": "Changing to INCREMENTAL_READ_SCHEMA_USE_END_INSTANTTIME_OPT_KEY = \"hoodie.datasource.read.schema.use.end.instanttime\"?", "url": "https://github.com/apache/hudi/pull/2125#discussion_r502728288", "createdAt": "2020-10-10T01:29:11Z", "author": {"login": "leesf"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/DataSourceOptions.scala", "diffHunk": "@@ -108,6 +108,15 @@ object DataSourceReadOptions {\n     */\n   val END_INSTANTTIME_OPT_KEY = \"hoodie.datasource.read.end.instanttime\"\n \n+  /**\n+    * If use the end instant schema when incrementally fetched data to.\n+    *\n+    * Default: false (use latest instant schema)\n+    *\n+    */\n+  val INCREMENTAL_READ_SCHEMA_USE_ENDINSTANT_OPT_KEY = \"hoodie.datasource.read.schema.use_endInstant\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2f66b36b1ffb0476443c131db066d1bbcbc3d6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3NDE3Mg==", "bodyText": "make sense. have resolved", "url": "https://github.com/apache/hudi/pull/2125#discussion_r502774172", "createdAt": "2020-10-10T10:17:47Z", "author": {"login": "lw309637554"}, "path": "hudi-spark/src/main/scala/org/apache/hudi/DataSourceOptions.scala", "diffHunk": "@@ -108,6 +108,15 @@ object DataSourceReadOptions {\n     */\n   val END_INSTANTTIME_OPT_KEY = \"hoodie.datasource.read.end.instanttime\"\n \n+  /**\n+    * If use the end instant schema when incrementally fetched data to.\n+    *\n+    * Default: false (use latest instant schema)\n+    *\n+    */\n+  val INCREMENTAL_READ_SCHEMA_USE_ENDINSTANT_OPT_KEY = \"hoodie.datasource.read.schema.use_endInstant\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyODI4OA=="}, "originalCommit": {"oid": "8d2f66b36b1ffb0476443c131db066d1bbcbc3d6"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4305, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}