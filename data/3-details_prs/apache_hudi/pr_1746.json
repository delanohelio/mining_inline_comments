{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTg3Mzcx", "number": 1746, "title": "[HUDI-996] Add functional test suite for hudi-utilities", "bodyText": "Share resources for functional tests\nAdd suite for some functional test classes from hudi-utilities\nRun suite in a different maven profile\nRun function tests (suite) in a separate travis job\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-06-18T02:19:01Z", "url": "https://github.com/apache/hudi/pull/1746", "merged": true, "mergeCommit": {"oid": "3b9a30528bd6a6369181702303f3384162b04a7f"}, "closed": true, "closedAt": "2020-07-05T23:44:32Z", "author": {"login": "xushiyan"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsVAUJAFqTQzMjg5NTQxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyFddgAFqTQ0MjcxNjM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODk1NDE1", "url": "https://github.com/apache/hudi/pull/1746#pullrequestreview-432895415", "createdAt": "2020-06-18T02:20:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjoyMDowNFrOGldU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjoyNjo1NFrOGldbrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMDk2OQ==", "bodyText": "unit test separated from its functional test class", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441930969", "createdAt": "2020-06-18T02:20:04Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.hudi.utilities.HoodieSnapshotExporter.OutputFormatValidator;\n+\n+import com.beust.jcommander.ParameterException;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.NullSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class TestHoodieSnapshotExporter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTA5NA==", "bodyText": "This can be a unit test; getting rid of CommonTestHarness", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931094", "createdAt": "2020-06-18T02:20:39Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/checkpointing/TestKafkaConnectHdfsProvider.java", "diffHunk": "@@ -19,37 +19,39 @@\n package org.apache.hudi.utilities.checkpointing;\n \n import org.apache.hudi.common.config.TypedProperties;\n-import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n import org.apache.hudi.common.testutils.HoodieTestUtils;\n import org.apache.hudi.exception.HoodieException;\n \n import org.apache.hadoop.conf.Configuration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n+import java.nio.file.Files;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-public class TestKafkaConnectHdfsProvider extends HoodieCommonTestHarness {\n+public class TestKafkaConnectHdfsProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTMzMw==", "bodyText": "functional test separated from its unit test class", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931333", "createdAt": "2020-06-18T02:21:42Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestChainedTransformer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.hudi.utilities.testutils.SharedResources;\n+import org.apache.hudi.utilities.transform.ChainedTransformer;\n+import org.apache.hudi.utilities.transform.Transformer;\n+\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.apache.spark.sql.types.DataTypes.IntegerType;\n+import static org.apache.spark.sql.types.DataTypes.StringType;\n+import static org.apache.spark.sql.types.DataTypes.createStructField;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@Tag(\"suite\")\n+public class TestChainedTransformer extends SharedResources {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTYyOA==", "bodyText": "@TempDir java.nio.file.Path tempDir will clean up itself automatically", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931628", "createdAt": "2020-06-18T02:22:51Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieSnapshotCopier.java", "diffHunk": "@@ -147,14 +142,4 @@ public void testSnapshotCopy() throws Exception {\n \n     assertTrue(fs.exists(new Path(outputPath + \"/_SUCCESS\")));\n   }\n-\n-  @AfterEach\n-  public void cleanup() {\n-    if (rootPath != null) {\n-      new File(rootPath).delete();\n-    }\n-    if (jsc != null) {\n-      jsc.stop();\n-    }\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTk0OA==", "bodyText": "moved to unit test", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931948", "createdAt": "2020-06-18T02:24:07Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -258,49 +253,21 @@ public void setUp() throws Exception {\n     public void testExportWithPartitionField() throws IOException {\n       // `driver` field is set in HoodieTestDataGenerator\n       cfg.outputPartitionField = \"driver\";\n-      new HoodieSnapshotExporter().export(jsc, cfg);\n+      new HoodieSnapshotExporter().export(jsc(), cfg);\n \n-      assertEquals(NUM_RECORDS, sqlContext.read().format(\"json\").load(targetPath).count());\n-      assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n-      assertTrue(dfs.listStatus(new Path(targetPath)).length > 1);\n+      assertEquals(NUM_RECORDS, sqlContext().read().format(\"json\").load(targetPath).count());\n+      assertTrue(dfs().exists(new Path(targetPath + \"/_SUCCESS\")));\n+      assertTrue(dfs().listStatus(new Path(targetPath)).length > 1);\n     }\n \n     @Test\n     public void testExportForUserDefinedPartitioner() throws IOException {\n       cfg.outputPartitioner = UserDefinedPartitioner.class.getName();\n-      new HoodieSnapshotExporter().export(jsc, cfg);\n-\n-      assertEquals(NUM_RECORDS, sqlContext.read().format(\"json\").load(targetPath).count());\n-      assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n-      assertTrue(dfs.exists(new Path(String.format(\"%s/%s=%s\", targetPath, UserDefinedPartitioner.PARTITION_NAME, PARTITION_PATH))));\n-    }\n-  }\n-\n-  @Nested\n-  public class TestHoodieSnapshotExporterInputValidation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMjQ3Nw==", "bodyText": "moved to functional", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441932477", "createdAt": "2020-06-18T02:26:04Z", "author": {"login": "xushiyan"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/transform/TestChainedTransformer.java", "diffHunk": "@@ -19,67 +19,15 @@\n \n package org.apache.hudi.utilities.transform;\n \n-import org.apache.hudi.utilities.UtilHelpers;\n-\n-import org.apache.spark.api.java.JavaSparkContext;\n-import org.apache.spark.sql.Dataset;\n-import org.apache.spark.sql.Row;\n-import org.apache.spark.sql.RowFactory;\n-import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.types.DataTypes;\n-import org.apache.spark.sql.types.StructField;\n-import org.apache.spark.sql.types.StructType;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n import java.util.Arrays;\n import java.util.List;\n \n import static org.apache.spark.sql.types.DataTypes.IntegerType;\n-import static org.apache.spark.sql.types.DataTypes.StringType;\n-import static org.apache.spark.sql.types.DataTypes.createStructField;\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n public class TestChainedTransformer {\n-\n-  private JavaSparkContext jsc;\n-  private SparkSession sparkSession;\n-\n-  @BeforeEach\n-  public void setUp() {\n-    jsc = UtilHelpers.buildSparkContext(this.getClass().getName() + \"-hoodie\", \"local[2]\");\n-    sparkSession = SparkSession.builder().config(jsc.getConf()).getOrCreate();\n-  }\n-\n-  @AfterEach\n-  public void tearDown() {\n-    jsc.stop();\n-  }\n-\n-  @Test\n-  public void testChainedTransformation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMjcxNw==", "bodyText": "to begin with utilities module; later expand to others", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441932717", "createdAt": "2020-06-18T02:26:54Z", "author": {"login": "xushiyan"}, "path": "scripts/run_travis_tests.sh", "diffHunk": "@@ -20,12 +20,13 @@ mode=$1\n sparkVersion=2.4.4\n hadoopVersion=2.7\n \n-if [ \"$mode\" = \"unit\" ];\n-then\n+if [ \"$mode\" = \"unit\" ]; then\n   echo \"Running Unit Tests\"\n   mvn test -DskipITs=true -B\n-elif [ \"$mode\" = \"integration\" ];\n-then\n+elif [ \"$mode\" = \"functional\" ]; then\n+  echo \"Running Functional Test Suite\"\n+  mvn test -pl hudi-utilities -Pfunctional-test-suite -B", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzI4MzU4", "url": "https://github.com/apache/hudi/pull/1746#pullrequestreview-433728358", "createdAt": "2020-06-19T00:23:42Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyMzo0M1rOGmEPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMDoyNDo1NVrOGmEQpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODUzMw==", "bodyText": "Can we create the JavaSparkContext only once per JVM? This may have the benefit of making tests faster as there is some delay (on my laptop 1second+) for creating jsc each time.\npublic JavaSparkContext jsc() {\nif (jsc == null) {\n// create spark context\n}\nreturn jsc;\n}", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442568533", "createdAt": "2020-06-19T00:23:43Z", "author": {"login": "prashantwason"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  @TempDir\n+  protected static java.nio.file.Path sharedTempDir;\n+\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODg2OA==", "bodyText": "Same here. Can we create the test service on-demand and only once? Does not need to be done in @beforeeach as many tests may not even end up using the hdfsTestService.", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442568868", "createdAt": "2020-06-19T00:24:55Z", "author": {"login": "prashantwason"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  @TempDir\n+  protected static java.nio.file.Path sharedTempDir;\n+\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());\n+\n+      FileSystem.closeAll();\n+      hdfsTestService = new HdfsTestService(sharedTempDir);\n+      dfsCluster = hdfsTestService.start(true);\n+      dfs = dfsCluster.getFileSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzY0MTAx", "url": "https://github.com/apache/hudi/pull/1746#pullrequestreview-433764101", "createdAt": "2020-06-19T02:30:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjozMDozNlrOGmGEoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjozMDozNlrOGmGEoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5ODU2MA==", "bodyText": "The exclusion is moved to unit-tests profile.", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442598560", "createdAt": "2020-06-19T02:30:36Z", "author": {"login": "xushiyan"}, "path": "pom.xml", "diffHunk": "@@ -253,10 +255,6 @@\n               ${surefire-log4j.file}\n             </log4j.configuration>\n           </systemPropertyVariables>\n-          <!-- Excludes integration tests when unit tests are run. -->\n-          <excludes>\n-            <exclude>**/IT*.java</exclude>\n-          </excludes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDI4NDUz", "url": "https://github.com/apache/hudi/pull/1746#pullrequestreview-434428453", "createdAt": "2020-06-20T13:25:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzoyNTo1NVrOGmmjzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzo1Mjo1MVrOGmmqoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDgzMA==", "bodyText": "meaning this is not bringing up any new resources to run the test...\nI assume this the principle we will be following?\nunit - testing basic functionality at the class level, potentially using mocks. Expected to finish quicker\nfunctional - brings up the services needed and runs test without mocking\nintegration - runs subset of functional tests, on a full fledged enviroment with dockerized services\nMight be good to add such a doc somewhere.. may be in travis.yml or in README even.. so developers understand what test is what.", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443130830", "createdAt": "2020-06-20T13:25:55Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.hudi.utilities.HoodieSnapshotExporter.OutputFormatValidator;\n+\n+import com.beust.jcommander.ParameterException;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.NullSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class TestHoodieSnapshotExporter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMDk2OQ=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTgxNA==", "bodyText": "I wonder if we still need a HoodieTestHarness lite?  for things like basePath, conf etc.. it's probably easier than having every unit test do this?", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443131814", "createdAt": "2020-06-20T13:41:11Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/checkpointing/TestKafkaConnectHdfsProvider.java", "diffHunk": "@@ -19,37 +19,39 @@\n package org.apache.hudi.utilities.checkpointing;\n \n import org.apache.hudi.common.config.TypedProperties;\n-import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n import org.apache.hudi.common.testutils.HoodieTestUtils;\n import org.apache.hudi.exception.HoodieException;\n \n import org.apache.hadoop.conf.Configuration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n+import java.nio.file.Files;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-public class TestKafkaConnectHdfsProvider extends HoodieCommonTestHarness {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTg3Mg==", "bodyText": "I wish java lmports had aliases like scala does :) ...again with a common base class, this can be avoided in every class?", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443131872", "createdAt": "2020-06-20T13:42:02Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/checkpointing/TestKafkaConnectHdfsProvider.java", "diffHunk": "@@ -19,37 +19,39 @@\n package org.apache.hudi.utilities.checkpointing;\n \n import org.apache.hudi.common.config.TypedProperties;\n-import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n import org.apache.hudi.common.testutils.HoodieTestUtils;\n import org.apache.hudi.exception.HoodieException;\n \n import org.apache.hadoop.conf.Configuration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n+import java.nio.file.Files;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-public class TestKafkaConnectHdfsProvider extends HoodieCommonTestHarness {\n+public class TestKafkaConnectHdfsProvider {\n \n-  private String topicPath = null;\n-  private Configuration hadoopConf = null;\n+  @TempDir\n+  public java.nio.file.Path basePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTkwNw==", "bodyText": "rename to UtilitiesFunctionalTestSuite ?", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443131907", "createdAt": "2020-06-20T13:42:41Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/FunctionalTestSuite.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(JUnitPlatform.class)\n+@SelectPackages(\"org.apache.hudi.utilities.functional\")\n+@IncludeTags(\"suite\")\n+public class FunctionalTestSuite {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjA5OA==", "bodyText": "guess eventually, we will reuse this across hudi-client and hudi-common? (with necessary relocation?)", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132098", "createdAt": "2020-06-20T13:45:36Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/DFSProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+\n+public interface DFSProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjI3MA==", "bodyText": "rename to SharedTestResources?\nAlso when I read Test extends SharedTestResources, the class relationship does not feel very natural.. Something to think about around naming as well and generally check ourselves against the more common pattern for this kind of stuff", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132270", "createdAt": "2020-06-20T13:48:03Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+import java.io.IOException;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjUyNA==", "bodyText": "No harm in doing this before spark is inited?  Spark threads may be creating some FileSystem objects, which may be killed here? with enough bad luck, we could see flakiness? (thinking out loud)", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132524", "createdAt": "2020-06-20T13:52:00Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+import java.io.IOException;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());\n+\n+      FileSystem.closeAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjU3Ng==", "bodyText": "when are the miniCluster and spark really shutdown?", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132576", "createdAt": "2020-06-20T13:52:51Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+import java.io.IOException;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());\n+\n+      FileSystem.closeAll();\n+      hdfsTestService = new HdfsTestService();\n+      dfsCluster = hdfsTestService.start(true);\n+      dfs = dfsCluster.getFileSystem();\n+      dfs.mkdirs(dfs.getWorkingDirectory());\n+    }\n+  }\n+\n+  @AfterAll\n+  public static synchronized void cleanUpAfterAll() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "author": {"user": {"login": "xushiyan", "name": "Raymond Xu"}}, "url": "https://github.com/apache/hudi/commit/ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "committedDate": "2020-06-28T18:25:50Z", "message": "[HUDI-996] Add functional test suite in hudi-utilities\n\n- Share resources for functional tests\n- Add suite for functional test classes from hudi-utilities"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "author": {"user": {"login": "xushiyan", "name": "Raymond Xu"}}, "url": "https://github.com/apache/hudi/commit/ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "committedDate": "2020-06-28T18:25:50Z", "message": "[HUDI-996] Add functional test suite in hudi-utilities\n\n- Share resources for functional tests\n- Add suite for functional test classes from hudi-utilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0", "author": {"user": {"login": "xushiyan", "name": "Raymond Xu"}}, "url": "https://github.com/apache/hudi/commit/87eb111b4f40dc0129790c3043683e2e1b593ca0", "committedDate": "2020-06-28T18:57:04Z", "message": "Trigger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTc0Mzgy", "url": "https://github.com/apache/hudi/pull/1746#pullrequestreview-442574382", "createdAt": "2020-07-03T23:35:24Z", "commit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMzozNToyNVrOGs4tGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMzozOTo0MVrOGs4uZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA==", "bodyText": "Food for thought: if tests are run parallely, in the same jvm. (parallelism option in surefire)... this boolean may not be sufficient for synchronization.. i.e two tests can attempt to create these test resources in parallel.", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719578", "createdAt": "2020-07-03T23:35:25Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/test/java/org/apache/hudi/testutils/FunctionalTestHarness.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+public class FunctionalTestHarness implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTY2OA==", "bodyText": "also how come this boolean is not static? otherwise in every before each it will try to create resourceS?", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719668", "createdAt": "2020-07-03T23:36:26Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/test/java/org/apache/hudi/testutils/FunctionalTestHarness.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+public class FunctionalTestHarness implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}, "originalCommit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTgyMw==", "bodyText": "should this be abstract?", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719823", "createdAt": "2020-07-03T23:38:23Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/UtilitiesFunctionalTestSuite.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(JUnitPlatform.class)\n+@SelectPackages(\"org.apache.hudi.utilities.functional\")\n+@IncludeTags(\"functional\")\n+public class UtilitiesFunctionalTestSuite {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTkxMA==", "bodyText": "btw where is this used actually.. may be missing something..", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719910", "createdAt": "2020-07-03T23:39:41Z", "author": {"login": "vinothchandar"}, "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/UtilitiesFunctionalTestSuite.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(JUnitPlatform.class)\n+@SelectPackages(\"org.apache.hudi.utilities.functional\")\n+@IncludeTags(\"functional\")\n+public class UtilitiesFunctionalTestSuite {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTgyMw=="}, "originalCommit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzE2MzUw", "url": "https://github.com/apache/hudi/pull/1746#pullrequestreview-442716350", "createdAt": "2020-07-05T23:43:28Z", "commit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzo0MzoyOFrOGtFqtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzo0Mzo1NFrOGtFq1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMTk1Ng==", "bodyText": "okay initialized = spark != null && hdfsTestService != null; is what makes the spark and hdfsTestService singleton across a run..", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449931956", "createdAt": "2020-07-05T23:43:28Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/test/java/org/apache/hudi/testutils/FunctionalTestHarness.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+public class FunctionalTestHarness implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}, "originalCommit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMTk4OA==", "bodyText": "Its a little confusing.. but okay to be fixed later.", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449931988", "createdAt": "2020-07-05T23:43:54Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/test/java/org/apache/hudi/testutils/FunctionalTestHarness.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+public class FunctionalTestHarness implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}, "originalCommit": {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2820, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}