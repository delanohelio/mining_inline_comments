{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMTM4MDAw", "number": 1302, "title": "[HUDI-595] code cleanup, refactoring code out of PR# 1159", "bodyText": "Tips\n\nThank you very much for contributing to Apache Hudi.\nPlease review https://hudi.apache.org/contributing.html before opening a pull request.\n\nWhat is the purpose of the pull request\nRefactoring cleanup code from PR #1159\nBrief change log\nVerify this pull request\nThis pull request is a trivial rework / code cleanup without any test coverage.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-02-03T06:04:52Z", "url": "https://github.com/apache/hudi/pull/1302", "merged": true, "mergeCommit": {"oid": "594da28fbf64fb20432e718a409577fd10516c4a"}, "closed": true, "closedAt": "2020-02-04T13:52:04Z", "author": {"login": "smarthi"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAmwfDABqjMwMDA4ODAwNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBB30kgFqTM1Mjk4NzcxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjg1ODE2", "url": "https://github.com/apache/hudi/pull/1302#pullrequestreview-352285816", "createdAt": "2020-02-03T14:19:42Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxOTo0MlrOFky5Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo0MDoyNVrOFkzm5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNjkxNA==", "bodyText": "This line is too long, can we move something to the new line?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374126914", "createdAt": "2020-02-03T14:19:42Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/test/java/org/apache/hudi/TestCleaner.java", "diffHunk": "@@ -1079,19 +1081,17 @@ private void testPendingCompactions(HoodieWriteConfig config, int expNumFilesDel\n     });\n \n     // Test for progress (Did we clean some files ?)\n-    long numFilesUnderCompactionDeleted = hoodieCleanStats.stream().flatMap(cleanStat -> {\n-      return convertPathToFileIdWithCommitTime(newMetaClient, cleanStat.getDeletePathPatterns())\n-          .map(fileIdWithCommitTime -> {\n-            if (expFileIdToPendingCompaction.containsKey(fileIdWithCommitTime.getKey())) {\n-              Assert.assertTrue(\"Deleted instant time must be less than pending compaction\",\n-                  HoodieTimeline.compareTimestamps(\n-                      fileIdToLatestInstantBeforeCompaction.get(fileIdWithCommitTime.getKey()),\n-                      fileIdWithCommitTime.getValue(), HoodieTimeline.GREATER));\n-              return true;\n-            }\n-            return false;\n-          });\n-    }).filter(x -> x).count();\n+    long numFilesUnderCompactionDeleted = hoodieCleanStats.stream().flatMap(cleanStat -> convertPathToFileIdWithCommitTime(newMetaClient, cleanStat.getDeletePathPatterns())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMDM2NQ==", "bodyText": "Shall we need to add Type here or just \"Unknown key\"?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374130365", "createdAt": "2020-02-03T14:25:46Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieGlobalBloomIndex.java", "diffHunk": "@@ -265,21 +265,29 @@ public void testTagLocation() throws Exception {\n     JavaRDD<HoodieRecord> taggedRecordRDD = index.tagLocation(recordRDD, jsc, table);\n \n     for (HoodieRecord record : taggedRecordRDD.collect()) {\n-      if (record.getRecordKey().equals(\"000\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename0)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange1.getJsonData());\n-      } else if (record.getRecordKey().equals(\"001\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename2)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange2.getJsonData());\n-      } else if (record.getRecordKey().equals(\"002\")) {\n-        assertTrue(!record.isCurrentLocationKnown());\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange3.getJsonData());\n-      } else if (record.getRecordKey().equals(\"003\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename3)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange5.getJsonData());\n-      } else if (record.getRecordKey().equals(\"004\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename3)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange4.getJsonData());\n+      switch (record.getRecordKey()) {\n+        case \"000\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename0));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange1.getJsonData());\n+          break;\n+        case \"001\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename2));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange2.getJsonData());\n+          break;\n+        case \"002\":\n+          assertFalse(record.isCurrentLocationKnown());\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange3.getJsonData());\n+          break;\n+        case \"003\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename3));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange5.getJsonData());\n+          break;\n+        case \"004\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename3));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange4.getJsonData());\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown Key Type :\" + record.getRecordKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzU3MA==", "bodyText": "Can we move @Override close to the method so that we do not need to change this /**. WDYT?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374133570", "createdAt": "2020-02-03T14:31:26Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -279,7 +277,7 @@ public void close() throws IOException {\n   }\n \n   @Override\n-  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzQ2Nw==", "bodyText": "If it's only a single-line comment, we can use //. WDYT?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137467", "createdAt": "2020-02-03T14:38:21Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -322,7 +322,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n       assertEquals(\"Expect only valid data-file\", dataFileName, dataFiles.get(0).getFileName());\n     }\n \n-    /** Merge API Tests **/\n+    /* Merge API Tests **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzYwMQ==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137601", "createdAt": "2020-02-03T14:38:38Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -355,7 +355,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n     assertEquals(\"Log File Order check\", fileName4, logFiles.get(0).getFileName());\n     assertEquals(\"Log File Order check\", fileName3, logFiles.get(1).getFileName());\n \n-    /** Data Files API tests */\n+    /* Data Files API tests */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzcyOA==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137728", "createdAt": "2020-02-03T14:38:50Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -507,7 +507,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n     assertEquals(\"Log File Order check\", fileName4, logFiles.get(0).getFileName());\n     assertEquals(\"Log File Order check\", fileName3, logFiles.get(1).getFileName());\n \n-    /** Data Files API tests */\n+    /* Data Files API tests */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzODU5Ng==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374138596", "createdAt": "2020-02-03T14:40:25Z", "author": {"login": "yanghua"}, "path": "hudi-hadoop-mr/src/main/java/org/apache/hudi/hadoop/hive/HoodieCombineHiveInputFormat.java", "diffHunk": "@@ -353,9 +352,9 @@ public int hashCode() {\n     init(job);\n     Map<Path, ArrayList<String>> pathToAliases = mrwork.getPathToAliases();\n     Map<String, Operator<? extends OperatorDesc>> aliasToWork = mrwork.getAliasToWork();\n-    /** MOD - Initialize a custom combine input format shim that will call listStatus on the custom inputFormat **/\n+    /* MOD - Initialize a custom combine input format shim that will call listStatus on the custom inputFormat **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1", "author": {"user": {"login": "smarthi", "name": "Suneel Marthi"}}, "url": "https://github.com/apache/hudi/commit/f6e60c853e5e3859af82076443e5c54a3b27e8d1", "committedDate": "2020-02-04T07:46:36Z", "message": "[HUDI-595] code cleanup, refactoring code out of PR# 1159"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1", "author": {"user": {"login": "smarthi", "name": "Suneel Marthi"}}, "url": "https://github.com/apache/hudi/commit/f6e60c853e5e3859af82076443e5c54a3b27e8d1", "committedDate": "2020-02-04T07:46:36Z", "message": "[HUDI-595] code cleanup, refactoring code out of PR# 1159"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzc1Mjk5", "url": "https://github.com/apache/hudi/pull/1302#pullrequestreview-352775299", "createdAt": "2020-02-04T07:49:45Z", "commit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTgzNTkx", "url": "https://github.com/apache/hudi/pull/1302#pullrequestreview-352983591", "createdAt": "2020-02-04T13:45:10Z", "commit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo0NToxMFrOFlUeYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo0NToxMFrOFlUeYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NzA5MQ==", "bodyText": "any reason to remove the assert?", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374677091", "createdAt": "2020-02-04T13:45:10Z", "author": {"login": "leesf"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeRecordReader.java", "diffHunk": "@@ -491,7 +491,6 @@ public void testSchemaEvolutionAndRollbackBlockInLastLogFile() throws Exception\n     writer = writeRollbackBlockToLogFile(partitionDir, schema, \"fileid0\", commitTime, newCommitTime, \"101\", 1);\n     logFilePaths.add(writer.getLogFile().getPath().toString());\n     writer.close();\n-    assertTrue(\"block - size should be > 0\", size > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTg2MjYy", "url": "https://github.com/apache/hudi/pull/1302#pullrequestreview-352986262", "createdAt": "2020-02-04T13:48:55Z", "commit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTg3NzEw", "url": "https://github.com/apache/hudi/pull/1302#pullrequestreview-352987710", "createdAt": "2020-02-04T13:50:53Z", "commit": {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4196, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}