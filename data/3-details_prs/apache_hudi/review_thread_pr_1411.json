{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MDk4NjMw", "number": 1411, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1NDoxOVrODokOVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1NTozNVrODokO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODYzMTI3OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTableCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1NDoxOVrOF3MRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1NDoxOVrOF3MRPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNzAyMw==", "bodyText": "Can we split this method into three small methods so that we can test create, desc and connect command individually?", "url": "https://github.com/apache/hudi/pull/1411#discussion_r393417023", "createdAt": "2020-03-17T02:54:19Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTableCommand.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.util.ConsistencyGuardConfig;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+\n+import static org.apache.hudi.common.table.HoodieTableMetaClient.METAFOLDER_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test Cases for {@link TableCommand}.\n+ */\n+public class TestTableCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test Cases for create, desc and connect table.\n+   */\n+  @Test\n+  public void testCreateAndConnectTable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2186afe816e935f29a8bc9d0a1b7f27b56c80973"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODYzMjczOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTableCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1NTozNVrOF3MSSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1NTozNVrOF3MSSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNzI5MA==", "bodyText": "tip: we can also use assertFalse here.", "url": "https://github.com/apache/hudi/pull/1411#discussion_r393417290", "createdAt": "2020-03-17T02:55:35Z", "author": {"login": "yanghua"}, "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTableCommand.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.util.ConsistencyGuardConfig;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+\n+import static org.apache.hudi.common.table.HoodieTableMetaClient.METAFOLDER_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test Cases for {@link TableCommand}.\n+ */\n+public class TestTableCommand extends AbstractShellIntegrationTest {\n+\n+  /**\n+   * Test Cases for create, desc and connect table.\n+   */\n+  @Test\n+  public void testCreateAndConnectTable() {\n+    // Prepare\n+    String tableName = \"test_table\";\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+    String tablePath = basePath + File.separator + tableName;\n+    String metaPath = tablePath + File.separator + METAFOLDER_NAME;\n+\n+    // Test create default\n+    CommandResult cr = getShell().executeCommand(\n+        \"create --path \" + tablePath + \" --tableName \" + tableName);\n+    assertEquals(\"Metadata for table \" + tableName + \" loaded\", cr.getResult().toString());\n+    HoodieTableMetaClient client = HoodieCLI.getTableMetaClient();\n+    assertEquals(metaPath, client.getArchivePath());\n+    assertEquals(tablePath, client.getBasePath());\n+    assertEquals(metaPath, client.getMetaPath());\n+    assertEquals(HoodieTableType.COPY_ON_WRITE, client.getTableType());\n+    assertEquals(new Integer(1), client.getTimelineLayoutVersion().getVersion());\n+\n+    // Test desc\n+    cr = getShell().executeCommand(\"desc\");\n+    assertTrue(cr.isSuccess());\n+    // check table's basePath metaPath and type\n+    assertTrue(cr.getResult().toString().contains(tablePath));\n+    assertTrue(cr.getResult().toString().contains(metaPath));\n+    assertTrue(cr.getResult().toString().contains(\"COPY_ON_WRITE\"));\n+\n+    // Test connect with specified values\n+    // Check specified values\n+    cr = getShell().executeCommand(\n+        \"connect --path \" + tablePath + \" --initialCheckIntervalMs 3000 \"\n+          + \"--maxWaitIntervalMs 40000 --maxCheckIntervalMs 8\");\n+    assertTrue(cr.isSuccess());\n+    ConsistencyGuardConfig conf = HoodieCLI.consistencyGuardConfig;\n+    assertEquals(3000, conf.getInitialConsistencyCheckIntervalMs());\n+    assertEquals(40000, conf.getMaxConsistencyCheckIntervalMs());\n+    assertEquals(8, conf.getMaxConsistencyChecks());\n+    // Check default values\n+    assertTrue(!conf.isConsistencyCheckEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2186afe816e935f29a8bc9d0a1b7f27b56c80973"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4927, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}