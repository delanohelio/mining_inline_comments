{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTg3MTky", "number": 1352, "title": "[HUDI-625] Fixing performance issues around DiskBasedMap & kryo", "bodyText": "What is the purpose of the pull request\nISSUE: #1328\nJIRA: https://issues.apache.org/jira/browse/HUDI-625\nUser report upsert hangs\nAnalysis\nUpsert (4000000 entries)\nWARN HoodieMergeHandle: \nNumber of entries in MemoryBasedMap => 150875 \nTotal size in bytes of MemoryBasedMap => 83886580 \nNumber of entries in DiskBasedMap => 3849125 \nSize of file spilled to disk => 1443046132\n\nHang stackstrace (DiskBasedMap#get)\nat org.apache.hudi.common.util.SerializationUtils$KryoInstantiator$KryoBase$$Lambda$265/1458915834.newInstance(Unknown Source)\n    at com.esotericsoftware.kryo.Kryo.newInstance(Kryo.java:1139)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.create(FieldSerializer.java:562)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:538)\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731)\n    at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543)\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:813)\n    at org.apache.hudi.common.util.SerializationUtils$KryoSerializerInstance.deserialize(SerializationUtils.java:112)\n    at org.apache.hudi.common.util.SerializationUtils.deserialize(SerializationUtils.java:86)\n    at org.apache.hudi.common.util.collection.DiskBasedMap.get(DiskBasedMap.java:217)\n    at org.apache.hudi.common.util.collection.DiskBasedMap.get(DiskBasedMap.java:211)\n    at org.apache.hudi.common.util.collection.DiskBasedMap.get(DiskBasedMap.java:207)\n    at org.apache.hudi.common.util.collection.ExternalSpillableMap.get(ExternalSpillableMap.java:173)\n    at org.apache.hudi.common.util.collection.ExternalSpillableMap.get(ExternalSpillableMap.java:55)\n    at org.apache.hudi.io.HoodieMergeHandle.write(HoodieMergeHandle.java:280)\n    at org.apache.hudi.table.HoodieCopyOnWriteTable$UpdateHandler.consumeOneRecord(HoodieCopyOnWriteTable.java:434)\n    at org.apache.hudi.table.HoodieCopyOnWriteTable$UpdateHandler.consumeOneRecord(HoodieCopyOnWriteTable.java:424)\n    at org.apache.hudi.common.util.queue.BoundedInMemoryQueueConsumer.consume(BoundedInMemoryQueueConsumer.java:37)\n    at org.apache.hudi.common.util.queue.BoundedInMemoryExecutor.lambda$null$2(BoundedInMemoryExecutor.java:121)\n    at org.apache.hudi.common.util.queue.BoundedInMemoryExecutor$$Lambda$76/1412692041.call(Unknown Source)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n\nAverage time of\u00a0DiskBasedMap#get\n$ monitor *DiskBasedMap get -c 12\n\nAffect(class-cnt:1 , method-cnt:4) cost in 221 ms.\n timestamp            class         method  total  success  fail  avg-rt(ms)  fail-rate\n----------------------------------------------------------------------------------------\n 2020-02-20 18:13:36  DiskBasedMap  get     5814   5814     0     6.12        0.00%\n\n\n timestamp            class         method  total  success  fail  avg-rt(ms)  fail-rate\n----------------------------------------------------------------------------------------\n2020-02-20 18:13:48  DiskBasedMap   get     9117   9117     0     3.89        0.00%\n\n\n timestamp            class         method  total  success  fail  avg-rt(ms)  fail-rate\n----------------------------------------------------------------------------------------\n 2020-02-20 18:14:16  DiskBasedMap  get     8490   8490     0     4.10        0.00%\n\n\nCall time strace:\n    `---[4.361707ms] org.apache.hudi.common.util.collection.DiskBasedMap:get()\n        +---[0.001704ms] java.util.Map:get()\n        `---[4.344261ms] org.apache.hudi.common.util.collection.DiskBasedMap:get()\n            `---[4.328981ms] org.apache.hudi.common.util.collection.DiskBasedMap:get()\n                +---[0.00122ms] org.apache.hudi.common.util.collection.DiskBasedMap:getRandomAccessFile()\n                `---[4.313586ms] org.apache.hudi.common.util.collection.DiskBasedMap:get()\n                    `---[4.283509ms] org.apache.hudi.common.util.collection.DiskBasedMap:get()\n                        +---[0.001169ms] org.apache.hudi.common.util.collection.DiskBasedMap$ValueMetadata:getOffsetOfValue()\n                        +---[7.1E-4ms] java.lang.Long:longValue()\n                        +---[6.97E-4ms] org.apache.hudi.common.util.collection.DiskBasedMap$ValueMetadata:getSizeOfValue()\n                        +---[0.036483ms] org.apache.hudi.common.util.SpillableMapUtils:readBytesFromDisk()\n                        `---[4.201996ms] org.apache.hudi.common.util.SerializationUtils:deserialize()\n\n\nSolution\nUse kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\nThe overried method \"SerializationUtils.KryoInstantiator.KryoBase#newInstantiator\" will called when each entry deserialized, but the only \"Kryo#newInstantiator\" be called when then type doesn\u2019t has a no-arg constructor.\n\n\nVerify this pull request\nCheck the pr by steps in jira.\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-02-24T19:45:27Z", "url": "https://github.com/apache/hudi/pull/1352", "merged": true, "mergeCommit": {"oid": "83c8ad5a38e1b561d501d0dcbcbd39fb02638054"}, "closed": true, "closedAt": "2020-02-25T06:40:38Z", "author": {"login": "lamberken"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHi1I7AH2gAyMzc5MTg3MTkyOmU4Mzc5ZTBkZWQ0NWVkYmJmOGJhYjY0YjJhYWVhMWZmMjVmMzZhODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHsNQJgFqTM2Mzg5NzgxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82", "author": {"user": {"login": "lamberken", "name": "lamberken"}}, "url": "https://github.com/apache/hudi/commit/e8379e0ded45edbbf8bab64b2aaea1ff25f36a82", "committedDate": "2020-02-24T19:38:22Z", "message": "[HUDI-625] Fixing performance issues around DiskBasedMap & kryo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzc5MzA2", "url": "https://github.com/apache/hudi/pull/1352#pullrequestreview-363779306", "createdAt": "2020-02-24T23:40:48Z", "commit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0MDo0OFrOFtz1CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0MToxOVrOFtz1yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTQwMA==", "bodyText": "I agree that the newInstance() seems like creating a new serializer instance every time if the above conditions are not triggered. And also I think Kyro should be faster than the java default.\nWhat about the user-defined custom payload? Do we need to register it somewhere?", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383579400", "createdAt": "2020-02-24T23:40:48Z", "author": {"login": "garyli1019"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {\n-        final Serializer serializer = super.newDefaultSerializer(type);\n-        if (serializer instanceof FieldSerializer) {\n-          final FieldSerializer fieldSerializer = (FieldSerializer) serializer;\n-          fieldSerializer.setIgnoreSyntheticFields(true);\n-        }\n-        return serializer;\n-      }\n-\n-      @Override\n-      protected ObjectInstantiator newInstantiator(Class type) {\n-        return () -> {\n-          // First try reflectasm - it is fastest way to instantiate an object.\n-          try {\n-            final ConstructorAccess access = ConstructorAccess.get(type);\n-            return access.newInstance();\n-          } catch (Throwable t) {\n-            // ignore this exception. We may want to try other way.\n-          }\n-          // fall back to java based instantiation.\n-          try {\n-            final Constructor constructor = type.getConstructor();\n-            constructor.setAccessible(true);\n-            return constructor.newInstance();\n-          } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n-              | InvocationTargetException e) {\n-            // ignore this exception. we will fall back to default instantiation strategy.\n-          }\n-          return super.getInstantiatorStrategy().newInstantiatorOf(type).newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTU5Mw==", "bodyText": "The default is FieldSerializer and the description of setIgnoreSyntheticFields is Controls if synthetic fields are serialized. Default is true. So I think this Override might be unnecessary.", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383579593", "createdAt": "2020-02-24T23:41:19Z", "author": {"login": "garyli1019"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODkyNzA0", "url": "https://github.com/apache/hudi/pull/1352#pullrequestreview-363892704", "createdAt": "2020-02-25T06:17:53Z", "commit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxNzo1M1rOFt51Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoyMDowOVrOFt53sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Nzc5NQ==", "bodyText": "@lamber-ken to gary's point , we also need to consider this case\n\nWhat about the user-defined custom payload? Do we need to register it somewhere?\n\nclasses extending BaseAvroPayload may be okay. but we allow users to implement their own payload classes.. if they don't have data converted as byte[], do we need to register them etc?", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383677795", "createdAt": "2020-02-25T06:17:53Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {\n-        final Serializer serializer = super.newDefaultSerializer(type);\n-        if (serializer instanceof FieldSerializer) {\n-          final FieldSerializer fieldSerializer = (FieldSerializer) serializer;\n-          fieldSerializer.setIgnoreSyntheticFields(true);\n-        }\n-        return serializer;\n-      }\n-\n-      @Override\n-      protected ObjectInstantiator newInstantiator(Class type) {\n-        return () -> {\n-          // First try reflectasm - it is fastest way to instantiate an object.\n-          try {\n-            final ConstructorAccess access = ConstructorAccess.get(type);\n-            return access.newInstance();\n-          } catch (Throwable t) {\n-            // ignore this exception. We may want to try other way.\n-          }\n-          // fall back to java based instantiation.\n-          try {\n-            final Constructor constructor = type.getConstructor();\n-            constructor.setAccessible(true);\n-            return constructor.newInstance();\n-          } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n-              | InvocationTargetException e) {\n-            // ignore this exception. we will fall back to default instantiation strategy.\n-          }\n-          return super.getInstantiatorStrategy().newInstantiatorOf(type).newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTQwMA=="}, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3ODM4NA==", "bodyText": "I guess, this achieves the same purpose as the code in newInstantiator that you deleted below?", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383678384", "createdAt": "2020-02-25T06:20:09Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODk0NTI1", "url": "https://github.com/apache/hudi/pull/1352#pullrequestreview-363894525", "createdAt": "2020-02-25T06:23:42Z", "commit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODk3ODEx", "url": "https://github.com/apache/hudi/pull/1352#pullrequestreview-363897811", "createdAt": "2020-02-25T06:33:51Z", "commit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3658, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}