{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTg3MTky", "number": 1352, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0MDo0OFrODihFLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoyMDowOVrODilAbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIwMTczOnYy", "diffSide": "LEFT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0MDo0OFrOFtz1CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxNzo1M1rOFt51Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTQwMA==", "bodyText": "I agree that the newInstance() seems like creating a new serializer instance every time if the above conditions are not triggered. And also I think Kyro should be faster than the java default.\nWhat about the user-defined custom payload? Do we need to register it somewhere?", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383579400", "createdAt": "2020-02-24T23:40:48Z", "author": {"login": "garyli1019"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {\n-        final Serializer serializer = super.newDefaultSerializer(type);\n-        if (serializer instanceof FieldSerializer) {\n-          final FieldSerializer fieldSerializer = (FieldSerializer) serializer;\n-          fieldSerializer.setIgnoreSyntheticFields(true);\n-        }\n-        return serializer;\n-      }\n-\n-      @Override\n-      protected ObjectInstantiator newInstantiator(Class type) {\n-        return () -> {\n-          // First try reflectasm - it is fastest way to instantiate an object.\n-          try {\n-            final ConstructorAccess access = ConstructorAccess.get(type);\n-            return access.newInstance();\n-          } catch (Throwable t) {\n-            // ignore this exception. We may want to try other way.\n-          }\n-          // fall back to java based instantiation.\n-          try {\n-            final Constructor constructor = type.getConstructor();\n-            constructor.setAccessible(true);\n-            return constructor.newInstance();\n-          } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n-              | InvocationTargetException e) {\n-            // ignore this exception. we will fall back to default instantiation strategy.\n-          }\n-          return super.getInstantiatorStrategy().newInstantiatorOf(type).newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTg3MQ==", "bodyText": "Hi @garyli1019, hudi put HoodieRecord to kryo, the payload data inside has been coverted to byte[] data, see BaseAvroPayload#BaseAvroPayload. So It doesn't affect anything if we register payload class.", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383601871", "createdAt": "2020-02-25T00:54:17Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {\n-        final Serializer serializer = super.newDefaultSerializer(type);\n-        if (serializer instanceof FieldSerializer) {\n-          final FieldSerializer fieldSerializer = (FieldSerializer) serializer;\n-          fieldSerializer.setIgnoreSyntheticFields(true);\n-        }\n-        return serializer;\n-      }\n-\n-      @Override\n-      protected ObjectInstantiator newInstantiator(Class type) {\n-        return () -> {\n-          // First try reflectasm - it is fastest way to instantiate an object.\n-          try {\n-            final ConstructorAccess access = ConstructorAccess.get(type);\n-            return access.newInstance();\n-          } catch (Throwable t) {\n-            // ignore this exception. We may want to try other way.\n-          }\n-          // fall back to java based instantiation.\n-          try {\n-            final Constructor constructor = type.getConstructor();\n-            constructor.setAccessible(true);\n-            return constructor.newInstance();\n-          } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n-              | InvocationTargetException e) {\n-            // ignore this exception. we will fall back to default instantiation strategy.\n-          }\n-          return super.getInstantiatorStrategy().newInstantiatorOf(type).newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTQwMA=="}, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNTYxMA==", "bodyText": "What I curious about was what you mentioned in the ticket:\nkryo.register(HoodieKey.class, new HoodieKeySerializer());\nkryo.register(GenericData.Record.class, new GenericDataRecordSerializer());\nkryo.register(HoodieRecord.class, new HoodieRecordSerializer());\nkryo.register(HoodieRecordLocationSerializer.class, new HoodieRecordLocationSerializer());\nkryo.register(OverwriteWithLatestAvroPayload.class, new OverwriteWithLatestPayloadSerializer());\n\nWhere this is done?", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383605610", "createdAt": "2020-02-25T01:06:54Z", "author": {"login": "garyli1019"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {\n-        final Serializer serializer = super.newDefaultSerializer(type);\n-        if (serializer instanceof FieldSerializer) {\n-          final FieldSerializer fieldSerializer = (FieldSerializer) serializer;\n-          fieldSerializer.setIgnoreSyntheticFields(true);\n-        }\n-        return serializer;\n-      }\n-\n-      @Override\n-      protected ObjectInstantiator newInstantiator(Class type) {\n-        return () -> {\n-          // First try reflectasm - it is fastest way to instantiate an object.\n-          try {\n-            final ConstructorAccess access = ConstructorAccess.get(type);\n-            return access.newInstance();\n-          } catch (Throwable t) {\n-            // ignore this exception. We may want to try other way.\n-          }\n-          // fall back to java based instantiation.\n-          try {\n-            final Constructor constructor = type.getConstructor();\n-            constructor.setAccessible(true);\n-            return constructor.newInstance();\n-          } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n-              | InvocationTargetException e) {\n-            // ignore this exception. we will fall back to default instantiation strategy.\n-          }\n-          return super.getInstantiatorStrategy().newInstantiatorOf(type).newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTQwMA=="}, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDQzNw==", "bodyText": "Get your point, these serializers are not necessary now.\n\nCustom serializers are need when there are special requirements for serialization and deserialization.\nWe use InstantiatorStrategy, which is also efficient. kryo-creation [1]\nkryo.setInstantiatorStrategy(new DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n\n\nIf we do that currently, it will affect many places.\n\n[1] https://github.com/EsotericSoftware/kryo#object-creation", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383610437", "createdAt": "2020-02-25T01:25:02Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {\n-        final Serializer serializer = super.newDefaultSerializer(type);\n-        if (serializer instanceof FieldSerializer) {\n-          final FieldSerializer fieldSerializer = (FieldSerializer) serializer;\n-          fieldSerializer.setIgnoreSyntheticFields(true);\n-        }\n-        return serializer;\n-      }\n-\n-      @Override\n-      protected ObjectInstantiator newInstantiator(Class type) {\n-        return () -> {\n-          // First try reflectasm - it is fastest way to instantiate an object.\n-          try {\n-            final ConstructorAccess access = ConstructorAccess.get(type);\n-            return access.newInstance();\n-          } catch (Throwable t) {\n-            // ignore this exception. We may want to try other way.\n-          }\n-          // fall back to java based instantiation.\n-          try {\n-            final Constructor constructor = type.getConstructor();\n-            constructor.setAccessible(true);\n-            return constructor.newInstance();\n-          } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n-              | InvocationTargetException e) {\n-            // ignore this exception. we will fall back to default instantiation strategy.\n-          }\n-          return super.getInstantiatorStrategy().newInstantiatorOf(type).newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTQwMA=="}, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Nzc5NQ==", "bodyText": "@lamber-ken to gary's point , we also need to consider this case\n\nWhat about the user-defined custom payload? Do we need to register it somewhere?\n\nclasses extending BaseAvroPayload may be okay. but we allow users to implement their own payload classes.. if they don't have data converted as byte[], do we need to register them etc?", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383677795", "createdAt": "2020-02-25T06:17:53Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {\n-        final Serializer serializer = super.newDefaultSerializer(type);\n-        if (serializer instanceof FieldSerializer) {\n-          final FieldSerializer fieldSerializer = (FieldSerializer) serializer;\n-          fieldSerializer.setIgnoreSyntheticFields(true);\n-        }\n-        return serializer;\n-      }\n-\n-      @Override\n-      protected ObjectInstantiator newInstantiator(Class type) {\n-        return () -> {\n-          // First try reflectasm - it is fastest way to instantiate an object.\n-          try {\n-            final ConstructorAccess access = ConstructorAccess.get(type);\n-            return access.newInstance();\n-          } catch (Throwable t) {\n-            // ignore this exception. We may want to try other way.\n-          }\n-          // fall back to java based instantiation.\n-          try {\n-            final Constructor constructor = type.getConstructor();\n-            constructor.setAccessible(true);\n-            return constructor.newInstance();\n-          } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n-              | InvocationTargetException e) {\n-            // ignore this exception. we will fall back to default instantiation strategy.\n-          }\n-          return super.getInstantiatorStrategy().newInstantiatorOf(type).newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTQwMA=="}, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIwMzExOnYy", "diffSide": "LEFT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo0MToxOVrOFtz1yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjozNjowM1rOFt6JPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTU5Mw==", "bodyText": "The default is FieldSerializer and the description of setIgnoreSyntheticFields is Controls if synthetic fields are serialized. Default is true. So I think this Override might be unnecessary.", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383579593", "createdAt": "2020-02-24T23:41:19Z", "author": {"login": "garyli1019"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4Mjg3Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383682876", "createdAt": "2020-02-25T06:36:03Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));\n       // Handle cases where we may have an odd classloader setup like with libjars\n       // for hadoop\n       kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n       return kryo;\n     }\n \n-    private static class KryoBase extends Kryo {\n-      @Override\n-      protected Serializer newDefaultSerializer(Class type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTU5Mw=="}, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTg0NDk0OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoyMDowOVrOFt53sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoyMjozMFrOFt56KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3ODM4NA==", "bodyText": "I guess, this achieves the same purpose as the code in newInstantiator that you deleted below?", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383678384", "createdAt": "2020-02-25T06:20:09Z", "author": {"login": "vinothchandar"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3OTAxNw==", "bodyText": "Very right.", "url": "https://github.com/apache/hudi/pull/1352#discussion_r383679017", "createdAt": "2020-02-25T06:22:30Z", "author": {"login": "lamberken"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/SerializationUtils.java", "diffHunk": "@@ -121,50 +116,16 @@ Object deserialize(byte[] objectData) {\n \n     public Kryo newKryo() {\n \n-      Kryo kryo = new KryoBase();\n+      Kryo kryo = new Kryo();\n       // ensure that kryo doesn't fail if classes are not registered with kryo.\n       kryo.setRegistrationRequired(false);\n       // This would be used for object initialization if nothing else works out.\n-      kryo.setInstantiatorStrategy(new org.objenesis.strategy.StdInstantiatorStrategy());\n+      kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3ODM4NA=="}, "originalCommit": {"oid": "e8379e0ded45edbbf8bab64b2aaea1ff25f36a82"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4859, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}