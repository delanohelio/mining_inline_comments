{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTEzNjc0", "number": 1884, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyMzo0MVrOETFEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowMDozOFrOET5RbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDQxNTIwOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/timeline/TestHoodieActiveTimeline.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyMzo0MVrOG4nKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyMzo0MVrOG4nKig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNTExNA==", "bodyText": "moving message arg to the last, align with junit API style", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462015114", "createdAt": "2020-07-29T03:23:41Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/table/timeline/TestHoodieActiveTimeline.java", "diffHunk": "@@ -94,17 +94,19 @@ public void testLoadingInstantsFromFiles() throws IOException {\n     timeline = timeline.reload();\n \n     assertEquals(5, timeline.countInstants(), \"Total instants should be 5\");\n-    HoodieTestUtils.assertStreamEquals(\"Check the instants stream\",\n+    assertStreamEquals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed48c2df4e7a9287a7062144c1b812cae26fc7eb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDQyMjM2OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyODoxMFrOG4nOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyODoxMFrOG4nOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjE4Nw==", "bodyText": "IMO not needing real randomness for caller's scenario", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462016187", "createdAt": "2020-07-29T03:28:10Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {\n+    return keys.stream()\n+        .map(hr -> \"{\\\"_row_key\\\":\\\"\" + hr.getRecordKey() + \"\\\",\\\"partition\\\":\\\"\" + hr.getPartitionPath() + \"\\\"}\")\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static List<String> recordsToStrings(List<HoodieRecord> records) {\n+    return records.stream().map(Transformations::recordToString).filter(Option::isPresent).map(Option::get)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static Option<String> recordToString(HoodieRecord record) {\n+    try {\n+      String str = ((RawTripTestPayload) record.getData()).getJsonData();\n+      str = \"{\" + str.substring(str.indexOf(\"\\\"timestamp\\\":\"));\n+      // Remove the last } bracket\n+      str = str.substring(0, str.length() - 1);\n+      return Option.of(str + \", \\\"partition\\\": \\\"\" + record.getPartitionPath() + \"\\\"}\");\n+    } catch (IOException e) {\n+      return Option.empty();\n+    }\n+  }\n+\n+  /**\n+   * Pseudorandom: select even indices first, then select odd ones.\n+   */\n+  public static <T> List<T> randomSelect(List<T> items, int n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed48c2df4e7a9287a7062144c1b812cae26fc7eb"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDQyODU0OnYy", "diffSide": "LEFT", "path": "hudi-spark/src/test/java/org/apache/hudi/testutils/DataSourceTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzozMTo0NlrOG4nSQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzozMTo0NlrOG4nSQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNzA5MA==", "bodyText": "all methods moved to Transformations.java", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462017090", "createdAt": "2020-07-29T03:31:46Z", "author": {"login": "xushiyan"}, "path": "hudi-spark/src/test/java/org/apache/hudi/testutils/DataSourceTestUtils.java", "diffHunk": "@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hudi.testutils;\n-\n-import org.apache.hudi.common.model.HoodieKey;\n-import org.apache.hudi.common.model.HoodieRecord;\n-import org.apache.hudi.common.model.HoodieRecordPayload;\n-import org.apache.hudi.common.testutils.RawTripTestPayload;\n-import org.apache.hudi.common.util.Option;\n-import org.apache.hudi.table.UserDefinedBulkInsertPartitioner;\n-\n-import org.apache.spark.api.java.JavaRDD;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Test utils for data source tests.\n- */\n-public class DataSourceTestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed48c2df4e7a9287a7062144c1b812cae26fc7eb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODU5MjQzOnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDo0NTo1MlrOG5PGTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTowNjozMFrOG5PbYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTM5MA==", "bodyText": "Considering _row_key is not a generic definition. IMO, we should put this method into a util class. The xxxs class should be more generic. WDYT?", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462669390", "createdAt": "2020-07-30T00:45:52Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a883343311ab20117e9c28b9132d468ddd4df438"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NDc4Ng==", "bodyText": "make sense.. as this is only used by HoodieJavaApp#run and specific to its own logic, let's put it there for its own usage?", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462674786", "createdAt": "2020-07-30T01:06:30Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTM5MA=="}, "originalCommit": {"oid": "a883343311ab20117e9c28b9132d468ddd4df438"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODU5MzA3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDo0NjoxOFrOG5PGrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMjowNFrOG5P25g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTQ4NA==", "bodyText": "ditto", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462669484", "createdAt": "2020-07-30T00:46:18Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {\n+    return keys.stream()\n+        .map(hr -> \"{\\\"_row_key\\\":\\\"\" + hr.getRecordKey() + \"\\\",\\\"partition\\\":\\\"\" + hr.getPartitionPath() + \"\\\"}\")\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static List<String> recordsToStrings(List<HoodieRecord> records) {\n+    return records.stream().map(Transformations::recordToString).filter(Option::isPresent).map(Option::get)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static Option<String> recordToString(HoodieRecord record) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a883343311ab20117e9c28b9132d468ddd4df438"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NTMyNw==", "bodyText": "this method and Transformations#recordsToStrings work for HoodieRecord of RawTripTestPayload, how about moving them to RawTripTestPayload.java?", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462675327", "createdAt": "2020-07-30T01:08:36Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {\n+    return keys.stream()\n+        .map(hr -> \"{\\\"_row_key\\\":\\\"\" + hr.getRecordKey() + \"\\\",\\\"partition\\\":\\\"\" + hr.getPartitionPath() + \"\\\"}\")\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static List<String> recordsToStrings(List<HoodieRecord> records) {\n+    return records.stream().map(Transformations::recordToString).filter(Option::isPresent).map(Option::get)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static Option<String> recordToString(HoodieRecord record) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTQ4NA=="}, "originalCommit": {"oid": "a883343311ab20117e9c28b9132d468ddd4df438"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MTgzMA==", "bodyText": "Sounds good.", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462681830", "createdAt": "2020-07-30T01:32:04Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {\n+    return keys.stream()\n+        .map(hr -> \"{\\\"_row_key\\\":\\\"\" + hr.getRecordKey() + \"\\\",\\\"partition\\\":\\\"\" + hr.getPartitionPath() + \"\\\"}\")\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static List<String> recordsToStrings(List<HoodieRecord> records) {\n+    return records.stream().map(Transformations::recordToString).filter(Option::isPresent).map(Option::get)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static Option<String> recordToString(HoodieRecord record) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTQ4NA=="}, "originalCommit": {"oid": "a883343311ab20117e9c28b9132d468ddd4df438"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODYwMTg3OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDo1MToyMVrOG5PL1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToxMzoxMFrOG5PiOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3MDgwNw==", "bodyText": "It would be better to extract those file names into constant fields in this file. WDYT?", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462670807", "createdAt": "2020-07-30T00:51:21Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "diffHunk": "@@ -66,12 +66,12 @@ public static Schema getSimpleSchema() throws IOException {\n       throws IOException, URISyntaxException {\n     GenericDatumReader<IndexedRecord> reader = new GenericDatumReader<>(writerSchema, readerSchema);\n     // Required to register the necessary JAR:// file system\n-    URI resource = SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI();\n+    URI resource = SchemaTestUtil.class.getResource(\"/sample.data\").toURI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a883343311ab20117e9c28b9132d468ddd4df438"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjUzNg==", "bodyText": "yup fixing it", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462676536", "createdAt": "2020-07-30T01:13:10Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "diffHunk": "@@ -66,12 +66,12 @@ public static Schema getSimpleSchema() throws IOException {\n       throws IOException, URISyntaxException {\n     GenericDatumReader<IndexedRecord> reader = new GenericDatumReader<>(writerSchema, readerSchema);\n     // Required to register the necessary JAR:// file system\n-    URI resource = SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI();\n+    URI resource = SchemaTestUtil.class.getResource(\"/sample.data\").toURI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3MDgwNw=="}, "originalCommit": {"oid": "a883343311ab20117e9c28b9132d468ddd4df438"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk2MDc2OnYy", "diffSide": "RIGHT", "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieBloomIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1Njo0MlrOG54qVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMToxNjo0NVrOG54-JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDM1Ng==", "bodyText": "May it be TestHoodieBloomIndex.class?", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463350356", "createdAt": "2020-07-31T00:56:42Z", "author": {"login": "yanghua"}, "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieBloomIndex.java", "diffHunk": "@@ -73,9 +72,7 @@\n \n public class TestHoodieBloomIndex extends HoodieClientTestHarness {\n \n-  private String schemaStr;\n-  private Schema schema;\n-\n+  private static final Schema SCHEMA = getSchemaFromResource(TestHoodieGlobalBloomIndex.class, \"/exampleSchema.txt\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efc9057e17621e20b5fa3042f6e727bd1440ed36"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NTQyOA==", "bodyText": "fixed.", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463355428", "createdAt": "2020-07-31T01:16:45Z", "author": {"login": "xushiyan"}, "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieBloomIndex.java", "diffHunk": "@@ -73,9 +72,7 @@\n \n public class TestHoodieBloomIndex extends HoodieClientTestHarness {\n \n-  private String schemaStr;\n-  private Schema schema;\n-\n+  private static final Schema SCHEMA = getSchemaFromResource(TestHoodieGlobalBloomIndex.class, \"/exampleSchema.txt\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDM1Ng=="}, "originalCommit": {"oid": "efc9057e17621e20b5fa3042f6e727bd1440ed36"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk2NzQ4OnYy", "diffSide": "RIGHT", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowMDozOFrOG54uOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMToxNzowNVrOG54-dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTM1NQ==", "bodyText": "Is the old simple_data.json not correct, right?", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463351355", "createdAt": "2020-07-31T01:00:38Z", "author": {"login": "yanghua"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "diffHunk": "@@ -66,24 +68,24 @@ public static Schema getSimpleSchema() throws IOException {\n       throws IOException, URISyntaxException {\n     GenericDatumReader<IndexedRecord> reader = new GenericDatumReader<>(writerSchema, readerSchema);\n     // Required to register the necessary JAR:// file system\n-    URI resource = SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI();\n+    URI resource = SchemaTestUtil.class.getResource(RESOURCE_SAMPLE_DATA).toURI();\n     Path dataPath;\n     if (resource.toString().contains(\"!\")) {\n       dataPath = uriToPath(resource);\n     } else {\n-      dataPath = Paths.get(SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI());\n+      dataPath = Paths.get(SchemaTestUtil.class.getResource(RESOURCE_SAMPLE_DATA).toURI());\n     }\n \n     try (Stream<String> stream = Files.lines(dataPath)) {\n       return stream.skip(from).limit(limit).map(s -> {\n         try {\n           return reader.read(null, DecoderFactory.get().jsonDecoder(writerSchema, s));\n         } catch (IOException e) {\n-          throw new HoodieIOException(\"Could not read data from simple_data.json\", e);\n+          throw new HoodieIOException(\"Could not read data from \" + RESOURCE_SAMPLE_DATA, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efc9057e17621e20b5fa3042f6e727bd1440ed36"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NTUwOQ==", "bodyText": "yea \"simple_data.json\" does not exist.", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463355509", "createdAt": "2020-07-31T01:17:05Z", "author": {"login": "xushiyan"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "diffHunk": "@@ -66,24 +68,24 @@ public static Schema getSimpleSchema() throws IOException {\n       throws IOException, URISyntaxException {\n     GenericDatumReader<IndexedRecord> reader = new GenericDatumReader<>(writerSchema, readerSchema);\n     // Required to register the necessary JAR:// file system\n-    URI resource = SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI();\n+    URI resource = SchemaTestUtil.class.getResource(RESOURCE_SAMPLE_DATA).toURI();\n     Path dataPath;\n     if (resource.toString().contains(\"!\")) {\n       dataPath = uriToPath(resource);\n     } else {\n-      dataPath = Paths.get(SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI());\n+      dataPath = Paths.get(SchemaTestUtil.class.getResource(RESOURCE_SAMPLE_DATA).toURI());\n     }\n \n     try (Stream<String> stream = Files.lines(dataPath)) {\n       return stream.skip(from).limit(limit).map(s -> {\n         try {\n           return reader.read(null, DecoderFactory.get().jsonDecoder(writerSchema, s));\n         } catch (IOException e) {\n-          throw new HoodieIOException(\"Could not read data from simple_data.json\", e);\n+          throw new HoodieIOException(\"Could not read data from \" + RESOURCE_SAMPLE_DATA, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTM1NQ=="}, "originalCommit": {"oid": "efc9057e17621e20b5fa3042f6e727bd1440ed36"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4366, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}