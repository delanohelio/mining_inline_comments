{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzczNjA2", "number": 1542, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTowNDowMFrOD0IlJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTowNToxNlrOD0IneA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTkzMTI2OnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/RepairsCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTowNDowMFrOGI6-jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMDo1Nzo1M1rOGTJR7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwODA3OQ==", "bodyText": "AvroRuntimeException will never be catched. Not an Avro data file is en IOException.\n// org.apache.avro.file.DataFileReader#openReader\n\n\npublic static <D> FileReader<D> openReader(SeekableInput in,\n                                           DatumReader<D> reader)\n  throws IOException {\n  if (in.length() < MAGIC.length)\n    throw new IOException(\"Not an Avro data file\");\n\n  // read magic header\n  byte[] magic = new byte[MAGIC.length];\n  in.seek(0);\n  for (int c = 0; c < magic.length; c = in.read(magic, c, magic.length-c)) {}\n  in.seek(0);\n\n  if (Arrays.equals(MAGIC, magic))              // current format\n    return new DataFileReader<D>(in, reader);\n  if (Arrays.equals(DataFileReader12.MAGIC, magic)) // 1.2 format\n    return new DataFileReader12<D>(in, reader);\n\n  throw new IOException(\"Not an Avro data file\");\n}", "url": "https://github.com/apache/hudi/pull/1542#discussion_r412008079", "createdAt": "2020-04-21T09:04:00Z", "author": {"login": "lamberken"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/RepairsCommand.java", "diffHunk": "@@ -147,14 +149,16 @@ public String overwriteHoodieProperties(\n   public void removeCorruptedPendingCleanAction() {\n \n     HoodieTableMetaClient client = HoodieCLI.getTableMetaClient();\n-    HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-\n-    activeTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n+    HoodieTimeline cleanerTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline().getCleanerTimeline();\n+    LOG.info(\"Inspecting pending clean metadata in timeline for corrupted files\");\n+    cleanerTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n       try {\n         CleanerUtils.getCleanerPlan(client, instant);\n-      } catch (IOException e) {\n-        LOG.warn(\"try to remove corrupted instant file: \" + instant);\n+      } catch (AvroRuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NDY4OA==", "bodyText": "@lamber-ken : Thanks. I have made changes to specifically look for this message in the exception to detect corruption. Please take a look.", "url": "https://github.com/apache/hudi/pull/1542#discussion_r422684688", "createdAt": "2020-05-10T18:55:03Z", "author": {"login": "bvaradar"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/RepairsCommand.java", "diffHunk": "@@ -147,14 +149,16 @@ public String overwriteHoodieProperties(\n   public void removeCorruptedPendingCleanAction() {\n \n     HoodieTableMetaClient client = HoodieCLI.getTableMetaClient();\n-    HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-\n-    activeTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n+    HoodieTimeline cleanerTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline().getCleanerTimeline();\n+    LOG.info(\"Inspecting pending clean metadata in timeline for corrupted files\");\n+    cleanerTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n       try {\n         CleanerUtils.getCleanerPlan(client, instant);\n-      } catch (IOException e) {\n-        LOG.warn(\"try to remove corrupted instant file: \" + instant);\n+      } catch (AvroRuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwODA3OQ=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcyODE3Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/hudi/pull/1542#discussion_r422728172", "createdAt": "2020-05-11T00:57:53Z", "author": {"login": "lamberken"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/RepairsCommand.java", "diffHunk": "@@ -147,14 +149,16 @@ public String overwriteHoodieProperties(\n   public void removeCorruptedPendingCleanAction() {\n \n     HoodieTableMetaClient client = HoodieCLI.getTableMetaClient();\n-    HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-\n-    activeTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n+    HoodieTimeline cleanerTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline().getCleanerTimeline();\n+    LOG.info(\"Inspecting pending clean metadata in timeline for corrupted files\");\n+    cleanerTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n       try {\n         CleanerUtils.getCleanerPlan(client, instant);\n-      } catch (IOException e) {\n-        LOG.warn(\"try to remove corrupted instant file: \" + instant);\n+      } catch (AvroRuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwODA3OQ=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTkzNzIwOnYy", "diffSide": "RIGHT", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/RepairsCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTowNToxNlrOGI7CKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyNToyM1rOGJlZnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwOTAwMA==", "bodyText": "Good catch! .getCleanerTimeline() \ud83d\udc4d", "url": "https://github.com/apache/hudi/pull/1542#discussion_r412009000", "createdAt": "2020-04-21T09:05:16Z", "author": {"login": "lamberken"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/RepairsCommand.java", "diffHunk": "@@ -147,14 +149,16 @@ public String overwriteHoodieProperties(\n   public void removeCorruptedPendingCleanAction() {\n \n     HoodieTableMetaClient client = HoodieCLI.getTableMetaClient();\n-    HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-\n-    activeTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n+    HoodieTimeline cleanerTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline().getCleanerTimeline();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMzEzMw==", "bodyText": "oh wow :)", "url": "https://github.com/apache/hudi/pull/1542#discussion_r412703133", "createdAt": "2020-04-22T06:25:23Z", "author": {"login": "vinothchandar"}, "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/RepairsCommand.java", "diffHunk": "@@ -147,14 +149,16 @@ public String overwriteHoodieProperties(\n   public void removeCorruptedPendingCleanAction() {\n \n     HoodieTableMetaClient client = HoodieCLI.getTableMetaClient();\n-    HoodieActiveTimeline activeTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline();\n-\n-    activeTimeline.filterInflightsAndRequested().getInstants().forEach(instant -> {\n+    HoodieTimeline cleanerTimeline = HoodieCLI.getTableMetaClient().getActiveTimeline().getCleanerTimeline();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwOTAwMA=="}, "originalCommit": null, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4812, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}