{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjQyNDkw", "number": 1473, "title": "[HUDI-568] Improve unit test coverage", "bodyText": "What is the purpose of the pull request\nImprove code coverage for the following classes\n\nHoodieTableMetaClient\nRocksDBDAO\nHoodieRealtimeFileSplit\n\nBrief change log\nAdded new tests for functions missing coverage\nVerify this pull request\nAdded tests in the following files\n\nTestRocksDBManager.java\nTesthoodieTableMetaClient.java\nTestHoodieRealtimeFileSplit.java\n\nCommitter checklist\n\n\n Has a corresponding JIRA in PR title & commit\n\n\n Commit message is descriptive of the change\n\n\n CI is green\n\n\n Necessary doc changes done or have another open PR\n\n\n For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.", "createdAt": "2020-03-31T22:26:43Z", "url": "https://github.com/apache/hudi/pull/1473", "merged": true, "mergeCommit": {"oid": "f5f34bb1c16e6d070668486eba2a29f554c0bbc7"}, "closed": true, "closedAt": "2020-04-09T17:15:35Z", "author": {"login": "ramachandranms"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTMzZzgBqjMxODU3MDcxNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVtccIgBqjMyMTU2MTkwMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDAyNjY1", "url": "https://github.com/apache/hudi/pull/1473#pullrequestreview-386002665", "createdAt": "2020-04-01T22:50:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1MDoxMVrOF_VZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1MDoxMVrOF_VZzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTI3Nw==", "bodyText": "What if getRocksDB is called repetitively ? It should not init() every time, do we plan to add a different check in init to allow for better code coverage ?", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401955277", "createdAt": "2020-04-01T22:50:11Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/util/collection/RocksDBDAO.java", "diffHunk": "@@ -75,9 +75,6 @@ public RocksDBDAO(String basePath, String rocksDBBasePath) {\n    * Create RocksDB if not initialized.\n    */\n   private RocksDB getRocksDB() {\n-    if (null == rocksDB) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDAzMTIz", "url": "https://github.com/apache/hudi/pull/1473#pullrequestreview-386003123", "createdAt": "2020-04-01T22:51:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1MToxNVrOF_VbTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1MToxNVrOF_VbTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTY2MQ==", "bodyText": "can we make this log ? if there is already an assert, this might not be needed", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401955661", "createdAt": "2020-04-01T22:51:15Z", "author": {"login": "n3nash"}, "path": "hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestRocksDBManager.java", "diffHunk": "@@ -99,25 +104,119 @@ public void testRocksDBManager() {\n         List<Pair<String, Payload>> gotPayloads =\n             dbManager.<Payload>prefixSearch(family, prefix).collect(Collectors.toList());\n         Integer expCount = countsMap.get(family).get(prefix);\n+        System.out.printf(\"%s,%s: %d, %d\\n\", prefix, family, expCount == null ? 0L : expCount.longValue(), gotPayloads.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDA2ODMx", "url": "https://github.com/apache/hudi/pull/1473#pullrequestreview-386006831", "createdAt": "2020-04-01T23:00:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzowMDoxNFrOF_VoRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzowMDoxNFrOF_VoRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1ODk4MA==", "bodyText": "Can you add comments for each of the tests you have added to explain what you are trying to test here ? Especially with the mock, it is unclear to a new reader", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401958980", "createdAt": "2020-04-01T23:00:14Z", "author": {"login": "n3nash"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hadoop.realtime;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.AdditionalMatchers.aryEq;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyByte;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+\n+public class TestHoodieRealtimeFileSplit {\n+\n+  private HoodieRealtimeFileSplit split;\n+  private String basePath = \"/tmp\";\n+  private List<String> deltaLogPaths = Collections.singletonList(\"/tmp/1.log\");\n+  private FileSplit baseFileSplit = new FileSplit(new Path(\"/tmp\", \"test.file\"), 0, 100, new String[]{});\n+  private String maxCommitTime = \"10001\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    split = new HoodieRealtimeFileSplit(baseFileSplit, basePath, deltaLogPaths, maxCommitTime);\n+  }\n+\n+  @Test\n+  public void write() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDA4MDI5", "url": "https://github.com/apache/hudi/pull/1473#pullrequestreview-386008029", "createdAt": "2020-04-01T23:03:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzowMzoxNVrOF_VsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzowMzoxNVrOF_VsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1OTk5Mg==", "bodyText": "Take a look at https://github.com/apache/incubator-hudi/blob/master/hudi-common/src/test/java/org/apache/hudi/common/HoodieCommonTestHarness.java#L48 to better initialize things like basePath and other variables that you intend to use throughout the execution of the test", "url": "https://github.com/apache/hudi/pull/1473#discussion_r401959992", "createdAt": "2020-04-01T23:03:15Z", "author": {"login": "n3nash"}, "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeFileSplit.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hadoop.realtime;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.AdditionalMatchers.aryEq;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyByte;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+\n+public class TestHoodieRealtimeFileSplit {\n+\n+  private HoodieRealtimeFileSplit split;\n+  private String basePath = \"/tmp\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDA4NTg2", "url": "https://github.com/apache/hudi/pull/1473#pullrequestreview-386008586", "createdAt": "2020-04-01T23:04:40Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDYxODA5", "url": "https://github.com/apache/hudi/pull/1473#pullrequestreview-387461809", "createdAt": "2020-04-03T17:49:23Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e8e0b6292a396e7276e268118de050feda9e0d5", "author": {"user": {"login": "ramachandranms", "name": "Ramachandran M S"}}, "url": "https://github.com/apache/hudi/commit/6e8e0b6292a396e7276e268118de050feda9e0d5", "committedDate": "2020-04-08T19:55:04Z", "message": "[HUDI-568] Improve unit test coverage\n\nClasses improved:\n* HoodieTableMetaClient\n* RocksDBDAO\n* HoodieRealtimeFileSplit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6e8e0b6292a396e7276e268118de050feda9e0d5", "author": {"user": {"login": "ramachandranms", "name": "Ramachandran M S"}}, "url": "https://github.com/apache/hudi/commit/6e8e0b6292a396e7276e268118de050feda9e0d5", "committedDate": "2020-04-08T19:55:04Z", "message": "[HUDI-568] Improve unit test coverage\n\nClasses improved:\n* HoodieTableMetaClient\n* RocksDBDAO\n* HoodieRealtimeFileSplit"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3310, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}