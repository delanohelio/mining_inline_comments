{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODk3MTk4", "number": 1633, "title": "[HUDI-858] Allow multiple operations to be executed within a single commit", "bodyText": "There are users who had been directly using RDD APIs and have relied on a behavior in 0.4.x to allow multiple write operations (upsert/buk-insert/...) to be executed within a single commit.\nGiven Hudi commit protocol, these are generally unsafe operations and user need to handle failure scenarios. It only works with COW table. Hudi 0.5.x had stopped this behavior.\nGiven the importance of supporting such cases for the user's migration to 0.5.x, we are proposing a safety flag (disabled by default) which will allow this old behavior.", "createdAt": "2020-05-16T01:47:51Z", "url": "https://github.com/apache/hudi/pull/1633", "merged": true, "mergeCommit": {"oid": "e6f3bf10cf2c62a1008b82765abdcd33cfd64c67"}, "closed": true, "closedAt": "2020-05-19T02:27:25Z", "author": {"login": "bvaradar"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchzjEpgFqTQxMzA2Mzk0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcip-XUAFqTQxNDAzNjAxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDYzOTQ3", "url": "https://github.com/apache/hudi/pull/1633#pullrequestreview-413063947", "createdAt": "2020-05-16T09:49:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOTo0OTowM1rOGWZa7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOTo0OTowM1rOGWZa7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzODM0OA==", "bodyText": "better to change JavaRDD<HoodieRecord> to JavaRDD<WriteStatus> ?", "url": "https://github.com/apache/hudi/pull/1633#discussion_r426138348", "createdAt": "2020-05-16T09:49:03Z", "author": {"login": "leesf"}, "path": "hudi-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java", "diffHunk": "@@ -988,6 +988,44 @@ public void testRollbackAfterConsistencyCheckFailure() throws Exception {\n     return Pair.of(markerFilePath, result);\n   }\n \n+  @Test\n+  public void testMultiOperationsPerCommit() throws IOException {\n+    HoodieWriteConfig cfg = getConfigBuilder().withAutoCommit(false)\n+        .withAllowUnsafeMultiOperationsPerCommit(true)\n+        .build();\n+    HoodieWriteClient client = getHoodieWriteClient(cfg);\n+    String firstInstantTime = \"0000\";\n+    client.startCommitWithTime(firstInstantTime);\n+    int numRecords = 200;\n+    JavaRDD<HoodieRecord> writeRecords = jsc.parallelize(dataGen.generateInserts(firstInstantTime, numRecords), 1);\n+    JavaRDD<WriteStatus> result = client.bulkInsert(writeRecords, firstInstantTime);\n+    assertTrue(client.commit(firstInstantTime, result), \"Commit should succeed\");\n+    assertTrue(HoodieTestUtils.doesCommitExist(basePath, firstInstantTime),\n+        \"After explicit commit, commit file should be created\");\n+\n+    // Check the entire dataset has all records still\n+    String[] fullPartitionPaths = new String[dataGen.getPartitionPaths().length];\n+    for (int i = 0; i < fullPartitionPaths.length; i++) {\n+      fullPartitionPaths[i] = String.format(\"%s/%s/*\", basePath, dataGen.getPartitionPaths()[i]);\n+    }\n+    assertEquals(numRecords,\n+        HoodieClientTestUtils.read(jsc, basePath, sqlContext, fs, fullPartitionPaths).count(),\n+        \"Must contain \" + numRecords + \" records\");\n+\n+    String nextInstantTime = \"0001\";\n+    client.startCommitWithTime(nextInstantTime);\n+    JavaRDD<HoodieRecord> updateRecords = jsc.parallelize(dataGen.generateUpdates(nextInstantTime, numRecords), 1);\n+    JavaRDD<HoodieRecord> insertRecords = jsc.parallelize(dataGen.generateInserts(nextInstantTime, numRecords), 1);\n+    JavaRDD<HoodieRecord> inserts = client.bulkInsert(insertRecords, nextInstantTime);\n+    JavaRDD<HoodieRecord> upserts = client.upsert(updateRecords, nextInstantTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDY0MTE1", "url": "https://github.com/apache/hudi/pull/1633#pullrequestreview-413064115", "createdAt": "2020-05-16T09:52:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOTo1MjoxOVrOGWZbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOTo1MjoxOVrOGWZbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzODU1Mg==", "bodyText": "can be removed?", "url": "https://github.com/apache/hudi/pull/1633#discussion_r426138552", "createdAt": "2020-05-16T09:52:19Z", "author": {"login": "leesf"}, "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java", "diffHunk": "@@ -322,7 +327,15 @@ private void transitionState(HoodieInstant fromInstant, HoodieInstant toInstant,\n         ValidationUtils.checkArgument(metaClient.getFs().exists(new Path(metaClient.getMetaPath(),\n             fromInstant.getFileName())));\n         // Use Write Once to create Target File\n-        createImmutableFileInPath(new Path(metaClient.getMetaPath(), toInstant.getFileName()), data);\n+        if (allowRedundantTransitions) {\n+          createFileInPath(new Path(metaClient.getMetaPath(), toInstant.getFileName()), data);\n+        } else {\n+          if (allowRedundantTransitions) {\n+            createFileInPath(new Path(metaClient.getMetaPath(), toInstant.getFileName()), data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDIxMDAz", "url": "https://github.com/apache/hudi/pull/1633#pullrequestreview-413421003", "createdAt": "2020-05-18T09:26:23Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToyNjoyM1rOGWu3kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTozMToyNlrOGWvD_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTc0NQ==", "bodyText": "lets not mix underscore and dot notation? :)", "url": "https://github.com/apache/hudi/pull/1633#discussion_r426489745", "createdAt": "2020-05-18T09:26:23Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -99,6 +99,20 @@\n   private static final String MAX_CONSISTENCY_CHECKS_PROP = \"hoodie.consistency.check.max_checks\";\n   private static int DEFAULT_MAX_CONSISTENCY_CHECKS = 7;\n \n+  /**\n+   * HUDI-858 : There are users who had been directly using RDD APIs and have relied on a behavior in 0.4.x to allow\n+   * multiple write operations (upsert/buk-insert/...) to be executed within a single commit.\n+   *\n+   * Given Hudi commit protocol, these are generally unsafe operations and user need to handle failure scenarios. It\n+   * only works with COW table. Hudi 0.5.x had stopped this behavior.\n+   *\n+   * Given the importance of supporting such cases for the user's migration to 0.5.x, we are proposing a safety flag\n+   * (disabled by default) which will allow this old behavior.\n+   */\n+  private static final String ALLOW_UNSAFE_MULTI_OPERATIONS_PER_COMMIT =\n+      \"hoodie.allow.unsafe.multi_operations_per_commit\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5MjU3Ng==", "bodyText": "@n3nash was also thinking about adding one of these.. Let's give these a consistent name.prefix.. _.hoodie.allow.multi.write.on.same.instant .. beginning with underscore can mean (spark also has similar undoced params.. ) its undoc-ed/hidden and to be used with full understanding..", "url": "https://github.com/apache/hudi/pull/1633#discussion_r426492576", "createdAt": "2020-05-18T09:30:50Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -99,6 +99,20 @@\n   private static final String MAX_CONSISTENCY_CHECKS_PROP = \"hoodie.consistency.check.max_checks\";\n   private static int DEFAULT_MAX_CONSISTENCY_CHECKS = 7;\n \n+  /**\n+   * HUDI-858 : There are users who had been directly using RDD APIs and have relied on a behavior in 0.4.x to allow\n+   * multiple write operations (upsert/buk-insert/...) to be executed within a single commit.\n+   *\n+   * Given Hudi commit protocol, these are generally unsafe operations and user need to handle failure scenarios. It\n+   * only works with COW table. Hudi 0.5.x had stopped this behavior.\n+   *\n+   * Given the importance of supporting such cases for the user's migration to 0.5.x, we are proposing a safety flag\n+   * (disabled by default) which will allow this old behavior.\n+   */\n+  private static final String ALLOW_UNSAFE_MULTI_OPERATIONS_PER_COMMIT =\n+      \"hoodie.allow.unsafe.multi_operations_per_commit\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTc0NQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5MjkyNA==", "bodyText": "rename based on property name suggested above?", "url": "https://github.com/apache/hudi/pull/1633#discussion_r426492924", "createdAt": "2020-05-18T09:31:26Z", "author": {"login": "vinothchandar"}, "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -723,6 +741,11 @@ public Builder withEmbeddedTimelineServerEnabled(boolean enabled) {\n       return this;\n     }\n \n+    public Builder withAllowUnsafeMultiOperationsPerCommit(boolean allow) {\n+      props.setProperty(ALLOW_UNSAFE_MULTI_OPERATIONS_PER_COMMIT, String.valueOf(allow));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47cd94ca0f49bdabb005f03ad15cfae976d44527", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/47cd94ca0f49bdabb005f03ad15cfae976d44527", "committedDate": "2020-05-18T16:59:31Z", "message": "[HUDI-858] Allow multiple operations to be executed within a single commit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "47cd94ca0f49bdabb005f03ad15cfae976d44527", "author": {"user": {"login": "bvaradar", "name": "Balaji Varadarajan"}}, "url": "https://github.com/apache/hudi/commit/47cd94ca0f49bdabb005f03ad15cfae976d44527", "committedDate": "2020-05-18T16:59:31Z", "message": "[HUDI-858] Allow multiple operations to be executed within a single commit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MDM2MDE2", "url": "https://github.com/apache/hudi/pull/1633#pullrequestreview-414036016", "createdAt": "2020-05-19T01:13:44Z", "commit": {"oid": "47cd94ca0f49bdabb005f03ad15cfae976d44527"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3135, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}