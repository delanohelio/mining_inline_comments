{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MjI0MDc0", "number": 4098, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNDo0NjoxOVrOFI8iDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNTowMzoyMVrOFI8tHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0OTI0Njg1OnYy", "diffSide": "RIGHT", "path": "core/src/mindustry/entities/comp/BuildingComp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNDo0NjoxOVrOILIy7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNDo1MTowNVrOILI3GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU0OTM1OA==", "bodyText": "This should be an overridable boolean method instead of an instance variable, to be in line with how everything else is implemented.", "url": "https://github.com/Anuken/Mindustry/pull/4098#discussion_r548549358", "createdAt": "2020-12-24T14:46:19Z", "author": {"login": "Anuken"}, "path": "core/src/mindustry/entities/comp/BuildingComp.java", "diffHunk": "@@ -63,6 +63,7 @@\n     transient boolean enabled = true;\n     transient float enabledControlTime;\n     transient String lastAccessed;\n+    transient boolean unloadable = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65fddb2972137b0706c208a3c4fca779329ebdd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1MDQyNA==", "bodyText": "ok, though this was better for performance given how often its called and only for this single purpose atm, I'll get it changed \ud83d\udc4d", "url": "https://github.com/Anuken/Mindustry/pull/4098#discussion_r548550424", "createdAt": "2020-12-24T14:51:05Z", "author": {"login": "Quezler"}, "path": "core/src/mindustry/entities/comp/BuildingComp.java", "diffHunk": "@@ -63,6 +63,7 @@\n     transient boolean enabled = true;\n     transient float enabledControlTime;\n     transient String lastAccessed;\n+    transient boolean unloadable = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU0OTM1OA=="}, "originalCommit": {"oid": "65fddb2972137b0706c208a3c4fca779329ebdd6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0OTI3MzIwOnYy", "diffSide": "RIGHT", "path": "core/src/mindustry/entities/comp/BuildingComp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNTowMTo1MFrOILJA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNTowMTo1MFrOILJA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1Mjk1Mg==", "bodyText": "redundant check inside Unloader.java though, should this just be hardcoded to true or simply remove the block level check in unloader and route it all through this function?", "url": "https://github.com/Anuken/Mindustry/pull/4098#discussion_r548552952", "createdAt": "2020-12-24T15:01:50Z", "author": {"login": "Quezler"}, "path": "core/src/mindustry/entities/comp/BuildingComp.java", "diffHunk": "@@ -384,6 +384,10 @@ public byte version(){\n     //endregion\n     //region handler methods\n \n+    public boolean unloadable(){\n+        return block.unloadable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8336ab07e9e2ee3bf0c6c1924da93358562d365b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0OTI3NTE5OnYy", "diffSide": "RIGHT", "path": "core/src/mindustry/world/blocks/storage/Unloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNTowMzoyMVrOILJCGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNTowMzoyMVrOILJCGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1MzI0Mw==", "bodyText": "press to implement the above comment, not sure if this will break on blocks with no building entity or something?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if(other.interactable(team) && other.block.unloadable && other.unloadable() && other.block.hasItems\n          \n          \n            \n                                if(other.interactable(team) && other.unloadable() && other.block.hasItems", "url": "https://github.com/Anuken/Mindustry/pull/4098#discussion_r548553243", "createdAt": "2020-12-24T15:03:21Z", "author": {"login": "Quezler"}, "path": "core/src/mindustry/world/blocks/storage/Unloader.java", "diffHunk": "@@ -61,7 +61,7 @@ public void updateTile(){\n                     int pos = (offset + i) % proximity.size;\n                     var other = proximity.get(pos);\n \n-                    if(other.interactable(team) && other.block.unloadable && other.block.hasItems\n+                    if(other.interactable(team) && other.block.unloadable && other.unloadable() && other.block.hasItems", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8336ab07e9e2ee3bf0c6c1924da93358562d365b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4530, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}