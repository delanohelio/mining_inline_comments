{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMjMyNTE4", "number": 1495, "title": "Improved ItemModule::take() behavior", "bodyText": "The original take() behavior spams items in whatever order they appear in the items list until each index is depleted, which is problematic when non-specific unloaders are competing against dedicated unloaders for a low-index resources.\nMy modification makes the take() loop persistent so take() will do complete laps around the item list starting from wherever the previous call returned from, never repeating the same item twice in a row unless there is nothing else to return. A significant improvement IMO.\nHow is this an improvement? With the original behavior, if you converge a bunch of belts on a storage block or launcher, want to unload a few belts of specific resources (ex.: copper, lead, silicon and titanium for surge alloy) and pass everything else including overflows along using non-specific unloaders, you are out of luck when the resources you want are at the top of the list since most of those will get swept away by non-specific unloaders. With the rotating take(), non-specific unloaders are equal-opportunity across all available resources, which gives single-resource unloaders that many more chances to unload more of their resources before non-specific unloaders get to them. It also reduces the rate at which items further down the list that may hardly ever get touched by the existing implementation will race toward the storage block's cap. The even drain across all items will help prevent things like mass driver stalls due to receivers filling up with an excess resource that isn't getting cleared.\nIt would be even nicer if dedicated unloaders had priority over non-specific ones (non-specific unloaders don't touch resources with dedicated unloaders unless the dedicated unloaders are overflowing), though that would require a rework beyond my current \"getting the stupid IDE and tool chains to work\" level of familiarity with Java development.\nTo sum it up: trivial change, big impact for people who like mixing belts and sorting them out with unloaders.", "createdAt": "2020-02-03T10:14:58Z", "url": "https://github.com/Anuken/Mindustry/pull/1495", "merged": true, "mergeCommit": {"oid": "ea6490cf9f17073147b0f4caacf8520fe9b1ed3f"}, "closed": true, "closedAt": "2020-02-04T01:27:26Z", "author": {"login": "InvalidError404"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAqHY9AH2gAyMzcwMjMyNTE4OjRkNGE2ZDNkMGM5YTg4N2RkMWIzYzZiMWY0YzNmMjBjMzFjOTYyZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcA2_eKgH2gAyMzcwMjMyNTE4OjBiNGJkMmRkZWM0MzY2YjMwOTgxZjkxMDcxZjk3YmZlMWNmYTE3ODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4d4a6d3d0c9a887dd1b3c6b1f4c3f20c31c962e7", "author": {"user": {"login": "InvalidError404", "name": null}}, "url": "https://github.com/Anuken/Mindustry/commit/4d4a6d3d0c9a887dd1b3c6b1f4c3f20c31c962e7", "committedDate": "2020-02-03T10:10:10Z", "message": "Improved ItemModule::take() behavior\n\nThe original take() behavior spams items in whatever order they appear in the items list until each index is depleted, which is problematic when non-specific unloaders are competing against dedicated unloaders for a low-index resources.\r\n\r\nMy modification makes the take() loop persistent so take() will do complete laps around the item list starting from wherever the previous call returned from, never repeating the same item twice in a row unless there is nothing else to return. A significant improvement IMO.\r\n\r\nHow is this an improvement? With the original behavior, if you converge a bunch of belts on a storage block or launcher, want to unload a few belts of specific resources (ex.: copper, lead, silicon and titanium for surge alloy) and pass everything else including overflows along using non-specific unloaders, you are out of luck when the resources you want are at the top of the list since most of those will get swept away by non-specific unloaders. With the rotating take(), non-specific unloaders are equal-opportunity across all available resources, which gives single-resource unloaders that many more chances to unload more of their resources before non-specific unloaders get to them. It also reduces the rate at which items further down the list that may hardly ever get touched by the existing implementation will race toward the storage block's cap. The even drain across all items will help prevent things like mass driver stalls due to receivers filling up with an excess resource that isn't getting cleared.\r\n\r\nIt would be even nicer if dedicated unloaders had priority over non-specific ones (non-specific unloaders don't touch resources with dedicated unloaders unless the dedicated unloaders are overflowing), though that would require a rework beyond my current \"getting the stupid IDE and tool chains to work\" level of familiarity with Java development.\r\n\r\nTo sum it up: trivial change, big impact for people who like mixing belts and sorting them out with unloaders."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTc5Mjk4", "url": "https://github.com/Anuken/Mindustry/pull/1495#pullrequestreview-352179298", "createdAt": "2020-02-03T11:13:04Z", "commit": {"oid": "4d4a6d3d0c9a887dd1b3c6b1f4c3f20c31c962e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToxMzowNFrOFkt7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToxMzowNFrOFkt7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NTUyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \t\t\t// save the next position so the next call to take() can resume from there.\n          \n          \n            \n                \t\t// save the next position so the next call to take() can resume from there.", "url": "https://github.com/Anuken/Mindustry/pull/1495#discussion_r374045523", "createdAt": "2020-02-03T11:13:04Z", "author": {"login": "Quezler"}, "path": "core/src/mindustry/world/modules/ItemModule.java", "diffHunk": "@@ -66,11 +66,28 @@ public int total(){\n         return total;\n     }\n \n+    // Making the take() loop persistent so it does not return the same item twice in a row unless there is nothing else to return.\n+    protected int takeRotation;\n+\n     public Item take(){\n-        for(int i = 0; i < items.length; i++){\n+    \t// 0-to-length loop broken in two parts. First resume the loop where it previously left off.\n+        for(int i = takeRotation; i < items.length; i++){\n+            if(items[i] > 0){\n+                items[i]--;\n+                total--;\n+    \t\t\t// save the next position so the next call to take() can resume from there.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4a6d3d0c9a887dd1b3c6b1f4c3f20c31c962e7"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTc5NDIx", "url": "https://github.com/Anuken/Mindustry/pull/1495#pullrequestreview-352179421", "createdAt": "2020-02-03T11:13:18Z", "commit": {"oid": "4d4a6d3d0c9a887dd1b3c6b1f4c3f20c31c962e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToxMzoxOFrOFkt7uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToxMzoxOFrOFkt7uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NTYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \t\t\t// save the next position so the next call to take() can resume from there.\n          \n          \n            \n                \t\t// save the next position so the next call to take() can resume from there.", "url": "https://github.com/Anuken/Mindustry/pull/1495#discussion_r374045625", "createdAt": "2020-02-03T11:13:18Z", "author": {"login": "Quezler"}, "path": "core/src/mindustry/world/modules/ItemModule.java", "diffHunk": "@@ -66,11 +66,28 @@ public int total(){\n         return total;\n     }\n \n+    // Making the take() loop persistent so it does not return the same item twice in a row unless there is nothing else to return.\n+    protected int takeRotation;\n+\n     public Item take(){\n-        for(int i = 0; i < items.length; i++){\n+    \t// 0-to-length loop broken in two parts. First resume the loop where it previously left off.\n+        for(int i = takeRotation; i < items.length; i++){\n+            if(items[i] > 0){\n+                items[i]--;\n+                total--;\n+    \t\t\t// save the next position so the next call to take() can resume from there.\n+                takeRotation = (i + 1) % items.length;\n+                return content.item(i);\n+            }\n+        }\n+\n+        // Then start a new lap which ends where the call started from if empty.\n+        for(int i = 0; i < takeRotation; i++){\n             if(items[i] > 0){\n                 items[i]--;\n                 total--;\n+    \t\t\t// save the next position so the next call to take() can resume from there.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4a6d3d0c9a887dd1b3c6b1f4c3f20c31c962e7"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489bf304e44290fded1f81810846cabd5bb2ffb4", "author": {"user": {"login": "InvalidError404", "name": null}}, "url": "https://github.com/Anuken/Mindustry/commit/489bf304e44290fded1f81810846cabd5bb2ffb4", "committedDate": "2020-02-03T11:18:30Z", "message": "Update core/src/mindustry/world/modules/ItemModule.java\n\nCo-Authored-By: Patrick 'Quezler' Mounier <Quezler@me.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5da52696d7e734ebb05fdc5d10470277d5d5e820", "author": {"user": {"login": "InvalidError404", "name": null}}, "url": "https://github.com/Anuken/Mindustry/commit/5da52696d7e734ebb05fdc5d10470277d5d5e820", "committedDate": "2020-02-03T11:18:40Z", "message": "Update core/src/mindustry/world/modules/ItemModule.java\n\nCo-Authored-By: Patrick 'Quezler' Mounier <Quezler@me.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzQ0Mzc2", "url": "https://github.com/Anuken/Mindustry/pull/1495#pullrequestreview-352344376", "createdAt": "2020-02-03T15:34:38Z", "commit": {"oid": "5da52696d7e734ebb05fdc5d10470277d5d5e820"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozNDozOFrOFk1mOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozNDozOFrOFk1mOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MTE5Mw==", "bodyText": "This method can be written as a single loop.\nfor(int i = 0; i < items.length; i++){\n    int index = (i + takeRotation) % items.length;\n    if(items[index] > 0){\n        items[index] --;\n        total --;\n        takeRotation = (index + 1) % items.length;\n        return content.item(i);\n    }\n}", "url": "https://github.com/Anuken/Mindustry/pull/1495#discussion_r374171193", "createdAt": "2020-02-03T15:34:38Z", "author": {"login": "Anuken"}, "path": "core/src/mindustry/world/modules/ItemModule.java", "diffHunk": "@@ -66,11 +66,28 @@ public int total(){\n         return total;\n     }\n \n+    // Making the take() loop persistent so it does not return the same item twice in a row unless there is nothing else to return.\n+    protected int takeRotation;\n+\n     public Item take(){\n-        for(int i = 0; i < items.length; i++){\n+    \t// 0-to-length loop broken in two parts. First resume the loop where it previously left off.\n+        for(int i = takeRotation; i < items.length; i++){\n+            if(items[i] > 0){\n+                items[i]--;\n+                total--;\n+    \t\t// save the next position so the next call to take() can resume from there.\n+                takeRotation = (i + 1) % items.length;\n+                return content.item(i);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da52696d7e734ebb05fdc5d10470277d5d5e820"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzQ0NTYy", "url": "https://github.com/Anuken/Mindustry/pull/1495#pullrequestreview-352344562", "createdAt": "2020-02-03T15:34:52Z", "commit": {"oid": "5da52696d7e734ebb05fdc5d10470277d5d5e820"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozNDo1MlrOFk1myg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozNDo1MlrOFk1myg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MTMzOA==", "bodyText": "Instance variables should always be declared at the top of a class.", "url": "https://github.com/Anuken/Mindustry/pull/1495#discussion_r374171338", "createdAt": "2020-02-03T15:34:52Z", "author": {"login": "Anuken"}, "path": "core/src/mindustry/world/modules/ItemModule.java", "diffHunk": "@@ -66,11 +66,28 @@ public int total(){\n         return total;\n     }\n \n+    // Making the take() loop persistent so it does not return the same item twice in a row unless there is nothing else to return.\n+    protected int takeRotation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da52696d7e734ebb05fdc5d10470277d5d5e820"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455ce98a869c36fc9e77c6cfadf343e5612e64d4", "author": {"user": {"login": "InvalidError404", "name": null}}, "url": "https://github.com/Anuken/Mindustry/commit/455ce98a869c36fc9e77c6cfadf343e5612e64d4", "committedDate": "2020-02-03T20:26:49Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b4bd2ddec4366b30981f91071f97bfe1cfa1787", "author": {"user": {"login": "InvalidError404", "name": null}}, "url": "https://github.com/Anuken/Mindustry/commit/0b4bd2ddec4366b30981f91071f97bfe1cfa1787", "committedDate": "2020-02-04T01:10:17Z", "message": "Anuken's take() rotator."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2340, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}