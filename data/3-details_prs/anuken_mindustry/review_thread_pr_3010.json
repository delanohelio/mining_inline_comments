{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NTA0ODQ5", "number": 3010, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzowNjoxMVrOEu-6vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxODoxNjo0NlrOEu_TQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NzAwNzk4OnYy", "diffSide": "RIGHT", "path": "core/src/mindustry/input/InputHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzowNjoxMVrOHjsQrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzowNjoxMVrOHjsQrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4NzM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (u instanceof Payloadc p){\n          \n          \n            \n                            if(u instanceof Payloadc p){", "url": "https://github.com/Anuken/Mindustry/pull/3010#discussion_r507187375", "createdAt": "2020-10-18T17:06:11Z", "author": {"login": "Anuken"}, "path": "core/src/mindustry/input/InputHandler.java", "diffHunk": "@@ -241,6 +241,11 @@ public static void payloadDropped(Unit unit, float x, float y){\n             pay.set(x, y);\n             pay.dropLastPayload();\n             pay.set(prevx, prevy);\n+            pay.controlling().each(u -> {\n+                if (u instanceof Payloadc p){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8625ef09ccad287758bac212c5b4de67fd263378"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NzAwODQ3OnYy", "diffSide": "RIGHT", "path": "core/src/mindustry/input/InputHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzowNjo0M1rOHjsQ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzozMDo0OFrOHjsbPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4NzQzNw==", "bodyText": "This won't sync properly. You must use Call.payloadDropped(...) so positions are correct clientside.", "url": "https://github.com/Anuken/Mindustry/pull/3010#discussion_r507187437", "createdAt": "2020-10-18T17:06:43Z", "author": {"login": "Anuken"}, "path": "core/src/mindustry/input/InputHandler.java", "diffHunk": "@@ -241,6 +241,11 @@ public static void payloadDropped(Unit unit, float x, float y){\n             pay.set(x, y);\n             pay.dropLastPayload();\n             pay.set(prevx, prevy);\n+            pay.controlling().each(u -> {\n+                if (u instanceof Payloadc p){\n+                    p.dropLastPayload();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8625ef09ccad287758bac212c5b4de67fd263378"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE5MDA3OA==", "bodyText": "Fixed. 12e35b6", "url": "https://github.com/Anuken/Mindustry/pull/3010#discussion_r507190078", "createdAt": "2020-10-18T17:30:48Z", "author": {"login": "summetdev"}, "path": "core/src/mindustry/input/InputHandler.java", "diffHunk": "@@ -241,6 +241,11 @@ public static void payloadDropped(Unit unit, float x, float y){\n             pay.set(x, y);\n             pay.dropLastPayload();\n             pay.set(prevx, prevy);\n+            pay.controlling().each(u -> {\n+                if (u instanceof Payloadc p){\n+                    p.dropLastPayload();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4NzQzNw=="}, "originalCommit": {"oid": "8625ef09ccad287758bac212c5b4de67fd263378"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NzA3MDc1OnYy", "diffSide": "RIGHT", "path": "core/src/mindustry/input/InputHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxODoxNjo0NlrOHjsvJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxODoyNzoxMFrOHjszjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE5NTE3NQ==", "bodyText": "I know the instanceof check technically isn't necessary, but by omitting it you'll be sending extra payload drop packets to clients that won't do anything with it. It's best to keep the check there.", "url": "https://github.com/Anuken/Mindustry/pull/3010#discussion_r507195175", "createdAt": "2020-10-18T18:16:46Z", "author": {"login": "Anuken"}, "path": "core/src/mindustry/input/InputHandler.java", "diffHunk": "@@ -241,11 +241,7 @@ public static void payloadDropped(Unit unit, float x, float y){\n             pay.set(x, y);\n             pay.dropLastPayload();\n             pay.set(prevx, prevy);\n-            pay.controlling().each(u -> {\n-                if(u instanceof Payloadc p){\n-                    p.dropLastPayload();\n-                }\n-            });\n+            pay.controlling().each(u -> Call.payloadDropped(u, u.x, u.y));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96996f8079547b143079d79c5b41e0974a0395de"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE5NjMwMA==", "bodyText": "Fixed. 801eca5", "url": "https://github.com/Anuken/Mindustry/pull/3010#discussion_r507196300", "createdAt": "2020-10-18T18:27:10Z", "author": {"login": "summetdev"}, "path": "core/src/mindustry/input/InputHandler.java", "diffHunk": "@@ -241,11 +241,7 @@ public static void payloadDropped(Unit unit, float x, float y){\n             pay.set(x, y);\n             pay.dropLastPayload();\n             pay.set(prevx, prevy);\n-            pay.controlling().each(u -> {\n-                if(u instanceof Payloadc p){\n-                    p.dropLastPayload();\n-                }\n-            });\n+            pay.controlling().each(u -> Call.payloadDropped(u, u.x, u.y));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE5NTE3NQ=="}, "originalCommit": {"oid": "96996f8079547b143079d79c5b41e0974a0395de"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4500, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}