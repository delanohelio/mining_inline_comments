{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDU2NjIy", "number": 7846, "title": "Set credentials charset of authentication converter", "bodyText": "Fix #7835 including unit tests", "createdAt": "2020-01-18T19:26:06Z", "url": "https://github.com/spring-projects/spring-security/pull/7846", "merged": true, "mergeCommit": {"oid": "e62fb755e88c41fe5c541dac3566bc1cad8e9bd3"}, "closed": true, "closedAt": "2020-01-23T14:34:36Z", "author": {"login": "peterkeller"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7ocdegH2gAyMzY0NDU2NjIyOjdmOWE1MGU1NDEwNWE1MjkyZGM1ZTE2OTUwNDA2Y2RmYmIyYjZkNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb86T6rAH2gAyMzY0NDU2NjIyOmY1M2Y0ZTA2NjhiOTAzNGJmMzg3NDFiZGE3YjdjOWJmYTg5OTcwOWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "author": {"user": {"login": "peterkeller", "name": "Peter Keller"}}, "url": "https://github.com/spring-projects/spring-security/commit/7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "committedDate": "2020-01-18T19:23:45Z", "message": "Set credentials charset of authentication converter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTYyNTE5", "url": "https://github.com/spring-projects/spring-security/pull/7846#pullrequestreview-346562519", "createdAt": "2020-01-22T12:51:31Z", "commit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo1MTozMVrOFga_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzowMjowM1rOFgbRJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDg5Mw==", "bodyText": "You can use StandardCharsets.UTF_8 here instead of the String \"UTF-8\"", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369540893", "createdAt": "2020-01-22T12:51:31Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MTE5OA==", "bodyText": "You can use StandardCharsets.ISO_8859_1 here instead of the String \"ISO-8859-1\"", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369541198", "createdAt": "2020-01-22T12:52:03Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));\n+\t\trequest.setServletPath(\"/some_file.html\");\n+\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\t// Test\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();\n+\t\tFilterChain chain = mock(FilterChain.class);\n+\n+\t\tfilter.doFilter(request, response, chain);\n+\n+\t\tassertThat(response.getStatus()).isEqualTo(200);\n+\t\tverify(chain).doFilter(any(ServletRequest.class), any(ServletResponse.class));\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(\"rod\");\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getCredentials()).isEqualTo(\"\u00e4\u00f6\u00fc\");\n+\t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Iso_8859_1() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\t\tfilter.setCredentialsCharset(\"ISO-8859-1\");\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"ISO-8859-1\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTUwOA==", "bodyText": "Although this test name follows the same pattern as other tests in this class, we would like any new tests to follow the convention methodWhenConditionThenResult.\nA possible name could be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n          \n          \n            \n            \tpublic void doFilterWhenTokenAndFilterCharsetMatchThenAuthenticated() throws Exception {", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369545508", "createdAt": "2020-01-22T13:02:03Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "author": {"user": {"login": "peterkeller", "name": "Peter Keller"}}, "url": "https://github.com/spring-projects/spring-security/commit/f53f4e0668b9034bf38741bda7b7c9bfa899709e", "committedDate": "2020-01-22T18:46:38Z", "message": "Polish unit tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 5, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}