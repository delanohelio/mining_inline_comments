{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyOTg1NjM0", "number": 9265, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozNDo1NFrOFBqGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyNzowM1rOFFdalw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjgyNzI3OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozNDo1NFrOIAbV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozNDo1NFrOIAbV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxODg3Ng==", "bodyText": "This will be in version 5.5, since that is our next minor release.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537318876", "createdAt": "2020-12-07T08:34:54Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,34 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(String)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjkyMDk5OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo1Njo1OVrOIAcL5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo1Njo1OVrOIAcL5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzMjcwOQ==", "bodyText": "In order to facilitate the lambda DSL we will need a method that accepts a Customizer, permissionsPolicy(Customizer<PermissionsPolicyConfig> permissionsPolicyConfigCustomizer(). See HeadersConfigurer<H> referrerPolicy(Customizer<ReferrerPolicyConfig> referrerPolicyCustomizer) as an example.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537332709", "createdAt": "2020-12-07T08:56:59Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,34 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(String)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.4\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(String policyDirectives) {\n+\t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter(policyDirectives);\n+\t\treturn this.permissionsPolicy;\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjk0MDMyOnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowMToyNVrOIAcXHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowMToyNVrOIAcXHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzNTU4Mg==", "bodyText": "Rather than accepting the policyDirectives as a parameter here, we should make this part of the PermissionsPolicyConfig.\nThis means the configuration will look like this:\nhttp\n\t.headers()\n\t\t.permissionsPolicy()\n\t\t\t.policyDirectives(\"geolocation 'self'\");\n\nand it will be compatible with the lambda DSL.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537335582", "createdAt": "2020-12-07T09:01:25Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,34 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(String)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.4\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(String policyDirectives) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjk1MjQ4OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowNDoxNlrOIAcd9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowNDoxNlrOIAcd9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzNzMzMw==", "bodyText": "Similar to the feedback in HeadersConfigurer, this needs to be configurable via the lambda DSL.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537337333", "createdAt": "2020-12-07T09:04:16Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2402,6 +2406,15 @@ public FeaturePolicySpec featurePolicy(String policyDirectives) {\n \t\t\treturn new FeaturePolicySpec(policyDirectives);\n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t * @param policyDirectives the policy directive(s)\n+\t\t * @return the {@link PermissionsPolicySpec} to configure\n+\t\t */\n+\t\tpublic PermissionsPolicySpec permissionsPolicy(String policyDirectives) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjk1ODgyOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowNTozNlrOIAchcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowNTozNlrOIAchcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzODIyNw==", "bodyText": "The copyright should be up to 2020.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537338227", "createdAt": "2020-12-07T09:05:36Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2002-2019 the original author or authors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTAwMzg4OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjowNzoyM1rOIBmERQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjowNzoyM1rOIBmERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0MzE3Mw==", "bodyText": "We still need a PermissionsPolicyConfig permissionsPolicy() method with no parameters for the users that do not use the lambda DSL.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538543173", "createdAt": "2020-12-08T16:07:23Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,35 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(Customizer)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.5\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(Customizer<PermissionsPolicyConfig> permissionsPolicyCustomizer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTAxNzAwOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjowOTowOVrOIBmMWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjowOTowOVrOIBmMWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0NTI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n          \n          \n            \n            \t * @throws IllegalArgumentException if policy is {@code null} or empty", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538545243", "createdAt": "2020-12-08T16:09:09Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policy directives,\n+ * each responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");\n+\t}\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter} with supplied\n+\t * security policy directive(s).\n+\t * @param policy the security policy directive(s)\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTA0OTY0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxMzozNFrOIBmg0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxMzozNFrOIBmg0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MDQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn getClass().getName() + \" [policyDirectives=\" + this.policy + \"]\";\n          \n          \n            \n            \t\treturn getClass().getName() + \" [policy=\" + this.policy + \"]\";", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538550480", "createdAt": "2020-12-08T16:13:34Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policy directives,\n+ * each responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");\n+\t}\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter} with supplied\n+\t * security policy directive(s).\n+\t * @param policy the security policy directive(s)\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter(String policy) {\n+\t\tsetPolicy(policy);\n+\t}\n+\n+\t/**\n+\t * Sets the policy to be used in the response header.\n+\t * @param policy a permissions policy\n+\t * @throws IllegalArgumentException if policy is null\n+\t */\n+\tpublic void setPolicy(String policy) {\n+\t\tAssert.notNull(policy, \"policy can not be null\");\n+\t\tthis.policy = policy;\n+\t}\n+\n+\t@Override\n+\tpublic void writeHeaders(HttpServletRequest request, HttpServletResponse response) {\n+\t\tif (!response.containsHeader(PERMISSIONS_POLICY_HEADER)) {\n+\t\t\tresponse.setHeader(PERMISSIONS_POLICY_HEADER, this.policy);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn getClass().getName() + \" [policyDirectives=\" + this.policy + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTA1MjQxOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/server/header/PermissionsPolicyServerHttpHeadersWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxMzo1MlrOIBmicg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxMzo1MlrOIBmicg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MDg5OA==", "bodyText": "This should go up to 2020", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538550898", "createdAt": "2020-12-08T16:13:52Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/server/header/PermissionsPolicyServerHttpHeadersWriter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2002-2018 the original author or authors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTA3Mjk3OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNjo1NVrOIBmviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNjo1NVrOIBmviQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1NDI0OQ==", "bodyText": "We should keep the parameter names consistent across this class and PermissionsPolicyConfig. We can name both of them either \"permissionsPolicy\" or \"policy\".", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538554249", "createdAt": "2020-12-08T16:16:55Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2677,6 +2701,42 @@ public HeaderSpec and() {\n \n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t *\n+\t\t * @since 5.5\n+\t\t * @see #permissionsPolicy(String)\n+\t\t */\n+\t\tpublic final class PermissionsPolicySpec {\n+\n+\t\t\tprivate PermissionsPolicySpec() {\n+\t\t\t}\n+\n+\t\t\tprivate PermissionsPolicySpec(String permissionsPolicy) {\n+\t\t\t\tHeaderSpec.this.permissionsPolicy.setPolicy(permissionsPolicy);\n+\t\t\t}\n+\n+\t\t\t/**\n+\t\t\t * Sets the policy to be used in the response header.\n+\t\t\t * @param permissionsPolicy a referrer policy\n+\t\t\t * @return the {@link PermissionsPolicySpec} to continue configuring\n+\t\t\t */\n+\t\t\tpublic PermissionsPolicySpec policy(String permissionsPolicy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTA3OTM1OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNzo0NlrOIBmziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNzo0NlrOIBmziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1NTI3NQ==", "bodyText": "This doesn't need to accept any parameters since \"permissionsPolicy\" is configurable in PermissionsPolicySpec.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538555275", "createdAt": "2020-12-08T16:17:46Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2395,13 +2399,33 @@ public HeaderSpec contentSecurityPolicy(Customizer<ContentSecurityPolicySpec> co\n \n \t\t/**\n \t\t * Configures {@code Feature-Policy} response header.\n-\t\t * @param policyDirectives the policy directive(s)\n+\t\t * @param policyDirectives the policy\n \t\t * @return the {@link FeaturePolicySpec} to configure\n \t\t */\n \t\tpublic FeaturePolicySpec featurePolicy(String policyDirectives) {\n \t\t\treturn new FeaturePolicySpec(policyDirectives);\n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t * @param permissionsPolicy the policy\n+\t\t * @return the {@link PermissionsPolicySpec} to configure\n+\t\t */\n+\t\tpublic PermissionsPolicySpec permissionsPolicy(String permissionsPolicy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTEwMzM5OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriterTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoyMToxN1rOIBnCpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoyMToxN1rOIBnCpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1OTE0Mw==", "bodyText": "This should go up to 2020.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538559143", "createdAt": "2020-12-08T16:21:17Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriterTests.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2002-2019 the original author or authors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjQ5MjAwOnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToyMzoyOVrOIDOruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToyMzoyOVrOIDOruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI1NzIxMQ==", "bodyText": "I believe this constructor is unused.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540257211", "createdAt": "2020-12-10T15:23:29Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2677,6 +2700,42 @@ public HeaderSpec and() {\n \n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t *\n+\t\t * @since 5.5\n+\t\t * @see #permissionsPolicy()\n+\t\t */\n+\t\tpublic final class PermissionsPolicySpec {\n+\n+\t\t\tprivate PermissionsPolicySpec() {\n+\t\t\t}\n+\n+\t\t\tprivate PermissionsPolicySpec(String permissionsPolicy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjUyMDM3OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToyODozNVrOIDO8mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozMzowNFrOIDSNnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ==", "bodyText": "I don't think this should set the policy to \"\".\nWe want to ensure that users are configuring the policy if they are using the PermissionsPolicyHeaderWriter.\nThis will allow them to create a PermissionsPolicyHeaderWriter without specifying the policy.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540261529", "createdAt": "2020-12-10T15:28:35Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policies, each\n+ * responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NTI4OQ==", "bodyText": "Ok so we should have two ways to set the Policy ? With String and with Lambda ?", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540275289", "createdAt": "2020-12-10T15:45:02Z", "author": {"login": "kris2kris"}, "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policies, each\n+ * responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3ODkzMw==", "bodyText": "Yes\nhttp\n\t.headers()\n\t\t.permissionsPolicy()\n\t\t\t.policy(\"geolocation 'self'\");\n\nand\nhttp\n\t.headers(headers -> headers\n\t\t.permissionsPolicy(permissions -> permissions\n\t\t\t.policy(\"geolocation 'self'\")\n\t\t)\n\t);", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540278933", "createdAt": "2020-12-10T15:49:28Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policies, each\n+ * responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNTAzNw==", "bodyText": "Ok, I change constructor and add some tests to be sure everything is ok", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540315037", "createdAt": "2020-12-10T16:33:04Z", "author": {"login": "kris2kris"}, "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policies, each\n+ * responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjU0NDczOnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoyODo1OFrOIDypqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMToyMjoxMVrOID0j4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NjUwNA==", "bodyText": "I think I confused you with my previous comment. This was correct before.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic PermissionsPolicyConfig permissionsPolicy(String policy) {\n          \n          \n            \n            \t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter(policy);\n          \n          \n            \n            \t\treturn this.permissionsPolicy;\n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic PermissionsPolicyConfig permissionsPolicy() {\n          \n          \n            \n            \t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter();\n          \n          \n            \n            \t\treturn this.permissionsPolicy;\n          \n          \n            \n            \t}", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540846504", "createdAt": "2020-12-11T10:28:58Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,58 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(Customizer)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\">Permissions\n+\t * Policy</a>.\n+\t * </p>\n+\t *\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which\n+\t * support the writing of the header as detailed in the W3C Technical Report:\n+\t * </p>\n+\t * <ul>\n+\t * <li>Permissions-Policy</li>\n+\t * </ul>\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @since 5.5\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(String policy) {\n+\t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter(policy);\n+\t\treturn this.permissionsPolicy;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg3Nzc5Mg==", "bodyText": "Oh yes, it's my bad... I revert the change and update the tests", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540877792", "createdAt": "2020-12-11T11:22:11Z", "author": {"login": "kris2kris"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,58 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(Customizer)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\">Permissions\n+\t * Policy</a>.\n+\t * </p>\n+\t *\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which\n+\t * support the writing of the header as detailed in the W3C Technical Report:\n+\t * </p>\n+\t * <ul>\n+\t * <li>Permissions-Policy</li>\n+\t * </ul>\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @since 5.5\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(String policy) {\n+\t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter(policy);\n+\t\treturn this.permissionsPolicy;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NjUwNA=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjY5MTQzOnYy", "diffSide": "RIGHT", "path": "config/src/main/kotlin/org/springframework/security/config/web/server/ServerPermissionsPolicyDsl.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyNzowM1rOIF-pDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyNzowM1rOIF-pDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MDExMQ==", "bodyText": "nit: it looks like an unused import.", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r543140111", "createdAt": "2020-12-15T08:27:03Z", "author": {"login": "php-coder"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/server/ServerPermissionsPolicyDsl.kt", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.config.web.server\n+\n+import org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f832fa7d2f47775b99522efda14fb61f20e8df45"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1722, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}