{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NDUwMjM5", "number": 9278, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMDoxNFrOFECcFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjoxM1rOFECfyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzc4NTgzOnYy", "diffSide": "LEFT", "path": "config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMDoxNFrOID9zaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1NzoxMlrOID-_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyOTIyNA==", "bodyText": "Please move any changes that are not directly related to this issue to a different pull request or a different commit within this pull request.", "url": "https://github.com/spring-projects/spring-security/pull/9278#discussion_r541029224", "createdAt": "2020-12-11T15:30:14Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java", "diffHunk": "@@ -83,7 +87,7 @@ public C anyRequest() {\n \t * @return the object that is chained after creating the {@link RequestMatcher}\n \t */\n \tpublic C antMatchers(HttpMethod method) {\n-\t\treturn antMatchers(method, new String[] { \"/**\" });", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0ODc2OQ==", "bodyText": "Okay -- I'll split this (and the change from a private static valueOf method to HttpMethod::resolve) into a separate commit", "url": "https://github.com/spring-projects/spring-security/pull/9278#discussion_r541048769", "createdAt": "2020-12-11T15:57:12Z", "author": {"login": "nmck257"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java", "diffHunk": "@@ -83,7 +87,7 @@ public C anyRequest() {\n \t * @return the object that is chained after creating the {@link RequestMatcher}\n \t */\n \tpublic C antMatchers(HttpMethod method) {\n-\t\treturn antMatchers(method, new String[] { \"/**\" });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyOTIyNA=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzc5NTMwOnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjoxM1rOID94_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjoxM1rOID94_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMDY1Mg==", "bodyText": "Please use a for-loop instead of a Stream.\nThe GC overhead of creating additional objects (including intermediate objects) can cause significant decrease in performance.\nSee #7154 for more details.", "url": "https://github.com/spring-projects/spring-security/pull/9278#discussion_r541030652", "createdAt": "2020-12-11T15:32:13Z", "author": {"login": "eleftherias"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java", "diffHunk": "@@ -206,6 +210,35 @@ public C regexMatchers(String... regexPatterns) {\n \t\treturn chainRequestMatchers(RequestMatchers.regexMatchers(regexPatterns));\n \t}\n \n+\t/**\n+\t * Maps a {@link List} of\n+\t * {@link org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher}\n+\t * instances.\n+\t * @param method the {@link HttpMethod} to use or {@code null} for any\n+\t * {@link HttpMethod}.\n+\t * @param dispatcherTypes the dispatcher types to match against\n+\t * @return the object that is chained after creating the {@link RequestMatcher}\n+\t */\n+\tpublic C dispatcherTypeMatchers(HttpMethod method, DispatcherType... dispatcherTypes) {\n+\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure dispatcherTypeMatchers after anyRequest\");\n+\t\treturn chainRequestMatchers(Arrays.stream(dispatcherTypes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1725, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}