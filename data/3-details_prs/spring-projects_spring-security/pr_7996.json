{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjQ1ODM0", "number": 7996, "title": "Instantiate exceptions lazily", "bodyText": "Add lazy Exception instantiation and reduce amount of\nreactor operators to reduce allocations\nFixes gh-7995", "createdAt": "2020-02-19T16:05:25Z", "url": "https://github.com/spring-projects/spring-security/pull/7996", "merged": true, "mergeCommit": {"oid": "9d66f2ccce0203ae04c48dbf00942d044762a031"}, "closed": true, "closedAt": "2020-02-27T16:29:45Z", "author": {"login": "robotmrv"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF5TejAFqTM2MTI1MTI1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGdJ1agBqjMwNTk5OTI1ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjUxMjUz", "url": "https://github.com/spring-projects/spring-security/pull/7996#pullrequestreview-361251253", "createdAt": "2020-02-19T16:41:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0MTozM1rOFrutyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0MTozM1rOFrutyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5ODQ3Mg==", "bodyText": "if assume that predicate is stateless (as far as result is cached indefinitely) this could be rewritten to\n@Override\npublic Mono<ReactiveAuthenticationManager> resolve(String issuer) {\n\tif (!this.trustedIssuer.test(issuer)) {\n\t\treturn Mono.empty();\n\t}\n\treturn this.authenticationManagers.computeIfAbsent(issuer, k ->\n\t\t\tMono.<ReactiveAuthenticationManager>fromCallable(() ->\n\t\t\t\t\tnew JwtReactiveAuthenticationManager(ReactiveJwtDecoders.fromIssuerLocation(k))\n\t\t\t)\n\t\t\t.subscribeOn(Schedulers.boundedElastic())\n\t\t\t.cache());\n}\nthis will reduce 3 operators and allocations", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r381398472", "createdAt": "2020-02-19T16:41:33Z", "author": {"login": "robotmrv"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -166,7 +167,7 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \t\t\t\t\t.filter(this.trustedIssuer)\n \t\t\t\t\t.flatMap(iss ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDg2NTg1", "url": "https://github.com/spring-projects/spring-security/pull/7996#pullrequestreview-361486585", "createdAt": "2020-02-19T22:29:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoyOTozN1rOFr6B1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoyOTozN1rOFr6B1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA==", "bodyText": "original exception is not passed as cause. Is it intentionally?", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r381583830", "createdAt": "2020-02-19T22:29:37Z", "author": {"login": "robotmrv"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -133,26 +133,26 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \n \t\t@Override\n \t\tpublic Mono<String> convert(@NonNull ServerWebExchange exchange) {\n-\t\t\treturn this.converter.convert(exchange)\n-\t\t\t\t\t.cast(BearerTokenAuthenticationToken.class)\n-\t\t\t\t\t.flatMap(this::issuer);\n-\t\t}\n-\n-\t\tprivate Mono<String> issuer(BearerTokenAuthenticationToken token) {\n-\t\t\ttry {\n-\t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n-\t\t\t\treturn Mono.justOrEmpty(issuer).switchIfEmpty(\n-\t\t\t\t\t\tMono.error(new InvalidBearerTokenException(\"Missing issuer\")));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treturn Mono.error(new InvalidBearerTokenException(e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f62d7a54b746cbf6df78f26184ac94b7cc2fd8", "author": {"user": {"login": "robotmrv", "name": null}}, "url": "https://github.com/spring-projects/spring-security/commit/18f62d7a54b746cbf6df78f26184ac94b7cc2fd8", "committedDate": "2020-02-20T12:59:37Z", "message": "Instantiate exceptions lazily\n\nAdd lazy Exception instantiation to reduce allocations\n\nFixes gh-7995"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "author": {"user": {"login": "robotmrv", "name": null}}, "url": "https://github.com/spring-projects/spring-security/commit/a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "committedDate": "2020-02-21T10:25:46Z", "message": "polish gh-7996\n\nMake defensive collection copy as Collections.unmodifiableCollection\ndoes not protect from the source collection direct modification.\nUse Mono#map instead of Mono#flatMap as it allocates less.\nUse less operators to reduce allocations.\nUse lambda parameter instead of outer method parameter\nin authenticationManagers#computeIfAbsent()\nto make it non capturing so it could be cached by JVM.\nPropagate cause for InvalidBearerTokenException."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "author": {"user": {"login": "robotmrv", "name": null}}, "url": "https://github.com/spring-projects/spring-security/commit/a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "committedDate": "2020-02-21T10:25:46Z", "message": "polish gh-7996\n\nMake defensive collection copy as Collections.unmodifiableCollection\ndoes not protect from the source collection direct modification.\nUse Mono#map instead of Mono#flatMap as it allocates less.\nUse less operators to reduce allocations.\nUse lambda parameter instead of outer method parameter\nin authenticationManagers#computeIfAbsent()\nto make it non capturing so it could be cached by JVM.\nPropagate cause for InvalidBearerTokenException."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 28, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}