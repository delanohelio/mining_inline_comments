{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MzcwNjQ4", "number": 8644, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODowODo1OVrOEIFF3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzowNjowNFrOEIKb1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTA3NDg0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODowODo1OVrOGn02PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoyMTozOVrOGn5J2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxMzUwMA==", "bodyText": "I don't think we want to actually do the testing at this point. Could you return an enumeration that checks the names as they are returned?", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444413500", "createdAt": "2020-06-23T18:08:59Z", "author": {"login": "jzheaux"}, "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "diffHunk": "@@ -370,6 +474,123 @@ public FirewalledRequest getFirewalledRequest(HttpServletRequest request) throws\n \t\t\tthrow new RequestRejectedException(\"The requestURI was rejected because it can only contain printable ASCII characters.\");\n \t\t}\n \t\treturn new FirewalledRequest(request) {\n+\t\t\t@Override\n+\t\t\tpublic long getDateHeader(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn super.getDateHeader(name);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic int getIntHeader(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn super.getIntHeader(name);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getHeader(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\tString value = super.getHeader(name);\n+\t\t\t\tif (value != null && !allowedHeaderValues.test(value)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn value;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Enumeration<String> getHeaders(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\tEnumeration<String> valuesEnumeration = super.getHeaders(name);\n+\t\t\t\tif (valuesEnumeration != null) {\n+\t\t\t\t\twhile (valuesEnumeration.hasMoreElements()) {\n+\t\t\t\t\t\tString value = valuesEnumeration.nextElement();\n+\t\t\t\t\t\tif (!allowedHeaderValues.test(value)) {\n+\t\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn super.getHeaders(name);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Enumeration<String> getHeaderNames() {\n+\t\t\t\tEnumeration<String> namesEnumeration = super.getHeaderNames();\n+\t\t\t\tif (namesEnumeration != null) {\n+\t\t\t\t\twhile (namesEnumeration.hasMoreElements()) {\n+\t\t\t\t\t\tString name = namesEnumeration.nextElement();\n+\t\t\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn super.getHeaderNames();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getParameter(String name) {\n+\t\t\t\tif (!allowedParameterNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\tString value = super.getParameter(name);\n+\t\t\t\tif (value != null && !allowedParameterValues.test(value)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn value;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Map<String, String[]> getParameterMap() {\n+\t\t\t\tMap<String, String[]> parameterMap = super.getParameterMap();\n+\t\t\t\tfor (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {\n+\t\t\t\t\tString name = entry.getKey();\n+\t\t\t\t\tString[] values = entry.getValue();\n+\t\t\t\t\tif (!allowedParameterNames.test(name)) {\n+\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String value: values) {\n+\t\t\t\t\t\tif (!allowedParameterValues.test(value)) {\n+\t\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn parameterMap;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Enumeration<String> getParameterNames() {\n+\t\t\t\tEnumeration<String> namesEnumeration = super.getParameterNames();\n+\t\t\t\twhile (namesEnumeration.hasMoreElements()) {\n+\t\t\t\t\tString name = namesEnumeration.nextElement();\n+\t\t\t\t\tif (!allowedParameterNames.test(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NDA1OQ==", "bodyText": "Certainly. Done here and in other places where an Enumeration is returned.\nLazily testing the map returned by getParameterMap seems quite complicated and not really worth it, so I'm still eagerly testing there. If you'd like to see a different approach there, please let me know.", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444484059", "createdAt": "2020-06-23T20:21:39Z", "author": {"login": "candrews"}, "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "diffHunk": "@@ -370,6 +474,123 @@ public FirewalledRequest getFirewalledRequest(HttpServletRequest request) throws\n \t\t\tthrow new RequestRejectedException(\"The requestURI was rejected because it can only contain printable ASCII characters.\");\n \t\t}\n \t\treturn new FirewalledRequest(request) {\n+\t\t\t@Override\n+\t\t\tpublic long getDateHeader(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn super.getDateHeader(name);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic int getIntHeader(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn super.getIntHeader(name);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getHeader(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\tString value = super.getHeader(name);\n+\t\t\t\tif (value != null && !allowedHeaderValues.test(value)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn value;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Enumeration<String> getHeaders(String name) {\n+\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\tEnumeration<String> valuesEnumeration = super.getHeaders(name);\n+\t\t\t\tif (valuesEnumeration != null) {\n+\t\t\t\t\twhile (valuesEnumeration.hasMoreElements()) {\n+\t\t\t\t\t\tString value = valuesEnumeration.nextElement();\n+\t\t\t\t\t\tif (!allowedHeaderValues.test(value)) {\n+\t\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn super.getHeaders(name);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Enumeration<String> getHeaderNames() {\n+\t\t\t\tEnumeration<String> namesEnumeration = super.getHeaderNames();\n+\t\t\t\tif (namesEnumeration != null) {\n+\t\t\t\t\twhile (namesEnumeration.hasMoreElements()) {\n+\t\t\t\t\t\tString name = namesEnumeration.nextElement();\n+\t\t\t\t\t\tif (!allowedHeaderNames.test(name)) {\n+\t\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the header name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn super.getHeaderNames();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getParameter(String name) {\n+\t\t\t\tif (!allowedParameterNames.test(name)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\tString value = super.getParameter(name);\n+\t\t\t\tif (value != null && !allowedParameterValues.test(value)) {\n+\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t}\n+\t\t\t\treturn value;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Map<String, String[]> getParameterMap() {\n+\t\t\t\tMap<String, String[]> parameterMap = super.getParameterMap();\n+\t\t\t\tfor (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {\n+\t\t\t\t\tString name = entry.getKey();\n+\t\t\t\t\tString[] values = entry.getValue();\n+\t\t\t\t\tif (!allowedParameterNames.test(name)) {\n+\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter name \\\"\" + name + \"\\\" is not allowed.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String value: values) {\n+\t\t\t\t\t\tif (!allowedParameterValues.test(value)) {\n+\t\t\t\t\t\t\tthrow new RequestRejectedException(\"The request was rejected because the parameter value \\\"\" + value + \"\\\" is not allowed.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn parameterMap;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Enumeration<String> getParameterNames() {\n+\t\t\t\tEnumeration<String> namesEnumeration = super.getParameterNames();\n+\t\t\t\twhile (namesEnumeration.hasMoreElements()) {\n+\t\t\t\t\tString name = namesEnumeration.nextElement();\n+\t\t\t\t\tif (!allowedParameterNames.test(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxMzUwMA=="}, "originalCommit": null, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTA4MzkwOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxMTozNVrOGn070w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxMTozNVrOGn070w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNDkzMQ==", "bodyText": "It's a bit odd that this private method is in the middle of the methods you added. Is there a reason for that?", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444414931", "createdAt": "2020-06-23T18:11:35Z", "author": {"login": "jzheaux"}, "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "diffHunk": "@@ -350,11 +381,84 @@ private void urlBlocklistsAddAll(Collection<String> values) {\n \t\tthis.decodedUrlBlocklist.addAll(values);\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Determines which header names should be allowed.\n+\t * The default is to reject header names that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderNames the predicate for testing header names\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderNames(Predicate<String> allowedHeaderNames) {\n+\t\tif (allowedHeaderNames == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedHeaderNames cannot be null\");\n+\t\t}\n+\t\tthis.allowedHeaderNames = allowedHeaderNames;\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t * Determines which header values should be allowed.\n+\t * The default is to reject header values that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderValues the predicate for testing hostnames\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderValues(Predicate<String> allowedHeaderValues) {\n+\t\tif (allowedHeaderValues == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedHeaderValues cannot be null\");\n+\t\t}\n+\t\tthis.allowedHeaderValues = allowedHeaderValues;\n+\t}\n+\n \tprivate void urlBlocklistsRemoveAll(Collection<String> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTEwMzYxOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxNzoxOVrOGn1IJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoyMTozMFrOGn5JhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxODA4NA==", "bodyText": "It doesn't make sense to me that you'd call setAllowedHostnames here since you are testing parameter values.", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444418084", "createdAt": "2020-06-23T18:17:19Z", "author": {"login": "jzheaux"}, "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "diffHunk": "@@ -595,4 +597,38 @@ public void getFirewalledRequestWhenUntrustedDomainThenException() {\n \n \t\tthis.firewall.getFirewalledRequest(this.request);\n \t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaderNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Something\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInParameterNameThenException() {\n+\t\tthis.request.addParameter(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getParameterNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenNotAllowedInParameterValueThenException() {\n+\t\tthis.firewall.setAllowedHostnames(value -> value.equals(\"bad value\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4Mzk3Mw==", "bodyText": "Agreed, fixed.", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444483973", "createdAt": "2020-06-23T20:21:30Z", "author": {"login": "candrews"}, "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "diffHunk": "@@ -595,4 +597,38 @@ public void getFirewalledRequestWhenUntrustedDomainThenException() {\n \n \t\tthis.firewall.getFirewalledRequest(this.request);\n \t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaderNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Something\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInParameterNameThenException() {\n+\t\tthis.request.addParameter(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getParameterNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenNotAllowedInParameterValueThenException() {\n+\t\tthis.firewall.setAllowedHostnames(value -> value.equals(\"bad value\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxODA4NA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTEwNzExOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxODoyN1rOGn1KZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoyMzozOFrOGn5N8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxODY2MQ==", "bodyText": "Would you please add more tests to confirm that the different setters work? It would also be nice to confirm that the different request getters, e.g. getParameter, correctly reject a bad parameter name.", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444418661", "createdAt": "2020-06-23T18:18:27Z", "author": {"login": "jzheaux"}, "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "diffHunk": "@@ -595,4 +597,38 @@ public void getFirewalledRequestWhenUntrustedDomainThenException() {\n \n \t\tthis.firewall.getFirewalledRequest(this.request);\n \t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaderNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Something\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInParameterNameThenException() {\n+\t\tthis.request.addParameter(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getParameterNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenNotAllowedInParameterValueThenException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NTEwNg==", "bodyText": "Absolutely! I've added a number of tests that I believe address this request.", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444485106", "createdAt": "2020-06-23T20:23:38Z", "author": {"login": "candrews"}, "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "diffHunk": "@@ -595,4 +597,38 @@ public void getFirewalledRequestWhenUntrustedDomainThenException() {\n \n \t\tthis.firewall.getFirewalledRequest(this.request);\n \t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaderNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Something\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenControlCharacterInParameterNameThenException() {\n+\t\tthis.request.addParameter(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getParameterNames();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestWhenNotAllowedInParameterValueThenException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxODY2MQ=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTk0NDQ1OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzowMzoyNlrOGn9ekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTowNToyMVrOGn_g9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NDg5Nw==", "bodyText": "Will you please move these so that they are next to the other public setters?", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444554897", "createdAt": "2020-06-23T23:03:26Z", "author": {"login": "jzheaux"}, "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "diffHunk": "@@ -355,6 +386,79 @@ private void urlBlocklistsRemoveAll(Collection<String> values) {\n \t\tthis.decodedUrlBlocklist.removeAll(values);\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Determines which header names should be allowed.\n+\t * The default is to reject header names that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderNames the predicate for testing header names\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderNames(Predicate<String> allowedHeaderNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4ODI3OQ==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444588279", "createdAt": "2020-06-24T01:05:21Z", "author": {"login": "candrews"}, "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "diffHunk": "@@ -355,6 +386,79 @@ private void urlBlocklistsRemoveAll(Collection<String> values) {\n \t\tthis.decodedUrlBlocklist.removeAll(values);\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Determines which header names should be allowed.\n+\t * The default is to reject header names that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderNames the predicate for testing header names\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderNames(Predicate<String> allowedHeaderNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NDg5Nw=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTk0ODU0OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzowNToxNlrOGn9g7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTowNToxMlrOGn_gzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NTUwMA==", "bodyText": "Thank you for these tests - will you please add some additional testing around the regular expression? Specifically, I think there should be a test that shows that the firewall requests a header name, a header value, and a parameter name with a control character and with an undefined character.", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444555500", "createdAt": "2020-06-23T23:05:16Z", "author": {"login": "jzheaux"}, "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "diffHunk": "@@ -595,4 +597,121 @@ public void getFirewalledRequestWhenUntrustedDomainThenException() {\n \n \t\tthis.firewall.getFirewalledRequest(this.request);\n \t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenNotAllowedHeaderNameThenException() {\n+\t\tthis.firewall.setAllowedHeaderNames(name -> !name.equals(\"bad name\"));\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"bad name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenNotAllowedHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"good name\", \"bad value\");\n+\t\tthis.firewall.setAllowedHeaderValues(value -> !value.equals(\"bad value\"));\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"good name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetDateHeaderWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getDateHeader(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetIntHeaderWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getIntHeader(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeadersWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaders(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderNamesWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaderNames().nextElement();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Something\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeadersWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaders(\"Something\").nextElement();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetParameterWhenControlCharacterInParameterNameThenException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4ODIzNw==", "bodyText": "I already had tests for control characters in a header name, a header value, and a parameter name; I added tests for undefined characters for those 3 cases as well.", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444588237", "createdAt": "2020-06-24T01:05:12Z", "author": {"login": "candrews"}, "path": "web/src/test/java/org/springframework/security/web/firewall/StrictHttpFirewallTests.java", "diffHunk": "@@ -595,4 +597,121 @@ public void getFirewalledRequestWhenUntrustedDomainThenException() {\n \n \t\tthis.firewall.getFirewalledRequest(this.request);\n \t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenNotAllowedHeaderNameThenException() {\n+\t\tthis.firewall.setAllowedHeaderNames(name -> !name.equals(\"bad name\"));\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"bad name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenNotAllowedHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"good name\", \"bad value\");\n+\t\tthis.firewall.setAllowedHeaderValues(value -> !value.equals(\"bad value\"));\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"good name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetDateHeaderWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getDateHeader(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetIntHeaderWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getIntHeader(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeadersWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaders(\"Bad\\0Name\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderNamesWhenControlCharacterInHeaderNameThenException() {\n+\t\tthis.request.addHeader(\"Bad\\0Name\", \"some value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaderNames().nextElement();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeaderWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeader(\"Something\");\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetHeadersWhenControlCharacterInHeaderValueThenException() {\n+\t\tthis.request.addHeader(\"Something\", \"bad\\0value\");\n+\n+\t\tHttpServletRequest request = this.firewall.getFirewalledRequest(this.request);\n+\t\trequest.getHeaders(\"Something\").nextElement();\n+\t}\n+\n+\t@Test(expected = RequestRejectedException.class)\n+\tpublic void getFirewalledRequestGetParameterWhenControlCharacterInParameterNameThenException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NTUwMA=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTk1MDI5OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzowNjowNFrOGn9h6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTowNToxNlrOGn_g3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NTc1Mg==", "bodyText": "I think you mean here \"The default is to allow any parameter value.\"", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444555752", "createdAt": "2020-06-23T23:06:04Z", "author": {"login": "jzheaux"}, "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "diffHunk": "@@ -355,6 +386,79 @@ private void urlBlocklistsRemoveAll(Collection<String> values) {\n \t\tthis.decodedUrlBlocklist.removeAll(values);\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Determines which header names should be allowed.\n+\t * The default is to reject header names that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderNames the predicate for testing header names\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderNames(Predicate<String> allowedHeaderNames) {\n+\t\tif (allowedHeaderNames == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedHeaderNames cannot be null\");\n+\t\t}\n+\t\tthis.allowedHeaderNames = allowedHeaderNames;\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t * Determines which header values should be allowed.\n+\t * The default is to reject header values that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderValues the predicate for testing hostnames\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderValues(Predicate<String> allowedHeaderValues) {\n+\t\tif (allowedHeaderValues == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedHeaderValues cannot be null\");\n+\t\t}\n+\t\tthis.allowedHeaderValues = allowedHeaderValues;\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t * Determines which parameter names should be allowed.\n+\t * The default is to reject header names that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedParameterNames the predicate for testing parameter names\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedParameterNames(Predicate<String> allowedParameterNames) {\n+\t\tif (allowedParameterNames == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedParameterNames cannot be null\");\n+\t\t}\n+\t\tthis.allowedParameterNames = allowedParameterNames;\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t * Determines which parameter values should be allowed.\n+\t * The default is to any parameter value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4ODI1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/spring-projects/spring-security/pull/8644#discussion_r444588255", "createdAt": "2020-06-24T01:05:16Z", "author": {"login": "candrews"}, "path": "web/src/main/java/org/springframework/security/web/firewall/StrictHttpFirewall.java", "diffHunk": "@@ -355,6 +386,79 @@ private void urlBlocklistsRemoveAll(Collection<String> values) {\n \t\tthis.decodedUrlBlocklist.removeAll(values);\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Determines which header names should be allowed.\n+\t * The default is to reject header names that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderNames the predicate for testing header names\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderNames(Predicate<String> allowedHeaderNames) {\n+\t\tif (allowedHeaderNames == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedHeaderNames cannot be null\");\n+\t\t}\n+\t\tthis.allowedHeaderNames = allowedHeaderNames;\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t * Determines which header values should be allowed.\n+\t * The default is to reject header values that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedHeaderValues the predicate for testing hostnames\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedHeaderValues(Predicate<String> allowedHeaderValues) {\n+\t\tif (allowedHeaderValues == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedHeaderValues cannot be null\");\n+\t\t}\n+\t\tthis.allowedHeaderValues = allowedHeaderValues;\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t * Determines which parameter names should be allowed.\n+\t * The default is to reject header names that contain ISO control characters\n+\t * and characters that are not defined.\n+\t * </p>\n+\t *\n+\t * @param allowedParameterNames the predicate for testing parameter names\n+\t * @see Character#isISOControl(int)\n+\t * @see Character#isDefined(int)\n+\t * @since 5.4\n+\t */\n+\tpublic void setAllowedParameterNames(Predicate<String> allowedParameterNames) {\n+\t\tif (allowedParameterNames == null) {\n+\t\t\tthrow new IllegalArgumentException(\"allowedParameterNames cannot be null\");\n+\t\t}\n+\t\tthis.allowedParameterNames = allowedParameterNames;\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t * Determines which parameter values should be allowed.\n+\t * The default is to any parameter value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NTc1Mg=="}, "originalCommit": null, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1782, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}