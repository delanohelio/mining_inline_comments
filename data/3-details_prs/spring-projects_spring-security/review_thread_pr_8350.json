{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjg2MDU3", "number": 8350, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MTowOFrODwIzvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDozMTo1N1rODz6SHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODAyNTU3OnYy", "diffSide": "RIGHT", "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MTowOFrOGC-I-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MTowOFrOGC-I-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2ODQ0Mw==", "bodyText": "Please add an additional test where security is configured based on both HTTP method and servlet path.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r405768443", "createdAt": "2020-04-08T19:41:08Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,43 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODAyNzMyOnYy", "diffSide": "RIGHT", "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MTozMFrOGC-J9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MTozMFrOGC-J9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2ODY5NA==", "bodyText": "Small typo: metod -> method", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r405768694", "createdAt": "2020-04-08T19:41:30Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,43 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http metod then responds`() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTA0MDcxOnYy", "diffSide": "RIGHT", "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxNzo1NVrOGDazPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxNzo1NVrOGDazPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzODAxMw==", "bodyText": "PUT requests should include a CSRF token\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.mockMvc.put(\"/path\")\n          \n          \n            \n                    this.mockMvc.put(\"/path\") {\n          \n          \n            \n                        with(csrf())\n          \n          \n            \n                    }", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r406238013", "createdAt": "2020-04-09T14:17:55Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,92 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http method then responds`() {\n+        this.spring.register(AuthorizeRequestsByMvcConfigWithHttpMethod::class.java).autowire()\n+\n+        this.mockMvc.get(\"/path\")\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.put(\"/path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTA2MzIwOnYy", "diffSide": "RIGHT", "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyMzoxOVrOGDbBfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzo1MDowMlrOGEnEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTY2MA==", "bodyText": "I had a different test in mind when I mentioned using HTTP method and servlet path.\nWe should have a test similar to `request when secured by mvc with servlet path then responds based on servlet path`, but using the HTTP method.\nThe configuration would look something like\nhttp {\n    authorizeRequests {\n        authorize(HttpMethod.GET, \"/path\", \"/spring\", denyAll)\n    }\n}", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r406241660", "createdAt": "2020-04-09T14:23:19Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,92 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http method then responds`() {\n+        this.spring.register(AuthorizeRequestsByMvcConfigWithHttpMethod::class.java).autowire()\n+\n+        this.mockMvc.get(\"/path\")\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.put(\"/path\")\n+            .andExpect {\n+                status { isForbidden }\n+            }\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithAndWithoutHttpMethod : WebSecurityConfigurerAdapter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjM2MA==", "bodyText": "Sorry I misunderstood. I'll look at replacing the second test this weekend.\nAlso, I noticed that antMatchers() also has a version that accepts httpMethod, so I will add it for the antMatchers() case too. In fact, it's probably dangerous not to add it, because if the HTTP method is specified but MVC is not present, the specified method will be ignored in the implementation as it stands right now. Does that make sense to you?", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r406316360", "createdAt": "2020-04-09T16:11:08Z", "author": {"login": "adamu"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,92 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http method then responds`() {\n+        this.spring.register(AuthorizeRequestsByMvcConfigWithHttpMethod::class.java).autowire()\n+\n+        this.mockMvc.get(\"/path\")\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.put(\"/path\")\n+            .andExpect {\n+                status { isForbidden }\n+            }\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithAndWithoutHttpMethod : WebSecurityConfigurerAdapter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTY2MA=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4NzU2OA==", "bodyText": "Absolutely, good catch.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r407487568", "createdAt": "2020-04-13T13:50:02Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,92 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http method then responds`() {\n+        this.spring.register(AuthorizeRequestsByMvcConfigWithHttpMethod::class.java).autowire()\n+\n+        this.mockMvc.get(\"/path\")\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.put(\"/path\")\n+            .andExpect {\n+                status { isForbidden }\n+            }\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithAndWithoutHttpMethod : WebSecurityConfigurerAdapter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTY2MA=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI2OTEwOnYy", "diffSide": "RIGHT", "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNjoyMlrOGHQoUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjowNjo1M1rOGHUE8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTY4MQ==", "bodyText": "It may be confusing to have a GET request calling \"/post\". It is best to rename the endpoint to something else.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r410265681", "createdAt": "2020-04-17T14:36:22Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -72,12 +76,29 @@ class AuthorizeRequestsDslTests {\n                 }\n     }\n \n+    @Test\n+    fun `request when allowed by regex matcher with http method then responds based on method`() {\n+        this.spring.register(AuthorizeRequestsByRegexConfig::class.java).autowire()\n+\n+        this.mockMvc.post(\"/post\") { with(csrf()) }\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.get(\"/post\")\n+            .andExpect {\n+                status { isForbidden }\n+            }\n+    }\n+\n     @EnableWebSecurity\n     open class AuthorizeRequestsByRegexConfig : WebSecurityConfigurerAdapter() {\n         override fun configure(http: HttpSecurity) {\n             http {\n                 authorizeRequests {\n                     authorize(RegexRequestMatcher(\"/path\", null), permitAll)\n+                    authorize(RegexRequestMatcher(\"/post\", \"POST\"), permitAll)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMjE2Mg==", "bodyText": "Renamed to /onlyPostPermitted", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r410322162", "createdAt": "2020-04-17T16:06:53Z", "author": {"login": "adamu"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -72,12 +76,29 @@ class AuthorizeRequestsDslTests {\n                 }\n     }\n \n+    @Test\n+    fun `request when allowed by regex matcher with http method then responds based on method`() {\n+        this.spring.register(AuthorizeRequestsByRegexConfig::class.java).autowire()\n+\n+        this.mockMvc.post(\"/post\") { with(csrf()) }\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.get(\"/post\")\n+            .andExpect {\n+                status { isForbidden }\n+            }\n+    }\n+\n     @EnableWebSecurity\n     open class AuthorizeRequestsByRegexConfig : WebSecurityConfigurerAdapter() {\n         override fun configure(http: HttpSecurity) {\n             http {\n                 authorizeRequests {\n                     authorize(RegexRequestMatcher(\"/path\", null), permitAll)\n+                    authorize(RegexRequestMatcher(\"/post\", \"POST\"), permitAll)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTY4MQ=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI3OTA0OnYy", "diffSide": "RIGHT", "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozODo1NlrOGHQu8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoyMzo1OVrOGImKQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NzM3Ng==", "bodyText": "We should only use .antMatchers(HttpMethod, String) if httpMethod is not null, similar to mvcMatchers", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r410267376", "createdAt": "2020-04-17T14:38:56Z", "author": {"login": "eleftherias"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,9 +200,13 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxNTcxMg==", "bodyText": "I can do this, although I notice there is a discrepency between the docs for mvcMatchers() and antMatchers().\nThe documentation for antMatchers(HttpMethod httpMethod, String... antPatterns) says:\n\nmethod - the HttpMethod to use or null for any HttpMethod.\n\nAnd indeed, the non-HttpMethod version just calls the HttpMethod version with null.\nHowever, the documentation for mvcMatchers(HttpMethod method, String... mvcPatterns) does not contain the \"or null\" option for the method argument (maybe it should?):\n\nmethod - the HTTP method to match on\n\nAlthough, mvcMatchers(String... mvcPatterns) does internally use a protected method that documents the same behaviour.\nI think it's cleaner for them both to use the option to pass in null, as it is publicly documented behaviour and will remove the need for the conditional check here. But as it's not documented for mvcMatchers(), I'm hesitant. What do you think?\nI agree they should be unified, so happy to add the conditional check to antMatchers() too if you prefer that.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r410315712", "createdAt": "2020-04-17T15:56:13Z", "author": {"login": "adamu"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,9 +200,13 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NzM3Ng=="}, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzMDQyMA==", "bodyText": "I pushed the version without the conditionals for now, so you can see what I mean.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r410330420", "createdAt": "2020-04-17T16:20:55Z", "author": {"login": "adamu"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,9 +200,13 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NzM3Ng=="}, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NzAxMQ==", "bodyText": "Thanks that looks good to me.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r411667011", "createdAt": "2020-04-20T20:23:59Z", "author": {"login": "eleftherias"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,9 +200,13 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NzM3Ng=="}, "originalCommit": null, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzU4ODc5OnYy", "diffSide": "RIGHT", "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDozMTo1OFrOGImdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoxODo0MlrOGJgSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3MTkzNQ==", "bodyText": "I think we should keep the null check for servletPath.\nI can see that we have null checks in MvcRequestMatcher, but I consider this scenario to be different than the httpMethod.\nWe are never explicitly replacing an unset servletPath with null, as we did for httpMethod.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r411671935", "createdAt": "2020-04-20T20:31:58Z", "author": {"login": "eleftherias"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,12 +200,10 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n-                            PatternType.MVC -> {\n-                                val mvcMatchersAuthorizeUrl = requests.mvcMatchers(rule.pattern)\n-                                rule.servletPath?.also { mvcMatchersAuthorizeUrl.servletPath(rule.servletPath) }\n-                                mvcMatchersAuthorizeUrl.access(rule.rule)\n-                            }\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)\n+                            PatternType.MVC -> requests.mvcMatchers(rule.httpMethod, rule.pattern)\n+                                .servletPath(rule.servletPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxNzE2Mw==", "bodyText": "I see. I removed it because:\n\nThe default value of servletPath on MvcRequestMatcher is null and the documentation for setServletPath() states \"The default is undefined which means any servlet path\". The use of the word \"undefined\" instead of null is a bit ambiguous, but this seems to be saying that null is equivalent to being unset, which means any servlet path.\nIn PatternAuthorizationRule, the default value is also null when unspecified. So we can take advantage of the above point to keep the code simpler here.\n\nWould you still like me to add the null check back?", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r412617163", "createdAt": "2020-04-22T02:11:47Z", "author": {"login": "adamu"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,12 +200,10 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n-                            PatternType.MVC -> {\n-                                val mvcMatchersAuthorizeUrl = requests.mvcMatchers(rule.pattern)\n-                                rule.servletPath?.also { mvcMatchersAuthorizeUrl.servletPath(rule.servletPath) }\n-                                mvcMatchersAuthorizeUrl.access(rule.rule)\n-                            }\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)\n+                            PatternType.MVC -> requests.mvcMatchers(rule.httpMethod, rule.pattern)\n+                                .servletPath(rule.servletPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3MTkzNQ=="}, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTM4MQ==", "bodyText": "I added it back, but I'm happy to take it out again if you prefer!", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r412619381", "createdAt": "2020-04-22T02:18:42Z", "author": {"login": "adamu"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,12 +200,10 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n-                            PatternType.MVC -> {\n-                                val mvcMatchersAuthorizeUrl = requests.mvcMatchers(rule.pattern)\n-                                rule.servletPath?.also { mvcMatchersAuthorizeUrl.servletPath(rule.servletPath) }\n-                                mvcMatchersAuthorizeUrl.access(rule.rule)\n-                            }\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)\n+                            PatternType.MVC -> requests.mvcMatchers(rule.httpMethod, rule.pattern)\n+                                .servletPath(rule.servletPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3MTkzNQ=="}, "originalCommit": null, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}