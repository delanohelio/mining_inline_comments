{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjg2MDU3", "number": 8350, "title": "Add authorize() DSL method that accepts HttpMethod", "bodyText": "Attempted an implementation for #8307, which adds an implementation of authorize() for AuthorizeRequestsDsl, so that we can write code like this:\nhttp {\n    authorizeRequests {\n        authorize(GET, \"/path\", permitAll)\n        authorize(PUT, \"/path\", denyAll)\n    }\n}", "createdAt": "2020-04-08T07:49:38Z", "url": "https://github.com/spring-projects/spring-security/pull/8350", "merged": true, "mergeCommit": {"oid": "0f29bee1b023667585f402b5ef1254ecf6ccc6fa"}, "closed": true, "closedAt": "2020-04-22T20:14:06Z", "author": {"login": "adamu"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVuLEggFqTM5MDI3NTUyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaCOUnAH2gAyNDAwNjg2MDU3OjMwZTQyYzM0N2VmNDA2NWJmOGNhYTU4MDJmZmQyM2M2OTExZjA2OGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjc1NTI1", "url": "https://github.com/spring-projects/spring-security/pull/8350#pullrequestreview-390275525", "createdAt": "2020-04-08T19:41:08Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MTowOFrOGC-I-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MTozMFrOGC-J9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2ODQ0Mw==", "bodyText": "Please add an additional test where security is configured based on both HTTP method and servlet path.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r405768443", "createdAt": "2020-04-08T19:41:08Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,43 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2ODY5NA==", "bodyText": "Small typo: metod -> method", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r405768694", "createdAt": "2020-04-08T19:41:30Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,43 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http metod then responds`() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODM1MDgy", "url": "https://github.com/spring-projects/spring-security/pull/8350#pullrequestreview-390835082", "createdAt": "2020-04-09T14:17:55Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxNzo1NVrOGDazPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyMzoxOVrOGDbBfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzODAxMw==", "bodyText": "PUT requests should include a CSRF token\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.mockMvc.put(\"/path\")\n          \n          \n            \n                    this.mockMvc.put(\"/path\") {\n          \n          \n            \n                        with(csrf())\n          \n          \n            \n                    }", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r406238013", "createdAt": "2020-04-09T14:17:55Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,92 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http method then responds`() {\n+        this.spring.register(AuthorizeRequestsByMvcConfigWithHttpMethod::class.java).autowire()\n+\n+        this.mockMvc.get(\"/path\")\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.put(\"/path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTY2MA==", "bodyText": "I had a different test in mind when I mentioned using HTTP method and servlet path.\nWe should have a test similar to `request when secured by mvc with servlet path then responds based on servlet path`, but using the HTTP method.\nThe configuration would look something like\nhttp {\n    authorizeRequests {\n        authorize(HttpMethod.GET, \"/path\", \"/spring\", denyAll)\n    }\n}", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r406241660", "createdAt": "2020-04-09T14:23:19Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -271,4 +274,92 @@ class AuthorizeRequestsDslTests {\n             }\n         }\n     }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithHttpMethod : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                authorizeRequests {\n+                    authorize(HttpMethod.GET, \"/path\", permitAll)\n+                    authorize(HttpMethod.PUT, \"/path\", denyAll)\n+                }\n+            }\n+        }\n+\n+        @RestController\n+        internal class PathController {\n+            @GetMapping(\"/path\")\n+            fun permit() {\n+            }\n+\n+            @PutMapping(\"/path\")\n+            fun deny() {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun `request when secured by mvc with http method then responds`() {\n+        this.spring.register(AuthorizeRequestsByMvcConfigWithHttpMethod::class.java).autowire()\n+\n+        this.mockMvc.get(\"/path\")\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.put(\"/path\")\n+            .andExpect {\n+                status { isForbidden }\n+            }\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class AuthorizeRequestsByMvcConfigWithAndWithoutHttpMethod : WebSecurityConfigurerAdapter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NTEwNjI4", "url": "https://github.com/spring-projects/spring-security/pull/8350#pullrequestreview-395510628", "createdAt": "2020-04-17T14:36:22Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNjoyMlrOGHQoUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozODo1NlrOGHQu8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTY4MQ==", "bodyText": "It may be confusing to have a GET request calling \"/post\". It is best to rename the endpoint to something else.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r410265681", "createdAt": "2020-04-17T14:36:22Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDslTests.kt", "diffHunk": "@@ -72,12 +76,29 @@ class AuthorizeRequestsDslTests {\n                 }\n     }\n \n+    @Test\n+    fun `request when allowed by regex matcher with http method then responds based on method`() {\n+        this.spring.register(AuthorizeRequestsByRegexConfig::class.java).autowire()\n+\n+        this.mockMvc.post(\"/post\") { with(csrf()) }\n+            .andExpect {\n+                status { isOk }\n+            }\n+\n+        this.mockMvc.get(\"/post\")\n+            .andExpect {\n+                status { isForbidden }\n+            }\n+    }\n+\n     @EnableWebSecurity\n     open class AuthorizeRequestsByRegexConfig : WebSecurityConfigurerAdapter() {\n         override fun configure(http: HttpSecurity) {\n             http {\n                 authorizeRequests {\n                     authorize(RegexRequestMatcher(\"/path\", null), permitAll)\n+                    authorize(RegexRequestMatcher(\"/post\", \"POST\"), permitAll)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NzM3Ng==", "bodyText": "We should only use .antMatchers(HttpMethod, String) if httpMethod is not null, similar to mvcMatchers", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r410267376", "createdAt": "2020-04-17T14:38:56Z", "author": {"login": "eleftherias"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,9 +200,13 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NzkwMDMw", "url": "https://github.com/spring-projects/spring-security/pull/8350#pullrequestreview-396790030", "createdAt": "2020-04-20T20:31:57Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDozMTo1OFrOGImdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDozMTo1OFrOGImdfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3MTkzNQ==", "bodyText": "I think we should keep the null check for servletPath.\nI can see that we have null checks in MvcRequestMatcher, but I consider this scenario to be different than the httpMethod.\nWe are never explicitly replacing an unset servletPath with null, as we did for httpMethod.", "url": "https://github.com/spring-projects/spring-security/pull/8350#discussion_r411671935", "createdAt": "2020-04-20T20:31:58Z", "author": {"login": "eleftherias"}, "path": "config/src/main/kotlin/org/springframework/security/config/web/servlet/AuthorizeRequestsDsl.kt", "diffHunk": "@@ -152,12 +200,10 @@ class AuthorizeRequestsDsl : AbstractRequestMatcherDsl() {\n                     is MatcherAuthorizationRule -> requests.requestMatchers(rule.matcher).access(rule.rule)\n                     is PatternAuthorizationRule -> {\n                         when (rule.patternType) {\n-                            PatternType.ANT -> requests.antMatchers(rule.pattern).access(rule.rule)\n-                            PatternType.MVC -> {\n-                                val mvcMatchersAuthorizeUrl = requests.mvcMatchers(rule.pattern)\n-                                rule.servletPath?.also { mvcMatchersAuthorizeUrl.servletPath(rule.servletPath) }\n-                                mvcMatchersAuthorizeUrl.access(rule.rule)\n-                            }\n+                            PatternType.ANT -> requests.antMatchers(rule.httpMethod, rule.pattern).access(rule.rule)\n+                            PatternType.MVC -> requests.mvcMatchers(rule.httpMethod, rule.pattern)\n+                                .servletPath(rule.servletPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa4b5ee253cd073511143de6c74a3e94a431e7be", "author": {"user": {"login": "adamu", "name": "Adam Millerchip"}}, "url": "https://github.com/spring-projects/spring-security/commit/fa4b5ee253cd073511143de6c74a3e94a431e7be", "committedDate": "2020-04-22T06:23:34Z", "message": "Extract pattern type in request matcher DSL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4b2c60176af52445799e14350fee9566d7c4383", "author": {"user": {"login": "adamu", "name": "Adam Millerchip"}}, "url": "https://github.com/spring-projects/spring-security/commit/a4b2c60176af52445799e14350fee9566d7c4383", "committedDate": "2020-04-22T06:23:34Z", "message": "Use named arguments in Kotlin authorization rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e42c347ef4065bf8caa5802ffd23c6911f068e", "author": {"user": {"login": "adamu", "name": "Adam Millerchip"}}, "url": "https://github.com/spring-projects/spring-security/commit/30e42c347ef4065bf8caa5802ffd23c6911f068e", "committedDate": "2020-04-22T06:23:34Z", "message": "Add authorize() DSL method that accepts HttpMethod\n\nFixes: gh-8307"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 48, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}