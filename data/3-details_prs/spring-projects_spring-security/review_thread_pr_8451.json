{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMDU4MDAy", "number": 8451, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTo1NDozMVrOD4d9CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTo1NDo1MVrOD4d9TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTM3NjA5OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/springframework/security/test/web/servlet/setup/SecurityMockMvcConfigurer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTo1NDozMVrOGPUCGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNzo1MjoyMVrOGPhTmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMDA0Mw==", "bodyText": "Rather than do this could we update getDelegate to do a null check. Also keeping in mind that there is a race condition working on the member variable. So it would be something like:\nFilter result = this.delegate;\nif (result == null) {\n   // throw\n}\nreturn result;", "url": "https://github.com/spring-projects/spring-security/pull/8451#discussion_r418710043", "createdAt": "2020-05-01T19:54:31Z", "author": {"login": "rwinch"}, "path": "test/src/main/java/org/springframework/security/test/web/servlet/setup/SecurityMockMvcConfigurer.java", "diffHunk": "@@ -123,33 +123,47 @@ Filter getDelegate() {\n \n \t\t@Override\n \t\tpublic void init(FilterConfig filterConfig) throws ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.init(filterConfig);\n \t\t}\n \n \t\t@Override\n \t\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n \t\t\t\tthrows IOException, ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.doFilter(request, response, chain);\n \t\t}\n \n \t\t@Override\n \t\tpublic void destroy() {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.destroy();\n \t\t}\n \n \t\t@Override\n \t\tpublic int hashCode() {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.hashCode();\n \t\t}\n \n \t\t@Override\n \t\tpublic boolean equals(Object obj) {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.equals(obj);\n \t\t}\n \n \t\t@Override\n \t\tpublic String toString() {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.toString();\n \t\t}\n+\n+\t\tprivate void requireDelegate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyNzUxMg==", "bodyText": "Force-pushed this modification, thanks!", "url": "https://github.com/spring-projects/spring-security/pull/8451#discussion_r418927512", "createdAt": "2020-05-02T07:52:21Z", "author": {"login": "dadikovi"}, "path": "test/src/main/java/org/springframework/security/test/web/servlet/setup/SecurityMockMvcConfigurer.java", "diffHunk": "@@ -123,33 +123,47 @@ Filter getDelegate() {\n \n \t\t@Override\n \t\tpublic void init(FilterConfig filterConfig) throws ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.init(filterConfig);\n \t\t}\n \n \t\t@Override\n \t\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n \t\t\t\tthrows IOException, ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.doFilter(request, response, chain);\n \t\t}\n \n \t\t@Override\n \t\tpublic void destroy() {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.destroy();\n \t\t}\n \n \t\t@Override\n \t\tpublic int hashCode() {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.hashCode();\n \t\t}\n \n \t\t@Override\n \t\tpublic boolean equals(Object obj) {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.equals(obj);\n \t\t}\n \n \t\t@Override\n \t\tpublic String toString() {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.toString();\n \t\t}\n+\n+\t\tprivate void requireDelegate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMDA0Mw=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTM3Njc2OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/springframework/security/test/web/servlet/setup/SecurityMockMvcConfigurer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTo1NDo1MVrOGPUClQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1NDozNFrOGQtW9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMDE2NQ==", "bodyText": "We don't use this. on methods...only members.", "url": "https://github.com/spring-projects/spring-security/pull/8451#discussion_r418710165", "createdAt": "2020-05-01T19:54:51Z", "author": {"login": "rwinch"}, "path": "test/src/main/java/org/springframework/security/test/web/servlet/setup/SecurityMockMvcConfigurer.java", "diffHunk": "@@ -123,33 +123,47 @@ Filter getDelegate() {\n \n \t\t@Override\n \t\tpublic void init(FilterConfig filterConfig) throws ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.init(filterConfig);\n \t\t}\n \n \t\t@Override\n \t\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n \t\t\t\tthrows IOException, ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.doFilter(request, response, chain);\n \t\t}\n \n \t\t@Override\n \t\tpublic void destroy() {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.destroy();\n \t\t}\n \n \t\t@Override\n \t\tpublic int hashCode() {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.hashCode();\n \t\t}\n \n \t\t@Override\n \t\tpublic boolean equals(Object obj) {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.equals(obj);\n \t\t}\n \n \t\t@Override\n \t\tpublic String toString() {\n+\t\t\tthis.requireDelegate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyNzQwNw==", "bodyText": "Okay, I fixed it.\nIf you think I could send another PR with a new checkstyle rule, something like this:\n<module name=\"Regexp\"> <property name=\"format\" value=\"this\\s*\\.[a-zA-Z]+\\(\\)\"/> <property name=\"illegalPattern\" value=\"true\"/> <property name=\"message\" value=\"this. on method\"/> </module>\nOff course this PR would include the fixing of existing matches on that pattern as well (currently there are 100+)", "url": "https://github.com/spring-projects/spring-security/pull/8451#discussion_r418927407", "createdAt": "2020-05-02T07:51:21Z", "author": {"login": "dadikovi"}, "path": "test/src/main/java/org/springframework/security/test/web/servlet/setup/SecurityMockMvcConfigurer.java", "diffHunk": "@@ -123,33 +123,47 @@ Filter getDelegate() {\n \n \t\t@Override\n \t\tpublic void init(FilterConfig filterConfig) throws ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.init(filterConfig);\n \t\t}\n \n \t\t@Override\n \t\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n \t\t\t\tthrows IOException, ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.doFilter(request, response, chain);\n \t\t}\n \n \t\t@Override\n \t\tpublic void destroy() {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.destroy();\n \t\t}\n \n \t\t@Override\n \t\tpublic int hashCode() {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.hashCode();\n \t\t}\n \n \t\t@Override\n \t\tpublic boolean equals(Object obj) {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.equals(obj);\n \t\t}\n \n \t\t@Override\n \t\tpublic String toString() {\n+\t\t\tthis.requireDelegate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMDE2NQ=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MzU1OQ==", "bodyText": "That would be great. Thanks!", "url": "https://github.com/spring-projects/spring-security/pull/8451#discussion_r420173559", "createdAt": "2020-05-05T14:54:34Z", "author": {"login": "rwinch"}, "path": "test/src/main/java/org/springframework/security/test/web/servlet/setup/SecurityMockMvcConfigurer.java", "diffHunk": "@@ -123,33 +123,47 @@ Filter getDelegate() {\n \n \t\t@Override\n \t\tpublic void init(FilterConfig filterConfig) throws ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.init(filterConfig);\n \t\t}\n \n \t\t@Override\n \t\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n \t\t\t\tthrows IOException, ServletException {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.doFilter(request, response, chain);\n \t\t}\n \n \t\t@Override\n \t\tpublic void destroy() {\n+\t\t\tthis.requireDelegate();\n \t\t\tthis.delegate.destroy();\n \t\t}\n \n \t\t@Override\n \t\tpublic int hashCode() {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.hashCode();\n \t\t}\n \n \t\t@Override\n \t\tpublic boolean equals(Object obj) {\n+\t\t\tthis.requireDelegate();\n \t\t\treturn this.delegate.equals(obj);\n \t\t}\n \n \t\t@Override\n \t\tpublic String toString() {\n+\t\t\tthis.requireDelegate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMDE2NQ=="}, "originalCommit": null, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1776, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}