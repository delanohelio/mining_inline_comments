{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTIyNDU2", "number": 8653, "title": "Adds cookie based RequestCache", "bodyText": "fixes gh-8034", "createdAt": "2020-06-04T15:32:53Z", "url": "https://github.com/spring-projects/spring-security/pull/8653", "merged": true, "mergeCommit": {"oid": "9708a2d63fb9a1898bae7971953f21ae8aff9340"}, "closed": true, "closedAt": "2020-07-02T11:11:18Z", "author": {"login": "zeeshanadnan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoDjTsAFqTQyNDc2NjEzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwshCEgBqjM1MDMxNzg0OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzY2MTM1", "url": "https://github.com/spring-projects/spring-security/pull/8653#pullrequestreview-424766135", "createdAt": "2020-06-04T19:33:12Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTozMzoxMlrOGfU59g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTo1MDowOVrOGfVceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwMTU1OA==", "bodyText": "I don't think we need to make the cookie name configurable.\nWe can always add this functionality later if a user requests it.\nSimilarly, I don't think we need setCookieMaxAge and setCookiePath for now.", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r435501558", "createdAt": "2020-06-04T19:33:12Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.web.util.UrlUtils;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.util.Assert;\n+import org.springframework.web.util.WebUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+\n+/**\n+ * {@code RequestCache} which stores the {@code SavedRequest} in a cookie.\n+ *\n+ * @author Zeeshan Adnan\n+ */\n+public class CookieRequestCache implements RequestCache {\n+\n+\tprivate RequestMatcher requestMatcher = AnyRequestMatcher.INSTANCE;\n+\tprotected final Log logger = LogFactory.getLog(this.getClass());\n+\n+\tprivate String cookieName = \"saved_request\";\n+\tprivate String cookiePath = null;\n+\tprivate int cookieMaxAge = -1;\n+\n+\t@Override\n+\tpublic void saveRequest(HttpServletRequest request, HttpServletResponse response) {\n+\t\tif (requestMatcher.matches(request)) {\n+\t\t\tString redirectUrl = UrlUtils.buildFullRequestUrl(request);\n+\t\t\tCookie savedCookie = new Cookie(cookieName, redirectUrl);\n+\t\t\tsavedCookie.setMaxAge(cookieMaxAge);\n+\t\t\tsavedCookie.setSecure(request.isSecure());\n+\t\t\tsavedCookie.setPath(cookiePath);\n+\t\t\tsavedCookie.setHttpOnly(true);\n+\t\t\tresponse.addCookie(savedCookie);\n+\t\t} else {\n+\t\t\tlogger.debug(\"Request not saved as configured RequestMatcher did not match\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic SavedRequest getRequest(HttpServletRequest request, HttpServletResponse response) {\n+\t\tCookie savedRequestCookie = WebUtils.getCookie(request, cookieName);\n+\t\treturn savedRequestCookie != null ? new SimpleSavedRequest(savedRequestCookie.getValue()) : null;\n+\t}\n+\n+\t@Override\n+\tpublic HttpServletRequest getMatchingRequest(HttpServletRequest request, HttpServletResponse response) {\n+\t\tSavedRequest savedRequest = getRequest(request, response);\n+\t\tif (savedRequest != null) {\n+\t\t\tremoveRequest(request, response);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void removeRequest(HttpServletRequest request, HttpServletResponse response) {\n+\t\tCookie removeSavedRequestCookie = new Cookie(cookieName, \"\");\n+\t\tremoveSavedRequestCookie.setSecure(request.isSecure());\n+\t\tremoveSavedRequestCookie.setHttpOnly(true);\n+\t\tremoveSavedRequestCookie.setPath(cookiePath);\n+\t\tremoveSavedRequestCookie.setMaxAge(0);\n+\t\tresponse.addCookie(removeSavedRequestCookie);\n+\t}\n+\n+\t/**\n+\t * Allows selective use of saved requests for a subset of requests. By default any\n+\t * request will be cached by the {@code saveRequest} method.\n+\t * <p>\n+\t * If set, only matching requests will be cached.\n+\t *\n+\t * @param requestMatcher a request matching strategy which defines which requests\n+\t *                       should be cached.\n+\t */\n+\tpublic void setRequestMatcher(RequestMatcher requestMatcher) {\n+\t\tAssert.notNull(requestMatcher, \"requestMatcher should not be null\");\n+\t\tthis.requestMatcher = requestMatcher;\n+\t}\n+\n+\t/**\n+\t * If the {@code cookieName} property is set, the request is stored in\n+\t * the cookie using this attribute name. Default is\n+\t * \"saved_request\".\n+\t *\n+\t * @param cookieName is the new name of the cookie.\n+\t */\n+\tpublic void setCookieName(String cookieName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwMzYyNw==", "bodyText": "We should let users know that this cache will not store the complete request, but just the request URI.\nUnlike HttpSessionRequestCache, it does not store headers etc.", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r435503627", "createdAt": "2020-06-04T19:37:22Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.web.util.UrlUtils;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.util.Assert;\n+import org.springframework.web.util.WebUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+\n+/**\n+ * {@code RequestCache} which stores the {@code SavedRequest} in a cookie.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNzE2MQ==", "bodyText": "This should use DefaultSavedRequest instead of SimpleSavedRequest", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r435507161", "createdAt": "2020-06-04T19:43:53Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.web.util.UrlUtils;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.util.Assert;\n+import org.springframework.web.util.WebUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+\n+/**\n+ * {@code RequestCache} which stores the {@code SavedRequest} in a cookie.\n+ *\n+ * @author Zeeshan Adnan\n+ */\n+public class CookieRequestCache implements RequestCache {\n+\n+\tprivate RequestMatcher requestMatcher = AnyRequestMatcher.INSTANCE;\n+\tprotected final Log logger = LogFactory.getLog(this.getClass());\n+\n+\tprivate String cookieName = \"saved_request\";\n+\tprivate String cookiePath = null;\n+\tprivate int cookieMaxAge = -1;\n+\n+\t@Override\n+\tpublic void saveRequest(HttpServletRequest request, HttpServletResponse response) {\n+\t\tif (requestMatcher.matches(request)) {\n+\t\t\tString redirectUrl = UrlUtils.buildFullRequestUrl(request);\n+\t\t\tCookie savedCookie = new Cookie(cookieName, redirectUrl);\n+\t\t\tsavedCookie.setMaxAge(cookieMaxAge);\n+\t\t\tsavedCookie.setSecure(request.isSecure());\n+\t\t\tsavedCookie.setPath(cookiePath);\n+\t\t\tsavedCookie.setHttpOnly(true);\n+\t\t\tresponse.addCookie(savedCookie);\n+\t\t} else {\n+\t\t\tlogger.debug(\"Request not saved as configured RequestMatcher did not match\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic SavedRequest getRequest(HttpServletRequest request, HttpServletResponse response) {\n+\t\tCookie savedRequestCookie = WebUtils.getCookie(request, cookieName);\n+\t\treturn savedRequestCookie != null ? new SimpleSavedRequest(savedRequestCookie.getValue()) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMDM5NA==", "bodyText": "The URL should be encoded before being saved.\nA URL may contain a comma, which is an invalid character in a cookie value.\nSee CookieServerRequestCache for an example\n\n  \n    \n      spring-security/web/src/main/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCache.java\n    \n    \n         Line 127\n      in\n      28d2cfa\n    \n    \n    \n    \n\n        \n          \n           private static String encodeCookie(String cookieValue) {", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r435510394", "createdAt": "2020-06-04T19:50:09Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.web.util.UrlUtils;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.util.Assert;\n+import org.springframework.web.util.WebUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+\n+/**\n+ * {@code RequestCache} which stores the {@code SavedRequest} in a cookie.\n+ *\n+ * @author Zeeshan Adnan\n+ */\n+public class CookieRequestCache implements RequestCache {\n+\n+\tprivate RequestMatcher requestMatcher = AnyRequestMatcher.INSTANCE;\n+\tprotected final Log logger = LogFactory.getLog(this.getClass());\n+\n+\tprivate String cookieName = \"saved_request\";\n+\tprivate String cookiePath = null;\n+\tprivate int cookieMaxAge = -1;\n+\n+\t@Override\n+\tpublic void saveRequest(HttpServletRequest request, HttpServletResponse response) {\n+\t\tif (requestMatcher.matches(request)) {\n+\t\t\tString redirectUrl = UrlUtils.buildFullRequestUrl(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI4MTI3", "url": "https://github.com/spring-projects/spring-security/pull/8653#pullrequestreview-435628127", "createdAt": "2020-06-23T09:57:45Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1Nzo0NVrOGniHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoyNzozNlrOGnpMkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNjUxNA==", "bodyText": "Please use \"https://\" here, or a relative URL. We avoid using \"http://\" in our code and use the nohttp library to find occurrences. You can read more about it here https://github.com/spring-io/nohttp.", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r444106514", "createdAt": "2020-06-23T09:57:45Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/savedrequest/RequestCacheAwareFilterTests.java", "diffHunk": "@@ -40,4 +43,31 @@ public void savedRequestIsRemovedAfterMatch() throws Exception {\n \t\tassertThat(request.getSession().getAttribute(\n \t\t\t\tHttpSessionRequestCache.SAVED_REQUEST)).isNull();\n \t}\n+\n+\t@Test\n+\tpublic void savedRequestCookieIsSetExpiredAfterMatchForCookieRequestCache() throws Exception {\n+\t\tCookieRequestCache cache = new CookieRequestCache();\n+\t\tRequestCacheAwareFilter filter = new RequestCacheAwareFilter(cache);\n+\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.setServerName(\"abc.com\");\n+\t\trequest.setRequestURI(\"/destination\");\n+\n+\t\tString encodedRedirectUrl = Base64.getEncoder().encodeToString(\"http://abc.com/destination\".getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNjYxNg==", "bodyText": "Please use \"https://\" here, or a relative path. We avoid using \"http://\" in our code and use the nohttp library to find occurrences. You can read more about it here https://github.com/spring-io/nohttp.", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r444106616", "createdAt": "2020-06-23T09:57:57Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import java.util.Base64;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+/**\n+ * @author Zeeshan Adnan\n+ */\n+public class CookieRequestCacheTests {\n+\n+\tprivate static final String DEFAULT_COOKIE_NAME = \"saved_request\";\n+\n+\t@Test\n+\tpublic void originalRequestSetsSavedRequestInACookieOnResponse() {\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\n+\t\tMockHttpServletRequest request = requestToSave();\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\tcookieRequestCache.saveRequest(request, response);\n+\n+\t\tCookie savedCookie = response.getCookie(DEFAULT_COOKIE_NAME);\n+\t\tassertThat(savedCookie).isNotNull();\n+\n+\t\tString redirectUrl = decodeCookie(savedCookie.getValue());\n+\t\tassertThat(redirectUrl).isEqualTo(\"https://abc.com/destination?param1=a&param2=b&param3=1122\");\n+\n+\t\tassertThat(savedCookie.getMaxAge()).isEqualTo(-1);\n+\t\tassertThat(savedCookie.getPath()).isNull();\n+\t\tassertThat(savedCookie.isHttpOnly()).isTrue();\n+\t\tassertThat(savedCookie.getSecure()).isTrue();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void nullRequestMatcherThrowsIllegalArgumentException() {\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tassertThatThrownBy(() -> cookieRequestCache.setRequestMatcher(null))\n+\t\t\t\t.isInstanceOf(IllegalArgumentException.class);\n+\t}\n+\n+\t@Test\n+\tpublic void requestMatcherDefinesCorrectSubsetOfCachedRequests() {\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tcookieRequestCache.setRequestMatcher(request -> request.getRequestURI().equals(\"/expected-destination\"));\n+\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/destination\");\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\t\tcookieRequestCache.saveRequest(request, response);\n+\n+\t\tSavedRequest savedRequest = cookieRequestCache.getRequest(request, response);\n+\t\tassertThat(savedRequest).isNull();\n+\n+\t\tHttpServletRequest matchingRequest = cookieRequestCache.getMatchingRequest(request, response);\n+\t\tassertThat(matchingRequest).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void getRequestMethodReturnsNullOnRequestWithoutCookies() {\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tSavedRequest savedRequest = cookieRequestCache.getRequest(new MockHttpServletRequest(), new MockHttpServletResponse());\n+\t\tassertThat(savedRequest).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void getRequestMethodReturnsNullOnRequestWithoutSavedRequestCookie() {\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.setCookies(new Cookie(\"abc_cookie\", \"value\"));\n+\t\tSavedRequest savedRequest = cookieRequestCache.getRequest(request, new MockHttpServletResponse());\n+\t\tassertThat(savedRequest).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void getRequestMethodReturnsSaveRequestOnRequestWithSavedRequestCookie() {\n+\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\tString redirectUrl = \"https://abc.com/destination?param1=a&param2=b&param3=1122\";\n+\t\trequest.setCookies(new Cookie(DEFAULT_COOKIE_NAME, encodeCookie(redirectUrl)));\n+\n+\t\tSavedRequest savedRequest = cookieRequestCache.getRequest(request, new MockHttpServletResponse());\n+\t\tassertThat(savedRequest).isNotNull();\n+\t\tassertThat(savedRequest.getRedirectUrl()).isEqualTo(redirectUrl);\n+\t}\n+\n+\t@Test\n+\tpublic void matchingRequestMethodReturnsNullOnRequestWithoutSavedRequestCookie() {\n+\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\tHttpServletRequest matchingRequest = cookieRequestCache.getMatchingRequest(new MockHttpServletRequest(), response);\n+\t\tassertThat(matchingRequest).isNull();\n+\t\tassertThat(response.getCookie(DEFAULT_COOKIE_NAME)).isNull();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void matchingRequestMethodSetsAnExpiredCookieOnRequestWithSavedRequestCookie() {\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\tString redirectUrl = \"http://abc.com/destination?param1=a&param2=b&param3=1122\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4ODAyMA==", "bodyText": "In order to be consistent with the server implementation, the cookie should be named \"REDIRECT_URI\".", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r444188020", "createdAt": "2020-06-23T12:35:12Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.web.util.UrlUtils;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.util.Assert;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Base64;\n+\n+\n+/**\n+ * An Implementation of {@code RequestCache} which saves the original request URI in a cookie.\n+ *\n+ * @author Zeeshan Adnan\n+ */\n+public class CookieRequestCache implements RequestCache {\n+\n+\tprivate RequestMatcher requestMatcher = AnyRequestMatcher.INSTANCE;\n+\tprotected final Log logger = LogFactory.getLog(this.getClass());\n+\n+\tprivate static final String COOKIE_NAME = \"saved_request\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5NTU0Nw==", "bodyText": "Is there a reason why the path is hardcoded to null?\nI would expect it to change based on the request.", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r444195547", "createdAt": "2020-06-23T12:47:30Z", "author": {"login": "eleftherias"}, "path": "web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.web.util.UrlUtils;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.util.Assert;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.WebUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Base64;\n+\n+\n+/**\n+ * An Implementation of {@code RequestCache} which saves the original request URI in a cookie.\n+ *\n+ * @author Zeeshan Adnan\n+ */\n+public class CookieRequestCache implements RequestCache {\n+\n+\tprivate RequestMatcher requestMatcher = AnyRequestMatcher.INSTANCE;\n+\tprotected final Log logger = LogFactory.getLog(this.getClass());\n+\n+\tprivate static final String COOKIE_NAME = \"saved_request\";\n+\tprivate static final String COOKIE_PATH = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMjYwOQ==", "bodyText": "In an effort to have test names be consistent across the codebase, we would like all new tests to follow the naming convention methodWhenConditionThenResult.\nFor example, this test could be renamed to something like saveRequestWhenMatchesThenSavedRequestInACookieOnResponse.", "url": "https://github.com/spring-projects/spring-security/pull/8653#discussion_r444222609", "createdAt": "2020-06-23T13:27:36Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.web.savedrequest;\n+\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import java.util.Base64;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+/**\n+ * @author Zeeshan Adnan\n+ */\n+public class CookieRequestCacheTests {\n+\n+\tprivate static final String DEFAULT_COOKIE_NAME = \"saved_request\";\n+\n+\t@Test\n+\tpublic void originalRequestSetsSavedRequestInACookieOnResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b7a327e2bf0bf2ee625bbcc223995bb2813f7c", "author": {"user": {"login": "zeeshanadnan", "name": "Zeeshan Adnan"}}, "url": "https://github.com/spring-projects/spring-security/commit/92b7a327e2bf0bf2ee625bbcc223995bb2813f7c", "committedDate": "2020-07-01T16:05:51Z", "message": "Adds cookie based RequestCache\nfixes spring-projectsgh-8034"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "92b7a327e2bf0bf2ee625bbcc223995bb2813f7c", "author": {"user": {"login": "zeeshanadnan", "name": "Zeeshan Adnan"}}, "url": "https://github.com/spring-projects/spring-security/commit/92b7a327e2bf0bf2ee625bbcc223995bb2813f7c", "committedDate": "2020-07-01T16:05:51Z", "message": "Adds cookie based RequestCache\nfixes spring-projectsgh-8034"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4973, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}