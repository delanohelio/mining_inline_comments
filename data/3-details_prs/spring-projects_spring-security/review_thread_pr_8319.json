{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTEyMzIz", "number": 8319, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToxNzoxN1rODua-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToxNzoxN1rODua-vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDAzMTMyOnYy", "diffSide": "RIGHT", "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/HttpSecurityDslTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToxNzoxN1rOGAZ_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozMzo1MFrOGAasGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3OTA5OQ==", "bodyText": "It would make sense to move CustomFilter outside of the configuration classes, and into the test class, since it is used in multiple tests.", "url": "https://github.com/spring-projects/spring-security/pull/8319#discussion_r403079099", "createdAt": "2020-04-03T15:17:17Z", "author": {"login": "eleftherias"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/HttpSecurityDslTests.kt", "diffHunk": "@@ -239,4 +239,56 @@ class HttpSecurityDslTests {\n \n         class CustomFilter : UsernamePasswordAuthenticationFilter()\n     }\n+\n+    @Test\n+    fun `HTTP security when custom filter configured then custom filter added after specific filter to filter chain`() {\n+        this.spring.register(CustomFilterAfterConfig::class.java).autowire()\n+\n+        val filterChain = spring.context.getBean(FilterChainProxy::class.java)\n+        val filters: List<Class<out Filter>> = filterChain.getFilters(\"/\").map { it.javaClass }\n+\n+        assertThat(filters).containsSubsequence(\n+            UsernamePasswordAuthenticationFilter::class.java,\n+            CustomFilterAfterConfig.CustomFilter::class.java\n+        )\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class CustomFilterAfterConfig : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                addFilterAfter(CustomFilter(), UsernamePasswordAuthenticationFilter::class.java)\n+                formLogin {}\n+            }\n+        }\n+\n+        class CustomFilter : UsernamePasswordAuthenticationFilter()\n+    }\n+\n+    @Test\n+    fun `HTTP security when custom filter configured then custom filter added before specific filter to filter chain`() {\n+        this.spring.register(CustomFilterBeforeConfig::class.java).autowire()\n+\n+        val filterChain = spring.context.getBean(FilterChainProxy::class.java)\n+        val filters: List<Class<out Filter>> = filterChain.getFilters(\"/\").map { it.javaClass }\n+\n+        assertThat(filters).containsSubsequence(\n+            CustomFilterBeforeConfig.CustomFilter::class.java,\n+            UsernamePasswordAuthenticationFilter::class.java\n+        )\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class CustomFilterBeforeConfig : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                addFilterBefore(CustomFilter(), UsernamePasswordAuthenticationFilter::class.java)\n+                formLogin {}\n+            }\n+        }\n+\n+        class CustomFilter : UsernamePasswordAuthenticationFilter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2413369e83da5ce6f4f0e754b4da76b9d8e4c28"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MDQ1Nw==", "bodyText": "Done", "url": "https://github.com/spring-projects/spring-security/pull/8319#discussion_r403090457", "createdAt": "2020-04-03T15:33:50Z", "author": {"login": "mengelbrecht"}, "path": "config/src/test/kotlin/org/springframework/security/config/web/servlet/HttpSecurityDslTests.kt", "diffHunk": "@@ -239,4 +239,56 @@ class HttpSecurityDslTests {\n \n         class CustomFilter : UsernamePasswordAuthenticationFilter()\n     }\n+\n+    @Test\n+    fun `HTTP security when custom filter configured then custom filter added after specific filter to filter chain`() {\n+        this.spring.register(CustomFilterAfterConfig::class.java).autowire()\n+\n+        val filterChain = spring.context.getBean(FilterChainProxy::class.java)\n+        val filters: List<Class<out Filter>> = filterChain.getFilters(\"/\").map { it.javaClass }\n+\n+        assertThat(filters).containsSubsequence(\n+            UsernamePasswordAuthenticationFilter::class.java,\n+            CustomFilterAfterConfig.CustomFilter::class.java\n+        )\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class CustomFilterAfterConfig : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                addFilterAfter(CustomFilter(), UsernamePasswordAuthenticationFilter::class.java)\n+                formLogin {}\n+            }\n+        }\n+\n+        class CustomFilter : UsernamePasswordAuthenticationFilter()\n+    }\n+\n+    @Test\n+    fun `HTTP security when custom filter configured then custom filter added before specific filter to filter chain`() {\n+        this.spring.register(CustomFilterBeforeConfig::class.java).autowire()\n+\n+        val filterChain = spring.context.getBean(FilterChainProxy::class.java)\n+        val filters: List<Class<out Filter>> = filterChain.getFilters(\"/\").map { it.javaClass }\n+\n+        assertThat(filters).containsSubsequence(\n+            CustomFilterBeforeConfig.CustomFilter::class.java,\n+            UsernamePasswordAuthenticationFilter::class.java\n+        )\n+    }\n+\n+    @EnableWebSecurity\n+    @EnableWebMvc\n+    open class CustomFilterBeforeConfig : WebSecurityConfigurerAdapter() {\n+        override fun configure(http: HttpSecurity) {\n+            http {\n+                addFilterBefore(CustomFilter(), UsernamePasswordAuthenticationFilter::class.java)\n+                formLogin {}\n+            }\n+        }\n+\n+        class CustomFilter : UsernamePasswordAuthenticationFilter()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3OTA5OQ=="}, "originalCommit": {"oid": "a2413369e83da5ce6f4f0e754b4da76b9d8e4c28"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1817, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}