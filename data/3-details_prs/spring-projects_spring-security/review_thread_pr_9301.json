{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTY5NzU0", "number": 9301, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToyMjowMFrOFLceOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToyMjo0MFrOFLcfRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTQ1MTQ0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/springframework/security/web/util/matcher/AntPathRequestMatcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToyMjowMFrOIOnutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOToxMzowNVrOIS-V0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMTkxMA==", "bodyText": "It seems like this.matcher == null should be the first check in order to avoid potential NPEs in matches(HttpServletRequest).", "url": "https://github.com/spring-projects/spring-security/pull/9301#discussion_r552201910", "createdAt": "2021-01-05T21:22:00Z", "author": {"login": "jzheaux"}, "path": "web/src/main/java/org/springframework/security/web/util/matcher/AntPathRequestMatcher.java", "diffHunk": "@@ -159,9 +160,12 @@ public boolean matches(HttpServletRequest request) {\n \n \t@Override\n \tpublic MatchResult matcher(HttpServletRequest request) {\n-\t\tif (this.matcher == null || !matches(request)) {\n+\t\tif (!matches(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNzA1Mg==", "bodyText": "The matcher will only be null if the pattern is MATCH_ALL, and we need to check the HttpMethod first.", "url": "https://github.com/spring-projects/spring-security/pull/9301#discussion_r553117052", "createdAt": "2021-01-07T05:29:54Z", "author": {"login": "evgeniycheban"}, "path": "web/src/main/java/org/springframework/security/web/util/matcher/AntPathRequestMatcher.java", "diffHunk": "@@ -159,9 +160,12 @@ public boolean matches(HttpServletRequest request) {\n \n \t@Override\n \tpublic MatchResult matcher(HttpServletRequest request) {\n-\t\tif (this.matcher == null || !matches(request)) {\n+\t\tif (!matches(request)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMTkxMA=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTExNTY1NQ==", "bodyText": "Good point. Is the null check necessary, then? It seems like it could be removed.", "url": "https://github.com/spring-projects/spring-security/pull/9301#discussion_r555115655", "createdAt": "2021-01-11T15:13:00Z", "author": {"login": "jzheaux"}, "path": "web/src/main/java/org/springframework/security/web/util/matcher/AntPathRequestMatcher.java", "diffHunk": "@@ -159,9 +160,12 @@ public boolean matches(HttpServletRequest request) {\n \n \t@Override\n \tpublic MatchResult matcher(HttpServletRequest request) {\n-\t\tif (this.matcher == null || !matches(request)) {\n+\t\tif (!matches(request)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMTkxMA=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NjY3NA==", "bodyText": "The null check is necessary since matcher is used to extract variables, for the MATCH_ALL pattern there will be an empty Map of variables.", "url": "https://github.com/spring-projects/spring-security/pull/9301#discussion_r556766674", "createdAt": "2021-01-13T19:13:05Z", "author": {"login": "evgeniycheban"}, "path": "web/src/main/java/org/springframework/security/web/util/matcher/AntPathRequestMatcher.java", "diffHunk": "@@ -159,9 +160,12 @@ public boolean matches(HttpServletRequest request) {\n \n \t@Override\n \tpublic MatchResult matcher(HttpServletRequest request) {\n-\t\tif (this.matcher == null || !matches(request)) {\n+\t\tif (!matches(request)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMTkxMA=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTQ1NDE0OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/util/matcher/AntPathRequestMatcherTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToyMjo0MFrOIOnwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwNzozOTozMVrOIQoIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMjM4Mg==", "bodyText": "Since this is a bug, will you please add // gh-9285 above the test?", "url": "https://github.com/spring-projects/spring-security/pull/9301#discussion_r552202382", "createdAt": "2021-01-05T21:22:40Z", "author": {"login": "jzheaux"}, "path": "web/src/test/java/org/springframework/security/web/util/matcher/AntPathRequestMatcherTests.java", "diffHunk": "@@ -196,6 +197,13 @@ public void matchesWithInvalidMethod() {\n \t\tassertThat(matcher.matches(request)).isFalse();\n \t}\n \n+\t@Test\n+\tpublic void matcherWhenMatchAllPatternThenMatchResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDMwNTY0MQ==", "bodyText": "Done.", "url": "https://github.com/spring-projects/spring-security/pull/9301#discussion_r554305641", "createdAt": "2021-01-09T07:39:31Z", "author": {"login": "evgeniycheban"}, "path": "web/src/test/java/org/springframework/security/web/util/matcher/AntPathRequestMatcherTests.java", "diffHunk": "@@ -196,6 +197,13 @@ public void matchesWithInvalidMethod() {\n \t\tassertThat(matcher.matches(request)).isFalse();\n \t}\n \n+\t@Test\n+\tpublic void matcherWhenMatchAllPatternThenMatchResult() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMjM4Mg=="}, "originalCommit": null, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1731, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}