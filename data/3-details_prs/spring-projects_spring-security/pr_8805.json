{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NDczNzY3", "number": 8805, "title": "Remove need for WebSecurityConfigurerAdapter", "bodyText": "Closes gh-8804", "createdAt": "2020-07-07T15:03:45Z", "url": "https://github.com/spring-projects/spring-security/pull/8805", "merged": true, "mergeCommit": {"oid": "aeafe0426031524f371fd98d635f1d2cbdd3f56a"}, "closed": true, "closedAt": "2020-08-05T14:10:13Z", "author": {"login": "eleftherias"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy7XpBgFqTQ0NDgxODMxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6IsTJgFqTQ1ODgzNTM4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODE4MzE2", "url": "https://github.com/spring-projects/spring-security/pull/8805#pullrequestreview-444818316", "createdAt": "2020-07-08T14:23:36Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDoyMzozNlrOGuqlLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDozMDo0M1rOGuq6iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NTMyNw==", "bodyText": "I wonder if we could avoid the use of powermock here? Instead we could validate that using the resulting WebAsncManager uses SecurityContextCallableProcessingInterceptor by ensuring the SecurityContext is propagated", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r451585327", "createdAt": "2020-07-08T14:23:36Z", "author": {"login": "rwinch"}, "path": "config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationPowermockTests.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.config.annotation.web.configuration;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.core.io.support.SpringFactoriesLoader;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.test.SpringTestRule;\n+import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.web.context.request.async.CallableProcessingInterceptor;\n+import org.springframework.web.context.request.async.WebAsyncManager;\n+import org.springframework.web.context.request.async.WebAsyncUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+\n+/**\n+ * Tests for {@link HttpSecurityConfiguration}.\n+ *\n+ * @author Eleftheria Stein\n+ */\n+@RunWith(PowerMockRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4OTI4Nw==", "bodyText": "I wonder if we could/should use this.securityFilterChainBuilders.add(() -> securityFilterChain) instead. This would mean that performBuild could stay the same and be simplified (it only operates on a single collection instead of two.", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r451589287", "createdAt": "2020-07-08T14:28:46Z", "author": {"login": "rwinch"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java", "diffHunk": "@@ -208,6 +205,25 @@ public WebSecurity addSecurityFilterChainBuilder(\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Adds {@link SecurityFilterChain} instances.\n+\t * </p>\n+\t *\n+\t * <p>\n+\t * Typically this method is invoked automatically within the framework from\n+\t * {@link WebSecurityConfigurerAdapter#init(WebSecurity)}\n+\t * </p>\n+\t *\n+\t * @since 5.4\n+\t * @param securityFilterChain the {@link SecurityFilterChain} instance\n+\t * @return the {@link WebSecurity} for further customizations\n+\t */\n+\tpublic WebSecurity addSecurityFilterChain(SecurityFilterChain securityFilterChain) {\n+\t\tthis.securityFilterChains.add(securityFilterChain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5MDc5Mw==", "bodyText": "Is there a reason to limit to one or the other?", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r451590793", "createdAt": "2020-07-08T14:30:43Z", "author": {"login": "rwinch"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.java", "diffHunk": "@@ -95,12 +100,27 @@ public static DelegatingApplicationListener delegatingApplicationListener() {\n \tpublic Filter springSecurityFilterChain() throws Exception {\n \t\tboolean hasConfigurers = webSecurityConfigurers != null\n \t\t\t\t&& !webSecurityConfigurers.isEmpty();\n-\t\tif (!hasConfigurers) {\n+\t\tboolean hasFilterChain = !securityFilterChains.isEmpty();\n+\t\tif (hasConfigurers && hasFilterChain) {\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\"Found WebSecurityConfigurerAdapter as well as SecurityFilterChain.\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e3763f85a8b2e5394f14618b07ff2eb7654bce", "author": {"user": {"login": "eleftherias", "name": "Eleftheria Stein-Kousathana"}}, "url": "https://github.com/spring-projects/spring-security/commit/43e3763f85a8b2e5394f14618b07ff2eb7654bce", "committedDate": "2020-07-13T15:33:16Z", "message": "Remove need for WebSecurityConfigurerAdapter\n\nCloses gh-8804"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "43e3763f85a8b2e5394f14618b07ff2eb7654bce", "author": {"user": {"login": "eleftherias", "name": "Eleftheria Stein-Kousathana"}}, "url": "https://github.com/spring-projects/spring-security/commit/43e3763f85a8b2e5394f14618b07ff2eb7654bce", "committedDate": "2020-07-13T15:33:16Z", "message": "Remove need for WebSecurityConfigurerAdapter\n\nCloses gh-8804"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODMzNTc4", "url": "https://github.com/spring-projects/spring-security/pull/8805#pullrequestreview-455833578", "createdAt": "2020-07-27T14:25:49Z", "commit": {"oid": "43e3763f85a8b2e5394f14618b07ff2eb7654bce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODM1Mzg1", "url": "https://github.com/spring-projects/spring-security/pull/8805#pullrequestreview-458835385", "createdAt": "2020-07-30T23:47:45Z", "commit": {"oid": "43e3763f85a8b2e5394f14618b07ff2eb7654bce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo0Nzo0NlrOG53g6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo0Nzo0NlrOG53g6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMTU2Mw==", "bodyText": "What are the consequences of not adding the other shared objects that WebSecurityConfigurerAdapter adds?", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r463331563", "createdAt": "2020-07-30T23:47:46Z", "author": {"login": "jzheaux"}, "path": "config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.config.annotation.web.configuration;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer;\n+import org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+/**\n+ * {@link Configuration} that exposes the {@link HttpSecurity} bean.\n+ *\n+ * @author Eleftheria Stein\n+ * @since 5.4\n+ */\n+@Configuration(proxyBeanMethods = false)\n+class HttpSecurityConfiguration {\n+\tprivate static final String BEAN_NAME_PREFIX = \"org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.\";\n+\tprivate static final String HTTPSECURITY_BEAN_NAME = BEAN_NAME_PREFIX + \"httpSecurity\";\n+\n+\tprivate ObjectPostProcessor<Object> objectPostProcessor;\n+\n+\tprivate AuthenticationManager authenticationManager;\n+\n+\tprivate AuthenticationConfiguration authenticationConfiguration;\n+\n+\tprivate ApplicationContext context;\n+\n+\t@Autowired\n+\tpublic void setObjectPostProcessor(ObjectPostProcessor<Object> objectPostProcessor) {\n+\t\tthis.objectPostProcessor = objectPostProcessor;\n+\t}\n+\n+\t@Autowired(required = false)\n+\tvoid setAuthenticationManager(AuthenticationManager authenticationManager) {\n+\t\tthis.authenticationManager = authenticationManager;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setAuthenticationConfiguration(\n+\t\t\tAuthenticationConfiguration authenticationConfiguration) {\n+\t\tthis.authenticationConfiguration = authenticationConfiguration;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setApplicationContext(ApplicationContext context) {\n+\t\tthis.context = context;\n+\t}\n+\n+\t@Bean(HTTPSECURITY_BEAN_NAME)\n+\t@Scope(\"prototype\")\n+\tpublic HttpSecurity httpSecurity() throws Exception {\n+\t\tWebSecurityConfigurerAdapter.LazyPasswordEncoder passwordEncoder =\n+\t\t\t\tnew WebSecurityConfigurerAdapter.LazyPasswordEncoder(this.context);\n+\n+\t\tAuthenticationManagerBuilder authenticationBuilder =\n+\t\t\t\tnew WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder(this.objectPostProcessor, passwordEncoder);\n+\t\tauthenticationBuilder.parentAuthenticationManager(authenticationManager());\n+\n+\t\tHttpSecurity http = new HttpSecurity(objectPostProcessor, authenticationBuilder, createSharedObjects());\n+\t\thttp\n+\t\t\t\t.csrf(withDefaults())\n+\t\t\t\t.addFilter(new WebAsyncManagerIntegrationFilter())\n+\t\t\t\t.exceptionHandling(withDefaults())\n+\t\t\t\t.headers(withDefaults())\n+\t\t\t\t.sessionManagement(withDefaults())\n+\t\t\t\t.securityContext(withDefaults())\n+\t\t\t\t.requestCache(withDefaults())\n+\t\t\t\t.anonymous(withDefaults())\n+\t\t\t\t.servletApi(withDefaults())\n+\t\t\t\t.logout(withDefaults())\n+\t\t\t\t.apply(new DefaultLoginPageConfigurer<>());\n+\n+\t\treturn http;\n+\t}\n+\n+\tprivate AuthenticationManager authenticationManager() throws Exception {\n+\t\tif (this.authenticationManager != null) {\n+\t\t\treturn this.authenticationManager;\n+\t\t} else {\n+\t\t\treturn this.authenticationConfiguration.getAuthenticationManager();\n+\t\t}\n+\t}\n+\n+\tprivate Map<Class<?>, Object> createSharedObjects() {\n+\t\tMap<Class<?>, Object> sharedObjects = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e3763f85a8b2e5394f14618b07ff2eb7654bce"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4870, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}