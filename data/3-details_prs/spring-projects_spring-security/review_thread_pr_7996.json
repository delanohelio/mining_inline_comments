{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjQ1ODM0", "number": 7996, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0MTozM1rODhIq3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoyOTozN1rODhPtnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDcxNjQ2OnYy", "diffSide": "RIGHT", "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0MTozM1rOFrutyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0MTozM1rOFrutyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5ODQ3Mg==", "bodyText": "if assume that predicate is stateless (as far as result is cached indefinitely) this could be rewritten to\n@Override\npublic Mono<ReactiveAuthenticationManager> resolve(String issuer) {\n\tif (!this.trustedIssuer.test(issuer)) {\n\t\treturn Mono.empty();\n\t}\n\treturn this.authenticationManagers.computeIfAbsent(issuer, k ->\n\t\t\tMono.<ReactiveAuthenticationManager>fromCallable(() ->\n\t\t\t\t\tnew JwtReactiveAuthenticationManager(ReactiveJwtDecoders.fromIssuerLocation(k))\n\t\t\t)\n\t\t\t.subscribeOn(Schedulers.boundedElastic())\n\t\t\t.cache());\n}\nthis will reduce 3 operators and allocations", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r381398472", "createdAt": "2020-02-19T16:41:33Z", "author": {"login": "robotmrv"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -166,7 +167,7 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \t\t\t\t\t.filter(this.trustedIssuer)\n \t\t\t\t\t.flatMap(iss ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTg3MDM5OnYy", "diffSide": "LEFT", "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoyOTozN1rOFr6B1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTowODozM1rOFsze2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA==", "bodyText": "original exception is not passed as cause. Is it intentionally?", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r381583830", "createdAt": "2020-02-19T22:29:37Z", "author": {"login": "robotmrv"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -133,26 +133,26 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \n \t\t@Override\n \t\tpublic Mono<String> convert(@NonNull ServerWebExchange exchange) {\n-\t\t\treturn this.converter.convert(exchange)\n-\t\t\t\t\t.cast(BearerTokenAuthenticationToken.class)\n-\t\t\t\t\t.flatMap(this::issuer);\n-\t\t}\n-\n-\t\tprivate Mono<String> issuer(BearerTokenAuthenticationToken token) {\n-\t\t\ttry {\n-\t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n-\t\t\t\treturn Mono.justOrEmpty(issuer).switchIfEmpty(\n-\t\t\t\t\t\tMono.error(new InvalidBearerTokenException(\"Missing issuer\")));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treturn Mono.error(new InvalidBearerTokenException(e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwODg1Mg==", "bodyText": "That's likely an oversight, especially since the servlet version wraps the exception. Would you like to update your PR to include this change as well?", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382208852", "createdAt": "2020-02-20T19:25:38Z", "author": {"login": "jzheaux"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -133,26 +133,26 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \n \t\t@Override\n \t\tpublic Mono<String> convert(@NonNull ServerWebExchange exchange) {\n-\t\t\treturn this.converter.convert(exchange)\n-\t\t\t\t\t.cast(BearerTokenAuthenticationToken.class)\n-\t\t\t\t\t.flatMap(this::issuer);\n-\t\t}\n-\n-\t\tprivate Mono<String> issuer(BearerTokenAuthenticationToken token) {\n-\t\t\ttry {\n-\t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n-\t\t\t\treturn Mono.justOrEmpty(issuer).switchIfEmpty(\n-\t\t\t\t\t\tMono.error(new InvalidBearerTokenException(\"Missing issuer\")));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treturn Mono.error(new InvalidBearerTokenException(e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMTYzNA==", "bodyText": "no problem", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382221634", "createdAt": "2020-02-20T19:49:53Z", "author": {"login": "robotmrv"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -133,26 +133,26 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \n \t\t@Override\n \t\tpublic Mono<String> convert(@NonNull ServerWebExchange exchange) {\n-\t\t\treturn this.converter.convert(exchange)\n-\t\t\t\t\t.cast(BearerTokenAuthenticationToken.class)\n-\t\t\t\t\t.flatMap(this::issuer);\n-\t\t}\n-\n-\t\tprivate Mono<String> issuer(BearerTokenAuthenticationToken token) {\n-\t\t\ttry {\n-\t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n-\t\t\t\treturn Mono.justOrEmpty(issuer).switchIfEmpty(\n-\t\t\t\t\t\tMono.error(new InvalidBearerTokenException(\"Missing issuer\")));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treturn Mono.error(new InvalidBearerTokenException(e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMjU1OQ==", "bodyText": "could it be separate commit or should it be integrated into first/second?", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382222559", "createdAt": "2020-02-20T19:51:41Z", "author": {"login": "robotmrv"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -133,26 +133,26 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \n \t\t@Override\n \t\tpublic Mono<String> convert(@NonNull ServerWebExchange exchange) {\n-\t\t\treturn this.converter.convert(exchange)\n-\t\t\t\t\t.cast(BearerTokenAuthenticationToken.class)\n-\t\t\t\t\t.flatMap(this::issuer);\n-\t\t}\n-\n-\t\tprivate Mono<String> issuer(BearerTokenAuthenticationToken token) {\n-\t\t\ttry {\n-\t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n-\t\t\t\treturn Mono.justOrEmpty(issuer).switchIfEmpty(\n-\t\t\t\t\t\tMono.error(new InvalidBearerTokenException(\"Missing issuer\")));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treturn Mono.error(new InvalidBearerTokenException(e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNTE0NA==", "bodyText": "done it in polish commit", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382525144", "createdAt": "2020-02-21T11:08:33Z", "author": {"login": "robotmrv"}, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -133,26 +133,26 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \n \t\t@Override\n \t\tpublic Mono<String> convert(@NonNull ServerWebExchange exchange) {\n-\t\t\treturn this.converter.convert(exchange)\n-\t\t\t\t\t.cast(BearerTokenAuthenticationToken.class)\n-\t\t\t\t\t.flatMap(this::issuer);\n-\t\t}\n-\n-\t\tprivate Mono<String> issuer(BearerTokenAuthenticationToken token) {\n-\t\t\ttry {\n-\t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n-\t\t\t\treturn Mono.justOrEmpty(issuer).switchIfEmpty(\n-\t\t\t\t\t\tMono.error(new InvalidBearerTokenException(\"Missing issuer\")));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treturn Mono.error(new InvalidBearerTokenException(e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}, "originalCommit": null, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1811, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}