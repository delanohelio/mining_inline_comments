{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTAxODkz", "number": 9013, "title": "Use AssertJ for exception testing", "bodyText": "This PR contains three commits that migrate to AssertJ for exception testing. This should help with an eventual migration to JUnit 5.", "createdAt": "2020-09-11T22:05:03Z", "url": "https://github.com/spring-projects/spring-security/pull/9013", "merged": true, "mergeCommit": {"oid": "c5023127190c8f80bf83bafabcbea4df5cf44898"}, "closed": true, "closedAt": "2020-09-22T22:13:52Z", "author": {"login": "philwebb"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH8tJHgH2gAyNDg1NTAxODkzOjk2MmExYWMyNTc1OTk2NTNjODhhZDYwNDM2ZjQ0YWFhOWI2NGVlNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJpMZSABqjM3NzU5ODU2Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "962a1ac257599653c88ad60436f44aaa9b64ee43", "author": {"user": {"login": "philwebb", "name": "Phil Webb"}}, "url": "https://github.com/spring-projects/spring-security/commit/962a1ac257599653c88ad60436f44aaa9b64ee43", "committedDate": "2020-09-11T21:58:19Z", "message": "Replace try/catch with AssertJ\n\nReplace manual try/catch/fail blocks with AssertJ calls."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3b9260565827ac3434d05a22fa3081c096fe1f9", "author": {"user": {"login": "philwebb", "name": "Phil Webb"}}, "url": "https://github.com/spring-projects/spring-security/commit/f3b9260565827ac3434d05a22fa3081c096fe1f9", "committedDate": "2020-09-11T22:00:23Z", "message": "Replace ExpectedException @Rules with AssertJ\n\nReplace JUnit ExpectedException @Rules with AssertJ calls."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODg0OTM2", "url": "https://github.com/spring-projects/spring-security/pull/9013#pullrequestreview-487884936", "createdAt": "2020-09-14T15:22:45Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToyMjo0NlrOHRaSKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NTowNVrOHRiFYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODQ3Mg==", "bodyText": "The way the lines are broken here, at line 105, and below at lines 111 and 113, appear quite arbitrary. At least, I'm having a difficult time seeing the logic.\nI figure these are the result of the JavaFormat plugin. Is there a place I can read up on the way it makes decisions about line breaks?", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488018472", "createdAt": "2020-09-14T15:22:46Z", "author": {"login": "jzheaux"}, "path": "acl/src/test/java/org/springframework/security/acls/domain/AclImplTests.java", "diffHunk": "@@ -97,58 +98,38 @@ public void tearDown() {\n \t\tSecurityContextHolder.clearContext();\n \t}\n \n-\t@Test(expected = IllegalArgumentException.class)\n+\t@Test\n \tpublic void constructorsRejectNullObjectIdentity() {\n-\t\ttry {\n-\t\t\tnew AclImpl(null, 1, this.authzStrategy, this.pgs, null, null, true, new PrincipalSid(\"joe\"));\n-\t\t\tfail(\"Should have thrown IllegalArgumentException\");\n-\t\t}\n-\t\tcatch (IllegalArgumentException expected) {\n-\t\t}\n-\t\tnew AclImpl(null, 1, this.authzStrategy, this.mockAuditLogger);\n+\t\tassertThatIllegalArgumentException().isThrownBy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4MjcxMg==", "bodyText": "While I agree that giving distinct variable names makes the test more readable, are the changes precisely necessary to move to AssertJ?", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488082712", "createdAt": "2020-09-14T16:53:54Z", "author": {"login": "jzheaux"}, "path": "acl/src/test/java/org/springframework/security/acls/jdbc/JdbcMutableAclServiceTests.java", "diffHunk": "@@ -161,91 +162,80 @@ public void testLifecycle() {\n \t\tMap<ObjectIdentity, Acl> map = this.jdbcMutableAclService\n \t\t\t\t.readAclsById(Arrays.asList(getTopParentOid(), getMiddleParentOid(), getChildOid()));\n \t\tassertThat(map).hasSize(3);\n-\t\t// Replace our current objects with their retrieved versions\n-\t\ttopParent = (MutableAcl) map.get(getTopParentOid());\n-\t\tmiddleParent = (MutableAcl) map.get(getMiddleParentOid());\n-\t\tchild = (MutableAcl) map.get(getChildOid());\n+\t\t// Get the retrieved versions\n+\t\tMutableAcl retrievedTopParent = (MutableAcl) map.get(getTopParentOid());\n+\t\tMutableAcl retrievedMiddleParent = (MutableAcl) map.get(getMiddleParentOid());\n+\t\tMutableAcl retrievedChild = (MutableAcl) map.get(getChildOid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNTMwMg==", "bodyText": "Since this method no longer throws an Exception, should that be cleaned up? There may be other methods to which this clean up might also need applying.", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488125302", "createdAt": "2020-09-14T18:07:19Z", "author": {"login": "jzheaux"}, "path": "core/src/test/java/org/springframework/security/core/authority/mapping/SimpleAuthoritiesMapperTests.java", "diffHunk": "@@ -25,18 +25,19 @@\n import org.springframework.security.core.authority.AuthorityUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n \n /**\n  * @author Luke Taylor\n  */\n public class SimpleAuthoritiesMapperTests {\n \n-\t@Test(expected = IllegalArgumentException.class)\n+\t@Test\n \tpublic void rejectsInvalidCaseConversionFlags() throws Exception {\n \t\tSimpleAuthorityMapper mapper = new SimpleAuthorityMapper();\n \t\tmapper.setConvertToLowerCase(true);\n \t\tmapper.setConvertToUpperCase(true);\n-\t\tmapper.afterPropertiesSet();\n+\t\tassertThatIllegalArgumentException().isThrownBy(mapper::afterPropertiesSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDU4Ng==", "bodyText": "Should this instead be replaced with @Test?", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488130586", "createdAt": "2020-09-14T18:16:37Z", "author": {"login": "jzheaux"}, "path": "ldap/src/test/java/org/springframework/security/ldap/authentication/ad/ActiveDirectoryLdapAuthenticationProviderTests.java", "diffHunk": "@@ -250,100 +239,72 @@ public void passwordNeedsResetIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(\n \t\t\t\tnew AuthenticationException(msg + dataCode + \", xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.thrown.expect(BadCredentialsException.class);\n-\t\tthis.thrown.expect(new BaseMatcher<BadCredentialsException>() {\n-\t\t\tprivate Matcher<Object> causeInstance = CoreMatchers\n-\t\t\t\t\t.instanceOf(ActiveDirectoryAuthenticationException.class);\n-\n-\t\t\tprivate Matcher<String> causeDataCode = CoreMatchers.equalTo(dataCode);\n-\n-\t\t\t@Override\n-\t\t\tpublic boolean matches(Object that) {\n-\t\t\t\tThrowable t = (Throwable) that;\n-\t\t\t\tActiveDirectoryAuthenticationException cause = (ActiveDirectoryAuthenticationException) t.getCause();\n-\t\t\t\treturn this.causeInstance.matches(cause) && this.causeDataCode.matches(cause.getDataCode());\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void describeTo(Description desc) {\n-\t\t\t\tdesc.appendText(\"getCause() \");\n-\t\t\t\tthis.causeInstance.describeTo(desc);\n-\t\t\t\tdesc.appendText(\"getCause().getDataCode() \");\n-\t\t\t\tthis.causeDataCode.describeTo(desc);\n-\t\t\t}\n-\t\t});\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe))\n+\t\t\t\t.withCauseInstanceOf(ActiveDirectoryAuthenticationException.class)\n+\t\t\t\t.satisfies((ex) -> assertThat(((ActiveDirectoryAuthenticationException) ex.getCause()).getDataCode())\n+\t\t\t\t\t\t.isEqualTo(dataCode));\n \t}\n \n-\t@Test(expected = CredentialsExpiredException.class)\n+\t@Test\n \tpublic void expiredPasswordIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"532, xxxx]\"));\n-\t\ttry {\n-\t\t\tthis.provider.authenticate(this.joe);\n-\t\t\tfail(\"BadCredentialsException should had been thrown\");\n-\t\t}\n-\t\tcatch (BadCredentialsException expected) {\n-\t\t}\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(CredentialsExpiredException.class)\n+\t\t\t\t.isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = DisabledException.class)\n+\t@Test\n \tpublic void accountDisabledIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"533, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(DisabledException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = AccountExpiredException.class)\n+\t@Test\n \tpublic void accountExpiredIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"701, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(AccountExpiredException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = LockedException.class)\n+\t@Test\n \tpublic void accountLockedIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"775, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(LockedException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = BadCredentialsException.class)\n+\t@Test\n \tpublic void unknownErrorCodeIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"999, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = BadCredentialsException.class)\n+\t@Test\n \tpublic void errorWithNoSubcodeIsHandledCleanly() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = org.springframework.ldap.CommunicationException.class)\n+\t@Test\n \tpublic void nonAuthenticationExceptionIsConvertedToSpringLdapException() throws Throwable {\n-\t\ttry {\n+\t\tassertThatExceptionOfType(InternalAuthenticationServiceException.class).isThrownBy(() -> {\n \t\t\tthis.provider.contextFactory = createContextFactoryThrowing(new CommunicationException(msg));\n \t\t\tthis.provider.authenticate(this.joe);\n-\t\t}\n-\t\tcatch (InternalAuthenticationServiceException ex) {\n-\t\t\t// Since GH-8418 ldap communication exception is wrapped into\n-\t\t\t// InternalAuthenticationServiceException.\n-\t\t\t// This test is about the wrapped exception, so we throw it.\n-\t\t\tthrow ex.getCause();\n-\t\t}\n+\t\t}).withCauseInstanceOf(org.springframework.ldap.CommunicationException.class);\n \t}\n \n-\t@Test(expected = org.springframework.security.authentication.InternalAuthenticationServiceException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NjI3Mg==", "bodyText": "This is another spot where I'm confused about the line wrapping. Compare this to line 220 and 221 where the content is identical, but separated across two lines.", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488146272", "createdAt": "2020-09-14T18:45:05Z", "author": {"login": "jzheaux"}, "path": "web/src/test/java/org/springframework/security/web/server/authentication/SwitchUserWebFilterTests.java", "diffHunk": "@@ -183,11 +179,12 @@ public void switchUserWhenUsernameIsMissingThenThrowException() {\n \t\t\t\t.from(MockServerHttpRequest.post(\"/login/impersonate\"));\n \t\tfinal WebFilterChain chain = mock(WebFilterChain.class);\n \t\tfinal SecurityContextImpl securityContext = new SecurityContextImpl(mock(Authentication.class));\n-\t\tthis.exceptionRule.expect(IllegalArgumentException.class);\n-\t\tthis.exceptionRule.expectMessage(\"The userName can not be null.\");\n-\t\tthis.switchUserWebFilter.filter(exchange, chain)\n-\t\t\t\t.subscriberContext(ReactiveSecurityContextHolder.withSecurityContext(Mono.just(securityContext)))\n-\t\t\t\t.block();\n+\t\tassertThatIllegalArgumentException()\n+\t\t\t\t.isThrownBy(() -> this.switchUserWebFilter.filter(exchange, chain)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODk3NTE2", "url": "https://github.com/spring-projects/spring-security/pull/9013#pullrequestreview-489897516", "createdAt": "2020-09-16T18:16:38Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxNjozOVrOHS8sRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxNjozOVrOHS8sRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYzMDc5MQ==", "bodyText": "Thanks for the extra explanation. No, I think okay to leave as-is. It's more curiosity on my part.", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r489630791", "createdAt": "2020-09-16T18:16:39Z", "author": {"login": "jzheaux"}, "path": "acl/src/test/java/org/springframework/security/acls/domain/AclImplTests.java", "diffHunk": "@@ -97,58 +98,38 @@ public void tearDown() {\n \t\tSecurityContextHolder.clearContext();\n \t}\n \n-\t@Test(expected = IllegalArgumentException.class)\n+\t@Test\n \tpublic void constructorsRejectNullObjectIdentity() {\n-\t\ttry {\n-\t\t\tnew AclImpl(null, 1, this.authzStrategy, this.pgs, null, null, true, new PrincipalSid(\"joe\"));\n-\t\t\tfail(\"Should have thrown IllegalArgumentException\");\n-\t\t}\n-\t\tcatch (IllegalArgumentException expected) {\n-\t\t}\n-\t\tnew AclImpl(null, 1, this.authzStrategy, this.mockAuditLogger);\n+\t\tassertThatIllegalArgumentException().isThrownBy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODQ3Mg=="}, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "245b09eda47d930dfb1056c897b48d8976aead11", "author": {"user": {"login": "philwebb", "name": "Phil Webb"}}, "url": "https://github.com/spring-projects/spring-security/commit/245b09eda47d930dfb1056c897b48d8976aead11", "committedDate": "2020-09-17T04:21:50Z", "message": "Replace expected @Test attributes with AssertJ\n\nReplace JUnit expected @Test attributes with AssertJ calls."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "245b09eda47d930dfb1056c897b48d8976aead11", "author": {"user": {"login": "philwebb", "name": "Phil Webb"}}, "url": "https://github.com/spring-projects/spring-security/commit/245b09eda47d930dfb1056c897b48d8976aead11", "committedDate": "2020-09-17T04:21:50Z", "message": "Replace expected @Test attributes with AssertJ\n\nReplace JUnit expected @Test attributes with AssertJ calls."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4906, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}