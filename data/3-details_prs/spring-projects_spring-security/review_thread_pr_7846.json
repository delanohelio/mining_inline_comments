{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDU2NjIy", "number": 7846, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo1MTozMVrODZ0dHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzowMjowM1rODZ0pJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDAwNDE1OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo1MTozMVrOFga_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOToxNjowNVrOFgn4Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDg5Mw==", "bodyText": "You can use StandardCharsets.UTF_8 here instead of the String \"UTF-8\"", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369540893", "createdAt": "2020-01-22T12:51:31Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjA5NA==", "bodyText": "Thanks for your feedback. I adjusted the code.", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752094", "createdAt": "2020-01-22T19:16:05Z", "author": {"login": "peterkeller"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDg5Mw=="}, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDAwNjQwOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo1MjowM1rOFgbATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOToxNjoxNVrOFgn4cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MTE5OA==", "bodyText": "You can use StandardCharsets.ISO_8859_1 here instead of the String \"ISO-8859-1\"", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369541198", "createdAt": "2020-01-22T12:52:03Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));\n+\t\trequest.setServletPath(\"/some_file.html\");\n+\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\t// Test\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();\n+\t\tFilterChain chain = mock(FilterChain.class);\n+\n+\t\tfilter.doFilter(request, response, chain);\n+\n+\t\tassertThat(response.getStatus()).isEqualTo(200);\n+\t\tverify(chain).doFilter(any(ServletRequest.class), any(ServletResponse.class));\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(\"rod\");\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getCredentials()).isEqualTo(\"\u00e4\u00f6\u00fc\");\n+\t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Iso_8859_1() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\t\tfilter.setCredentialsCharset(\"ISO-8859-1\");\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"ISO-8859-1\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjE3OA==", "bodyText": "I adjusted the code.", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752178", "createdAt": "2020-01-22T19:16:15Z", "author": {"login": "peterkeller"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));\n+\t\trequest.setServletPath(\"/some_file.html\");\n+\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\t// Test\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();\n+\t\tFilterChain chain = mock(FilterChain.class);\n+\n+\t\tfilter.doFilter(request, response, chain);\n+\n+\t\tassertThat(response.getStatus()).isEqualTo(200);\n+\t\tverify(chain).doFilter(any(ServletRequest.class), any(ServletResponse.class));\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(\"rod\");\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getCredentials()).isEqualTo(\"\u00e4\u00f6\u00fc\");\n+\t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Iso_8859_1() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\t\tfilter.setCredentialsCharset(\"ISO-8859-1\");\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"ISO-8859-1\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MTE5OA=="}, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDAzNDk0OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzowMjowM1rOFgbRJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOToxNjozNlrOFgn5HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTUwOA==", "bodyText": "Although this test name follows the same pattern as other tests in this class, we would like any new tests to follow the convention methodWhenConditionThenResult.\nA possible name could be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n          \n          \n            \n            \tpublic void doFilterWhenTokenAndFilterCharsetMatchThenAuthenticated() throws Exception {", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369545508", "createdAt": "2020-01-22T13:02:03Z", "author": {"login": "eleftherias"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjM0OA==", "bodyText": "I adjusted the code.", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752348", "createdAt": "2020-01-22T19:16:36Z", "author": {"login": "peterkeller"}, "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTUwOA=="}, "originalCommit": {"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1805, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}