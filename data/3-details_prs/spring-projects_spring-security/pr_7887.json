{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODQ1NjY1", "number": 7887, "title": "Add JwtIssuerReactiveAuthenticationManagerResolver", "bodyText": "Fixes gh-7857", "createdAt": "2020-02-01T03:24:24Z", "url": "https://github.com/spring-projects/spring-security/pull/7887", "merged": true, "mergeCommit": {"oid": "a90e579350562897ca5f092f591769374cd0d278"}, "closed": true, "closedAt": "2020-02-06T20:45:14Z", "author": {"login": "jzheaux"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBEr4_ABqjMwMDY5NDU0Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2t3DNgFqTQ1MTQyNDc4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzQ4MDA4", "url": "https://github.com/spring-projects/spring-security/pull/7887#pullrequestreview-353348008", "createdAt": "2020-02-04T22:28:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoyODo0MlrOFlltEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoyODo0MlrOFlltEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1OTM3OA==", "bodyText": "@jzheaux  it is normal that JwtIssuerReactiveAuthenticationManagerResolver implements ReactiveAuthenticationManagerResolver<ServerWebExchange> instead of ReactiveAuthenticationManagerResolver<ServerHttpRequest> ??\n/**\n\t\t * Configures the {@link ReactiveAuthenticationManagerResolver}\n\t\t *\n\t\t * @param authenticationManagerResolver the {@link ReactiveAuthenticationManagerResolver}\n\t\t * @return the {@link OAuth2ResourceServerSpec} for additional configuration\n\t\t * @since 5.2\n\t\t */\n\t\tpublic OAuth2ResourceServerSpec authenticationManagerResolver(\n\t\t\t\tReactiveAuthenticationManagerResolver<ServerHttpRequest> authenticationManagerResolver) {\n\t\t\tAssert.notNull(authenticationManagerResolver, \"authenticationManagerResolver cannot be null\");\n\t\t\tthis.authenticationManagerResolver = authenticationManagerResolver;\n\t\t\treturn this;\n\t\t}", "url": "https://github.com/spring-projects/spring-security/pull/7887#discussion_r374959378", "createdAt": "2020-02-04T22:28:42Z", "author": null, "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.server.resource.authentication;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import com.nimbusds.jwt.JWTParser;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.lang.NonNull;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.ReactiveAuthenticationManager;\n+import org.springframework.security.authentication.ReactiveAuthenticationManagerResolver;\n+import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.jwt.ReactiveJwtDecoders;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+import org.springframework.security.oauth2.server.resource.BearerTokenError;\n+import org.springframework.security.oauth2.server.resource.BearerTokenErrorCodes;\n+import org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter;\n+import org.springframework.util.Assert;\n+import org.springframework.web.server.ServerWebExchange;\n+\n+/**\n+ * An implementation of {@link ReactiveAuthenticationManagerResolver} that resolves a JWT-based\n+ * {@link ReactiveAuthenticationManager} based on the\n+ * <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IssuerIdentifier\">Issuer</a> in a\n+ * signed JWT (JWS).\n+ *\n+ * To use, this class must be able to determine whether or not the `iss` claim is trusted. Recall that\n+ * anyone can stand up an authorization server and issue valid tokens to a resource server. The simplest way\n+ * to achieve this is to supply a whitelist of trusted issuers in the constructor.\n+ *\n+ * This class derives the Issuer from the `iss` claim found in the {@link ServerWebExchange}'s\n+ * <a href=\"https://tools.ietf.org/html/rfc6750#section-1.2\" target=\"_blank\">Bearer Token</a>.\n+ *\n+ * @author Josh Cummings\n+ * @since 5.3\n+ */\n+public final class JwtIssuerReactiveAuthenticationManagerResolver\n+\t\timplements ReactiveAuthenticationManagerResolver<ServerWebExchange> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MjY4MDI3", "url": "https://github.com/spring-projects/spring-security/pull/7887#pullrequestreview-354268027", "createdAt": "2020-02-06T08:27:10Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzM5OTY3", "url": "https://github.com/spring-projects/spring-security/pull/7887#pullrequestreview-354339967", "createdAt": "2020-02-06T10:22:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13c6e07f1f3ae3a58849160203db869d1738f5e4", "author": {"user": {"login": "jzheaux", "name": "Josh Cummings"}}, "url": "https://github.com/spring-projects/spring-security/commit/13c6e07f1f3ae3a58849160203db869d1738f5e4", "committedDate": "2020-02-06T18:36:35Z", "message": "Add JwtIssuerReactiveAuthenticationManagerResolver\n\nFixes gh-7857"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "13c6e07f1f3ae3a58849160203db869d1738f5e4", "author": {"user": {"login": "jzheaux", "name": "Josh Cummings"}}, "url": "https://github.com/spring-projects/spring-security/commit/13c6e07f1f3ae3a58849160203db869d1738f5e4", "committedDate": "2020-02-06T18:36:35Z", "message": "Add JwtIssuerReactiveAuthenticationManagerResolver\n\nFixes gh-7857"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDI0Nzgw", "url": "https://github.com/spring-projects/spring-security/pull/7887#pullrequestreview-451424780", "createdAt": "2020-07-20T09:03:51Z", "commit": {"oid": "13c6e07f1f3ae3a58849160203db869d1738f5e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTowMzo1MVrOG0BP5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTowMzo1MVrOG0BP5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5OTU4OQ==", "bodyText": "Hello, would you mind update this document/example with a bit more details please?\nI followed the guide, but the method authenticationManagerResolver() in OAuth2ResourceServerConfigurer complained that it's expecting an AuthenticationManagerResolver, but was receiving JwtIssuerReactiveAuthenticationManagerResolver.\nI tried to have my resource server may accept bearer tokens from two different authorization servers, using Spring Boot 2.3.1.RELEASE and spring-security-oauth2-resource-server 5.3.3.RELEASE\nSorry if I have missed something from the guide. Thanks", "url": "https://github.com/spring-projects/spring-security/pull/7887#discussion_r457199589", "createdAt": "2020-07-20T09:03:51Z", "author": {"login": "cmhuynh"}, "path": "docs/manual/src/docs/asciidoc/_includes/reactive/oauth2/resource-server.adoc", "diffHunk": "@@ -1005,6 +1005,77 @@ ReactiveOpaqueTokenIntrospector introspector() {\n }\n ----\n \n+[[oauth2resourceserver-multitenancy]]\n+== Multi-tenancy\n+\n+A resource server is considered multi-tenant when there are multiple strategies for verifying a bearer token, keyed by some tenant identifier.\n+\n+For example, your resource server may accept bearer tokens from two different authorization servers.\n+Or, your authorization server may represent a multiplicity of issuers.\n+\n+In each case, there are two things that need to be done and trade-offs associated with how you choose to do them:\n+\n+1. Resolve the tenant\n+2. Propagate the tenant\n+\n+=== Resolving the Tenant By Claim\n+\n+One way to differentiate tenants is by the issuer claim. Since the issuer claim accompanies signed JWTs, this can be done with the `JwtIssuerReactiveAuthenticationManagerResolver`, like so:\n+\n+[source,java]\n+----\n+JwtIssuerReactiveAuthenticationManagerResolver authenticationManagerResolver = new JwtIssuerReactiveAuthenticationManagerResolver\n+    (\"https://idp.example.org/issuerOne\", \"https://idp.example.org/issuerTwo\");\n+\n+http\n+    .authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated()\n+    )\n+    .oauth2ResourceServer(oauth2 -> oauth2\n+        .authenticationManagerResolver(authenticationManagerResolver)\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c6e07f1f3ae3a58849160203db869d1738f5e4"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 13, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}