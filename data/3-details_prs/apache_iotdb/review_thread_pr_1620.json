{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODQ0Nzc0", "number": 1620, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MjowMlrOEaalYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzozMDo0M1rOEa1L3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMzOTg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/TsFileManagementStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MjowMlrOHD1RIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MjowMlrOHD1RIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MDUxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              LevelStrategy,\n          \n          \n            \n              NormalStrategy;\n          \n          \n            \n              LEVEL_STRATEGY,\n          \n          \n            \n              NORMAL_STRATEGY;", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r473780514", "createdAt": "2020-08-20T08:52:02Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/TsFileManagementStrategy.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement;\n+\n+import org.apache.iotdb.db.engine.tsfilemanagement.level.LevelTsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.normal.NormalTsFileManagement;\n+\n+public enum TsFileManagementStrategy {\n+  LevelStrategy,\n+  NormalStrategy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTM0NjE0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBMergeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MzoxNFrOHD1VXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MzoxNFrOHD1VXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MTU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertTrue(cnt == 0);\n          \n          \n            \n                  assertEquals(0, cnt);", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r473781596", "createdAt": "2020-08-20T08:53:14Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBMergeTest.java", "diffHunk": "@@ -272,7 +294,7 @@ public void testShowMergeStatus() throws SQLException {\n       }\n       // it is uncertain whether the sub tasks are created at this time point, and we are only\n       // sure that the main task is created\n-      assertTrue(cnt >= 1);\n+      assertTrue(cnt == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA5ODQxOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRemovePartitionIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo1MjozN1rOHEZ0sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo1MjozN1rOHEZ0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3OTQ0MA==", "bodyText": "Why delete this?", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474379440", "createdAt": "2020-08-21T02:52:37Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRemovePartitionIT.java", "diffHunk": "@@ -177,7 +183,6 @@ private static void insertData() throws ClassNotFoundException {\n         sqls.add(\"FLUSH\");\n       }\n     }\n-    sqls.add(\"MERGE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQxNzM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNTozNVrOHEctPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNTozNVrOHEctPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjY4Nw==", "bodyText": "5 or 10? Be unified before merged : )", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474426687", "createdAt": "2020-08-21T06:05:35Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -249,24 +250,26 @@\n   private int avgSeriesPointNumberThreshold = 500000;\n \n   /**\n-   * When merge point number reaches this, merge the vmfile to the tsfile.\n+   * Work when tsfile_manage_strategy is level_strategy. When merge point number reaches this, merge\n+   * the files to the last level.\n    */\n   private int mergeChunkPointNumberThreshold = 100000;\n \n   /**\n-   * Is vm merge enable\n+   * TsFile manage strategy, define use which hot compaction strategy\n    */\n-  private boolean enableVm = true;\n+  private TsFileManagementStrategy tsFileManagementStrategy = TsFileManagementStrategy.LevelStrategy;\n \n   /**\n-   * The max vm num of each memtable. When vm num exceeds this, the vm files will merge to one.\n+   * Work when tsfile_manage_strategy is level_strategy. The max file num of each level. When file\n+   * num exceeds this, the files in one level will merge to one.\n    */\n-  private int maxVmNum = 5;\n+  private int maxFileNumInEachLevel = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQxODU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNjowM1rOHEct5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNjowM1rOHEct5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjg1NQ==", "bodyText": "unified to 5 or 10 to keep same as iotdb-engine.properties as well", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474426855", "createdAt": "2020-08-21T06:06:03Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -249,24 +250,26 @@\n   private int avgSeriesPointNumberThreshold = 500000;\n \n   /**\n-   * When merge point number reaches this, merge the vmfile to the tsfile.\n+   * Work when tsfile_manage_strategy is level_strategy. When merge point number reaches this, merge\n+   * the files to the last level.\n    */\n   private int mergeChunkPointNumberThreshold = 100000;\n \n   /**\n-   * Is vm merge enable\n+   * TsFile manage strategy, define use which hot compaction strategy\n    */\n-  private boolean enableVm = true;\n+  private TsFileManagementStrategy tsFileManagementStrategy = TsFileManagementStrategy.LevelStrategy;\n \n   /**\n-   * The max vm num of each memtable. When vm num exceeds this, the vm files will merge to one.\n+   * Work when tsfile_manage_strategy is level_strategy. The max file num of each level. When file\n+   * num exceeds this, the files in one level will merge to one.\n    */\n-  private int maxVmNum = 5;\n+  private int maxFileNumInEachLevel = 5;\n \n   /**\n-   * When vmfiles merge times exceeds this, merge the vmfile to the tsfile.\n+   * Work when tsfile_manage_strategy is level_strategy. The max num of level.\n    */\n-  private int maxMergeChunkNumInTsFile = 25;\n+  private int maxLevelNum = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQyMjM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNzozNFrOHEcv7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNzozNFrOHEcv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNzM3Mg==", "bodyText": "Is tsFileManagementStrategy a config which could only be modified at the first time starting IoTDB? If so, you may have to add it to IoTDBConfigCheck to abandon changing it when restarting.", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474427372", "createdAt": "2020-08-21T06:07:34Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -249,24 +250,26 @@\n   private int avgSeriesPointNumberThreshold = 500000;\n \n   /**\n-   * When merge point number reaches this, merge the vmfile to the tsfile.\n+   * Work when tsfile_manage_strategy is level_strategy. When merge point number reaches this, merge\n+   * the files to the last level.\n    */\n   private int mergeChunkPointNumberThreshold = 100000;\n \n   /**\n-   * Is vm merge enable\n+   * TsFile manage strategy, define use which hot compaction strategy\n    */\n-  private boolean enableVm = true;\n+  private TsFileManagementStrategy tsFileManagementStrategy = TsFileManagementStrategy.LevelStrategy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQ0MDgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/HotCompactionMergeTaskPoolManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxNjo1NlrOHEc7HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjoxNjo1NlrOHEc7HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzMDIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Logger LOGGER = LoggerFactory\n          \n          \n            \n              private static final Logger logger = LoggerFactory", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474430236", "createdAt": "2020-08-21T06:16:56Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/HotCompactionMergeTaskPoolManager.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.iotdb.db.concurrent.IoTDBThreadPoolFactory;\n+import org.apache.iotdb.db.concurrent.ThreadName;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement.HotCompactionMergeTask;\n+import org.apache.iotdb.db.service.IService;\n+import org.apache.iotdb.db.service.ServiceType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * HotCompactionMergeTaskPoolManager provides a ThreadPool to queue and run all hot compaction\n+ * tasks.\n+ */\n+public class HotCompactionMergeTaskPoolManager implements IService {\n+\n+  private static final Logger LOGGER = LoggerFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTUzODU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/utils/HotCompactionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjo1NzozMVrOHEd08g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjo1NzozMVrOHEd08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NTA0Mg==", "bodyText": "Could we omit the last 2 params since they are null and this method is only called here?", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474445042", "createdAt": "2020-08-21T06:57:31Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/utils/HotCompactionUtils.java", "diffHunk": "@@ -180,44 +193,52 @@ public static void merge(RestorableTsFileIOWriter writer,\n         for (Entry<String, MeasurementSchema> entry : deviceMeasurementEntry.getValue()\n             .entrySet()) {\n           String measurementId = entry.getKey();\n-          Pair<ChunkMetadata, Chunk> chunkPair = writeSeqChunk(writer, storageGroup,\n-              tsFileSequenceReaderMap, deviceId, measurementId, vmWriters, null, null);\n+          Pair<ChunkMetadata, Chunk> chunkPair = writeSeqChunk(storageGroup,\n+              tsFileSequenceReaderMap, deviceId, measurementId, tsFileResources, null,\n+              null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTU2MjI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/utils/HotCompactionUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowMzoyMVrOHEeDvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoxMDoyOVrOHHAy4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0ODgyOA==", "bodyText": "Could we keep the logger not null before calling this method?", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474448828", "createdAt": "2020-08-21T07:03:21Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/utils/HotCompactionUtils.java", "diffHunk": "@@ -180,44 +193,52 @@ public static void merge(RestorableTsFileIOWriter writer,\n         for (Entry<String, MeasurementSchema> entry : deviceMeasurementEntry.getValue()\n             .entrySet()) {\n           String measurementId = entry.getKey();\n-          Pair<ChunkMetadata, Chunk> chunkPair = writeSeqChunk(writer, storageGroup,\n-              tsFileSequenceReaderMap, deviceId, measurementId, vmWriters, null, null);\n+          Pair<ChunkMetadata, Chunk> chunkPair = writeSeqChunk(storageGroup,\n+              tsFileSequenceReaderMap, deviceId, measurementId, tsFileResources, null,\n+              null);\n           ChunkMetadata newChunkMetadata = chunkPair.left;\n           Chunk newChunk = chunkPair.right;\n           if (newChunkMetadata != null && newChunk != null) {\n             writer.writeChunk(newChunk, newChunkMetadata);\n+            targetResource.updateStartTime(deviceId, newChunkMetadata.getStartTime());\n+            targetResource.updateEndTime(deviceId, newChunkMetadata.getEndTime());\n           }\n         }\n         writer.endChunkGroup();\n-        if (vmLogger != null) {\n-          vmLogger.logDevice(deviceId, writer.getPos());\n+        if (hotCompactionLogger != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExNTEwNQ==", "bodyText": "just confirm that the logger is not null", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r477115105", "createdAt": "2020-08-26T08:10:29Z", "author": {"login": "zhanglingzhe0820"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/utils/HotCompactionUtils.java", "diffHunk": "@@ -180,44 +193,52 @@ public static void merge(RestorableTsFileIOWriter writer,\n         for (Entry<String, MeasurementSchema> entry : deviceMeasurementEntry.getValue()\n             .entrySet()) {\n           String measurementId = entry.getKey();\n-          Pair<ChunkMetadata, Chunk> chunkPair = writeSeqChunk(writer, storageGroup,\n-              tsFileSequenceReaderMap, deviceId, measurementId, vmWriters, null, null);\n+          Pair<ChunkMetadata, Chunk> chunkPair = writeSeqChunk(storageGroup,\n+              tsFileSequenceReaderMap, deviceId, measurementId, tsFileResources, null,\n+              null);\n           ChunkMetadata newChunkMetadata = chunkPair.left;\n           Chunk newChunk = chunkPair.right;\n           if (newChunkMetadata != null && newChunk != null) {\n             writer.writeChunk(newChunk, newChunkMetadata);\n+            targetResource.updateStartTime(deviceId, newChunkMetadata.getStartTime());\n+            targetResource.updateEndTime(deviceId, newChunkMetadata.getEndTime());\n           }\n         }\n         writer.endChunkGroup();\n-        if (vmLogger != null) {\n-          vmLogger.logDevice(deviceId, writer.getPos());\n+        if (hotCompactionLogger != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0ODgyOA=="}, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTYzNTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxODoxNFrOHEewrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxODoxNFrOHEewrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MDMzNA==", "bodyText": "Don't forget to change name of param", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474460334", "createdAt": "2020-08-21T07:18:14Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "diffHunk": "@@ -0,0 +1,540 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement.level;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.FILE_NAME_SEPARATOR;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.normal.NormalTsFileManagement.compareFileName;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.HOT_COMPACTION_LOG_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.SOURCE_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.TARGET_NAME;\n+import static org.apache.iotdb.tsfile.common.constant.TsFileConstant.TSFILE_SUFFIX;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.cache.ChunkMetadataCache;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogAnalyzer;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionUtils;\n+import org.apache.iotdb.db.query.control.FileReaderManager;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.writer.RestorableTsFileIOWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LevelTsFileManagement extends TsFileManagement {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(LevelTsFileManagement.class);\n+  private int maxLevelNum = IoTDBDescriptor.getInstance().getConfig().getMaxLevelNum();\n+  private final List<TreeSet<TsFileResource>> sequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> unSequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> forkedSequenceTsFileResources = new ArrayList<>();\n+  private final List<List<TsFileResource>> forkedUnSequenceTsFileResources = new ArrayList<>();\n+\n+  public LevelTsFileManagement(String storageGroupName, String storageGroupDir) {\n+    super(storageGroupName, storageGroupDir);\n+    clear();\n+  }\n+\n+  private void deleteLevelFiles(Collection<TsFileResource> vmMergeTsFiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTY5Njg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzozMDozNFrOHEfXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzozMDozNFrOHEfXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3MDE3OA==", "bodyText": "Why static?", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474470178", "createdAt": "2020-08-21T07:30:34Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "diffHunk": "@@ -0,0 +1,540 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement.level;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.FILE_NAME_SEPARATOR;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.normal.NormalTsFileManagement.compareFileName;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.HOT_COMPACTION_LOG_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.SOURCE_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.TARGET_NAME;\n+import static org.apache.iotdb.tsfile.common.constant.TsFileConstant.TSFILE_SUFFIX;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.cache.ChunkMetadataCache;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogAnalyzer;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionUtils;\n+import org.apache.iotdb.db.query.control.FileReaderManager;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.writer.RestorableTsFileIOWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LevelTsFileManagement extends TsFileManagement {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(LevelTsFileManagement.class);\n+  private int maxLevelNum = IoTDBDescriptor.getInstance().getConfig().getMaxLevelNum();\n+  private final List<TreeSet<TsFileResource>> sequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> unSequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> forkedSequenceTsFileResources = new ArrayList<>();\n+  private final List<List<TsFileResource>> forkedUnSequenceTsFileResources = new ArrayList<>();\n+\n+  public LevelTsFileManagement(String storageGroupName, String storageGroupDir) {\n+    super(storageGroupName, storageGroupDir);\n+    clear();\n+  }\n+\n+  private void deleteLevelFiles(Collection<TsFileResource> vmMergeTsFiles) {\n+    logger.debug(\"{} [hot compaction] merge starts to delete file\", storageGroupName);\n+    for (TsFileResource vmMergeTsFile : vmMergeTsFiles) {\n+      deleteLevelFile(vmMergeTsFile);\n+    }\n+    for (int i = 0; i < maxLevelNum; i++) {\n+      sequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+      unSequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+    }\n+  }\n+\n+  private static void deleteLevelFile(TsFileResource seqFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTY5ODIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzozMDo0M1rOHEfYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzozMDo0M1rOHEfYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3MDQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (Exception e) {\n          \n          \n            \n                } catch (IOException e) {", "url": "https://github.com/apache/iotdb/pull/1620#discussion_r474470416", "createdAt": "2020-08-21T07:30:43Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "diffHunk": "@@ -0,0 +1,540 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement.level;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.FILE_NAME_SEPARATOR;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.normal.NormalTsFileManagement.compareFileName;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.HOT_COMPACTION_LOG_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.SOURCE_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.TARGET_NAME;\n+import static org.apache.iotdb.tsfile.common.constant.TsFileConstant.TSFILE_SUFFIX;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.cache.ChunkMetadataCache;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogAnalyzer;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionUtils;\n+import org.apache.iotdb.db.query.control.FileReaderManager;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.writer.RestorableTsFileIOWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LevelTsFileManagement extends TsFileManagement {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(LevelTsFileManagement.class);\n+  private int maxLevelNum = IoTDBDescriptor.getInstance().getConfig().getMaxLevelNum();\n+  private final List<TreeSet<TsFileResource>> sequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> unSequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> forkedSequenceTsFileResources = new ArrayList<>();\n+  private final List<List<TsFileResource>> forkedUnSequenceTsFileResources = new ArrayList<>();\n+\n+  public LevelTsFileManagement(String storageGroupName, String storageGroupDir) {\n+    super(storageGroupName, storageGroupDir);\n+    clear();\n+  }\n+\n+  private void deleteLevelFiles(Collection<TsFileResource> vmMergeTsFiles) {\n+    logger.debug(\"{} [hot compaction] merge starts to delete file\", storageGroupName);\n+    for (TsFileResource vmMergeTsFile : vmMergeTsFiles) {\n+      deleteLevelFile(vmMergeTsFile);\n+    }\n+    for (int i = 0; i < maxLevelNum; i++) {\n+      sequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+      unSequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+    }\n+  }\n+\n+  private static void deleteLevelFile(TsFileResource seqFile) {\n+    seqFile.writeLock();\n+    try {\n+      ChunkMetadataCache.getInstance().remove(seqFile);\n+      FileReaderManager.getInstance().closeFileAndRemoveReader(seqFile.getTsFilePath());\n+      seqFile.setDeleted(true);\n+      if (seqFile.getTsFile().exists()) {\n+        Files.delete(seqFile.getTsFile().toPath());\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4644, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}