{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNDkxNTg2", "number": 1693, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwOTo1NTo0OVrOEgltbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxOTo1NlrOEnVoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjA3NzI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwOTo1NTo0OVrOHNhBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo1Mzo0OVrOHN8fuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNDUxMQ==", "bodyText": "you should move the code to the position before previous two line, because the two line  has no meaning if the data will be discarded.", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r483934511", "createdAt": "2020-09-05T09:55:49Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -733,10 +733,15 @@ public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {\n       partitionLatestFlushedTimeForEachDevice\n           .computeIfAbsent(timePartitionId, id -> new HashMap<>());\n \n+      boolean isSequence = insertRowPlan.getTime() > partitionLatestFlushedTimeForEachDevice.get(timePartitionId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDY5Nw==", "bodyText": "edited! thank you", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484384697", "createdAt": "2020-09-07T11:53:49Z", "author": {"login": "haimeiguo"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -733,10 +733,15 @@ public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {\n       partitionLatestFlushedTimeForEachDevice\n           .computeIfAbsent(timePartitionId, id -> new HashMap<>());\n \n+      boolean isSequence = insertRowPlan.getTime() > partitionLatestFlushedTimeForEachDevice.get(timePartitionId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNDUxMQ=="}, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjEwMDc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMDozMzowNlrOHNhMNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMDozMzowNlrOHNhMNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNzMzMw==", "bodyText": "so, the first row of one timepartition always insert into unsequence memtable?", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r483937333", "createdAt": "2020-09-05T10:33:06Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -808,8 +815,11 @@ public void insertTablet(InsertTabletPlan insertTabletPlan) throws BatchInsertio\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODI1NzM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjozMTo0NVrOHNxwvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo1NTozN1rOHN8jTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwODgyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean enable_discard_out_of_order_data = false;\n          \n          \n            \n              private boolean enableDiscardOutOfOrderData = false;", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484208829", "createdAt": "2020-09-07T06:31:45Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -144,6 +144,8 @@\n \n   private volatile boolean readOnly = false;\n \n+  private boolean enable_discard_out_of_order_data = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwNzUxMA==", "bodyText": "edited! thank you", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484307510", "createdAt": "2020-09-07T09:24:21Z", "author": {"login": "haimeiguo"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -144,6 +144,8 @@\n \n   private volatile boolean readOnly = false;\n \n+  private boolean enable_discard_out_of_order_data = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwODgyOQ=="}, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NTYxNA==", "bodyText": "My pleasure ; )", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484385614", "createdAt": "2020-09-07T11:55:37Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -144,6 +144,8 @@\n \n   private volatile boolean readOnly = false;\n \n+  private boolean enable_discard_out_of_order_data = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwODgyOQ=="}, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTA2Nzc2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozNDowNFrOHQQGAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozNDowNFrOHQQGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMjk0NA==", "bodyText": "remember to reset this to its default value in the end of the test\nWe usually do this as follows:\nboolean defaultValue = config.isEnableDiscard...;\nconfig.setEnableDiscard(true);\ndo some test\nconfig.setEnableDiscard(defaultValue);", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486802944", "createdAt": "2020-09-11T06:34:04Z", "author": {"login": "qiaojialin"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTEyMzg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1NDo0MlrOHQQnDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1NDo0MlrOHQQnDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMTQwNw==", "bodyText": "I think you forget to control last batch of data and update cache part. These part also need to filter unsequence data", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486811407", "createdAt": "2020-09-11T06:54:42Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -706,8 +714,11 @@ public void insertTablet(InsertTabletPlan insertTabletPlan) throws BatchInsertio\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {\n             // insert into unsequence and then start sequence\n-            noFailure = insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n-                beforeTimePartition) && noFailure;\n+            if (!IoTDBDescriptor.getInstance().getConfig().isEnableDiscardOutOfOrderData()) {\n+              noFailure =\n+                  insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n+                      beforeTimePartition) && noFailure;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTEzNTMwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1ODo0MlrOHQQt_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1ODo0MlrOHQQt_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMzE4Mw==", "bodyText": "You may change the time partition range to test some conner case of your code", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486813183", "createdAt": "2020-09-11T06:58:42Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n+      throws QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementSchema[] schemas = new MeasurementSchema[2];\n+    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n+    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n+\n+    MNode deviceMNode = new MNode(null, deviceId);\n+    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n+    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan1.setSchemas(schemas);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan2.setSchemas(schemas);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTE0NDcxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzowMjowMVrOHQQzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzowMjowMVrOHQQzng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNDYyMg==", "bodyText": "You should also add some flush operation to test your code", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486814622", "createdAt": "2020-09-11T07:02:01Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n+      throws QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementSchema[] schemas = new MeasurementSchema[2];\n+    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n+    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n+\n+    MNode deviceMNode = new MNode(null, deviceId);\n+    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n+    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan1.setSchemas(schemas);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan2.setSchemas(schemas);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjI3NjM1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzowNDoxNFrOHVsqTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjo1MjoyN1rOHWY1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzg3MA==", "bodyText": "use this line to change the time partition and add some test over different time partition. IoTDBDescriptor.getInstance().getConfig().setPartitionInterval(100);\ndo not forget to set it back to original value. You can refer to IoTDBMultiSeriesIT.java for this. Thank you very much XD", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r492513870", "createdAt": "2020-09-22T07:04:14Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -26,6 +26,7 @@\n import java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d970378893628cee00521c9149f275d497fe254"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzNzY5Nw==", "bodyText": "Thank you for your review! I added test cases for time partition = 100, 500 and 1000.", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r493237697", "createdAt": "2020-09-23T06:52:27Z", "author": {"login": "haimeiguo"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -26,6 +26,7 @@\n import java.util.Collections;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzg3MA=="}, "originalCommit": {"oid": "3d970378893628cee00521c9149f275d497fe254"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Njg0MjQ5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxOTo1NlrOHX36YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMzoxMjoxOVrOHYkNnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5NTM2MQ==", "bodyText": "Sure, you set the time partition. But your insert time range only from 0 -150 which never cross the partition interval. By the way, you should also enable the partition like this:\nconfig.setEnablePartition(true);\n\nand do not forget:\nconfig.setEnablePartition(false);\n\nThank you very much~", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r494795361", "createdAt": "2020-09-25T07:19:56Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -267,6 +269,279 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet1()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(100);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet2()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(500);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet3()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTE4MA==", "bodyText": "boolean defaultEnablePartition = config.getEnablePartition...", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r495521180", "createdAt": "2020-09-27T03:12:19Z", "author": {"login": "qiaojialin"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -267,6 +269,279 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet1()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(100);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet2()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(500);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet3()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5NTM2MQ=="}, "originalCommit": {"oid": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e"}, "originalPosition": 223}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4705, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}