{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDExNTUw", "number": 1956, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMTo1OTowNlrOE2lJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjowNjoxNFrOE2lM3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjY3MTUyOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMTo1OTowNlrOHvcuEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNDoyMTo0OVrOHvehlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNTY2NA==", "bodyText": "Can be simplified with Files.deleteIfExists", "url": "https://github.com/apache/iotdb/pull/1956#discussion_r519515664", "createdAt": "2020-11-09T01:59:06Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -835,6 +834,59 @@ public void close() {\n     }\n   }\n \n+  @Override\n+  public void clearAllLogs(long commitIndex) {\n+    lock.writeLock().lock();\n+    try {\n+      // 1. delete\n+      forceFlushLogBuffer();\n+      closeCurrentFile(meta.getCommitLogIndex());\n+      for (int i = 0; i < logDataFileList.size(); i++) {\n+        deleteLogDataAndIndexFile(i);\n+      }\n+      deleteMetaFile();\n+\n+      logDataFileList.clear();\n+      logIndexFileList.clear();\n+\n+      // 2. init\n+      if (!logIndexOffsetList.isEmpty()) {\n+        this.firstLogIndex = Math\n+            .max(commitIndex + 1, firstLogIndex + logIndexOffsetList.size());\n+      } else {\n+        this.firstLogIndex = commitIndex + 1;\n+      }\n+      this.logIndexOffsetList.clear();\n+      recoverMetaFile();\n+      meta = new LogManagerMeta();\n+      createNewLogFile(logDir, firstLogIndex);\n+      logger.info(\"{}, clean all logs success, the new firstLogIndex={}\", this, firstLogIndex);\n+    } catch (IOException e) {\n+      logger.error(\"clear all logs failed,\", e);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n+  private void deleteMetaFile() {\n+    lock.writeLock().lock();\n+    try {\n+      File tmpMetaFile = SystemFileFactory.INSTANCE.getFile(logDir + \"logMeta.tmp\");\n+      if (tmpMetaFile.exists()) {\n+        Files.delete(tmpMetaFile.toPath());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cdf51e1497d6fc37c32e479e13c8766860a80a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0NTIzNg==", "bodyText": "got it, thanks", "url": "https://github.com/apache/iotdb/pull/1956#discussion_r519545236", "createdAt": "2020-11-09T04:21:49Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -835,6 +834,59 @@ public void close() {\n     }\n   }\n \n+  @Override\n+  public void clearAllLogs(long commitIndex) {\n+    lock.writeLock().lock();\n+    try {\n+      // 1. delete\n+      forceFlushLogBuffer();\n+      closeCurrentFile(meta.getCommitLogIndex());\n+      for (int i = 0; i < logDataFileList.size(); i++) {\n+        deleteLogDataAndIndexFile(i);\n+      }\n+      deleteMetaFile();\n+\n+      logDataFileList.clear();\n+      logIndexFileList.clear();\n+\n+      // 2. init\n+      if (!logIndexOffsetList.isEmpty()) {\n+        this.firstLogIndex = Math\n+            .max(commitIndex + 1, firstLogIndex + logIndexOffsetList.size());\n+      } else {\n+        this.firstLogIndex = commitIndex + 1;\n+      }\n+      this.logIndexOffsetList.clear();\n+      recoverMetaFile();\n+      meta = new LogManagerMeta();\n+      createNewLogFile(logDir, firstLogIndex);\n+      logger.info(\"{}, clean all logs success, the new firstLogIndex={}\", this, firstLogIndex);\n+    } catch (IOException e) {\n+      logger.error(\"clear all logs failed,\", e);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n+  private void deleteMetaFile() {\n+    lock.writeLock().lock();\n+    try {\n+      File tmpMetaFile = SystemFileFactory.INSTANCE.getFile(logDir + \"logMeta.tmp\");\n+      if (tmpMetaFile.exists()) {\n+        Files.delete(tmpMetaFile.toPath());\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNTY2NA=="}, "originalCommit": {"oid": "e7cdf51e1497d6fc37c32e479e13c8766860a80a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjY3NTUxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjowMTo1NVrOHvcwQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjowMTo1NVrOHvcwQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNjIyNQ==", "bodyText": "\"will be deleted\"", "url": "https://github.com/apache/iotdb/pull/1956#discussion_r519516225", "createdAt": "2020-11-09T02:01:55Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -945,23 +1008,34 @@ private int comparePersistLogFileName(File file1, File file2) {\n     if (endIndex - startIndex > maxNumberOfLogsPerFetchOnDisk) {\n       newEndIndex = startIndex + maxNumberOfLogsPerFetchOnDisk;\n     }\n-    logger.debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n-        endIndex, startIndex, newEndIndex);\n+    logger\n+        .debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n+            endIndex, startIndex, newEndIndex);\n \n-    List<Pair<File, Pair<Long, Long>>> logDataFileAndOffsetList = getLogDataFileAndOffset(\n-        startIndex, newEndIndex);\n-    if (logDataFileAndOffsetList.isEmpty()) {\n-      return Collections.emptyList();\n-    }\n+    // maybe the logs will be delete during checkDeletePersistRaftLog or clearAllLogs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cdf51e1497d6fc37c32e479e13c8766860a80a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjY3NjM1OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjowMjozOVrOHvcwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjowMjozOVrOHvcwwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNjM1NA==", "bodyText": "\"being deleted\"", "url": "https://github.com/apache/iotdb/pull/1956#discussion_r519516354", "createdAt": "2020-11-09T02:02:39Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -945,23 +1008,34 @@ private int comparePersistLogFileName(File file1, File file2) {\n     if (endIndex - startIndex > maxNumberOfLogsPerFetchOnDisk) {\n       newEndIndex = startIndex + maxNumberOfLogsPerFetchOnDisk;\n     }\n-    logger.debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n-        endIndex, startIndex, newEndIndex);\n+    logger\n+        .debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n+            endIndex, startIndex, newEndIndex);\n \n-    List<Pair<File, Pair<Long, Long>>> logDataFileAndOffsetList = getLogDataFileAndOffset(\n-        startIndex, newEndIndex);\n-    if (logDataFileAndOffsetList.isEmpty()) {\n-      return Collections.emptyList();\n-    }\n+    // maybe the logs will be delete during checkDeletePersistRaftLog or clearAllLogs,\n+    // use writeLock for two reasons:\n+    // 1.if the log file to read is the last log file, we need to get write lock to flush logBuffer,\n+    // 2.avoid log files be deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cdf51e1497d6fc37c32e479e13c8766860a80a"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjY4MDYxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjowNjoxNFrOHvczOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNDoyNDoxNVrOHvejYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNjk4Ng==", "bodyText": "Is there anywhere using read lock of this lock? If not, maybe it is better to consider using a more light-weighted lock.", "url": "https://github.com/apache/iotdb/pull/1956#discussion_r519516986", "createdAt": "2020-11-09T02:06:14Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -945,23 +1008,34 @@ private int comparePersistLogFileName(File file1, File file2) {\n     if (endIndex - startIndex > maxNumberOfLogsPerFetchOnDisk) {\n       newEndIndex = startIndex + maxNumberOfLogsPerFetchOnDisk;\n     }\n-    logger.debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n-        endIndex, startIndex, newEndIndex);\n+    logger\n+        .debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n+            endIndex, startIndex, newEndIndex);\n \n-    List<Pair<File, Pair<Long, Long>>> logDataFileAndOffsetList = getLogDataFileAndOffset(\n-        startIndex, newEndIndex);\n-    if (logDataFileAndOffsetList.isEmpty()) {\n-      return Collections.emptyList();\n-    }\n+    // maybe the logs will be delete during checkDeletePersistRaftLog or clearAllLogs,\n+    // use writeLock for two reasons:\n+    // 1.if the log file to read is the last log file, we need to get write lock to flush logBuffer,\n+    // 2.avoid log files be deleted\n+    lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cdf51e1497d6fc37c32e479e13c8766860a80a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0NTY5OQ==", "bodyText": "i intend to use ReentrantLock instead of ReentrantReadWriteLock", "url": "https://github.com/apache/iotdb/pull/1956#discussion_r519545699", "createdAt": "2020-11-09T04:24:15Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -945,23 +1008,34 @@ private int comparePersistLogFileName(File file1, File file2) {\n     if (endIndex - startIndex > maxNumberOfLogsPerFetchOnDisk) {\n       newEndIndex = startIndex + maxNumberOfLogsPerFetchOnDisk;\n     }\n-    logger.debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n-        endIndex, startIndex, newEndIndex);\n+    logger\n+        .debug(\"intend to get logs between[{}, {}], actually get logs between[{},{}]\", startIndex,\n+            endIndex, startIndex, newEndIndex);\n \n-    List<Pair<File, Pair<Long, Long>>> logDataFileAndOffsetList = getLogDataFileAndOffset(\n-        startIndex, newEndIndex);\n-    if (logDataFileAndOffsetList.isEmpty()) {\n-      return Collections.emptyList();\n-    }\n+    // maybe the logs will be delete during checkDeletePersistRaftLog or clearAllLogs,\n+    // use writeLock for two reasons:\n+    // 1.if the log file to read is the last log file, we need to get write lock to flush logBuffer,\n+    // 2.avoid log files be deleted\n+    lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNjk4Ng=="}, "originalCommit": {"oid": "e7cdf51e1497d6fc37c32e479e13c8766860a80a"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 599, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}