{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjY0Mzgz", "number": 1341, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo0Nzo0MFrOEEM6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDozNjo1MVrOEEPR8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODQxMjY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo0Nzo0MFrOGhrKBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyMjozOFrOGhumAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2MzI3MA==", "bodyText": "do we need to order by path?", "url": "https://github.com/apache/iotdb/pull/1341#discussion_r437963270", "createdAt": "2020-06-10T08:47:40Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -798,6 +800,18 @@ public int getNodesCountInGivenLevel(String prefixPath, int level) throws Metada\n           }\n         }\n       }\n+\n+      // if ordered by heat, we sort all the timeseries by the descending order of the last insert timestamp\n+      if (plan.isOrderByHeat()) {\n+        allMatchedNodes = allMatchedNodes.stream().sorted(\n+            Comparator.comparingLong(MTree::getLastTimeStamp).reversed()\n+                .thenComparing(MNode::getFullPath)).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d6082583a1ca848f51f80f579a95676318c3d7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxOTU4Nw==", "bodyText": "@qiaojialin Hi, in my opinion, order by path is better than disorder relatively.", "url": "https://github.com/apache/iotdb/pull/1341#discussion_r438019587", "createdAt": "2020-06-10T10:22:38Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -798,6 +800,18 @@ public int getNodesCountInGivenLevel(String prefixPath, int level) throws Metada\n           }\n         }\n       }\n+\n+      // if ordered by heat, we sort all the timeseries by the descending order of the last insert timestamp\n+      if (plan.isOrderByHeat()) {\n+        allMatchedNodes = allMatchedNodes.stream().sorted(\n+            Comparator.comparingLong(MTree::getLastTimeStamp).reversed()\n+                .thenComparing(MNode::getFullPath)).collect(toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2MzI3MA=="}, "originalCommit": {"oid": "16d6082583a1ca848f51f80f579a95676318c3d7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODQzNjY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo1NDowMFrOGhrZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxMDozM1rOGhsCLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2NzI1Ng==", "bodyText": "it's better to return List<MeasurementMNode> instead of List<String>, Zesong may be working on this.", "url": "https://github.com/apache/iotdb/pull/1341#discussion_r437967256", "createdAt": "2020-06-10T08:54:00Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -657,7 +713,8 @@ private int getCountInGivenLevel(MNode node, int targetLevel) {\n   /**\n    * Iterate through MTree to fetch metadata info of all leaf nodes under the given seriesPath\n    *\n-   * @param timeseriesSchemaList List<timeseriesSchema>\n+   * @param timeseriesSchemaList Collection<timeseriesSchema> result: [name, alias, storage group,\n+   *                          dataType, encoding, compression, offset, lastTimeStamp]\n    */\n   private void findPath(MNode node, String[] nodes, int idx, String parent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d6082583a1ca848f51f80f579a95676318c3d7"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3NzY0Ng==", "bodyText": "It actually returns List, I forgot to change the comments back.", "url": "https://github.com/apache/iotdb/pull/1341#discussion_r437977646", "createdAt": "2020-06-10T09:10:33Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -657,7 +713,8 @@ private int getCountInGivenLevel(MNode node, int targetLevel) {\n   /**\n    * Iterate through MTree to fetch metadata info of all leaf nodes under the given seriesPath\n    *\n-   * @param timeseriesSchemaList List<timeseriesSchema>\n+   * @param timeseriesSchemaList Collection<timeseriesSchema> result: [name, alias, storage group,\n+   *                          dataType, encoding, compression, offset, lastTimeStamp]\n    */\n   private void findPath(MNode node, String[] nodes, int idx, String parent,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2NzI1Ng=="}, "originalCommit": {"oid": "16d6082583a1ca848f51f80f579a95676318c3d7"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODgwMTE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDozNjo1MVrOGhvCGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDozNjo1MVrOGhvCGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNjc3OA==", "bodyText": "Hi, you forgot the lastTimestamp column here~", "url": "https://github.com/apache/iotdb/pull/1341#discussion_r438026778", "createdAt": "2020-06-10T10:36:51Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -624,6 +631,34 @@ private int getCountInGivenLevel(MNode node, int targetLevel) {\n     return cnt;\n   }\n \n+  /**\n+   * Get all time series schema under the given path order by insert frequency\n+   *\n+   * <p>result: [name, alias, storage group, dataType, encoding, compression, offset]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cfa47e295d9326ccb6b3d35ed407867b2fac07"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4928, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}