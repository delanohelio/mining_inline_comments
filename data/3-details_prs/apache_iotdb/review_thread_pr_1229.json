{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDQ2NDU4", "number": 1229, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjowMjo0M1rOD-EcUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMzozNzoyOFrOEAWUIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDExMDg4OnYy", "diffSide": "RIGHT", "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjowMjo0M1rOGX8ZaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzoxNVrOGX-mUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1OTk3Nw==", "bodyText": "The format of message is changed, the example data should also be changed\nexample/rocketmq/src/main/java/org/apache/iotdb/rocketmq/Constant.java", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427759977", "createdAt": "2020-05-20T06:02:43Z", "author": {"login": "qiaojialin"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjA0OQ==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427796049", "createdAt": "2020-05-20T07:27:15Z", "author": {"login": "SilverNarcissus"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1OTk3Nw=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDExMjc4OnYy", "diffSide": "RIGHT", "path": "service-rpc/rpc-changelist.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjowMzozMlrOGX8ahw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzoxMlrOGX-mPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2MDI2Mw==", "bodyText": "remove this", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427760263", "createdAt": "2020-05-20T06:03:32Z", "author": {"login": "qiaojialin"}, "path": "service-rpc/rpc-changelist.md", "diffHunk": "@@ -121,3 +121,35 @@ Last Updated on 2019-10-27 by Lei Rui.\n | Add required i64 statementId in TSExecuteStatementReq        | Yuan Tian |\n | Add required binary time, required list<binary> valueList, required list<binary> bitmapList and remove required binary values, required i32 rowCount in TSQueryDataSet| Yuan Tian |\n | Add optional i32 fetchSize in TSExecuteStatementReq,<br />Add optional TSQueryDataSet in TSExecuteStatementResp| liutaohua |\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjAzMQ==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427796031", "createdAt": "2020-05-20T07:27:12Z", "author": {"login": "SilverNarcissus"}, "path": "service-rpc/rpc-changelist.md", "diffHunk": "@@ -121,3 +121,35 @@ Last Updated on 2019-10-27 by Lei Rui.\n | Add required i64 statementId in TSExecuteStatementReq        | Yuan Tian |\n | Add required binary time, required list<binary> valueList, required list<binary> bitmapList and remove required binary values, required i32 rowCount in TSQueryDataSet| Yuan Tian |\n | Add optional i32 fetchSize in TSExecuteStatementReq,<br />Add optional TSQueryDataSet in TSExecuteStatementResp| liutaohua |\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2MDI2Mw=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE1MTI5OnYy", "diffSide": "RIGHT", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoyMDo1MFrOGX8yOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzoxMVrOGX-mMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NjMzMQ==", "bodyText": "Could we refer type from values.class and omit this types", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427766331", "createdAt": "2020-05-20T06:20:50Z", "author": {"login": "qiaojialin"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjAxNw==", "bodyText": "If user uses wrong type, we will fall at server end. I think we need fall at client to follow the \"fall quickly\" principle.", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427796017", "createdAt": "2020-05-20T07:27:11Z", "author": {"login": "SilverNarcissus"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NjMzMQ=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE1MzY5OnYy", "diffSide": "LEFT", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoyMTo1NFrOGX8zyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDozNjo1MFrOGblWAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NjcyOA==", "bodyText": "we'd better add back the List values interface", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427766728", "createdAt": "2020-05-20T06:21:54Z", "author": {"login": "qiaojialin"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n       Object... values) throws IoTDBConnectionException, StatementExecutionException {\n-    List<String> stringValues = new ArrayList<>();\n-    for (Object o : values) {\n-      stringValues.add(o.toString());\n-    }\n+    List<Object> valuesList = new ArrayList<>(Arrays.asList(values));\n \n-    insertRecord(deviceId, time, measurements, stringValues);\n+    insertRecord(deviceId, time, measurements, types, valuesList);\n   }\n \n-  /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n-   *\n-   * @see Session#insertRecords(List, List, List, List)\n-   * @see Session#insertTablet(Tablet)\n-   */\n-  public void insertRecord(String deviceId, long time, List<String> measurements,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjAwNA==", "bodyText": "Thanks~ Could you give a function signature here?", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427796004", "createdAt": "2020-05-20T07:27:09Z", "author": {"login": "SilverNarcissus"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n       Object... values) throws IoTDBConnectionException, StatementExecutionException {\n-    List<String> stringValues = new ArrayList<>();\n-    for (Object o : values) {\n-      stringValues.add(o.toString());\n-    }\n+    List<Object> valuesList = new ArrayList<>(Arrays.asList(values));\n \n-    insertRecord(deviceId, time, measurements, stringValues);\n+    insertRecord(deviceId, time, measurements, types, valuesList);\n   }\n \n-  /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n-   *\n-   * @see Session#insertRecords(List, List, List, List)\n-   * @see Session#insertTablet(Tablet)\n-   */\n-  public void insertRecord(String deviceId, long time, List<String> measurements,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NjcyOA=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU3NjU3Nw==", "bodyText": "public void insertRecord(String deviceId, long time, List measurements, List values)", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r431576577", "createdAt": "2020-05-28T04:36:50Z", "author": {"login": "qiaojialin"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n       Object... values) throws IoTDBConnectionException, StatementExecutionException {\n-    List<String> stringValues = new ArrayList<>();\n-    for (Object o : values) {\n-      stringValues.add(o.toString());\n-    }\n+    List<Object> valuesList = new ArrayList<>(Arrays.asList(values));\n \n-    insertRecord(deviceId, time, measurements, stringValues);\n+    insertRecord(deviceId, time, measurements, types, valuesList);\n   }\n \n-  /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n-   *\n-   * @see Session#insertRecords(List, List, List, List)\n-   * @see Session#insertTablet(Tablet)\n-   */\n-  public void insertRecord(String deviceId, long time, List<String> measurements,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NjcyOA=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE1NDYxOnYy", "diffSide": "RIGHT", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoyMjoxOFrOGX80XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzowOVrOGX-mGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2Njg3Nw==", "bodyText": "Why not use List directly", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427766877", "createdAt": "2020-05-20T06:22:18Z", "author": {"login": "qiaojialin"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n       Object... values) throws IoTDBConnectionException, StatementExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTk5NQ==", "bodyText": "This method is add for some client using dynamic parameter. You can refer to https://issues.apache.org/jira/projects/IOTDB/issues/IOTDB-442?filter=allissues", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795995", "createdAt": "2020-05-20T07:27:09Z", "author": {"login": "SilverNarcissus"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n       Object... values) throws IoTDBConnectionException, StatementExecutionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2Njg3Nw=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE1NTA2OnYy", "diffSide": "RIGHT", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoyMjoyOVrOGX80oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzowNlrOGX-mBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2Njk0NQ==", "bodyText": "format back", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427766945", "createdAt": "2020-05-20T06:22:29Z", "author": {"login": "qiaojialin"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n       Object... values) throws IoTDBConnectionException, StatementExecutionException {\n-    List<String> stringValues = new ArrayList<>();\n-    for (Object o : values) {\n-      stringValues.add(o.toString());\n-    }\n+    List<Object> valuesList = new ArrayList<>(Arrays.asList(values));\n \n-    insertRecord(deviceId, time, measurements, stringValues);\n+    insertRecord(deviceId, time, measurements, types, valuesList);\n   }\n \n-  /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n-   *\n-   * @see Session#insertRecords(List, List, List, List)\n-   * @see Session#insertTablet(Tablet)\n-   */\n-  public void insertRecord(String deviceId, long time, List<String> measurements,\n-      List<String> values) throws IoTDBConnectionException, StatementExecutionException {\n-    TSInsertRecordReq request = new TSInsertRecordReq();\n-    request.setSessionId(sessionId);\n-    request.setDeviceId(deviceId);\n-    request.setTimestamp(time);\n-    request.setMeasurements(measurements);\n-    request.setValues(values);\n-\n-    try {\n-      RpcUtils.verifySuccess(client.insertRecord(request));\n-    } catch (TException e) {\n-      if (reconnect()) {\n-        try {\n-          RpcUtils.verifySuccess(client.insertRecord(request));\n-        } catch (TException e1) {\n-          throw new IoTDBConnectionException(e1);\n-        }\n-      } else {\n-        throw new IoTDBConnectionException(\"Fail to reconnect to server,\"\n-            + \" please check server status\", e);\n-      }\n-    }\n-  }\n \n \n   /**\n    * insert the data of a device. For each timestamp, the number of measurements is the same.\n-   *\n-   *  a Tablet example:\n-   *\n-   *        device1\n-   *     time s1, s2, s3\n-   *     1,   1,  1,  1\n-   *     2,   2,  2,  2\n-   *     3,   3,  3,  3\n-   *\n+   * <p>\n+   * a Tablet example:\n+   * <p>\n+   * device1 time s1, s2, s3 1,   1,  1,  1 2,   2,  2,  2 3,   3,  3,  3\n+   * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTk3Mg==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795972", "createdAt": "2020-05-20T07:27:06Z", "author": {"login": "SilverNarcissus"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -215,66 +218,29 @@ private boolean reconnect() {\n   }\n \n   /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n+   * insert data in one row, if you want to improve your performance, please use insertRecords\n+   * method or insertTablet method\n    *\n-   * @see Session#insertRecords(List, List, List, List)\n+   * @see Session#insertRecords(List, List, List, List, List)\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n       Object... values) throws IoTDBConnectionException, StatementExecutionException {\n-    List<String> stringValues = new ArrayList<>();\n-    for (Object o : values) {\n-      stringValues.add(o.toString());\n-    }\n+    List<Object> valuesList = new ArrayList<>(Arrays.asList(values));\n \n-    insertRecord(deviceId, time, measurements, stringValues);\n+    insertRecord(deviceId, time, measurements, types, valuesList);\n   }\n \n-  /**\n-   * insert data in one row, if you want to improve your performance, please use insertRecords method\n-   * or insertTablet method\n-   *\n-   * @see Session#insertRecords(List, List, List, List)\n-   * @see Session#insertTablet(Tablet)\n-   */\n-  public void insertRecord(String deviceId, long time, List<String> measurements,\n-      List<String> values) throws IoTDBConnectionException, StatementExecutionException {\n-    TSInsertRecordReq request = new TSInsertRecordReq();\n-    request.setSessionId(sessionId);\n-    request.setDeviceId(deviceId);\n-    request.setTimestamp(time);\n-    request.setMeasurements(measurements);\n-    request.setValues(values);\n-\n-    try {\n-      RpcUtils.verifySuccess(client.insertRecord(request));\n-    } catch (TException e) {\n-      if (reconnect()) {\n-        try {\n-          RpcUtils.verifySuccess(client.insertRecord(request));\n-        } catch (TException e1) {\n-          throw new IoTDBConnectionException(e1);\n-        }\n-      } else {\n-        throw new IoTDBConnectionException(\"Fail to reconnect to server,\"\n-            + \" please check server status\", e);\n-      }\n-    }\n-  }\n \n \n   /**\n    * insert the data of a device. For each timestamp, the number of measurements is the same.\n-   *\n-   *  a Tablet example:\n-   *\n-   *        device1\n-   *     time s1, s2, s3\n-   *     1,   1,  1,  1\n-   *     2,   2,  2,  2\n-   *     3,   3,  3,  3\n-   *\n+   * <p>\n+   * a Tablet example:\n+   * <p>\n+   * device1 time s1, s2, s3 1,   1,  1,  1 2,   2,  2,  2 3,   3,  3,  3\n+   * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2Njk0NQ=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE1NzczOnYy", "diffSide": "RIGHT", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjoyMzozNlrOGX82Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzowNVrOGX-l-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NzM4Mg==", "bodyText": "We could provide two types of interfaces:\nList<TSDataType> + List<String>\nor\nList<Object>", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427767382", "createdAt": "2020-05-20T06:23:36Z", "author": {"login": "qiaojialin"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -393,16 +359,17 @@ public void insertTablets(Map<String, Tablet> tablets, boolean sorted)\n   }\n \n   /**\n-   * Insert multiple rows, which can reduce the overhead of network. This method is just like\n-   * jdbc executeBatch, we pack some insert request in batch and send them to server.\n-   * If you want improve your performance, please see insertTablet method\n-   *\n+   * Insert multiple rows, which can reduce the overhead of network. This method is just like jdbc\n+   * executeBatch, we pack some insert request in batch and send them to server. If you want improve\n+   * your performance, please see insertTablet method\n+   * <p>\n    * Each row is independent, which could have different deviceId, time, number of measurements\n    *\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecords(List<String> deviceIds, List<Long> times,\n-      List<List<String>> measurementsList, List<List<String>> valuesList)\n+      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n+      List<List<Object>> valuesList)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTk2MA==", "bodyText": "If user uses wrong type, we will fall at server end. I think we need fall at client to follow the \"fall quickly\" principle.", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795960", "createdAt": "2020-05-20T07:27:05Z", "author": {"login": "SilverNarcissus"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -393,16 +359,17 @@ public void insertTablets(Map<String, Tablet> tablets, boolean sorted)\n   }\n \n   /**\n-   * Insert multiple rows, which can reduce the overhead of network. This method is just like\n-   * jdbc executeBatch, we pack some insert request in batch and send them to server.\n-   * If you want improve your performance, please see insertTablet method\n-   *\n+   * Insert multiple rows, which can reduce the overhead of network. This method is just like jdbc\n+   * executeBatch, we pack some insert request in batch and send them to server. If you want improve\n+   * your performance, please see insertTablet method\n+   * <p>\n    * Each row is independent, which could have different deviceId, time, number of measurements\n    *\n    * @see Session#insertTablet(Tablet)\n    */\n   public void insertRecords(List<String> deviceIds, List<Long> times,\n-      List<List<String>> measurementsList, List<List<String>> valuesList)\n+      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n+      List<List<Object>> valuesList)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2NzM4Mg=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE4MDEwOnYy", "diffSide": "RIGHT", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjozMjo0NVrOGX9EQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzozNjo0NVrOGX-5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3MDk0Nw==", "bodyText": "no need to construct a Binary, s.getBytes(TSFileConfig.STRING_CHARSET) is ok", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427770947", "createdAt": "2020-05-20T06:32:45Z", "author": {"login": "qiaojialin"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -434,26 +408,103 @@ public void insertRecords(List<String> deviceIds, List<Long> times,\n     }\n   }\n \n+\n   /**\n-   * This method NOT insert data into database and the server just return after accept the request,\n-   * this method should be used to test other time cost in client\n+   * insert data in one row, if you want improve your performance, please use insertInBatch method\n+   * or insertBatch method\n+   *\n+   * @see Session#insertRecords(List, List, List, List, List)\n+   * @see Session#insertTablet(Tablet)\n    */\n-  public void testInsertRecord(String deviceId, long time, List<String> measurements,\n-      List<String> values) throws IoTDBConnectionException, StatementExecutionException {\n+  public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n+      List<Object> values) throws IoTDBConnectionException, StatementExecutionException {\n     TSInsertRecordReq request = new TSInsertRecordReq();\n     request.setSessionId(sessionId);\n     request.setDeviceId(deviceId);\n     request.setTimestamp(time);\n     request.setMeasurements(measurements);\n-    request.setValues(values);\n+    ByteBuffer buffer = ByteBuffer.allocate(calculateLength(types, values));\n+    putValues(types, values, buffer);\n+    buffer.flip();\n+    request.setValues(buffer);\n \n     try {\n-      RpcUtils.verifySuccess(client.testInsertRecord(request));\n+      RpcUtils.verifySuccess(client.insertRecord(request));\n     } catch (TException e) {\n       throw new IoTDBConnectionException(e);\n     }\n   }\n \n+  /**\n+   * put value in buffer\n+   * @param types types list\n+   * @param values values list\n+   * @param buffer buffer to insert\n+   * @throws IoTDBConnectionException\n+   */\n+  private void putValues(List<TSDataType> types, List<Object> values, ByteBuffer buffer)\n+      throws IoTDBConnectionException {\n+    for (int i = 0; i < values.size(); i++) {\n+      ReadWriteIOUtils.write(types.get(i), buffer);\n+      switch (types.get(i)) {\n+        case BOOLEAN:\n+          ReadWriteIOUtils.write((Boolean) values.get(i), buffer);\n+          break;\n+        case INT32:\n+          ReadWriteIOUtils.write((Integer) values.get(i), buffer);\n+          break;\n+        case INT64:\n+          ReadWriteIOUtils.write((Long) values.get(i), buffer);\n+          break;\n+        case FLOAT:\n+          ReadWriteIOUtils.write((Float) values.get(i), buffer);\n+          break;\n+        case DOUBLE:\n+          ReadWriteIOUtils.write((Double) values.get(i), buffer);\n+          break;\n+        case TEXT:\n+          ReadWriteIOUtils.write(new Binary((String) values.get(i)), buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMDkwMQ==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427800901", "createdAt": "2020-05-20T07:36:45Z", "author": {"login": "SilverNarcissus"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -434,26 +408,103 @@ public void insertRecords(List<String> deviceIds, List<Long> times,\n     }\n   }\n \n+\n   /**\n-   * This method NOT insert data into database and the server just return after accept the request,\n-   * this method should be used to test other time cost in client\n+   * insert data in one row, if you want improve your performance, please use insertInBatch method\n+   * or insertBatch method\n+   *\n+   * @see Session#insertRecords(List, List, List, List, List)\n+   * @see Session#insertTablet(Tablet)\n    */\n-  public void testInsertRecord(String deviceId, long time, List<String> measurements,\n-      List<String> values) throws IoTDBConnectionException, StatementExecutionException {\n+  public void insertRecord(String deviceId, long time, List<String> measurements,\n+      List<TSDataType> types,\n+      List<Object> values) throws IoTDBConnectionException, StatementExecutionException {\n     TSInsertRecordReq request = new TSInsertRecordReq();\n     request.setSessionId(sessionId);\n     request.setDeviceId(deviceId);\n     request.setTimestamp(time);\n     request.setMeasurements(measurements);\n-    request.setValues(values);\n+    ByteBuffer buffer = ByteBuffer.allocate(calculateLength(types, values));\n+    putValues(types, values, buffer);\n+    buffer.flip();\n+    request.setValues(buffer);\n \n     try {\n-      RpcUtils.verifySuccess(client.testInsertRecord(request));\n+      RpcUtils.verifySuccess(client.insertRecord(request));\n     } catch (TException e) {\n       throw new IoTDBConnectionException(e);\n     }\n   }\n \n+  /**\n+   * put value in buffer\n+   * @param types types list\n+   * @param values values list\n+   * @param buffer buffer to insert\n+   * @throws IoTDBConnectionException\n+   */\n+  private void putValues(List<TSDataType> types, List<Object> values, ByteBuffer buffer)\n+      throws IoTDBConnectionException {\n+    for (int i = 0; i < values.size(); i++) {\n+      ReadWriteIOUtils.write(types.get(i), buffer);\n+      switch (types.get(i)) {\n+        case BOOLEAN:\n+          ReadWriteIOUtils.write((Boolean) values.get(i), buffer);\n+          break;\n+        case INT32:\n+          ReadWriteIOUtils.write((Integer) values.get(i), buffer);\n+          break;\n+        case INT64:\n+          ReadWriteIOUtils.write((Long) values.get(i), buffer);\n+          break;\n+        case FLOAT:\n+          ReadWriteIOUtils.write((Float) values.get(i), buffer);\n+          break;\n+        case DOUBLE:\n+          ReadWriteIOUtils.write((Double) values.get(i), buffer);\n+          break;\n+        case TEXT:\n+          ReadWriteIOUtils.write(new Binary((String) values.get(i)), buffer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3MDk0Nw=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDIxMDEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo0NDoyMVrOGX9W0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzozMDowM1rOGX-ryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NTY5OQ==", "bodyText": "add an error status for this line", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427775699", "createdAt": "2020-05-20T06:44:21Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -1066,15 +1066,22 @@ public TSExecuteBatchStatementResp insertRecords(TSInsertRecordsReq req) {\n \n     InsertPlan plan = new InsertPlan();\n     for (int i = 0; i < req.deviceIds.size(); i++) {\n-      plan.setDeviceId(req.getDeviceIds().get(i));\n-      plan.setTime(req.getTimestamps().get(i));\n-      plan.setMeasurements(req.getMeasurementsList().get(i).toArray(new String[0]));\n-      plan.setValues(req.getValuesList().get(i).toArray(new String[0]));\n-      TSStatus status = checkAuthority(plan, req.getSessionId());\n-      if (status != null) {\n-        resp.addToStatusList(status);\n-      } else {\n-        resp.addToStatusList(executePlan(plan));\n+      try {\n+        plan.setDeviceId(req.getDeviceIds().get(i));\n+        plan.setTime(req.getTimestamps().get(i));\n+        plan.setMeasurements(req.getMeasurementsList().get(i).toArray(new String[0]));\n+        plan.setTypes(new TSDataType[plan.getMeasurements().length]);\n+        plan.setValues(new Object[plan.getMeasurements().length]);\n+        plan.getValues(req.valuesList.get(i));\n+        TSStatus status = checkAuthority(plan, req.getSessionId());\n+        if (status != null) {\n+          resp.addToStatusList(status);\n+        } else {\n+          resp.addToStatusList(executePlan(plan));\n+        }\n+      }\n+      catch (Exception e) {\n+        logger.error(\"meet error when insert in batch\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzQ1MQ==", "bodyText": "The status has been set to the resp at\nresp.addToStatusList(executePlan(plan));", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427797451", "createdAt": "2020-05-20T07:30:03Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -1066,15 +1066,22 @@ public TSExecuteBatchStatementResp insertRecords(TSInsertRecordsReq req) {\n \n     InsertPlan plan = new InsertPlan();\n     for (int i = 0; i < req.deviceIds.size(); i++) {\n-      plan.setDeviceId(req.getDeviceIds().get(i));\n-      plan.setTime(req.getTimestamps().get(i));\n-      plan.setMeasurements(req.getMeasurementsList().get(i).toArray(new String[0]));\n-      plan.setValues(req.getValuesList().get(i).toArray(new String[0]));\n-      TSStatus status = checkAuthority(plan, req.getSessionId());\n-      if (status != null) {\n-        resp.addToStatusList(status);\n-      } else {\n-        resp.addToStatusList(executePlan(plan));\n+      try {\n+        plan.setDeviceId(req.getDeviceIds().get(i));\n+        plan.setTime(req.getTimestamps().get(i));\n+        plan.setMeasurements(req.getMeasurementsList().get(i).toArray(new String[0]));\n+        plan.setTypes(new TSDataType[plan.getMeasurements().length]);\n+        plan.setValues(new Object[plan.getMeasurements().length]);\n+        plan.getValues(req.valuesList.get(i));\n+        TSStatus status = checkAuthority(plan, req.getSessionId());\n+        if (status != null) {\n+          resp.addToStatusList(status);\n+        } else {\n+          resp.addToStatusList(executePlan(plan));\n+        }\n+      }\n+      catch (Exception e) {\n+        logger.error(\"meet error when insert in batch\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NTY5OQ=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDIxOTM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo0Nzo1MFrOGX9cuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNjo1OFrOGX-lvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  plan.getValues(req.values);\n          \n          \n            \n                  plan.setValues(req.values);", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427777208", "createdAt": "2020-05-20T06:47:50Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -1111,7 +1118,9 @@ public TSStatus insertRecord(TSInsertRecordReq req) {\n       plan.setDeviceId(req.getDeviceId());\n       plan.setTime(req.getTimestamp());\n       plan.setMeasurements(req.getMeasurements().toArray(new String[0]));\n-      plan.setValues(req.getValues().toArray(new String[0]));\n+      plan.setTypes(new TSDataType[plan.getMeasurements().length]);\n+      plan.setValues(new Object[plan.getMeasurements().length]);\n+      plan.getValues(req.values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTkwMQ==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795901", "createdAt": "2020-05-20T07:26:58Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -1111,7 +1118,9 @@ public TSStatus insertRecord(TSInsertRecordReq req) {\n       plan.setDeviceId(req.getDeviceId());\n       plan.setTime(req.getTimestamp());\n       plan.setMeasurements(req.getMeasurements().toArray(new String[0]));\n-      plan.setValues(req.getValues().toArray(new String[0]));\n+      plan.setTypes(new TSDataType[plan.getMeasurements().length]);\n+      plan.setValues(new Object[plan.getMeasurements().length]);\n+      plan.getValues(req.values);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzIwOA=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDIyMTg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/InsertPlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo0ODo1NVrOGX9eZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNjo1OFrOGX-luA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzYzNg==", "bodyText": "setValues", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427777636", "createdAt": "2020-05-20T06:48:55Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/InsertPlan.java", "diffHunk": "@@ -174,8 +234,102 @@ public void serializeTo(DataOutputStream stream) throws IOException {\n       schema.serializeTo(stream);\n     }\n \n-    for (String m : values) {\n-      putString(stream, m);\n+    try {\n+      putValues(stream);\n+    } catch (QueryProcessException e) {\n+      throw new IOException(e);\n+    }\n+  }\n+\n+  private void putValues(DataOutputStream outputStream) throws QueryProcessException, IOException {\n+    for (int i = 0; i < values.length; i++) {\n+      ReadWriteIOUtils.write(types[i], outputStream);\n+      switch (types[i]) {\n+        case BOOLEAN:\n+          ReadWriteIOUtils.write((Boolean) values[i], outputStream);\n+          break;\n+        case INT32:\n+          ReadWriteIOUtils.write((Integer) values[i], outputStream);\n+          break;\n+        case INT64:\n+          ReadWriteIOUtils.write((Long) values[i], outputStream);\n+          break;\n+        case FLOAT:\n+          ReadWriteIOUtils.write((Float) values[i], outputStream);\n+          break;\n+        case DOUBLE:\n+          ReadWriteIOUtils.write((Double) values[i], outputStream);\n+          break;\n+        case TEXT:\n+          ReadWriteIOUtils.write((Binary) values[i], outputStream);\n+          break;\n+        default:\n+          throw new QueryProcessException(\"Unsupported data type:\" + types[i]);\n+      }\n+    }\n+  }\n+\n+  private void putValues(ByteBuffer buffer) throws QueryProcessException {\n+    for (int i = 0; i < values.length; i++) {\n+      ReadWriteIOUtils.write(types[i], buffer);\n+      switch (types[i]) {\n+        case BOOLEAN:\n+          ReadWriteIOUtils.write((Boolean) values[i], buffer);\n+          break;\n+        case INT32:\n+          ReadWriteIOUtils.write((Integer) values[i], buffer);\n+          break;\n+        case INT64:\n+          ReadWriteIOUtils.write((Long) values[i], buffer);\n+          break;\n+        case FLOAT:\n+          ReadWriteIOUtils.write((Float) values[i], buffer);\n+          break;\n+        case DOUBLE:\n+          ReadWriteIOUtils.write((Double) values[i], buffer);\n+          break;\n+        case TEXT:\n+          ReadWriteIOUtils.write((Binary) values[i], buffer);\n+          break;\n+        default:\n+          throw new QueryProcessException(\"Unsupported data type:\" + types[i]);\n+      }\n+    }\n+  }\n+\n+  public TSDataType[] getTypes() {\n+    return types;\n+  }\n+\n+  public void setTypes(TSDataType[] types) {\n+    this.types = types;\n+  }\n+\n+  public void getValues(ByteBuffer buffer) throws QueryProcessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTg5Ng==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795896", "createdAt": "2020-05-20T07:26:58Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/InsertPlan.java", "diffHunk": "@@ -174,8 +234,102 @@ public void serializeTo(DataOutputStream stream) throws IOException {\n       schema.serializeTo(stream);\n     }\n \n-    for (String m : values) {\n-      putString(stream, m);\n+    try {\n+      putValues(stream);\n+    } catch (QueryProcessException e) {\n+      throw new IOException(e);\n+    }\n+  }\n+\n+  private void putValues(DataOutputStream outputStream) throws QueryProcessException, IOException {\n+    for (int i = 0; i < values.length; i++) {\n+      ReadWriteIOUtils.write(types[i], outputStream);\n+      switch (types[i]) {\n+        case BOOLEAN:\n+          ReadWriteIOUtils.write((Boolean) values[i], outputStream);\n+          break;\n+        case INT32:\n+          ReadWriteIOUtils.write((Integer) values[i], outputStream);\n+          break;\n+        case INT64:\n+          ReadWriteIOUtils.write((Long) values[i], outputStream);\n+          break;\n+        case FLOAT:\n+          ReadWriteIOUtils.write((Float) values[i], outputStream);\n+          break;\n+        case DOUBLE:\n+          ReadWriteIOUtils.write((Double) values[i], outputStream);\n+          break;\n+        case TEXT:\n+          ReadWriteIOUtils.write((Binary) values[i], outputStream);\n+          break;\n+        default:\n+          throw new QueryProcessException(\"Unsupported data type:\" + types[i]);\n+      }\n+    }\n+  }\n+\n+  private void putValues(ByteBuffer buffer) throws QueryProcessException {\n+    for (int i = 0; i < values.length; i++) {\n+      ReadWriteIOUtils.write(types[i], buffer);\n+      switch (types[i]) {\n+        case BOOLEAN:\n+          ReadWriteIOUtils.write((Boolean) values[i], buffer);\n+          break;\n+        case INT32:\n+          ReadWriteIOUtils.write((Integer) values[i], buffer);\n+          break;\n+        case INT64:\n+          ReadWriteIOUtils.write((Long) values[i], buffer);\n+          break;\n+        case FLOAT:\n+          ReadWriteIOUtils.write((Float) values[i], buffer);\n+          break;\n+        case DOUBLE:\n+          ReadWriteIOUtils.write((Double) values[i], buffer);\n+          break;\n+        case TEXT:\n+          ReadWriteIOUtils.write((Binary) values[i], buffer);\n+          break;\n+        default:\n+          throw new QueryProcessException(\"Unsupported data type:\" + types[i]);\n+      }\n+    }\n+  }\n+\n+  public TSDataType[] getTypes() {\n+    return types;\n+  }\n+\n+  public void setTypes(TSDataType[] types) {\n+    this.types = types;\n+  }\n+\n+  public void getValues(ByteBuffer buffer) throws QueryProcessException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzYzNg=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDI0NjE4OnYy", "diffSide": "RIGHT", "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo1Nzo1MFrOGX9uAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNjo1NlrOGX-lqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTYzMg==", "bodyText": "remove this", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427781632", "createdAt": "2020-05-20T06:57:50Z", "author": {"login": "qiaojialin"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -168,32 +178,47 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n     measurements.add(\"s3\");\n     List<String> deviceIds = new ArrayList<>();\n     List<List<String>> measurementsList = new ArrayList<>();\n-    List<List<String>> valuesList = new ArrayList<>();\n+    List<List<Object>> valuesList = new ArrayList<>();\n     List<Long> timestamps = new ArrayList<>();\n+    List<List<TSDataType>> typesList = new ArrayList<>();\n \n     for (long time = 0; time < 500; time++) {\n-      List<String> values = new ArrayList<>();\n-      values.add(\"1\");\n-      values.add(\"2\");\n-      values.add(\"3\");\n+      List<Object> values = new ArrayList<>();\n+      List<TSDataType> types = new ArrayList<>();\n+      values.add(1L);\n+      values.add(2L);\n+      values.add(3L);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n \n       deviceIds.add(deviceId);\n       measurementsList.add(measurements);\n       valuesList.add(values);\n+      typesList.add(types);\n       timestamps.add(time);\n       if (time != 0 && time % 100 == 0) {\n-        session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+        session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n         deviceIds.clear();\n         measurementsList.clear();\n         valuesList.clear();\n         timestamps.clear();\n       }\n     }\n \n-    session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+    session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n   }\n-\n   /**\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTg4Mg==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795882", "createdAt": "2020-05-20T07:26:56Z", "author": {"login": "SilverNarcissus"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -168,32 +178,47 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n     measurements.add(\"s3\");\n     List<String> deviceIds = new ArrayList<>();\n     List<List<String>> measurementsList = new ArrayList<>();\n-    List<List<String>> valuesList = new ArrayList<>();\n+    List<List<Object>> valuesList = new ArrayList<>();\n     List<Long> timestamps = new ArrayList<>();\n+    List<List<TSDataType>> typesList = new ArrayList<>();\n \n     for (long time = 0; time < 500; time++) {\n-      List<String> values = new ArrayList<>();\n-      values.add(\"1\");\n-      values.add(\"2\");\n-      values.add(\"3\");\n+      List<Object> values = new ArrayList<>();\n+      List<TSDataType> types = new ArrayList<>();\n+      values.add(1L);\n+      values.add(2L);\n+      values.add(3L);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n \n       deviceIds.add(deviceId);\n       measurementsList.add(measurements);\n       valuesList.add(values);\n+      typesList.add(types);\n       timestamps.add(time);\n       if (time != 0 && time % 100 == 0) {\n-        session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+        session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n         deviceIds.clear();\n         measurementsList.clear();\n         valuesList.clear();\n         timestamps.clear();\n       }\n     }\n \n-    session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+    session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n   }\n-\n   /**\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTYzMg=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDI0NjgyOnYy", "diffSide": "RIGHT", "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo1ODowMVrOGX9uVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNjo1NVrOGX-lnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTcxOQ==", "bodyText": "remove", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427781719", "createdAt": "2020-05-20T06:58:01Z", "author": {"login": "qiaojialin"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -205,6 +230,7 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n    * 3,   3,  3,  3\n    *\n    * Users need to control the count of Tablet and write a batch when it reaches the maxBatchSize\n+>>>>>>> 73dd5eb6e44e2194b650eea72aabcfaf929e5bdc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTg2OA==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795868", "createdAt": "2020-05-20T07:26:55Z", "author": {"login": "SilverNarcissus"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -205,6 +230,7 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n    * 3,   3,  3,  3\n    *\n    * Users need to control the count of Tablet and write a batch when it reaches the maxBatchSize\n+>>>>>>> 73dd5eb6e44e2194b650eea72aabcfaf929e5bdc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTcxOQ=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDI0NzA3OnYy", "diffSide": "RIGHT", "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo1ODowNVrOGX9uew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNjo1M1rOGX-ljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTc1NQ==", "bodyText": "remove", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427781755", "createdAt": "2020-05-20T06:58:05Z", "author": {"login": "qiaojialin"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -168,32 +178,47 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n     measurements.add(\"s3\");\n     List<String> deviceIds = new ArrayList<>();\n     List<List<String>> measurementsList = new ArrayList<>();\n-    List<List<String>> valuesList = new ArrayList<>();\n+    List<List<Object>> valuesList = new ArrayList<>();\n     List<Long> timestamps = new ArrayList<>();\n+    List<List<TSDataType>> typesList = new ArrayList<>();\n \n     for (long time = 0; time < 500; time++) {\n-      List<String> values = new ArrayList<>();\n-      values.add(\"1\");\n-      values.add(\"2\");\n-      values.add(\"3\");\n+      List<Object> values = new ArrayList<>();\n+      List<TSDataType> types = new ArrayList<>();\n+      values.add(1L);\n+      values.add(2L);\n+      values.add(3L);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n \n       deviceIds.add(deviceId);\n       measurementsList.add(measurements);\n       valuesList.add(values);\n+      typesList.add(types);\n       timestamps.add(time);\n       if (time != 0 && time % 100 == 0) {\n-        session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+        session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n         deviceIds.clear();\n         measurementsList.clear();\n         valuesList.clear();\n         timestamps.clear();\n       }\n     }\n \n-    session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+    session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n   }\n-\n   /**\n+<<<<<<< HEAD\n+   * insert a batch data of one device, each batch contains multiple timestamps with values of\n+   * sensors\n+   * <p>\n+   * a RowBatch example:\n+   * <p>\n+   * device1 time s1, s2, s3 1,   1,  1,  1 2,   2,  2,  2 3,   3,  3,  3\n+   * <p>\n+   * Users need to control the count of RowBatch and write a batch when it reaches the maxBatchSize\n+=======", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTg1NQ==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795855", "createdAt": "2020-05-20T07:26:53Z", "author": {"login": "SilverNarcissus"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -168,32 +178,47 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n     measurements.add(\"s3\");\n     List<String> deviceIds = new ArrayList<>();\n     List<List<String>> measurementsList = new ArrayList<>();\n-    List<List<String>> valuesList = new ArrayList<>();\n+    List<List<Object>> valuesList = new ArrayList<>();\n     List<Long> timestamps = new ArrayList<>();\n+    List<List<TSDataType>> typesList = new ArrayList<>();\n \n     for (long time = 0; time < 500; time++) {\n-      List<String> values = new ArrayList<>();\n-      values.add(\"1\");\n-      values.add(\"2\");\n-      values.add(\"3\");\n+      List<Object> values = new ArrayList<>();\n+      List<TSDataType> types = new ArrayList<>();\n+      values.add(1L);\n+      values.add(2L);\n+      values.add(3L);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n \n       deviceIds.add(deviceId);\n       measurementsList.add(measurements);\n       valuesList.add(values);\n+      typesList.add(types);\n       timestamps.add(time);\n       if (time != 0 && time % 100 == 0) {\n-        session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+        session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n         deviceIds.clear();\n         measurementsList.clear();\n         valuesList.clear();\n         timestamps.clear();\n       }\n     }\n \n-    session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+    session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n   }\n-\n   /**\n+<<<<<<< HEAD\n+   * insert a batch data of one device, each batch contains multiple timestamps with values of\n+   * sensors\n+   * <p>\n+   * a RowBatch example:\n+   * <p>\n+   * device1 time s1, s2, s3 1,   1,  1,  1 2,   2,  2,  2 3,   3,  3,  3\n+   * <p>\n+   * Users need to control the count of RowBatch and write a batch when it reaches the maxBatchSize\n+=======", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTc1NQ=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDI0NzQ0OnYy", "diffSide": "RIGHT", "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo1ODoxM1rOGX9uvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNjo1M1rOGX-lig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTgyMA==", "bodyText": "format to a table", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427781820", "createdAt": "2020-05-20T06:58:13Z", "author": {"login": "qiaojialin"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -168,32 +178,47 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n     measurements.add(\"s3\");\n     List<String> deviceIds = new ArrayList<>();\n     List<List<String>> measurementsList = new ArrayList<>();\n-    List<List<String>> valuesList = new ArrayList<>();\n+    List<List<Object>> valuesList = new ArrayList<>();\n     List<Long> timestamps = new ArrayList<>();\n+    List<List<TSDataType>> typesList = new ArrayList<>();\n \n     for (long time = 0; time < 500; time++) {\n-      List<String> values = new ArrayList<>();\n-      values.add(\"1\");\n-      values.add(\"2\");\n-      values.add(\"3\");\n+      List<Object> values = new ArrayList<>();\n+      List<TSDataType> types = new ArrayList<>();\n+      values.add(1L);\n+      values.add(2L);\n+      values.add(3L);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n \n       deviceIds.add(deviceId);\n       measurementsList.add(measurements);\n       valuesList.add(values);\n+      typesList.add(types);\n       timestamps.add(time);\n       if (time != 0 && time % 100 == 0) {\n-        session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+        session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n         deviceIds.clear();\n         measurementsList.clear();\n         valuesList.clear();\n         timestamps.clear();\n       }\n     }\n \n-    session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+    session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n   }\n-\n   /**\n+<<<<<<< HEAD\n+   * insert a batch data of one device, each batch contains multiple timestamps with values of\n+   * sensors\n+   * <p>\n+   * a RowBatch example:\n+   * <p>\n+   * device1 time s1, s2, s3 1,   1,  1,  1 2,   2,  2,  2 3,   3,  3,  3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NTg1MA==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r427795850", "createdAt": "2020-05-20T07:26:53Z", "author": {"login": "SilverNarcissus"}, "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -168,32 +178,47 @@ private static void insertRecords() throws IoTDBConnectionException, BatchExecut\n     measurements.add(\"s3\");\n     List<String> deviceIds = new ArrayList<>();\n     List<List<String>> measurementsList = new ArrayList<>();\n-    List<List<String>> valuesList = new ArrayList<>();\n+    List<List<Object>> valuesList = new ArrayList<>();\n     List<Long> timestamps = new ArrayList<>();\n+    List<List<TSDataType>> typesList = new ArrayList<>();\n \n     for (long time = 0; time < 500; time++) {\n-      List<String> values = new ArrayList<>();\n-      values.add(\"1\");\n-      values.add(\"2\");\n-      values.add(\"3\");\n+      List<Object> values = new ArrayList<>();\n+      List<TSDataType> types = new ArrayList<>();\n+      values.add(1L);\n+      values.add(2L);\n+      values.add(3L);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n+      types.add(TSDataType.INT64);\n \n       deviceIds.add(deviceId);\n       measurementsList.add(measurements);\n       valuesList.add(values);\n+      typesList.add(types);\n       timestamps.add(time);\n       if (time != 0 && time % 100 == 0) {\n-        session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+        session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n         deviceIds.clear();\n         measurementsList.clear();\n         valuesList.clear();\n         timestamps.clear();\n       }\n     }\n \n-    session.insertRecords(deviceIds, timestamps, measurementsList, valuesList);\n+    session.insertRecords(deviceIds, timestamps, measurementsList, typesList, valuesList);\n   }\n-\n   /**\n+<<<<<<< HEAD\n+   * insert a batch data of one device, each batch contains multiple timestamps with values of\n+   * sensors\n+   * <p>\n+   * a RowBatch example:\n+   * <p>\n+   * device1 time s1, s2, s3 1,   1,  1,  1 2,   2,  2,  2 3,   3,  3,  3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MTgyMA=="}, "originalCommit": {"oid": "a2f5001f8b8500473a04f5ea5b8b0bf32e979229"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQzMTA3OnYy", "diffSide": "RIGHT", "path": "service-rpc/rpc-changelist.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjowMjoyMFrOGZzC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNTowOFrOGZ3P0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMzkzNQ==", "bodyText": "I think this is a part of the out-of-date content. It's better to remove it.", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429703935", "createdAt": "2020-05-25T02:02:20Z", "author": {"login": "HTHou"}, "path": "service-rpc/rpc-changelist.md", "diffHunk": "@@ -121,3 +121,34 @@ Last Updated on 2019-10-27 by Lei Rui.\n | Add required i64 statementId in TSExecuteStatementReq        | Yuan Tian |\n | Add required binary time, required list<binary> valueList, required list<binary> bitmapList and remove required binary values, required i32 rowCount in TSQueryDataSet| Yuan Tian |\n | Add optional i32 fetchSize in TSExecuteStatementReq,<br />Add optional TSQueryDataSet in TSExecuteStatementResp| liutaohua |\n+| Add optional map<string, string> props, optional map<string, string> tags, optional map<string, string> attributes and optional string aliasPath in TSCreateTimeseriesReq | Yuan Tian | \n+\n+\n+# 0.10.0 (version-1) -> version-2\n+\n+Last Updated on November 12th, 2019 by Tian Jiang.\n+\n+\n+## 1. Delete Old\n+\n+| Latest Changes                     | Related Committers |\n+| ---------------------------------- | ------------------ |\n+| Remove TS_SessionHandle,TSHandleIdentifier            | Tian Jiang         |\n+| Remove TSStatus,TSExecuteInsertRowInBatchResp            | Jialin Qiao|\n+\n+## 2. Add New\n+\n+| Latest Changes                                               | Related Committers                 |\n+| ------------------------------------------------------------ | ---------------------------------- |\n+| Add parameter sessionId in getTimeZone, getProperties, setStorageGroup, createTimeseries... | Tian Jiang|\n+| Add struct TSQueryNonAlignDataSet                            | Haonan Hou|\n+\n+## 3. Update\n+\n+| Latest Changes                                               | Related Committers     |\n+| ------------------------------------------------------------ | ---------------------- |\n+| Replace TS_SessionHandles with SessionIds, TSOperationHandle with queryIds  | Tian Jiang  |\n+| Add optional TSQueryNonAlignDataSet in TSExecuteStatementResp, TSFetchResultsResp and required bool isAlign in TSFetchResultsReq | Haonan Hou |\n+| Rename TSStatusType to TSStatus   | Jialin Qiao   |\n+| Remove sessionId in TSExecuteBatchStatementResp   | Jialin Qiao   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3Mjc1NA==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429772754", "createdAt": "2020-05-25T07:25:08Z", "author": {"login": "SilverNarcissus"}, "path": "service-rpc/rpc-changelist.md", "diffHunk": "@@ -121,3 +121,34 @@ Last Updated on 2019-10-27 by Lei Rui.\n | Add required i64 statementId in TSExecuteStatementReq        | Yuan Tian |\n | Add required binary time, required list<binary> valueList, required list<binary> bitmapList and remove required binary values, required i32 rowCount in TSQueryDataSet| Yuan Tian |\n | Add optional i32 fetchSize in TSExecuteStatementReq,<br />Add optional TSQueryDataSet in TSExecuteStatementResp| liutaohua |\n+| Add optional map<string, string> props, optional map<string, string> tags, optional map<string, string> attributes and optional string aliasPath in TSCreateTimeseriesReq | Yuan Tian | \n+\n+\n+# 0.10.0 (version-1) -> version-2\n+\n+Last Updated on November 12th, 2019 by Tian Jiang.\n+\n+\n+## 1. Delete Old\n+\n+| Latest Changes                     | Related Committers |\n+| ---------------------------------- | ------------------ |\n+| Remove TS_SessionHandle,TSHandleIdentifier            | Tian Jiang         |\n+| Remove TSStatus,TSExecuteInsertRowInBatchResp            | Jialin Qiao|\n+\n+## 2. Add New\n+\n+| Latest Changes                                               | Related Committers                 |\n+| ------------------------------------------------------------ | ---------------------------------- |\n+| Add parameter sessionId in getTimeZone, getProperties, setStorageGroup, createTimeseries... | Tian Jiang|\n+| Add struct TSQueryNonAlignDataSet                            | Haonan Hou|\n+\n+## 3. Update\n+\n+| Latest Changes                                               | Related Committers     |\n+| ------------------------------------------------------------ | ---------------------- |\n+| Replace TS_SessionHandles with SessionIds, TSOperationHandle with queryIds  | Tian Jiang  |\n+| Add optional TSQueryNonAlignDataSet in TSExecuteStatementResp, TSFetchResultsResp and required bool isAlign in TSFetchResultsReq | Haonan Hou |\n+| Rename TSStatusType to TSStatus   | Jialin Qiao   |\n+| Remove sessionId in TSExecuteBatchStatementResp   | Jialin Qiao   |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMzkzNQ=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQzMzg1OnYy", "diffSide": "RIGHT", "path": "service-rpc/rpc-changelist.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjowNTowOFrOGZzEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNToxM1rOGZ3P-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNDM0OQ==", "bodyText": "Move the line 154 to line 53.", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429704349", "createdAt": "2020-05-25T02:05:08Z", "author": {"login": "HTHou"}, "path": "service-rpc/rpc-changelist.md", "diffHunk": "@@ -121,3 +121,34 @@ Last Updated on 2019-10-27 by Lei Rui.\n | Add required i64 statementId in TSExecuteStatementReq        | Yuan Tian |\n | Add required binary time, required list<binary> valueList, required list<binary> bitmapList and remove required binary values, required i32 rowCount in TSQueryDataSet| Yuan Tian |\n | Add optional i32 fetchSize in TSExecuteStatementReq,<br />Add optional TSQueryDataSet in TSExecuteStatementResp| liutaohua |\n+| Add optional map<string, string> props, optional map<string, string> tags, optional map<string, string> attributes and optional string aliasPath in TSCreateTimeseriesReq | Yuan Tian | \n+\n+\n+# 0.10.0 (version-1) -> version-2\n+\n+Last Updated on November 12th, 2019 by Tian Jiang.\n+\n+\n+## 1. Delete Old\n+\n+| Latest Changes                     | Related Committers |\n+| ---------------------------------- | ------------------ |\n+| Remove TS_SessionHandle,TSHandleIdentifier            | Tian Jiang         |\n+| Remove TSStatus,TSExecuteInsertRowInBatchResp            | Jialin Qiao|\n+\n+## 2. Add New\n+\n+| Latest Changes                                               | Related Committers                 |\n+| ------------------------------------------------------------ | ---------------------------------- |\n+| Add parameter sessionId in getTimeZone, getProperties, setStorageGroup, createTimeseries... | Tian Jiang|\n+| Add struct TSQueryNonAlignDataSet                            | Haonan Hou|\n+\n+## 3. Update\n+\n+| Latest Changes                                               | Related Committers     |\n+| ------------------------------------------------------------ | ---------------------- |\n+| Replace TS_SessionHandles with SessionIds, TSOperationHandle with queryIds  | Tian Jiang  |\n+| Add optional TSQueryNonAlignDataSet in TSExecuteStatementResp, TSFetchResultsResp and required bool isAlign in TSFetchResultsReq | Haonan Hou |\n+| Rename TSStatusType to TSStatus   | Jialin Qiao   |\n+| Remove sessionId in TSExecuteBatchStatementResp   | Jialin Qiao   |\n+| Use TsDataType and binary rather than string in TSInsertInBatchReq and TSInsertReq  | Kaifeng Xue  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3Mjc5Mg==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429772792", "createdAt": "2020-05-25T07:25:13Z", "author": {"login": "SilverNarcissus"}, "path": "service-rpc/rpc-changelist.md", "diffHunk": "@@ -121,3 +121,34 @@ Last Updated on 2019-10-27 by Lei Rui.\n | Add required i64 statementId in TSExecuteStatementReq        | Yuan Tian |\n | Add required binary time, required list<binary> valueList, required list<binary> bitmapList and remove required binary values, required i32 rowCount in TSQueryDataSet| Yuan Tian |\n | Add optional i32 fetchSize in TSExecuteStatementReq,<br />Add optional TSQueryDataSet in TSExecuteStatementResp| liutaohua |\n+| Add optional map<string, string> props, optional map<string, string> tags, optional map<string, string> attributes and optional string aliasPath in TSCreateTimeseriesReq | Yuan Tian | \n+\n+\n+# 0.10.0 (version-1) -> version-2\n+\n+Last Updated on November 12th, 2019 by Tian Jiang.\n+\n+\n+## 1. Delete Old\n+\n+| Latest Changes                     | Related Committers |\n+| ---------------------------------- | ------------------ |\n+| Remove TS_SessionHandle,TSHandleIdentifier            | Tian Jiang         |\n+| Remove TSStatus,TSExecuteInsertRowInBatchResp            | Jialin Qiao|\n+\n+## 2. Add New\n+\n+| Latest Changes                                               | Related Committers                 |\n+| ------------------------------------------------------------ | ---------------------------------- |\n+| Add parameter sessionId in getTimeZone, getProperties, setStorageGroup, createTimeseries... | Tian Jiang|\n+| Add struct TSQueryNonAlignDataSet                            | Haonan Hou|\n+\n+## 3. Update\n+\n+| Latest Changes                                               | Related Committers     |\n+| ------------------------------------------------------------ | ---------------------- |\n+| Replace TS_SessionHandles with SessionIds, TSOperationHandle with queryIds  | Tian Jiang  |\n+| Add optional TSQueryNonAlignDataSet in TSExecuteStatementResp, TSFetchResultsResp and required bool isAlign in TSFetchResultsReq | Haonan Hou |\n+| Rename TSStatusType to TSStatus   | Jialin Qiao   |\n+| Remove sessionId in TSExecuteBatchStatementResp   | Jialin Qiao   |\n+| Use TsDataType and binary rather than string in TSInsertInBatchReq and TSInsertReq  | Kaifeng Xue  |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNDM0OQ=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ1OTc5OnYy", "diffSide": "RIGHT", "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoyOTo0MFrOGZzUgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNjo0OVrOGZ3S0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for(String type : dataArray[3].split(\":\")){\n          \n          \n            \n                for (String type : dataArray[3].split(\":\")) {", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429708416", "createdAt": "2020-05-25T02:29:40Z", "author": {"login": "HTHou"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();\n+    for(String type : dataArray[3].split(\":\")){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MzUyMQ==", "bodyText": "fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429773521", "createdAt": "2020-05-25T07:26:49Z", "author": {"login": "SilverNarcissus"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();\n+    for(String type : dataArray[3].split(\":\")){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODQxNg=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ2MDQ1OnYy", "diffSide": "RIGHT", "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozMDoxOFrOGZzU8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNjo1NlrOGZ3TAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODUyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for(int i = 0; i < valuesStr.length; i++){\n          \n          \n            \n                for (int i = 0; i < valuesStr.length; i++) {", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429708528", "createdAt": "2020-05-25T02:30:18Z", "author": {"login": "HTHou"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();\n+    for(String type : dataArray[3].split(\":\")){\n+      types.add(TSDataType.valueOf(type));\n+    }\n+\n+    List<Object> values = new ArrayList<>();\n+    String[] valuesStr = dataArray[4].split(\":\");\n+    for(int i = 0; i < valuesStr.length; i++){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MzU3MQ==", "bodyText": "fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429773571", "createdAt": "2020-05-25T07:26:56Z", "author": {"login": "SilverNarcissus"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();\n+    for(String type : dataArray[3].split(\":\")){\n+      types.add(TSDataType.valueOf(type));\n+    }\n+\n+    List<Object> values = new ArrayList<>();\n+    String[] valuesStr = dataArray[4].split(\":\");\n+    for(int i = 0; i < valuesStr.length; i++){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODUyOA=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ2MDYzOnYy", "diffSide": "RIGHT", "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozMDozMVrOGZzVDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNzowMlrOGZ3TOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  switch (types.get(i)){\n          \n          \n            \n                  switch (types.get(i)) {", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429708559", "createdAt": "2020-05-25T02:30:31Z", "author": {"login": "HTHou"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();\n+    for(String type : dataArray[3].split(\":\")){\n+      types.add(TSDataType.valueOf(type));\n+    }\n+\n+    List<Object> values = new ArrayList<>();\n+    String[] valuesStr = dataArray[4].split(\":\");\n+    for(int i = 0; i < valuesStr.length; i++){\n+      switch (types.get(i)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MzYyNQ==", "bodyText": "fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429773625", "createdAt": "2020-05-25T07:27:02Z", "author": {"login": "SilverNarcissus"}, "path": "example/rocketmq/src/main/java/org/apache/iotdb/rocketmq/RocketMQConsumer.java", "diffHunk": "@@ -89,8 +90,37 @@ private void insert(String data) throws IoTDBConnectionException, StatementExecu\n     String device = dataArray[0];\n     long time = Long.parseLong(dataArray[1]);\n     List<String> measurements = Arrays.asList(dataArray[2].split(\":\"));\n-    List<String> values = Arrays.asList(dataArray[3].split(\":\"));\n-    session.insertRecord(device, time, measurements, values);\n+    List<TSDataType> types = new ArrayList<>();\n+    for(String type : dataArray[3].split(\":\")){\n+      types.add(TSDataType.valueOf(type));\n+    }\n+\n+    List<Object> values = new ArrayList<>();\n+    String[] valuesStr = dataArray[4].split(\":\");\n+    for(int i = 0; i < valuesStr.length; i++){\n+      switch (types.get(i)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODU1OQ=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ2MTUzOnYy", "diffSide": "RIGHT", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozMToxNVrOGZzVig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNzozN1rOGZ3UWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(String type : tuple.get(fieldTypes).split(separator)){\n          \n          \n            \n                    for (String type : tuple.get(fieldTypes).split(separator)) {", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429708682", "createdAt": "2020-05-25T02:31:15Z", "author": {"login": "HTHou"}, "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -49,12 +52,37 @@ public Event serialize(Map<String,String> tuple) {\n             measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n         }\n \n-        List<String> values = null;\n-        if (tuple.get(fieldValues) != null) {\n-            values = Arrays.asList(tuple.get(fieldValues).split(separator));\n+        List<TSDataType> types = new ArrayList<>();\n+        for(String type : tuple.get(fieldTypes).split(separator)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MzcwNQ==", "bodyText": "fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429773705", "createdAt": "2020-05-25T07:27:12Z", "author": {"login": "SilverNarcissus"}, "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -49,12 +52,37 @@ public Event serialize(Map<String,String> tuple) {\n             measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n         }\n \n-        List<String> values = null;\n-        if (tuple.get(fieldValues) != null) {\n-            values = Arrays.asList(tuple.get(fieldValues).split(separator));\n+        List<TSDataType> types = new ArrayList<>();\n+        for(String type : tuple.get(fieldTypes).split(separator)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODY4Mg=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MzkxNA==", "bodyText": "fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429773914", "createdAt": "2020-05-25T07:27:37Z", "author": {"login": "SilverNarcissus"}, "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -49,12 +52,37 @@ public Event serialize(Map<String,String> tuple) {\n             measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n         }\n \n-        List<String> values = null;\n-        if (tuple.get(fieldValues) != null) {\n-            values = Arrays.asList(tuple.get(fieldValues).split(separator));\n+        List<TSDataType> types = new ArrayList<>();\n+        for(String type : tuple.get(fieldTypes).split(separator)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODY4Mg=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ2MTkzOnYy", "diffSide": "RIGHT", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozMTo0NVrOGZzVzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNzo0M1rOGZ3UlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(int i = 0; i < valuesStr.length; i++){\n          \n          \n            \n                    for (int i = 0; i < valuesStr.length; i++) {", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429708751", "createdAt": "2020-05-25T02:31:45Z", "author": {"login": "HTHou"}, "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -49,12 +52,37 @@ public Event serialize(Map<String,String> tuple) {\n             measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n         }\n \n-        List<String> values = null;\n-        if (tuple.get(fieldValues) != null) {\n-            values = Arrays.asList(tuple.get(fieldValues).split(separator));\n+        List<TSDataType> types = new ArrayList<>();\n+        for(String type : tuple.get(fieldTypes).split(separator)){\n+            types.add(TSDataType.valueOf(type));\n         }\n \n-        return new Event(device, timestamp, measurements, values);\n+        List<Object> values = new ArrayList<>();\n+        String[] valuesStr = tuple.get(fieldValues).split(separator);\n+        for(int i = 0; i < valuesStr.length; i++){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3Mzk3Mw==", "bodyText": "fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429773973", "createdAt": "2020-05-25T07:27:43Z", "author": {"login": "SilverNarcissus"}, "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -49,12 +52,37 @@ public Event serialize(Map<String,String> tuple) {\n             measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n         }\n \n-        List<String> values = null;\n-        if (tuple.get(fieldValues) != null) {\n-            values = Arrays.asList(tuple.get(fieldValues).split(separator));\n+        List<TSDataType> types = new ArrayList<>();\n+        for(String type : tuple.get(fieldTypes).split(separator)){\n+            types.add(TSDataType.valueOf(type));\n         }\n \n-        return new Event(device, timestamp, measurements, values);\n+        List<Object> values = new ArrayList<>();\n+        String[] valuesStr = tuple.get(fieldValues).split(separator);\n+        for(int i = 0; i < valuesStr.length; i++){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODc1MQ=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ2MjA0OnYy", "diffSide": "RIGHT", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozMTo1NVrOGZzV5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNzo0OFrOGZ3Uuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        switch (types.get(i)){\n          \n          \n            \n                        switch (types.get(i)) {", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429708775", "createdAt": "2020-05-25T02:31:55Z", "author": {"login": "HTHou"}, "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -49,12 +52,37 @@ public Event serialize(Map<String,String> tuple) {\n             measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n         }\n \n-        List<String> values = null;\n-        if (tuple.get(fieldValues) != null) {\n-            values = Arrays.asList(tuple.get(fieldValues).split(separator));\n+        List<TSDataType> types = new ArrayList<>();\n+        for(String type : tuple.get(fieldTypes).split(separator)){\n+            types.add(TSDataType.valueOf(type));\n         }\n \n-        return new Event(device, timestamp, measurements, values);\n+        List<Object> values = new ArrayList<>();\n+        String[] valuesStr = tuple.get(fieldValues).split(separator);\n+        for(int i = 0; i < valuesStr.length; i++){\n+            switch (types.get(i)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3NDAxMQ==", "bodyText": "fixed~", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r429774011", "createdAt": "2020-05-25T07:27:48Z", "author": {"login": "SilverNarcissus"}, "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -49,12 +52,37 @@ public Event serialize(Map<String,String> tuple) {\n             measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n         }\n \n-        List<String> values = null;\n-        if (tuple.get(fieldValues) != null) {\n-            values = Arrays.asList(tuple.get(fieldValues).split(separator));\n+        List<TSDataType> types = new ArrayList<>();\n+        for(String type : tuple.get(fieldTypes).split(separator)){\n+            types.add(TSDataType.valueOf(type));\n         }\n \n-        return new Event(device, timestamp, measurements, values);\n+        List<Object> values = new ArrayList<>();\n+        String[] valuesStr = tuple.get(fieldValues).split(separator);\n+        for(int i = 0; i < valuesStr.length; i++){\n+            switch (types.get(i)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwODc3NQ=="}, "originalCommit": {"oid": "0574d7a589870808ac690b35e6205d5a72b1c668"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODAxMDU3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMzozNzoyOFrOGbkjPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMzozNzoyOFrOGbkjPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU2MzU4MA==", "bodyText": "logger more information, server type, client type", "url": "https://github.com/apache/iotdb/pull/1229#discussion_r431563580", "createdAt": "2020-05-28T03:37:28Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -900,7 +903,53 @@ public void insert(InsertPlan insertPlan) throws QueryProcessException {\n     }\n   }\n \n-  /** create timeseries with ignore PathAlreadyExistException */\n+  private void checkType(InsertPlan plan, int loc, TSDataType type) {\n+    plan.getTypes()[loc] = type;\n+    try {\n+      switch (type) {\n+        case INT32:\n+          if (!(plan.getValues()[loc] instanceof Integer)) {\n+            plan.getValues()[loc] =\n+                Integer.parseInt(((Binary) plan.getValues()[loc]).getStringValue());\n+          }\n+          break;\n+        case INT64:\n+          if (!(plan.getValues()[loc] instanceof Long)) {\n+            plan.getValues()[loc] =\n+                Long.parseLong(((Binary) plan.getValues()[loc]).getStringValue());\n+          }\n+          break;\n+        case DOUBLE:\n+          if (!(plan.getValues()[loc] instanceof Double)) {\n+            plan.getValues()[loc] =\n+                Double.parseDouble(((Binary) plan.getValues()[loc]).getStringValue());\n+          }\n+          break;\n+        case FLOAT:\n+          if (!(plan.getValues()[loc] instanceof Float)) {\n+            plan.getValues()[loc] =\n+                Float.parseFloat(((Binary) plan.getValues()[loc]).getStringValue());\n+          }\n+          break;\n+        case BOOLEAN:\n+          if (!(plan.getValues()[loc] instanceof Boolean)) {\n+            plan.getValues()[loc] =\n+                Boolean.parseBoolean(((Binary) plan.getValues()[loc]).getStringValue());\n+          }\n+          break;\n+        case TEXT:\n+          // need to do nothing\n+          break;\n+      }\n+    }\n+    catch (ClassCastException e){\n+      logger.error(\"inconsistent type between client and server\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5441d455c810b1355d362d71da87c02557c9c0a7"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4997, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}