{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNDQ5Mzc2", "number": 1651, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjowOTo1MlrOEci3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjowOTo1MlrOEci3fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzY2ODQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/ServerTimeGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjowOTo1MlrOHHJDqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo0MTo1OFrOHHKMnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1MDQ3Mg==", "bodyText": "Missing { } here?", "url": "https://github.com/apache/iotdb/pull/1651#discussion_r477250472", "createdAt": "2020-08-26T12:09:52Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/ServerTimeGenerator.java", "diffHunk": "@@ -65,19 +67,42 @@ public ServerTimeGenerator(IExpression expression, QueryContext context, RawData\n   @Override\n   protected IBatchReader generateNewBatchReader(SingleSeriesExpression expression)\n       throws IOException {\n-    Filter filter = expression.getFilter();\n+    Filter valueFilter = expression.getFilter();\n     Path path = expression.getSeriesPath();\n     TSDataType dataType;\n     QueryDataSource queryDataSource;\n     try {\n       dataType = IoTDB.metaManager.getSeriesType(path.getFullPath());\n-      queryDataSource = QueryResourceManager.getInstance().getQueryDataSource(path, context, filter);\n-      // update filter by TTL\n-      filter = queryDataSource.updateFilterUsingTTL(filter);\n+      queryDataSource = QueryResourceManager.getInstance().getQueryDataSource(path, context, valueFilter);\n+      // update valueFilter by TTL\n+      valueFilter = queryDataSource.updateFilterUsingTTL(valueFilter);\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n \n-    return new SeriesRawDataBatchReader(path, queryPlan.getAllMeasurementsInDevice(path.getDevice()), dataType, context, queryDataSource, null, filter, null);\n+    // get the TimeFilter part in SingleSeriesExpression\n+    Filter timeFilter = getTimeFilter(valueFilter);\n+\n+    return new SeriesRawDataBatchReader(path, queryPlan.getAllMeasurementsInDevice(path.getDevice()), dataType, context, queryDataSource, timeFilter, valueFilter, null);\n+  }\n+\n+  /**\n+   * extract time filter from a value filter\n+   */\n+  private Filter getTimeFilter(Filter filter) {\n+    if (filter instanceof UnaryFilter && ((UnaryFilter) filter).getFilterType() == FilterType.TIME_FILTER) {\n+      return filter;\n+    }\n+    if (filter instanceof AndFilter) {\n+      Filter leftTimeFilter = getTimeFilter(((AndFilter) filter).getLeft());\n+      Filter rightTimeFilter = getTimeFilter(((AndFilter) filter).getRight());\n+      if (leftTimeFilter != null && rightTimeFilter != null) {\n+        return filter;\n+      } else if (leftTimeFilter != null) {\n+        return leftTimeFilter;\n+      } else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "598af392633a5b17eee7c429f08919912b3ed06a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2OTE0OA==", "bodyText": "fix", "url": "https://github.com/apache/iotdb/pull/1651#discussion_r477269148", "createdAt": "2020-08-26T12:41:58Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/ServerTimeGenerator.java", "diffHunk": "@@ -65,19 +67,42 @@ public ServerTimeGenerator(IExpression expression, QueryContext context, RawData\n   @Override\n   protected IBatchReader generateNewBatchReader(SingleSeriesExpression expression)\n       throws IOException {\n-    Filter filter = expression.getFilter();\n+    Filter valueFilter = expression.getFilter();\n     Path path = expression.getSeriesPath();\n     TSDataType dataType;\n     QueryDataSource queryDataSource;\n     try {\n       dataType = IoTDB.metaManager.getSeriesType(path.getFullPath());\n-      queryDataSource = QueryResourceManager.getInstance().getQueryDataSource(path, context, filter);\n-      // update filter by TTL\n-      filter = queryDataSource.updateFilterUsingTTL(filter);\n+      queryDataSource = QueryResourceManager.getInstance().getQueryDataSource(path, context, valueFilter);\n+      // update valueFilter by TTL\n+      valueFilter = queryDataSource.updateFilterUsingTTL(valueFilter);\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n \n-    return new SeriesRawDataBatchReader(path, queryPlan.getAllMeasurementsInDevice(path.getDevice()), dataType, context, queryDataSource, null, filter, null);\n+    // get the TimeFilter part in SingleSeriesExpression\n+    Filter timeFilter = getTimeFilter(valueFilter);\n+\n+    return new SeriesRawDataBatchReader(path, queryPlan.getAllMeasurementsInDevice(path.getDevice()), dataType, context, queryDataSource, timeFilter, valueFilter, null);\n+  }\n+\n+  /**\n+   * extract time filter from a value filter\n+   */\n+  private Filter getTimeFilter(Filter filter) {\n+    if (filter instanceof UnaryFilter && ((UnaryFilter) filter).getFilterType() == FilterType.TIME_FILTER) {\n+      return filter;\n+    }\n+    if (filter instanceof AndFilter) {\n+      Filter leftTimeFilter = getTimeFilter(((AndFilter) filter).getLeft());\n+      Filter rightTimeFilter = getTimeFilter(((AndFilter) filter).getRight());\n+      if (leftTimeFilter != null && rightTimeFilter != null) {\n+        return filter;\n+      } else if (leftTimeFilter != null) {\n+        return leftTimeFilter;\n+      } else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1MDQ3Mg=="}, "originalCommit": {"oid": "598af392633a5b17eee7c429f08919912b3ed06a"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4670, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}