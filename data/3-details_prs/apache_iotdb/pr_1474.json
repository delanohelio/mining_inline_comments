{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NjY0Mzgx", "number": 1474, "title": "prepare for wal replayed successfully after restart", "bodyText": "", "createdAt": "2020-07-09T07:10:25Z", "url": "https://github.com/apache/iotdb/pull/1474", "merged": true, "mergeCommit": {"oid": "f6dc9a861ac6d306687a67bcae3aba43e6707c11"}, "closed": true, "closedAt": "2020-07-15T02:36:51Z", "author": {"login": "mychaow"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0Ye7jgFqTQ0Njk0NjA4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1BUbOgFqTQ0ODU4OTIyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTQ2MDg0", "url": "https://github.com/apache/iotdb/pull/1474#pullrequestreview-446946084", "createdAt": "2020-07-13T02:27:09Z", "commit": {"oid": "8bda5930a9162fb3b0efaefa81514b96ff862e05"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMjoyNzowOVrOGwZiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzowMToyOFrOGwZ99w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwMzIwMA==", "bodyText": "When is this pool shut down? And what is the point that you do not wait until the recovery finishes?", "url": "https://github.com/apache/iotdb/pull/1474#discussion_r453403200", "createdAt": "2020-07-13T02:27:09Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -135,6 +140,15 @@ private StorageEngine() {\n     // recover upgrade process\n     UpgradeUtils.recoverUpgrade();\n \n+    recover();\n+  }\n+\n+  public void recover() {\n+    ExecutorService executors = Executors.newSingleThreadExecutor();\n+    executors.submit(this::recoverAllSgs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bda5930a9162fb3b0efaefa81514b96ff862e05"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNDU4Ng==", "bodyText": "I think this is not very friendly. Some users may want to send requests once the server is up, without noticing whether the recovery has finished, and they will feel upset when they receive failures.\nIt may help to add some wait and timeout, so there is less chance that the user will miss first operations.", "url": "https://github.com/apache/iotdb/pull/1474#discussion_r453404586", "createdAt": "2020-07-13T02:33:51Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -252,18 +267,24 @@ public StorageGroupProcessor getProcessor(String path) throws StorageEngineExcep\n       StorageGroupProcessor processor;\n       processor = processorMap.get(storageGroupName);\n       if (processor == null) {\n-        storageGroupName = storageGroupName.intern();\n-        synchronized (storageGroupName) {\n-          processor = processorMap.get(storageGroupName);\n-          if (processor == null) {\n-            logger.info(\"construct a processor instance, the storage group is {}, Thread is {}\",\n+        // if finish recover\n+        if (isAllSgReady.get()) {\n+          storageGroupName = storageGroupName.intern();\n+          synchronized (storageGroupName) {\n+            processor = processorMap.get(storageGroupName);\n+            if (processor == null) {\n+              logger.info(\"construct a processor instance, the storage group is {}, Thread is {}\",\n                 storageGroupName, Thread.currentThread().getId());\n-            processor = new StorageGroupProcessor(systemDir, storageGroupName, fileFlushPolicy);\n-            StorageGroupMNode storageGroup = IoTDB.metaManager\n+              processor = new StorageGroupProcessor(systemDir, storageGroupName, fileFlushPolicy);\n+              StorageGroupMNode storageGroup = IoTDB.metaManager\n                 .getStorageGroupNode(storageGroupName);\n-            processor.setDataTTL(storageGroup.getDataTTL());\n-            processorMap.put(storageGroupName, processor);\n+              processor.setDataTTL(storageGroup.getDataTTL());\n+              processorMap.put(storageGroupName, processor);\n+            }\n           }\n+        } else {\n+          // not finished recover, refuse the request\n+          throw new StorageEngineException(\"the sg \" + storageGroupName + \" may not ready now, please wait and retry later\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bda5930a9162fb3b0efaefa81514b96ff862e05"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNjEwNw==", "bodyText": "Using the device node will help reduce the search path (otherwise it will search from the root node every time), so I would suggest you add the device node as a nullable parameter of MManager.updateLastCache and use it as much as possible.", "url": "https://github.com/apache/iotdb/pull/1474#discussion_r453406107", "createdAt": "2020-07-13T02:41:01Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -792,8 +792,9 @@ private void tryToUpdateBatchInsertLastCache(InsertTabletPlan plan, Long latestF\n           continue;\n         }\n         // Update cached last value with high priority\n-        ((MeasurementMNode) manager.getChild(node, measurementList[i]))\n-            .updateCachedLast(plan.composeLastTimeValuePair(i), true, latestFlushedTime);\n+        Path tmpPath = new Path(plan.getDeviceId(), measurementList[i]);\n+        manager.updateLastCache(tmpPath.getFullPath(),\n+          plan.composeLastTimeValuePair(i), true, latestFlushedTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bda5930a9162fb3b0efaefa81514b96ff862e05"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNjQyOQ==", "bodyText": "And it is a little wasteful to join deviceId and measurementId using a Path. You may just use string concatenation.", "url": "https://github.com/apache/iotdb/pull/1474#discussion_r453406429", "createdAt": "2020-07-13T02:42:41Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -792,8 +792,9 @@ private void tryToUpdateBatchInsertLastCache(InsertTabletPlan plan, Long latestF\n           continue;\n         }\n         // Update cached last value with high priority\n-        ((MeasurementMNode) manager.getChild(node, measurementList[i]))\n-            .updateCachedLast(plan.composeLastTimeValuePair(i), true, latestFlushedTime);\n+        Path tmpPath = new Path(plan.getDeviceId(), measurementList[i]);\n+        manager.updateLastCache(tmpPath.getFullPath(),\n+          plan.composeLastTimeValuePair(i), true, latestFlushedTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNjEwNw=="}, "originalCommit": {"oid": "8bda5930a9162fb3b0efaefa81514b96ff862e05"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMDI5NQ==", "bodyText": "How about just waiting where you created that single thread pool and shuting down it?", "url": "https://github.com/apache/iotdb/pull/1474#discussion_r453410295", "createdAt": "2020-07-13T03:01:28Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/service/IoTDB.java", "diffHunk": "@@ -123,7 +120,22 @@ private void setUp() throws StartupException {\n     if (IoTDBDescriptor.getInstance().getConfig().isEnableMQTTService()) {\n       registerManager.register(MQTTService.getInstance());\n     }\n-    logger.info(\"IoTDB is set up.\");\n+\n+    logger.info(\"IoTDB is set up, now may some sgs are not ready, don't worry, the superman Dr. Huang will teach the sg to fix themselves.\");\n+\n+    while (!StorageEngine.getInstance().isAllSgReady()) {\n+      try {\n+        Thread.sleep(1000);\n+      } catch (InterruptedException e) {\n+        e.printStackTrace();\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bda5930a9162fb3b0efaefa81514b96ff862e05"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc9c8fc919f3d6859450d05a578b3c9f0fa8c361", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/dc9c8fc919f3d6859450d05a578b3c9f0fa8c361", "committedDate": "2020-07-13T04:14:22Z", "message": "wait all wals are replayed successfully"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99028b758d8bcf451a59cff14f0d765005308b63", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/99028b758d8bcf451a59cff14f0d765005308b63", "committedDate": "2020-07-13T06:56:53Z", "message": "modify the logic to support cluster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f2f84b886605b0e7880c93e1c5274819fd2d32f", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/0f2f84b886605b0e7880c93e1c5274819fd2d32f", "committedDate": "2020-07-13T08:16:31Z", "message": "use device node when update last cache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bda5930a9162fb3b0efaefa81514b96ff862e05", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/8bda5930a9162fb3b0efaefa81514b96ff862e05", "committedDate": "2020-07-09T07:05:04Z", "message": "modify the logic to support cluster"}, "afterCommit": {"oid": "0f2f84b886605b0e7880c93e1c5274819fd2d32f", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/0f2f84b886605b0e7880c93e1c5274819fd2d32f", "committedDate": "2020-07-13T08:16:31Z", "message": "use device node when update last cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODEyMDY3", "url": "https://github.com/apache/iotdb/pull/1474#pullrequestreview-447812067", "createdAt": "2020-07-14T06:07:42Z", "commit": {"oid": "0f2f84b886605b0e7880c93e1c5274819fd2d32f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjowNzo0MlrOGxFeoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMToyMVrOGxFjxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMzE2OA==", "bodyText": "please log the exception and format the code", "url": "https://github.com/apache/iotdb/pull/1474#discussion_r454123168", "createdAt": "2020-07-14T06:07:42Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1837,6 +1758,40 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n     boolean satisfy(String storageGroup);\n   }\n \n+  /**\n+   * if the path is in local mtree, nothing needed to do (because mtree is in the memory); Otherwise\n+   * cache the path to mRemoteSchemaCache\n+   */\n+  public void cacheMeta(String path, MeasurementMeta meta) {\n+    // do nothing\n+  }\n+\n+  public void updateLastCache(String seriesPath, TimeValuePair timeValuePair,\n+                              boolean highPriorityUpdate, Long latestFlushedTime,\n+                              MeasurementMNode node) {\n+    if (node != null) {\n+      node.updateCachedLast(timeValuePair, highPriorityUpdate, latestFlushedTime);\n+    } else {\n+      try {\n+        MeasurementMNode node1 = (MeasurementMNode) mtree.getNodeByPath(seriesPath);\n+        node1.updateCachedLast(timeValuePair, highPriorityUpdate, latestFlushedTime);\n+      } catch (MetadataException e) {\n+        logger.warn(\"the {} is not exist\", seriesPath);\n+      }\n+    }\n+  }\n+\n+  public TimeValuePair getLastCache(String seriesPath) {\n+   try {\n+     MeasurementMNode node = null;\n+     node = (MeasurementMNode) mtree.getNodeByPath(seriesPath);\n+     return node.getCachedLast();\n+  } catch (MetadataException e) {\n+     // do nothing\n+  }\n+  return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2f84b886605b0e7880c93e1c5274819fd2d32f"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDQ4Ng==", "bodyText": "The String concat is an overhead in single node IoTDB, could we avoid this?", "url": "https://github.com/apache/iotdb/pull/1474#discussion_r454124486", "createdAt": "2020-07-14T06:11:21Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -785,8 +785,12 @@ private void tryToUpdateBatchInsertLastCache(InsertTabletPlan plan, Long latestF\n         continue;\n       }\n       // Update cached last value with high priority\n-      ((MeasurementMNode) node.getChild(measurementList[i]))\n-          .updateCachedLast(plan.composeLastTimeValuePair(i), true, latestFlushedTime);\n+      MeasurementMNode tmpMeasurementNode = null;\n+      if (node != null) {\n+        tmpMeasurementNode = (MeasurementMNode) node.getChild(measurementList[i]);\n+      }\n+      IoTDB.metaManager.updateLastCache(node.getFullPath() + IoTDBConstant.PATH_SEPARATOR + measurementList[i],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2f84b886605b0e7880c93e1c5274819fd2d32f"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05bfe1c7222ab69402646d647febdfb3b2a29770", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/05bfe1c7222ab69402646d647febdfb3b2a29770", "committedDate": "2020-07-14T08:18:49Z", "message": "avoid string concat for single node version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDUzNDI2", "url": "https://github.com/apache/iotdb/pull/1474#pullrequestreview-448053426", "createdAt": "2020-07-14T12:21:11Z", "commit": {"oid": "05bfe1c7222ab69402646d647febdfb3b2a29770"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTg5MjI2", "url": "https://github.com/apache/iotdb/pull/1474#pullrequestreview-448589226", "createdAt": "2020-07-15T02:36:17Z", "commit": {"oid": "05bfe1c7222ab69402646d647febdfb3b2a29770"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3465, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}