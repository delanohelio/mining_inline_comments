{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NjQ0MTg5", "number": 2317, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNTo0NzowN1rOFJUe-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNTo0NzowN1rOFJUe-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzE3MTEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNTo0NzowN1rOILohEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNTo0NzowN1rOILohEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA2OTA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // wait until the size of flushingMemTables is less than 2\n          \n          \n            \n                  // wait until the total memtable number is less than the capacity of the system", "url": "https://github.com/apache/iotdb/pull/2317#discussion_r549069072", "createdAt": "2020-12-27T05:47:07Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(TsFileResource tsFileResource) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the size of flushingMemTables is less than 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eeb002ce00e2bad7975633f87ca373d7259fa72"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 465, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}