{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDQ5NjE1", "number": 841, "title": "[IOTDB-476] Improve the ExpressionOptimizer", "bodyText": "Some logic in ExpressionOptimizer is modified to make the optimizer generate more efficient expression. For example, before the modification, s1 > 10 or time < 1 will be tranformed to\nORExpression ( SingleSeriesExpression(s1 , value >10) ORExpression( SingleSeriesExpression(s1 , time <10), SingleSeriesExpression(s2 , time <10) ) )\nWith the new logic, the query will be transformed to\nORExpression ( SingleSeriesExpression(s1 , value >10 or time <10) SingleSeriesExpression(s2 , time <10) )\nWith less SingleSeriesExpressions, the query can be executed more efficiently. Experiments shows that, if we have 3 devices, each containing 3 sensors, and the query is t<4838 or d2.s2>0.5, the latency decreases around 10%.", "createdAt": "2020-02-26T07:22:52Z", "url": "https://github.com/apache/iotdb/pull/841", "merged": true, "mergeCommit": {"oid": "9bc8ec562e9e9241d7e4e847e850295c0364c0a9"}, "closed": true, "closedAt": "2020-02-27T03:30:09Z", "author": {"login": "Ring-k"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIBS1MgH2gAyMzgwMDQ5NjE1OjEwMTQ3Y2YxODNmNDZmMTA3Y2QxN2UwYmY1YjYzZDAzZDM0ZmZmNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcISwzAAFqTM2NTM5NDI2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "10147cf183f46f107cd17e0bf5b63d03d34fff58", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/10147cf183f46f107cd17e0bf5b63d03d34fff58", "committedDate": "2020-02-26T07:07:57Z", "message": "optimize expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "620d530784642d6043e7b3ab122929958fb7daed", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/620d530784642d6043e7b3ab122929958fb7daed", "committedDate": "2020-02-26T07:38:35Z", "message": "google code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/05c77c84be05df421b2875b0f3d297aa9565da80", "committedDate": "2020-02-26T07:40:53Z", "message": "remove temp test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjgwNTgw", "url": "https://github.com/apache/iotdb/pull/841#pullrequestreview-364680580", "createdAt": "2020-02-26T07:54:14Z", "commit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzo1NDoxNVrOFuhHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzo1NjozOVrOFuhK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyMTQyMA==", "bodyText": "Two of if are same, please check the logic", "url": "https://github.com/apache/iotdb/pull/841#discussion_r384321420", "createdAt": "2020-02-26T07:54:15Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "diffHunk": "@@ -108,13 +108,66 @@ private IExpression handleOneGlobalTimeFilter(GlobalTimeExpression globalTimeExp\n       addTimeFilterToQueryFilter((globalTimeExpression).getFilter(), regularRightIExpression);\n       return regularRightIExpression;\n     } else if (relation == ExpressionType.OR) {\n-      return BinaryExpression\n-          .or(pushGlobalTimeFilterToAllSeries(globalTimeExpression, selectedSeries),\n-              regularRightIExpression);\n+      IExpression afterTransform = pushGlobalTimeFilterToAllSeries(globalTimeExpression,\n+          selectedSeries);\n+      return mergeSecondTreeToFirstTree(afterTransform, regularRightIExpression);\n     }\n     throw new QueryFilterOptimizationException(\"unknown relation in IExpression:\" + relation);\n   }\n \n+  /**\n+   * This method merge the second input, which is of tree structure, to the first parameter. It\n+   * visits all leaf nodes, which are SingleSeriesExpressions, or AndExpression in right Expression,\n+   * merge them to the right position in leftExpression.\n+   *\n+   * @param leftExpression  The IExpression transformed from GlobalTimeExpression, which might have\n+   *                        already be updated and merged.\n+   * @param rightExpression The IExpression to be merged into the first IExpression\n+   * @return a merged IExpression, which is initially based on the input leftExpression\n+   */\n+  private IExpression mergeSecondTreeToFirstTree(IExpression leftExpression,\n+      IExpression rightExpression) {\n+    if (rightExpression.getType() == ExpressionType.SERIES) {\n+      SingleSeriesExpression leaf = (SingleSeriesExpression) rightExpression;\n+      updateFilterWithOr(leftExpression, leaf.getFilter(), leaf.getSeriesPath());\n+      return leftExpression;\n+    } else if (rightExpression.getType() == ExpressionType.SERIES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyMjMwMA==", "bodyText": "The return value is boolean but not an expression", "url": "https://github.com/apache/iotdb/pull/841#discussion_r384322300", "createdAt": "2020-02-26T07:56:39Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "diffHunk": "@@ -108,13 +108,66 @@ private IExpression handleOneGlobalTimeFilter(GlobalTimeExpression globalTimeExp\n       addTimeFilterToQueryFilter((globalTimeExpression).getFilter(), regularRightIExpression);\n       return regularRightIExpression;\n     } else if (relation == ExpressionType.OR) {\n-      return BinaryExpression\n-          .or(pushGlobalTimeFilterToAllSeries(globalTimeExpression, selectedSeries),\n-              regularRightIExpression);\n+      IExpression afterTransform = pushGlobalTimeFilterToAllSeries(globalTimeExpression,\n+          selectedSeries);\n+      return mergeSecondTreeToFirstTree(afterTransform, regularRightIExpression);\n     }\n     throw new QueryFilterOptimizationException(\"unknown relation in IExpression:\" + relation);\n   }\n \n+  /**\n+   * This method merge the second input, which is of tree structure, to the first parameter. It\n+   * visits all leaf nodes, which are SingleSeriesExpressions, or AndExpression in right Expression,\n+   * merge them to the right position in leftExpression.\n+   *\n+   * @param leftExpression  The IExpression transformed from GlobalTimeExpression, which might have\n+   *                        already be updated and merged.\n+   * @param rightExpression The IExpression to be merged into the first IExpression\n+   * @return a merged IExpression, which is initially based on the input leftExpression\n+   */\n+  private IExpression mergeSecondTreeToFirstTree(IExpression leftExpression,\n+      IExpression rightExpression) {\n+    if (rightExpression.getType() == ExpressionType.SERIES) {\n+      SingleSeriesExpression leaf = (SingleSeriesExpression) rightExpression;\n+      updateFilterWithOr(leftExpression, leaf.getFilter(), leaf.getSeriesPath());\n+      return leftExpression;\n+    } else if (rightExpression.getType() == ExpressionType.SERIES) {\n+      IExpression leftChild = ((BinaryExpression) rightExpression).getLeft();\n+      IExpression rightChild = ((BinaryExpression) rightExpression).getRight();\n+      leftExpression = mergeSecondTreeToFirstTree(leftExpression, leftChild);\n+      leftExpression = mergeSecondTreeToFirstTree(leftExpression, rightChild);\n+      return leftExpression;\n+    } else {\n+      return BinaryExpression.or(leftExpression, rightExpression);\n+    }\n+  }\n+\n+  /**\n+   * This method search  the node in the input expression, whose path is identical to the input\n+   * path, then merges its filter and the input filter with relation OR.\n+   *\n+   * @return an expression, some of whose node contains the input filter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "328face4f49d44ab579cb50c90a4b46033a467ea", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/328face4f49d44ab579cb50c90a4b46033a467ea", "committedDate": "2020-02-26T08:39:14Z", "message": "change if else statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2580566a41f16bfe9fa57cffadf65facb5f11bc", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/e2580566a41f16bfe9fa57cffadf65facb5f11bc", "committedDate": "2020-02-26T08:41:04Z", "message": "update test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTU0NTQ3", "url": "https://github.com/apache/iotdb/pull/841#pullrequestreview-364954547", "createdAt": "2020-02-26T14:43:04Z", "commit": {"oid": "e2580566a41f16bfe9fa57cffadf65facb5f11bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Mzk0MjY4", "url": "https://github.com/apache/iotdb/pull/841#pullrequestreview-365394268", "createdAt": "2020-02-27T03:29:04Z", "commit": {"oid": "e2580566a41f16bfe9fa57cffadf65facb5f11bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3117, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}