{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzM5NzI0", "number": 2034, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjo0ODowNlrOE62hGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyNjo0M1rOE7dZQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTQ2MDcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjo0ODowNlrOH2KiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoyMzozNFrOH3FKAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1Nzc5Mw==", "bodyText": "Please name it \"insertColumnsSpec\". You may need to modify the .g4 file.", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r526557793", "createdAt": "2020-11-19T02:48:06Z", "author": {"login": "Ring-k"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "diffHunk": "@@ -0,0 +1,1739 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.sql;\n+\n+import static org.apache.iotdb.db.qp.constant.SQLConstant.TIME_PATH;\n+\n+import java.io.File;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.EnumMap;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.constant.DatetimeUtils;\n+import org.apache.iotdb.db.qp.constant.SQLConstant;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.crud.BasicFunctionOperator;\n+import org.apache.iotdb.db.qp.logical.crud.DeleteDataOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FilterOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FromOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InsertOperator;\n+import org.apache.iotdb.db.qp.logical.crud.QueryOperator;\n+import org.apache.iotdb.db.qp.logical.crud.SelectOperator;\n+import org.apache.iotdb.db.qp.logical.crud.UpdateOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator.AlterType;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator.AuthorType;\n+import org.apache.iotdb.db.qp.logical.sys.ClearCacheOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CountOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateSnapshotOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DataAuthOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeletePartitionOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.FlushOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator.LoadConfigurationOperatorType;\n+import org.apache.iotdb.db.qp.logical.sys.LoadDataOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadFilesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MergeOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.RemoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowChildPathsOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowDevicesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowMergeStatusOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.TracingOperator;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AliasClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceClauseOrDisableAlignInSpecialLimitContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceStatementOrDisableAlignInSpecialClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AndExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClausesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ClearcacheContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ConstantContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountNodesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateSnapshotContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DateExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeletePartitionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FlushContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FromClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullMergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionCallContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleToUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertColumnSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertValuesSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllRoleOfUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllUserOfRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRolePrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserPrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadConfigurationStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadFilesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameWithoutStarContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PredicateContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrefixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyValueContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RemoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleFromUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RootOrIdContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetColContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowAllTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowChildPathsContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowFlushTaskInfoContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowMergeStatusContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowVersionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowWhereClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SingleStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SoffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SpecialLimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.StringLiteralContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SuffixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TagClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TimeIntervalContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOffContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOnContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TypeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UnsetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UpdateStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.WhereClauseContext;\n+import org.apache.iotdb.db.query.executor.fill.IFill;\n+import org.apache.iotdb.db.query.executor.fill.LinearFill;\n+import org.apache.iotdb.db.query.executor.fill.PreviousFill;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+\n+public class IoTDBSqlVisitor extends SqlBaseBaseVisitor<Operator> {\n+  private static final String DELETE_RANGE_ERROR_MSG =\n+      \"For delete statement, where clause can only contain atomic expressions like : \" +\n+          \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n+  private ZoneId zoneId;\n+  QueryOperator queryOp;\n+\n+  public void setZoneId(ZoneId zoneId) {\n+    this.zoneId = zoneId;\n+  }\n+\n+  @Override\n+  public Operator visitSingleStatement(SingleStatementContext ctx) {\n+    return visit(ctx.statement());\n+  }\n+\n+  @Override\n+  public Operator visitCreateTimeseries(CreateTimeseriesContext ctx) {\n+    CreateTimeSeriesOperator createTimeSeriesOperator = new CreateTimeSeriesOperator(SQLConstant.TOK_METADATA_CREATE);\n+    createTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    if(ctx.alias() != null) {\n+      createTimeSeriesOperator.setAlias(ctx.alias().ID().getText());\n+    }\n+    if(ctx.attributeClauses() != null) {\n+      parseAttributeClauses(ctx.attributeClauses(), createTimeSeriesOperator);\n+    }\n+    return createTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteTimeseries(DeleteTimeseriesContext ctx) {\n+    List<PartialPath> deletePaths = new ArrayList<>();\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      deletePaths.add(parsePrefixPath(prefixPath));\n+    }\n+    DeleteTimeSeriesOperator deleteTimeSeriesOperator = new DeleteTimeSeriesOperator(\n+        SQLConstant.TOK_METADATA_DELETE);\n+    deleteTimeSeriesOperator.setDeletePathList(deletePaths);\n+    return deleteTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitAlterTimeseries(AlterTimeseriesContext ctx) {\n+    AlterTimeSeriesOperator alterTimeSeriesOperator = new AlterTimeSeriesOperator(SQLConstant.TOK_METADATA_ALTER);\n+    alterTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    parseAlterClause(ctx.alterClause(), alterTimeSeriesOperator);\n+    return alterTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitInsertStatement(InsertStatementContext ctx) {\n+    InsertOperator insertOp = new InsertOperator(SQLConstant.TOK_INSERT);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    selectOp.addSelectPath(parsePrefixPath(ctx.prefixPath()));\n+    insertOp.setSelectOperator(selectOp);\n+    parseInsertColumnSpec(ctx.insertColumnSpec(), insertOp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9257493edf9d8382584cbad9e5f6b87256f62172"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxODIwOA==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r527518208", "createdAt": "2020-11-20T08:23:34Z", "author": {"login": "Genius-pig"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "diffHunk": "@@ -0,0 +1,1739 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.sql;\n+\n+import static org.apache.iotdb.db.qp.constant.SQLConstant.TIME_PATH;\n+\n+import java.io.File;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.EnumMap;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.constant.DatetimeUtils;\n+import org.apache.iotdb.db.qp.constant.SQLConstant;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.crud.BasicFunctionOperator;\n+import org.apache.iotdb.db.qp.logical.crud.DeleteDataOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FilterOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FromOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InsertOperator;\n+import org.apache.iotdb.db.qp.logical.crud.QueryOperator;\n+import org.apache.iotdb.db.qp.logical.crud.SelectOperator;\n+import org.apache.iotdb.db.qp.logical.crud.UpdateOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator.AlterType;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator.AuthorType;\n+import org.apache.iotdb.db.qp.logical.sys.ClearCacheOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CountOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateSnapshotOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DataAuthOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeletePartitionOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.FlushOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator.LoadConfigurationOperatorType;\n+import org.apache.iotdb.db.qp.logical.sys.LoadDataOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadFilesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MergeOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.RemoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowChildPathsOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowDevicesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowMergeStatusOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.TracingOperator;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AliasClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceClauseOrDisableAlignInSpecialLimitContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceStatementOrDisableAlignInSpecialClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AndExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClausesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ClearcacheContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ConstantContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountNodesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateSnapshotContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DateExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeletePartitionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FlushContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FromClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullMergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionCallContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleToUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertColumnSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertValuesSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllRoleOfUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllUserOfRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRolePrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserPrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadConfigurationStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadFilesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameWithoutStarContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PredicateContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrefixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyValueContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RemoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleFromUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RootOrIdContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetColContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowAllTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowChildPathsContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowFlushTaskInfoContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowMergeStatusContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowVersionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowWhereClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SingleStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SoffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SpecialLimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.StringLiteralContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SuffixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TagClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TimeIntervalContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOffContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOnContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TypeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UnsetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UpdateStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.WhereClauseContext;\n+import org.apache.iotdb.db.query.executor.fill.IFill;\n+import org.apache.iotdb.db.query.executor.fill.LinearFill;\n+import org.apache.iotdb.db.query.executor.fill.PreviousFill;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+\n+public class IoTDBSqlVisitor extends SqlBaseBaseVisitor<Operator> {\n+  private static final String DELETE_RANGE_ERROR_MSG =\n+      \"For delete statement, where clause can only contain atomic expressions like : \" +\n+          \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n+  private ZoneId zoneId;\n+  QueryOperator queryOp;\n+\n+  public void setZoneId(ZoneId zoneId) {\n+    this.zoneId = zoneId;\n+  }\n+\n+  @Override\n+  public Operator visitSingleStatement(SingleStatementContext ctx) {\n+    return visit(ctx.statement());\n+  }\n+\n+  @Override\n+  public Operator visitCreateTimeseries(CreateTimeseriesContext ctx) {\n+    CreateTimeSeriesOperator createTimeSeriesOperator = new CreateTimeSeriesOperator(SQLConstant.TOK_METADATA_CREATE);\n+    createTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    if(ctx.alias() != null) {\n+      createTimeSeriesOperator.setAlias(ctx.alias().ID().getText());\n+    }\n+    if(ctx.attributeClauses() != null) {\n+      parseAttributeClauses(ctx.attributeClauses(), createTimeSeriesOperator);\n+    }\n+    return createTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteTimeseries(DeleteTimeseriesContext ctx) {\n+    List<PartialPath> deletePaths = new ArrayList<>();\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      deletePaths.add(parsePrefixPath(prefixPath));\n+    }\n+    DeleteTimeSeriesOperator deleteTimeSeriesOperator = new DeleteTimeSeriesOperator(\n+        SQLConstant.TOK_METADATA_DELETE);\n+    deleteTimeSeriesOperator.setDeletePathList(deletePaths);\n+    return deleteTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitAlterTimeseries(AlterTimeseriesContext ctx) {\n+    AlterTimeSeriesOperator alterTimeSeriesOperator = new AlterTimeSeriesOperator(SQLConstant.TOK_METADATA_ALTER);\n+    alterTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    parseAlterClause(ctx.alterClause(), alterTimeSeriesOperator);\n+    return alterTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitInsertStatement(InsertStatementContext ctx) {\n+    InsertOperator insertOp = new InsertOperator(SQLConstant.TOK_INSERT);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    selectOp.addSelectPath(parsePrefixPath(ctx.prefixPath()));\n+    insertOp.setSelectOperator(selectOp);\n+    parseInsertColumnSpec(ctx.insertColumnSpec(), insertOp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1Nzc5Mw=="}, "originalCommit": {"oid": "9257493edf9d8382584cbad9e5f6b87256f62172"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTgzMDc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo1NTo1NFrOH2N0GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo1NTo1NFrOH2N0GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMTQ4MQ==", "bodyText": "In the following four (may be more) methods:\nvisitDeleteStatement(), visitShowTimeseries(), visitSelectStatement(), visitUpdateStatement()\nthere are similar logics adding a whereOp to the operator. You could extract a method addFilter(operator, ctx.whereClause()), which contains branches implementing what to do with the operator if there is a where clause, according to the type of operator. This will make these visit methods more neat. And if there are more operator which need to add a filter, you could just add some logic in the extracted method.", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r526611481", "createdAt": "2020-11-19T05:55:54Z", "author": {"login": "Ring-k"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "diffHunk": "@@ -0,0 +1,1739 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.sql;\n+\n+import static org.apache.iotdb.db.qp.constant.SQLConstant.TIME_PATH;\n+\n+import java.io.File;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.EnumMap;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.constant.DatetimeUtils;\n+import org.apache.iotdb.db.qp.constant.SQLConstant;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.crud.BasicFunctionOperator;\n+import org.apache.iotdb.db.qp.logical.crud.DeleteDataOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FilterOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FromOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InsertOperator;\n+import org.apache.iotdb.db.qp.logical.crud.QueryOperator;\n+import org.apache.iotdb.db.qp.logical.crud.SelectOperator;\n+import org.apache.iotdb.db.qp.logical.crud.UpdateOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator.AlterType;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator.AuthorType;\n+import org.apache.iotdb.db.qp.logical.sys.ClearCacheOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CountOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateSnapshotOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DataAuthOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeletePartitionOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.FlushOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator.LoadConfigurationOperatorType;\n+import org.apache.iotdb.db.qp.logical.sys.LoadDataOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadFilesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MergeOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.RemoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowChildPathsOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowDevicesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowMergeStatusOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.TracingOperator;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AliasClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceClauseOrDisableAlignInSpecialLimitContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceStatementOrDisableAlignInSpecialClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AndExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClausesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ClearcacheContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ConstantContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountNodesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateSnapshotContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DateExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeletePartitionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FlushContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FromClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullMergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionCallContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleToUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertColumnSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertValuesSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllRoleOfUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllUserOfRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRolePrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserPrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadConfigurationStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadFilesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameWithoutStarContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PredicateContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrefixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyValueContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RemoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleFromUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RootOrIdContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetColContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowAllTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowChildPathsContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowFlushTaskInfoContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowMergeStatusContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowVersionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowWhereClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SingleStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SoffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SpecialLimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.StringLiteralContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SuffixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TagClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TimeIntervalContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOffContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOnContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TypeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UnsetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UpdateStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.WhereClauseContext;\n+import org.apache.iotdb.db.query.executor.fill.IFill;\n+import org.apache.iotdb.db.query.executor.fill.LinearFill;\n+import org.apache.iotdb.db.query.executor.fill.PreviousFill;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+\n+public class IoTDBSqlVisitor extends SqlBaseBaseVisitor<Operator> {\n+  private static final String DELETE_RANGE_ERROR_MSG =\n+      \"For delete statement, where clause can only contain atomic expressions like : \" +\n+          \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n+  private ZoneId zoneId;\n+  QueryOperator queryOp;\n+\n+  public void setZoneId(ZoneId zoneId) {\n+    this.zoneId = zoneId;\n+  }\n+\n+  @Override\n+  public Operator visitSingleStatement(SingleStatementContext ctx) {\n+    return visit(ctx.statement());\n+  }\n+\n+  @Override\n+  public Operator visitCreateTimeseries(CreateTimeseriesContext ctx) {\n+    CreateTimeSeriesOperator createTimeSeriesOperator = new CreateTimeSeriesOperator(SQLConstant.TOK_METADATA_CREATE);\n+    createTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    if(ctx.alias() != null) {\n+      createTimeSeriesOperator.setAlias(ctx.alias().ID().getText());\n+    }\n+    if(ctx.attributeClauses() != null) {\n+      parseAttributeClauses(ctx.attributeClauses(), createTimeSeriesOperator);\n+    }\n+    return createTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteTimeseries(DeleteTimeseriesContext ctx) {\n+    List<PartialPath> deletePaths = new ArrayList<>();\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      deletePaths.add(parsePrefixPath(prefixPath));\n+    }\n+    DeleteTimeSeriesOperator deleteTimeSeriesOperator = new DeleteTimeSeriesOperator(\n+        SQLConstant.TOK_METADATA_DELETE);\n+    deleteTimeSeriesOperator.setDeletePathList(deletePaths);\n+    return deleteTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitAlterTimeseries(AlterTimeseriesContext ctx) {\n+    AlterTimeSeriesOperator alterTimeSeriesOperator = new AlterTimeSeriesOperator(SQLConstant.TOK_METADATA_ALTER);\n+    alterTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    parseAlterClause(ctx.alterClause(), alterTimeSeriesOperator);\n+    return alterTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitInsertStatement(InsertStatementContext ctx) {\n+    InsertOperator insertOp = new InsertOperator(SQLConstant.TOK_INSERT);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    selectOp.addSelectPath(parsePrefixPath(ctx.prefixPath()));\n+    insertOp.setSelectOperator(selectOp);\n+    parseInsertColumnSpec(ctx.insertColumnSpec(), insertOp);\n+    parseInsertValuesSpec(ctx.insertValuesSpec(), insertOp);\n+    return insertOp;\n+  }\n+\n+  @Override\n+  public Operator visitUpdateStatement(UpdateStatementContext ctx) {\n+    UpdateOperator updateOp = new UpdateOperator(SQLConstant.TOK_UPDATE);\n+    FromOperator fromOp = new FromOperator(SQLConstant.TOK_FROM);\n+    fromOp.addPrefixTablePath(parsePrefixPath(ctx.prefixPath()));\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_QUERY);\n+    for(SetColContext colContext : ctx.setClause().setCol()) {\n+      parseSetCol(colContext, selectOp, updateOp);\n+    }\n+    FilterOperator whereOp = (FilterOperator) visit(ctx.whereClause());\n+    updateOp.setFilterOperator(whereOp.getChildren().get(0));\n+    updateOp.setSelectOperator(selectOp);\n+    return updateOp;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteStatement(DeleteStatementContext ctx) {\n+    DeleteDataOperator deleteDataOp = new DeleteDataOperator(SQLConstant.TOK_DELETE);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      PartialPath path = parsePrefixPath(prefixPath);\n+      selectOp.addSelectPath(path);\n+    }\n+    deleteDataOp.setSelectOperator(selectOp);\n+    if(ctx.whereClause() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9257493edf9d8382584cbad9e5f6b87256f62172"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjAzNTEwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzoyMDoyNlrOH2Pqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODozOTowNFrOH3FqRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MTgzNQ==", "bodyText": "Why is this necessary?", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r526641835", "createdAt": "2020-11-19T07:20:26Z", "author": {"login": "Ring-k"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "diffHunk": "@@ -0,0 +1,1739 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.sql;\n+\n+import static org.apache.iotdb.db.qp.constant.SQLConstant.TIME_PATH;\n+\n+import java.io.File;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.EnumMap;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.constant.DatetimeUtils;\n+import org.apache.iotdb.db.qp.constant.SQLConstant;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.crud.BasicFunctionOperator;\n+import org.apache.iotdb.db.qp.logical.crud.DeleteDataOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FilterOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FromOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InsertOperator;\n+import org.apache.iotdb.db.qp.logical.crud.QueryOperator;\n+import org.apache.iotdb.db.qp.logical.crud.SelectOperator;\n+import org.apache.iotdb.db.qp.logical.crud.UpdateOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator.AlterType;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator.AuthorType;\n+import org.apache.iotdb.db.qp.logical.sys.ClearCacheOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CountOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateSnapshotOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DataAuthOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeletePartitionOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.FlushOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator.LoadConfigurationOperatorType;\n+import org.apache.iotdb.db.qp.logical.sys.LoadDataOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadFilesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MergeOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.RemoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowChildPathsOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowDevicesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowMergeStatusOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.TracingOperator;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AliasClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceClauseOrDisableAlignInSpecialLimitContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceStatementOrDisableAlignInSpecialClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AndExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClausesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ClearcacheContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ConstantContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountNodesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateSnapshotContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DateExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeletePartitionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FlushContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FromClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullMergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionCallContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleToUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertColumnSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertValuesSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllRoleOfUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllUserOfRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRolePrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserPrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadConfigurationStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadFilesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameWithoutStarContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PredicateContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrefixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyValueContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RemoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleFromUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RootOrIdContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetColContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowAllTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowChildPathsContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowFlushTaskInfoContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowMergeStatusContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowVersionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowWhereClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SingleStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SoffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SpecialLimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.StringLiteralContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SuffixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TagClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TimeIntervalContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOffContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOnContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TypeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UnsetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UpdateStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.WhereClauseContext;\n+import org.apache.iotdb.db.query.executor.fill.IFill;\n+import org.apache.iotdb.db.query.executor.fill.LinearFill;\n+import org.apache.iotdb.db.query.executor.fill.PreviousFill;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+\n+public class IoTDBSqlVisitor extends SqlBaseBaseVisitor<Operator> {\n+  private static final String DELETE_RANGE_ERROR_MSG =\n+      \"For delete statement, where clause can only contain atomic expressions like : \" +\n+          \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n+  private ZoneId zoneId;\n+  QueryOperator queryOp;\n+\n+  public void setZoneId(ZoneId zoneId) {\n+    this.zoneId = zoneId;\n+  }\n+\n+  @Override\n+  public Operator visitSingleStatement(SingleStatementContext ctx) {\n+    return visit(ctx.statement());\n+  }\n+\n+  @Override\n+  public Operator visitCreateTimeseries(CreateTimeseriesContext ctx) {\n+    CreateTimeSeriesOperator createTimeSeriesOperator = new CreateTimeSeriesOperator(SQLConstant.TOK_METADATA_CREATE);\n+    createTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    if(ctx.alias() != null) {\n+      createTimeSeriesOperator.setAlias(ctx.alias().ID().getText());\n+    }\n+    if(ctx.attributeClauses() != null) {\n+      parseAttributeClauses(ctx.attributeClauses(), createTimeSeriesOperator);\n+    }\n+    return createTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteTimeseries(DeleteTimeseriesContext ctx) {\n+    List<PartialPath> deletePaths = new ArrayList<>();\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      deletePaths.add(parsePrefixPath(prefixPath));\n+    }\n+    DeleteTimeSeriesOperator deleteTimeSeriesOperator = new DeleteTimeSeriesOperator(\n+        SQLConstant.TOK_METADATA_DELETE);\n+    deleteTimeSeriesOperator.setDeletePathList(deletePaths);\n+    return deleteTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitAlterTimeseries(AlterTimeseriesContext ctx) {\n+    AlterTimeSeriesOperator alterTimeSeriesOperator = new AlterTimeSeriesOperator(SQLConstant.TOK_METADATA_ALTER);\n+    alterTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    parseAlterClause(ctx.alterClause(), alterTimeSeriesOperator);\n+    return alterTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitInsertStatement(InsertStatementContext ctx) {\n+    InsertOperator insertOp = new InsertOperator(SQLConstant.TOK_INSERT);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    selectOp.addSelectPath(parsePrefixPath(ctx.prefixPath()));\n+    insertOp.setSelectOperator(selectOp);\n+    parseInsertColumnSpec(ctx.insertColumnSpec(), insertOp);\n+    parseInsertValuesSpec(ctx.insertValuesSpec(), insertOp);\n+    return insertOp;\n+  }\n+\n+  @Override\n+  public Operator visitUpdateStatement(UpdateStatementContext ctx) {\n+    UpdateOperator updateOp = new UpdateOperator(SQLConstant.TOK_UPDATE);\n+    FromOperator fromOp = new FromOperator(SQLConstant.TOK_FROM);\n+    fromOp.addPrefixTablePath(parsePrefixPath(ctx.prefixPath()));\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_QUERY);\n+    for(SetColContext colContext : ctx.setClause().setCol()) {\n+      parseSetCol(colContext, selectOp, updateOp);\n+    }\n+    FilterOperator whereOp = (FilterOperator) visit(ctx.whereClause());\n+    updateOp.setFilterOperator(whereOp.getChildren().get(0));\n+    updateOp.setSelectOperator(selectOp);\n+    return updateOp;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteStatement(DeleteStatementContext ctx) {\n+    DeleteDataOperator deleteDataOp = new DeleteDataOperator(SQLConstant.TOK_DELETE);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      PartialPath path = parsePrefixPath(prefixPath);\n+      selectOp.addSelectPath(path);\n+    }\n+    deleteDataOp.setSelectOperator(selectOp);\n+    if(ctx.whereClause() != null) {\n+      FilterOperator whereOp = (FilterOperator) visit(ctx.whereClause());\n+      deleteDataOp.setFilterOperator(whereOp.getChildren().get(0));\n+      Pair<Long, Long> timeInterval = parseDeleteTimeInterval(deleteDataOp);\n+      deleteDataOp.setStartTime(timeInterval.left);\n+      deleteDataOp.setEndTime(timeInterval.right);\n+    }\n+    return deleteDataOp;\n+  }\n+\n+  @Override\n+  public Operator visitSetStorageGroup(SetStorageGroupContext ctx) {\n+    SetStorageGroupOperator setStorageGroupOperator = new SetStorageGroupOperator(\n+        SQLConstant.TOK_METADATA_SET_FILE_LEVEL);\n+    PartialPath path = parsePrefixPath(ctx.prefixPath());\n+    setStorageGroupOperator.setPath(path);\n+    return setStorageGroupOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteStorageGroup(DeleteStorageGroupContext ctx) {\n+    List<PartialPath> deletePaths = new ArrayList<>();\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      deletePaths.add(parsePrefixPath(prefixPath));\n+    }\n+    DeleteStorageGroupOperator deleteStorageGroupOperator = new DeleteStorageGroupOperator(\n+        SQLConstant.TOK_METADATA_DELETE_FILE_LEVEL);\n+    deleteStorageGroupOperator.setDeletePathList(deletePaths);\n+    return deleteStorageGroupOperator;\n+  }\n+\n+  @Override\n+  public Operator visitMerge(MergeContext ctx) {\n+    return new MergeOperator(SQLConstant.TOK_MERGE);\n+  }\n+\n+  @Override\n+  public Operator visitFlush(FlushContext ctx) {\n+    FlushOperator flushOperator = new FlushOperator(SQLConstant.TOK_FLUSH);\n+    if (ctx.booleanClause() != null) {\n+      flushOperator.setSeq(Boolean.parseBoolean(ctx.booleanClause().getText()));\n+    }\n+    if (ctx.prefixPath(0) != null) {\n+      List<PartialPath> storageGroups = new ArrayList<>();\n+      for (PrefixPathContext prefixPathContext : ctx.prefixPath()) {\n+        storageGroups.add(parsePrefixPath(prefixPathContext));\n+      }\n+      flushOperator.setStorageGroupList(storageGroups);\n+    }\n+    return flushOperator;\n+  }\n+\n+  @Override\n+  public Operator visitFullMerge(FullMergeContext ctx) {\n+    return new MergeOperator(SQLConstant.TOK_FULL_MERGE);\n+  }\n+\n+  @Override\n+  public Operator visitClearcache(ClearcacheContext ctx) {\n+    return new ClearCacheOperator(SQLConstant.TOK_CLEAR_CACHE);\n+  }\n+\n+  @Override\n+  public Operator visitCreateUser(CreateUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_CREATE,\n+        AuthorOperator.AuthorType.CREATE_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    authorOperator.setPassWord(removeStringQuote(ctx.password.getText()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitAlterUser(AlterUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_UPDATE_USER,\n+        AuthorOperator.AuthorType.UPDATE_USER);\n+    if (ctx.ID() != null) {\n+      authorOperator.setUserName(ctx.ID().getText());\n+    } else {\n+      authorOperator.setUserName(ctx.ROOT().getText());\n+    }\n+    authorOperator.setNewPassword(removeStringQuote(ctx.password.getText()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDropUser(DropUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_DROP,\n+        AuthorOperator.AuthorType.DROP_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitCreateRole(CreateRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_CREATE,\n+        AuthorOperator.AuthorType.CREATE_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDropRole(DropRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_DROP,\n+        AuthorOperator.AuthorType.DROP_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitGrantUser(GrantUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorOperator.AuthorType.GRANT_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitGrantRole(GrantRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.GRANT_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitRevokeUser(RevokeUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.REVOKE_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitRevokeRole(RevokeRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.REVOKE_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitGrantRoleToUser(GrantRoleToUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorOperator.AuthorType.GRANT_ROLE_TO_USER);\n+    authorOperator.setRoleName(ctx.roleName.getText());\n+    authorOperator.setUserName(ctx.userName.getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitRevokeRoleFromUser(RevokeRoleFromUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.REVOKE_ROLE_FROM_USER);\n+    authorOperator.setRoleName(ctx.roleName.getText());\n+    authorOperator.setUserName(ctx.userName.getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitLoadStatement(LoadStatementContext ctx) {\n+    if (ctx.prefixPath().nodeName().size() < 3) {\n+      throw new SQLParserException(\"data load command: child count < 3\\n\");\n+    }\n+\n+    String csvPath = ctx.stringLiteral().getText();\n+    StringContainer sc = new StringContainer(TsFileConstant.PATH_SEPARATOR);\n+    List<NodeNameContext> nodeNames = ctx.prefixPath().nodeName();\n+    sc.addTail(ctx.prefixPath().ROOT().getText());\n+    for (NodeNameContext nodeName : nodeNames) {\n+      sc.addTail(nodeName.getText());\n+    }\n+    return new LoadDataOperator(SQLConstant.TOK_DATALOAD,\n+        removeStringQuote(csvPath),\n+        sc.toString());\n+  }\n+\n+  @Override\n+  public Operator visitGrantWatermarkEmbedding(GrantWatermarkEmbeddingContext ctx) {\n+    List<RootOrIdContext> rootOrIdList = ctx.rootOrId();\n+    List<String> users = new ArrayList<>();\n+    for (RootOrIdContext rootOrId : rootOrIdList) {\n+      users.add(rootOrId.getText());\n+    }\n+    return new DataAuthOperator(SQLConstant.TOK_GRANT_WATERMARK_EMBEDDING, users);\n+  }\n+\n+  @Override\n+  public Operator visitRevokeWatermarkEmbedding(RevokeWatermarkEmbeddingContext ctx) {\n+    List<RootOrIdContext> rootOrIdList = ctx.rootOrId();\n+    List<String> users = new ArrayList<>();\n+    for (RootOrIdContext rootOrId : rootOrIdList) {\n+      users.add(rootOrId.getText());\n+    }\n+    return new DataAuthOperator(SQLConstant.TOK_REVOKE_WATERMARK_EMBEDDING, users);\n+  }\n+\n+  @Override\n+  public Operator visitListUser(ListUserContext ctx) {\n+    return new AuthorOperator(SQLConstant.TOK_LIST, AuthorOperator.AuthorType.LIST_USER);\n+  }\n+\n+  @Override\n+  public Operator visitListRole(ListRoleContext ctx) {\n+    return new AuthorOperator(SQLConstant.TOK_LIST, AuthorOperator.AuthorType.LIST_ROLE);\n+  }\n+\n+  @Override\n+  public Operator visitListPrivilegesUser(ListPrivilegesUserContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_USER_PRIVILEGE);\n+    operator.setUserName(ctx.rootOrId().getText());\n+    operator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListPrivilegesRole(ListPrivilegesRoleContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_ROLE_PRIVILEGE);\n+    operator.setRoleName((ctx.ID().getText()));\n+    operator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListUserPrivileges(ListUserPrivilegesContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_USER_PRIVILEGE);\n+    operator.setUserName(ctx.rootOrId().getText());\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListRolePrivileges(ListRolePrivilegesContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_ROLE_PRIVILEGE);\n+    operator.setRoleName(ctx.ID().getText());\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListAllRoleOfUser(ListAllRoleOfUserContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_USER_ROLES);\n+    operator.setUserName(ctx.rootOrId().getText());\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListAllUserOfRole(ListAllUserOfRoleContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_ROLE_USERS);\n+    operator.setRoleName((ctx.ID().getText()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitSetTTLStatement(SetTTLStatementContext ctx) {\n+    SetTTLOperator operator = new SetTTLOperator(SQLConstant.TOK_SET);\n+    operator.setStorageGroup(parsePrefixPath(ctx.prefixPath()));\n+    operator.setDataTTL(Long.parseLong(ctx.INT().getText()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitUnsetTTLStatement(UnsetTTLStatementContext ctx) {\n+    SetTTLOperator operator = new SetTTLOperator(SQLConstant.TOK_UNSET);\n+    operator.setStorageGroup(parsePrefixPath(ctx.prefixPath()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitShowTTLStatement(ShowTTLStatementContext ctx) {\n+    List<PartialPath> storageGroups = new ArrayList<>();\n+    List<PrefixPathContext> prefixPathList = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPathList) {\n+      storageGroups.add(parsePrefixPath(prefixPath));\n+    }\n+    return new ShowTTLOperator(storageGroups);\n+  }\n+\n+  @Override\n+  public Operator visitShowAllTTLStatement(ShowAllTTLStatementContext ctx) {\n+    List<PartialPath> storageGroups = new ArrayList<>();\n+    return new ShowTTLOperator(storageGroups);\n+  }\n+\n+  @Override\n+  public Operator visitShowFlushTaskInfo(ShowFlushTaskInfoContext ctx) {\n+    return new ShowOperator(SQLConstant.TOK_FLUSH_TASK_INFO);\n+  }\n+\n+  @Override\n+  public Operator visitShowVersion(ShowVersionContext ctx) {\n+    return new ShowOperator(SQLConstant.TOK_VERSION);\n+  }\n+\n+  @Override\n+  public Operator visitShowTimeseries(ShowTimeseriesContext ctx) {\n+    boolean orderByHeat = ctx.LATEST() != null;\n+    ShowTimeSeriesOperator showTimeSeriesOperator;\n+    if (ctx.prefixPath() != null) {\n+      showTimeSeriesOperator = new ShowTimeSeriesOperator(SQLConstant.TOK_TIMESERIES,\n+          parsePrefixPath(ctx.prefixPath()), orderByHeat);\n+    } else {\n+      showTimeSeriesOperator = new ShowTimeSeriesOperator(SQLConstant.TOK_TIMESERIES, new PartialPath(SQLConstant.getSingleRootArray()),\n+          orderByHeat);\n+    }\n+    if(ctx.showWhereClause() != null) {\n+      parseShowWhereClause(ctx.showWhereClause(), showTimeSeriesOperator);\n+    }\n+    if(ctx.limitClause() != null) {\n+      parseLimitClause(ctx.limitClause(), showTimeSeriesOperator);\n+    }\n+    return showTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitShowStorageGroup(ShowStorageGroupContext ctx) {\n+    if (ctx.prefixPath() != null) {\n+      return new ShowStorageGroupOperator(SQLConstant.TOK_STORAGE_GROUP,\n+          parsePrefixPath(ctx.prefixPath()));\n+    } else {\n+      return new ShowStorageGroupOperator(SQLConstant.TOK_STORAGE_GROUP,\n+          new PartialPath(SQLConstant.getSingleRootArray()));\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitShowChildPaths(ShowChildPathsContext ctx) {\n+    if (ctx.prefixPath() != null) {\n+      return new ShowChildPathsOperator(SQLConstant.TOK_CHILD_PATHS,\n+          parsePrefixPath(ctx.prefixPath()));\n+    } else {\n+      return new ShowChildPathsOperator(SQLConstant.TOK_CHILD_PATHS,\n+          new PartialPath(SQLConstant.getSingleRootArray()));\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitShowDevices(ShowDevicesContext ctx) {\n+    if (ctx.prefixPath() != null) {\n+      return new ShowDevicesOperator(SQLConstant.TOK_DEVICES,\n+          parsePrefixPath(ctx.prefixPath()));\n+    } else {\n+      return new ShowDevicesOperator(SQLConstant.TOK_DEVICES,\n+          new PartialPath(SQLConstant.getSingleRootArray()));\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitShowMergeStatus(ShowMergeStatusContext ctx) {\n+    return new ShowMergeStatusOperator(SQLConstant.TOK_SHOW_MERGE_STATUS);\n+  }\n+\n+  @Override\n+  public Operator visitTracingOn(TracingOnContext ctx) {\n+    return new TracingOperator(SQLConstant.TOK_TRACING, true);\n+  }\n+\n+  @Override\n+  public Operator visitTracingOff(TracingOffContext ctx) {\n+    return new TracingOperator(SQLConstant.TOK_TRACING, false);\n+  }\n+\n+  @Override\n+  public Operator visitCountTimeseries(CountTimeseriesContext ctx) {\n+    PrefixPathContext pathContext = ctx.prefixPath();\n+    PartialPath path = (pathContext != null ? parsePrefixPath(pathContext) : new PartialPath(SQLConstant.getSingleRootArray()));\n+    if (ctx.INT() != null) {\n+      return new CountOperator(SQLConstant.TOK_COUNT_NODE_TIMESERIES,\n+          path, Integer.parseInt(ctx.INT().getText()));\n+    } else {\n+      return new CountOperator(SQLConstant.TOK_COUNT_TIMESERIES,\n+          path);\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitCountDevices(CountDevicesContext ctx) {\n+    PrefixPathContext pathContext = ctx.prefixPath();\n+    PartialPath path = (pathContext != null ? parsePrefixPath(pathContext) : new PartialPath(SQLConstant.getSingleRootArray()));\n+    return new CountOperator(SQLConstant.TOK_COUNT_DEVICES, path);\n+  }\n+\n+  @Override\n+  public Operator visitCountStorageGroup(CountStorageGroupContext ctx) {\n+    PrefixPathContext pathContext = ctx.prefixPath();\n+    PartialPath path = (pathContext != null ? parsePrefixPath(pathContext) : new PartialPath(SQLConstant.getSingleRootArray()));\n+    return new CountOperator(SQLConstant.TOK_COUNT_STORAGE_GROUP, path);\n+  }\n+\n+  @Override\n+  public Operator visitCountNodes(CountNodesContext ctx) {\n+    return new CountOperator(SQLConstant.TOK_COUNT_NODES,\n+        parsePrefixPath(ctx.prefixPath()), Integer.parseInt(ctx.INT().getText()));\n+  }\n+\n+  @Override\n+  public Operator visitLoadConfigurationStatement(LoadConfigurationStatementContext ctx) {\n+    if (ctx.GLOBAL() != null) {\n+      return new LoadConfigurationOperator(LoadConfigurationOperatorType.GLOBAL);\n+    } else {\n+      return new LoadConfigurationOperator(LoadConfigurationOperatorType.LOCAL);\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitLoadFiles(LoadFilesContext ctx) {\n+    if (ctx.autoCreateSchema() != null) {\n+      if (ctx.autoCreateSchema().INT() != null) {\n+        return new LoadFilesOperator(\n+            new File(removeStringQuote(ctx.stringLiteral().getText())),\n+            Boolean.parseBoolean(ctx.autoCreateSchema().booleanClause().getText()),\n+            Integer.parseInt(ctx.autoCreateSchema().INT().getText())\n+        );\n+      } else {\n+        return new LoadFilesOperator(\n+            new File(removeStringQuote(ctx.stringLiteral().getText())),\n+            Boolean.parseBoolean(ctx.autoCreateSchema().booleanClause().getText()),\n+            IoTDBDescriptor.getInstance().getConfig().getDefaultStorageGroupLevel()\n+        );\n+      }\n+    } else {\n+      return new LoadFilesOperator(\n+          new File(removeStringQuote(ctx.stringLiteral().getText())),\n+          true,\n+          IoTDBDescriptor.getInstance().getConfig().getDefaultStorageGroupLevel()\n+      );\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitRemoveFile(RemoveFileContext ctx) {\n+    return new RemoveFileOperator(new File(removeStringQuote(ctx.stringLiteral().getText())));\n+  }\n+\n+  @Override\n+  public Operator visitMoveFile(MoveFileContext ctx) {\n+    return new MoveFileOperator(\n+        new File(removeStringQuote(ctx.stringLiteral(0).getText())),\n+        new File(removeStringQuote(ctx.stringLiteral(1).getText())));\n+  }\n+\n+  @Override\n+  public Operator visitDeletePartition(DeletePartitionContext ctx) {\n+    DeletePartitionOperator deletePartitionOperator = new DeletePartitionOperator(\n+        SQLConstant.TOK_DELETE_PARTITION);\n+    deletePartitionOperator.setStorageGroupName(parsePrefixPath(ctx.prefixPath()));\n+    Set<Long> idSet = new HashSet<>();\n+    for (TerminalNode terminalNode : ctx.INT()) {\n+      idSet.add(Long.parseLong(terminalNode.getText()));\n+    }\n+    deletePartitionOperator.setPartitionIds(idSet);\n+    return deletePartitionOperator;\n+  }\n+\n+  @Override\n+  public Operator visitCreateSnapshot(CreateSnapshotContext ctx) {\n+    return new CreateSnapshotOperator(SQLConstant.TOK_CREATE_SCHEMA_SNAPSHOT);\n+  }\n+\n+  @Override\n+  public Operator visitSelectStatement(SelectStatementContext ctx) {\n+    queryOp  = new QueryOperator(SQLConstant.TOK_QUERY);\n+    SelectOperator selectOp = (SelectOperator) visit(ctx.selectElements());\n+    queryOp.setSelectOperator(selectOp);\n+    FromOperator fromOp = (FromOperator) visit(ctx.fromClause());\n+    queryOp.setFromOperator(fromOp);\n+    if(ctx.whereClause() != null) {\n+      FilterOperator whereOp = (FilterOperator) visit(ctx.whereClause());\n+      queryOp.setFilterOperator(whereOp.getChildren().get(0));\n+    }\n+    if(ctx.specialClause() != null) {\n+      visit(ctx.specialClause());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitFunctionElement(FunctionElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<FunctionCallContext> functionCallContextList = ctx.functionCall();\n+    for (FunctionCallContext functionCallContext : functionCallContextList) {\n+      PartialPath path = parseSuffixPath(functionCallContext.suffixPath());\n+      selectOp.addClusterPath(path, functionCallContext.functionName().getText());\n+    }\n+    return selectOp;\n+  }\n+\n+  @Override\n+  public Operator visitLastElement(LastElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    selectOp.setLastQuery();\n+    LastClauseContext lastClauseContext = ctx.lastClause();\n+    if (lastClauseContext.asClause().size() != 0) {\n+      parseAsClause(lastClauseContext.asClause(), selectOp);\n+    } else {\n+      List<SuffixPathContext> suffixPaths = lastClauseContext.suffixPath();\n+      for (SuffixPathContext suffixPath : suffixPaths) {\n+        PartialPath path = parseSuffixPath(suffixPath);\n+        selectOp.addSelectPath(path);\n+      }\n+    }\n+    return selectOp;\n+  }\n+\n+  @Override\n+  public Operator visitAsElement(AsElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    parseAsClause(ctx.asClause(), selectOp);\n+    return selectOp;\n+  }\n+\n+  @Override\n+  public Operator visitFunctionAsElement(FunctionAsElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<FunctionAsClauseContext> functionAsClauseContexts = ctx.functionAsClause();\n+    for (FunctionAsClauseContext functionAsClauseContext : functionAsClauseContexts) {\n+      FunctionCallContext functionCallContext = functionAsClauseContext.functionCall();\n+      PartialPath path = parseSuffixPath(functionCallContext.suffixPath());\n+      if (functionAsClauseContext.ID() != null) {\n+        path.setTsAlias(functionAsClauseContext.ID().toString());\n+      }\n+      selectOp.addClusterPath(path, functionCallContext.functionName().getText());\n+    }\n+    return selectOp;\n+  }\n+\n+  public void parseAsClause(List<AsClauseContext> asClauseContexts, SelectOperator selectOp) {\n+    for (AsClauseContext asClauseContext : asClauseContexts) {\n+      PartialPath path = parseSuffixPath(asClauseContext.suffixPath());\n+      if (asClauseContext.ID() != null) {\n+        path.setTsAlias(asClauseContext.ID().toString());\n+      }\n+      selectOp.addSelectPath(path);\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitSpecialLimitStatement(SpecialLimitStatementContext ctx) {\n+    return visit(ctx.specialLimit());\n+  }\n+\n+  @Override\n+  public Operator visitLimitStatement(LimitStatementContext ctx) {\n+    parseLimitClause(ctx.limitClause(), queryOp);\n+    if(ctx.slimitClause() != null) {\n+      parseSlimitClause(ctx.slimitClause(), queryOp);\n+    }\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {\n+      if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+        parseAlignByDeviceClause(queryOp);\n+      } else {\n+        parseDisableAlign(queryOp);\n+      }\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitSlimitStatement(SlimitStatementContext ctx) {\n+    parseSlimitClause(ctx.slimitClause(), queryOp);\n+    if(ctx.limitClause() != null) {\n+      parseLimitClause(ctx.limitClause(), queryOp);\n+    }\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {\n+      if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+        parseAlignByDeviceClause(queryOp);\n+      } else {\n+        parseDisableAlign(queryOp);\n+      }\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitAlignByDeviceClauseOrDisableAlignInSpecialLimit(\n+      AlignByDeviceClauseOrDisableAlignInSpecialLimitContext ctx) {\n+    if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+      parseAlignByDeviceClause(queryOp);\n+    } else {\n+      parseDisableAlign(queryOp);\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitOrderByTimeStatement(OrderByTimeStatementContext ctx) {\n+    parseOrderByTimeClause(ctx.orderByTimeClause(), queryOp);\n+    if(ctx.specialLimit() != null) {\n+      return visit(ctx.specialLimit());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitGroupByTimeStatement(GroupByTimeStatementContext ctx) {\n+    parseGroupByTimeClause(ctx.groupByTimeClause(), queryOp);\n+    if(ctx.orderByTimeClause() != null) {\n+      parseOrderByTimeClause(ctx.orderByTimeClause(), queryOp);\n+    }\n+    if(ctx.specialLimit() != null) {\n+      return visit(ctx.specialLimit());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitGroupByFillStatement(GroupByFillStatementContext ctx) {\n+    parseGroupByFillClause(ctx.groupByFillClause(), queryOp);\n+    if(ctx.orderByTimeClause() != null) {\n+      parseOrderByTimeClause(ctx.orderByTimeClause(), queryOp);\n+    }\n+    if(ctx.specialLimit() != null) {\n+      return visit(ctx.specialLimit());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitFillStatement(FillStatementContext ctx) {\n+    parseFillClause(ctx.fillClause(), queryOp);\n+    if(ctx.slimitClause() != null) {\n+      queryOp = (QueryOperator) visit(ctx.slimitClause());\n+    }\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {\n+      if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+        parseAlignByDeviceClause(queryOp);\n+      } else {\n+        parseDisableAlign(queryOp);\n+      }\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitAlignByDeviceStatementOrDisableAlignInSpecialClause(\n+      AlignByDeviceStatementOrDisableAlignInSpecialClauseContext ctx) {\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9257493edf9d8382584cbad9e5f6b87256f62172"}, "originalPosition": 940}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNjQ2OQ==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r527526469", "createdAt": "2020-11-20T08:39:04Z", "author": {"login": "Genius-pig"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/sql/IoTDBSqlVisitor.java", "diffHunk": "@@ -0,0 +1,1739 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.sql;\n+\n+import static org.apache.iotdb.db.qp.constant.SQLConstant.TIME_PATH;\n+\n+import java.io.File;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.EnumMap;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.constant.DatetimeUtils;\n+import org.apache.iotdb.db.qp.constant.SQLConstant;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.crud.BasicFunctionOperator;\n+import org.apache.iotdb.db.qp.logical.crud.DeleteDataOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FilterOperator;\n+import org.apache.iotdb.db.qp.logical.crud.FromOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InOperator;\n+import org.apache.iotdb.db.qp.logical.crud.InsertOperator;\n+import org.apache.iotdb.db.qp.logical.crud.QueryOperator;\n+import org.apache.iotdb.db.qp.logical.crud.SelectOperator;\n+import org.apache.iotdb.db.qp.logical.crud.UpdateOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AlterTimeSeriesOperator.AlterType;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator;\n+import org.apache.iotdb.db.qp.logical.sys.AuthorOperator.AuthorType;\n+import org.apache.iotdb.db.qp.logical.sys.ClearCacheOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CountOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateSnapshotOperator;\n+import org.apache.iotdb.db.qp.logical.sys.CreateTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DataAuthOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeletePartitionOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.DeleteTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.FlushOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadConfigurationOperator.LoadConfigurationOperatorType;\n+import org.apache.iotdb.db.qp.logical.sys.LoadDataOperator;\n+import org.apache.iotdb.db.qp.logical.sys.LoadFilesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MergeOperator;\n+import org.apache.iotdb.db.qp.logical.sys.MoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.RemoveFileOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.SetTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowChildPathsOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowDevicesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowMergeStatusOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowStorageGroupOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTTLOperator;\n+import org.apache.iotdb.db.qp.logical.sys.ShowTimeSeriesOperator;\n+import org.apache.iotdb.db.qp.logical.sys.TracingOperator;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AliasClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceClauseOrDisableAlignInSpecialLimitContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlignByDeviceStatementOrDisableAlignInSpecialClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AlterUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AndExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.AttributeClausesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ClearcacheContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ConstantContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountNodesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CountTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateSnapshotContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.CreateUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DateExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeletePartitionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DeleteTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.DropUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FlushContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FromClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullMergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FullPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionAsElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionCallContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.FunctionElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantRoleToUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GrantWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByFillStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByLevelStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.GroupByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertColumnSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.InsertValuesSpecContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LastElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllRoleOfUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListAllUserOfRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListPrivilegesUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListRolePrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ListUserPrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadConfigurationStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadFilesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.LoadStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MergeContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.MoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.NodeNameWithoutStarContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrExpressionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.OrderByTimeStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PredicateContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrefixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PrivilegesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.PropertyValueContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RemoveFileContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeRoleFromUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeUserContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RevokeWatermarkEmbeddingContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.RootOrIdContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectElementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SelectStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetColContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowAllTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowChildPathsContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowDevicesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowFlushTaskInfoContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowMergeStatusContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowStorageGroupContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowTimeseriesContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowVersionContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.ShowWhereClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SingleStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SlimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SoffsetClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SpecialLimitStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.StringLiteralContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.SuffixPathContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TagClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TimeIntervalContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOffContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TracingOnContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.TypeClauseContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UnsetTTLStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.UpdateStatementContext;\n+import org.apache.iotdb.db.qp.sql.SqlBaseParser.WhereClauseContext;\n+import org.apache.iotdb.db.query.executor.fill.IFill;\n+import org.apache.iotdb.db.query.executor.fill.LinearFill;\n+import org.apache.iotdb.db.query.executor.fill.PreviousFill;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+\n+public class IoTDBSqlVisitor extends SqlBaseBaseVisitor<Operator> {\n+  private static final String DELETE_RANGE_ERROR_MSG =\n+      \"For delete statement, where clause can only contain atomic expressions like : \" +\n+          \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n+  private ZoneId zoneId;\n+  QueryOperator queryOp;\n+\n+  public void setZoneId(ZoneId zoneId) {\n+    this.zoneId = zoneId;\n+  }\n+\n+  @Override\n+  public Operator visitSingleStatement(SingleStatementContext ctx) {\n+    return visit(ctx.statement());\n+  }\n+\n+  @Override\n+  public Operator visitCreateTimeseries(CreateTimeseriesContext ctx) {\n+    CreateTimeSeriesOperator createTimeSeriesOperator = new CreateTimeSeriesOperator(SQLConstant.TOK_METADATA_CREATE);\n+    createTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    if(ctx.alias() != null) {\n+      createTimeSeriesOperator.setAlias(ctx.alias().ID().getText());\n+    }\n+    if(ctx.attributeClauses() != null) {\n+      parseAttributeClauses(ctx.attributeClauses(), createTimeSeriesOperator);\n+    }\n+    return createTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteTimeseries(DeleteTimeseriesContext ctx) {\n+    List<PartialPath> deletePaths = new ArrayList<>();\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      deletePaths.add(parsePrefixPath(prefixPath));\n+    }\n+    DeleteTimeSeriesOperator deleteTimeSeriesOperator = new DeleteTimeSeriesOperator(\n+        SQLConstant.TOK_METADATA_DELETE);\n+    deleteTimeSeriesOperator.setDeletePathList(deletePaths);\n+    return deleteTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitAlterTimeseries(AlterTimeseriesContext ctx) {\n+    AlterTimeSeriesOperator alterTimeSeriesOperator = new AlterTimeSeriesOperator(SQLConstant.TOK_METADATA_ALTER);\n+    alterTimeSeriesOperator.setPath(parseFullPath(ctx.fullPath()));\n+    parseAlterClause(ctx.alterClause(), alterTimeSeriesOperator);\n+    return alterTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitInsertStatement(InsertStatementContext ctx) {\n+    InsertOperator insertOp = new InsertOperator(SQLConstant.TOK_INSERT);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    selectOp.addSelectPath(parsePrefixPath(ctx.prefixPath()));\n+    insertOp.setSelectOperator(selectOp);\n+    parseInsertColumnSpec(ctx.insertColumnSpec(), insertOp);\n+    parseInsertValuesSpec(ctx.insertValuesSpec(), insertOp);\n+    return insertOp;\n+  }\n+\n+  @Override\n+  public Operator visitUpdateStatement(UpdateStatementContext ctx) {\n+    UpdateOperator updateOp = new UpdateOperator(SQLConstant.TOK_UPDATE);\n+    FromOperator fromOp = new FromOperator(SQLConstant.TOK_FROM);\n+    fromOp.addPrefixTablePath(parsePrefixPath(ctx.prefixPath()));\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_QUERY);\n+    for(SetColContext colContext : ctx.setClause().setCol()) {\n+      parseSetCol(colContext, selectOp, updateOp);\n+    }\n+    FilterOperator whereOp = (FilterOperator) visit(ctx.whereClause());\n+    updateOp.setFilterOperator(whereOp.getChildren().get(0));\n+    updateOp.setSelectOperator(selectOp);\n+    return updateOp;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteStatement(DeleteStatementContext ctx) {\n+    DeleteDataOperator deleteDataOp = new DeleteDataOperator(SQLConstant.TOK_DELETE);\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      PartialPath path = parsePrefixPath(prefixPath);\n+      selectOp.addSelectPath(path);\n+    }\n+    deleteDataOp.setSelectOperator(selectOp);\n+    if(ctx.whereClause() != null) {\n+      FilterOperator whereOp = (FilterOperator) visit(ctx.whereClause());\n+      deleteDataOp.setFilterOperator(whereOp.getChildren().get(0));\n+      Pair<Long, Long> timeInterval = parseDeleteTimeInterval(deleteDataOp);\n+      deleteDataOp.setStartTime(timeInterval.left);\n+      deleteDataOp.setEndTime(timeInterval.right);\n+    }\n+    return deleteDataOp;\n+  }\n+\n+  @Override\n+  public Operator visitSetStorageGroup(SetStorageGroupContext ctx) {\n+    SetStorageGroupOperator setStorageGroupOperator = new SetStorageGroupOperator(\n+        SQLConstant.TOK_METADATA_SET_FILE_LEVEL);\n+    PartialPath path = parsePrefixPath(ctx.prefixPath());\n+    setStorageGroupOperator.setPath(path);\n+    return setStorageGroupOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDeleteStorageGroup(DeleteStorageGroupContext ctx) {\n+    List<PartialPath> deletePaths = new ArrayList<>();\n+    List<PrefixPathContext> prefixPaths = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      deletePaths.add(parsePrefixPath(prefixPath));\n+    }\n+    DeleteStorageGroupOperator deleteStorageGroupOperator = new DeleteStorageGroupOperator(\n+        SQLConstant.TOK_METADATA_DELETE_FILE_LEVEL);\n+    deleteStorageGroupOperator.setDeletePathList(deletePaths);\n+    return deleteStorageGroupOperator;\n+  }\n+\n+  @Override\n+  public Operator visitMerge(MergeContext ctx) {\n+    return new MergeOperator(SQLConstant.TOK_MERGE);\n+  }\n+\n+  @Override\n+  public Operator visitFlush(FlushContext ctx) {\n+    FlushOperator flushOperator = new FlushOperator(SQLConstant.TOK_FLUSH);\n+    if (ctx.booleanClause() != null) {\n+      flushOperator.setSeq(Boolean.parseBoolean(ctx.booleanClause().getText()));\n+    }\n+    if (ctx.prefixPath(0) != null) {\n+      List<PartialPath> storageGroups = new ArrayList<>();\n+      for (PrefixPathContext prefixPathContext : ctx.prefixPath()) {\n+        storageGroups.add(parsePrefixPath(prefixPathContext));\n+      }\n+      flushOperator.setStorageGroupList(storageGroups);\n+    }\n+    return flushOperator;\n+  }\n+\n+  @Override\n+  public Operator visitFullMerge(FullMergeContext ctx) {\n+    return new MergeOperator(SQLConstant.TOK_FULL_MERGE);\n+  }\n+\n+  @Override\n+  public Operator visitClearcache(ClearcacheContext ctx) {\n+    return new ClearCacheOperator(SQLConstant.TOK_CLEAR_CACHE);\n+  }\n+\n+  @Override\n+  public Operator visitCreateUser(CreateUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_CREATE,\n+        AuthorOperator.AuthorType.CREATE_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    authorOperator.setPassWord(removeStringQuote(ctx.password.getText()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitAlterUser(AlterUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_UPDATE_USER,\n+        AuthorOperator.AuthorType.UPDATE_USER);\n+    if (ctx.ID() != null) {\n+      authorOperator.setUserName(ctx.ID().getText());\n+    } else {\n+      authorOperator.setUserName(ctx.ROOT().getText());\n+    }\n+    authorOperator.setNewPassword(removeStringQuote(ctx.password.getText()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDropUser(DropUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_DROP,\n+        AuthorOperator.AuthorType.DROP_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitCreateRole(CreateRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_CREATE,\n+        AuthorOperator.AuthorType.CREATE_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitDropRole(DropRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_DROP,\n+        AuthorOperator.AuthorType.DROP_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitGrantUser(GrantUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorOperator.AuthorType.GRANT_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitGrantRole(GrantRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.GRANT_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitRevokeUser(RevokeUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.REVOKE_USER);\n+    authorOperator.setUserName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitRevokeRole(RevokeRoleContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.REVOKE_ROLE);\n+    authorOperator.setRoleName(ctx.ID().getText());\n+    authorOperator.setPrivilegeList(parsePrivilege(ctx.privileges()));\n+    authorOperator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitGrantRoleToUser(GrantRoleToUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorOperator.AuthorType.GRANT_ROLE_TO_USER);\n+    authorOperator.setRoleName(ctx.roleName.getText());\n+    authorOperator.setUserName(ctx.userName.getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitRevokeRoleFromUser(RevokeRoleFromUserContext ctx) {\n+    AuthorOperator authorOperator = new AuthorOperator(SQLConstant.TOK_AUTHOR_GRANT,\n+        AuthorType.REVOKE_ROLE_FROM_USER);\n+    authorOperator.setRoleName(ctx.roleName.getText());\n+    authorOperator.setUserName(ctx.userName.getText());\n+    return authorOperator;\n+  }\n+\n+  @Override\n+  public Operator visitLoadStatement(LoadStatementContext ctx) {\n+    if (ctx.prefixPath().nodeName().size() < 3) {\n+      throw new SQLParserException(\"data load command: child count < 3\\n\");\n+    }\n+\n+    String csvPath = ctx.stringLiteral().getText();\n+    StringContainer sc = new StringContainer(TsFileConstant.PATH_SEPARATOR);\n+    List<NodeNameContext> nodeNames = ctx.prefixPath().nodeName();\n+    sc.addTail(ctx.prefixPath().ROOT().getText());\n+    for (NodeNameContext nodeName : nodeNames) {\n+      sc.addTail(nodeName.getText());\n+    }\n+    return new LoadDataOperator(SQLConstant.TOK_DATALOAD,\n+        removeStringQuote(csvPath),\n+        sc.toString());\n+  }\n+\n+  @Override\n+  public Operator visitGrantWatermarkEmbedding(GrantWatermarkEmbeddingContext ctx) {\n+    List<RootOrIdContext> rootOrIdList = ctx.rootOrId();\n+    List<String> users = new ArrayList<>();\n+    for (RootOrIdContext rootOrId : rootOrIdList) {\n+      users.add(rootOrId.getText());\n+    }\n+    return new DataAuthOperator(SQLConstant.TOK_GRANT_WATERMARK_EMBEDDING, users);\n+  }\n+\n+  @Override\n+  public Operator visitRevokeWatermarkEmbedding(RevokeWatermarkEmbeddingContext ctx) {\n+    List<RootOrIdContext> rootOrIdList = ctx.rootOrId();\n+    List<String> users = new ArrayList<>();\n+    for (RootOrIdContext rootOrId : rootOrIdList) {\n+      users.add(rootOrId.getText());\n+    }\n+    return new DataAuthOperator(SQLConstant.TOK_REVOKE_WATERMARK_EMBEDDING, users);\n+  }\n+\n+  @Override\n+  public Operator visitListUser(ListUserContext ctx) {\n+    return new AuthorOperator(SQLConstant.TOK_LIST, AuthorOperator.AuthorType.LIST_USER);\n+  }\n+\n+  @Override\n+  public Operator visitListRole(ListRoleContext ctx) {\n+    return new AuthorOperator(SQLConstant.TOK_LIST, AuthorOperator.AuthorType.LIST_ROLE);\n+  }\n+\n+  @Override\n+  public Operator visitListPrivilegesUser(ListPrivilegesUserContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_USER_PRIVILEGE);\n+    operator.setUserName(ctx.rootOrId().getText());\n+    operator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListPrivilegesRole(ListPrivilegesRoleContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_ROLE_PRIVILEGE);\n+    operator.setRoleName((ctx.ID().getText()));\n+    operator.setNodeNameList(parsePrefixPath(ctx.prefixPath()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListUserPrivileges(ListUserPrivilegesContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_USER_PRIVILEGE);\n+    operator.setUserName(ctx.rootOrId().getText());\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListRolePrivileges(ListRolePrivilegesContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_ROLE_PRIVILEGE);\n+    operator.setRoleName(ctx.ID().getText());\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListAllRoleOfUser(ListAllRoleOfUserContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_USER_ROLES);\n+    operator.setUserName(ctx.rootOrId().getText());\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitListAllUserOfRole(ListAllUserOfRoleContext ctx) {\n+    AuthorOperator operator = new AuthorOperator(SQLConstant.TOK_LIST,\n+        AuthorOperator.AuthorType.LIST_ROLE_USERS);\n+    operator.setRoleName((ctx.ID().getText()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitSetTTLStatement(SetTTLStatementContext ctx) {\n+    SetTTLOperator operator = new SetTTLOperator(SQLConstant.TOK_SET);\n+    operator.setStorageGroup(parsePrefixPath(ctx.prefixPath()));\n+    operator.setDataTTL(Long.parseLong(ctx.INT().getText()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitUnsetTTLStatement(UnsetTTLStatementContext ctx) {\n+    SetTTLOperator operator = new SetTTLOperator(SQLConstant.TOK_UNSET);\n+    operator.setStorageGroup(parsePrefixPath(ctx.prefixPath()));\n+    return operator;\n+  }\n+\n+  @Override\n+  public Operator visitShowTTLStatement(ShowTTLStatementContext ctx) {\n+    List<PartialPath> storageGroups = new ArrayList<>();\n+    List<PrefixPathContext> prefixPathList = ctx.prefixPath();\n+    for (PrefixPathContext prefixPath : prefixPathList) {\n+      storageGroups.add(parsePrefixPath(prefixPath));\n+    }\n+    return new ShowTTLOperator(storageGroups);\n+  }\n+\n+  @Override\n+  public Operator visitShowAllTTLStatement(ShowAllTTLStatementContext ctx) {\n+    List<PartialPath> storageGroups = new ArrayList<>();\n+    return new ShowTTLOperator(storageGroups);\n+  }\n+\n+  @Override\n+  public Operator visitShowFlushTaskInfo(ShowFlushTaskInfoContext ctx) {\n+    return new ShowOperator(SQLConstant.TOK_FLUSH_TASK_INFO);\n+  }\n+\n+  @Override\n+  public Operator visitShowVersion(ShowVersionContext ctx) {\n+    return new ShowOperator(SQLConstant.TOK_VERSION);\n+  }\n+\n+  @Override\n+  public Operator visitShowTimeseries(ShowTimeseriesContext ctx) {\n+    boolean orderByHeat = ctx.LATEST() != null;\n+    ShowTimeSeriesOperator showTimeSeriesOperator;\n+    if (ctx.prefixPath() != null) {\n+      showTimeSeriesOperator = new ShowTimeSeriesOperator(SQLConstant.TOK_TIMESERIES,\n+          parsePrefixPath(ctx.prefixPath()), orderByHeat);\n+    } else {\n+      showTimeSeriesOperator = new ShowTimeSeriesOperator(SQLConstant.TOK_TIMESERIES, new PartialPath(SQLConstant.getSingleRootArray()),\n+          orderByHeat);\n+    }\n+    if(ctx.showWhereClause() != null) {\n+      parseShowWhereClause(ctx.showWhereClause(), showTimeSeriesOperator);\n+    }\n+    if(ctx.limitClause() != null) {\n+      parseLimitClause(ctx.limitClause(), showTimeSeriesOperator);\n+    }\n+    return showTimeSeriesOperator;\n+  }\n+\n+  @Override\n+  public Operator visitShowStorageGroup(ShowStorageGroupContext ctx) {\n+    if (ctx.prefixPath() != null) {\n+      return new ShowStorageGroupOperator(SQLConstant.TOK_STORAGE_GROUP,\n+          parsePrefixPath(ctx.prefixPath()));\n+    } else {\n+      return new ShowStorageGroupOperator(SQLConstant.TOK_STORAGE_GROUP,\n+          new PartialPath(SQLConstant.getSingleRootArray()));\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitShowChildPaths(ShowChildPathsContext ctx) {\n+    if (ctx.prefixPath() != null) {\n+      return new ShowChildPathsOperator(SQLConstant.TOK_CHILD_PATHS,\n+          parsePrefixPath(ctx.prefixPath()));\n+    } else {\n+      return new ShowChildPathsOperator(SQLConstant.TOK_CHILD_PATHS,\n+          new PartialPath(SQLConstant.getSingleRootArray()));\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitShowDevices(ShowDevicesContext ctx) {\n+    if (ctx.prefixPath() != null) {\n+      return new ShowDevicesOperator(SQLConstant.TOK_DEVICES,\n+          parsePrefixPath(ctx.prefixPath()));\n+    } else {\n+      return new ShowDevicesOperator(SQLConstant.TOK_DEVICES,\n+          new PartialPath(SQLConstant.getSingleRootArray()));\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitShowMergeStatus(ShowMergeStatusContext ctx) {\n+    return new ShowMergeStatusOperator(SQLConstant.TOK_SHOW_MERGE_STATUS);\n+  }\n+\n+  @Override\n+  public Operator visitTracingOn(TracingOnContext ctx) {\n+    return new TracingOperator(SQLConstant.TOK_TRACING, true);\n+  }\n+\n+  @Override\n+  public Operator visitTracingOff(TracingOffContext ctx) {\n+    return new TracingOperator(SQLConstant.TOK_TRACING, false);\n+  }\n+\n+  @Override\n+  public Operator visitCountTimeseries(CountTimeseriesContext ctx) {\n+    PrefixPathContext pathContext = ctx.prefixPath();\n+    PartialPath path = (pathContext != null ? parsePrefixPath(pathContext) : new PartialPath(SQLConstant.getSingleRootArray()));\n+    if (ctx.INT() != null) {\n+      return new CountOperator(SQLConstant.TOK_COUNT_NODE_TIMESERIES,\n+          path, Integer.parseInt(ctx.INT().getText()));\n+    } else {\n+      return new CountOperator(SQLConstant.TOK_COUNT_TIMESERIES,\n+          path);\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitCountDevices(CountDevicesContext ctx) {\n+    PrefixPathContext pathContext = ctx.prefixPath();\n+    PartialPath path = (pathContext != null ? parsePrefixPath(pathContext) : new PartialPath(SQLConstant.getSingleRootArray()));\n+    return new CountOperator(SQLConstant.TOK_COUNT_DEVICES, path);\n+  }\n+\n+  @Override\n+  public Operator visitCountStorageGroup(CountStorageGroupContext ctx) {\n+    PrefixPathContext pathContext = ctx.prefixPath();\n+    PartialPath path = (pathContext != null ? parsePrefixPath(pathContext) : new PartialPath(SQLConstant.getSingleRootArray()));\n+    return new CountOperator(SQLConstant.TOK_COUNT_STORAGE_GROUP, path);\n+  }\n+\n+  @Override\n+  public Operator visitCountNodes(CountNodesContext ctx) {\n+    return new CountOperator(SQLConstant.TOK_COUNT_NODES,\n+        parsePrefixPath(ctx.prefixPath()), Integer.parseInt(ctx.INT().getText()));\n+  }\n+\n+  @Override\n+  public Operator visitLoadConfigurationStatement(LoadConfigurationStatementContext ctx) {\n+    if (ctx.GLOBAL() != null) {\n+      return new LoadConfigurationOperator(LoadConfigurationOperatorType.GLOBAL);\n+    } else {\n+      return new LoadConfigurationOperator(LoadConfigurationOperatorType.LOCAL);\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitLoadFiles(LoadFilesContext ctx) {\n+    if (ctx.autoCreateSchema() != null) {\n+      if (ctx.autoCreateSchema().INT() != null) {\n+        return new LoadFilesOperator(\n+            new File(removeStringQuote(ctx.stringLiteral().getText())),\n+            Boolean.parseBoolean(ctx.autoCreateSchema().booleanClause().getText()),\n+            Integer.parseInt(ctx.autoCreateSchema().INT().getText())\n+        );\n+      } else {\n+        return new LoadFilesOperator(\n+            new File(removeStringQuote(ctx.stringLiteral().getText())),\n+            Boolean.parseBoolean(ctx.autoCreateSchema().booleanClause().getText()),\n+            IoTDBDescriptor.getInstance().getConfig().getDefaultStorageGroupLevel()\n+        );\n+      }\n+    } else {\n+      return new LoadFilesOperator(\n+          new File(removeStringQuote(ctx.stringLiteral().getText())),\n+          true,\n+          IoTDBDescriptor.getInstance().getConfig().getDefaultStorageGroupLevel()\n+      );\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitRemoveFile(RemoveFileContext ctx) {\n+    return new RemoveFileOperator(new File(removeStringQuote(ctx.stringLiteral().getText())));\n+  }\n+\n+  @Override\n+  public Operator visitMoveFile(MoveFileContext ctx) {\n+    return new MoveFileOperator(\n+        new File(removeStringQuote(ctx.stringLiteral(0).getText())),\n+        new File(removeStringQuote(ctx.stringLiteral(1).getText())));\n+  }\n+\n+  @Override\n+  public Operator visitDeletePartition(DeletePartitionContext ctx) {\n+    DeletePartitionOperator deletePartitionOperator = new DeletePartitionOperator(\n+        SQLConstant.TOK_DELETE_PARTITION);\n+    deletePartitionOperator.setStorageGroupName(parsePrefixPath(ctx.prefixPath()));\n+    Set<Long> idSet = new HashSet<>();\n+    for (TerminalNode terminalNode : ctx.INT()) {\n+      idSet.add(Long.parseLong(terminalNode.getText()));\n+    }\n+    deletePartitionOperator.setPartitionIds(idSet);\n+    return deletePartitionOperator;\n+  }\n+\n+  @Override\n+  public Operator visitCreateSnapshot(CreateSnapshotContext ctx) {\n+    return new CreateSnapshotOperator(SQLConstant.TOK_CREATE_SCHEMA_SNAPSHOT);\n+  }\n+\n+  @Override\n+  public Operator visitSelectStatement(SelectStatementContext ctx) {\n+    queryOp  = new QueryOperator(SQLConstant.TOK_QUERY);\n+    SelectOperator selectOp = (SelectOperator) visit(ctx.selectElements());\n+    queryOp.setSelectOperator(selectOp);\n+    FromOperator fromOp = (FromOperator) visit(ctx.fromClause());\n+    queryOp.setFromOperator(fromOp);\n+    if(ctx.whereClause() != null) {\n+      FilterOperator whereOp = (FilterOperator) visit(ctx.whereClause());\n+      queryOp.setFilterOperator(whereOp.getChildren().get(0));\n+    }\n+    if(ctx.specialClause() != null) {\n+      visit(ctx.specialClause());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitFunctionElement(FunctionElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<FunctionCallContext> functionCallContextList = ctx.functionCall();\n+    for (FunctionCallContext functionCallContext : functionCallContextList) {\n+      PartialPath path = parseSuffixPath(functionCallContext.suffixPath());\n+      selectOp.addClusterPath(path, functionCallContext.functionName().getText());\n+    }\n+    return selectOp;\n+  }\n+\n+  @Override\n+  public Operator visitLastElement(LastElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    selectOp.setLastQuery();\n+    LastClauseContext lastClauseContext = ctx.lastClause();\n+    if (lastClauseContext.asClause().size() != 0) {\n+      parseAsClause(lastClauseContext.asClause(), selectOp);\n+    } else {\n+      List<SuffixPathContext> suffixPaths = lastClauseContext.suffixPath();\n+      for (SuffixPathContext suffixPath : suffixPaths) {\n+        PartialPath path = parseSuffixPath(suffixPath);\n+        selectOp.addSelectPath(path);\n+      }\n+    }\n+    return selectOp;\n+  }\n+\n+  @Override\n+  public Operator visitAsElement(AsElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    parseAsClause(ctx.asClause(), selectOp);\n+    return selectOp;\n+  }\n+\n+  @Override\n+  public Operator visitFunctionAsElement(FunctionAsElementContext ctx) {\n+    SelectOperator selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<FunctionAsClauseContext> functionAsClauseContexts = ctx.functionAsClause();\n+    for (FunctionAsClauseContext functionAsClauseContext : functionAsClauseContexts) {\n+      FunctionCallContext functionCallContext = functionAsClauseContext.functionCall();\n+      PartialPath path = parseSuffixPath(functionCallContext.suffixPath());\n+      if (functionAsClauseContext.ID() != null) {\n+        path.setTsAlias(functionAsClauseContext.ID().toString());\n+      }\n+      selectOp.addClusterPath(path, functionCallContext.functionName().getText());\n+    }\n+    return selectOp;\n+  }\n+\n+  public void parseAsClause(List<AsClauseContext> asClauseContexts, SelectOperator selectOp) {\n+    for (AsClauseContext asClauseContext : asClauseContexts) {\n+      PartialPath path = parseSuffixPath(asClauseContext.suffixPath());\n+      if (asClauseContext.ID() != null) {\n+        path.setTsAlias(asClauseContext.ID().toString());\n+      }\n+      selectOp.addSelectPath(path);\n+    }\n+  }\n+\n+  @Override\n+  public Operator visitSpecialLimitStatement(SpecialLimitStatementContext ctx) {\n+    return visit(ctx.specialLimit());\n+  }\n+\n+  @Override\n+  public Operator visitLimitStatement(LimitStatementContext ctx) {\n+    parseLimitClause(ctx.limitClause(), queryOp);\n+    if(ctx.slimitClause() != null) {\n+      parseSlimitClause(ctx.slimitClause(), queryOp);\n+    }\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {\n+      if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+        parseAlignByDeviceClause(queryOp);\n+      } else {\n+        parseDisableAlign(queryOp);\n+      }\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitSlimitStatement(SlimitStatementContext ctx) {\n+    parseSlimitClause(ctx.slimitClause(), queryOp);\n+    if(ctx.limitClause() != null) {\n+      parseLimitClause(ctx.limitClause(), queryOp);\n+    }\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {\n+      if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+        parseAlignByDeviceClause(queryOp);\n+      } else {\n+        parseDisableAlign(queryOp);\n+      }\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitAlignByDeviceClauseOrDisableAlignInSpecialLimit(\n+      AlignByDeviceClauseOrDisableAlignInSpecialLimitContext ctx) {\n+    if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+      parseAlignByDeviceClause(queryOp);\n+    } else {\n+      parseDisableAlign(queryOp);\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitOrderByTimeStatement(OrderByTimeStatementContext ctx) {\n+    parseOrderByTimeClause(ctx.orderByTimeClause(), queryOp);\n+    if(ctx.specialLimit() != null) {\n+      return visit(ctx.specialLimit());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitGroupByTimeStatement(GroupByTimeStatementContext ctx) {\n+    parseGroupByTimeClause(ctx.groupByTimeClause(), queryOp);\n+    if(ctx.orderByTimeClause() != null) {\n+      parseOrderByTimeClause(ctx.orderByTimeClause(), queryOp);\n+    }\n+    if(ctx.specialLimit() != null) {\n+      return visit(ctx.specialLimit());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitGroupByFillStatement(GroupByFillStatementContext ctx) {\n+    parseGroupByFillClause(ctx.groupByFillClause(), queryOp);\n+    if(ctx.orderByTimeClause() != null) {\n+      parseOrderByTimeClause(ctx.orderByTimeClause(), queryOp);\n+    }\n+    if(ctx.specialLimit() != null) {\n+      return visit(ctx.specialLimit());\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitFillStatement(FillStatementContext ctx) {\n+    parseFillClause(ctx.fillClause(), queryOp);\n+    if(ctx.slimitClause() != null) {\n+      queryOp = (QueryOperator) visit(ctx.slimitClause());\n+    }\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {\n+      if(ctx.alignByDeviceClauseOrDisableAlign().alignByDeviceClause() != null) {\n+        parseAlignByDeviceClause(queryOp);\n+      } else {\n+        parseDisableAlign(queryOp);\n+      }\n+    }\n+    return queryOp;\n+  }\n+\n+  @Override\n+  public Operator visitAlignByDeviceStatementOrDisableAlignInSpecialClause(\n+      AlignByDeviceStatementOrDisableAlignInSpecialClauseContext ctx) {\n+    if(ctx.alignByDeviceClauseOrDisableAlign() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MTgzNQ=="}, "originalCommit": {"oid": "9257493edf9d8382584cbad9e5f6b87256f62172"}, "originalPosition": 940}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzgxNjU3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyMzowNlrOH3Hklw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyNzoxOFrOH3Hulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1Nzc4Mw==", "bodyText": "\"props\" is a little general and may be confused if the original query involves other parameters/ properties, shall we rename it to \"indexProps\"?", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r527557783", "createdAt": "2020-11-20T09:23:06Z", "author": {"login": "kr11"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -56,11 +57,31 @@\n \n   private boolean ascending = true;\n \n+  private Map<String, Object> props;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92da836ff678a24c9f4d2e1162ffe32a8d25d0b8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MDM0Mw==", "bodyText": "yes, I think it's ok", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r527560343", "createdAt": "2020-11-20T09:27:18Z", "author": {"login": "Genius-pig"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -56,11 +57,31 @@\n \n   private boolean ascending = true;\n \n+  private Map<String, Object> props;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1Nzc4Mw=="}, "originalCommit": {"oid": "92da836ff678a24c9f4d2e1162ffe32a8d25d0b8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzgzMDQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyNjo0M1rOH3HtIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMDoyOVrOH3H2hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1OTk2OA==", "bodyText": "As initialized at line 397, will getIndexType() != null and instanceof QueryIdnexPlan be equivalent?", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r527559968", "createdAt": "2020-11-20T09:26:43Z", "author": {"login": "kr11"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -608,9 +604,11 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator, int fetchSize)\n         }\n       }\n     }\n-    if(queryOperator instanceof QueryIndexOperator) {\n-      ((QueryIndexPlan) queryPlan).setIndexType(((QueryIndexOperator) queryOperator).getIndexType());\n-      ((QueryIndexPlan) queryPlan).setProps(((QueryIndexOperator) queryOperator).getProps());\n+    if(queryOperator.getIndexType() != null) {\n+      if(queryPlan instanceof QueryIndexPlan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92da836ff678a24c9f4d2e1162ffe32a8d25d0b8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjM3NA==", "bodyText": "I think it's equivalent", "url": "https://github.com/apache/iotdb/pull/2034#discussion_r527562374", "createdAt": "2020-11-20T09:30:29Z", "author": {"login": "Genius-pig"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -608,9 +604,11 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator, int fetchSize)\n         }\n       }\n     }\n-    if(queryOperator instanceof QueryIndexOperator) {\n-      ((QueryIndexPlan) queryPlan).setIndexType(((QueryIndexOperator) queryOperator).getIndexType());\n-      ((QueryIndexPlan) queryPlan).setProps(((QueryIndexOperator) queryOperator).getProps());\n+    if(queryOperator.getIndexType() != null) {\n+      if(queryPlan instanceof QueryIndexPlan) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1OTk2OA=="}, "originalCommit": {"oid": "92da836ff678a24c9f4d2e1162ffe32a8d25d0b8"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 552, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}