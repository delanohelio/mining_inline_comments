{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDg0MjQy", "number": 1051, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo0OTo0MFrODx4kDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzozODoyMFrODywRQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjMzNTQ5OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo0OTo0MFrOGFm7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxNjozOFrOGFuxcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzMzg1Ng==", "bodyText": "The same handler is used in different threads and its response and contact are set concurrently, so I am afraid that only the result from one node is returned because there is only one response in the handler.\nAnd the answer is still correct because the default replica number and node number are both 3, so timeseries are fully replicated in each node and even if you only query one node, it will have all timeseries. Thus I suggest you test in a different configuration, like 4-node-3-replica or 3-node-2-replica.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408533856", "createdAt": "2020-04-15T01:49:40Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,10 +97,48 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    Set<String> nodeListSet = new HashSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    GetNodesListHandler handler = new GetNodesListHandler();\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (Node node : metaGroupMember.getAllNodes()) {\n+      if (node.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        DataClient client = null;\n+        try {\n+          client = metaGroupMember.getDataClient(node);\n+        } catch (IOException e) {\n+          logger.error(\"Failed to connect to node: {}\", node, e);\n+        }\n+        AtomicReference<List<String>> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+        handler.setContact(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77bfc4c5fbf0e77b801f9bce3b6d11566eb9eab4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MjM4NQ==", "bodyText": "Yes, there's a problem. Thanks for your reminding. The initialization of handler should be inside each thread.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408662385", "createdAt": "2020-04-15T08:16:38Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,10 +97,48 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    Set<String> nodeListSet = new HashSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    GetNodesListHandler handler = new GetNodesListHandler();\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (Node node : metaGroupMember.getAllNodes()) {\n+      if (node.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        DataClient client = null;\n+        try {\n+          client = metaGroupMember.getDataClient(node);\n+        } catch (IOException e) {\n+          logger.error(\"Failed to connect to node: {}\", node, e);\n+        }\n+        AtomicReference<List<String>> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+        handler.setContact(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzMzg1Ng=="}, "originalCommit": {"oid": "77bfc4c5fbf0e77b801f9bce3b6d11566eb9eab4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjMzODcyOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo1MTozOVrOGFm9bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzowMjoyMlrOGFsVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNDM4MA==", "bodyText": "As nodeListSet is modified in different threads, maybe you should use a concurrent class.\nBy the way, the naming nodeListSet is confusing, probably better to just use nodeSet.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408534380", "createdAt": "2020-04-15T01:51:39Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,10 +97,48 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    Set<String> nodeListSet = new HashSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    GetNodesListHandler handler = new GetNodesListHandler();\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (Node node : metaGroupMember.getAllNodes()) {\n+      if (node.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        DataClient client = null;\n+        try {\n+          client = metaGroupMember.getDataClient(node);\n+        } catch (IOException e) {\n+          logger.error(\"Failed to connect to node: {}\", node, e);\n+        }\n+        AtomicReference<List<String>> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+        handler.setContact(node);\n+        synchronized (response) {\n+          try {\n+            if(client!= null){\n+              client.getNodeList(null, schemaPattern, level, handler);\n+              response.wait(connectionTimeoutInMS);\n+            }\n+          } catch (TException e) {\n+            logger.error(\"Error occurs when getting node lists in node {}.\", node, e);\n+          } catch (InterruptedException e) {\n+            logger.error(\"Interrupted when getting node lists in node {}.\", node, e);\n+          }\n+        }\n+        List<String> paths = response.get();\n+        if (paths != null) {\n+          nodeListSet.addAll(response.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77bfc4c5fbf0e77b801f9bce3b6d11566eb9eab4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjUzNA==", "bodyText": "Thanks for your reminding. ConcurrentSkipListSet is used instead of Set now.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408622534", "createdAt": "2020-04-15T07:02:22Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,10 +97,48 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    Set<String> nodeListSet = new HashSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    GetNodesListHandler handler = new GetNodesListHandler();\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (Node node : metaGroupMember.getAllNodes()) {\n+      if (node.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        DataClient client = null;\n+        try {\n+          client = metaGroupMember.getDataClient(node);\n+        } catch (IOException e) {\n+          logger.error(\"Failed to connect to node: {}\", node, e);\n+        }\n+        AtomicReference<List<String>> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+        handler.setContact(node);\n+        synchronized (response) {\n+          try {\n+            if(client!= null){\n+              client.getNodeList(null, schemaPattern, level, handler);\n+              response.wait(connectionTimeoutInMS);\n+            }\n+          } catch (TException e) {\n+            logger.error(\"Error occurs when getting node lists in node {}.\", node, e);\n+          } catch (InterruptedException e) {\n+            logger.error(\"Interrupted when getting node lists in node {}.\", node, e);\n+          }\n+        }\n+        List<String> paths = response.get();\n+        if (paths != null) {\n+          nodeListSet.addAll(response.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNDM4MA=="}, "originalCommit": {"oid": "77bfc4c5fbf0e77b801f9bce3b6d11566eb9eab4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjM2MDExOnYy", "diffSide": "LEFT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjowMjoyMlrOGFnJbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0NjoxM1rOGFr51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNzQ1NQ==", "bodyText": "Why not skip the local node?", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408537455", "createdAt": "2020-04-15T02:02:22Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -107,9 +108,6 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n     ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n \n     for (Node node : metaGroupMember.getAllNodes()) {\n-      if (node.equals(metaGroupMember.getThisNode())) {\n-        continue;\n-      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b07f98482af1564fa3b1e7a48f40bcffab9399c4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNTM4MQ==", "bodyText": "I thought maybe I can use client == null to check if it is the local node. Since it makes no differentce, I use the if (node.equals(metaGroupMember.getThisNode())) as before.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408615381", "createdAt": "2020-04-15T06:46:13Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -107,9 +108,6 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n     ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n \n     for (Node node : metaGroupMember.getAllNodes()) {\n-      if (node.equals(metaGroupMember.getThisNode())) {\n-        continue;\n-      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNzQ1NQ=="}, "originalCommit": {"oid": "b07f98482af1564fa3b1e7a48f40bcffab9399c4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjM2MjUwOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjowMzoyOFrOGFnKuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjowMzoyOFrOGFnKuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNzc4Nw==", "bodyText": "Please notice the concurrent problem as the above one.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408537787", "createdAt": "2020-04-15T02:03:28Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -138,13 +136,53 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n         }\n       });\n     }\n+    pool.shutdown();\n+    pool.awaitTermination(WAIT_GET_NODES_LIST_TIME, WAIT_GET_NODES_LIST_TIME_UNIT);\n     return new ArrayList<>(nodeListSet);\n   }\n \n   @Override\n-  protected Set<String> getPathNextChildren(String path) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n+  protected Set<String> getPathNextChildren(String path)\n+      throws MetadataException, InterruptedException {\n+    Set<String> nodeListSet = new HashSet<>(\n+        MManager.getInstance().getChildNodePathInNextLevel(path));\n+\n+    GetChildNodeNextLevelPathHandler handler = new GetChildNodeNextLevelPathHandler();\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (Node node : metaGroupMember.getAllNodes()) {\n+      pool.submit(() -> {\n+        DataClient client = null;\n+        try {\n+          client = metaGroupMember.getDataClient(node);\n+        } catch (IOException e) {\n+          logger.error(\"Failed to connect to node: {}\", node, e);\n+        }\n+        AtomicReference<List<String>> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+        handler.setContact(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b07f98482af1564fa3b1e7a48f40bcffab9399c4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI3OTA1OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0Mzo1MlrOGFvx4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzozNjoxMlrOGF5_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3ODg4Mg==", "bodyText": "It will be more robust if, for each group, you will try querying each node in the group until one result is returned. So that even if one node is down, you can still get the result from its replicas.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408678882", "createdAt": "2020-04-15T08:43:52Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -121,38 +124,41 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n         synchronized (response) {\n           try {\n             if (client != null) {\n-              client.getNodeList(null, schemaPattern, level, handler);\n+              client.getNodeList(node, schemaPattern, level, handler);\n               response.wait(connectionTimeoutInMS);\n             }\n           } catch (TException e) {\n             logger.error(\"Error occurs when getting node lists in node {}.\", node, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389e8c598189e6002af6f17819d42235b600767c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NjMxNw==", "bodyText": "Thanks for your suggestion.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408846317", "createdAt": "2020-04-15T13:36:12Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -121,38 +124,41 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n         synchronized (response) {\n           try {\n             if (client != null) {\n-              client.getNodeList(null, schemaPattern, level, handler);\n+              client.getNodeList(node, schemaPattern, level, handler);\n               response.wait(connectionTimeoutInMS);\n             }\n           } catch (TException e) {\n             logger.error(\"Error occurs when getting node lists in node {}.\", node, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3ODg4Mg=="}, "originalCommit": {"oid": "389e8c598189e6002af6f17819d42235b600767c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzMxNDg5OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/DataGroupMember.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1MzozNVrOGFwINw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1MzozNVrOGFwINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NDU5OQ==", "bodyText": "The current implementation cannot avoid the problem of sending duplicated metadata.\nThe solution may be modifying the interfaces in MManager to add a filter that will skip the unsatisfying timeseries that do not belong to the slots managed by the member.\nIt is a little tricky and it is okay if you do it in another PR.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r408684599", "createdAt": "2020-04-15T08:53:35Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/DataGroupMember.java", "diffHunk": "@@ -1369,6 +1370,24 @@ public void getChildNodePathInNextLevel(Node header, String path,\n     }\n   }\n \n+  @Override\n+  public void getAllMeasurementSchema(Node header, String path,\n+      AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {\n+    if (!syncLeader()) {\n+      resultHandler.onError(new LeaderUnknownException(getAllNodes()));\n+      return;\n+    }\n+    try {\n+      List<List<String>> res = new ArrayList<>();\n+      for(String[] element : MManager.getInstance().getAllMeasurementSchema(path)){\n+        res.add(Arrays.asList(element));\n+      }\n+      resultHandler.onComplete(res);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389e8c598189e6002af6f17819d42235b600767c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQ1NjA2OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzozNDoxM1rOGG-xiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODoxMToyNVrOGHEPeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3MzEyOQ==", "bodyText": "Local groups are the groups that the local node is in and they do not necessarily cover all groups. For example, if replica number is 2, and there are 4 nodes 1,2,3,4 the local groups of 1 will only be [4,1] and [1,2].", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r409973129", "createdAt": "2020-04-17T03:34:13Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,22 +99,172 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    ConcurrentSkipListSet<String> nodeSet = new ConcurrentSkipListSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (PartitionGroup group : metaGroupMember.getPartitionTable().getLocalGroups()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b7bbd3dea63de1d2826147c7e9175c695d7a01c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA2MjcxMg==", "bodyText": "That's right. Thanks for your reminding.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r410062712", "createdAt": "2020-04-17T08:11:25Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,22 +99,172 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    ConcurrentSkipListSet<String> nodeSet = new ConcurrentSkipListSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (PartitionGroup group : metaGroupMember.getPartitionTable().getLocalGroups()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3MzEyOQ=="}, "originalCommit": {"oid": "3b7bbd3dea63de1d2826147c7e9175c695d7a01c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQ2MjQyOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzozODoyMFrOGG-1WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODoxMTo0NlrOGHEQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NDEwNQ==", "bodyText": "It would be better to leave a log here if you fail to get result from all nodes in the group.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r409974105", "createdAt": "2020-04-17T03:38:20Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,22 +99,172 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    ConcurrentSkipListSet<String> nodeSet = new ConcurrentSkipListSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (PartitionGroup group : metaGroupMember.getPartitionTable().getLocalGroups()) {\n+      Node header = group.getHeader();\n+      if (header.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        GetNodesListHandler handler = new GetNodesListHandler();\n+        AtomicReference<List<String>> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+\n+        for (Node node : group) {\n+          try {\n+            DataClient client = metaGroupMember.getDataClient(node);\n+            handler.setContact(node);\n+            synchronized (response) {\n+              if (client != null) {\n+                client.getNodeList(header, schemaPattern, level, handler);\n+                response.wait(connectionTimeoutInMS);\n+              }\n+            }\n+            List<String> paths = response.get();\n+            if (paths != null) {\n+              nodeSet.addAll(paths);\n+              break;\n+            }\n+          } catch (IOException e) {\n+            logger.error(\"Failed to connect to node: {}\", node, e);\n+          } catch (TException e) {\n+            logger.error(\"Error occurs when getting node lists in node {}.\", node, e);\n+          } catch (InterruptedException e) {\n+            logger.error(\"Interrupted when getting node lists in node {}.\", node, e);\n+            Thread.currentThread().interrupt();\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b7bbd3dea63de1d2826147c7e9175c695d7a01c"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA2Mjg5Mw==", "bodyText": "Yes, it would be more clear.", "url": "https://github.com/apache/iotdb/pull/1051#discussion_r410062893", "createdAt": "2020-04-17T08:11:46Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -81,22 +99,172 @@ public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n   }\n \n   @Override\n-  protected List<String> getNodesList(String schemaPattern, int level) {\n-    // TODO-Cluster: enable meta queries\n-    throw new UnsupportedOperationException(\"Not implemented\");\n-    //return metaGroupMember.getNodeList(schemaPattern, level);\n+  protected List<String> getNodesList(String schemaPattern, int level)\n+      throws IOException, TException, InterruptedException, MetadataException {\n+    ConcurrentSkipListSet<String> nodeSet = new ConcurrentSkipListSet<>(\n+        MManager.getInstance().getNodesList(schemaPattern, level));\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (PartitionGroup group : metaGroupMember.getPartitionTable().getLocalGroups()) {\n+      Node header = group.getHeader();\n+      if (header.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        GetNodesListHandler handler = new GetNodesListHandler();\n+        AtomicReference<List<String>> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+\n+        for (Node node : group) {\n+          try {\n+            DataClient client = metaGroupMember.getDataClient(node);\n+            handler.setContact(node);\n+            synchronized (response) {\n+              if (client != null) {\n+                client.getNodeList(header, schemaPattern, level, handler);\n+                response.wait(connectionTimeoutInMS);\n+              }\n+            }\n+            List<String> paths = response.get();\n+            if (paths != null) {\n+              nodeSet.addAll(paths);\n+              break;\n+            }\n+          } catch (IOException e) {\n+            logger.error(\"Failed to connect to node: {}\", node, e);\n+          } catch (TException e) {\n+            logger.error(\"Error occurs when getting node lists in node {}.\", node, e);\n+          } catch (InterruptedException e) {\n+            logger.error(\"Interrupted when getting node lists in node {}.\", node, e);\n+            Thread.currentThread().interrupt();\n+          }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NDEwNQ=="}, "originalCommit": {"oid": "3b7bbd3dea63de1d2826147c7e9175c695d7a01c"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 47, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}