{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTgyNjI0", "number": 1561, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDo1OToxMVrOESNAbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMTozNzowM1rOESNVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTIyOTI2OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDo1OToxMVrOG3Qq7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDo1OToxMVrOG3Qq7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5Nzk5Ng==", "bodyText": "These variables seems to be easier to maintain and modify in the clusterUtil or clusterConfig", "url": "https://github.com/apache/iotdb/pull/1561#discussion_r460597996", "createdAt": "2020-07-27T00:59:11Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -50,8 +52,9 @@\n \n   // sending logs may take longer than normal communications\n   private static final long SEND_LOGS_WAIT_MS = 5 * 60 * 1000L;\n+  private static final int LOG_NUM_IN_BATCH = 1024;\n+  private static final int LEFT_SIZE_IN_REQUEST = 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6703266290a1e364a2ec52fb44e734786cf3455f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTI4MjE4OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMTozNzowM1rOG3RG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjo1NTo1MFrOG3SGBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwNTE2NQ==", "bodyText": "Report an error or warning here if the logList is empty when breaking, which means the configured size is too small to hold even one log and this may end up in a dead loop.\nBut more importantly, does it matter if a request's size exceeds FrameSize? Will not thrift break a request into several frames? If so, what is the point to enforce request size, and if not, why does thrift call it a FramedTransport?", "url": "https://github.com/apache/iotdb/pull/1561#discussion_r460605165", "createdAt": "2020-07-27T01:37:03Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -178,11 +181,21 @@ void doLogCatchUpInBatch() throws TException, InterruptedException {\n     }\n \n     List<ByteBuffer> logList = new ArrayList<>();\n-    for (int i = 0; i < logs.size() && !abort; i += LOG_NUM_IN_BATCH) {\n+    for (int i = 0; i < logs.size() && !abort;) {\n       logList.clear();\n-      for (int j = i; j < i + LOG_NUM_IN_BATCH && j < logs.size(); j++) {\n-        logList.add(logs.get(j).serialize());\n+      long totalLogSize = 0;\n+      int newStart = i;\n+      for (int curNum = 0; curNum < LOG_NUM_IN_BATCH && i < logs.size(); i++, curNum++) {\n+        ByteBuffer logData = logs.get(i).serialize();\n+        totalLogSize += logData.array().length;\n+        // we should send logs who's size is smaller than the max frame size of thrift\n+        // left 200 byte for other fields of AppendEntriesRequest\n+        if (totalLogSize > IoTDBDescriptor.getInstance().getConfig().getThriftMaxFrameSize() - LEFT_SIZE_IN_REQUEST) {\n+          break;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6703266290a1e364a2ec52fb44e734786cf3455f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYyMTMxNg==", "bodyText": "Not break a request into several frames. If a request is too large, it will be failed. A frame hold a full request data.  https://blog.csdn.net/duyuanhai/article/details/53332981, https://andrewpqc.github.io/2019/02/24/thrift/", "url": "https://github.com/apache/iotdb/pull/1561#discussion_r460621316", "createdAt": "2020-07-27T02:55:50Z", "author": {"login": "mychaow"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -178,11 +181,21 @@ void doLogCatchUpInBatch() throws TException, InterruptedException {\n     }\n \n     List<ByteBuffer> logList = new ArrayList<>();\n-    for (int i = 0; i < logs.size() && !abort; i += LOG_NUM_IN_BATCH) {\n+    for (int i = 0; i < logs.size() && !abort;) {\n       logList.clear();\n-      for (int j = i; j < i + LOG_NUM_IN_BATCH && j < logs.size(); j++) {\n-        logList.add(logs.get(j).serialize());\n+      long totalLogSize = 0;\n+      int newStart = i;\n+      for (int curNum = 0; curNum < LOG_NUM_IN_BATCH && i < logs.size(); i++, curNum++) {\n+        ByteBuffer logData = logs.get(i).serialize();\n+        totalLogSize += logData.array().length;\n+        // we should send logs who's size is smaller than the max frame size of thrift\n+        // left 200 byte for other fields of AppendEntriesRequest\n+        if (totalLogSize > IoTDBDescriptor.getInstance().getConfig().getThriftMaxFrameSize() - LEFT_SIZE_IN_REQUEST) {\n+          break;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwNTE2NQ=="}, "originalCommit": {"oid": "6703266290a1e364a2ec52fb44e734786cf3455f"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4770, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}