{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDAxMzc1", "number": 1751, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowMjowOFrOEqnHaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoyNToyMlrOEqnq4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE2NTIzOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationAlignByDeviceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowMjowOFrOHc6eYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMTo0OToyMlrOHdfsjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MDIyNw==", "bodyText": "I don't get the reason why do you remove this IT...", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500080227", "createdAt": "2020-10-06T08:02:08Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationAlignByDeviceIT.java", "diffHunk": "@@ -1,113 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.iotdb.db.integration;\n-\n-import static org.apache.iotdb.db.constant.TestConstant.count;\n-import static org.junit.Assert.fail;\n-\n-import java.sql.Connection;\n-import java.sql.DriverManager;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import org.apache.iotdb.db.utils.EnvironmentUtils;\n-import org.apache.iotdb.jdbc.Config;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class IoTDBAggregationAlignByDeviceIT {\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MDA2Mw==", "bodyText": "As all the align by device test is included in IoTDBAlignByDeviceIT. It's redundant here.", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500690063", "createdAt": "2020-10-07T01:49:22Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationAlignByDeviceIT.java", "diffHunk": "@@ -1,113 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.iotdb.db.integration;\n-\n-import static org.apache.iotdb.db.constant.TestConstant.count;\n-import static org.junit.Assert.fail;\n-\n-import java.sql.Connection;\n-import java.sql.DriverManager;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import org.apache.iotdb.db.utils.EnvironmentUtils;\n-import org.apache.iotdb.jdbc.Config;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class IoTDBAggregationAlignByDeviceIT {\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MDIyNw=="}, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE4NzgzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowODoxNlrOHc6sqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo0MToxOFrOHdvLXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4Mzg4MQ==", "bodyText": "Better to use try with resource reduce code smell...", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500083881", "createdAt": "2020-10-06T08:08:16Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "diffHunk": "@@ -357,11 +438,11 @@ private void minMaxTimeAggreWithSingleFilterTest() throws ClassNotFoundException\n       try {\n         while (resultSet.next()) {\n           String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n-                  resultSet.getString(min_time(d0s0)) + \",\" +\n-                  resultSet.getString(min_time(d0s1)) + \",\" +\n-                  resultSet.getString(min_time(d0s2)) +\n-                  \",\" + resultSet.getString(min_time(d0s3)) +\n-                  \",\" + resultSet.getString(min_time(d0s4));\n+              resultSet.getString(min_time(d0s0)) + \",\" +\n+              resultSet.getString(min_time(d0s1)) + \",\" +\n+              resultSet.getString(min_time(d0s2)) +\n+              \",\" + resultSet.getString(min_time(d0s3)) +\n+              \",\" + resultSet.getString(min_time(d0s4));\n           Assert.assertEquals(ans, retArray[cnt]);\n           cnt++;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0MzcxMA==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500943710", "createdAt": "2020-10-07T11:41:18Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "diffHunk": "@@ -357,11 +438,11 @@ private void minMaxTimeAggreWithSingleFilterTest() throws ClassNotFoundException\n       try {\n         while (resultSet.next()) {\n           String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n-                  resultSet.getString(min_time(d0s0)) + \",\" +\n-                  resultSet.getString(min_time(d0s1)) + \",\" +\n-                  resultSet.getString(min_time(d0s2)) +\n-                  \",\" + resultSet.getString(min_time(d0s3)) +\n-                  \",\" + resultSet.getString(min_time(d0s4));\n+              resultSet.getString(min_time(d0s0)) + \",\" +\n+              resultSet.getString(min_time(d0s1)) + \",\" +\n+              resultSet.getString(min_time(d0s2)) +\n+              \",\" + resultSet.getString(min_time(d0s3)) +\n+              \",\" + resultSet.getString(min_time(d0s4));\n           Assert.assertEquals(ans, retArray[cnt]);\n           cnt++;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4Mzg4MQ=="}, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE5MTkzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowOToyNlrOHc6vNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowOToyNlrOHc6vNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDUzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  resultSet = statement.getResultSet();\n          \n          \n            \n                  try {\n          \n          \n            \n                    while (resultSet.next()) {\n          \n          \n            \n                      String ans =\n          \n          \n            \n                          resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n          \n          \n            \n                              + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet\n          \n          \n            \n                              .getString(max_time(d0s2))\n          \n          \n            \n                              + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet\n          \n          \n            \n                              .getString(max_time(d0s4));\n          \n          \n            \n                      Assert.assertEquals(ans, retArray[cnt]);\n          \n          \n            \n                      cnt++;\n          \n          \n            \n                    }\n          \n          \n            \n                    Assert.assertEquals(2, cnt);\n          \n          \n            \n                  } finally {\n          \n          \n            \n                    resultSet.close();\n          \n          \n            \n                  }\n          \n          \n            \n                  try (resultSet = statement.getResultSet()) {\n          \n          \n            \n                    while (resultSet.next()) {\n          \n          \n            \n                      String ans =\n          \n          \n            \n                          resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n          \n          \n            \n                              + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet\n          \n          \n            \n                              .getString(max_time(d0s2))\n          \n          \n            \n                              + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet\n          \n          \n            \n                              .getString(max_time(d0s4));\n          \n          \n            \n                      Assert.assertEquals(ans, retArray[cnt]);\n          \n          \n            \n                      cnt++;\n          \n          \n            \n                    }\n          \n          \n            \n                    Assert.assertEquals(2, cnt);\n          \n          \n            \n                  }", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500084533", "createdAt": "2020-10-06T08:09:26Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "diffHunk": "@@ -370,27 +451,70 @@ private void minMaxTimeAggreWithSingleFilterTest() throws ClassNotFoundException\n         resultSet.close();\n       }\n \n-      retArray = new String[]{\n-          \"0,3999,3999,3999,3599,100\"\n-      };\n       hasResultSet = statement.execute(\"select max_time(s0),max_time(s1),max_time(s2),\"\n           + \"max_time(s3),max_time(s4) from root.vehicle.d0 \" +\n           \"where s1 < 50000 and s1 != 100\");\n       Assert.assertTrue(hasResultSet);\n       resultSet = statement.getResultSet();\n+      try {\n+        while (resultSet.next()) {\n+          String ans =\n+              resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n+                  + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet\n+                  .getString(max_time(d0s2))\n+                  + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet\n+                  .getString(max_time(d0s4));\n+          Assert.assertEquals(ans, retArray[cnt]);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      } finally {\n+        resultSet.close();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE5MzkwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowOTo1N1rOHc6wbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowOTo1N1rOHc6wbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDg0Nw==", "bodyText": "Same as above", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500084847", "createdAt": "2020-10-06T08:09:57Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "diffHunk": "@@ -370,27 +451,70 @@ private void minMaxTimeAggreWithSingleFilterTest() throws ClassNotFoundException\n         resultSet.close();\n       }\n \n-      retArray = new String[]{\n-          \"0,3999,3999,3999,3599,100\"\n-      };\n       hasResultSet = statement.execute(\"select max_time(s0),max_time(s1),max_time(s2),\"\n           + \"max_time(s3),max_time(s4) from root.vehicle.d0 \" +\n           \"where s1 < 50000 and s1 != 100\");\n       Assert.assertTrue(hasResultSet);\n       resultSet = statement.getResultSet();\n+      try {\n+        while (resultSet.next()) {\n+          String ans =\n+              resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n+                  + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet\n+                  .getString(max_time(d0s2))\n+                  + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet\n+                  .getString(max_time(d0s4));\n+          Assert.assertEquals(ans, retArray[cnt]);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      } finally {\n+        resultSet.close();\n+      }\n+\n+      // keep the correctness of `order by time desc`\n+      hasResultSet = statement.execute(\n+          \"select min_time(s0),min_time(s1),min_time(s2),min_time(s3),min_time(s4)\" +\n+              \" from root.vehicle.d0 where s1 >= 0 order by time desc\");\n+      Assert.assertTrue(hasResultSet);\n+      resultSet = statement.getResultSet();\n       cnt = 0;\n       try {\n         while (resultSet.next()) {\n-          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n-                  + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet.getString(max_time(d0s2))\n-                  + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet.getString(max_time(d0s4));\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(d0s0)) + \",\" +\n+              resultSet.getString(min_time(d0s1)) + \",\" +\n+              resultSet.getString(min_time(d0s2)) +\n+              \",\" + resultSet.getString(min_time(d0s3)) +\n+              \",\" + resultSet.getString(min_time(d0s4));\n           Assert.assertEquals(ans, retArray[cnt]);\n           cnt++;\n         }\n         Assert.assertEquals(1, cnt);\n       } finally {\n         resultSet.close();\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE5NTI0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxMDoxOVrOHc6xVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxMDoxOVrOHc6xVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NTA3OQ==", "bodyText": "Same...", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500085079", "createdAt": "2020-10-06T08:10:19Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "diffHunk": "@@ -370,27 +451,70 @@ private void minMaxTimeAggreWithSingleFilterTest() throws ClassNotFoundException\n         resultSet.close();\n       }\n \n-      retArray = new String[]{\n-          \"0,3999,3999,3999,3599,100\"\n-      };\n       hasResultSet = statement.execute(\"select max_time(s0),max_time(s1),max_time(s2),\"\n           + \"max_time(s3),max_time(s4) from root.vehicle.d0 \" +\n           \"where s1 < 50000 and s1 != 100\");\n       Assert.assertTrue(hasResultSet);\n       resultSet = statement.getResultSet();\n+      try {\n+        while (resultSet.next()) {\n+          String ans =\n+              resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n+                  + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet\n+                  .getString(max_time(d0s2))\n+                  + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet\n+                  .getString(max_time(d0s4));\n+          Assert.assertEquals(ans, retArray[cnt]);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      } finally {\n+        resultSet.close();\n+      }\n+\n+      // keep the correctness of `order by time desc`\n+      hasResultSet = statement.execute(\n+          \"select min_time(s0),min_time(s1),min_time(s2),min_time(s3),min_time(s4)\" +\n+              \" from root.vehicle.d0 where s1 >= 0 order by time desc\");\n+      Assert.assertTrue(hasResultSet);\n+      resultSet = statement.getResultSet();\n       cnt = 0;\n       try {\n         while (resultSet.next()) {\n-          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n-                  + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet.getString(max_time(d0s2))\n-                  + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet.getString(max_time(d0s4));\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(d0s0)) + \",\" +\n+              resultSet.getString(min_time(d0s1)) + \",\" +\n+              resultSet.getString(min_time(d0s2)) +\n+              \",\" + resultSet.getString(min_time(d0s3)) +\n+              \",\" + resultSet.getString(min_time(d0s4));\n           Assert.assertEquals(ans, retArray[cnt]);\n           cnt++;\n         }\n         Assert.assertEquals(1, cnt);\n       } finally {\n         resultSet.close();\n       }\n+\n+      hasResultSet = statement.execute(\"select max_time(s0),max_time(s1),max_time(s2),\"\n+          + \"max_time(s3),max_time(s4) from root.vehicle.d0 \" +\n+          \"where s1 < 50000 and s1 != 100 order by time desc\");\n+      Assert.assertTrue(hasResultSet);\n+      resultSet = statement.getResultSet();\n+      try {\n+        while (resultSet.next()) {\n+          String ans =\n+              resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(max_time(d0s0))\n+                  + \",\" + resultSet.getString(max_time(d0s1)) + \",\" + resultSet\n+                  .getString(max_time(d0s2))\n+                  + \",\" + resultSet.getString(max_time(d0s3)) + \",\" + resultSet\n+                  .getString(max_time(d0s4));\n+          Assert.assertEquals(ans, retArray[cnt]);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      } finally {\n+        resultSet.close();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE5NjQ1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxMDozN1rOHc6yDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxMDozN1rOHc6yDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NTI2MA==", "bodyText": "Same...\nThere are a lot of try finally, better to fix them together.", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500085260", "createdAt": "2020-10-06T08:10:37Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBAggregationLargeDataIT.java", "diffHunk": "@@ -416,12 +540,35 @@ private void minValueAggreWithSingleFilterTest() throws ClassNotFoundException,\n         try {\n           while (resultSet.next()) {\n             String ans =\n-                    resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(min_value(d0s0))\n-                            + \",\" + resultSet.getString(min_value(d0s1)) + \",\" + resultSet\n-                            .getString(min_value(d0s2))\n-                            + \",\" + resultSet.getString(min_value(d0s3)) + \",\" + resultSet\n-                            .getString(min_value(d0s4));\n-            //System.out.println(\"============ \" + ans);\n+                resultSet.getString(TIMESTAMP_STR) + \",\" + resultSet.getString(min_value(d0s0))\n+                    + \",\" + resultSet.getString(min_value(d0s1)) + \",\" + resultSet\n+                    .getString(min_value(d0s2))\n+                    + \",\" + resultSet.getString(min_value(d0s3)) + \",\" + resultSet\n+                    .getString(min_value(d0s4));\n+            Assert.assertEquals(ans, retArray[cnt]);\n+            cnt++;\n+          }\n+          Assert.assertEquals(1, cnt);\n+        } finally {\n+          resultSet.close();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTIxNzk0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjoxN1rOHc6_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo0MjoxNVrOHdvNPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4ODY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE,true);\n          \n          \n            \n                    .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE, true);", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500088682", "createdAt": "2020-10-06T08:16:17Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n   @Test\n   public void avgAggrResultTest() throws QueryProcessException, IOException {\n     AggregateResult avgAggrResult1 = AggregateResultFactory\n-        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE);\n+        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE,true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0NDE4OQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500944189", "createdAt": "2020-10-07T11:42:15Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n   @Test\n   public void avgAggrResultTest() throws QueryProcessException, IOException {\n     AggregateResult avgAggrResult1 = AggregateResultFactory\n-        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE);\n+        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE,true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4ODY4Mg=="}, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTIxODkwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjozMlrOHc7ACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjozMlrOHc7ACw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4ODg0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE,true);\n          \n          \n            \n                    .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE, true);", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500088843", "createdAt": "2020-10-06T08:16:32Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n   @Test\n   public void avgAggrResultTest() throws QueryProcessException, IOException {\n     AggregateResult avgAggrResult1 = AggregateResultFactory\n-        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE);\n+        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE,true);\n     AggregateResult avgAggrResult2 = AggregateResultFactory\n-        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE);\n+        .getAggrResultByName(SQLConstant.AVG, TSDataType.DOUBLE,true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTIxOTcyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjo0NVrOHc7AjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjo0NVrOHc7AjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4ODk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE,true);\n          \n          \n            \n                    .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE, true);", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500088972", "createdAt": "2020-10-06T08:16:45Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "diffHunk": "@@ -62,9 +62,9 @@ public void avgAggrResultTest() throws QueryProcessException, IOException {\n   @Test\n   public void maxValueAggrResultTest() throws QueryProcessException, IOException {\n     AggregateResult maxValueAggrResult1 = AggregateResultFactory\n-        .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE);\n+        .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE,true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTIyMDU2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjo1NFrOHc7A-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjo1NFrOHc7A-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4OTA4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE,true);\n          \n          \n            \n                    .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE, true);", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500089082", "createdAt": "2020-10-06T08:16:54Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/query/aggregation/AggregateResultTest.java", "diffHunk": "@@ -62,9 +62,9 @@ public void avgAggrResultTest() throws QueryProcessException, IOException {\n   @Test\n   public void maxValueAggrResultTest() throws QueryProcessException, IOException {\n     AggregateResult maxValueAggrResult1 = AggregateResultFactory\n-        .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE);\n+        .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE,true);\n     AggregateResult maxValueAggrResult2 = AggregateResultFactory\n-        .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE);\n+        .getAggrResultByName(SQLConstant.MAX_VALUE, TSDataType.DOUBLE,true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTI1NjAzOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/GroupByFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoyNToyMlrOHc7Wbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMTozOTo0N1rOHeLGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5NDU3NQ==", "bodyText": "Change to < here?", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500094575", "createdAt": "2020-10-06T08:25:22Z", "author": {"login": "HTHou"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/GroupByFilter.java", "diffHunk": "@@ -65,7 +65,7 @@ public boolean satisfyStartEndTime(long startTime, long endTime) {\n       return false;\n     else if (startTime <= this.startTime)\n       return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0OTM3Mw==", "bodyText": "I think it's <= here. @JackieTien97", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r500949373", "createdAt": "2020-10-07T11:51:44Z", "author": {"login": "Alima777"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/GroupByFilter.java", "diffHunk": "@@ -65,7 +65,7 @@ public boolean satisfyStartEndTime(long startTime, long endTime) {\n       return false;\n     else if (startTime <= this.startTime)\n       return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5NDU3NQ=="}, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwMTI2Mw==", "bodyText": "Yes, you're right.", "url": "https://github.com/apache/iotdb/pull/1751#discussion_r501401263", "createdAt": "2020-10-08T01:39:47Z", "author": {"login": "HTHou"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/GroupByFilter.java", "diffHunk": "@@ -65,7 +65,7 @@ public boolean satisfyStartEndTime(long startTime, long endTime) {\n       return false;\n     else if (startTime <= this.startTime)\n       return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5NDU3NQ=="}, "originalCommit": {"oid": "5b7c939db938d237e7e3263af2b2ba95de158c7d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 743, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}