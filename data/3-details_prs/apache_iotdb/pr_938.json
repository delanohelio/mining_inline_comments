{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDI3NTg5", "number": 938, "title": "add system design eng", "bodyText": "", "createdAt": "2020-03-23T14:41:02Z", "url": "https://github.com/apache/iotdb/pull/938", "merged": true, "mergeCommit": {"oid": "658f1c098f9f40fbda66850c130480a9c003fb83"}, "closed": true, "closedAt": "2020-03-25T02:52:35Z", "author": {"login": "SailVR"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQbv-3gH2gAyMzkyNDI3NTg5OjAwYWNhOGUwNGExMDMyZDJmMjg2MzIzMTFmNWEzYzRjZjAzYmNjNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ-GaFgFqTM4MDgyMTkxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00aca8e04a1032d2f28632311f5a3c4cf03bcc76", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/00aca8e04a1032d2f28632311f5a3c4cf03bcc76", "committedDate": "2020-03-23T10:28:43Z", "message": "modify eng system design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "803be5ac36bcdb28b736a11bf8d985f1dcff3467", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/803be5ac36bcdb28b736a11bf8d985f1dcff3467", "committedDate": "2020-03-23T14:17:17Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/5-GroupByQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5929c3efade9152e2ed0ccdfa898cf9fe8dbac25", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/5929c3efade9152e2ed0ccdfa898cf9fe8dbac25", "committedDate": "2020-03-23T14:17:33Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/4-AggregationQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69e793ec8743938da6fca9a44a1c95355276db18", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/69e793ec8743938da6fca9a44a1c95355276db18", "committedDate": "2020-03-23T14:17:43Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/4-AggregationQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6713c371b6442b09eb79ab33dd327ca3205c9ee", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/f6713c371b6442b09eb79ab33dd327ca3205c9ee", "committedDate": "2020-03-23T14:17:50Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/5-GroupByQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb0805a5ecedea2048f005cc787c8c7a62ec0a3", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/8fb0805a5ecedea2048f005cc787c8c7a62ec0a3", "committedDate": "2020-03-23T14:17:58Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/5-GroupByQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2bcb5f34057e1751ebef657c1f8186ff12f740", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/aa2bcb5f34057e1751ebef657c1f8186ff12f740", "committedDate": "2020-03-23T14:18:12Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/5-GroupByQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def9e68d92c2a91586d8d5cc11dd7eae0bc8f428", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/def9e68d92c2a91586d8d5cc11dd7eae0bc8f428", "committedDate": "2020-03-23T14:18:20Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/5-GroupByQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d186f04a91d42bf103d8af0301f16a89a5134e4d", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/d186f04a91d42bf103d8af0301f16a89a5134e4d", "committedDate": "2020-03-23T14:18:30Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/5-GroupByQuery.md\n\nCo-Authored-By: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef", "author": {"user": {"login": "SailVR", "name": "Sail"}}, "url": "https://github.com/apache/iotdb/commit/8f436e65b361ef688b6158110f7bd88c20c582ef", "committedDate": "2020-03-23T14:36:05Z", "message": "modify eng system design"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTM2MjY3", "url": "https://github.com/apache/iotdb/pull/938#pullrequestreview-379936267", "createdAt": "2020-03-24T01:11:06Z", "commit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDMwMzAw", "url": "https://github.com/apache/iotdb/pull/938#pullrequestreview-380030300", "createdAt": "2020-03-24T06:34:37Z", "commit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDI4MTEx", "url": "https://github.com/apache/iotdb/pull/938#pullrequestreview-380428111", "createdAt": "2020-03-24T15:32:00Z", "commit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMjowMFrOF618Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNjoyM1rOF62KKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NTQ5MQ==", "bodyText": "It is better to replace \"out-of-order\" with \"unsequential files\" or just \"unseq files\". It is like a idiom to use \"unsequential files\" to represent the unordered files in our related documents.", "url": "https://github.com/apache/iotdb/pull/938#discussion_r397245491", "createdAt": "2020-03-24T15:32:00Z", "author": {"login": "wshao08"}, "path": "docs/Documentation/SystemDesign/5-DataQuery/6-LastQuery.md", "diffHunk": "@@ -0,0 +1,122 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# Last query\n+\n+The main logic of Last query is in LastQueryExecutor\n+\n+* org.apache.iotdb.db.query.executor.LastQueryExecutor\n+\n+The Last query executes the `calculateLastPairForOneSeries` method for each specified time series.\n+\n+## Read MNode cache data\n+\n+We add a Last data cache to the MNode structure corresponding to the time series that needs to be queried.\n+\n+`calculateLastPairForOneSeries` method For the last query of a certain time series, first try to read the cached data in the MNode.\n+\n+```\n+try {\n+  node = MManager.getInstance().getDeviceNodeWithAutoCreateStorageGroup(seriesPath.toString());\n+} catch (MetadataException e) {\n+  throw new QueryProcessException(e);\n+}\n+if (((LeafMNode) node).getCachedLast() != null) {\n+  return ((LeafMNode) node).getCachedLast();\n+}\n+```\n+If it is found that the cache has not been written, execute the following standard query process to read the TsFile data.\n+\n+## Last standard query process\n+\n+Last standard query process needs to traverse all sequential files and out-of-order files to get query results, and finally write the query results back to the MNode cache.  In the algorithm, sequential files and out-of-order files are processed separately.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0OTA2Nw==", "bodyText": "Same here", "url": "https://github.com/apache/iotdb/pull/938#discussion_r397249067", "createdAt": "2020-03-24T15:36:23Z", "author": {"login": "wshao08"}, "path": "docs/Documentation/SystemDesign/5-DataQuery/6-LastQuery.md", "diffHunk": "@@ -0,0 +1,122 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# Last query\n+\n+The main logic of Last query is in LastQueryExecutor\n+\n+* org.apache.iotdb.db.query.executor.LastQueryExecutor\n+\n+The Last query executes the `calculateLastPairForOneSeries` method for each specified time series.\n+\n+## Read MNode cache data\n+\n+We add a Last data cache to the MNode structure corresponding to the time series that needs to be queried.\n+\n+`calculateLastPairForOneSeries` method For the last query of a certain time series, first try to read the cached data in the MNode.\n+\n+```\n+try {\n+  node = MManager.getInstance().getDeviceNodeWithAutoCreateStorageGroup(seriesPath.toString());\n+} catch (MetadataException e) {\n+  throw new QueryProcessException(e);\n+}\n+if (((LeafMNode) node).getCachedLast() != null) {\n+  return ((LeafMNode) node).getCachedLast();\n+}\n+```\n+If it is found that the cache has not been written, execute the following standard query process to read the TsFile data.\n+\n+## Last standard query process\n+\n+Last standard query process needs to traverse all sequential files and out-of-order files to get query results, and finally write the query results back to the MNode cache.  In the algorithm, sequential files and out-of-order files are processed separately.\n+- The sequential file is sorted by its writing time, so use the `loadChunkMetadataFromTsFileResource` method directly to get the last` ChunkMetadata`, and get the maximum timestamp and corresponding value through the statistical data of `ChunkMetadata`.\n+    ```\n+    if (!seqFileResources.isEmpty()) {\n+      List<ChunkMetaData> chunkMetadata =\n+          FileLoaderUtils.loadChunkMetadataFromTsFileResource(\n+              seqFileResources.get(seqFileResources.size() - 1), seriesPath, context);\n+      if (!chunkMetadata.isEmpty()) {\n+        ChunkMetaData lastChunkMetaData = chunkMetadata.get(chunkMetadata.size() - 1);\n+        Statistics chunkStatistics = lastChunkMetaData.getStatistics();\n+        resultPair =\n+            constructLastPair(\n+                chunkStatistics.getEndTime(), chunkStatistics.getLastValue(), tsDataType);\n+      }\n+    }\n+    ```\n+- Out of order files need to traverse all `ChunkMetadata` structures to get the maximum timestamp data.  It should be noted that when multiple `ChunkMetadata` have the same timestamp, we take the data in` ChunkMatadata` with the largest `version` value as the result of Last.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODE4OTUy", "url": "https://github.com/apache/iotdb/pull/938#pullrequestreview-380818952", "createdAt": "2020-03-25T02:19:06Z", "commit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxOTowN1rOF7J4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxOTowN1rOF7J4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MjEwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Last standard query process needs to traverse all sequential files and out-of-order files to get query results, and finally write the query results back to the MNode cache.  In the algorithm, sequential files and out-of-order files are processed separately.\n          \n          \n            \n            Last standard query process needs to traverse all sequential files and unsequential files to get query results, and finally write the query results back to the MNode cache.  In the algorithm, sequential files and unsequential files are processed separately.", "url": "https://github.com/apache/iotdb/pull/938#discussion_r397572109", "createdAt": "2020-03-25T02:19:07Z", "author": {"login": "qiaojialin"}, "path": "docs/Documentation/SystemDesign/5-DataQuery/6-LastQuery.md", "diffHunk": "@@ -0,0 +1,122 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# Last query\n+\n+The main logic of Last query is in LastQueryExecutor\n+\n+* org.apache.iotdb.db.query.executor.LastQueryExecutor\n+\n+The Last query executes the `calculateLastPairForOneSeries` method for each specified time series.\n+\n+## Read MNode cache data\n+\n+We add a Last data cache to the MNode structure corresponding to the time series that needs to be queried.\n+\n+`calculateLastPairForOneSeries` method For the last query of a certain time series, first try to read the cached data in the MNode.\n+\n+```\n+try {\n+  node = MManager.getInstance().getDeviceNodeWithAutoCreateStorageGroup(seriesPath.toString());\n+} catch (MetadataException e) {\n+  throw new QueryProcessException(e);\n+}\n+if (((LeafMNode) node).getCachedLast() != null) {\n+  return ((LeafMNode) node).getCachedLast();\n+}\n+```\n+If it is found that the cache has not been written, execute the following standard query process to read the TsFile data.\n+\n+## Last standard query process\n+\n+Last standard query process needs to traverse all sequential files and out-of-order files to get query results, and finally write the query results back to the MNode cache.  In the algorithm, sequential files and out-of-order files are processed separately.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f436e65b361ef688b6158110f7bd88c20c582ef"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "142c2e5ad5fc11a70ce0f98b12cb8a483fbcb312", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/142c2e5ad5fc11a70ce0f98b12cb8a483fbcb312", "committedDate": "2020-03-25T02:19:27Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/6-LastQuery.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODE5MjI2", "url": "https://github.com/apache/iotdb/pull/938#pullrequestreview-380819226", "createdAt": "2020-03-25T02:20:11Z", "commit": {"oid": "142c2e5ad5fc11a70ce0f98b12cb8a483fbcb312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoyMDoxMVrOF7J48w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoyMDoxMVrOF7J48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MjMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Out of order files need to traverse all `ChunkMetadata` structures to get the maximum timestamp data.  It should be noted that when multiple `ChunkMetadata` have the same timestamp, we take the data in` ChunkMatadata` with the largest `version` value as the result of Last.\n          \n          \n            \n            - Unsequential files need to traverse all `ChunkMetadata` structures to get the maximum timestamp data.  It should be noted that when multiple `ChunkMetadata` have the same timestamp, we take the data in` ChunkMatadata` with the largest `version` value as the result of Last.", "url": "https://github.com/apache/iotdb/pull/938#discussion_r397572339", "createdAt": "2020-03-25T02:20:11Z", "author": {"login": "qiaojialin"}, "path": "docs/Documentation/SystemDesign/5-DataQuery/6-LastQuery.md", "diffHunk": "@@ -0,0 +1,122 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# Last query\n+\n+The main logic of Last query is in LastQueryExecutor\n+\n+* org.apache.iotdb.db.query.executor.LastQueryExecutor\n+\n+The Last query executes the `calculateLastPairForOneSeries` method for each specified time series.\n+\n+## Read MNode cache data\n+\n+We add a Last data cache to the MNode structure corresponding to the time series that needs to be queried.\n+\n+`calculateLastPairForOneSeries` method For the last query of a certain time series, first try to read the cached data in the MNode.\n+\n+```\n+try {\n+  node = MManager.getInstance().getDeviceNodeWithAutoCreateStorageGroup(seriesPath.toString());\n+} catch (MetadataException e) {\n+  throw new QueryProcessException(e);\n+}\n+if (((LeafMNode) node).getCachedLast() != null) {\n+  return ((LeafMNode) node).getCachedLast();\n+}\n+```\n+If it is found that the cache has not been written, execute the following standard query process to read the TsFile data.\n+\n+## Last standard query process\n+\n+Last standard query process needs to traverse all sequential files and unsequential files to get query results, and finally write the query results back to the MNode cache.  In the algorithm, sequential files and unsequential files are processed separately.\n+- The sequential file is sorted by its writing time, so use the `loadChunkMetadataFromTsFileResource` method directly to get the last` ChunkMetadata`, and get the maximum timestamp and corresponding value through the statistical data of `ChunkMetadata`.\n+    ```\n+    if (!seqFileResources.isEmpty()) {\n+      List<ChunkMetaData> chunkMetadata =\n+          FileLoaderUtils.loadChunkMetadataFromTsFileResource(\n+              seqFileResources.get(seqFileResources.size() - 1), seriesPath, context);\n+      if (!chunkMetadata.isEmpty()) {\n+        ChunkMetaData lastChunkMetaData = chunkMetadata.get(chunkMetadata.size() - 1);\n+        Statistics chunkStatistics = lastChunkMetaData.getStatistics();\n+        resultPair =\n+            constructLastPair(\n+                chunkStatistics.getEndTime(), chunkStatistics.getLastValue(), tsDataType);\n+      }\n+    }\n+    ```\n+- Out of order files need to traverse all `ChunkMetadata` structures to get the maximum timestamp data.  It should be noted that when multiple `ChunkMetadata` have the same timestamp, we take the data in` ChunkMatadata` with the largest `version` value as the result of Last.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142c2e5ad5fc11a70ce0f98b12cb8a483fbcb312"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c5cb69b3594542630c416cfaad1a20e3f267ae2", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/8c5cb69b3594542630c416cfaad1a20e3f267ae2", "committedDate": "2020-03-25T02:20:22Z", "message": "Update docs/Documentation/SystemDesign/5-DataQuery/6-LastQuery.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODIxOTE3", "url": "https://github.com/apache/iotdb/pull/938#pullrequestreview-380821917", "createdAt": "2020-03-25T02:29:59Z", "commit": {"oid": "8c5cb69b3594542630c416cfaad1a20e3f267ae2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3034, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}