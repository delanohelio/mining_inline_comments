{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjI0NDQ3", "number": 764, "title": "Clear the relation of SeriesReaders", "bodyText": "", "createdAt": "2020-02-04T03:11:10Z", "url": "https://github.com/apache/iotdb/pull/764", "merged": true, "mergeCommit": {"oid": "51ed987062f44f7c4496dc76762070be142709e2"}, "closed": true, "closedAt": "2020-02-04T05:42:32Z", "author": {"login": "liutaohua"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcA4s_7gH2gAyMzcwNjI0NDQ3OjMwNTk0Zjk5NTliNWFjMjI4Nzc0OThhYjRmYjY4YzIzMWI3OGQ0MWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcA64CXgFqTM1MjczNDY2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "30594f9959b5ac22877498ab4fb68c231b78d41d", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/30594f9959b5ac22877498ab4fb68c231b78d41d", "committedDate": "2020-02-04T03:09:55Z", "message": "add some readers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed", "committedDate": "2020-02-04T03:24:15Z", "message": "add asfHeader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzAyNTQ5", "url": "https://github.com/apache/iotdb/pull/764#pullrequestreview-352702549", "createdAt": "2020-02-04T03:16:42Z", "commit": {"oid": "30594f9959b5ac22877498ab4fb68c231b78d41d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoxNjo0MlrOFlG_Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzozMDoyN1rOFlHJGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NjA3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private List<ManagedSeriesReader> seriesReaderWithoutValueFilterList;\n          \n          \n            \n              private List<ManagedSeriesReader> seriesReaderList;", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374456074", "createdAt": "2020-02-04T03:16:42Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/RawQueryDataSetWithoutValueFilter.java", "diffHunk": "@@ -105,7 +103,7 @@ public void run() {\n     }\n   }\n \n-  private List<SeriesReader> seriesReaderWithoutValueFilterList;\n+  private List<ManagedSeriesReader> seriesReaderWithoutValueFilterList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30594f9959b5ac22877498ab4fb68c231b78d41d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODM2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RawDataReader implements IBatchReader, ManagedSeriesReader {\n          \n          \n            \n            public class RawDataBatchReader implements IBatchReader, ManagedSeriesReader {", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374458366", "createdAt": "2020-02-04T03:28:47Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/RawDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.reader.ManagedSeriesReader;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n+\n+\n+public class RawDataReader implements IBatchReader, ManagedSeriesReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODY0OQ==", "bodyText": "do not extend, consistent with others", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374458649", "createdAt": "2020-02-04T03:30:27Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/AggregateReader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+\n+\n+public class AggregateReader extends SeriesReader implements IAggregateReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f125323855c754299b613b981bf6b37256dc4b5f", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/f125323855c754299b613b981bf6b37256dc4b5f", "committedDate": "2020-02-04T04:03:56Z", "message": "rename"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE2NDQy", "url": "https://github.com/apache/iotdb/pull/764#pullrequestreview-352716442", "createdAt": "2020-02-04T04:19:53Z", "commit": {"oid": "f125323855c754299b613b981bf6b37256dc4b5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoxOTo1M1rOFlHsSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoxOTo1M1rOFlHsSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NzY1Nw==", "bodyText": "remove", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374467657", "createdAt": "2020-02-04T04:19:53Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/AggregateReader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+\n+\n+public class AggregateReader implements IAggregateReader {\n+\n+  private final SeriesReader seriesReader;\n+\n+  public AggregateReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, dataSource, timeFilter,\n+        valueFilter);\n+  }\n+\n+  @Override\n+  public boolean hasNextChunk() throws IOException {\n+    return seriesReader.hasNextChunk();\n+  }\n+\n+  /**\n+   * only be used for aggregate without value filter\n+   *\n+   * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f125323855c754299b613b981bf6b37256dc4b5f"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE2Njkw", "url": "https://github.com/apache/iotdb/pull/764#pullrequestreview-352716690", "createdAt": "2020-02-04T04:21:10Z", "commit": {"oid": "f125323855c754299b613b981bf6b37256dc4b5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMToxMFrOFlHtPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMToxMFrOFlHtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NzkwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean satisfyTimeFilter(Statistics statistics) {\n          \n          \n            \n              private boolean coveredByTimeFilter(Statistics statistics) {", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374467903", "createdAt": "2020-02-04T04:21:10Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/AggregateReader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+\n+\n+public class AggregateReader implements IAggregateReader {\n+\n+  private final SeriesReader seriesReader;\n+\n+  public AggregateReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, dataSource, timeFilter,\n+        valueFilter);\n+  }\n+\n+  @Override\n+  public boolean hasNextChunk() throws IOException {\n+    return seriesReader.hasNextChunk();\n+  }\n+\n+  /**\n+   * only be used for aggregate without value filter\n+   *\n+   * @return\n+   */\n+  @Override\n+  public boolean canUseCurrentChunkStatistics() {\n+    Statistics chunkStatistics = currentChunkStatistics();\n+    return !seriesReader.isChunkOverlapped() && satisfyTimeFilter(chunkStatistics);\n+  }\n+\n+  @Override\n+  public Statistics currentChunkStatistics() {\n+    return seriesReader.currentChunkStatistics();\n+  }\n+\n+  @Override\n+  public void skipCurrentChunk() throws IOException {\n+    seriesReader.skipCurrentChunk();\n+  }\n+\n+  @Override\n+  public boolean hasNextPage() throws IOException {\n+    return seriesReader.hasNextPage();\n+  }\n+\n+\n+  @Override\n+  public boolean canUseCurrentPageStatistics() throws IOException {\n+    Statistics currentPageStatistics = currentPageStatistics();\n+    return !seriesReader.isPageOverlapped() && satisfyTimeFilter(currentPageStatistics);\n+  }\n+\n+  @Override\n+  public Statistics currentPageStatistics() throws IOException {\n+    return seriesReader.currentPageStatistics();\n+  }\n+\n+  @Override\n+  public void skipCurrentPage() {\n+    seriesReader.skipCurrentPage();\n+  }\n+\n+  @Override\n+  public boolean hasNextOverlappedPage() throws IOException {\n+    return seriesReader.hasNextOverlappedPage();\n+  }\n+\n+  @Override\n+  public BatchData nextOverlappedPage() throws IOException {\n+    return seriesReader.nextOverlappedPage();\n+  }\n+\n+\n+  private boolean satisfyTimeFilter(Statistics statistics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f125323855c754299b613b981bf6b37256dc4b5f"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE3MDc2", "url": "https://github.com/apache/iotdb/pull/764#pullrequestreview-352717076", "createdAt": "2020-02-04T04:22:59Z", "commit": {"oid": "f125323855c754299b613b981bf6b37256dc4b5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMjo1OVrOFlHucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMjo1OVrOFlHucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2ODIxMQ==", "bodyText": "put this in the front", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374468211", "createdAt": "2020-02-04T04:22:59Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/RawDataBatchReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.reader.ManagedSeriesReader;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n+\n+\n+public class RawDataBatchReader implements IBatchReader, ManagedSeriesReader {\n+\n+  private final SeriesReader seriesReader;\n+  private boolean hasRemaining;\n+  private boolean managedByQueryManager;\n+\n+  public RawDataBatchReader(SeriesReader seriesReader) {\n+    this.seriesReader = seriesReader;\n+  }\n+\n+  public RawDataBatchReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, dataSource, timeFilter,\n+        valueFilter);\n+  }\n+\n+  @TestOnly\n+  public RawDataBatchReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      List<TsFileResource> seqFileResource, List<TsFileResource> unseqFileResource,\n+      Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, seqFileResource,\n+        unseqFileResource, timeFilter, valueFilter);\n+  }\n+\n+  private BatchData batchData;\n+  private boolean hasCachedBatchData = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f125323855c754299b613b981bf6b37256dc4b5f"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf793648104481d5d42b1c540f936cf79ac945a8", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/bf793648104481d5d42b1c540f936cf79ac945a8", "committedDate": "2020-02-04T04:31:29Z", "message": "modify method name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzM0NjYx", "url": "https://github.com/apache/iotdb/pull/764#pullrequestreview-352734661", "createdAt": "2020-02-04T05:41:47Z", "commit": {"oid": "bf793648104481d5d42b1c540f936cf79ac945a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3275, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}