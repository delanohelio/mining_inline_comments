{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5Mzc0MzM3", "number": 1499, "title": "[Distrubuted] Fix startup checkstatus and optimize some related logic", "bodyText": "", "createdAt": "2020-07-15T09:54:16Z", "url": "https://github.com/apache/iotdb/pull/1499", "merged": true, "mergeCommit": {"oid": "d0f1dcce96e86b26d3f0f9ee9b8b56b57458dd4b"}, "closed": true, "closedAt": "2020-07-20T03:34:35Z", "author": {"login": "LebronAl"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1KYUggFqTQ0ODkwOTA5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2pIGigH2gAyNDQ5Mzc0MzM3OjNhMDU3ZjhkMjRiOGM1YjNjMGM3NWEzNGU0YjBmNGE1NDZkZjBlMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTA5MDk5", "url": "https://github.com/apache/iotdb/pull/1499#pullrequestreview-448909099", "createdAt": "2020-07-15T12:36:18Z", "commit": {"oid": "36c7096901873c51df7dc2d584b7cef6dd052655"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjozNjoxOFrOGx8D3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1MDo0OVrOGx8lxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNzQzNw==", "bodyText": "can those code combine with the generateNode method in MetaGroupMember?", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455017437", "createdAt": "2020-07-15T12:36:18Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/ClusterMain.java", "diffHunk": "@@ -75,36 +79,70 @@ public static void main(String[] args) {\n     IoTDBDescriptor.getInstance().getConfig().setAutoCreateSchemaEnabled(false);\n     logger.info(\"Running mode {}\", mode);\n     try {\n-\n       if (MODE_START.equals(mode)) {\n         metaServer = new MetaClusterServer();\n-        ClusterConfig config = ClusterDescriptor.getInstance().getConfig();\n-        // check the initial cluster size and refuse to start when the size < quorum\n-        int quorum = config.getReplicationNum() / 2 + 1;\n-        if (config.getSeedNodeUrls().size() < quorum) {\n-          String message = String.format(\"Seed number less than quorum, seed number: %s, quorum: \"\n-                  + \"%s.\",\n-              config.getSeedNodeUrls().size(), quorum);\n-          throw new StartupException(metaServer.getMember().getName(), message);\n-        }\n+        startServerCheck();\n         metaServer.start();\n         metaServer.buildCluster();\n       } else if (MODE_ADD.equals(mode)) {\n         metaServer = new MetaClusterServer();\n         metaServer.start();\n         if (!metaServer.joinCluster()) {\n           metaServer.stop();\n+          logger.error(\"Fail to join cluster\");\n         }\n       } else if (MODE_REMOVE.equals(mode)) {\n         doRemoveNode(args);\n       } else {\n         logger.error(\"Unrecognized mode {}\", mode);\n       }\n-    } catch (IOException | TTransportException | StartupException | QueryProcessException e) {\n+    } catch (IOException | TTransportException | StartupException | QueryProcessException |\n+        StartUpCheckFailureException | ConfigInconsistentException e) {\n+      metaServer.stop();\n       logger.error(\"Fail to start meta server\", e);\n     }\n   }\n \n+  private static void startServerCheck() throws StartupException {\n+    ClusterConfig config = ClusterDescriptor.getInstance().getConfig();\n+    // check the initial replicateNum and refuse to start when the replicateNum <= 0\n+    if (config.getReplicationNum() <= 0) {\n+      String message = String.format(\"ReplicateNum should be greater than 0 instead of %d.\",\n+          config.getReplicationNum());\n+      throw new StartupException(metaServer.getMember().getName(), message);\n+    }\n+    // check the initial cluster size and refuse to start when the size < quorum\n+    int quorum = config.getReplicationNum() / 2 + 1;\n+    if (config.getSeedNodeUrls().size() < quorum) {\n+      String message = String.format(\"Seed number less than quorum, seed number: %s, quorum: \"\n+              + \"%s.\",\n+          config.getSeedNodeUrls().size(), quorum);\n+      throw new StartupException(metaServer.getMember().getName(), message);\n+    }\n+    Set<Node> seedNodes = new HashSet<>();\n+    for (String url : config.getSeedNodeUrls()) {\n+      String[] splits = url.split(\":\");\n+      Node node = new Node();\n+      node.setIp(splits[0]).setMetaPort(Integer.parseInt(splits[1]))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c7096901873c51df7dc2d584b7cef6dd052655"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDgyNQ==", "bodyText": "START_UP_TIME_THRESHOLD -> START_UP_TIME_THRESHOLD_SEC ? its better to specify timeunit at the end of the variable.", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455020825", "createdAt": "2020-07-15T12:42:18Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java", "diffHunk": "@@ -23,71 +23,59 @@\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.apache.iotdb.cluster.config.ClusterConstant;\n-import org.apache.iotdb.cluster.config.ClusterDescriptor;\n import org.apache.iotdb.cluster.exception.ConfigInconsistentException;\n-import org.apache.iotdb.cluster.exception.StartUpCheckFailureException;\n import org.apache.iotdb.cluster.rpc.thrift.CheckStatusResponse;\n import org.apache.iotdb.cluster.rpc.thrift.Node;\n import org.apache.iotdb.cluster.rpc.thrift.StartUpStatus;\n-import org.apache.iotdb.cluster.server.member.MetaGroupMember;\n-import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ClusterUtils {\n+\n   private static final Logger logger = LoggerFactory.getLogger(ClusterUtils.class);\n \n   public static final int STARTUP_CHECK_THREAD_POOL_SIZE = 6;\n \n   public static final int WAIT_START_UP_CHECK_TIME = 5;\n \n-  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.MINUTES;\n+  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.SECONDS;\n \n-  public static final long START_UP_TIME_THRESHOLD = 1; // minute\n+  public static final long START_UP_TIME_THRESHOLD = 60 ; // second", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c7096901873c51df7dc2d584b7cef6dd052655"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDk3MA==", "bodyText": "the same as above", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455020970", "createdAt": "2020-07-15T12:42:33Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java", "diffHunk": "@@ -23,71 +23,59 @@\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.apache.iotdb.cluster.config.ClusterConstant;\n-import org.apache.iotdb.cluster.config.ClusterDescriptor;\n import org.apache.iotdb.cluster.exception.ConfigInconsistentException;\n-import org.apache.iotdb.cluster.exception.StartUpCheckFailureException;\n import org.apache.iotdb.cluster.rpc.thrift.CheckStatusResponse;\n import org.apache.iotdb.cluster.rpc.thrift.Node;\n import org.apache.iotdb.cluster.rpc.thrift.StartUpStatus;\n-import org.apache.iotdb.cluster.server.member.MetaGroupMember;\n-import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ClusterUtils {\n+\n   private static final Logger logger = LoggerFactory.getLogger(ClusterUtils.class);\n \n   public static final int STARTUP_CHECK_THREAD_POOL_SIZE = 6;\n \n   public static final int WAIT_START_UP_CHECK_TIME = 5;\n \n-  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.MINUTES;\n+  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.SECONDS;\n \n-  public static final long START_UP_TIME_THRESHOLD = 1; // minute\n+  public static final long START_UP_TIME_THRESHOLD = 60 ; // second\n \n-  public static final long START_UP_CHECK_TIME_INTERVAL = 5; // second\n+  public static final long START_UP_CHECK_TIME_INTERVAL = 3; // second", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c7096901873c51df7dc2d584b7cef6dd052655"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNTk1Nw==", "bodyText": "its better not use magic values.", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455025957", "createdAt": "2020-07-15T12:50:34Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -830,35 +895,48 @@ private boolean checkNodeConfig(StartUpStatus remoteStartUpStatus, AddNodeRespon\n    * Check if the seed nodes are consistent with other nodes. Only used when establishing the\n    * initial cluster.\n    */\n-  private void checkSeedNodes() {\n+  private void checkSeedNodesStatus()\n+      throws ConfigInconsistentException, StartUpCheckFailureException {\n     boolean canEstablishCluster = false;\n     long startTime = System.currentTimeMillis();\n     AtomicInteger consistentNum = new AtomicInteger(1);\n     AtomicInteger inconsistentNum = new AtomicInteger(0);\n     while (!canEstablishCluster) {\n       consistentNum.set(1);\n       inconsistentNum.set(0);\n-      checkSeedNodesOnce(consistentNum, inconsistentNum);\n-\n+      checkSeedNodesStatusOnce(consistentNum, inconsistentNum);\n       canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n-          getAllNodes().size(), System.currentTimeMillis() - startTime);\n+          getAllNodes().size());\n+      // If reach the start up time threshold, shut down.\n+      // Otherwise, wait for a while, start the loop again.\n+      if (System.currentTimeMillis() - startTime\n+          > ClusterUtils.START_UP_TIME_THRESHOLD * 1000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c7096901873c51df7dc2d584b7cef6dd052655"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNjExNw==", "bodyText": "magic value", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455026117", "createdAt": "2020-07-15T12:50:49Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -830,35 +895,48 @@ private boolean checkNodeConfig(StartUpStatus remoteStartUpStatus, AddNodeRespon\n    * Check if the seed nodes are consistent with other nodes. Only used when establishing the\n    * initial cluster.\n    */\n-  private void checkSeedNodes() {\n+  private void checkSeedNodesStatus()\n+      throws ConfigInconsistentException, StartUpCheckFailureException {\n     boolean canEstablishCluster = false;\n     long startTime = System.currentTimeMillis();\n     AtomicInteger consistentNum = new AtomicInteger(1);\n     AtomicInteger inconsistentNum = new AtomicInteger(0);\n     while (!canEstablishCluster) {\n       consistentNum.set(1);\n       inconsistentNum.set(0);\n-      checkSeedNodesOnce(consistentNum, inconsistentNum);\n-\n+      checkSeedNodesStatusOnce(consistentNum, inconsistentNum);\n       canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n-          getAllNodes().size(), System.currentTimeMillis() - startTime);\n+          getAllNodes().size());\n+      // If reach the start up time threshold, shut down.\n+      // Otherwise, wait for a while, start the loop again.\n+      if (System.currentTimeMillis() - startTime\n+          > ClusterUtils.START_UP_TIME_THRESHOLD * 1000) {\n+        throw new StartUpCheckFailureException();\n+      } else {\n+        try {\n+          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c7096901873c51df7dc2d584b7cef6dd052655"}, "originalPosition": 228}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "590385b62f403bb3fc8154629fe8bf2c01c958a7", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/590385b62f403bb3fc8154629fe8bf2c01c958a7", "committedDate": "2020-07-15T14:29:15Z", "message": "fix review"}, "afterCommit": {"oid": "1b78b54e821a1de306ba0f871e20fea523f474aa", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/1b78b54e821a1de306ba0f871e20fea523f474aa", "committedDate": "2020-07-15T14:31:23Z", "message": "fix review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b78b54e821a1de306ba0f871e20fea523f474aa", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/1b78b54e821a1de306ba0f871e20fea523f474aa", "committedDate": "2020-07-15T14:31:23Z", "message": "fix review"}, "afterCommit": {"oid": "89379e395053bedff0a82577753ab5cde60e2f5e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/89379e395053bedff0a82577753ab5cde60e2f5e", "committedDate": "2020-07-15T14:34:24Z", "message": "fix review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NjQ5OTU3", "url": "https://github.com/apache/iotdb/pull/1499#pullrequestreview-449649957", "createdAt": "2020-07-16T08:53:27Z", "commit": {"oid": "442c22b7d0fe304499ae5c55a15516b3c852cfa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTMxMDg0", "url": "https://github.com/apache/iotdb/pull/1499#pullrequestreview-449931084", "createdAt": "2020-07-16T14:55:35Z", "commit": {"oid": "c9de2e1973c9c21bb29db62e61a4e287d8f28793"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1NTozNVrOGyu5ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1NTozNVrOGyu5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MDQyNg==", "bodyText": "Will there be some problems if there are lots of nodes?", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455850426", "createdAt": "2020-07-16T14:55:35Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -898,35 +899,47 @@ private boolean checkNodeConfig(StartUpStatus remoteStartUpStatus, AddNodeRespon\n    * Check if the seed nodes are consistent with other nodes. Only used when establishing the\n    * initial cluster.\n    */\n-  private void checkSeedNodes() {\n+  private void checkSeedNodesStatus()\n+      throws ConfigInconsistentException, StartUpCheckFailureException {\n     boolean canEstablishCluster = false;\n     long startTime = System.currentTimeMillis();\n     AtomicInteger consistentNum = new AtomicInteger(1);\n     AtomicInteger inconsistentNum = new AtomicInteger(0);\n     while (!canEstablishCluster) {\n       consistentNum.set(1);\n       inconsistentNum.set(0);\n-      checkSeedNodesOnce(consistentNum, inconsistentNum);\n-\n+      checkSeedNodesStatusOnce(consistentNum, inconsistentNum);\n       canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n-          getAllNodes().size(), System.currentTimeMillis() - startTime);\n+          getAllNodes().size());\n+      // If reach the start up time threshold, shut down.\n+      // Otherwise, wait for a while, start the loop again.\n+      if (System.currentTimeMillis() - startTime > ClusterUtils.START_UP_TIME_THRESHOLD_MS) {\n+        throw new StartUpCheckFailureException();\n+      } else {\n+        try {\n+          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL_MS);\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          logger.error(\"Unexpected interruption when waiting for next start up check\", e);\n+        }\n+      }\n     }\n   }\n \n-  private void checkSeedNodesOnce(AtomicInteger consistentNum, AtomicInteger inconsistentNum) {\n-    ExecutorService pool = new ScheduledThreadPoolExecutor(STARTUP_CHECK_THREAD_POOL_SIZE);\n+  private void checkSeedNodesStatusOnce(AtomicInteger consistentNum,\n+      AtomicInteger inconsistentNum) {\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(getAllNodes().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9de2e1973c9c21bb29db62e61a4e287d8f28793"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab2bd5dd7eaec0ec0a2276874c79f5d51be7f4d", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/fab2bd5dd7eaec0ec0a2276874c79f5d51be7f4d", "committedDate": "2020-07-17T08:24:33Z", "message": "fix checkstatus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb5af5c0a2b9e6540819ae049a020e63d6ade165", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/eb5af5c0a2b9e6540819ae049a020e63d6ade165", "committedDate": "2020-07-17T08:24:33Z", "message": "stop when encounter exception && add some check && adjust some time field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1756a4100fe476c5080be7dbbdf33a677db6164", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/b1756a4100fe476c5080be7dbbdf33a677db6164", "committedDate": "2020-07-17T08:24:33Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "committedDate": "2020-07-17T08:24:33Z", "message": "decrease threadPoolExecutor corePoolsize && fix addNode thread Init"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0968f000948c5c4bbb203019111ab0bf3adf637f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/0968f000948c5c4bbb203019111ab0bf3adf637f", "committedDate": "2020-07-16T15:44:23Z", "message": "decrease threadPoolExecutor corePoolsize && fix addNode thread Init"}, "afterCommit": {"oid": "ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "committedDate": "2020-07-17T08:24:33Z", "message": "decrease threadPoolExecutor corePoolsize && fix addNode thread Init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a057f8d24b8c5b3c0c75a34e4b0f4a546df0e27", "author": {"user": {"login": "jt2594838", "name": "Jiang Tian"}}, "url": "https://github.com/apache/iotdb/commit/3a057f8d24b8c5b3c0c75a34e4b0f4a546df0e27", "committedDate": "2020-07-20T03:32:57Z", "message": "Merge branch 'cluster_new' into cluster_new"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3489, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}