{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTQ2ODMx", "number": 975, "title": "Refactoring raft log module", "bodyText": "Testing and waiting reviewing~", "createdAt": "2020-04-02T12:28:12Z", "url": "https://github.com/apache/iotdb/pull/975", "merged": true, "mergeCommit": {"oid": "792cb6a16e4bbdf5fdd08ecbeb731252d5843f1b"}, "closed": true, "closedAt": "2020-04-23T02:00:09Z", "author": {"login": "LebronAl"}, "timelineItems": {"totalCount": 68, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTre-wABqjMxOTE5NzA4NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaTDRagH2gAyMzk3NTQ2ODMxOjQwZjVhOWQxOWMwYjg5YTYzNzViYjk2Y2M2ZWUyY2E4NWIxNWE4ZTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c08167575e31d3c34a74c369ea94f41ae77ccde8", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/c08167575e31d3c34a74c369ea94f41ae77ccde8", "committedDate": "2020-04-02T12:27:10Z", "message": "add applyingSnapshot & adjust logger level & update JavaDoc"}, "afterCommit": {"oid": "f4d38afc8c868224c46a40f3cb73ee17e90cc3f4", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/f4d38afc8c868224c46a40f3cb73ee17e90cc3f4", "committedDate": "2020-04-02T12:30:15Z", "message": "add applyingSnapshot & adjust logger level & update JavaDoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfafe6fd8dd6a0e98fa533dcbe2fd718817f2ca8", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/cfafe6fd8dd6a0e98fa533dcbe2fd718817f2ca8", "committedDate": "2020-04-03T02:03:50Z", "message": "add maybeCommit for leader"}, "afterCommit": {"oid": "4977debad6fa9390d1610d9ebf5b7831d6b06496", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/4977debad6fa9390d1610d9ebf5b7831d6b06496", "committedDate": "2020-04-03T09:21:41Z", "message": "add maybeCommit for leader"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4977debad6fa9390d1610d9ebf5b7831d6b06496", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/4977debad6fa9390d1610d9ebf5b7831d6b06496", "committedDate": "2020-04-03T09:21:41Z", "message": "add maybeCommit for leader"}, "afterCommit": {"oid": "2a506b74edbff00bc878f5a959348b19eb227d48", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/2a506b74edbff00bc878f5a959348b19eb227d48", "committedDate": "2020-04-06T09:49:22Z", "message": "rename snapshot lastLogId to lastLogIndex"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd840e298bca11e1f5f9747a7695e8ddf08fc446", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/cd840e298bca11e1f5f9747a7695e8ddf08fc446", "committedDate": "2020-04-06T10:07:15Z", "message": "Use native snapshot"}, "afterCommit": {"oid": "3508760b387ed18913904c7ea5ab8323372adec8", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/3508760b387ed18913904c7ea5ab8323372adec8", "committedDate": "2020-04-06T10:10:08Z", "message": "Use native snapshot && update license"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3508760b387ed18913904c7ea5ab8323372adec8", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/3508760b387ed18913904c7ea5ab8323372adec8", "committedDate": "2020-04-06T10:10:08Z", "message": "Use native snapshot && update license"}, "afterCommit": {"oid": "c21f8268b132fbfed7a826e9797585ed24def997", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/c21f8268b132fbfed7a826e9797585ed24def997", "committedDate": "2020-04-07T00:49:18Z", "message": "Use native snapshot && update license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDE1NjU4", "url": "https://github.com/apache/iotdb/pull/975#pullrequestreview-389015658", "createdAt": "2020-04-07T11:13:46Z", "commit": {"oid": "c21f8268b132fbfed7a826e9797585ed24def997"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMToxMzo0NlrOGB-qeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMToxMzo0NlrOGB-qeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcyODQ0MA==", "bodyText": "If the caller change the subList, our manager will be impacted. You can use a new arrayList to return or add some comment at the method", "url": "https://github.com/apache/iotdb/pull/975#discussion_r404728440", "createdAt": "2020-04-07T11:13:46Z", "author": {"login": "SilverNarcissus"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/UnCommittedEntryManager.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.log;\n+\n+import org.apache.iotdb.cluster.exception.EntryUnavailableException;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class UnCommittedEntryManager {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UnCommittedEntryManager.class);\n+    // all entries that have not been committed.\n+    private List<Log> entries;\n+    // the first uncommitted entry index.\n+    private long offset;\n+\n+    public UnCommittedEntryManager(long offset) {\n+        this.offset = offset;\n+        this.entries = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Return the first uncommitted index.\n+     *\n+     * @return offset\n+     */\n+    public long getFirstUnCommittedIndex() {\n+        return offset;\n+    }\n+\n+\n+    /**\n+     * Return last entry's index if this instance has at least one uncommitted entry.\n+     *\n+     * @return -1 if entries are empty, or last entry's index\n+     */\n+    public long maybeLastIndex() {\n+        int entryNum = entries.size();\n+        if (entryNum != 0) {\n+            return offset + entryNum - 1;\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Return the entry's term for given index.\n+     * Note that the called should ensure index >= offset.\n+     *\n+     * @param index request entry index\n+     * @return -1 if index < offset, throw EntryUnavailableException if\n+     * index > last or entries is empty, or return the entry's term for given index\n+     * @throws EntryUnavailableException\n+     */\n+    public long maybeTerm(long index) throws EntryUnavailableException {\n+        if (index < offset) {\n+            logger.debug(\"invalid unCommittedEntryManager maybeTerm : parameter: index({}) < offset({})\", index, offset);\n+            return -1;\n+        }\n+        long last = maybeLastIndex();\n+        if (last == -1 || index > last) {\n+            long boundary = last == -1 ? offset - 1 : last;\n+            logger.info(\"unCommittedEntryManager maybeTerm out of bound : parameter: index({}) > lastIndex({})\", index, boundary);\n+            throw new EntryUnavailableException(index, boundary);\n+        }\n+        return entries.get((int) (index - offset)).getCurrLogTerm();\n+    }\n+\n+    /**\n+     * Remove useless prefix entries as long as these entries has been committed and persisted.\n+     * This method is only called after persisting newly committed entries.\n+     *\n+     * @param index request entry's index\n+     * @param term  request entry's term\n+     */\n+    public void stableTo(long index, long term) {\n+        try {\n+            long entryTerm = maybeTerm(index);\n+            // only update the uncommitted entries if term is matched with an uncommitted entry.\n+            if (entryTerm == term) {\n+                entries.subList(0, (int) (index + 1 - offset)).clear();\n+                offset = index + 1;\n+            }\n+        } catch (EntryUnavailableException e) {\n+            logger.info(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Update offset and clear entries because leader's snapshot is more up-to-date.\n+     * This method is only called for applying snapshot from leader.\n+     *\n+     * @param snapshot leader's snapshot\n+     */\n+    public void applyingSnapshot(Snapshot snapshot) {\n+        this.offset = snapshot.getLastLogIndex() + 1;\n+        this.entries.clear();\n+    }\n+\n+    /**\n+     * TruncateAndAppend uncommitted entries.\n+     * This method will truncate conflict entries if it finds inconsistencies.\n+     * Note that the caller should ensure appendingEntries[0].index <= entries[entries.size()-1].index + 1.\n+     * Note that the caller should ensure not to truncate entries which have been committed.\n+     *\n+     * @param appendingEntries request entries\n+     */\n+    public void truncateAndAppend(List<Log> appendingEntries) {\n+        long after = appendingEntries.get(0).getCurrLogIndex();\n+        long len = after - offset;\n+        if (len < 0) {\n+            // the logs are being truncated to before our current offset portion, which is committed entries\n+            // unconditional obedience to the leader's request. Maybe throw a exception here is better\n+            offset = after;\n+            entries = appendingEntries;\n+            logger.error(\"The logs which first index is {} are going to truncate committed logs\", after);\n+        } else if (len == entries.size()) {\n+            // after is the next index in the entries\n+            // directly append\n+            entries.addAll(appendingEntries);\n+        } else {\n+            // clear conflict entries\n+            // then append\n+            logger.info(\"truncate the entries after index {}\", after);\n+            int truncateIndex = (int) (after - offset);\n+            if (truncateIndex < entries.size()) {\n+                entries.subList(truncateIndex, entries.size()).clear();\n+            }\n+            entries.addAll(appendingEntries);\n+        }\n+    }\n+\n+    /**\n+     * Pack entries from low through high - 1, just like slice (entries[low:high]).\n+     * offset <= low <= high.\n+     * Note that caller must ensure low <= high.\n+     *\n+     * @param low  request index low bound\n+     * @param high request index upper bound\n+     */\n+    public List<Log> getEntries(long low, long high) {\n+        if (low > high) {\n+            logger.debug(\"invalid unCommittedEntryManager getEntries: parameter: low({}) > high({})\", low, high);\n+        }\n+        long upper = offset + entries.size();\n+        if (low > upper) {\n+            // don't throw a exception to support\n+            // getEntries(low, Integer.MAX_VALUE) if low is larger than lastIndex.\n+            logger.info(\"unCommittedEntryManager getEntries[{},{}) out of bound : [{},{}] , return empty ArrayList\", low, high, offset, upper);\n+            return new ArrayList<>();\n+        }\n+        if (low < offset) {\n+            logger.debug(\"unCommittedEntryManager getEntries[{},{}) out of bound : [{},{}]\", low, high, offset, upper);\n+            low = offset;\n+        }\n+        if (high > upper) {\n+            logger.info(\"unCommittedEntryManager getEntries[{},{}) out of bound : [{},{}] , adjust parameter 'high' to {}\", low, high, offset, upper, upper);\n+            // don't throw a exception to support getEntries(low, Integer.MAX_VALUE).\n+            high = upper;\n+        }\n+        return entries.subList((int) (low - offset), (int) (high - offset));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21f8268b132fbfed7a826e9797585ed24def997"}, "originalPosition": 181}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c21f8268b132fbfed7a826e9797585ed24def997", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/c21f8268b132fbfed7a826e9797585ed24def997", "committedDate": "2020-04-07T00:49:18Z", "message": "Use native snapshot && update license"}, "afterCommit": {"oid": "5c83ab8bbbe9c56dd511791d4ed35e886532365a", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/5c83ab8bbbe9c56dd511791d4ed35e886532365a", "committedDate": "2020-04-08T12:24:33Z", "message": "Use native snapshot && update license"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c83ab8bbbe9c56dd511791d4ed35e886532365a", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/5c83ab8bbbe9c56dd511791d4ed35e886532365a", "committedDate": "2020-04-08T12:24:33Z", "message": "Use native snapshot && update license"}, "afterCommit": {"oid": "0f0aeb92ae336153bfb3033722e06976655e71b0", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/0f0aeb92ae336153bfb3033722e06976655e71b0", "committedDate": "2020-04-09T07:16:02Z", "message": "Use native snapshot && update license"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f0aeb92ae336153bfb3033722e06976655e71b0", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/0f0aeb92ae336153bfb3033722e06976655e71b0", "committedDate": "2020-04-09T07:16:02Z", "message": "Use native snapshot && update license"}, "afterCommit": {"oid": "d7c5782d330cd59f732c7a671bcf08dce65f3738", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/d7c5782d330cd59f732c7a671bcf08dce65f3738", "committedDate": "2020-04-11T03:38:02Z", "message": "Use native snapshot && update license"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a8420a9e87a868c70eadd1e74c3c40274876ace", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/2a8420a9e87a868c70eadd1e74c3c40274876ace", "committedDate": "2020-04-11T13:22:06Z", "message": "rename some method to old version && add some placeholder method"}, "afterCommit": {"oid": "bd6a71bbaa392deab30fabac5fa9d1b10655609d", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/bd6a71bbaa392deab30fabac5fa9d1b10655609d", "committedDate": "2020-04-13T02:11:44Z", "message": "rename some method to old version && add some placeholder method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a487bb315fecca027d0b95b2c782b48aa2d351b", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/8a487bb315fecca027d0b95b2c782b48aa2d351b", "committedDate": "2020-04-13T02:43:35Z", "message": "initial embedded"}, "afterCommit": {"oid": "684029618ca7979ee398025c213676b56ab6dbb9", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/684029618ca7979ee398025c213676b56ab6dbb9", "committedDate": "2020-04-13T11:36:20Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "684029618ca7979ee398025c213676b56ab6dbb9", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/684029618ca7979ee398025c213676b56ab6dbb9", "committedDate": "2020-04-13T11:36:20Z", "message": "initial embedded"}, "afterCommit": {"oid": "872858780e15a7fcdb4638e004ddf500849659d7", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/872858780e15a7fcdb4638e004ddf500849659d7", "committedDate": "2020-04-13T11:57:52Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "872858780e15a7fcdb4638e004ddf500849659d7", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/872858780e15a7fcdb4638e004ddf500849659d7", "committedDate": "2020-04-13T11:57:52Z", "message": "initial embedded"}, "afterCommit": {"oid": "49f879bc156ef82e41273fa6e755010b89556bcc", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/49f879bc156ef82e41273fa6e755010b89556bcc", "committedDate": "2020-04-13T12:00:04Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49f879bc156ef82e41273fa6e755010b89556bcc", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/49f879bc156ef82e41273fa6e755010b89556bcc", "committedDate": "2020-04-13T12:00:04Z", "message": "initial embedded"}, "afterCommit": {"oid": "1ad9dbcc87bbe9c7d1c9aa3576e9921a7352cd36", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/1ad9dbcc87bbe9c7d1c9aa3576e9921a7352cd36", "committedDate": "2020-04-13T15:04:45Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ad9dbcc87bbe9c7d1c9aa3576e9921a7352cd36", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/1ad9dbcc87bbe9c7d1c9aa3576e9921a7352cd36", "committedDate": "2020-04-13T15:04:45Z", "message": "initial embedded"}, "afterCommit": {"oid": "b59238839beef9a450ac54639730429e4129ca1e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/b59238839beef9a450ac54639730429e4129ca1e", "committedDate": "2020-04-14T12:33:58Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b59238839beef9a450ac54639730429e4129ca1e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/b59238839beef9a450ac54639730429e4129ca1e", "committedDate": "2020-04-14T12:33:58Z", "message": "initial embedded"}, "afterCommit": {"oid": "ba017a22e472c547f783cd96aaecda2fd81522c1", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ba017a22e472c547f783cd96aaecda2fd81522c1", "committedDate": "2020-04-14T13:04:09Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba017a22e472c547f783cd96aaecda2fd81522c1", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ba017a22e472c547f783cd96aaecda2fd81522c1", "committedDate": "2020-04-14T13:04:09Z", "message": "initial embedded"}, "afterCommit": {"oid": "3aa1ec60602248764fea067eefae3574cd4e967a", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/3aa1ec60602248764fea067eefae3574cd4e967a", "committedDate": "2020-04-14T13:05:36Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3aa1ec60602248764fea067eefae3574cd4e967a", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/3aa1ec60602248764fea067eefae3574cd4e967a", "committedDate": "2020-04-14T13:05:36Z", "message": "initial embedded"}, "afterCommit": {"oid": "fc4f24057a08a9ed0d5efcabd32799b4fcd60535", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/fc4f24057a08a9ed0d5efcabd32799b4fcd60535", "committedDate": "2020-04-14T14:56:22Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc4f24057a08a9ed0d5efcabd32799b4fcd60535", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/fc4f24057a08a9ed0d5efcabd32799b4fcd60535", "committedDate": "2020-04-14T14:56:22Z", "message": "initial embedded"}, "afterCommit": {"oid": "2f7abf9961c20ad389a111497b190f24653db9c7", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/2f7abf9961c20ad389a111497b190f24653db9c7", "committedDate": "2020-04-14T14:56:53Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f7abf9961c20ad389a111497b190f24653db9c7", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/2f7abf9961c20ad389a111497b190f24653db9c7", "committedDate": "2020-04-14T14:56:53Z", "message": "initial embedded"}, "afterCommit": {"oid": "8d9e0ace1b3f539f2f6c3a880ddfdf9613e600d2", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/8d9e0ace1b3f539f2f6c3a880ddfdf9613e600d2", "committedDate": "2020-04-14T15:05:09Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d9e0ace1b3f539f2f6c3a880ddfdf9613e600d2", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/8d9e0ace1b3f539f2f6c3a880ddfdf9613e600d2", "committedDate": "2020-04-14T15:05:09Z", "message": "initial embedded"}, "afterCommit": {"oid": "e546b36aa132daeebb7db231dfecd386bff4f86e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/e546b36aa132daeebb7db231dfecd386bff4f86e", "committedDate": "2020-04-15T10:35:15Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e546b36aa132daeebb7db231dfecd386bff4f86e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/e546b36aa132daeebb7db231dfecd386bff4f86e", "committedDate": "2020-04-15T10:35:15Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "ded3d983022679d8ca50e784e80f92b360f6e515", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ded3d983022679d8ca50e784e80f92b360f6e515", "committedDate": "2020-04-15T14:40:13Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ded3d983022679d8ca50e784e80f92b360f6e515", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ded3d983022679d8ca50e784e80f92b360f6e515", "committedDate": "2020-04-15T14:40:13Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "5c56fada1e515bba70a35615707edfaa4d8b7bc1", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/5c56fada1e515bba70a35615707edfaa4d8b7bc1", "committedDate": "2020-04-15T15:26:11Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c56fada1e515bba70a35615707edfaa4d8b7bc1", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/5c56fada1e515bba70a35615707edfaa4d8b7bc1", "committedDate": "2020-04-15T15:26:11Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "0b5014a91a57d7bc6e1a99a1e67429e25fd47638", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/0b5014a91a57d7bc6e1a99a1e67429e25fd47638", "committedDate": "2020-04-16T02:49:07Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b5014a91a57d7bc6e1a99a1e67429e25fd47638", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/0b5014a91a57d7bc6e1a99a1e67429e25fd47638", "committedDate": "2020-04-16T02:49:07Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "6c6ebaa45ddb423b644d0ec0fd89afc95e454892", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/6c6ebaa45ddb423b644d0ec0fd89afc95e454892", "committedDate": "2020-04-16T02:50:05Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c6ebaa45ddb423b644d0ec0fd89afc95e454892", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/6c6ebaa45ddb423b644d0ec0fd89afc95e454892", "committedDate": "2020-04-16T02:50:05Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "ea40183f241b21ee94ef63345a6c29b4f59c2e4f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ea40183f241b21ee94ef63345a6c29b4f59c2e4f", "committedDate": "2020-04-16T03:13:41Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea40183f241b21ee94ef63345a6c29b4f59c2e4f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/ea40183f241b21ee94ef63345a6c29b4f59c2e4f", "committedDate": "2020-04-16T03:13:41Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "74c40df791811a0637a0e3ac69f4fe8197940492", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/74c40df791811a0637a0e3ac69f4fe8197940492", "committedDate": "2020-04-16T03:24:09Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74c40df791811a0637a0e3ac69f4fe8197940492", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/74c40df791811a0637a0e3ac69f4fe8197940492", "committedDate": "2020-04-16T03:24:09Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "b32da62ba8ceca97fac188edfab1e40e2629fa9e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/b32da62ba8ceca97fac188edfab1e40e2629fa9e", "committedDate": "2020-04-16T04:07:10Z", "message": "add EmptyContentLog && add persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c00f033b1a91bb70fe50459e5addd6f578af65f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/4c00f033b1a91bb70fe50459e5addd6f578af65f", "committedDate": "2020-04-16T04:17:50Z", "message": "raftLogManager init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b586785111694821ee5a370f4662c46d10870cc", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/5b586785111694821ee5a370f4662c46d10870cc", "committedDate": "2020-04-16T04:17:50Z", "message": "fix Log Module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9f80c22a18a554f656407eeffba5feafa71e0b9", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/e9f80c22a18a554f656407eeffba5feafa71e0b9", "committedDate": "2020-04-16T04:17:50Z", "message": "fix bugs & add exception & sublist.clear()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b949fcfb385b3c02213a8f9830b93d766d5bf553", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/b949fcfb385b3c02213a8f9830b93d766d5bf553", "committedDate": "2020-04-16T04:17:50Z", "message": "add unCommitEntryManager Junit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed5fc882aaa0964401fdf2acfd409890e9133c6", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/6ed5fc882aaa0964401fdf2acfd409890e9133c6", "committedDate": "2020-04-16T04:17:50Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0735e6099c071f37bdd3fec86e38376cd3e706d2", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/0735e6099c071f37bdd3fec86e38376cd3e706d2", "committedDate": "2020-04-16T04:17:50Z", "message": "add CommittedEntryManager test and fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f03fa00c1bdabb1851af9b77b27767e5f4f20c5", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/6f03fa00c1bdabb1851af9b77b27767e5f4f20c5", "committedDate": "2020-04-16T04:17:50Z", "message": "add license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bcd05fb5bfd540cd0d00214d520139a37d4f69c", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/3bcd05fb5bfd540cd0d00214d520139a37d4f69c", "committedDate": "2020-04-16T04:17:50Z", "message": "add commitEntryManager JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b2acc41db102a44f45cdd86ef85a1b5850d738", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/85b2acc41db102a44f45cdd86ef85a1b5850d738", "committedDate": "2020-04-16T04:17:50Z", "message": "remove internal unused exceptions & update logger format & fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f6b81fa2f42c13e8bdb336a4195cba3aadfbcd", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/55f6b81fa2f42c13e8bdb336a4195cba3aadfbcd", "committedDate": "2020-04-16T04:17:50Z", "message": "add raftlogmanager junit test & fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af76a5722f452f34e0e71452bf7c88c357d068a", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/9af76a5722f452f34e0e71452bf7c88c357d068a", "committedDate": "2020-04-16T04:17:50Z", "message": "add RaftLoaManager JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1b62f88601fac1b69aa66af4cf6688b70cdc96", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/5f1b62f88601fac1b69aa66af4cf6688b70cdc96", "committedDate": "2020-04-16T04:17:50Z", "message": "add applyingSnapshot & adjust logger level & update JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c647e448a8be3b2743aef62af302fa58e26935", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/60c647e448a8be3b2743aef62af302fa58e26935", "committedDate": "2020-04-16T04:17:50Z", "message": "add maybeCommit for leader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a932ee973db187c5f8ea67f164aa4603265492", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/e1a932ee973db187c5f8ea67f164aa4603265492", "committedDate": "2020-04-16T04:17:50Z", "message": "rename snapshot lastLogId to lastLogIndex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb2a4e91783dbee51537e82ee0e5c9e3d519b483", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/fb2a4e91783dbee51537e82ee0e5c9e3d519b483", "committedDate": "2020-04-16T04:17:50Z", "message": "Use native snapshot && update license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4269925f6e6632f89fdec34fe2b96b694a426465", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/4269925f6e6632f89fdec34fe2b96b694a426465", "committedDate": "2020-04-16T04:17:50Z", "message": "add applier for raftLogManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08739025f50308a86421c736dc24a33b1210b854", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/08739025f50308a86421c736dc24a33b1210b854", "committedDate": "2020-04-16T04:17:50Z", "message": "rename some method to old version && add some placeholder method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7843e579ab05bec77b081e0ca4144bf6ea25c9bf", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/7843e579ab05bec77b081e0ca4144bf6ea25c9bf", "committedDate": "2020-04-16T04:24:25Z", "message": "initial embedded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b32da62ba8ceca97fac188edfab1e40e2629fa9e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/b32da62ba8ceca97fac188edfab1e40e2629fa9e", "committedDate": "2020-04-16T04:07:10Z", "message": "add EmptyContentLog && add persistence"}, "afterCommit": {"oid": "d825142d171683a39e870c6005e17236a512277e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/d825142d171683a39e870c6005e17236a512277e", "committedDate": "2020-04-16T05:28:41Z", "message": "add EmptyContentLog && add persistence && fix format && resolve conflict"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d825142d171683a39e870c6005e17236a512277e", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/d825142d171683a39e870c6005e17236a512277e", "committedDate": "2020-04-16T05:28:41Z", "message": "add EmptyContentLog && add persistence && fix format && resolve conflict"}, "afterCommit": {"oid": "cba6ef2f0dfb71759ff3134bd0a54623943b66af", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/cba6ef2f0dfb71759ff3134bd0a54623943b66af", "committedDate": "2020-04-16T16:12:41Z", "message": "add EmptyContentLog && add persistence && fix format && resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7246eda04adf068e26eca4a3ae2adcfb40d032a", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/a7246eda04adf068e26eca4a3ae2adcfb40d032a", "committedDate": "2020-04-17T07:18:26Z", "message": "add EmptyContentLog && add persistence && fix format && resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48f65255bb3d96fca94da33edc93ebaa5b9da141", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/48f65255bb3d96fca94da33edc93ebaa5b9da141", "committedDate": "2020-04-17T07:24:38Z", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "272edbc60bd8a411ea6e7f42d75123ec1af49ddf", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/272edbc60bd8a411ea6e7f42d75123ec1af49ddf", "committedDate": "2020-04-17T02:42:14Z", "message": "add term persistence"}, "afterCommit": {"oid": "abb5001f569e22b6445304226941a6ba6075175f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/abb5001f569e22b6445304226941a6ba6075175f", "committedDate": "2020-04-17T07:51:21Z", "message": "minor fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abb5001f569e22b6445304226941a6ba6075175f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/abb5001f569e22b6445304226941a6ba6075175f", "committedDate": "2020-04-17T07:51:21Z", "message": "minor fix"}, "afterCommit": {"oid": "1692a55a9a4e2d5bbc52fff4b9f27858ef4cbd8f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/1692a55a9a4e2d5bbc52fff4b9f27858ef4cbd8f", "committedDate": "2020-04-17T09:00:22Z", "message": "minor fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1692a55a9a4e2d5bbc52fff4b9f27858ef4cbd8f", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/1692a55a9a4e2d5bbc52fff4b9f27858ef4cbd8f", "committedDate": "2020-04-17T09:00:22Z", "message": "minor fix"}, "afterCommit": {"oid": "c1199b83d471516941c1b5e42cca912f862e0bb2", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/c1199b83d471516941c1b5e42cca912f862e0bb2", "committedDate": "2020-04-17T09:03:02Z", "message": "minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7da4f49032b2506a2a7048e2164ea88f8c957b0d", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/7da4f49032b2506a2a7048e2164ea88f8c957b0d", "committedDate": "2020-04-17T09:09:31Z", "message": "minor fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1199b83d471516941c1b5e42cca912f862e0bb2", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/c1199b83d471516941c1b5e42cca912f862e0bb2", "committedDate": "2020-04-17T09:03:02Z", "message": "minor fix"}, "afterCommit": {"oid": "7da4f49032b2506a2a7048e2164ea88f8c957b0d", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/7da4f49032b2506a2a7048e2164ea88f8c957b0d", "committedDate": "2020-04-17T09:09:31Z", "message": "minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/e838ca4587541ccc284aac59f87ec2632774233c", "committedDate": "2020-04-20T05:30:54Z", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f9ee08b0600ac9481255e22a9d1be22b6121571", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/7f9ee08b0600ac9481255e22a9d1be22b6121571", "committedDate": "2020-04-20T04:21:57Z", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log"}, "afterCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/e838ca4587541ccc284aac59f87ec2632774233c", "committedDate": "2020-04-20T05:30:54Z", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjM5MDky", "url": "https://github.com/apache/iotdb/pull/975#pullrequestreview-396239092", "createdAt": "2020-04-20T08:23:19Z", "commit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoyMzoyMFrOGII4EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo0NzowN1rOGIJ1xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NzIxNg==", "bodyText": "I wonder if the checks are necessary, as you comment \"This method is only called after persisting newly committed entries\".", "url": "https://github.com/apache/iotdb/pull/975#discussion_r411187216", "createdAt": "2020-04-20T08:23:20Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.log.manage;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.iotdb.cluster.exception.EntryUnavailableException;\n+import org.apache.iotdb.cluster.log.Log;\n+import org.apache.iotdb.cluster.log.Snapshot;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnCommittedEntryManager {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UnCommittedEntryManager.class);\n+    // all entries that have not been committed.\n+    private List<Log> entries;\n+    // the first uncommitted entry index.\n+    private long offset;\n+\n+    public UnCommittedEntryManager(long offset) {\n+        this.offset = offset;\n+        this.entries = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Return the first uncommitted index.\n+     *\n+     * @return offset\n+     */\n+    public long getFirstUnCommittedIndex() {\n+        return offset;\n+    }\n+\n+\n+    /**\n+     * Return last entry's index if this instance has at least one uncommitted entry.\n+     *\n+     * @return -1 if entries are empty, or last entry's index\n+     */\n+    public long maybeLastIndex() {\n+        int entryNum = entries.size();\n+        if (entryNum != 0) {\n+            return offset + entryNum - 1;\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Return the entry's term for given index. Note that the called should ensure index >= offset.\n+     *\n+     * @param index request entry index\n+     * @return -1 if index < offset, throw EntryUnavailableException if index > last or entries is\n+     * empty, or return the entry's term for given index\n+     * @throws EntryUnavailableException\n+     */\n+    public long maybeTerm(long index) throws EntryUnavailableException {\n+        if (index < offset) {\n+            logger.debug(\n+                \"invalid unCommittedEntryManager maybeTerm : parameter: index({}) < offset({})\",\n+                index, offset);\n+            return -1;\n+        }\n+        long last = maybeLastIndex();\n+        if (last == -1 || index > last) {\n+            long boundary = last == -1 ? offset - 1 : last;\n+            logger.info(\n+                \"unCommittedEntryManager maybeTerm out of bound : parameter: index({}) > lastIndex({})\",\n+                index, boundary);\n+            throw new EntryUnavailableException(index, boundary);\n+        }\n+        return entries.get((int) (index - offset)).getCurrLogTerm();\n+    }\n+\n+    /**\n+     * Remove useless prefix entries as long as these entries has been committed and persisted. This\n+     * method is only called after persisting newly committed entries.\n+     *\n+     * @param index request entry's index\n+     * @param term  request entry's term\n+     */\n+    public void stableTo(long index, long term) {\n+        try {\n+            long entryTerm = maybeTerm(index);\n+            // only update the uncommitted entries if term is matched with an uncommitted entry.\n+            if (entryTerm == term) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4OTg2NQ==", "bodyText": "It would be better to give also a single-log-append interface, as in the normal procedure, logs mainly go to followers one-by-one and it is costly to wrap them as singleton lists.", "url": "https://github.com/apache/iotdb/pull/975#discussion_r411189865", "createdAt": "2020-04-20T08:27:16Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/RaftLogManager.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.log.manage;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.iotdb.cluster.exception.EntryCompactedException;\n+import org.apache.iotdb.cluster.exception.EntryUnavailableException;\n+import org.apache.iotdb.cluster.exception.GetEntriesWrongParametersException;\n+import org.apache.iotdb.cluster.log.Log;\n+import org.apache.iotdb.cluster.log.LogApplier;\n+import org.apache.iotdb.cluster.log.Snapshot;\n+import org.apache.iotdb.db.exception.metadata.PathAlreadyExistException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class RaftLogManager {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RaftLogManager.class);\n+\n+    // manage uncommitted entries\n+    public UnCommittedEntryManager unCommittedEntryManager;\n+    // manage committed entries in memory as a cache\n+    public CommittedEntryManager committedEntryManager;\n+    // manage committed entries in disk for safety\n+    public StableEntryManager stableEntryManager;\n+\n+    private long commitIndex;\n+    private LogApplier logApplier;\n+\n+    public RaftLogManager(CommittedEntryManager committedEntryManager,\n+        StableEntryManager stableEntryManager, LogApplier applier) {\n+        this.logApplier = applier;\n+        this.committedEntryManager = committedEntryManager;\n+        this.stableEntryManager = stableEntryManager;\n+        this.committedEntryManager.append(stableEntryManager.getAllEntries());\n+        long last = committedEntryManager.getLastIndex();\n+        this.unCommittedEntryManager = new UnCommittedEntryManager(last + 1);\n+        // must have applied entry [compactIndex,last] to state machine\n+        this.commitIndex = last;\n+    }\n+\n+    // placeholder method\n+    public Snapshot getSnapshot() {\n+        return null;\n+    }\n+\n+    // placeholder method\n+    public void takeSnapshot() throws IOException {\n+\n+    }\n+\n+    public LogApplier getApplier() {\n+        return logApplier;\n+    }\n+\n+    /**\n+     * Return the raftNode's commitIndex.\n+     *\n+     * @return commitIndex\n+     */\n+    public long getCommitLogIndex() {\n+        return commitIndex;\n+    }\n+\n+    /**\n+     * Set the raftNode's commitIndex.\n+     *\n+     * @param commitIndex request commitIndex\n+     */\n+    public void setCommitLogIndex(long commitIndex) {\n+        this.commitIndex = commitIndex;\n+    }\n+\n+    /**\n+     * Return the first entry's index which have not been compacted.\n+     *\n+     * @return firstIndex\n+     */\n+    public long getFirstIndex() {\n+        return committedEntryManager.getFirstIndex();\n+    }\n+\n+    /**\n+     * Return the last entry's index which have been added into log module.\n+     *\n+     * @return lastIndex\n+     */\n+    public long getLastLogIndex() {\n+        long last = unCommittedEntryManager.maybeLastIndex();\n+        if (last != -1) {\n+            return last;\n+        }\n+        return committedEntryManager.getLastIndex();\n+    }\n+\n+    /**\n+     * Returns the term for given index.\n+     *\n+     * @param index request entry index\n+     * @return throw EntryCompactedException if index < dummyIndex, throw EntryUnavailableException if\n+     * index > lastIndex, otherwise return the entry's term for given index\n+     * @throws EntryUnavailableException\n+     * @throws EntryCompactedException\n+     */\n+    public long getTerm(long index) throws EntryUnavailableException, EntryCompactedException {\n+        long dummyIndex = getFirstIndex() - 1;\n+        if (index < dummyIndex) {\n+            logger.info(\"invalid getTerm: parameter: index({}) < compactIndex({})\", index,\n+                dummyIndex);\n+            throw new EntryCompactedException(index, dummyIndex);\n+        }\n+        long lastIndex = getLastLogIndex();\n+        if (index > lastIndex) {\n+            logger.info(\"invalid getTerm: parameter: index({}) > lastIndex({})\", index, lastIndex);\n+            throw new EntryUnavailableException(index, lastIndex);\n+        }\n+        if (index >= unCommittedEntryManager.getFirstUnCommittedIndex()) {\n+            return unCommittedEntryManager.maybeTerm(index);\n+        }\n+        return committedEntryManager.maybeTerm(index);\n+    }\n+\n+    /**\n+     * Return the last entry's term. If it goes wrong, there must be an unexpected exception.\n+     *\n+     * @return last entry's term\n+     */\n+    public long getLastLogTerm() {\n+        long term = -1;\n+        try {\n+            term = getTerm(getLastLogIndex());\n+        } catch (Exception e) {\n+            logger.error(\"unexpected error when getting the last term : {}\", e.getMessage());\n+        }\n+        return term;\n+    }\n+\n+    /**\n+     * Return the commitIndex's term. If it goes wrong, there must be an unexpected exception.\n+     *\n+     * @return commitIndex's term\n+     */\n+    public long getCommitLogTerm() {\n+        long term = -1;\n+        try {\n+            term = getTerm(getCommitLogIndex());\n+        } catch (Exception e) {\n+            logger.error(\"unexpected error when getting the last term : {}\", e.getMessage());\n+        }\n+        return term;\n+    }\n+\n+    /**\n+     * Used by follower node to support leader's complicated log replication rpc parameters and try to\n+     * commit entries.\n+     *\n+     * @param lastIndex    leader's matchIndex for this follower node\n+     * @param lastTerm     the entry's term which index is leader's matchIndex for this follower node\n+     * @param leaderCommit leader's commitIndex\n+     * @param entries      entries sent from the leader node Note that the leader must ensure\n+     *                     entries[0].index = lastIndex + 1\n+     * @return -1 if the entries cannot be appended, otherwise the last index of new entries\n+     */\n+    public long maybeAppend(long lastIndex, long lastTerm, long leaderCommit, List<Log> entries) {\n+        if (matchTerm(lastTerm, lastIndex)) {\n+            long newLastIndex = lastIndex + entries.size();\n+            long ci = findConflict(entries);\n+            if (ci == 0 || ci <= commitIndex) {\n+                logger\n+                    .error(\"entry {} conflict with committed entry [commitIndex({})]\", ci,\n+                        commitIndex);\n+            } else {\n+                long offset = lastIndex + 1;\n+                append(entries.subList((int) (ci - offset), entries.size()));\n+            }\n+            commitTo(Math.min(leaderCommit, newLastIndex));\n+            return newLastIndex;\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Used by leader node or MaybeAppend to directly append to unCommittedEntryManager. Note that the\n+     * caller should ensure entries[0].index > committed.\n+     *\n+     * @param entries appendingEntries\n+     * @return the newly generated lastIndex\n+     */\n+    public long append(List<Log> entries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NzU2NQ==", "bodyText": "It would be better to eliminate this overhead with a new interface.", "url": "https://github.com/apache/iotdb/pull/975#discussion_r411197565", "createdAt": "2020-04-20T08:38:43Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/DataGroupMember.java", "diffHunk": "@@ -918,7 +916,9 @@ public boolean closePartition(String storageGroupName, long partitionId, boolean\n       log.setPreviousLogTerm(logManager.getLastLogTerm());\n       log.setCurrLogIndex(logManager.getLastLogIndex() + 1);\n \n-      logManager.appendLog(log);\n+      logManager.append(new ArrayList<Log>() {{\n+        add(log);\n+      }});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMDA4Nw==", "bodyText": "The new ArrayList() seems unused.\nEven if !allLogsValid holds, the logs after the snapshot point should still be attained.\nPlease log e instead of e.getMessage() for the sake of debugging.", "url": "https://github.com/apache/iotdb/pull/975#discussion_r411200087", "createdAt": "2020-04-20T08:42:40Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -671,17 +672,22 @@ public void catchUp(Node follower, long followerLastLogIndex) {\n \n     AsyncClient client = connectNode(follower);\n     if (client != null) {\n-      List<Log> logs;\n+      List<Log> logs = new ArrayList<>();\n       boolean allLogsValid;\n       Snapshot snapshot = null;\n       synchronized (logManager) {\n         // check if the very first log has been snapshot\n         allLogsValid = logManager.logValid(followerLastLogIndex);\n-        logs = logManager.getLogs(followerLastLogIndex, Long.MAX_VALUE);\n         if (!allLogsValid) {\n           // if the first log has been snapshot, the snapshot should also be sent to the\n           // follower, otherwise some data will be missing\n           snapshot = logManager.getSnapshot();\n+        }else{\n+          try {\n+            logs = logManager.getEntries(followerLastLogIndex, Long.MAX_VALUE);\n+          }catch (Exception e){\n+              logger.error(\"Unexpected error: {}\" ,e.getMessage());\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMzAxNQ==", "bodyText": "The indents seem too long in the tests, please check the code style.", "url": "https://github.com/apache/iotdb/pull/975#discussion_r411203015", "createdAt": "2020-04-20T08:47:07Z", "author": {"login": "jt2594838"}, "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java", "diffHunk": "@@ -0,0 +1,787 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.log.manage;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.iotdb.cluster.common.TestLogApplier;\n+import org.apache.iotdb.cluster.common.TestUtils;\n+import org.apache.iotdb.cluster.exception.EntryCompactedException;\n+import org.apache.iotdb.cluster.exception.EntryUnavailableException;\n+import org.apache.iotdb.cluster.exception.GetEntriesWrongParametersException;\n+import org.apache.iotdb.cluster.log.Log;\n+import org.apache.iotdb.cluster.log.LogApplier;\n+import org.apache.iotdb.cluster.log.logtypes.EmptyContentLog;\n+import org.apache.iotdb.cluster.log.snapshot.SimpleSnapshot;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class RaftLogManagerTest {\n+\n+\tprivate Set<Log> appliedLogs;\n+\tprivate LogApplier logApplier = new TestLogApplier() {\n+\t\t@Override\n+\t\tpublic void apply(Log log) {\n+\t\t\tappliedLogs.add(log);\n+\t\t}\n+\t};\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDIxMjY2", "url": "https://github.com/apache/iotdb/pull/975#pullrequestreview-396421266", "createdAt": "2020-04-20T12:49:52Z", "commit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo0OTo1MlrOGIS0QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1NDo0OVrOGITBEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MDA4MQ==", "bodyText": "May be you should just return here or throw an IllegalArugumentException", "url": "https://github.com/apache/iotdb/pull/975#discussion_r411350081", "createdAt": "2020-04-20T12:49:52Z", "author": {"login": "SilverNarcissus"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/CommittedEntryManager.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.log.manage;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.iotdb.cluster.exception.EntryCompactedException;\n+import org.apache.iotdb.cluster.exception.EntryUnavailableException;\n+import org.apache.iotdb.cluster.log.Log;\n+import org.apache.iotdb.cluster.log.Snapshot;\n+import org.apache.iotdb.cluster.log.logtypes.EmptyContentLog;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CommittedEntryManager {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CommittedEntryManager.class);\n+\n+    // memory cache for logs which have been persisted in disk.\n+    private List<Log> entries;\n+\n+    /**\n+     * Note that it is better to use applyingSnapshot to update dummy entry immediately after this\n+     * instance is created.\n+     */\n+    public CommittedEntryManager() {\n+        entries = new ArrayList<Log>() {{\n+            add(new EmptyContentLog(-1, -1));\n+        }};\n+    }\n+\n+    /**\n+     * Overwrite the contents of this object with those of the given snapshot. Note that this function\n+     * is only used if you want to override all the contents, otherwise please use\n+     * compactEntries(snapshot.lastIndex()).\n+     *\n+     * @param snapshot snapshot\n+     */\n+    public void applyingSnapshot(Snapshot snapshot) {\n+        long localIndex = getDummyIndex();\n+        long snapIndex = snapshot.getLastLogIndex();\n+        if (localIndex >= snapIndex) {\n+            logger.info(\"requested snapshot is older than the existing snapshot\");\n+            return;\n+        }\n+        entries.clear();\n+        entries.add(new EmptyContentLog(snapshot.getLastLogIndex(), snapshot.getLastLogTerm()));\n+    }\n+\n+    /**\n+     * Return the last entry's index which have been compacted.\n+     *\n+     * @return dummyIndex\n+     */\n+    public Long getDummyIndex() {\n+        return entries.get(0).getCurrLogIndex();\n+    }\n+\n+    /**\n+     * Return the first entry's index which have not been compacted.\n+     *\n+     * @return firstIndex\n+     */\n+    public Long getFirstIndex() {\n+        return getDummyIndex() + 1;\n+    }\n+\n+    /**\n+     * Return the last entry's index which have been committed and persisted.\n+     *\n+     * @return getLastIndex\n+     */\n+    public Long getLastIndex() {\n+        return getDummyIndex() + entries.size() - 1;\n+    }\n+\n+    /**\n+     * Return the entry's term for given index. Note that the called should ensure index <=\n+     * entries[entries.size()-1].index.\n+     *\n+     * @param index request entry index\n+     * @return -1 if index > entries[entries.size()-1].index, throw EntryCompactedException if index <\n+     * dummyIndex, or return the entry's term for given index\n+     * @throws EntryCompactedException\n+     */\n+    public long maybeTerm(long index) throws EntryCompactedException {\n+        long dummyIndex = getDummyIndex();\n+        if (index < dummyIndex) {\n+            logger.info(\n+                \"invalid committedEntryManager maybeTerm: parameter: index({}) < compactIndex({})\",\n+                index, dummyIndex);\n+            throw new EntryCompactedException(index, dummyIndex);\n+        }\n+        if ((int) (index - dummyIndex) >= entries.size()) {\n+            logger.debug(\n+                \"invalid committedEntryManager maybeTerm : parameter: index({}) > lastIndex({})\",\n+                index, getLastIndex());\n+            return -1;\n+        }\n+        return entries.get((int) (index - dummyIndex)).getCurrLogTerm();\n+    }\n+\n+    /**\n+     * Pack entries from low through high - 1, just like slice (entries[low:high]). dummyIndex < low\n+     * <= high. Note that caller must ensure low <= high.\n+     *\n+     * @param low  request index low bound\n+     * @param high request index upper bound\n+     * @throws EntryCompactedException\n+     */\n+    public List<Log> getEntries(long low, long high) throws EntryCompactedException {\n+        if (low > high) {\n+            logger.debug(\"invalid getEntries: parameter: {} > {}\", low, high);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MzM2MQ==", "bodyText": "May be you should just return here or throw an IllegalArugumentException", "url": "https://github.com/apache/iotdb/pull/975#discussion_r411353361", "createdAt": "2020-04-20T12:54:49Z", "author": {"login": "SilverNarcissus"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.log.manage;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.iotdb.cluster.exception.EntryUnavailableException;\n+import org.apache.iotdb.cluster.log.Log;\n+import org.apache.iotdb.cluster.log.Snapshot;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnCommittedEntryManager {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UnCommittedEntryManager.class);\n+    // all entries that have not been committed.\n+    private List<Log> entries;\n+    // the first uncommitted entry index.\n+    private long offset;\n+\n+    public UnCommittedEntryManager(long offset) {\n+        this.offset = offset;\n+        this.entries = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Return the first uncommitted index.\n+     *\n+     * @return offset\n+     */\n+    public long getFirstUnCommittedIndex() {\n+        return offset;\n+    }\n+\n+\n+    /**\n+     * Return last entry's index if this instance has at least one uncommitted entry.\n+     *\n+     * @return -1 if entries are empty, or last entry's index\n+     */\n+    public long maybeLastIndex() {\n+        int entryNum = entries.size();\n+        if (entryNum != 0) {\n+            return offset + entryNum - 1;\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Return the entry's term for given index. Note that the called should ensure index >= offset.\n+     *\n+     * @param index request entry index\n+     * @return -1 if index < offset, throw EntryUnavailableException if index > last or entries is\n+     * empty, or return the entry's term for given index\n+     * @throws EntryUnavailableException\n+     */\n+    public long maybeTerm(long index) throws EntryUnavailableException {\n+        if (index < offset) {\n+            logger.debug(\n+                \"invalid unCommittedEntryManager maybeTerm : parameter: index({}) < offset({})\",\n+                index, offset);\n+            return -1;\n+        }\n+        long last = maybeLastIndex();\n+        if (last == -1 || index > last) {\n+            long boundary = last == -1 ? offset - 1 : last;\n+            logger.info(\n+                \"unCommittedEntryManager maybeTerm out of bound : parameter: index({}) > lastIndex({})\",\n+                index, boundary);\n+            throw new EntryUnavailableException(index, boundary);\n+        }\n+        return entries.get((int) (index - offset)).getCurrLogTerm();\n+    }\n+\n+    /**\n+     * Remove useless prefix entries as long as these entries has been committed and persisted. This\n+     * method is only called after persisting newly committed entries.\n+     *\n+     * @param index request entry's index\n+     * @param term  request entry's term\n+     */\n+    public void stableTo(long index, long term) {\n+        try {\n+            long entryTerm = maybeTerm(index);\n+            // only update the uncommitted entries if term is matched with an uncommitted entry.\n+            if (entryTerm == term) {\n+                entries.subList(0, (int) (index + 1 - offset)).clear();\n+                offset = index + 1;\n+            }\n+        } catch (EntryUnavailableException e) {\n+            logger.info(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Update offset and clear entries because leader's snapshot is more up-to-date. This method is\n+     * only called for applying snapshot from leader.\n+     *\n+     * @param snapshot leader's snapshot\n+     */\n+    public void applyingSnapshot(Snapshot snapshot) {\n+        this.offset = snapshot.getLastLogIndex() + 1;\n+        this.entries.clear();\n+    }\n+\n+    /**\n+     * TruncateAndAppend uncommitted entries. This method will truncate conflict entries if it finds\n+     * inconsistencies. Note that the caller should ensure appendingEntries[0].index <=\n+     * entries[entries.size()-1].index + 1. Note that the caller should ensure not to truncate entries\n+     * which have been committed.\n+     *\n+     * @param appendingEntries request entries\n+     */\n+    public void truncateAndAppend(List<Log> appendingEntries) {\n+        long after = appendingEntries.get(0).getCurrLogIndex();\n+        long len = after - offset;\n+        if (len < 0) {\n+            // the logs are being truncated to before our current offset portion, which is committed entries\n+            // unconditional obedience to the leader's request. Maybe throw a exception here is better\n+            offset = after;\n+            entries = appendingEntries;\n+            logger.error(\"The logs which first index is {} are going to truncate committed logs\",\n+                after);\n+        } else if (len == entries.size()) {\n+            // after is the next index in the entries\n+            // directly append\n+            entries.addAll(appendingEntries);\n+        } else {\n+            // clear conflict entries\n+            // then append\n+            logger.info(\"truncate the entries after index {}\", after);\n+            int truncateIndex = (int) (after - offset);\n+            if (truncateIndex < entries.size()) {\n+                entries.subList(truncateIndex, entries.size()).clear();\n+            }\n+            entries.addAll(appendingEntries);\n+        }\n+    }\n+\n+    /**\n+     * Pack entries from low through high - 1, just like slice (entries[low:high]). offset <= low <=\n+     * high. Note that caller must ensure low <= high.\n+     *\n+     * @param low  request index low bound\n+     * @param high request index upper bound\n+     */\n+    public List<Log> getEntries(long low, long high) {\n+        if (low > high) {\n+            logger\n+                .debug(\"invalid unCommittedEntryManager getEntries: parameter: low({}) > high({})\",\n+                    low, high);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e838ca4587541ccc284aac59f87ec2632774233c"}, "originalPosition": 171}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f5676a9430d084a7aa5c8cb98bc8fbab399889", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/22f5676a9430d084a7aa5c8cb98bc8fbab399889", "committedDate": "2020-04-20T14:13:31Z", "message": "fix review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9723a7e8508cc6da5d21360fcc8f966573959ff6", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/9723a7e8508cc6da5d21360fcc8f966573959ff6", "committedDate": "2020-04-20T13:57:43Z", "message": "fix review"}, "afterCommit": {"oid": "22f5676a9430d084a7aa5c8cb98bc8fbab399889", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/22f5676a9430d084a7aa5c8cb98bc8fbab399889", "committedDate": "2020-04-20T14:13:31Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "914d561f51e97596dc181229977d6231b66b9c42", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/914d561f51e97596dc181229977d6231b66b9c42", "committedDate": "2020-04-20T14:16:46Z", "message": "Merge branch 'cluster_new' into cluster_new_log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c12af0cefa87ed34b98ebe5c1fa96871c12f251", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/8c12af0cefa87ed34b98ebe5c1fa96871c12f251", "committedDate": "2020-04-21T03:44:34Z", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTk1NTU1", "url": "https://github.com/apache/iotdb/pull/975#pullrequestreview-396995555", "createdAt": "2020-04-21T05:25:09Z", "commit": {"oid": "8c12af0cefa87ed34b98ebe5c1fa96871c12f251"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ef6ec694d0a4d0e7ee4749dffdbce8da10e915", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/91ef6ec694d0a4d0e7ee4749dffdbce8da10e915", "committedDate": "2020-04-21T05:37:29Z", "message": "Merge branch 'cluster_new' into cluster_new_log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b85cf56704193734bd1a995441587a27bd8b05", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/88b85cf56704193734bd1a995441587a27bd8b05", "committedDate": "2020-04-22T04:25:47Z", "message": "Merge branch 'cluster_new' into cluster_new_log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9aaa03f78f636aae7fc352f580ba42c54c4a5148", "author": {"user": {"login": "LebronAl", "name": "Potato"}}, "url": "https://github.com/apache/iotdb/commit/9aaa03f78f636aae7fc352f580ba42c54c4a5148", "committedDate": "2020-04-22T09:30:30Z", "message": "Merge branch 'cluster_new' into cluster_new_log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f5a9d19c0b89a6375bb96cc6ee2ca85b15a8e1", "author": {"user": {"login": "jt2594838", "name": "Jiang Tian"}}, "url": "https://github.com/apache/iotdb/commit/40f5a9d19c0b89a6375bb96cc6ee2ca85b15a8e1", "committedDate": "2020-04-23T01:59:53Z", "message": "Merge branch 'cluster_new' into cluster_new_log"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3054, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}