{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjczNzA0", "number": 1248, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNTowMDo0MVrOD_I05Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNjozNzozM1rOD_LPyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTMxNDkzOnYy", "diffSide": "RIGHT", "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNTowMDo0MVrOGZp2bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNDowNzowN1rOGZsh9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzI2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # default number is 5\n          \n          \n            \n            # default number is 1", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429553263", "createdAt": "2020-05-23T15:00:41Z", "author": {"login": "samperson1997"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -212,7 +216,7 @@ chunk_buffer_pool_enable=false\n # For example, your partitionInterval is 86400 and you want to insert data in 5 different days,\n # you should set this param >= 5\n # default number is 5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e963fb987c8f8164f0b3812859a95b1cfa344"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NzE3Mg==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429597172", "createdAt": "2020-05-24T04:07:07Z", "author": {"login": "qiaojialin"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -212,7 +216,7 @@ chunk_buffer_pool_enable=false\n # For example, your partitionInterval is 86400 and you want to insert data in 5 different days,\n # you should set this param >= 5\n # default number is 5", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzI2Mw=="}, "originalCommit": {"oid": "d69e963fb987c8f8164f0b3812859a95b1cfa344"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTcwODM2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNjozMTozMVrOGZs90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwODozMzo1NlrOGZte_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n          \n          \n            \n                    == partitionInterval)) {\n          \n          \n            \n                if (Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n          \n          \n            \n                    != partitionInterval) {", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429604306", "createdAt": "2020-05-24T06:31:31Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n       System.exit(-1);\n     }\n-    if (!(properties.getProperty(\"tsfile_storage_fs\").equals(tsfileFileSystem))) {\n-      logger.error(\"Wrong tsfile file system, please set as: \" + properties\n-              .getProperty(\"tsfile_storage_fs\") + \" !\");\n+\n+    if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n+        == partitionInterval)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMjc5Nw==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429612797", "createdAt": "2020-05-24T08:33:56Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n       System.exit(-1);\n     }\n-    if (!(properties.getProperty(\"tsfile_storage_fs\").equals(tsfileFileSystem))) {\n-      logger.error(\"Wrong tsfile file system, please set as: \" + properties\n-              .getProperty(\"tsfile_storage_fs\") + \" !\");\n+\n+    if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n+        == partitionInterval)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDMwNg=="}, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTcwOTY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNjozNDowN1rOGZs-gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwODozMzo1MlrOGZte-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDQ4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.error(\"Wrong \" + TSFILE_FILE_SYSTEM_STRING + \", please set as: \" + properties\n          \n          \n            \n                      .getProperty(TSFILE_FILE_SYSTEM_STRING) + \" !\");\n          \n          \n            \n                  logger.error(\"Wrong {}, please set as: {} !\", TSFILE_FILE_SYSTEM_STRING, properties\n          \n          \n            \n                      .getProperty(TSFILE_FILE_SYSTEM_STRING));", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429604483", "createdAt": "2020-05-24T06:34:07Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n       System.exit(-1);\n     }\n-    if (!(properties.getProperty(\"tsfile_storage_fs\").equals(tsfileFileSystem))) {\n-      logger.error(\"Wrong tsfile file system, please set as: \" + properties\n-              .getProperty(\"tsfile_storage_fs\") + \" !\");\n+\n+    if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n+        == partitionInterval)) {\n+      logger.error(\"Wrong \" + PARTITION_INTERVAL_STRING + \", please set as: \" + properties\n+          .getProperty(PARTITION_INTERVAL_STRING) + \" !\");\n       System.exit(-1);\n     }\n-  }\n \n-  private void upgradeMlog() {\n-    try {\n-      MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n-    } catch (IOException e) {\n-      logger.error(\"Upgrade mlog.txt from {} failed.\", SCHEMA_DIR, e);\n+    if (!(properties.getProperty(TSFILE_FILE_SYSTEM_STRING).equals(tsfileFileSystem))) {\n+      logger.error(\"Wrong \" + TSFILE_FILE_SYSTEM_STRING + \", please set as: \" + properties\n+          .getProperty(TSFILE_FILE_SYSTEM_STRING) + \" !\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 345}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMjc5NQ==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429612795", "createdAt": "2020-05-24T08:33:52Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n       System.exit(-1);\n     }\n-    if (!(properties.getProperty(\"tsfile_storage_fs\").equals(tsfileFileSystem))) {\n-      logger.error(\"Wrong tsfile file system, please set as: \" + properties\n-              .getProperty(\"tsfile_storage_fs\") + \" !\");\n+\n+    if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n+        == partitionInterval)) {\n+      logger.error(\"Wrong \" + PARTITION_INTERVAL_STRING + \", please set as: \" + properties\n+          .getProperty(PARTITION_INTERVAL_STRING) + \" !\");\n       System.exit(-1);\n     }\n-  }\n \n-  private void upgradeMlog() {\n-    try {\n-      MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n-    } catch (IOException e) {\n-      logger.error(\"Upgrade mlog.txt from {} failed.\", SCHEMA_DIR, e);\n+    if (!(properties.getProperty(TSFILE_FILE_SYSTEM_STRING).equals(tsfileFileSystem))) {\n+      logger.error(\"Wrong \" + TSFILE_FILE_SYSTEM_STRING + \", please set as: \" + properties\n+          .getProperty(TSFILE_FILE_SYSTEM_STRING) + \" !\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDQ4Mw=="}, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 345}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTcxMTQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNjozNzozM1rOGZs_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwODozNDowMVrOGZtfAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n          \n          \n            \n                      .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n          \n          \n            \n                  logger.error(\"Wrong {}, please set as: {} !\", TIMESTAMP_PRECISION_STRING, properties\n          \n          \n            \n                      .getProperty(TIMESTAMP_PRECISION_STRING));", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429604710", "createdAt": "2020-05-24T06:37:33Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMjgwMg==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429612802", "createdAt": "2020-05-24T08:34:01Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDcxMA=="}, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 323}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 8, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}