{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjYyNDcw", "number": 1084, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozNDo1NlrOD2GY7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjoxNzoxNlrOD4oEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU0MzgxOnYy", "diffSide": "RIGHT", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileBatchSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozNDo1NlrOGL0SpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozNDo1NlrOGL0SpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDI2MA==", "bodyText": "writing TsFile -\u300b writing to TsFile ?", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415044260", "createdAt": "2020-04-25T11:34:56Z", "author": {"login": "sunjincheng121"}, "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileBatchSink.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.DataSet;\n+import org.apache.flink.api.java.ExecutionEnvironment;\n+import org.apache.flink.api.java.tuple.Tuple7;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.types.Row;\n+import org.apache.iotdb.flink.tsfile.RowTSRecordConverter;\n+import org.apache.iotdb.flink.tsfile.TSRecordOutputFormat;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The example of writing TsFile via Flink DataSet API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU0Njk1OnYy", "diffSide": "RIGHT", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileStreamSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozNjozOFrOGL0T-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozNjozOFrOGL0T-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDYwMg==", "bodyText": "writing TsFile -\u300b writing to TsFile ?", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415044602", "createdAt": "2020-04-25T11:36:38Z", "author": {"login": "sunjincheng121"}, "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileStreamSink.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.tuple.Tuple7;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.types.Row;\n+import org.apache.iotdb.flink.tsfile.RowTSRecordConverter;\n+import org.apache.iotdb.flink.tsfile.TSRecordOutputFormat;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The example of writing TsFile via Flink DataStream API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU0OTk4OnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozODo0OFrOGL0VWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozODo0OFrOGL0VWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDk1Mw==", "bodyText": "Example of TSRecordOutputFormat ?", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415044953", "createdAt": "2020-04-25T11:38:48Z", "author": {"login": "sunjincheng121"}, "path": "flink-tsfile-connector/README.md", "diffHunk": "@@ -91,3 +91,87 @@ for (String s : result) {\n }\n ```\n \n+### TSRecordOutputFormat Example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU1NDcwOnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo0MjoxOVrOGL0XbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo0MjoxOVrOGL0XbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTQ4NQ==", "bodyText": "Would be better to add JDK Doc?", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415045485", "createdAt": "2020-04-25T11:42:19Z", "author": {"login": "sunjincheng121"}, "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+public interface TSRecordConverter<T> extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU1NzAyOnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo0Mzo0OVrOGL0YbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo0Mzo0OVrOGL0YbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTc0MQ==", "bodyText": "Add JDK Doc? Add semantic description of this method\u3002", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415045741", "createdAt": "2020-04-25T11:43:49Z", "author": {"login": "sunjincheng121"}, "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+public interface TSRecordConverter<T> extends Serializable {\n+\n+\tvoid open(Schema schema) throws IOException;\n+\n+\tvoid covertAndCollect(T input, Collector<TSRecord> collector) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU3MzQ1OnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo1NTo0OVrOGL0fow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo1NTo0OVrOGL0fow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NzU4Nw==", "bodyText": "Regarding the method name covertAndCollect ,I think it again, It is not pretty clear for the semantic. I think in in TSRecordConverter the main goal of covertAndCollect  is covert the T to TSRecord. So, I would like to change the name from covertAndCollect  to convert which make the semantic more clearly. What do you think?\nBTW\uff1a typo covert -> convert", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415047587", "createdAt": "2020-04-25T11:55:49Z", "author": {"login": "sunjincheng121"}, "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+public interface TSRecordConverter<T> extends Serializable {\n+\n+\tvoid open(Schema schema) throws IOException;\n+\n+\tvoid covertAndCollect(T input, Collector<TSRecord> collector) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU3NTc4OnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordOutputFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo1NzowNVrOGL0goA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo1NzowNVrOGL0goA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0Nzg0MA==", "bodyText": "Please add an empty row.", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415047840", "createdAt": "2020-04-25T11:57:05Z", "author": {"login": "sunjincheng121"}, "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordOutputFormat.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.flink.util.FlinkRuntimeException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.exception.write.WriteProcessException;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Output format that writes TsFiles by {@link TSRecord}. Users need to provide a {@link TSRecordConverter} used to\n+ * convert the upstream data to {@link TSRecord}.\n+ *\n+ * @param <T> The input type of this output format.\n+ */\n+public class TSRecordOutputFormat<T> extends TsFileOutputFormat<T> {\n+\n+\tprivate final TSRecordConverter<T> converter;\n+\n+\tprivate transient TSRecordCollector tsRecordCollector = null;\n+\n+\tpublic TSRecordOutputFormat(String path, Schema schema, TSRecordConverter<T> converter) {\n+\t\tthis(path, schema, converter, null);\n+\t}\n+\n+\tpublic TSRecordOutputFormat(Schema schema, TSRecordConverter<T> converter) {\n+\t\tsuper(null, schema, null);\n+\t\tthis.converter = converter;\n+\t}\n+\n+\tpublic TSRecordOutputFormat(String path, Schema schema, TSRecordConverter<T> converter, TSFileConfig config) {\n+\t\tsuper(path, schema, config);\n+\t\tthis.converter = converter;\n+\t}\n+\n+\t@Override\n+\tpublic void open(int taskNumber, int numTasks) throws IOException {\n+\t\tsuper.open(taskNumber, numTasks);\n+\t\tconverter.open(schema);\n+\t\ttsRecordCollector = new TSRecordCollector();\n+\t}\n+\n+\t@Override\n+\tpublic void close() throws IOException {\n+\t\tconverter.close();\n+\t\tsuper.close();\n+\t}\n+\n+\t@Override\n+\tpublic void writeRecord(T t) throws IOException {\n+\t\ttry {\n+\t\t\tconverter.covertAndCollect(t, tsRecordCollector);\n+\t\t} catch (FlinkRuntimeException e) {\n+\t\t\tthrow new IOException(e.getCause());\n+\t\t}\n+\t}\n+\n+\tprivate class TSRecordCollector implements Collector<TSRecord> {\n+\n+\t\t@Override\n+\t\tpublic void collect(TSRecord tsRecord) {\n+\t\t\ttry {\n+\t\t\t\twriter.write(tsRecord);\n+\t\t\t} catch (IOException | WriteProcessException e) {\n+\t\t\t\tthrow new FlinkRuntimeException(e);\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() {\n+\n+\t\t}\n+\t}\n+\n+\tpublic TSRecordConverter<T> getConverter() {\n+\t\treturn converter;\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDU4MzMwOnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TsFileOutputFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjowMTo1NVrOGL0j7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjowMTo1NVrOGL0j7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0ODY4Ng==", "bodyText": "Add JDK Doc", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415048686", "createdAt": "2020-04-25T12:01:55Z", "author": {"login": "sunjincheng121"}, "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TsFileOutputFormat.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.api.common.io.FileOutputFormat;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.runtime.util.HadoopUtils;\n+import org.apache.flink.util.Preconditions;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iotdb.flink.tsfile.util.TSFileConfigUtil;\n+import org.apache.iotdb.hadoop.fileSystem.HDFSOutput;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.write.TsFileWriter;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+import org.apache.iotdb.tsfile.write.writer.LocalTsFileOutput;\n+import org.apache.iotdb.tsfile.write.writer.TsFileOutput;\n+\n+import javax.annotation.Nullable;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+public abstract class TsFileOutputFormat<T> extends FileOutputFormat<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDIyMTk2OnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxNDoxNlrOGMN6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxNDoxNlrOGMN6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NDA1Mg==", "bodyText": "Hi, should these be LONG?", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415464052", "createdAt": "2020-04-27T02:14:16Z", "author": {"login": "qiaojialin"}, "path": "flink-tsfile-connector/README.md", "diffHunk": "@@ -91,3 +91,87 @@ for (String s : result) {\n }\n ```\n \n+### TSRecordOutputFormat Example\n+\n+1. create TSRecordOutputFormat with default RowTSRecordConverter.\n+\n+```java\n+String[] filedNames = {\n+\tQueryConstant.RESERVED_TIME,\n+\t\"device_1.sensor_1\",\n+\t\"device_1.sensor_2\",\n+\t\"device_1.sensor_3\",\n+\t\"device_2.sensor_1\",\n+\t\"device_2.sensor_2\",\n+\t\"device_2.sensor_3\"\n+};\n+TypeInformation[] typeInformations = new TypeInformation[] {\n+\tTypes.LONG,\n+\tTypes.FLOAT,\n+\tTypes.INT,\n+\tTypes.INT,\n+\tTypes.FLOAT,\n+\tTypes.INT,\n+\tTypes.INT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDc1MzE5OnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/RowTSRecordConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjowNDoxN1rOGMSKBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjowNDoxN1rOGMSKBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzMzU3NA==", "bodyText": "templateDataPoint.type could be used to switch the data type.", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415533574", "createdAt": "2020-04-27T06:04:17Z", "author": {"login": "qiaojialin"}, "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/RowTSRecordConverter.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.record.datapoint.BooleanDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.DataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.DoubleDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.FloatDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.IntDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.LongDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.StringDataPoint;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The converter that convert a Row object to multiple TSRecord objects.\n+ */\n+public class RowTSRecordConverter implements TSRecordConverter<Row> {\n+\n+\tprivate RowTypeInfo rowTypeInfo;\n+\tprivate transient TSRecord[] outputTemplate;\n+\tprivate transient int timeIndex = -1;\n+\tprivate transient int[] tsRecordIndexMapping;\n+\tprivate transient int[] dataPointIndexMapping;\n+\tprivate transient TSRecord[] reuse;\n+\n+\tpublic RowTSRecordConverter(RowTypeInfo rowTypeInfo) {\n+\t\tthis.rowTypeInfo = rowTypeInfo;\n+\t}\n+\n+\t@Override\n+\tpublic void open(Schema schema) throws IOException {\n+\t\tthis.tsRecordIndexMapping = new int[rowTypeInfo.getArity()];\n+\t\tthis.dataPointIndexMapping = new int[rowTypeInfo.getArity()];\n+\t\tList<TSRecord> outputTemplateList = new ArrayList<>();\n+\n+\t\tfor (int i = 0; i < rowTypeInfo.getArity(); i++) {\n+\t\t\tString fieldName = rowTypeInfo.getFieldNames()[i];\n+\t\t\tif (QueryConstant.RESERVED_TIME.equals(fieldName)) {\n+\t\t\t\ttimeIndex = i;\n+\t\t\t\ttsRecordIndexMapping[i] = -1;\n+\t\t\t\tdataPointIndexMapping[i] = -1;\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tString deviceId = fieldName.substring(0, fieldName.lastIndexOf(\".\"));\n+\t\t\tString measurementId = fieldName.substring(fieldName.lastIndexOf(\".\") + 1);\n+\t\t\tint tsRecordIndex = outputTemplateList.stream()\n+\t\t\t\t.map(t -> t.deviceId).collect(Collectors.toList()).indexOf(deviceId);\n+\t\t\tif (tsRecordIndex < 0) {\n+\t\t\t\toutputTemplateList.add(new TSRecord(0, deviceId));\n+\t\t\t\ttsRecordIndex = outputTemplateList.size() - 1;\n+\t\t\t}\n+\t\t\ttsRecordIndexMapping[i] = tsRecordIndex;\n+\t\t\tTSRecord tsRecord = outputTemplateList.get(tsRecordIndex);\n+\t\t\tClass typeClass = rowTypeInfo.getFieldTypes()[i].getTypeClass();\n+\t\t\tif (typeClass == Boolean.class || typeClass == boolean.class) {\n+\t\t\t\ttsRecord.addTuple(new BooleanDataPoint(measurementId, false));\n+\t\t\t} else if (typeClass == Integer.class || typeClass == int.class) {\n+\t\t\t\ttsRecord.addTuple(new IntDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == Long.class || typeClass == long.class) {\n+\t\t\t\ttsRecord.addTuple(new LongDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == Float.class || typeClass == float.class) {\n+\t\t\t\ttsRecord.addTuple(new FloatDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == Double.class || typeClass == double.class) {\n+\t\t\t\ttsRecord.addTuple(new DoubleDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == String.class) {\n+\t\t\t\ttsRecord.addTuple(new StringDataPoint(measurementId, null));\n+\t\t\t} else {\n+\t\t\t\tthrow new UnSupportedDataTypeException(typeClass.toString());\n+\t\t\t}\n+\t\t\tdataPointIndexMapping[i] = tsRecord.dataPointList.size() - 1;\n+\t\t}\n+\t\toutputTemplate = outputTemplateList.toArray(new TSRecord[0]);\n+\n+\t\treuse = new TSRecord[outputTemplate.length];\n+\t\tfor (int i = 0; i < outputTemplate.length; i++) {\n+\t\t\treuse[i] = new TSRecord(0, outputTemplate[i].deviceId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void covertAndCollect(Row input, Collector<TSRecord> collector) throws IOException {\n+\t\tlong timestamp = (long) input.getField(timeIndex);\n+\t\tfor (TSRecord tsRecord : reuse) {\n+\t\t\ttsRecord.dataPointList.clear();\n+\t\t}\n+\t\tfor (int i = 0; i < input.getArity(); i++) {\n+\t\t\tif (i == timeIndex) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tTSRecord templateRecord = outputTemplate[tsRecordIndexMapping[i]];\n+\t\t\tDataPoint templateDataPoint = templateRecord.dataPointList.get(dataPointIndexMapping[i]);\n+\t\t\tObject o = input.getField(i);\n+\t\t\tif (o != null) {\n+\t\t\t\tClass typeClass = o.getClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858341e56f87f3e6d9ae94adab4da2c994c898d1"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzAzMjkzOnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjoxNzowOFrOGPg0Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjoxNzowOFrOGPg0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkxOTQ2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tTypes.FLOAT,\n          \n          \n            \n            \tTypes.LONG,", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r418919467", "createdAt": "2020-05-02T06:17:08Z", "author": {"login": "qiaojialin"}, "path": "flink-tsfile-connector/README.md", "diffHunk": "@@ -91,3 +91,87 @@ for (String s : result) {\n }\n ```\n \n+### Example of TSRecordOutputFormat \n+\n+1. create TSRecordOutputFormat with default RowTSRecordConverter.\n+\n+```java\n+String[] filedNames = {\n+\tQueryConstant.RESERVED_TIME,\n+\t\"device_1.sensor_1\",\n+\t\"device_1.sensor_2\",\n+\t\"device_1.sensor_3\",\n+\t\"device_2.sensor_1\",\n+\t\"device_2.sensor_2\",\n+\t\"device_2.sensor_3\"\n+};\n+TypeInformation[] typeInformations = new TypeInformation[] {\n+\tTypes.LONG,\n+\tTypes.FLOAT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8368256f4872f962f5941a61e5b50c2918d794a5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzAzMjk4OnYy", "diffSide": "RIGHT", "path": "flink-tsfile-connector/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjoxNzoxNlrOGPg0MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjoxNzoxNlrOGPg0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkxOTQ3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tTypes.FLOAT,\n          \n          \n            \n            \tTypes.LONG,", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r418919472", "createdAt": "2020-05-02T06:17:16Z", "author": {"login": "qiaojialin"}, "path": "flink-tsfile-connector/README.md", "diffHunk": "@@ -91,3 +91,87 @@ for (String s : result) {\n }\n ```\n \n+### Example of TSRecordOutputFormat \n+\n+1. create TSRecordOutputFormat with default RowTSRecordConverter.\n+\n+```java\n+String[] filedNames = {\n+\tQueryConstant.RESERVED_TIME,\n+\t\"device_1.sensor_1\",\n+\t\"device_1.sensor_2\",\n+\t\"device_1.sensor_3\",\n+\t\"device_2.sensor_1\",\n+\t\"device_2.sensor_2\",\n+\t\"device_2.sensor_3\"\n+};\n+TypeInformation[] typeInformations = new TypeInformation[] {\n+\tTypes.LONG,\n+\tTypes.FLOAT,\n+\tTypes.LONG,\n+\tTypes.LONG,\n+\tTypes.FLOAT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8368256f4872f962f5941a61e5b50c2918d794a5"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 81, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}