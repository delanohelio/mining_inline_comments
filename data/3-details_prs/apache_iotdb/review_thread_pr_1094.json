{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDc3Nzc4", "number": 1094, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjowMDoxM1rOD2cp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxMDoxMlrOD2cyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDE5MTg5OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjowMDoxM1rOGMNriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoyODoyN1rOGMOKKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MDIzNQ==", "bodyText": "Please just decide one and do not leave commented code. Both are okay for me.", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415460235", "createdAt": "2020-04-27T02:00:13Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java", "diffHunk": "@@ -126,11 +128,11 @@ public void truncateAndAppend(List<Log> appendingEntries) {\n         long len = after - offset;\n         if (len < 0) {\n             // the logs are being truncated to before our current offset portion, which is committed entries\n-            // unconditional obedience to the leader's request. Maybe throw a exception here is better\n-            offset = after;\n-            entries = appendingEntries;\n+            // Maybe throw a exception here is better\n             logger.error(\"The logs which first index is {} are going to truncate committed logs\",\n                 after);\n+//            throw new TruncateCommittedEntryException(appendingEntries.get(0).getCurrLogIndex(),\n+//                offset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2ODA3NQ==", "bodyText": "OK", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415468075", "createdAt": "2020-04-27T02:28:27Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java", "diffHunk": "@@ -126,11 +128,11 @@ public void truncateAndAppend(List<Log> appendingEntries) {\n         long len = after - offset;\n         if (len < 0) {\n             // the logs are being truncated to before our current offset portion, which is committed entries\n-            // unconditional obedience to the leader's request. Maybe throw a exception here is better\n-            offset = after;\n-            entries = appendingEntries;\n+            // Maybe throw a exception here is better\n             logger.error(\"The logs which first index is {} are going to truncate committed logs\",\n                 after);\n+//            throw new TruncateCommittedEntryException(appendingEntries.get(0).getCurrLogIndex(),\n+//                offset);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MDIzNQ=="}, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDIwNzAwOnYy", "diffSide": "RIGHT", "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjowNzoyNVrOGMNzEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjo1NjozMVrOGMOoKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MjE2Mg==", "bodyText": "Please check the indents.", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415462162", "createdAt": "2020-04-27T02:07:25Z", "author": {"login": "jt2594838"}, "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java", "diffHunk": "@@ -48,12 +52,22 @@ public void apply(Log log) {\n \t\t\tappliedLogs.add(log);\n \t\t}\n \t};\n+\tprivate int testIdentifier = 1;\n \n \t@Before\n \tpublic void setUp() {\n \t\tappliedLogs = new HashSet<>();\n \t}\n \n+\t@After\n+\tpublic void tearDown() {\n+\t\tFile dir = new File(new SyncLogDequeSerializer(testIdentifier).getLogDir());\n+\t\tfor (File file : dir.listFiles()) {\n+\t\t\tfile.delete();\n+\t\t}\n+\t\tdir.delete();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3NTc1Mw==", "bodyText": "It seems wired.In my local editor,the indents are properly.I will fix this.", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415475753", "createdAt": "2020-04-27T02:56:31Z", "author": {"login": "LebronAl"}, "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java", "diffHunk": "@@ -48,12 +52,22 @@ public void apply(Log log) {\n \t\t\tappliedLogs.add(log);\n \t\t}\n \t};\n+\tprivate int testIdentifier = 1;\n \n \t@Before\n \tpublic void setUp() {\n \t\tappliedLogs = new HashSet<>();\n \t}\n \n+\t@After\n+\tpublic void tearDown() {\n+\t\tFile dir = new File(new SyncLogDequeSerializer(testIdentifier).getLogDir());\n+\t\tfor (File file : dir.listFiles()) {\n+\t\t\tfile.delete();\n+\t\t}\n+\t\tdir.delete();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MjE2Mg=="}, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDIxMTgzOnYy", "diffSide": "RIGHT", "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjowOToyMVrOGMN1Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowMDoyN1rOGMOs3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjc1OA==", "bodyText": "Remove these if they are not necessary.", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415462758", "createdAt": "2020-04-27T02:09:21Z", "author": {"login": "jt2594838"}, "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "diffHunk": "@@ -354,99 +222,87 @@ public void testRemoveOldFileAtRecovery() {\n     }\n   }\n \n-\n-  @Test\n-  public void testTruncate() {\n-    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    List<Log> testLogs2;\n-    try {\n-      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-\n-      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs1) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-\n-      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      syncLogDequeSerializer.removeFirst(3);\n-\n-      testLogs2 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs2) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-\n-      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-      // this will remove first file and build a new file\n-      syncLogDequeSerializer.removeFirst(8);\n-\n-      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-\n-      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-      for (Log log : testLogs3) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-\n-      // last file has been truncated\n-      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-\n-    // recovery\n-    syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    try {\n-      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-      assertEquals(9, logs.size());\n-\n-      for (int i = 0; i < 8; i++) {\n-        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-      }\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-  }\n+//  @Test\n+//  public void testTruncate() {\n+//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    List<Log> testLogs2;\n+//    try {\n+//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n+//\n+//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n+//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs1) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//\n+//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      syncLogDequeSerializer.removeFirst(3);\n+//\n+//      testLogs2 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs2) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//\n+//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//      // this will remove first file and build a new file\n+//      syncLogDequeSerializer.removeFirst(8);\n+//\n+//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//\n+//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n+//      for (Log log : testLogs3) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n+//\n+//      // last file has been truncated\n+//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//\n+//    // recovery\n+//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    try {\n+//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n+//      assertEquals(9, logs.size());\n+//\n+//      for (int i = 0; i < 8; i++) {\n+//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n+//      }\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3Njk1OA==", "bodyText": "OK", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415476958", "createdAt": "2020-04-27T03:00:27Z", "author": {"login": "LebronAl"}, "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "diffHunk": "@@ -354,99 +222,87 @@ public void testRemoveOldFileAtRecovery() {\n     }\n   }\n \n-\n-  @Test\n-  public void testTruncate() {\n-    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    List<Log> testLogs2;\n-    try {\n-      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-\n-      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs1) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-\n-      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      syncLogDequeSerializer.removeFirst(3);\n-\n-      testLogs2 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs2) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-\n-      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-      // this will remove first file and build a new file\n-      syncLogDequeSerializer.removeFirst(8);\n-\n-      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-\n-      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-      for (Log log : testLogs3) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-\n-      // last file has been truncated\n-      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-\n-    // recovery\n-    syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    try {\n-      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-      assertEquals(9, logs.size());\n-\n-      for (int i = 0; i < 8; i++) {\n-        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-      }\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-  }\n+//  @Test\n+//  public void testTruncate() {\n+//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    List<Log> testLogs2;\n+//    try {\n+//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n+//\n+//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n+//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs1) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//\n+//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      syncLogDequeSerializer.removeFirst(3);\n+//\n+//      testLogs2 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs2) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//\n+//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//      // this will remove first file and build a new file\n+//      syncLogDequeSerializer.removeFirst(8);\n+//\n+//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//\n+//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n+//      for (Log log : testLogs3) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n+//\n+//      // last file has been truncated\n+//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//\n+//    // recovery\n+//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    try {\n+//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n+//      assertEquals(9, logs.size());\n+//\n+//      for (int i = 0; i < 8; i++) {\n+//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n+//      }\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjc1OA=="}, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 443}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDIxMzQwOnYy", "diffSide": "RIGHT", "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxMDoxMlrOGMN2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowMDozM1rOGMOs8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjk2Mw==", "bodyText": "Remove these if they are not necessary.", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415462963", "createdAt": "2020-04-27T02:10:12Z", "author": {"login": "jt2594838"}, "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "diffHunk": "@@ -458,85 +314,78 @@ public void testRecoveryByAppendList() {\n     }\n   }\n \n-  @Test\n-  public void testTruncateByAppendList() {\n-    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    List<Log> testLogs2;\n-    try {\n-      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-\n-      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs1) {\n-        memoryLogManager.appendLog(log);\n-      }\n-      syncLogDequeSerializer.append(testLogs1, memoryLogManager.getMeta());\n-\n-      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      syncLogDequeSerializer.removeFirst(3);\n-\n-      testLogs2 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs2) {\n-        memoryLogManager.appendLog(log);\n-      }\n-      syncLogDequeSerializer.append(testLogs2, memoryLogManager.getMeta());\n-\n-      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-      // this will remove first file and build a new file\n-      syncLogDequeSerializer.removeFirst(8);\n-\n-      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-\n-      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-      for (Log log : testLogs3) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-\n-      // last file has been truncated\n-      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-\n-    // recovery\n-    syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    try {\n-      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-      assertEquals(9, logs.size());\n-\n-      for (int i = 0; i < 8; i++) {\n-        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-      }\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-  }\n+//  @Test\n+//  public void testTruncateByAppendList() {\n+//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    List<Log> testLogs2;\n+//    try {\n+//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n+//\n+//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n+//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs1) {\n+//        memoryLogManager.appendLog(log);\n+//      }\n+//      syncLogDequeSerializer.append(testLogs1, memoryLogManager.getMeta());\n+//\n+//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      syncLogDequeSerializer.removeFirst(3);\n+//\n+//      testLogs2 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs2) {\n+//        memoryLogManager.appendLog(log);\n+//      }\n+//      syncLogDequeSerializer.append(testLogs2, memoryLogManager.getMeta());\n+//\n+//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//      // this will remove first file and build a new file\n+//      syncLogDequeSerializer.removeFirst(8);\n+//\n+//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//\n+//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n+//      for (Log log : testLogs3) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n+//\n+//      // last file has been truncated\n+//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//\n+//    // recovery\n+//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    try {\n+//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n+//      assertEquals(9, logs.size());\n+//\n+//      for (int i = 0; i < 8; i++) {\n+//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n+//      }\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 607}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3Njk3Nw==", "bodyText": "OK", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415476977", "createdAt": "2020-04-27T03:00:33Z", "author": {"login": "LebronAl"}, "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "diffHunk": "@@ -458,85 +314,78 @@ public void testRecoveryByAppendList() {\n     }\n   }\n \n-  @Test\n-  public void testTruncateByAppendList() {\n-    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    List<Log> testLogs2;\n-    try {\n-      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-\n-      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs1) {\n-        memoryLogManager.appendLog(log);\n-      }\n-      syncLogDequeSerializer.append(testLogs1, memoryLogManager.getMeta());\n-\n-      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      syncLogDequeSerializer.removeFirst(3);\n-\n-      testLogs2 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs2) {\n-        memoryLogManager.appendLog(log);\n-      }\n-      syncLogDequeSerializer.append(testLogs2, memoryLogManager.getMeta());\n-\n-      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-      // this will remove first file and build a new file\n-      syncLogDequeSerializer.removeFirst(8);\n-\n-      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-\n-      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-      for (Log log : testLogs3) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-\n-      // last file has been truncated\n-      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-\n-    // recovery\n-    syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    try {\n-      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-      assertEquals(9, logs.size());\n-\n-      for (int i = 0; i < 8; i++) {\n-        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-      }\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-  }\n+//  @Test\n+//  public void testTruncateByAppendList() {\n+//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    List<Log> testLogs2;\n+//    try {\n+//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n+//\n+//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n+//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs1) {\n+//        memoryLogManager.appendLog(log);\n+//      }\n+//      syncLogDequeSerializer.append(testLogs1, memoryLogManager.getMeta());\n+//\n+//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      syncLogDequeSerializer.removeFirst(3);\n+//\n+//      testLogs2 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs2) {\n+//        memoryLogManager.appendLog(log);\n+//      }\n+//      syncLogDequeSerializer.append(testLogs2, memoryLogManager.getMeta());\n+//\n+//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//      // this will remove first file and build a new file\n+//      syncLogDequeSerializer.removeFirst(8);\n+//\n+//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//\n+//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n+//      for (Log log : testLogs3) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n+//\n+//      // last file has been truncated\n+//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//\n+//    // recovery\n+//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    try {\n+//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n+//      assertEquals(9, logs.size());\n+//\n+//      for (int i = 0; i < 8; i++) {\n+//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n+//      }\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjk2Mw=="}, "originalCommit": {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e"}, "originalPosition": 607}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 91, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}