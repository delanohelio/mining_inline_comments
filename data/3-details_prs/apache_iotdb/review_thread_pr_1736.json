{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MDgwNzY4", "number": 1736, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMTo0ODo0NVrOEn5egA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTowMDoxNFrOErAw2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjcxNjE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/exception/runtime/SQLParserException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMTo0ODo0NVrOHYsMUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMTo0ODo0NVrOHYsMUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MTkyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SQLParserException extends RuntimeException{\n          \n          \n            \n            public class SQLParserException extends RuntimeException {", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r495651920", "createdAt": "2020-09-28T01:48:45Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/exception/runtime/SQLParserException.java", "diffHunk": "@@ -18,10 +18,11 @@\n  */\n package org.apache.iotdb.db.exception.runtime;\n \n-public class SQLParserException extends RuntimeException {\n-\n+public class SQLParserException extends RuntimeException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c0af49bad96ee378a600f44d9bc8f7ea588b40"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTIzNjEwOnYy", "diffSide": "RIGHT", "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzozODo0MlrOHdhdJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo0MDoyNFrOHe53dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODg4NQ==", "bodyText": "recover this", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r500718885", "createdAt": "2020-10-07T03:38:42Z", "author": {"login": "qiaojialin"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -63,16 +63,17 @@ force_wal_period_in_ms=100\n ### Directory Configuration\n ####################\n \n-# system dir\n-# If this property is unset, system will save the data in the default relative path directory under the IoTDB folder(i.e., %IOTDB_HOME%/data/system).\n+# base dir\n+# If this property is unset, system will save the data in the default relative path directory under the IoTDB folder(i.e., %IOTDB_HOME%/data).\n # If it is absolute, system will save the data in exact location it points to.\n # If it is relative, system will save the data in the relative path directory it indicates under the IoTDB folder.\n+# Note: If sys_dir is assigned an empty string(i.e.,zero-size), it will be handled as a relative path.\n # For windows platform\n # If its prefix is a drive specifier followed by \"\\\\\", or if its prefix is \"\\\\\\\\\", then the path is absolute. Otherwise, it is relative.\n-# system_dir=data\\\\system\n+# base_dir=data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NzQxMg==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r502167412", "createdAt": "2020-10-09T03:40:24Z", "author": {"login": "jt2594838"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -63,16 +63,17 @@ force_wal_period_in_ms=100\n ### Directory Configuration\n ####################\n \n-# system dir\n-# If this property is unset, system will save the data in the default relative path directory under the IoTDB folder(i.e., %IOTDB_HOME%/data/system).\n+# base dir\n+# If this property is unset, system will save the data in the default relative path directory under the IoTDB folder(i.e., %IOTDB_HOME%/data).\n # If it is absolute, system will save the data in exact location it points to.\n # If it is relative, system will save the data in the relative path directory it indicates under the IoTDB folder.\n+# Note: If sys_dir is assigned an empty string(i.e.,zero-size), it will be handled as a relative path.\n # For windows platform\n # If its prefix is a drive specifier followed by \"\\\\\", or if its prefix is \"\\\\\\\\\", then the path is absolute. Otherwise, it is relative.\n-# system_dir=data\\\\system\n+# base_dir=data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODg4NQ=="}, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTI0MDc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzo0MTo1MVrOHdhfzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo0ODoxNlrOHe6HTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTU2Nw==", "bodyText": "async should be inferred from parameter", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r500719567", "createdAt": "2020-10-07T03:41:51Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -381,39 +385,57 @@ public void syncCloseAllProcessor() {\n   }\n \n   public void forceCloseAllProcessor() throws TsFileProcessorException {\n-    logger.info(\"Start closing all storage group processor\");\n+    logger.info(\"Start force closing all storage group processor\");\n     for (StorageGroupProcessor processor : processorMap.values()) {\n       processor.forceCloseAllWorkingTsFileProcessors();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, boolean isSeq) {\n+  public void closeProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {\n     StorageGroupProcessor processor = processorMap.get(storageGroupPath);\n-    if (processor != null) {\n-      logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,\n-          isSeq);\n-      processor.writeLock();\n-      try {\n-        if (isSeq) {\n-          // to avoid concurrent modification problem, we need a new array list\n-          for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n-              processor.getWorkSequenceTsFileProcessors())) {\n+    if (processor == null) {\n+      return;\n+    }\n+\n+    logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3MTQ3MA==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r502171470", "createdAt": "2020-10-09T03:48:16Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -381,39 +385,57 @@ public void syncCloseAllProcessor() {\n   }\n \n   public void forceCloseAllProcessor() throws TsFileProcessorException {\n-    logger.info(\"Start closing all storage group processor\");\n+    logger.info(\"Start force closing all storage group processor\");\n     for (StorageGroupProcessor processor : processorMap.values()) {\n       processor.forceCloseAllWorkingTsFileProcessors();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, boolean isSeq) {\n+  public void closeProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {\n     StorageGroupProcessor processor = processorMap.get(storageGroupPath);\n-    if (processor != null) {\n-      logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,\n-          isSeq);\n-      processor.writeLock();\n-      try {\n-        if (isSeq) {\n-          // to avoid concurrent modification problem, we need a new array list\n-          for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n-              processor.getWorkSequenceTsFileProcessors())) {\n+    if (processor == null) {\n+      return;\n+    }\n+\n+    logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTU2Nw=="}, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTI0MzExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzo0MzozM1rOHdhhNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo0OTowN1rOHe6JQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void closeProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {\n          \n          \n            \n              public void closeStorageGroupProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r500719925", "createdAt": "2020-10-07T03:43:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -381,39 +385,57 @@ public void syncCloseAllProcessor() {\n   }\n \n   public void forceCloseAllProcessor() throws TsFileProcessorException {\n-    logger.info(\"Start closing all storage group processor\");\n+    logger.info(\"Start force closing all storage group processor\");\n     for (StorageGroupProcessor processor : processorMap.values()) {\n       processor.forceCloseAllWorkingTsFileProcessors();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, boolean isSeq) {\n+  public void closeProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3MTk3MQ==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r502171971", "createdAt": "2020-10-09T03:49:07Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -381,39 +385,57 @@ public void syncCloseAllProcessor() {\n   }\n \n   public void forceCloseAllProcessor() throws TsFileProcessorException {\n-    logger.info(\"Start closing all storage group processor\");\n+    logger.info(\"Start force closing all storage group processor\");\n     for (StorageGroupProcessor processor : processorMap.values()) {\n       processor.forceCloseAllWorkingTsFileProcessors();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, boolean isSeq) {\n+  public void closeProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTkyNQ=="}, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTI0MzUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzo0Mzo1NFrOHdhheA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo0OTozNFrOHe6KIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTk5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void closeProcessor(PartialPath storageGroupPath, long partitionId, boolean isSeq,\n          \n          \n            \n              public void closeStorageGroupProcessor(PartialPath storageGroupPath, long partitionId, boolean isSeq,", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r500719992", "createdAt": "2020-10-07T03:43:54Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -381,39 +385,57 @@ public void syncCloseAllProcessor() {\n   }\n \n   public void forceCloseAllProcessor() throws TsFileProcessorException {\n-    logger.info(\"Start closing all storage group processor\");\n+    logger.info(\"Start force closing all storage group processor\");\n     for (StorageGroupProcessor processor : processorMap.values()) {\n       processor.forceCloseAllWorkingTsFileProcessors();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, boolean isSeq) {\n+  public void closeProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {\n     StorageGroupProcessor processor = processorMap.get(storageGroupPath);\n-    if (processor != null) {\n-      logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,\n-          isSeq);\n-      processor.writeLock();\n-      try {\n-        if (isSeq) {\n-          // to avoid concurrent modification problem, we need a new array list\n-          for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n-              processor.getWorkSequenceTsFileProcessors())) {\n+    if (processor == null) {\n+      return;\n+    }\n+\n+    logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,\n+        isSeq);\n+    processor.writeLock();\n+    try {\n+      if (isSeq) {\n+        // to avoid concurrent modification problem, we need a new array list\n+        for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n+            processor.getWorkSequenceTsFileProcessors())) {\n+          if (isSync) {\n+            processor.syncCloseOneTsFileProcessor(true, tsfileProcessor);\n+          } else {\n             processor.asyncCloseOneTsFileProcessor(true, tsfileProcessor);\n           }\n-        } else {\n-          // to avoid concurrent modification problem, we need a new array list\n-          for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n-              processor.getWorkUnsequenceTsFileProcessor())) {\n+        }\n+      } else {\n+        // to avoid concurrent modification problem, we need a new array list\n+        for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n+            processor.getWorkUnsequenceTsFileProcessor())) {\n+          if (isSync) {\n+            processor.syncCloseOneTsFileProcessor(false, tsfileProcessor);\n+          } else {\n             processor.asyncCloseOneTsFileProcessor(false, tsfileProcessor);\n           }\n         }\n-      } finally {\n-        processor.writeUnlock();\n       }\n+    } finally {\n+      processor.writeUnlock();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, long partitionId, boolean isSeq)\n+  /**\n+   * @param storageGroupPath the storage group name\n+   * @param partitionId      the partition id\n+   * @param isSeq            is sequence tsfile or unsequence tsfile\n+   * @param isSync           close tsfile synchronously or asynchronously\n+   * @throws StorageGroupNotSetException\n+   */\n+  public void closeProcessor(PartialPath storageGroupPath, long partitionId, boolean isSeq,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3MjE5Mw==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r502172193", "createdAt": "2020-10-09T03:49:34Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -381,39 +385,57 @@ public void syncCloseAllProcessor() {\n   }\n \n   public void forceCloseAllProcessor() throws TsFileProcessorException {\n-    logger.info(\"Start closing all storage group processor\");\n+    logger.info(\"Start force closing all storage group processor\");\n     for (StorageGroupProcessor processor : processorMap.values()) {\n       processor.forceCloseAllWorkingTsFileProcessors();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, boolean isSeq) {\n+  public void closeProcessor(PartialPath storageGroupPath, boolean isSeq, boolean isSync) {\n     StorageGroupProcessor processor = processorMap.get(storageGroupPath);\n-    if (processor != null) {\n-      logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,\n-          isSeq);\n-      processor.writeLock();\n-      try {\n-        if (isSeq) {\n-          // to avoid concurrent modification problem, we need a new array list\n-          for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n-              processor.getWorkSequenceTsFileProcessors())) {\n+    if (processor == null) {\n+      return;\n+    }\n+\n+    logger.info(\"async closing sg processor is called for closing {}, seq = {}\", storageGroupPath,\n+        isSeq);\n+    processor.writeLock();\n+    try {\n+      if (isSeq) {\n+        // to avoid concurrent modification problem, we need a new array list\n+        for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n+            processor.getWorkSequenceTsFileProcessors())) {\n+          if (isSync) {\n+            processor.syncCloseOneTsFileProcessor(true, tsfileProcessor);\n+          } else {\n             processor.asyncCloseOneTsFileProcessor(true, tsfileProcessor);\n           }\n-        } else {\n-          // to avoid concurrent modification problem, we need a new array list\n-          for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n-              processor.getWorkUnsequenceTsFileProcessor())) {\n+        }\n+      } else {\n+        // to avoid concurrent modification problem, we need a new array list\n+        for (TsFileProcessor tsfileProcessor : new ArrayList<>(\n+            processor.getWorkUnsequenceTsFileProcessor())) {\n+          if (isSync) {\n+            processor.syncCloseOneTsFileProcessor(false, tsfileProcessor);\n+          } else {\n             processor.asyncCloseOneTsFileProcessor(false, tsfileProcessor);\n           }\n         }\n-      } finally {\n-        processor.writeUnlock();\n       }\n+    } finally {\n+      processor.writeUnlock();\n     }\n   }\n \n-  public void asyncCloseProcessor(PartialPath storageGroupPath, long partitionId, boolean isSeq)\n+  /**\n+   * @param storageGroupPath the storage group name\n+   * @param partitionId      the partition id\n+   * @param isSeq            is sequence tsfile or unsequence tsfile\n+   * @param isSync           close tsfile synchronously or asynchronously\n+   * @throws StorageGroupNotSetException\n+   */\n+  public void closeProcessor(PartialPath storageGroupPath, long partitionId, boolean isSeq,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTk5Mg=="}, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTI2NDQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzo1NTo1MVrOHdhtHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzo1NTo1MVrOHdhtHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMjk3NQ==", "bodyText": "wait for Kaifeng's PR", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r500722975", "createdAt": "2020-10-07T03:55:51Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -85,7 +87,7 @@ public boolean hasChild(String name) {\n    */\n   public void addChild(String name, MNode child) {\n     if (children == null) {\n-      children = new LinkedHashMap<>();\n+      children = new ConcurrentSkipListMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTM2NzMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePartitionPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTowMDoxNFrOHdioqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo1MjoyM1rOHe6QXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczODIxOA==", "bodyText": "don't you need return storage group name?", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r500738218", "createdAt": "2020-10-07T05:00:14Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePartitionPlan.java", "diffHunk": "@@ -38,7 +39,12 @@ public DeletePartitionPlan(PartialPath storageGroupName, Set<Long> partitionId)\n \n   @Override\n   public List<PartialPath> getPaths() {\n-    return null;\n+    return Collections.emptyList();\n+  }\n+\n+  @Override\n+  public List<String> getPathsStrings() {\n+    return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3Mzc5MA==", "bodyText": "method removed", "url": "https://github.com/apache/iotdb/pull/1736#discussion_r502173790", "createdAt": "2020-10-09T03:52:23Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePartitionPlan.java", "diffHunk": "@@ -38,7 +39,12 @@ public DeletePartitionPlan(PartialPath storageGroupName, Set<Long> partitionId)\n \n   @Override\n   public List<PartialPath> getPaths() {\n-    return null;\n+    return Collections.emptyList();\n+  }\n+\n+  @Override\n+  public List<String> getPathsStrings() {\n+    return Collections.emptyList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczODIxOA=="}, "originalCommit": {"oid": "f084eb8d862460cd6a5b1c93f3d3e3ceb6485ec4"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 730, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}