{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDk5MzU5", "number": 1824, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNTo1MDoyNVrOEvJtIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoxMDoxOFrOEvKBGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODc3NTM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNTo1MDoyNVrOHj-Wsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNTo1MDoyNVrOHj-Wsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4MzgyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (seqStatistics.getStartTime() < unseqStatistics.getStartTime()) {\n          \n          \n            \n                    return true;\n          \n          \n            \n                  }\n          \n          \n            \n                  return false;\n          \n          \n            \n                 return seqStatistics.getStartTime() < unseqStatistics.getStartTime());", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507483827", "createdAt": "2020-10-19T05:50:25Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -931,11 +1043,31 @@ public TsFileResource getNextSeqFileResource(List<TsFileResource> seqResources,\n           (c1, c2) -> Long.compare(keyExtractor.applyAsLong(c1), keyExtractor.applyAsLong(c2));\n     }\n \n+    @Override\n+    public long getCurrentEndPoint(long time, Statistics<? extends Object> statistics) {\n+      return Math.min(time, statistics.getEndTime());\n+    }\n+\n+    @Override\n+    public long getCurrentEndPoint(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics) {\n+      return Math.min(seqStatistics.getEndTime(), unseqStatistics.getEndTime());\n+    }\n+\n     @Override\n     public boolean isExcessEndpoint(long time, long endpointTime) {\n       return time > endpointTime;\n     }\n \n+    @Override\n+    public boolean isTakeSeqAsFirst(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics) {\n+      if (seqStatistics.getStartTime() < unseqStatistics.getStartTime()) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 505}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODc3NjY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNTo1MDo1NVrOHj-Xmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzo1NzowOVrOHkCEnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4NDA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (seqStatistics.getEndTime() > unseqStatistics.getEndTime()) {\n          \n          \n            \n                    return true;\n          \n          \n            \n                  }\n          \n          \n            \n                  return false;\n          \n          \n            \n                  return seqStatistics.getEndTime() > unseqStatistics.getEndTime();", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507484058", "createdAt": "2020-10-19T05:50:55Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -870,12 +963,31 @@ public TsFileResource getNextSeqFileResource(List<TsFileResource> seqResources,\n           (c1, c2) -> Long.compare(keyExtractor.applyAsLong(c2), keyExtractor.applyAsLong(c1));\n     }\n \n+    @Override\n+    public long getCurrentEndPoint(long time, Statistics<? extends Object> statistics) {\n+      return Math.max(time, statistics.getStartTime());\n+    }\n+\n+    @Override\n+    public long getCurrentEndPoint(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics) {\n+      return Math.max(seqStatistics.getStartTime(), unseqStatistics.getStartTime());\n+    }\n \n     @Override\n     public boolean isExcessEndpoint(long time, long endpointTime) {\n       return time < endpointTime;\n     }\n \n+    @Override\n+    public boolean isTakeSeqAsFirst(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics) {\n+      if (seqStatistics.getEndTime() > unseqStatistics.getEndTime()) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 473}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NDczMg==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507544732", "createdAt": "2020-10-19T07:57:09Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -870,12 +963,31 @@ public TsFileResource getNextSeqFileResource(List<TsFileResource> seqResources,\n           (c1, c2) -> Long.compare(keyExtractor.applyAsLong(c2), keyExtractor.applyAsLong(c1));\n     }\n \n+    @Override\n+    public long getCurrentEndPoint(long time, Statistics<? extends Object> statistics) {\n+      return Math.max(time, statistics.getStartTime());\n+    }\n+\n+    @Override\n+    public long getCurrentEndPoint(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics) {\n+      return Math.max(seqStatistics.getStartTime(), unseqStatistics.getStartTime());\n+    }\n \n     @Override\n     public boolean isExcessEndpoint(long time, long endpointTime) {\n       return time < endpointTime;\n     }\n \n+    @Override\n+    public boolean isTakeSeqAsFirst(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics) {\n+      if (seqStatistics.getEndTime() > unseqStatistics.getEndTime()) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4NDA1OA=="}, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 473}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODc3OTAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNTo1MTo1NVrOHj-ZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo1MjozMlrOHkKn7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4NDQyOQ==", "bodyText": "Add java doc for these new abstract methods", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507484429", "createdAt": "2020-10-19T05:51:55Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -816,8 +901,16 @@ boolean isModified() {\n \n     <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor);\n \n+    long getCurrentEndPoint(long time, Statistics<? extends Object> statistics);\n+\n+    long getCurrentEndPoint(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics);\n+\n     boolean isExcessEndpoint(long time, long endpointTime);\n \n+    boolean isTakeSeqAsFirst(Statistics<? extends Object> seqStatistics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 441}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3OTE5Ng==", "bodyText": "@Alima777 Don't forget this one : )", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507679196", "createdAt": "2020-10-19T11:41:51Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -816,8 +901,16 @@ boolean isModified() {\n \n     <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor);\n \n+    long getCurrentEndPoint(long time, Statistics<? extends Object> statistics);\n+\n+    long getCurrentEndPoint(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics);\n+\n     boolean isExcessEndpoint(long time, long endpointTime);\n \n+    boolean isTakeSeqAsFirst(Statistics<? extends Object> seqStatistics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4NDQyOQ=="}, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 441}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NDg0Ng==", "bodyText": "OK~ Thank you", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507684846", "createdAt": "2020-10-19T11:52:32Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -816,8 +901,16 @@ boolean isModified() {\n \n     <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor);\n \n+    long getCurrentEndPoint(long time, Statistics<? extends Object> statistics);\n+\n+    long getCurrentEndPoint(Statistics<? extends Object> seqStatistics,\n+        Statistics<? extends Object> unseqStatistics);\n+\n     boolean isExcessEndpoint(long time, long endpointTime);\n \n+    boolean isTakeSeqAsFirst(Statistics<? extends Object> seqStatistics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4NDQyOQ=="}, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 441}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODgxMjQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjowNTowMVrOHj-tZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzo1NzozMVrOHkCFiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4OTYzOA==", "bodyText": "better to extract these complicate condition statements into a private method, since they appear not only once in this file (for example, in lines 395-398)", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507489638", "createdAt": "2020-10-19T06:05:01Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -407,11 +409,15 @@ boolean hasNextPage() throws IOException {\n     }\n \n     // make sure firstPageReader won't be null while cachedPageReaders has more cached page readers\n-    while (firstPageReader == null && !cachedPageReaders.isEmpty()) {\n-      firstPageReader = cachedPageReaders.poll();\n-      if (!cachedPageReaders.isEmpty()\n-          && orderUtils.isOverlapped(firstPageReader.getStatistics(),\n-          cachedPageReaders.peek().getStatistics())) {\n+    while (firstPageReader == null && (!seqPageReaders.isEmpty() || !unSeqPageReaders.isEmpty())) {\n+\n+      initFirstPageReader();\n+\n+      if ((!seqPageReaders.isEmpty() && orderUtils\n+          .isOverlapped(firstPageReader.getStatistics(), seqPageReaders.get(0).getStatistics()))\n+          || (!unSeqPageReaders.isEmpty() && orderUtils\n+          .isOverlapped(firstPageReader.getStatistics(),\n+              unSeqPageReaders.peek().getStatistics()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NDk3MQ==", "bodyText": "You are right, fixed~", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507544971", "createdAt": "2020-10-19T07:57:31Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -407,11 +409,15 @@ boolean hasNextPage() throws IOException {\n     }\n \n     // make sure firstPageReader won't be null while cachedPageReaders has more cached page readers\n-    while (firstPageReader == null && !cachedPageReaders.isEmpty()) {\n-      firstPageReader = cachedPageReaders.poll();\n-      if (!cachedPageReaders.isEmpty()\n-          && orderUtils.isOverlapped(firstPageReader.getStatistics(),\n-          cachedPageReaders.peek().getStatistics())) {\n+    while (firstPageReader == null && (!seqPageReaders.isEmpty() || !unSeqPageReaders.isEmpty())) {\n+\n+      initFirstPageReader();\n+\n+      if ((!seqPageReaders.isEmpty() && orderUtils\n+          .isOverlapped(firstPageReader.getStatistics(), seqPageReaders.get(0).getStatistics()))\n+          || (!unSeqPageReaders.isEmpty() && orderUtils\n+          .isOverlapped(firstPageReader.getStatistics(),\n+              unSeqPageReaders.peek().getStatistics()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ4OTYzOA=="}, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODgyMDI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjowODoxMVrOHj-yDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjowODoxMVrOHj-yDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5MDgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (firstPageReader != null && !firstPageReader.isSeq &&\n          \n          \n            \n                if (firstPageReader != null && !firstPageReader.isSeq() &&", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507490831", "createdAt": "2020-10-19T06:08:11Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -610,18 +674,33 @@ private void tryToPutAllDirectlyOverlappedPageReadersIntoMergeReader() throws IO\n     }\n \n     /*\n-     * put all currently directly overlapped page reader to merge reader\n+     * put all currently directly overlapped unseq page reader to merge reader\n      */\n-    unpackAllOverlappedCachedPageReadersToMergeReader(currentPageEndpointTime);\n+    unpackAllOverlappedUnseqPageReadersToMergeReader(currentPageEndpointTime);\n   }\n \n-  private void unpackAllOverlappedCachedPageReadersToMergeReader(long endpointTime)\n+  private void initFirstPageReader() {\n+    if (!seqPageReaders.isEmpty() && !unSeqPageReaders.isEmpty()) {\n+      if (orderUtils.isTakeSeqAsFirst(seqPageReaders.get(0).getStatistics(), unSeqPageReaders.peek()\n+          .getStatistics())) {\n+        firstPageReader = seqPageReaders.remove(0);\n+      } else {\n+        firstPageReader = unSeqPageReaders.poll();\n+      }\n+    } else if (!seqPageReaders.isEmpty()) {\n+      firstPageReader = seqPageReaders.remove(0);\n+    } else if (!unSeqPageReaders.isEmpty()) {\n+      firstPageReader = unSeqPageReaders.poll();\n+    }\n+  }\n+\n+  private void unpackAllOverlappedUnseqPageReadersToMergeReader(long endpointTime)\n       throws IOException {\n-    while (!cachedPageReaders.isEmpty()\n-        && orderUtils.isOverlapped(endpointTime, cachedPageReaders.peek().data.getStatistics())) {\n-      putPageReaderToMergeReader(cachedPageReaders.poll());\n+    while (!unSeqPageReaders.isEmpty()\n+        && orderUtils.isOverlapped(endpointTime, unSeqPageReaders.peek().data.getStatistics())) {\n+      putPageReaderToMergeReader(unSeqPageReaders.poll());\n     }\n-    if (firstPageReader != null &&\n+    if (firstPageReader != null && !firstPageReader.isSeq &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODgyNjQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoxMDoxOFrOHj-11A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzo1ODoyNVrOHkCHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5MTc5Ng==", "bodyText": "Since you modified the field name of cachedPageReaders, maybe the name of this method should be updated as well.", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507491796", "createdAt": "2020-10-19T06:10:18Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -381,19 +383,19 @@ boolean hasNextPage() throws IOException {\n       /*\n        * first chunk metadata is already unpacked, consume cached pages\n        */\n-      if (!cachedPageReaders.isEmpty()) {\n-        firstPageReader = cachedPageReaders.poll();\n+      initFirstPageReader();\n+      if (firstPageReader != null) {\n         long endpointTime = orderUtils.getOverlapCheckTime(firstPageReader.getStatistics());\n         unpackAllOverlappedTsFilesToTimeSeriesMetadata(endpointTime);\n         unpackAllOverlappedTimeSeriesMetadataToCachedChunkMetadata(endpointTime, false);\n         unpackAllOverlappedChunkMetadataToCachedPageReaders(endpointTime, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NTUzMQ==", "bodyText": "Remaining this name is still good I think.", "url": "https://github.com/apache/iotdb/pull/1824#discussion_r507545531", "createdAt": "2020-10-19T07:58:25Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -381,19 +383,19 @@ boolean hasNextPage() throws IOException {\n       /*\n        * first chunk metadata is already unpacked, consume cached pages\n        */\n-      if (!cachedPageReaders.isEmpty()) {\n-        firstPageReader = cachedPageReaders.poll();\n+      initFirstPageReader();\n+      if (firstPageReader != null) {\n         long endpointTime = orderUtils.getOverlapCheckTime(firstPageReader.getStatistics());\n         unpackAllOverlappedTsFilesToTimeSeriesMetadata(endpointTime);\n         unpackAllOverlappedTimeSeriesMetadataToCachedChunkMetadata(endpointTime, false);\n         unpackAllOverlappedChunkMetadataToCachedPageReaders(endpointTime, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5MTc5Ng=="}, "originalCommit": {"oid": "5a4a1a91e8514813c05b5a6bfe3cbf582eed4933"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 628, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}