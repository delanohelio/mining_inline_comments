{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODk5NzY0", "number": 1705, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjoxMzo1NFrOEheq4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNzozMFrOEhrB5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTQwOTYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjoxMzo1NFrOHO0Jrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjozMToxOVrOHO0bdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI5NjU1OA==", "bodyText": "code format\n}else{   ->  } else {\nif( !deviceAdded){    ->   if (!deviceAdded) {\nplease use google style format: http://iotdb.apache.org/zh/Development/ContributeGuide.html", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r485296558", "createdAt": "2020-09-09T02:13:54Z", "author": {"login": "neuyilan"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -695,6 +708,38 @@ private int getCount(MNode node, String[] nodes, int idx) throws MetadataExcepti\n     }\n   }\n \n+  /**\n+   * Traverse the MTree to get the count of devices.\n+   */\n+  private int getDevicesCount(MNode node, String[] nodes, int idx) throws MetadataException {\n+    String nodeReg = MetaUtils.getNodeRegByIdx(idx, nodes);\n+    int cnt = 0;\n+    if (!(PATH_WILDCARD).equals(nodeReg)) {\n+      if (node.hasChild(nodeReg)) {\n+        if (node.getChild(nodeReg) instanceof MeasurementMNode && idx >= nodes.length) {\n+          cnt++;\n+        } else {\n+          cnt += getDevicesCount(node.getChild(nodeReg), nodes, idx + 1);\n+        }\n+      }\n+    } else {\n+      boolean deviceAdded = false;\n+      for (MNode child : node.getChildren().values()) {\n+        if (child instanceof MeasurementMNode ) {\n+          if( !deviceAdded){\n+            cnt++;\n+            deviceAdded = true;\n+          }else{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49ba52f85b76b5f4d904470281de1ce3909f250"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMTExMQ==", "bodyText": "i got this", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r485301111", "createdAt": "2020-09-09T02:31:19Z", "author": {"login": "yanhongwangg"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -695,6 +708,38 @@ private int getCount(MNode node, String[] nodes, int idx) throws MetadataExcepti\n     }\n   }\n \n+  /**\n+   * Traverse the MTree to get the count of devices.\n+   */\n+  private int getDevicesCount(MNode node, String[] nodes, int idx) throws MetadataException {\n+    String nodeReg = MetaUtils.getNodeRegByIdx(idx, nodes);\n+    int cnt = 0;\n+    if (!(PATH_WILDCARD).equals(nodeReg)) {\n+      if (node.hasChild(nodeReg)) {\n+        if (node.getChild(nodeReg) instanceof MeasurementMNode && idx >= nodes.length) {\n+          cnt++;\n+        } else {\n+          cnt += getDevicesCount(node.getChild(nodeReg), nodes, idx + 1);\n+        }\n+      }\n+    } else {\n+      boolean deviceAdded = false;\n+      for (MNode child : node.getChildren().values()) {\n+        if (child instanceof MeasurementMNode ) {\n+          if( !deviceAdded){\n+            cnt++;\n+            deviceAdded = true;\n+          }else{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI5NjU1OA=="}, "originalCommit": {"oid": "f49ba52f85b76b5f4d904470281de1ce3909f250"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzQxNDc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyMzowOFrOHPHGDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMjowNjoyMFrOHPgRUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNjkyNQ==", "bodyText": "Hi, we support subdevice like \"root.sg.device1.subdevice1.sensor1\" while subdevice1 is a measurementNode and a device. In your case, the subdevice1 will be ignored.\nYou can refer to the Mtree.findDevice() method.", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r485606925", "createdAt": "2020-09-09T13:23:08Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -695,6 +708,38 @@ private int getCount(MNode node, String[] nodes, int idx) throws MetadataExcepti\n     }\n   }\n \n+  /**\n+   * Traverse the MTree to get the count of devices.\n+   */\n+  private int getDevicesCount(MNode node, String[] nodes, int idx) throws MetadataException {\n+    String nodeReg = MetaUtils.getNodeRegByIdx(idx, nodes);\n+    int cnt = 0;\n+    if (!(PATH_WILDCARD).equals(nodeReg)) {\n+      if (node.hasChild(nodeReg)) {\n+        if (node.getChild(nodeReg) instanceof MeasurementMNode && idx >= nodes.length) {\n+          cnt++;\n+        } else {\n+          cnt += getDevicesCount(node.getChild(nodeReg), nodes, idx + 1);\n+        }\n+      }\n+    } else {\n+      boolean deviceAdded = false;\n+      for (MNode child : node.getChildren().values()) {\n+        if (child instanceof MeasurementMNode) {\n+          if (!deviceAdded) {\n+            cnt++;\n+            deviceAdded = true;\n+          } else {\n+            break;\n+          }\n+        } else {\n+          cnt += getDevicesCount(child, nodes, idx + 1);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3fb198c9387fbdaa0c58d836e340b7091671d6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzMDE2MA==", "bodyText": "Ah.. good point. Maybe @yhwang-hbl could add a specific test case for this example ; )", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r485630160", "createdAt": "2020-09-09T13:53:59Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -695,6 +708,38 @@ private int getCount(MNode node, String[] nodes, int idx) throws MetadataExcepti\n     }\n   }\n \n+  /**\n+   * Traverse the MTree to get the count of devices.\n+   */\n+  private int getDevicesCount(MNode node, String[] nodes, int idx) throws MetadataException {\n+    String nodeReg = MetaUtils.getNodeRegByIdx(idx, nodes);\n+    int cnt = 0;\n+    if (!(PATH_WILDCARD).equals(nodeReg)) {\n+      if (node.hasChild(nodeReg)) {\n+        if (node.getChild(nodeReg) instanceof MeasurementMNode && idx >= nodes.length) {\n+          cnt++;\n+        } else {\n+          cnt += getDevicesCount(node.getChild(nodeReg), nodes, idx + 1);\n+        }\n+      }\n+    } else {\n+      boolean deviceAdded = false;\n+      for (MNode child : node.getChildren().values()) {\n+        if (child instanceof MeasurementMNode) {\n+          if (!deviceAdded) {\n+            cnt++;\n+            deviceAdded = true;\n+          } else {\n+            break;\n+          }\n+        } else {\n+          cnt += getDevicesCount(child, nodes, idx + 1);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNjkyNQ=="}, "originalCommit": {"oid": "7d3fb198c9387fbdaa0c58d836e340b7091671d6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxOTEyOA==", "bodyText": "Hi, we support subdevice like \"root.sg.device1.subdevice1.sensor1\" while subdevice1 is a measurementNode and a device. In your case, the subdevice1 will be ignored.\nYou can refer to the Mtree.findDevice() method.\nhi, I didn't know the concept of sub devices before. I did a self-test on my code, which will filter out the situation you said. I will improve it,thanks for your guidance", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r486019128", "createdAt": "2020-09-10T02:05:18Z", "author": {"login": "yanhongwangg"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -695,6 +708,38 @@ private int getCount(MNode node, String[] nodes, int idx) throws MetadataExcepti\n     }\n   }\n \n+  /**\n+   * Traverse the MTree to get the count of devices.\n+   */\n+  private int getDevicesCount(MNode node, String[] nodes, int idx) throws MetadataException {\n+    String nodeReg = MetaUtils.getNodeRegByIdx(idx, nodes);\n+    int cnt = 0;\n+    if (!(PATH_WILDCARD).equals(nodeReg)) {\n+      if (node.hasChild(nodeReg)) {\n+        if (node.getChild(nodeReg) instanceof MeasurementMNode && idx >= nodes.length) {\n+          cnt++;\n+        } else {\n+          cnt += getDevicesCount(node.getChild(nodeReg), nodes, idx + 1);\n+        }\n+      }\n+    } else {\n+      boolean deviceAdded = false;\n+      for (MNode child : node.getChildren().values()) {\n+        if (child instanceof MeasurementMNode) {\n+          if (!deviceAdded) {\n+            cnt++;\n+            deviceAdded = true;\n+          } else {\n+            break;\n+          }\n+        } else {\n+          cnt += getDevicesCount(child, nodes, idx + 1);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNjkyNQ=="}, "originalCommit": {"oid": "7d3fb198c9387fbdaa0c58d836e340b7091671d6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxOTQxMA==", "bodyText": "Ah.. good point. Maybe @yhwang-hbl could add a specific test case for this example ; )\n\nOK\uff0ci will improve it and add a test for the corresponding situation", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r486019410", "createdAt": "2020-09-10T02:06:20Z", "author": {"login": "yanhongwangg"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -695,6 +708,38 @@ private int getCount(MNode node, String[] nodes, int idx) throws MetadataExcepti\n     }\n   }\n \n+  /**\n+   * Traverse the MTree to get the count of devices.\n+   */\n+  private int getDevicesCount(MNode node, String[] nodes, int idx) throws MetadataException {\n+    String nodeReg = MetaUtils.getNodeRegByIdx(idx, nodes);\n+    int cnt = 0;\n+    if (!(PATH_WILDCARD).equals(nodeReg)) {\n+      if (node.hasChild(nodeReg)) {\n+        if (node.getChild(nodeReg) instanceof MeasurementMNode && idx >= nodes.length) {\n+          cnt++;\n+        } else {\n+          cnt += getDevicesCount(node.getChild(nodeReg), nodes, idx + 1);\n+        }\n+      }\n+    } else {\n+      boolean deviceAdded = false;\n+      for (MNode child : node.getChildren().values()) {\n+        if (child instanceof MeasurementMNode) {\n+          if (!deviceAdded) {\n+            cnt++;\n+            deviceAdded = true;\n+          } else {\n+            break;\n+          }\n+        } else {\n+          cnt += getDevicesCount(child, nodes, idx + 1);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNjkyNQ=="}, "originalCommit": {"oid": "7d3fb198c9387fbdaa0c58d836e340b7091671d6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzQzMTg1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBMetadataFetchIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNjo1MlrOHPHQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNjo1MlrOHPHQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwOTY5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.error(\"insertSQL failed\", e);\n          \n          \n            \n                  logger.error(\"insertSQL() failed\", e);", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r485609691", "createdAt": "2020-09-09T13:26:52Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBMetadataFetchIT.java", "diffHunk": "@@ -53,7 +56,7 @@ private static void insertSQL() throws ClassNotFoundException, SQLException {\n         statement.execute(sql);\n       }\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      logger.error(\"insertSQL failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3fb198c9387fbdaa0c58d836e340b7091671d6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzQzNDYxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBMetadataFetchIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNzozMFrOHPHSpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNzozMFrOHPHSpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxMDE1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      logger.error(\"showTimeseriesTest failed\", e);\n          \n          \n            \n                      logger.error(\"showTimeseriesTest() failed\", e);\n          \n      \n    \n    \n  \n\nOthers same :D", "url": "https://github.com/apache/iotdb/pull/1705#discussion_r485610150", "createdAt": "2020-09-09T13:27:30Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBMetadataFetchIT.java", "diffHunk": "@@ -118,7 +121,7 @@ public void showTimeseriesTest() throws ClassNotFoundException, SQLException {\n           }\n           Assert.assertEquals(standard, builder.toString());\n         } catch (SQLException e) {\n-          e.printStackTrace();\n+          logger.error(\"showTimeseriesTest failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3fb198c9387fbdaa0c58d836e340b7091671d6"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 694, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}