{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzI4NTY5", "number": 763, "title": "[IOTDB-448]Add IN operation", "bodyText": "This pr is to add 'IN' and 'NOT IN' operators in where clause.\nFor example:\nSELECT * FROM root.vehicle where time =  2016-11-30 10:00:00 and d0 IN (80,100,150,200,250,300);\n\nSELECT * FROM root.vehicle where time =  2016-11-30 10:00:00 and d0 NOT IN (80,100,150,200,250,300);\n\nThe Jira link is: https://issues.apache.org/jira/browse/IOTDB-448", "createdAt": "2020-02-03T13:47:53Z", "url": "https://github.com/apache/iotdb/pull/763", "merged": true, "mergeCommit": {"oid": "db7e8eb4bd31fa93f7989b20111eb50eb272eafa"}, "closed": true, "closedAt": "2020-02-05T08:19:59Z", "author": {"login": "fanhualta"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAs73vAH2gAyMzcwMzI4NTY5OjZiNmJmZTQ5YTU2ZTFjNDJkMTRhZTNiNTIxNzE2Y2M3NDJhM2IxNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBQUzygFqTM1MzQ5MzQzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6b6bfe49a56e1c42d14ae3b521716cc742a3b158", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/6b6bfe49a56e1c42d14ae3b521716cc742a3b158", "committedDate": "2020-02-03T13:27:18Z", "message": "add IN operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd4840b4028f060b02afcb892309798a65ff1b31", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/dd4840b4028f060b02afcb892309798a65ff1b31", "committedDate": "2020-02-03T13:43:07Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41423723916e207d4fa88bb1838c53df9d1d53a9", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/41423723916e207d4fa88bb1838c53df9d1d53a9", "committedDate": "2020-02-04T01:51:14Z", "message": "fix sonar issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a92ab9d5a6104f71d32ee824c521bddc32bf1b8e", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/a92ab9d5a6104f71d32ee824c521bddc32bf1b8e", "committedDate": "2020-02-04T01:43:43Z", "message": "fix sonar issues"}, "afterCommit": {"oid": "41423723916e207d4fa88bb1838c53df9d1d53a9", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/41423723916e207d4fa88bb1838c53df9d1d53a9", "committedDate": "2020-02-04T01:51:14Z", "message": "fix sonar issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f", "committedDate": "2020-02-04T02:18:58Z", "message": "add ut test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjg5NTk3", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-352689597", "createdAt": "2020-02-04T02:24:36Z", "commit": {"oid": "09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoyNDozNlrOFlGT2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoyNDozNlrOFlGT2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0NTAxOQ==", "bodyText": "This can be just OPERATOR_IN : I N;. The result is the same.", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374445019", "createdAt": "2020-02-04T02:24:36Z", "author": {"login": "Ring-k"}, "path": "server/src/main/antlr4/org/apache/iotdb/db/qp/strategy/SqlBase.g4", "diffHunk": "@@ -750,6 +754,8 @@ OPERATOR_LTE : '<=';\n \n OPERATOR_NEQ : '!=' | '<>';\n \n+OPERATOR_IN : 'IN' | 'in' | 'In' | 'iN';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efec75b27e7df89cc01eb1a2a29c39cc03e30879", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/efec75b27e7df89cc01eb1a2a29c39cc03e30879", "committedDate": "2020-02-04T02:44:14Z", "message": "modify anltr4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjk2NTA2", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-352696506", "createdAt": "2020-02-04T02:51:56Z", "commit": {"oid": "09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjo1MTo1NlrOFlGrgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjo1MTo1NlrOFlGrgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1MTA3NA==", "bodyText": "is it necessary to store valueToString? we could generate valueToString in toString method", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374451074", "createdAt": "2020-02-04T02:51:56Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/operator/In.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.tsfile.read.filter.operator;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.filter.factory.FilterSerializeId;\n+import org.apache.iotdb.tsfile.read.filter.factory.FilterType;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+/**\n+ * in clause.\n+ *\n+ * @param <T> comparable data type\n+ */\n+public class In<T extends Comparable<T>> implements Filter {\n+\n+  private static final long serialVersionUID = 8572705136773595399L;\n+\n+  private Set<T> values;\n+\n+  private boolean not;\n+\n+  private String valueToString;\n+\n+  private FilterType filterType;\n+\n+  public In() {\n+  }\n+\n+  public In(Set<T> values, FilterType filterType, boolean not, String valueToString) {\n+    this.values = values;\n+    this.filterType = filterType;\n+    this.not = not;\n+    this.valueToString = valueToString;\n+  }\n+\n+  @Override\n+  public boolean satisfy(Statistics statistics) {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean satisfy(long time, Object value) {\n+    Object v = filterType == FilterType.TIME_FILTER ? time : value;\n+    return this.values.contains(v) != not;\n+  }\n+\n+  @Override\n+  public boolean satisfyStartEndTime(long startTime, long endTime) {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean containStartEndTime(long startTime, long endTime) {\n+    return true;\n+  }\n+\n+  @Override\n+  public Filter clone() {\n+    return new In(values, filterType, not, valueToString);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream outputStream) {\n+    try {\n+      outputStream.write(getSerializeId().ordinal());\n+      outputStream.write(filterType.ordinal());\n+      ReadWriteIOUtils.write(not, outputStream);\n+      ReadWriteIOUtils.write(valueToString, outputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzAyNDg0", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-352702484", "createdAt": "2020-02-04T03:16:28Z", "commit": {"oid": "efec75b27e7df89cc01eb1a2a29c39cc03e30879"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d652f6cf396ee6cba03e380890666819b0bd772", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/8d652f6cf396ee6cba03e380890666819b0bd772", "committedDate": "2020-02-04T03:18:10Z", "message": "remove valueToString"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzAxODU5", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-352701859", "createdAt": "2020-02-04T03:13:55Z", "commit": {"oid": "efec75b27e7df89cc01eb1a2a29c39cc03e30879"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoxMzo1NVrOFlG8xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoxNjowMFrOFlG-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTQ5Mg==", "bodyText": "return null isn't a good idea, It is really necessary to use try-catch and log in here?", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374455492", "createdAt": "2020-02-04T03:13:55Z", "author": {"login": "Genius-pig"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.logical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.path.PathException;\n+import org.apache.iotdb.db.exception.query.LogicalOperatorException;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.qp.executor.IQueryProcessExecutor;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.expression.IUnaryExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.GlobalTimeExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n+import org.apache.iotdb.tsfile.read.filter.TimeFilter;\n+import org.apache.iotdb.tsfile.read.filter.ValueFilter;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * operator 'in' 'not in'\n+ */\n+public class InOperator extends FunctionOperator {\n+\n+  private boolean not;\n+  protected Set<String> values;\n+  private String valueToString;\n+  private Logger logger = LoggerFactory.getLogger(InOperator.class);\n+\n+  /**\n+   * In Operator Constructor.\n+   *\n+   * @param tokenIntType token in Int Type\n+   * @param path path\n+   * @param values values\n+   * @throws LogicalOperatorException Logical Operator Exception\n+   */\n+  public InOperator(int tokenIntType, Path path, boolean not, Set<String> values) {\n+    super(tokenIntType);\n+    operatorType = Operator.OperatorType.IN;\n+    this.singlePath = path;\n+    this.values = values;\n+    this.not = not;\n+    List<String> valuesList = new ArrayList<>(values);\n+    Collections.sort(valuesList);\n+    this.valueToString = valuesList.toString();\n+    isLeaf = true;\n+    isSingle = true;\n+  }\n+\n+  public Set<String> getValues() {\n+    return values;\n+  }\n+\n+  @Override\n+  public void reverseFunc() {\n+    not = !not;\n+  }\n+\n+  @Override\n+  protected Pair<IUnaryExpression, String> transformToSingleQueryFilter(\n+      IQueryProcessExecutor executor) throws LogicalOperatorException, PathException {\n+    TSDataType type = executor.getSeriesType(singlePath);\n+    if (type == null) {\n+      throw new PathException(\n+          \"given seriesPath:{\" + singlePath.getFullPath() + \"} don't exist in metadata\");\n+    }\n+    IUnaryExpression ret;\n+\n+    switch (type) {\n+      case INT32:\n+        Set<Integer> integerValues = new HashSet<>();\n+        for (String val : values) {\n+          integerValues.add(Integer.valueOf(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, integerValues, not, valueToString);\n+        break;\n+      case INT64:\n+        Set<Long> longValues = new HashSet<>();\n+        for (String val : values) {\n+          longValues.add(Long.valueOf(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, longValues, not, valueToString);\n+        break;\n+      case BOOLEAN:\n+        Set<Boolean> booleanValues = new HashSet<>();\n+        for (String val : values) {\n+          booleanValues.add(Boolean.valueOf(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, booleanValues, not, valueToString);\n+        break;\n+      case FLOAT:\n+        Set<Float> floatValues = new HashSet<>();\n+        for (String val : values) {\n+          floatValues.add(Float.parseFloat(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, floatValues, not, valueToString);\n+        break;\n+      case DOUBLE:\n+        Set<Double> doubleValues = new HashSet<>();\n+        for (String val : values) {\n+          doubleValues.add(Double.parseDouble(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, doubleValues, not, valueToString);\n+        break;\n+      case TEXT:\n+        Set<Binary> binaryValues = new HashSet<>();\n+        for (String val : values) {\n+          binaryValues.add(\n+              (val.startsWith(\"'\") && val.endsWith(\"'\")) || (val.startsWith(\"\\\"\") && val\n+                  .endsWith(\"\\\"\")) ? new Binary(val.substring(1, val.length() - 1))\n+                  : new Binary(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, binaryValues, not, valueToString);\n+        break;\n+      default:\n+        throw new LogicalOperatorException(type.toString(), \"\");\n+    }\n+\n+    return new Pair<>(ret, singlePath.getFullPath());\n+  }\n+\n+  @Override\n+  public String showTree(int spaceNum) {\n+    StringContainer sc = new StringContainer();\n+    for (int i = 0; i < spaceNum; i++) {\n+      sc.addTail(\"  \");\n+    }\n+    sc.addTail(singlePath.toString(), this.tokenSymbol, not, valueToString, \", single\\n\");\n+    return sc.toString();\n+  }\n+\n+  @Override\n+  public InOperator clone() {\n+    InOperator ret;\n+    try {\n+      ret = new InOperator(this.tokenIntType, singlePath.clone(), not, new HashSet<>(values));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efec75b27e7df89cc01eb1a2a29c39cc03e30879"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTkwOQ==", "bodyText": "seems like you don't throw an exception here, the annotation is unnecessary.", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374455909", "createdAt": "2020-02-04T03:16:00Z", "author": {"login": "Genius-pig"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.logical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.path.PathException;\n+import org.apache.iotdb.db.exception.query.LogicalOperatorException;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.qp.executor.IQueryProcessExecutor;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.expression.IUnaryExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.GlobalTimeExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n+import org.apache.iotdb.tsfile.read.filter.TimeFilter;\n+import org.apache.iotdb.tsfile.read.filter.ValueFilter;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * operator 'in' 'not in'\n+ */\n+public class InOperator extends FunctionOperator {\n+\n+  private boolean not;\n+  protected Set<String> values;\n+  private String valueToString;\n+  private Logger logger = LoggerFactory.getLogger(InOperator.class);\n+\n+  /**\n+   * In Operator Constructor.\n+   *\n+   * @param tokenIntType token in Int Type\n+   * @param path path\n+   * @param values values\n+   * @throws LogicalOperatorException Logical Operator Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efec75b27e7df89cc01eb1a2a29c39cc03e30879"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzA2MTUx", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-352706151", "createdAt": "2020-02-04T03:32:20Z", "commit": {"oid": "8d652f6cf396ee6cba03e380890666819b0bd772"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzozMjoyMFrOFlHKlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzozMjoyMFrOFlHKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1OTAyOQ==", "bodyText": "If path = null, can we throw a self-defined exception instead of NullPointer exception?", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374459029", "createdAt": "2020-02-04T03:32:20Z", "author": {"login": "Genius-pig"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1167,31 +1176,52 @@ private FilterOperator parsePredicate(PredicateContext ctx) {\n       return parseOrExpression(ctx.orExpression());\n     } else {\n       Path path = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d652f6cf396ee6cba03e380890666819b0bd772"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzA5NTY3", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-352709567", "createdAt": "2020-02-04T03:48:17Z", "commit": {"oid": "8d652f6cf396ee6cba03e380890666819b0bd772"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b34e3e3b04d8fba08e8fe3a8c40921f9ad71ba2", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/8b34e3e3b04d8fba08e8fe3a8c40921f9ad71ba2", "committedDate": "2020-02-04T05:53:13Z", "message": "remove useless codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzQ1MzIw", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-352745320", "createdAt": "2020-02-04T06:21:56Z", "commit": {"oid": "8b34e3e3b04d8fba08e8fe3a8c40921f9ad71ba2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16b3606db26fbeec1e429591fcc5410e3982de09", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/16b3606db26fbeec1e429591fcc5410e3982de09", "committedDate": "2020-02-04T06:27:29Z", "message": "remove useless import"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85c43c669ac8a36684ebe699976e6efa77fdb7bb", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/85c43c669ac8a36684ebe699976e6efa77fdb7bb", "committedDate": "2020-02-04T07:51:24Z", "message": "add timeout in sync client"}, "afterCommit": {"oid": "16b3606db26fbeec1e429591fcc5410e3982de09", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/16b3606db26fbeec1e429591fcc5410e3982de09", "committedDate": "2020-02-04T06:27:29Z", "message": "remove useless import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDIzMzM3", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-353423337", "createdAt": "2020-02-05T01:53:38Z", "commit": {"oid": "16b3606db26fbeec1e429591fcc5410e3982de09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "committedDate": "2020-02-05T02:04:49Z", "message": "fix sonar issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3e7204e5362aef532ad75dce4ad53d94e3a1100", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/f3e7204e5362aef532ad75dce4ad53d94e3a1100", "committedDate": "2020-02-05T02:03:23Z", "message": "fix sonar issues"}, "afterCommit": {"oid": "555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "committedDate": "2020-02-05T02:04:49Z", "message": "fix sonar issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4049532fa3fbc74a9a91461878eb6b0c5f8f9c0", "author": {"user": {"login": "fanhualta", "name": "Tianan Li"}}, "url": "https://github.com/apache/iotdb/commit/d4049532fa3fbc74a9a91461878eb6b0c5f8f9c0", "committedDate": "2020-02-05T02:50:45Z", "message": "fix sonar issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDkzNDMy", "url": "https://github.com/apache/iotdb/pull/763#pullrequestreview-353493432", "createdAt": "2020-02-05T06:41:13Z", "commit": {"oid": "d4049532fa3fbc74a9a91461878eb6b0c5f8f9c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3273, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}