{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTUxMDY4", "number": 1356, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo1NzoyNlrOEFBJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo1ODowM1rOEFBJ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjk3MDg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo1NzoyNlrOGi_2ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo1Njo0NlrOGjVGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1MDk3MA==", "bodyText": "useless import", "url": "https://github.com/apache/iotdb/pull/1356#discussion_r439350970", "createdAt": "2020-06-12T10:57:26Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java", "diffHunk": "@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b783cb265544d019e5d298cd78c2a1c8c318528"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5ODk1Mw==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1356#discussion_r439698953", "createdAt": "2020-06-13T01:56:46Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java", "diffHunk": "@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1MDk3MA=="}, "originalCommit": {"oid": "8b783cb265544d019e5d298cd78c2a1c8c318528"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjk3MjU5OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo1ODowM1rOGi_32g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo1Njo1MVrOGjVGDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1MTI1OA==", "bodyText": "useless import: java.util.concurrent.locks.Lock", "url": "https://github.com/apache/iotdb/pull/1356#discussion_r439351258", "createdAt": "2020-06-12T10:58:03Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkCache.java", "diffHunk": "@@ -93,40 +93,33 @@ public Chunk get(ChunkMetadata chunkMetaData, TsFileSequenceReader reader) throw\n \n     try {\n       lock.readLock().lock();\n-      if (lruCache.containsKey(chunkMetaData)) {\n+      Chunk chunk = lruCache.get(chunkMetaData);\n+      if (chunk != null) {\n         cacheHitNum.incrementAndGet();\n         printCacheLog(true);\n-        Chunk chunk = lruCache.get(chunkMetaData);\n         return new Chunk(chunk.getHeader(), chunk.getData().duplicate(), chunk.getDeletedAt());\n       }\n     } finally {\n       lock.readLock().unlock();\n     }\n \n-    Lock cacheLock = lock.writeLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b783cb265544d019e5d298cd78c2a1c8c318528"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5ODk1Nw==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1356#discussion_r439698957", "createdAt": "2020-06-13T01:56:51Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkCache.java", "diffHunk": "@@ -93,40 +93,33 @@ public Chunk get(ChunkMetadata chunkMetaData, TsFileSequenceReader reader) throw\n \n     try {\n       lock.readLock().lock();\n-      if (lruCache.containsKey(chunkMetaData)) {\n+      Chunk chunk = lruCache.get(chunkMetaData);\n+      if (chunk != null) {\n         cacheHitNum.incrementAndGet();\n         printCacheLog(true);\n-        Chunk chunk = lruCache.get(chunkMetaData);\n         return new Chunk(chunk.getHeader(), chunk.getData().duplicate(), chunk.getDeletedAt());\n       }\n     } finally {\n       lock.readLock().unlock();\n     }\n \n-    Lock cacheLock = lock.writeLock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1MTI1OA=="}, "originalCommit": {"oid": "8b783cb265544d019e5d298cd78c2a1c8c318528"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4935, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}