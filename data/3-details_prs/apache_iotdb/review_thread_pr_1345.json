{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzkzMjAw", "number": 1345, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozNDoyOFrOEEnKFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToyMzo1NlrOEF2yiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjcxMzE4OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozNDoyOFrOGiV0oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1ODo1M1rOGieuew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * write if the object not equals null. Eg, object eauals null, then write false.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * write if the object equals null. Eg, object equals null, then write true.\n          \n          \n            \n               */", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r438662304", "createdAt": "2020-06-11T09:34:28Z", "author": {"login": "HTHou"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "diffHunk": "@@ -105,15 +105,15 @@ public static byte readByte(ByteBuffer buffer) {\n   /**\n    * write if the object not equals null. Eg, object eauals null, then write false.\n    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdc587bb23b030ee79b674918c48cb687397f6ca"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwODE4Nw==", "bodyText": "Thanks for the good catch !!!", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r438808187", "createdAt": "2020-06-11T13:58:53Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "diffHunk": "@@ -105,15 +105,15 @@ public static byte readByte(ByteBuffer buffer) {\n   /**\n    * write if the object not equals null. Eg, object eauals null, then write false.\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjMwNA=="}, "originalCommit": {"oid": "bdc587bb23b030ee79b674918c48cb687397f6ca"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjcxOTA0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozNjowNlrOGiV4Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1ODo1OFrOGieuvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MzIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * write if the object not equals null. Eg, object eauals null, then write false.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * write if the object equals null. Eg, object equals null, then write true.\n          \n          \n            \n               */", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r438663235", "createdAt": "2020-06-11T09:36:06Z", "author": {"login": "HTHou"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "diffHunk": "@@ -105,15 +105,15 @@ public static byte readByte(ByteBuffer buffer) {\n   /**\n    * write if the object not equals null. Eg, object eauals null, then write false.\n    */\n-  public static int writeIsNotNull(Object object, OutputStream outputStream) throws IOException {\n-    return write(object != null, outputStream);\n+  public static int writeIsNull(Object object, OutputStream outputStream) throws IOException {\n+    return write(object == null, outputStream);\n   }\n \n   /**\n    * write if the object not equals null. Eg, object eauals null, then write false.\n    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdc587bb23b030ee79b674918c48cb687397f6ca"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwODI1Mg==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r438808252", "createdAt": "2020-06-11T13:58:58Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "diffHunk": "@@ -105,15 +105,15 @@ public static byte readByte(ByteBuffer buffer) {\n   /**\n    * write if the object not equals null. Eg, object eauals null, then write false.\n    */\n-  public static int writeIsNotNull(Object object, OutputStream outputStream) throws IOException {\n-    return write(object != null, outputStream);\n+  public static int writeIsNull(Object object, OutputStream outputStream) throws IOException {\n+    return write(object == null, outputStream);\n   }\n \n   /**\n    * write if the object not equals null. Eg, object eauals null, then write false.\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MzIzNQ=="}, "originalCommit": {"oid": "bdc587bb23b030ee79b674918c48cb687397f6ca"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzkxMzcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToxMTozMlrOGihy9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoyNjo1MFrOGjsUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1ODQ4Nw==", "bodyText": "I'm not sure about this. Whether should we change the lock logic of this method? As the measurementNode maybe internalNode now.", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r438858487", "createdAt": "2020-06-11T15:11:32Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -44,49 +57,100 @@\n    */\n   protected String fullPath;\n \n+  Map<String, MNode> children;\n+  Map<String, MNode> aliasChildren;\n+\n+  protected ReadWriteLock lock = new ReentrantReadWriteLock();\n \n   /**\n    * Constructor of MNode.\n    */\n   public MNode(MNode parent, String name) {\n     this.parent = parent;\n     this.name = name;\n+    this.children = new LinkedHashMap<>();\n   }\n \n   /**\n    * check whether the MNode has a child with the name\n    */\n-  public abstract boolean hasChild(String name);\n+  public boolean hasChild(String name) {\n+    return this.children.containsKey(name) ||\n+        (aliasChildren != null && aliasChildren.containsKey(name));\n+  }\n \n   /**\n    * node key, name or alias\n    */\n-  public abstract void addChild(String name, MNode child);\n+  public void addChild(String name, MNode child) {\n+    children.put(name, child);\n+  }\n \n   /**\n-   * delete a child\n+   * If delete a leafMNode, lock its parent, if delete an InternalNode, lock itself\n    */\n-  public abstract void deleteChild(String name) throws DeleteFailedException;\n+  public void deleteChild(String name) throws DeleteFailedException {\n+    if (children.containsKey(name)) {\n+      Lock writeLock;\n+      // if its child node is leaf node, we need to acquire the write lock of the current device node\n+      if (children.get(name) instanceof MeasurementMNode) {\n+        writeLock = lock.writeLock();\n+      } else {\n+        // otherwise, we only need to acquire the write lock of its child node.\n+        writeLock = (children.get(name)).lock.writeLock();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bab6c699c7b4aa8e53549514bfe293833cc4faf"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3OTU0OA==", "bodyText": "Good point, thanks! I've fixed it.", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440079548", "createdAt": "2020-06-15T10:26:50Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -44,49 +57,100 @@\n    */\n   protected String fullPath;\n \n+  Map<String, MNode> children;\n+  Map<String, MNode> aliasChildren;\n+\n+  protected ReadWriteLock lock = new ReentrantReadWriteLock();\n \n   /**\n    * Constructor of MNode.\n    */\n   public MNode(MNode parent, String name) {\n     this.parent = parent;\n     this.name = name;\n+    this.children = new LinkedHashMap<>();\n   }\n \n   /**\n    * check whether the MNode has a child with the name\n    */\n-  public abstract boolean hasChild(String name);\n+  public boolean hasChild(String name) {\n+    return this.children.containsKey(name) ||\n+        (aliasChildren != null && aliasChildren.containsKey(name));\n+  }\n \n   /**\n    * node key, name or alias\n    */\n-  public abstract void addChild(String name, MNode child);\n+  public void addChild(String name, MNode child) {\n+    children.put(name, child);\n+  }\n \n   /**\n-   * delete a child\n+   * If delete a leafMNode, lock its parent, if delete an InternalNode, lock itself\n    */\n-  public abstract void deleteChild(String name) throws DeleteFailedException;\n+  public void deleteChild(String name) throws DeleteFailedException {\n+    if (children.containsKey(name)) {\n+      Lock writeLock;\n+      // if its child node is leaf node, we need to acquire the write lock of the current device node\n+      if (children.get(name) instanceof MeasurementMNode) {\n+        writeLock = lock.writeLock();\n+      } else {\n+        // otherwise, we only need to acquire the write lock of its child node.\n+        writeLock = (children.get(name)).lock.writeLock();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1ODQ4Nw=="}, "originalCommit": {"oid": "5bab6c699c7b4aa8e53549514bfe293833cc4faf"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTUxMDIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoxOTowMFrOGkQaqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozNzozNFrOGkRH_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MDg5MA==", "bodyText": "init when used", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440670890", "createdAt": "2020-06-16T08:19:00Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -44,49 +53,96 @@\n    */\n   protected String fullPath;\n \n+  transient Map<String, MNode> children;\n+  transient Map<String, MNode> aliasChildren;\n+\n+  protected transient ReadWriteLock lock = new ReentrantReadWriteLock();\n \n   /**\n    * Constructor of MNode.\n    */\n   public MNode(MNode parent, String name) {\n     this.parent = parent;\n     this.name = name;\n+    this.children = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cad616f88c4be86170a88d646b2282893a2aaf2a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MjQ5Mg==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440682492", "createdAt": "2020-06-16T08:37:34Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -44,49 +53,96 @@\n    */\n   protected String fullPath;\n \n+  transient Map<String, MNode> children;\n+  transient Map<String, MNode> aliasChildren;\n+\n+  protected transient ReadWriteLock lock = new ReentrantReadWriteLock();\n \n   /**\n    * Constructor of MNode.\n    */\n   public MNode(MNode parent, String name) {\n     this.parent = parent;\n     this.name = name;\n+    this.children = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MDg5MA=="}, "originalCommit": {"oid": "cad616f88c4be86170a88d646b2282893a2aaf2a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTYyODE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0OToxNFrOGkRlRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo1OTo0NFrOGkSAPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4OTk5MA==", "bodyText": "MNode child = null;\nif (children != null) {\nchild = children.get(name);\n}\nif (child != null) {\nreturn child;\n}", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440689990", "createdAt": "2020-06-16T08:49:14Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -56,37 +69,85 @@ public MNode(MNode parent, String name) {\n   /**\n    * check whether the MNode has a child with the name\n    */\n-  public abstract boolean hasChild(String name);\n+  public boolean hasChild(String name) {\n+    return (children != null && children.containsKey(name)) ||\n+        (aliasChildren != null && aliasChildren.containsKey(name));\n+  }\n \n   /**\n    * node key, name or alias\n    */\n-  public abstract void addChild(String name, MNode child);\n+  public void addChild(String name, MNode child) {\n+    if (children == null) {\n+      children = new LinkedHashMap<>();\n+    }\n+    children.put(name, child);\n+  }\n \n   /**\n-   * delete a child\n+   * If delete a leafMNode, lock its parent, if delete an InternalNode, lock itself\n    */\n-  public abstract void deleteChild(String name) throws DeleteFailedException;\n+  public void deleteChild(String name) throws DeleteFailedException {\n+    if (children != null && children.containsKey(name)) {\n+      // acquire the write lock of its child node.\n+      Lock writeLock = (children.get(name)).lock.writeLock();\n+      if (writeLock.tryLock()) {\n+        children.remove(name);\n+        writeLock.unlock();\n+      } else {\n+        throw new DeleteFailedException(getFullPath() + PATH_SEPARATOR + name);\n+      }\n+    }\n+  }\n \n   /**\n    * delete the alias of a child\n    */\n-  public abstract void deleteAliasChild(String alias) throws DeleteFailedException;\n+  public void deleteAliasChild(String alias) throws DeleteFailedException {\n+    if (aliasChildren == null) {\n+      return;\n+    }\n+    if (lock.writeLock().tryLock()) {\n+      aliasChildren.remove(alias);\n+      lock.writeLock().unlock();\n+    } else {\n+      throw new DeleteFailedException(getFullPath() + PATH_SEPARATOR + alias);\n+    }\n+  }\n \n   /**\n    * get the child with the name\n    */\n-  public abstract MNode getChild(String name);\n+  public MNode getChild(String name) {\n+    if (children != null && children.containsKey(name)) {\n+      return children.get(name);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8f0af7b8600abba6d62019adaae82d95f2bf23"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5Njg5NQ==", "bodyText": "Thanks!", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440696895", "createdAt": "2020-06-16T08:59:44Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -56,37 +69,85 @@ public MNode(MNode parent, String name) {\n   /**\n    * check whether the MNode has a child with the name\n    */\n-  public abstract boolean hasChild(String name);\n+  public boolean hasChild(String name) {\n+    return (children != null && children.containsKey(name)) ||\n+        (aliasChildren != null && aliasChildren.containsKey(name));\n+  }\n \n   /**\n    * node key, name or alias\n    */\n-  public abstract void addChild(String name, MNode child);\n+  public void addChild(String name, MNode child) {\n+    if (children == null) {\n+      children = new LinkedHashMap<>();\n+    }\n+    children.put(name, child);\n+  }\n \n   /**\n-   * delete a child\n+   * If delete a leafMNode, lock its parent, if delete an InternalNode, lock itself\n    */\n-  public abstract void deleteChild(String name) throws DeleteFailedException;\n+  public void deleteChild(String name) throws DeleteFailedException {\n+    if (children != null && children.containsKey(name)) {\n+      // acquire the write lock of its child node.\n+      Lock writeLock = (children.get(name)).lock.writeLock();\n+      if (writeLock.tryLock()) {\n+        children.remove(name);\n+        writeLock.unlock();\n+      } else {\n+        throw new DeleteFailedException(getFullPath() + PATH_SEPARATOR + name);\n+      }\n+    }\n+  }\n \n   /**\n    * delete the alias of a child\n    */\n-  public abstract void deleteAliasChild(String alias) throws DeleteFailedException;\n+  public void deleteAliasChild(String alias) throws DeleteFailedException {\n+    if (aliasChildren == null) {\n+      return;\n+    }\n+    if (lock.writeLock().tryLock()) {\n+      aliasChildren.remove(alias);\n+      lock.writeLock().unlock();\n+    } else {\n+      throw new DeleteFailedException(getFullPath() + PATH_SEPARATOR + alias);\n+    }\n+  }\n \n   /**\n    * get the child with the name\n    */\n-  public abstract MNode getChild(String name);\n+  public MNode getChild(String name) {\n+    if (children != null && children.containsKey(name)) {\n+      return children.get(name);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4OTk5MA=="}, "originalCommit": {"oid": "fd8f0af7b8600abba6d62019adaae82d95f2bf23"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTc2MDA5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToyMzo1NlrOGkS5pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1NzozMlrOGkUIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMTU4OQ==", "bodyText": "ah..... String.format or StringBuilder?", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440711589", "createdAt": "2020-06-16T09:23:56Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -127,4 +201,43 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void setChildren(Map<String, MNode> children) {\n+    this.children = children;\n+  }\n+\n+  public void serializeTo(BufferedWriter bw) throws IOException {\n+    serializeChildren(bw);\n+\n+    String s = String.valueOf(MetadataConstant.MNODE_TYPE);\n+    s += \",\" + name + \",\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "878b317cd1fd76b0a712173f9291c46564df560f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNzA5Nw==", "bodyText": "Actually it's the IDE that recommends me to use String instead of StringBuilder...", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440717097", "createdAt": "2020-06-16T09:32:59Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -127,4 +201,43 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void setChildren(Map<String, MNode> children) {\n+    this.children = children;\n+  }\n+\n+  public void serializeTo(BufferedWriter bw) throws IOException {\n+    serializeChildren(bw);\n+\n+    String s = String.valueOf(MetadataConstant.MNODE_TYPE);\n+    s += \",\" + name + \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMTU4OQ=="}, "originalCommit": {"oid": "878b317cd1fd76b0a712173f9291c46564df560f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTIzNQ==", "bodyText": "I'll try String.format", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440719235", "createdAt": "2020-06-16T09:36:32Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -127,4 +201,43 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void setChildren(Map<String, MNode> children) {\n+    this.children = children;\n+  }\n+\n+  public void serializeTo(BufferedWriter bw) throws IOException {\n+    serializeChildren(bw);\n+\n+    String s = String.valueOf(MetadataConstant.MNODE_TYPE);\n+    s += \",\" + name + \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMTU4OQ=="}, "originalCommit": {"oid": "878b317cd1fd76b0a712173f9291c46564df560f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMDc2Nw==", "bodyText": "And another serialization method has the same issue.\nMy another question is,... seems these serialize() methods are not used...", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440720767", "createdAt": "2020-06-16T09:39:04Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -127,4 +201,43 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void setChildren(Map<String, MNode> children) {\n+    this.children = children;\n+  }\n+\n+  public void serializeTo(BufferedWriter bw) throws IOException {\n+    serializeChildren(bw);\n+\n+    String s = String.valueOf(MetadataConstant.MNODE_TYPE);\n+    s += \",\" + name + \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMTU4OQ=="}, "originalCommit": {"oid": "878b317cd1fd76b0a712173f9291c46564df560f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTE0MQ==", "bodyText": "Fixed. These methods will be used in my next PR for issue IOTDB-726", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440725141", "createdAt": "2020-06-16T09:46:24Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -127,4 +201,43 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void setChildren(Map<String, MNode> children) {\n+    this.children = children;\n+  }\n+\n+  public void serializeTo(BufferedWriter bw) throws IOException {\n+    serializeChildren(bw);\n+\n+    String s = String.valueOf(MetadataConstant.MNODE_TYPE);\n+    s += \",\" + name + \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMTU4OQ=="}, "originalCommit": {"oid": "878b317cd1fd76b0a712173f9291c46564df560f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMTcyOQ==", "bodyText": "Emm...  As is mentioned in this page which compares the performance between String.format and StringBuilder thanks to @Alima777 , I'll use StringBuilder anyway.", "url": "https://github.com/apache/iotdb/pull/1345#discussion_r440731729", "createdAt": "2020-06-16T09:57:32Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -127,4 +201,43 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void setChildren(Map<String, MNode> children) {\n+    this.children = children;\n+  }\n+\n+  public void serializeTo(BufferedWriter bw) throws IOException {\n+    serializeChildren(bw);\n+\n+    String s = String.valueOf(MetadataConstant.MNODE_TYPE);\n+    s += \",\" + name + \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMTU4OQ=="}, "originalCommit": {"oid": "878b317cd1fd76b0a712173f9291c46564df560f"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4932, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}