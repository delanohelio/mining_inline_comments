{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NTUyMTUz", "number": 913, "title": "[IOTDB-500] Let timeColumn and batchData store time in the same struct", "bodyText": "", "createdAt": "2020-03-15T03:47:00Z", "url": "https://github.com/apache/iotdb/pull/913", "merged": true, "mergeCommit": {"oid": "a3646a34d70c1a91c80578a2c735a7cf4f488523"}, "closed": true, "closedAt": "2020-03-17T07:40:34Z", "author": {"login": "liutaohua"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcN6BnCgH2gAyMzg4NTUyMTUzOmZmYTRlNTcyNDNmOGU2NDFlNjdhNWVjNzE5ZTBhNzZiZDI5OGIyOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOdtTSgFqTM3NTc5NTU5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ffa4e57243f8e641e67a5ec719e0a76bd298b290", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/ffa4e57243f8e641e67a5ec719e0a76bd298b290", "committedDate": "2020-03-15T14:03:21Z", "message": "[IOTDB-500] Let timeColumn and batchData store time in the same struct\n\nsimple clone timeRet\n\nfix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de98ed7384f6bd5072e221526783c40c4ab21aea", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/de98ed7384f6bd5072e221526783c40c4ab21aea", "committedDate": "2020-03-15T14:35:28Z", "message": "make code clean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255a78d664a7f526681c701f578185c3f1b2698e", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/255a78d664a7f526681c701f578185c3f1b2698e", "committedDate": "2020-03-15T14:46:06Z", "message": "make code clean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/10461382d788a7ce187fba4d76c375818dbd5f17", "committedDate": "2020-03-15T14:59:54Z", "message": "del DYNAMIC_DATA_SIZE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODgyNjc2", "url": "https://github.com/apache/iotdb/pull/913#pullrequestreview-374882676", "createdAt": "2020-03-16T02:35:18Z", "commit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODg1NDY5", "url": "https://github.com/apache/iotdb/pull/913#pullrequestreview-374885469", "createdAt": "2020-03-16T02:48:04Z", "commit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo0ODowNVrOF2kLAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo1MzoyOFrOF2kO1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDA2Nw==", "bodyText": "Remove this useless import", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760067", "createdAt": "2020-03-16T02:48:05Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import org.apache.iotdb.tsfile.common.conf.TSFileConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDU4OQ==", "bodyText": "How about using List here", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760589", "createdAt": "2020-03-16T02:50:55Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDYzMw==", "bodyText": "Also use List", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760633", "createdAt": "2020-03-16T02:51:12Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDkyMg==", "bodyText": "could be simpliy:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else if (readCurListIndex == writeCurListIndex) {\n          \n          \n            \n                  return readCurArrayIndex < writeCurArrayIndex;\n          \n          \n            \n                } else {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n                } else {\n          \n          \n            \n                  return readCurListIndex == writeCurListIndex && readCurArrayIndex < writeCurArrayIndex;\n          \n          \n            \n                }", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760922", "createdAt": "2020-03-16T02:52:45Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {\n+    this.count = count;\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n \n+    while (capacity < capacityThreshold) {\n+      capacity <<= 1;\n+    }\n \n-  public TimeColumn(long[] times) {\n-    this.times = times;\n+    this.writeCurListIndex = count / capacity;\n+    this.writeCurArrayIndex = count & (capacity - 1);\n+    this.timeRet = timeRet;\n   }\n \n   public void add(long time) {\n-    if (size == times.length) {\n-      long[] newArray = new long[times.length * 2];\n-      System.arraycopy(times, 0, newArray, 0, times.length);\n-      times = newArray;\n+    if (writeCurArrayIndex == capacity) {\n+      if (capacity >= capacityThreshold) {\n+        timeRet.add(new long[capacity]);\n+        writeCurListIndex++;\n+        writeCurArrayIndex = 0;\n+      } else {\n+        int newCapacity = capacity << 1;\n+\n+        long[] newTimeData = new long[newCapacity];\n+        System.arraycopy(timeRet.get(0), 0, newTimeData, 0, capacity);\n+        timeRet.set(0, newTimeData);\n+\n+        capacity = newCapacity;\n+      }\n     }\n-    times[size++] = time;\n-  }\n-\n-  public long[] getTimes() {\n-    return times;\n+    timeRet.get(writeCurListIndex)[writeCurArrayIndex] = time;\n+    writeCurArrayIndex++;\n+    count++;\n   }\n \n   public boolean hasCurrent() {\n-    return size > 0 && cur < size;\n+    if (readCurListIndex < writeCurListIndex) {\n+      return readCurArrayIndex < capacity;\n+    } else if (readCurListIndex == writeCurListIndex) {\n+      return readCurArrayIndex < writeCurArrayIndex;\n+    } else {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MTA0NQ==", "bodyText": "use List ?", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392761045", "createdAt": "2020-03-16T02:53:28Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {\n+    this.count = count;\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n \n+    while (capacity < capacityThreshold) {\n+      capacity <<= 1;\n+    }\n \n-  public TimeColumn(long[] times) {\n-    this.times = times;\n+    this.writeCurListIndex = count / capacity;\n+    this.writeCurArrayIndex = count & (capacity - 1);\n+    this.timeRet = timeRet;\n   }\n \n   public void add(long time) {\n-    if (size == times.length) {\n-      long[] newArray = new long[times.length * 2];\n-      System.arraycopy(times, 0, newArray, 0, times.length);\n-      times = newArray;\n+    if (writeCurArrayIndex == capacity) {\n+      if (capacity >= capacityThreshold) {\n+        timeRet.add(new long[capacity]);\n+        writeCurListIndex++;\n+        writeCurArrayIndex = 0;\n+      } else {\n+        int newCapacity = capacity << 1;\n+\n+        long[] newTimeData = new long[newCapacity];\n+        System.arraycopy(timeRet.get(0), 0, newTimeData, 0, capacity);\n+        timeRet.set(0, newTimeData);\n+\n+        capacity = newCapacity;\n+      }\n     }\n-    times[size++] = time;\n-  }\n-\n-  public long[] getTimes() {\n-    return times;\n+    timeRet.get(writeCurListIndex)[writeCurArrayIndex] = time;\n+    writeCurArrayIndex++;\n+    count++;\n   }\n \n   public boolean hasCurrent() {\n-    return size > 0 && cur < size;\n+    if (readCurListIndex < writeCurListIndex) {\n+      return readCurArrayIndex < capacity;\n+    } else if (readCurListIndex == writeCurListIndex) {\n+      return readCurArrayIndex < writeCurArrayIndex;\n+    } else {\n+      return false;\n+    }\n   }\n \n   public long currentTime() {\n-    return times[cur];\n+    return this.timeRet.get(readCurListIndex)[readCurArrayIndex];\n   }\n \n   public void next() {\n-    cur++;\n+    readCurArrayIndex++;\n+    if (readCurArrayIndex == capacity) {\n+      readCurArrayIndex = 0;\n+      readCurListIndex++;\n+    }\n   }\n \n-  public long getLastTime() {\n-    return times[size - 1];\n+  public int size() {\n+    return this.count;\n   }\n \n-  public int size() {\n-    return size;\n+  public TimeColumnR asReadOnlyTimeColumn() {\n+    return new TimeColumnR(timeRet, count);\n+  }\n+\n+  private class TimeColumnR extends TimeColumn {\n+\n+    public TimeColumnR(ArrayList<long[]> timeRet, int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c8baba999f74e752eda0b0081cd6f87bdbe1992", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/7c8baba999f74e752eda0b0081cd6f87bdbe1992", "committedDate": "2020-03-16T03:55:55Z", "message": "fix review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTAwNzI3", "url": "https://github.com/apache/iotdb/pull/913#pullrequestreview-374900727", "createdAt": "2020-03-16T04:01:39Z", "commit": {"oid": "7c8baba999f74e752eda0b0081cd6f87bdbe1992"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d24a003fb2e676cd125a975bf27db61bd837d0c4", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/d24a003fb2e676cd125a975bf27db61bd837d0c4", "committedDate": "2020-03-17T04:44:17Z", "message": "del readOnly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3140d9975970b9e0a06f05b0c9e98453966b465a", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/3140d9975970b9e0a06f05b0c9e98453966b465a", "committedDate": "2020-03-17T04:45:23Z", "message": "fix mod"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76349d9ef5981eb0733491ca1ad08fc3b071efed", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/76349d9ef5981eb0733491ca1ad08fc3b071efed", "committedDate": "2020-03-17T05:53:04Z", "message": "revert DYNAMIC_DATA_SIZE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba1f76bfadc0e05bd4944703c84356ea26929178", "author": {"user": {"login": "liutaohua", "name": "Dawei Liu"}}, "url": "https://github.com/apache/iotdb/commit/ba1f76bfadc0e05bd4944703c84356ea26929178", "committedDate": "2020-03-17T06:53:11Z", "message": "rename DYNAMIC_DATA_SIZE to ARRAY_CAPACITY_THRESHOLD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Nzk1NTk1", "url": "https://github.com/apache/iotdb/pull/913#pullrequestreview-375795595", "createdAt": "2020-03-17T07:37:45Z", "commit": {"oid": "ba1f76bfadc0e05bd4944703c84356ea26929178"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3195, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}