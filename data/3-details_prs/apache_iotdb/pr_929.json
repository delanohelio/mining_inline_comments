{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODE0MDky", "number": 929, "title": "[IOTDB-565] MQTT Protocol Support", "bodyText": "MQTT Protocol\nMQTT is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\nIt was designed as an extremely lightweight publish/subscribe messaging transport.\nIt is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\nThe MQTT v3.1(an OASIS Standard) protocol support for IoTDB. This module includes the MQTT broker that allows remote devices send messages into IoTDB server directly.\n\nMQTT Broker\nThe MQTT Broker provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients and then\nwrite the data into local or remote IoTDB server immediately.\nThe messages payload can be format to events by PayloadFormatter which loaded by java SPI, and the default implementation is JSONPayloadFormatter.\nThe configuration of the broker locate ${IOTDB_HOME}/${IOTDB_CONF}/iotdb-mqtt-broker.properties, and the startup scripts locate${IOTDB_HOME}/sbin/start-mqtt-broker.sh (.bat for windows platform)\n\nMQTT Broker Configuration\nThe MQTT Broker load configuration from local IoTDB server ${IOTDB_HOME}/${IOTDB_CONF}/iotdb-mqtt-broker.properties by default.\nIf the local config file not exists, then load from classpath /iotdb-mqtt-broker.properties. Otherwise, load from the system defaults.\nConfigurations are as following:\n\n\n\nNAME\nDESCRIPTION\nDEFAULT\n\n\n\n\nmqtt_broker_host\nthe broker server address Required\n0.0.0.0\n\n\nmqtt_broker_port\nthe broker port  Required\n1883\n\n\nmqtt_broker_user\nthe broker username Required\nroot\n\n\nmqtt_broker_password\nthe broker password Required\nroot\n\n\nmqtt_broker_handler_pool_size\nthe publish handler pool size\n1\n\n\nmqtt_broker_payload_formatter\nthe message payload formatter\njson\n\n\niotdb_host\nthe iotdb address Required\n127.0.0.1\n\n\niotdb_port\nthe iotdb port Required\n6667\n\n\niotdb_user\nthe iotdb username Required\nroot\n\n\niotdb_password\nthe iotdb password Required\nroot\n\n\n\nExamples\nThe following is an example which a mqtt client send events to MQTT broker.\n       MQTT mqtt = new MQTT();\n       mqtt.setHost(\"127.0.0.1\", 1883);\n       mqtt.setUserName(\"root\");\n       mqtt.setPassword(\"root\");\n\n       BlockingConnection connection = mqtt.blockingConnection();\n       connection.connect();\n\n       Random random = new Random();\n       for (int i = 0; i < 10; i++) {\n           Map<String,Object> tuple = new HashMap();\n           tuple.put(\"device\", \"root.sg.d1\");\n           tuple.put(\"timestamp\", System.currentTimeMillis());\n           tuple.put(\"measurements\", \"s1\");\n           tuple.put(\"values\", random.nextDouble());\n\n           String payload = JSON.toJSONString(tuple);\n           connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n\n           Thread.sleep(1000);\n       }\n\n       connection.disconnect();\n   }", "createdAt": "2020-03-21T04:32:43Z", "url": "https://github.com/apache/iotdb/pull/929", "merged": true, "mergeCommit": {"oid": "d6207c0745dcf4332a6763c80587808ee861b902"}, "closed": true, "closedAt": "2020-04-09T00:17:14Z", "author": {"login": "vesense"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFipCbAH2gAyMzkxODE0MDkyOmQ3NGU2Y2JiMzI1ZjVmYmRhYzdlMDE5MzU2ZWI5NTNkY2FkNmE0Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVxLFkgFqTM5MDQxNDMxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d74e6cbb325f5fbdac7e019356eb953dcad6a427", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/d74e6cbb325f5fbdac7e019356eb953dcad6a427", "committedDate": "2020-02-18T14:17:18Z", "message": "[IOTDB-503] Add checkTimeseriesExists for session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f12978cc65cfc47f659b837e174d535fe2f53af", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/2f12978cc65cfc47f659b837e174d535fe2f53af", "committedDate": "2020-02-22T11:29:01Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a043dd09832768619700448a4397f471f1349e00", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/a043dd09832768619700448a4397f471f1349e00", "committedDate": "2020-02-26T03:55:01Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b858456ebae948b63bb3e2b4f3168bd1df0539f0", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/b858456ebae948b63bb3e2b4f3168bd1df0539f0", "committedDate": "2020-03-08T02:50:18Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66297ab36796c3fd3c0d9862f525c6656035744e", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/66297ab36796c3fd3c0d9862f525c6656035744e", "committedDate": "2020-03-21T04:28:06Z", "message": "[IOTDB-565] MQTT Protocol Support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODkyNDE0", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-378892414", "createdAt": "2020-03-21T04:53:09Z", "commit": {"oid": "66297ab36796c3fd3c0d9862f525c6656035744e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwNDo1MzoxMFrOF5nlZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwNDo1MzoxMFrOF5nlZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2MTcwMA==", "bodyText": "I remember this version has 0day bug", "url": "https://github.com/apache/iotdb/pull/929#discussion_r395961700", "createdAt": "2020-03-21T04:53:10Z", "author": {"login": "liutaohua"}, "path": "pom.xml", "diffHunk": "@@ -86,6 +87,7 @@\n         <common.lang3.version>3.8.1</common.lang3.version>\n         <common.logging.version>1.1.3</common.logging.version>\n         <guava.version>21.0</guava.version>\n+        <fastjson.version>1.2.31</fastjson.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66297ab36796c3fd3c0d9862f525c6656035744e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82ee854cb397ac37095721f3f4d825c92665b53f", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/82ee854cb397ac37095721f3f4d825c92665b53f", "committedDate": "2020-03-21T12:39:43Z", "message": "[IOTDB-565] upgrade fastjson to latest version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee06c96f99c35b6b53edef84d7f2ea67b955a511", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/ee06c96f99c35b6b53edef84d7f2ea67b955a511", "committedDate": "2020-03-22T08:56:15Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTkzNjAw", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-378993600", "createdAt": "2020-03-22T11:06:26Z", "commit": {"oid": "82ee854cb397ac37095721f3f4d825c92665b53f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMTowNjoyNlrOF5u17A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMTowNjoyNlrOF5u17A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4MDYyMA==", "bodyText": "Hi, the IoTDBSessionException is replaced by StatementExecuteException and IoTDBConnectionException", "url": "https://github.com/apache/iotdb/pull/929#discussion_r396080620", "createdAt": "2020-03-22T11:06:26Z", "author": {"login": "qiaojialin"}, "path": "mqtt/src/main/java/org/apache/iotdb/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.IoTDBSessionException;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private Session session;\n+    private PayloadFormatter payloadFormat;\n+    static boolean testing = false;\n+\n+    public PublishHandler(MQTTBrokerConfig config) {\n+        payloadFormat = PayloadFormatManager.getPayloadFormat(config.getPayloadFormatter());\n+        initSession(config);\n+    }\n+\n+    public void initSession(MQTTBrokerConfig config) {\n+        if (testing) {\n+            return;\n+        }\n+        session = new Session(config.getIotDBHost(), config.getIotDBPort(),\n+                config.getIotDBUsername(), config.getIotDBPassword());\n+        try {\n+            session.open();\n+        } catch (IoTDBSessionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ee854cb397ac37095721f3f4d825c92665b53f"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTk1MjMz", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-378995233", "createdAt": "2020-03-22T11:26:53Z", "commit": {"oid": "82ee854cb397ac37095721f3f4d825c92665b53f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e71f8bcf5001258b4d1da926bbebc215de033a1", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/3e71f8bcf5001258b4d1da926bbebc215de033a1", "committedDate": "2020-03-22T11:42:43Z", "message": "Merge branch 'master' into mqtt_protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c8c304e68fb631fc54f60031e4171eada112856", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/3c8c304e68fb631fc54f60031e4171eada112856", "committedDate": "2020-03-22T12:18:12Z", "message": "[IOTDB-565] minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODE3OTc3", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-383817977", "createdAt": "2020-03-30T12:48:39Z", "commit": {"oid": "3c8c304e68fb631fc54f60031e4171eada112856"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90a5d3846e48f46af9e2a4a26d02b416f39a042d", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/90a5d3846e48f46af9e2a4a26d02b416f39a042d", "committedDate": "2020-04-02T09:06:58Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75a1ec7607f1486ffd2e5b1e6fb1dca730bbfe7", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/e75a1ec7607f1486ffd2e5b1e6fb1dca730bbfe7", "committedDate": "2020-04-02T09:14:44Z", "message": "Merge branch 'master' into mqtt_protocol\n\n# Conflicts:\n#\ttsfile/src/test/java/org/apache/iotdb/tsfile/utils/TsFileGeneratorForTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943240286399b6f2b2705cb5002040b6d843c8ae", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/943240286399b6f2b2705cb5002040b6d843c8ae", "committedDate": "2020-04-03T11:55:09Z", "message": "[IOTDB-565] MQTT Protocol Support Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/621a57a85b85526a76934d7fc3c7e4f39923a802", "committedDate": "2020-04-04T08:21:59Z", "message": "[IOTDB-565] minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b5ea3fad0dd252dda7c7c87163ab4f9a1f2a8c6", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/1b5ea3fad0dd252dda7c7c87163ab4f9a1f2a8c6", "committedDate": "2020-04-04T08:30:44Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzY4NjIw", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-387768620", "createdAt": "2020-04-04T23:59:39Z", "commit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo1OTozOVrOGA43Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo1OTozOVrOGA43Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NDc3NA==", "bodyText": "Hi,  \"read only\" -> \"write only\"", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403584774", "createdAt": "2020-04-04T23:59:39Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.executor.IPlanExecutor;\n+import org.apache.iotdb.db.qp.executor.PlanExecutor;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+import org.apache.iotdb.db.qp.physical.crud.InsertPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private IPlanExecutor executor;\n+    private PayloadFormatter payloadFormat;\n+\n+    public PublishHandler(IoTDBConfig config) {\n+        this.payloadFormat = PayloadFormatManager.getPayloadFormat(config.getMqttPayloadFormatter());\n+        try {\n+            this.executor = new PlanExecutor();\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat) {\n+        this.executor = executor;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return \"iotdb-mqtt-broker-listener\";\n+    }\n+\n+    @Override\n+    public void onPublish(InterceptPublishMessage msg) {\n+        String clientId = msg.getClientID();\n+        ByteBuf payload = msg.getPayload();\n+        String topic = msg.getTopicName();\n+        String username = msg.getUsername();\n+        MqttQoS qos = msg.getQos();\n+\n+        LOG.debug(\"Receive publish message. clientId: {}, username: {}, qos: {}, topic: {}, payload: {}\",\n+                clientId, username, qos, topic, payload);\n+\n+        Message event = payloadFormat.format(payload);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        InsertPlan plan = new InsertPlan();\n+        plan.setDeviceId(event.getDevice());\n+        plan.setTime(event.getTimestamp());\n+        plan.setMeasurements(event.getMeasurements().toArray(new String[event.getMeasurements().size()]));\n+        plan.setValues(event.getValues().toArray(new String[event.getValues().size()]));\n+\n+        boolean status;\n+        try {\n+            status = executeNonQuery(plan);\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        LOG.debug(\"event process result: {}\", status);\n+    }\n+\n+    private boolean executeNonQuery(PhysicalPlan plan) throws QueryProcessException {\n+        if (IoTDBDescriptor.getInstance().getConfig().isReadOnly()) {\n+            throw new QueryProcessException(\n+                    \"Current system mode is read-only, does not support non-query operation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzY4ODI4", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-387768828", "createdAt": "2020-04-05T00:03:03Z", "commit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDowMzowM1rOGA48cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDowMzowM1rOGA48cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NjE2MA==", "bodyText": "I think a textual example is needed for introduction the JSON format.\ne.g.,\n{\n\t\"device\": \"root.sg.d1\",\n\t\"timestamp\": \"150423423423\",\n\t\"measurements\": [\"s1\", \"s2\"],\n\t\"values\": [5.0, \"abc\"]\n}", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403586160", "createdAt": "2020-04-05T00:03:03Z", "author": {"login": "jixuan1989"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,82 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol\n+\n+[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\n+It was designed as an extremely lightweight publish/subscribe messaging transport.\n+It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n+\n+IoTDB supports the MQTT v3.1(an OASIS Standard) protocol.\n+IoTDB server includes a built-in MQTT service that allows remote devices send messages into IoTDB server directly.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357432-0c71cf80-75e4-11ea-98aa-c43a54d469ce.png\">\n+\n+\n+## Built-in MQTT Service\n+The Built-in MQTT Service provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients\n+ and then write the data into storage immediately. \n+The messages payload can be format to events by `PayloadFormatter` which loaded by java SPI, and the default implementation is `JSONPayloadFormatter`.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357469-1bf11880-75e4-11ea-978f-a53996667a0d.png\">\n+\n+## MQTT Configurations\n+The IoTDB MQTT service load configurations from `${IOTDB_HOME}/${IOTDB_CONF}/iotdb-engine.properties` by default.\n+\n+Configurations are as following:\n+\n+| NAME        | DESCRIPTION           | DEFAULT  |\n+| ------------- |:-------------:|:------:|\n+| enable_mqtt_service      | whether to enable the mqtt service | true |\n+| mqtt_host      | the mqtt service binding host | 0.0.0.0 |\n+| mqtt_port      | the mqtt service binding port    |   1883 |\n+| mqtt_handler_pool_size | the handler pool size for handing the mqtt messages      |    1 |\n+| mqtt_payload_formatter | the mqtt message payload formatter     |    json |\n+\n+\n+## Examples\n+The following is an example which a mqtt client send messages to IoTDB server.\n+\n+ ```java\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            Map<String,Object> tuple = new HashMap();\n+            tuple.put(\"device\", \"root.sg.d1\");\n+            tuple.put(\"timestamp\", System.currentTimeMillis());\n+            tuple.put(\"measurements\", \"s1\");\n+            tuple.put(\"values\", random.nextDouble());\n+\n+            String payload = JSON.toJSONString(tuple);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzY4OTQy", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-387768942", "createdAt": "2020-04-05T00:04:57Z", "commit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDowNDo1N1rOGA4_rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDowNDo1N1rOGA4_rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4Njk5MA==", "bodyText": "Is the first parameter the clientID, right? If so, change the example as \"clientID1\" is better.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403586990", "createdAt": "2020-04-05T00:04:57Z", "author": {"login": "jixuan1989"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,82 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol\n+\n+[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\n+It was designed as an extremely lightweight publish/subscribe messaging transport.\n+It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n+\n+IoTDB supports the MQTT v3.1(an OASIS Standard) protocol.\n+IoTDB server includes a built-in MQTT service that allows remote devices send messages into IoTDB server directly.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357432-0c71cf80-75e4-11ea-98aa-c43a54d469ce.png\">\n+\n+\n+## Built-in MQTT Service\n+The Built-in MQTT Service provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients\n+ and then write the data into storage immediately. \n+The messages payload can be format to events by `PayloadFormatter` which loaded by java SPI, and the default implementation is `JSONPayloadFormatter`.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357469-1bf11880-75e4-11ea-978f-a53996667a0d.png\">\n+\n+## MQTT Configurations\n+The IoTDB MQTT service load configurations from `${IOTDB_HOME}/${IOTDB_CONF}/iotdb-engine.properties` by default.\n+\n+Configurations are as following:\n+\n+| NAME        | DESCRIPTION           | DEFAULT  |\n+| ------------- |:-------------:|:------:|\n+| enable_mqtt_service      | whether to enable the mqtt service | true |\n+| mqtt_host      | the mqtt service binding host | 0.0.0.0 |\n+| mqtt_port      | the mqtt service binding port    |   1883 |\n+| mqtt_handler_pool_size | the handler pool size for handing the mqtt messages      |    1 |\n+| mqtt_payload_formatter | the mqtt message payload formatter     |    json |\n+\n+\n+## Examples\n+The following is an example which a mqtt client send messages to IoTDB server.\n+\n+ ```java\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            Map<String,Object> tuple = new HashMap();\n+            tuple.put(\"device\", \"root.sg.d1\");\n+            tuple.put(\"timestamp\", System.currentTimeMillis());\n+            tuple.put(\"measurements\", \"s1\");\n+            tuple.put(\"values\", random.nextDouble());\n+\n+            String payload = JSON.toJSONString(tuple);\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb50cb9412bb6f785b68383867f84caddb02e02", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/fcb50cb9412bb6f785b68383867f84caddb02e02", "committedDate": "2020-04-05T09:14:36Z", "message": "[IOTDB-565] Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/78dd9091bc406825d9390d0b3be653633e57eccb", "committedDate": "2020-04-05T09:22:40Z", "message": "[IOTDB-565] Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODEzNDgw", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-387813480", "createdAt": "2020-04-05T12:26:42Z", "commit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjoyNjo0MlrOGA_lRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzowNjo1NlrOGA_3ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NDkxNg==", "bodyText": "How about moving this to UserGuide/4-Client", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403694916", "createdAt": "2020-04-05T12:26:42Z", "author": {"login": "qiaojialin"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,91 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NjU1NA==", "bodyText": "read-only is right :)", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403696554", "createdAt": "2020-04-05T12:41:28Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.executor.IPlanExecutor;\n+import org.apache.iotdb.db.qp.executor.PlanExecutor;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+import org.apache.iotdb.db.qp.physical.crud.InsertPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private IPlanExecutor executor;\n+    private PayloadFormatter payloadFormat;\n+\n+    public PublishHandler(IoTDBConfig config) {\n+        this.payloadFormat = PayloadFormatManager.getPayloadFormat(config.getMqttPayloadFormatter());\n+        try {\n+            this.executor = new PlanExecutor();\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat) {\n+        this.executor = executor;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return \"iotdb-mqtt-broker-listener\";\n+    }\n+\n+    @Override\n+    public void onPublish(InterceptPublishMessage msg) {\n+        String clientId = msg.getClientID();\n+        ByteBuf payload = msg.getPayload();\n+        String topic = msg.getTopicName();\n+        String username = msg.getUsername();\n+        MqttQoS qos = msg.getQos();\n+\n+        LOG.debug(\"Receive publish message. clientId: {}, username: {}, qos: {}, topic: {}, payload: {}\",\n+                clientId, username, qos, topic, payload);\n+\n+        Message event = payloadFormat.format(payload);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        InsertPlan plan = new InsertPlan();\n+        plan.setDeviceId(event.getDevice());\n+        plan.setTime(event.getTimestamp());\n+        plan.setMeasurements(event.getMeasurements().toArray(new String[event.getMeasurements().size()]));\n+        plan.setValues(event.getValues().toArray(new String[event.getValues().size()]));\n+\n+        boolean status;\n+        try {\n+            status = executeNonQuery(plan);\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        LOG.debug(\"event process result: {}\", status);\n+    }\n+\n+    private boolean executeNonQuery(PhysicalPlan plan) throws QueryProcessException {\n+        if (IoTDBDescriptor.getInstance().getConfig().isReadOnly()) {\n+            throw new QueryProcessException(\n+                    \"Current system mode is read-only, does not support non-query operation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NDc3NA=="}, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzQyNA==", "bodyText": "Suppose we add a \"batchjson\" formatter in the future, such as:\n{\"device\" = \"root.sg.d1\"\n\"timestamps\" = \"[1, 2, 3, 4, 5]\"\n\"measurements\" = ['s1', 's2']\n\"values\" = {[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]}\n}\nWhen receives a json, which format does the server choose to transform the message? Will the server tries the two formatters?", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403697424", "createdAt": "2020-04-05T12:48:40Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "diffHunk": "@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+org.apache.iotdb.db.mqtt.JSONPayloadFormatter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5OTU1Nw==", "bodyText": "I remove this line and test the performance of the insertion on my laptop,  I find that the connection.publish() cost about 1 second, is there any rate-limiting\uff1f", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403699557", "createdAt": "2020-04-05T13:06:56Z", "author": {"login": "qiaojialin"}, "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+\n+import java.util.Random;\n+\n+public class MQTTClient {\n+    public static void main(String[] args) throws Exception {\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            String payload = String.format(\"{\\n\" +\n+                    \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n+                    \"\\\"timestamp\\\":%d,\\n\" +\n+                    \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n+                    \"\\\"values\\\":[%f]\\n\" +\n+                    \"}\", System.currentTimeMillis(), random.nextDouble());\n+\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef8980bffa30aba7e4158668588b363ddc9dee84", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/ef8980bffa30aba7e4158668588b363ddc9dee84", "committedDate": "2020-04-06T02:50:11Z", "message": "[IOTDB-565] Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54c55780722b36f0e2285ae70fae8bbfb004b151", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/54c55780722b36f0e2285ae70fae8bbfb004b151", "committedDate": "2020-04-06T13:00:21Z", "message": "[IOTDB-565] Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjkwNDUx", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-388290451", "createdAt": "2020-04-06T14:13:16Z", "commit": {"oid": "54c55780722b36f0e2285ae70fae8bbfb004b151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoxMzoxNlrOGBZu8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoxMzoxNlrOGBZu8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyMzM3OQ==", "bodyText": "Hi, as the source code is not written by us, we'd better to claim it in our LICENSE file. You can get an example at the tail of our current LICENSE file.\nAnd do not forget to remove it from the license file once you delete this class.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404123379", "createdAt": "2020-04-06T14:13:16Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/io/moquette/broker/MQTTConnection.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.moquette.broker;\n+\n+import io.moquette.broker.subscriptions.Topic;\n+import io.moquette.broker.security.IAuthenticator;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.mqtt.*;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.netty.channel.ChannelFutureListener.CLOSE_ON_FAILURE;\n+import static io.netty.channel.ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE;\n+import static io.netty.handler.codec.mqtt.MqttConnectReturnCode.*;\n+import static io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader.from;\n+import static io.netty.handler.codec.mqtt.MqttQoS.*;\n+\n+// NOTE:\n+// override the MQTTConnection class in the moquette 0.12.1 jar to fix the PUBACK flush issue\n+// https://github.com/moquette-io/moquette/pull/454\n+// when moquette fixed version released, we can remove this.\n+final class MQTTConnection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54c55780722b36f0e2285ae70fae8bbfb004b151"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b169efcec2186c636b7cdc82f5100ccb441399", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/20b169efcec2186c636b7cdc82f5100ccb441399", "committedDate": "2020-04-07T01:00:15Z", "message": "[IOTDB-565] Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1d29716cbe04d56c49d368601978e710bbe96fb", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/b1d29716cbe04d56c49d368601978e710bbe96fb", "committedDate": "2020-04-07T01:28:37Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzYxOTg3", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-388761987", "createdAt": "2020-04-07T03:37:55Z", "commit": {"oid": "20b169efcec2186c636b7cdc82f5100ccb441399"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzozNzo1NVrOGBxuUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzozNzo1NVrOGBxuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNjQzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String JSON_KEY_DEVICE = \"device\";\n          \n          \n            \n                public static final String JSON_KEY_TIMESTAMP = \"timestamp\";\n          \n          \n            \n                public static final String JSON_KEY_TIMESTAMPS = \"timestamps\";\n          \n          \n            \n                public static final String JSON_KEY_MEASUREMENTS = \"measurements\";\n          \n          \n            \n                public static final String JSON_KEY_VALUES = \"values\";\n          \n          \n            \n                private static final String JSON_KEY_DEVICE = \"device\";\n          \n          \n            \n                private static final String JSON_KEY_TIMESTAMP = \"timestamp\";\n          \n          \n            \n                private static final String JSON_KEY_TIMESTAMPS = \"timestamps\";\n          \n          \n            \n                private static final String JSON_KEY_MEASUREMENTS = \"measurements\";\n          \n          \n            \n                private static final String JSON_KEY_VALUES = \"values\";", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404516433", "createdAt": "2020-04-07T03:37:55Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/JSONPayloadFormatter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import com.alibaba.fastjson.JSON;\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import com.google.common.collect.Lists;\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The JSON payload formatter.\n+ * two json format supported:\n+ * {\n+ *     \"device\":\"root.sg.d1\",\n+ *     \"timestamp\":1586076045524,\n+ *     \"measurements\":[\"s1\",\"s2\"],\n+ *     \"values\":[0.530635,0.530635]\n+ * }\n+ *\n+ * {\n+ *     \"device\":\"root.sg.d1\",\n+ *     \"timestamps\":[1586076045524,1586076065526],\n+ *     \"measurements\":[\"s1\",\"s2\"],\n+ *     \"values\":[[0.530635,0.530635], [0.530655,0.530695]]\n+ * }\n+ */\n+public class JSONPayloadFormatter implements PayloadFormatter {\n+    public static final String JSON_KEY_DEVICE = \"device\";\n+    public static final String JSON_KEY_TIMESTAMP = \"timestamp\";\n+    public static final String JSON_KEY_TIMESTAMPS = \"timestamps\";\n+    public static final String JSON_KEY_MEASUREMENTS = \"measurements\";\n+    public static final String JSON_KEY_VALUES = \"values\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b169efcec2186c636b7cdc82f5100ccb441399"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzY0Mjgx", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-388764281", "createdAt": "2020-04-07T03:47:22Z", "commit": {"oid": "20b169efcec2186c636b7cdc82f5100ccb441399"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3c788b1b1236ed05101c5b1ea5eb533fa865427", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/c3c788b1b1236ed05101c5b1ea5eb533fa865427", "committedDate": "2020-04-07T05:13:04Z", "message": "Update server/src/main/java/org/apache/iotdb/db/mqtt/JSONPayloadFormatter.java\n\nCo-Authored-By: Jialin Qiao <qjl16@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e3b6a2a09e6820f89324e321d9560451510921", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/43e3b6a2a09e6820f89324e321d9560451510921", "committedDate": "2020-04-07T06:46:42Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85ca5c2707db5dfa9960b4dd8bb602c8d492a392", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/85ca5c2707db5dfa9960b4dd8bb602c8d492a392", "committedDate": "2020-04-07T07:07:18Z", "message": "Merge branch 'master' into mqtt_protocol"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjM0NDcz", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-389234473", "createdAt": "2020-04-07T15:30:26Z", "commit": {"oid": "85ca5c2707db5dfa9960b4dd8bb602c8d492a392"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e918a469ee454a86b5c8aa7d8170aa1d0cf1b5", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/b1e918a469ee454a86b5c8aa7d8170aa1d0cf1b5", "committedDate": "2020-04-08T02:02:36Z", "message": "[IOTDB-565] Fix ci error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb7879022b4d8bf2f9c7ca61e0e155cf0ebbb7d0", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/cb7879022b4d8bf2f9c7ca61e0e155cf0ebbb7d0", "committedDate": "2020-04-08T03:26:33Z", "message": "[IOTDB-565] Fix ci error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a4492fc5bfabc83e8f463b73edf85335f16026", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/f3a4492fc5bfabc83e8f463b73edf85335f16026", "committedDate": "2020-04-08T03:30:55Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c4b559ac006550be396b5a57e0b821ce74a4bc1", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/5c4b559ac006550be396b5a57e0b821ce74a4bc1", "committedDate": "2020-04-08T03:31:39Z", "message": "Merge branch 'master' into mqtt_protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "849a61fdc022b00d7f277865919da2f546e3fbda", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/849a61fdc022b00d7f277865919da2f546e3fbda", "committedDate": "2020-04-08T10:07:57Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9792e43fd092b52f999ca0cea49eb4885a9a5a7c", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/9792e43fd092b52f999ca0cea49eb4885a9a5a7c", "committedDate": "2020-04-08T10:08:48Z", "message": "Merge branch 'master' into mqtt_protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db73c9a006c3a4fe73ae5f368db7c6caab1d829d", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/db73c9a006c3a4fe73ae5f368db7c6caab1d829d", "committedDate": "2020-04-08T12:42:02Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6053a2aa4299188abecfd092364f42ab13ec969d", "author": {"user": {"login": "vesense", "name": "Xin Wang"}}, "url": "https://github.com/apache/iotdb/commit/6053a2aa4299188abecfd092364f42ab13ec969d", "committedDate": "2020-04-08T12:54:10Z", "message": "Merge branch 'master' into mqtt_protocol\n\n# Conflicts:\n#\texample/flink/README.md\n#\texample/flink/pom.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDE0MzE2", "url": "https://github.com/apache/iotdb/pull/929#pullrequestreview-390414316", "createdAt": "2020-04-09T00:15:57Z", "commit": {"oid": "6053a2aa4299188abecfd092364f42ab13ec969d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3015, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}