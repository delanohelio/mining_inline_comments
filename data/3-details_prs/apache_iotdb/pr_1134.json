{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMjc3MTc1", "number": 1134, "title": "[IOTDB-631] Using new TsFile MetadataIndex to optimize query and cache", "bodyText": "As the new TsFile MetadataIndex is designed, we could do more optimization for querying process and TimeseriesMetadata Cache.\n\nprovide a new interface List<TimeseriesMetadata> readTimeseriesMetadata to get more sensors' TimeseriesMetadata and reduce IO.\nuse a new method int binarySearchInTimeseriesMetadataList for binary searching in TimeseriesMetadataList", "createdAt": "2020-04-30T09:11:50Z", "url": "https://github.com/apache/iotdb/pull/1134", "merged": true, "mergeCommit": {"oid": "bef8a97bf5d78267ce89063ca0409c4ee0438476"}, "closed": true, "closedAt": "2020-05-06T11:43:57Z", "author": {"login": "samperson1997"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccpaMmgH2gAyNDExMjc3MTc1OjQzMzljNjhiYmJmYjA4ODZkMzY2MWEzMzA4YjkwZmViODNmNjgxYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcelLqPAH2gAyNDExMjc3MTc1OjU0OWE2NDU2MjdjNjJjNjI1ZjNkZTQwZmY0NDRiOTIxYTJlOTcyZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4339c68bbbfb0886d3661a3308b90feb83f681b1", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/4339c68bbbfb0886d3661a3308b90feb83f681b1", "committedDate": "2020-04-30T09:10:41Z", "message": "[IOTDB-631] Using new TsFile MetadataIndex to optimize query and cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzQ5MTM1", "url": "https://github.com/apache/iotdb/pull/1134#pullrequestreview-403349135", "createdAt": "2020-04-30T09:23:57Z", "commit": {"oid": "4339c68bbbfb0886d3661a3308b90feb83f681b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTEzNzI4", "url": "https://github.com/apache/iotdb/pull/1134#pullrequestreview-404513728", "createdAt": "2020-05-02T09:22:18Z", "commit": {"oid": "4339c68bbbfb0886d3661a3308b90feb83f681b1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOToyMjoxOFrOGPhzRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOToyODozM1rOGPh1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNTYyMA==", "bodyText": "Hi, the key.measurement should be also in the allSensors set. Therefore, we only need to query the allSensor, put them into cache. Then return the queried sensor's TimeseriesMetadata.", "url": "https://github.com/apache/iotdb/pull/1134#discussion_r418935620", "createdAt": "2020-05-02T09:22:18Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/TimeSeriesMetadataCache.java", "diffHunk": "@@ -125,9 +130,20 @@ public TimeseriesMetadata get(TimeSeriesMetadataCacheKey key, Set<String> allSen\n         return null;\n       }\n       TsFileSequenceReader reader = FileReaderManager.getInstance().get(key.filePath, true);\n-      TimeseriesMetadata timeseriesMetadata = reader.readTimeseriesMetadata(new Path(key.device, key.measurement));\n-      lruCache.put(key, timeseriesMetadata);\n-      return timeseriesMetadata;\n+      TimeseriesMetadata resultTimeseriesMetadata = reader\n+          .readTimeseriesMetadata(new Path(key.device, key.measurement));\n+      lruCache.put(key, resultTimeseriesMetadata);\n+\n+      List<TimeseriesMetadata> timeSeriesMetadataList = reader\n+          .readTimeseriesMetadata(key.device, allSensors);\n+      if (!allSensors.isEmpty()) {\n+        // put TimeSeriesMetadata of all sensors used in this query into cache\n+        timeSeriesMetadataList.forEach(timeseriesMetadata -> {\n+          lruCache.put(new TimeSeriesMetadataCacheKey(key.filePath, key.device,\n+              timeseriesMetadata.getMeasurementId()), timeseriesMetadata);\n+        });\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4339c68bbbfb0886d3661a3308b90feb83f681b1"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNTk1OA==", "bodyText": "check if the size of measurements reaches a threshold, just traversing from start to end is quicker, no need to binary search for each", "url": "https://github.com/apache/iotdb/pull/1134#discussion_r418935958", "createdAt": "2020-05-02T09:25:51Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java", "diffHunk": "@@ -314,28 +311,76 @@ public TsFileMetadata readFileMetadata() throws IOException {\n   public TimeseriesMetadata readTimeseriesMetadata(Path path) throws IOException {\n     readFileMetadata();\n     MetadataIndexNode deviceMetadataIndexNode = tsFileMetaData.getMetadataIndex();\n-    Pair<MetadataIndexEntry, Long> metadataIndexPair = getMetaDataAndEndOffset(\n+    Pair<MetadataIndexEntry, Long> metadataIndexPair = getMetadataAndEndOffset(\n         deviceMetadataIndexNode, path.getDevice(), MetadataIndexNodeType.INTERNAL_DEVICE);\n     ByteBuffer buffer = readData(metadataIndexPair.left.getOffset(), metadataIndexPair.right);\n     while (!metadataIndexPair.left.getChildNodeType()\n         .equals(MetadataIndexNodeType.LEAF_MEASUREMENT)) {\n       MetadataIndexNode metadataIndexNode = MetadataIndexNode.deserializeFrom(buffer);\n-      metadataIndexPair = getMetaDataAndEndOffset(metadataIndexNode,\n+      metadataIndexPair = getMetadataAndEndOffset(metadataIndexNode,\n           path.getMeasurement(), MetadataIndexNodeType.INTERNAL_MEASUREMENT);\n     }\n     List<TimeseriesMetadata> timeseriesMetadataList = new ArrayList<>();\n     buffer = readData(metadataIndexPair.left.getOffset(), metadataIndexPair.right);\n     while (buffer.hasRemaining()) {\n       timeseriesMetadataList.add(TimeseriesMetadata.deserializeFrom(buffer));\n     }\n-    String[] measurementNameList = timeseriesMetadataList.stream()\n-        .map(TimeseriesMetadata::getMeasurementId).collect(Collectors.toList())\n-        .toArray(new String[timeseriesMetadataList.size()]);\n-\n     // return null if path does not exist in the TsFile\n-    int searchResult;\n-    return (searchResult = Arrays.binarySearch(measurementNameList, path.getMeasurement())) >= 0\n-        ? timeseriesMetadataList.get(searchResult) : null;\n+    int searchResult = binarySearchInTimeseriesMetadataList(timeseriesMetadataList,\n+        path.getMeasurement());\n+    return searchResult >= 0 ? timeseriesMetadataList.get(searchResult) : null;\n+  }\n+\n+  public List<TimeseriesMetadata> readTimeseriesMetadata(String device, Set<String> measurements)\n+      throws IOException {\n+    readFileMetadata();\n+    MetadataIndexNode deviceMetadataIndexNode = tsFileMetaData.getMetadataIndex();\n+    Pair<MetadataIndexEntry, Long> metadataIndexPair = getMetadataAndEndOffset(\n+        deviceMetadataIndexNode, device, MetadataIndexNodeType.INTERNAL_DEVICE);\n+    List<TimeseriesMetadata> resultTimeseriesMetadataList = new ArrayList<>();\n+    for (String measurement : measurements) {\n+      ByteBuffer buffer = readData(metadataIndexPair.left.getOffset(), metadataIndexPair.right);\n+      Pair<MetadataIndexEntry, Long> measurementMetadataIndexPair = metadataIndexPair;\n+      List<TimeseriesMetadata> timeseriesMetadataList = new ArrayList<>();\n+      while (!measurementMetadataIndexPair.left.getChildNodeType()\n+          .equals(MetadataIndexNodeType.LEAF_MEASUREMENT)) {\n+        MetadataIndexNode metadataIndexNode = MetadataIndexNode.deserializeFrom(buffer);\n+        measurementMetadataIndexPair = getMetadataAndEndOffset(metadataIndexNode,\n+            measurement, MetadataIndexNodeType.INTERNAL_MEASUREMENT);\n+      }\n+      buffer = readData(measurementMetadataIndexPair.left.getOffset(),\n+          measurementMetadataIndexPair.right);\n+      while (buffer.hasRemaining()) {\n+        timeseriesMetadataList.add(TimeseriesMetadata.deserializeFrom(buffer));\n+      }\n+      int searchResult = binarySearchInTimeseriesMetadataList(timeseriesMetadataList,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4339c68bbbfb0886d3661a3308b90feb83f681b1"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNjE5Ng==", "bodyText": "I'm not clear about the MetadataIndexNodeType.INTERNAL_DEVICE, how can I see this parameter, the queried node type? Shouldn't this be Leaf_Device?", "url": "https://github.com/apache/iotdb/pull/1134#discussion_r418936196", "createdAt": "2020-05-02T09:28:33Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java", "diffHunk": "@@ -314,28 +311,76 @@ public TsFileMetadata readFileMetadata() throws IOException {\n   public TimeseriesMetadata readTimeseriesMetadata(Path path) throws IOException {\n     readFileMetadata();\n     MetadataIndexNode deviceMetadataIndexNode = tsFileMetaData.getMetadataIndex();\n-    Pair<MetadataIndexEntry, Long> metadataIndexPair = getMetaDataAndEndOffset(\n+    Pair<MetadataIndexEntry, Long> metadataIndexPair = getMetadataAndEndOffset(\n         deviceMetadataIndexNode, path.getDevice(), MetadataIndexNodeType.INTERNAL_DEVICE);\n     ByteBuffer buffer = readData(metadataIndexPair.left.getOffset(), metadataIndexPair.right);\n     while (!metadataIndexPair.left.getChildNodeType()\n         .equals(MetadataIndexNodeType.LEAF_MEASUREMENT)) {\n       MetadataIndexNode metadataIndexNode = MetadataIndexNode.deserializeFrom(buffer);\n-      metadataIndexPair = getMetaDataAndEndOffset(metadataIndexNode,\n+      metadataIndexPair = getMetadataAndEndOffset(metadataIndexNode,\n           path.getMeasurement(), MetadataIndexNodeType.INTERNAL_MEASUREMENT);\n     }\n     List<TimeseriesMetadata> timeseriesMetadataList = new ArrayList<>();\n     buffer = readData(metadataIndexPair.left.getOffset(), metadataIndexPair.right);\n     while (buffer.hasRemaining()) {\n       timeseriesMetadataList.add(TimeseriesMetadata.deserializeFrom(buffer));\n     }\n-    String[] measurementNameList = timeseriesMetadataList.stream()\n-        .map(TimeseriesMetadata::getMeasurementId).collect(Collectors.toList())\n-        .toArray(new String[timeseriesMetadataList.size()]);\n-\n     // return null if path does not exist in the TsFile\n-    int searchResult;\n-    return (searchResult = Arrays.binarySearch(measurementNameList, path.getMeasurement())) >= 0\n-        ? timeseriesMetadataList.get(searchResult) : null;\n+    int searchResult = binarySearchInTimeseriesMetadataList(timeseriesMetadataList,\n+        path.getMeasurement());\n+    return searchResult >= 0 ? timeseriesMetadataList.get(searchResult) : null;\n+  }\n+\n+  public List<TimeseriesMetadata> readTimeseriesMetadata(String device, Set<String> measurements)\n+      throws IOException {\n+    readFileMetadata();\n+    MetadataIndexNode deviceMetadataIndexNode = tsFileMetaData.getMetadataIndex();\n+    Pair<MetadataIndexEntry, Long> metadataIndexPair = getMetadataAndEndOffset(\n+        deviceMetadataIndexNode, device, MetadataIndexNodeType.INTERNAL_DEVICE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4339c68bbbfb0886d3661a3308b90feb83f681b1"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1eca42db3e3e23b3249abfb7c24292a3c9fe3c2", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/c1eca42db3e3e23b3249abfb7c24292a3c9fe3c2", "committedDate": "2020-05-02T14:46:00Z", "message": "Fix code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzA3NDYz", "url": "https://github.com/apache/iotdb/pull/1134#pullrequestreview-406307463", "createdAt": "2020-05-06T05:11:54Z", "commit": {"oid": "de83282bcf452589707c1c59c948414739dd93a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNToxMTo1NFrOGREQDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNToxMTo1NFrOGREQDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0ODYyMA==", "bodyText": "A very small misspelling.\nFor query clause \"select s1, s2 form root -> For query clause \"select s1, s2 from root", "url": "https://github.com/apache/iotdb/pull/1134#discussion_r420548620", "createdAt": "2020-05-06T05:11:54Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/ServerTimeGenerator.java", "diffHunk": "@@ -33,8 +36,6 @@\n import org.apache.iotdb.tsfile.read.query.timegenerator.TimeGenerator;\n import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n \n-import java.io.IOException;\n-\n /**\n  * A timestamp generator for query with filter. e.g. For query clause \"select s1, s2 form root where\n  * s3 < 0 and time > 100\", this class can iterate back to every timestamp of the query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de83282bcf452589707c1c59c948414739dd93a8"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05c1367777675b67738fb14f8eea0224b3c0099d", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/05c1367777675b67738fb14f8eea0224b3c0099d", "committedDate": "2020-05-06T08:09:45Z", "message": "Fix PhysicalGenerator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc62c0cfe739df7387de5baef571133aea93e6c8", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/cc62c0cfe739df7387de5baef571133aea93e6c8", "committedDate": "2020-05-06T05:24:47Z", "message": "Fix typo"}, "afterCommit": {"oid": "05c1367777675b67738fb14f8eea0224b3c0099d", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/05c1367777675b67738fb14f8eea0224b3c0099d", "committedDate": "2020-05-06T08:09:45Z", "message": "Fix PhysicalGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f319cf38309fdd07b3bace77fb5b38ccc7cde4b", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/5f319cf38309fdd07b3bace77fb5b38ccc7cde4b", "committedDate": "2020-05-06T08:13:12Z", "message": "Fix code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6384244de4c572c5043720d1a89fc2993eae2b47", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/6384244de4c572c5043720d1a89fc2993eae2b47", "committedDate": "2020-05-06T08:25:16Z", "message": "Add filterPath in deviceToMeasurements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDMwOTQ4", "url": "https://github.com/apache/iotdb/pull/1134#pullrequestreview-406430948", "createdAt": "2020-05-06T09:10:25Z", "commit": {"oid": "6384244de4c572c5043720d1a89fc2993eae2b47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "549a645627c62c625f3de40ff444b921a2e972d0", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/549a645627c62c625f3de40ff444b921a2e972d0", "committedDate": "2020-05-06T09:23:02Z", "message": "Fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3908, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}