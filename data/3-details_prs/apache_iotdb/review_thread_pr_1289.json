{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDgwMDc4", "number": 1289, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo1MTozMlrOEGt4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjoyNDoyNFrOEGuiyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDc4NTU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo1MTozMlrOGlr0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0MDo0M1rOGlv0HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2ODQ0OQ==", "bodyText": "Why we need to set it to true, it seems thats it has been set to true in the constructor of MMangaer.", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442168449", "createdAt": "2020-06-18T11:51:32Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -176,6 +176,7 @@ public synchronized void init() {\n     try {\n       tagLogFile = new TagLogFile(config.getSchemaDir(), MetadataConstant.TAG_LOG);\n \n+      isRecovering = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMzg4NA==", "bodyText": "Actually, when IoTDB close and restart using API, we don't get a new Instance of MManager. If we didn't set isRecovering = true here, the value of isRecovering would be null.", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442233884", "createdAt": "2020-06-18T13:40:43Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -176,6 +176,7 @@ public synchronized void init() {\n     try {\n       tagLogFile = new TagLogFile(config.getSchemaDir(), MetadataConstant.TAG_LOG);\n \n+      isRecovering = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2ODQ0OQ=="}, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDg4MTc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjoyMDo0NFrOGlswdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoxMDoxOFrOGlxJ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4Mzc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EnvironmentUtils.shutdownDaemon();\n          \n          \n            \n                EnvironmentUtils.reactiveDaemon();\n          \n          \n            \n                EnvironmentUtils.restartDaemon();", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442183799", "createdAt": "2020-06-18T12:20:44Z", "author": {"login": "JackieTien97"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.integration;\n+\n+import static org.apache.iotdb.db.constant.TestConstant.count;\n+import static org.apache.iotdb.db.constant.TestConstant.max_value;\n+import static org.apache.iotdb.db.constant.TestConstant.min_time;\n+import static org.apache.iotdb.db.constant.TestConstant.min_value;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Locale;\n+import org.apache.iotdb.db.exception.StartupException;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.apache.iotdb.jdbc.Config;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IoTDBRecoverUnclosedIT {\n+\n+  private static final String TIMESTAMP_STR = \"Time\";\n+  private static final String TEMPERATURE_STR = \"root.ln.wf01.wt01.temperature\";\n+  private static String[] creationSqls = new String[]{\n+      \"SET STORAGE GROUP TO root.vehicle.d0\",\n+      \"SET STORAGE GROUP TO root.vehicle.d1\",\n+\n+      \"CREATE TIMESERIES root.vehicle.d0.s0 WITH DATATYPE=INT32, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s1 WITH DATATYPE=INT64, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s2 WITH DATATYPE=FLOAT, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s3 WITH DATATYPE=TEXT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s4 WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\"\n+  };\n+  private static String[] dataSet2 = new String[]{\n+      \"SET STORAGE GROUP TO root.ln.wf01.wt01\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.hardware WITH DATATYPE=INT32, ENCODING=PLAIN\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(1, 1.1, false, 11)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(2, 2.2, true, 22)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(3, 3.3, false, 33 )\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(4, 4.4, false, 44)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(5, 5.5, false, 55)\"\n+  };\n+  private final String d0s0 = \"root.vehicle.d0.s0\";\n+  private final String d0s1 = \"root.vehicle.d0.s1\";\n+  private final String d0s2 = \"root.vehicle.d0.s2\";\n+  private final String d0s3 = \"root.vehicle.d0.s3\";\n+  private String insertTemplate = \"INSERT INTO root.vehicle.d0(timestamp,s0,s1,s2,s3,s4)\"\n+      + \" VALUES(%d,%d,%d,%f,%s,%s)\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.closeStatMonitor();\n+\n+    EnvironmentUtils.envSetUp();\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    prepareData();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws SQLException, IOException, StartupException {\n+    String[] retArray = new String[]{\n+        \"0,2\",\n+        \"0,4\",\n+        \"0,3\"\n+    };\n+    try (Connection connection = DriverManager.\n+        getConnection(\"jdbc:iotdb://127.0.0.1:6667/\", \"root\", \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      boolean hasResultSet = statement.execute(\n+          \"select count(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      int cnt;\n+      try (ResultSet resultSet = statement.getResultSet();) {\n+        cnt = 0;\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(count(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(1, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where temperature > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(3, cnt);\n+      }\n+\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      fail(e.getMessage());\n+    }\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1NTg2NQ==", "bodyText": "Fixed, thanks~", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442255865", "createdAt": "2020-06-18T14:10:18Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.integration;\n+\n+import static org.apache.iotdb.db.constant.TestConstant.count;\n+import static org.apache.iotdb.db.constant.TestConstant.max_value;\n+import static org.apache.iotdb.db.constant.TestConstant.min_time;\n+import static org.apache.iotdb.db.constant.TestConstant.min_value;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Locale;\n+import org.apache.iotdb.db.exception.StartupException;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.apache.iotdb.jdbc.Config;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IoTDBRecoverUnclosedIT {\n+\n+  private static final String TIMESTAMP_STR = \"Time\";\n+  private static final String TEMPERATURE_STR = \"root.ln.wf01.wt01.temperature\";\n+  private static String[] creationSqls = new String[]{\n+      \"SET STORAGE GROUP TO root.vehicle.d0\",\n+      \"SET STORAGE GROUP TO root.vehicle.d1\",\n+\n+      \"CREATE TIMESERIES root.vehicle.d0.s0 WITH DATATYPE=INT32, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s1 WITH DATATYPE=INT64, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s2 WITH DATATYPE=FLOAT, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s3 WITH DATATYPE=TEXT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s4 WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\"\n+  };\n+  private static String[] dataSet2 = new String[]{\n+      \"SET STORAGE GROUP TO root.ln.wf01.wt01\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.hardware WITH DATATYPE=INT32, ENCODING=PLAIN\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(1, 1.1, false, 11)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(2, 2.2, true, 22)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(3, 3.3, false, 33 )\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(4, 4.4, false, 44)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(5, 5.5, false, 55)\"\n+  };\n+  private final String d0s0 = \"root.vehicle.d0.s0\";\n+  private final String d0s1 = \"root.vehicle.d0.s1\";\n+  private final String d0s2 = \"root.vehicle.d0.s2\";\n+  private final String d0s3 = \"root.vehicle.d0.s3\";\n+  private String insertTemplate = \"INSERT INTO root.vehicle.d0(timestamp,s0,s1,s2,s3,s4)\"\n+      + \" VALUES(%d,%d,%d,%f,%s,%s)\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.closeStatMonitor();\n+\n+    EnvironmentUtils.envSetUp();\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    prepareData();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws SQLException, IOException, StartupException {\n+    String[] retArray = new String[]{\n+        \"0,2\",\n+        \"0,4\",\n+        \"0,3\"\n+    };\n+    try (Connection connection = DriverManager.\n+        getConnection(\"jdbc:iotdb://127.0.0.1:6667/\", \"root\", \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      boolean hasResultSet = statement.execute(\n+          \"select count(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      int cnt;\n+      try (ResultSet resultSet = statement.getResultSet();) {\n+        cnt = 0;\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(count(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(1, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where temperature > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(3, cnt);\n+      }\n+\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      fail(e.getMessage());\n+    }\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4Mzc5OQ=="}, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDg4MzM0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjoyMTowNlrOGlsxXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoxMjozNVrOGlxQJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4NDAyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EnvironmentUtils.shutdownDaemon();\n          \n          \n            \n                EnvironmentUtils.reactiveDaemon();\n          \n          \n            \n                EnvironmentUtils.restartDaemon();", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442184029", "createdAt": "2020-06-18T12:21:06Z", "author": {"login": "JackieTien97"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.integration;\n+\n+import static org.apache.iotdb.db.constant.TestConstant.count;\n+import static org.apache.iotdb.db.constant.TestConstant.max_value;\n+import static org.apache.iotdb.db.constant.TestConstant.min_time;\n+import static org.apache.iotdb.db.constant.TestConstant.min_value;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Locale;\n+import org.apache.iotdb.db.exception.StartupException;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.apache.iotdb.jdbc.Config;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IoTDBRecoverUnclosedIT {\n+\n+  private static final String TIMESTAMP_STR = \"Time\";\n+  private static final String TEMPERATURE_STR = \"root.ln.wf01.wt01.temperature\";\n+  private static String[] creationSqls = new String[]{\n+      \"SET STORAGE GROUP TO root.vehicle.d0\",\n+      \"SET STORAGE GROUP TO root.vehicle.d1\",\n+\n+      \"CREATE TIMESERIES root.vehicle.d0.s0 WITH DATATYPE=INT32, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s1 WITH DATATYPE=INT64, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s2 WITH DATATYPE=FLOAT, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s3 WITH DATATYPE=TEXT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s4 WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\"\n+  };\n+  private static String[] dataSet2 = new String[]{\n+      \"SET STORAGE GROUP TO root.ln.wf01.wt01\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.hardware WITH DATATYPE=INT32, ENCODING=PLAIN\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(1, 1.1, false, 11)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(2, 2.2, true, 22)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(3, 3.3, false, 33 )\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(4, 4.4, false, 44)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(5, 5.5, false, 55)\"\n+  };\n+  private final String d0s0 = \"root.vehicle.d0.s0\";\n+  private final String d0s1 = \"root.vehicle.d0.s1\";\n+  private final String d0s2 = \"root.vehicle.d0.s2\";\n+  private final String d0s3 = \"root.vehicle.d0.s3\";\n+  private String insertTemplate = \"INSERT INTO root.vehicle.d0(timestamp,s0,s1,s2,s3,s4)\"\n+      + \" VALUES(%d,%d,%d,%f,%s,%s)\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.closeStatMonitor();\n+\n+    EnvironmentUtils.envSetUp();\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    prepareData();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws SQLException, IOException, StartupException {\n+    String[] retArray = new String[]{\n+        \"0,2\",\n+        \"0,4\",\n+        \"0,3\"\n+    };\n+    try (Connection connection = DriverManager.\n+        getConnection(\"jdbc:iotdb://127.0.0.1:6667/\", \"root\", \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      boolean hasResultSet = statement.execute(\n+          \"select count(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      int cnt;\n+      try (ResultSet resultSet = statement.getResultSet();) {\n+        cnt = 0;\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(count(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(1, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where temperature > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(3, cnt);\n+      }\n+\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      fail(e.getMessage());\n+    }\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();\n+    \n+    insertMoreData();\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1NzQ0NA==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442257444", "createdAt": "2020-06-18T14:12:35Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.integration;\n+\n+import static org.apache.iotdb.db.constant.TestConstant.count;\n+import static org.apache.iotdb.db.constant.TestConstant.max_value;\n+import static org.apache.iotdb.db.constant.TestConstant.min_time;\n+import static org.apache.iotdb.db.constant.TestConstant.min_value;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Locale;\n+import org.apache.iotdb.db.exception.StartupException;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.apache.iotdb.jdbc.Config;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IoTDBRecoverUnclosedIT {\n+\n+  private static final String TIMESTAMP_STR = \"Time\";\n+  private static final String TEMPERATURE_STR = \"root.ln.wf01.wt01.temperature\";\n+  private static String[] creationSqls = new String[]{\n+      \"SET STORAGE GROUP TO root.vehicle.d0\",\n+      \"SET STORAGE GROUP TO root.vehicle.d1\",\n+\n+      \"CREATE TIMESERIES root.vehicle.d0.s0 WITH DATATYPE=INT32, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s1 WITH DATATYPE=INT64, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s2 WITH DATATYPE=FLOAT, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s3 WITH DATATYPE=TEXT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s4 WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\"\n+  };\n+  private static String[] dataSet2 = new String[]{\n+      \"SET STORAGE GROUP TO root.ln.wf01.wt01\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.hardware WITH DATATYPE=INT32, ENCODING=PLAIN\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(1, 1.1, false, 11)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(2, 2.2, true, 22)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(3, 3.3, false, 33 )\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(4, 4.4, false, 44)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(5, 5.5, false, 55)\"\n+  };\n+  private final String d0s0 = \"root.vehicle.d0.s0\";\n+  private final String d0s1 = \"root.vehicle.d0.s1\";\n+  private final String d0s2 = \"root.vehicle.d0.s2\";\n+  private final String d0s3 = \"root.vehicle.d0.s3\";\n+  private String insertTemplate = \"INSERT INTO root.vehicle.d0(timestamp,s0,s1,s2,s3,s4)\"\n+      + \" VALUES(%d,%d,%d,%f,%s,%s)\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.closeStatMonitor();\n+\n+    EnvironmentUtils.envSetUp();\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    prepareData();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws SQLException, IOException, StartupException {\n+    String[] retArray = new String[]{\n+        \"0,2\",\n+        \"0,4\",\n+        \"0,3\"\n+    };\n+    try (Connection connection = DriverManager.\n+        getConnection(\"jdbc:iotdb://127.0.0.1:6667/\", \"root\", \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      boolean hasResultSet = statement.execute(\n+          \"select count(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      int cnt;\n+      try (ResultSet resultSet = statement.getResultSet();) {\n+        cnt = 0;\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(count(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(1, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where temperature > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(3, cnt);\n+      }\n+\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      fail(e.getMessage());\n+    }\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();\n+    \n+    insertMoreData();\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4NDAyOQ=="}, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDg5NDgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/service/RegisterManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjoyNDoyNFrOGls4dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDozNzo1NVrOGlydWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4NTg0Ng==", "bodyText": "I think you should rethrow the exception, and in the tests, you should catch it, and add failed() clause.", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442185846", "createdAt": "2020-06-18T12:24:24Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/service/RegisterManager.java", "diffHunk": "@@ -64,4 +65,21 @@ public void deregisterAll() {\n     iServices.clear();\n     logger.info(\"deregister all service.\");\n   }\n+  \n+  /**\n+   * stop all service and clear iService list.\n+   */\n+  public void shutdownAll() {\n+    //we stop JMXServer at last\n+    Collections.reverse(iServices);\n+    for (IService service : iServices) {\n+      try {\n+        service.shutdown(10000);\n+      } catch (Exception e) {\n+        logger.error(\"Failed to stop {} because:\", service.getID().getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3NzIxMQ==", "bodyText": "Very good point! Thanks. Fixed.", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442277211", "createdAt": "2020-06-18T14:37:55Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/service/RegisterManager.java", "diffHunk": "@@ -64,4 +65,21 @@ public void deregisterAll() {\n     iServices.clear();\n     logger.info(\"deregister all service.\");\n   }\n+  \n+  /**\n+   * stop all service and clear iService list.\n+   */\n+  public void shutdownAll() {\n+    //we stop JMXServer at last\n+    Collections.reverse(iServices);\n+    for (IService service : iServices) {\n+      try {\n+        service.shutdown(10000);\n+      } catch (Exception e) {\n+        logger.error(\"Failed to stop {} because:\", service.getID().getName(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4NTg0Ng=="}, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4892, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}