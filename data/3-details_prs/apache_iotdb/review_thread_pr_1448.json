{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjQ5MzYy", "number": 1448, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0MToyMlrOEKyD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NDoyM1rOEN1DSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzQxNDMzOnYy", "diffSide": "RIGHT", "path": "tsfile/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0MToyMlrOGsBG9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1Nzo1OFrOGsT55Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwODY5NQ==", "bodyText": "I think we should update the LICENSE-binary as well. :)", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r448808695", "createdAt": "2020-07-02T07:41:22Z", "author": {"login": "HTHou"}, "path": "tsfile/pom.xml", "diffHunk": "@@ -53,6 +53,11 @@\n             <groupId>commons-io</groupId>\n             <artifactId>commons-io</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>net.jpountz.lz4</groupId>\n+            <artifactId>lz4</artifactId>\n+            <version>1.3.0</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122a6c97e54a08d6b44f2b11b76cd367b30b4167"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNjY0NQ==", "bodyText": "Sure~ I will fix it~", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r449116645", "createdAt": "2020-07-02T15:57:58Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/pom.xml", "diffHunk": "@@ -53,6 +53,11 @@\n             <groupId>commons-io</groupId>\n             <artifactId>commons-io</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>net.jpountz.lz4</groupId>\n+            <artifactId>lz4</artifactId>\n+            <version>1.3.0</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwODY5NQ=="}, "originalCommit": {"oid": "122a6c97e54a08d6b44f2b11b76cd367b30b4167"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTM1NDE2OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/ICompressor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1Mjo0OVrOGwpjzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NzoxOVrOGwpwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NTc0Mw==", "bodyText": "To be consistent with LZ4UnCompressor and simplified, rename this to LZ4Compressor?", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r453665743", "createdAt": "2020-07-13T13:52:49Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/ICompressor.java", "diffHunk": "@@ -52,6 +52,8 @@ static ICompressor getCompressor(CompressionType name) {\n         return new NoCompressor();\n       case SNAPPY:\n         return new SnappyCompressor();\n+      case LZ4:\n+        return new IOTDBLZ4Compressor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed2a9314a4676f94be81734050ee08afa7bcb26"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2ODk4OQ==", "bodyText": "The package I import is called LZ4Compressor, so I can't use this name", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r453668989", "createdAt": "2020-07-13T13:57:19Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/ICompressor.java", "diffHunk": "@@ -52,6 +52,8 @@ static ICompressor getCompressor(CompressionType name) {\n         return new NoCompressor();\n       case SNAPPY:\n         return new SnappyCompressor();\n+      case LZ4:\n+        return new IOTDBLZ4Compressor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NTc0Mw=="}, "originalCommit": {"oid": "bed2a9314a4676f94be81734050ee08afa7bcb26"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTM1OTM1OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1Mzo1OFrOGwpm6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NzoyNlrOGwpwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NjUzOA==", "bodyText": "I think it's better to throw this exception and let the upper level handle it.", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r453666538", "createdAt": "2020-07-13T13:53:58Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java", "diffHunk": "@@ -184,4 +186,82 @@ public CompressionType getCodecName() {\n       return CompressionType.SNAPPY;\n     }\n   }\n+\n+\n+  class LZ4UnCompressor implements IUnCompressor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LZ4Compressor.class);\n+    private static final int MAX_COMPRESS_RATIO = 255;\n+    private LZ4SafeDecompressor decompressor;\n+\n+\n+    public LZ4UnCompressor() {\n+      LZ4Factory factory = LZ4Factory.fastestInstance();\n+      decompressor = factory.safeDecompressor();\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(byte[] array, int offset, int length) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(ByteBuffer buffer) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    /**\n+     * We don't recommend using this method because we have to allocate MAX_COMPRESS_RATIO *\n+     * compressedSize to ensure uncompress safety, you can use other method if you know the\n+     * uncompressed size\n+     */\n+    @Override\n+    public byte[] uncompress(byte[] bytes) {\n+      if (bytes == null) {\n+        return new byte[0];\n+      }\n+\n+      try {\n+        return decompressor.decompress(bytes, MAX_COMPRESS_RATIO * bytes.length);\n+      } catch (RuntimeException e) {\n+        logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed2a9314a4676f94be81734050ee08afa7bcb26"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2OTA2NQ==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r453669065", "createdAt": "2020-07-13T13:57:26Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java", "diffHunk": "@@ -184,4 +186,82 @@ public CompressionType getCodecName() {\n       return CompressionType.SNAPPY;\n     }\n   }\n+\n+\n+  class LZ4UnCompressor implements IUnCompressor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LZ4Compressor.class);\n+    private static final int MAX_COMPRESS_RATIO = 255;\n+    private LZ4SafeDecompressor decompressor;\n+\n+\n+    public LZ4UnCompressor() {\n+      LZ4Factory factory = LZ4Factory.fastestInstance();\n+      decompressor = factory.safeDecompressor();\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(byte[] array, int offset, int length) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(ByteBuffer buffer) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    /**\n+     * We don't recommend using this method because we have to allocate MAX_COMPRESS_RATIO *\n+     * compressedSize to ensure uncompress safety, you can use other method if you know the\n+     * uncompressed size\n+     */\n+    @Override\n+    public byte[] uncompress(byte[] bytes) {\n+      if (bytes == null) {\n+        return new byte[0];\n+      }\n+\n+      try {\n+        return decompressor.decompress(bytes, MAX_COMPRESS_RATIO * bytes.length);\n+      } catch (RuntimeException e) {\n+        logger.error(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NjUzOA=="}, "originalCommit": {"oid": "bed2a9314a4676f94be81734050ee08afa7bcb26"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTM2MTM2OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NDoyM1rOGwpoGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NzozNFrOGwpxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2Njg0Mg==", "bodyText": "throw IOException", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r453666842", "createdAt": "2020-07-13T13:54:23Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java", "diffHunk": "@@ -184,4 +186,82 @@ public CompressionType getCodecName() {\n       return CompressionType.SNAPPY;\n     }\n   }\n+\n+\n+  class LZ4UnCompressor implements IUnCompressor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LZ4Compressor.class);\n+    private static final int MAX_COMPRESS_RATIO = 255;\n+    private LZ4SafeDecompressor decompressor;\n+\n+\n+    public LZ4UnCompressor() {\n+      LZ4Factory factory = LZ4Factory.fastestInstance();\n+      decompressor = factory.safeDecompressor();\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(byte[] array, int offset, int length) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(ByteBuffer buffer) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    /**\n+     * We don't recommend using this method because we have to allocate MAX_COMPRESS_RATIO *\n+     * compressedSize to ensure uncompress safety, you can use other method if you know the\n+     * uncompressed size\n+     */\n+    @Override\n+    public byte[] uncompress(byte[] bytes) {\n+      if (bytes == null) {\n+        return new byte[0];\n+      }\n+\n+      try {\n+        return decompressor.decompress(bytes, MAX_COMPRESS_RATIO * bytes.length);\n+      } catch (RuntimeException e) {\n+        logger.error(\n+            \"tsfile-compression LZ4UnCompressor: errors occurs when uncompress input byte\", e);\n+      }\n+      return new byte[0];\n+    }\n+\n+    @Override\n+    public int uncompress(byte[] byteArray, int offset, int length, byte[] output, int outOffset)\n+        throws IOException {\n+      try {\n+        return decompressor.decompress(byteArray, offset, length, output, offset);\n+      }\n+      catch (RuntimeException e){\n+        logger.error(\n+            \"tsfile-compression LZ4UnCompressor: errors occurs when uncompress input byte\", e);\n+        throw new IOException(e);\n+      }\n+    }\n+\n+    @Override\n+    public int uncompress(ByteBuffer compressed, ByteBuffer uncompressed) {\n+      if (compressed == null || !compressed.hasRemaining()) {\n+        return 0;\n+      }\n+\n+      try {\n+        decompressor.decompress(compressed, uncompressed);\n+        return compressed.limit();\n+      } catch (RuntimeException e) {\n+        logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed2a9314a4676f94be81734050ee08afa7bcb26"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2OTE3Ng==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1448#discussion_r453669176", "createdAt": "2020-07-13T13:57:34Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java", "diffHunk": "@@ -184,4 +186,82 @@ public CompressionType getCodecName() {\n       return CompressionType.SNAPPY;\n     }\n   }\n+\n+\n+  class LZ4UnCompressor implements IUnCompressor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LZ4Compressor.class);\n+    private static final int MAX_COMPRESS_RATIO = 255;\n+    private LZ4SafeDecompressor decompressor;\n+\n+\n+    public LZ4UnCompressor() {\n+      LZ4Factory factory = LZ4Factory.fastestInstance();\n+      decompressor = factory.safeDecompressor();\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(byte[] array, int offset, int length) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    @Override\n+    public int getUncompressedLength(ByteBuffer buffer) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported get uncompress length\");\n+    }\n+\n+    /**\n+     * We don't recommend using this method because we have to allocate MAX_COMPRESS_RATIO *\n+     * compressedSize to ensure uncompress safety, you can use other method if you know the\n+     * uncompressed size\n+     */\n+    @Override\n+    public byte[] uncompress(byte[] bytes) {\n+      if (bytes == null) {\n+        return new byte[0];\n+      }\n+\n+      try {\n+        return decompressor.decompress(bytes, MAX_COMPRESS_RATIO * bytes.length);\n+      } catch (RuntimeException e) {\n+        logger.error(\n+            \"tsfile-compression LZ4UnCompressor: errors occurs when uncompress input byte\", e);\n+      }\n+      return new byte[0];\n+    }\n+\n+    @Override\n+    public int uncompress(byte[] byteArray, int offset, int length, byte[] output, int outOffset)\n+        throws IOException {\n+      try {\n+        return decompressor.decompress(byteArray, offset, length, output, offset);\n+      }\n+      catch (RuntimeException e){\n+        logger.error(\n+            \"tsfile-compression LZ4UnCompressor: errors occurs when uncompress input byte\", e);\n+        throw new IOException(e);\n+      }\n+    }\n+\n+    @Override\n+    public int uncompress(ByteBuffer compressed, ByteBuffer uncompressed) {\n+      if (compressed == null || !compressed.hasRemaining()) {\n+        return 0;\n+      }\n+\n+      try {\n+        decompressor.decompress(compressed, uncompressed);\n+        return compressed.limit();\n+      } catch (RuntimeException e) {\n+        logger.error(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2Njg0Mg=="}, "originalCommit": {"oid": "bed2a9314a4676f94be81734050ee08afa7bcb26"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4842, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}