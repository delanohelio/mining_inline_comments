{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NTUyMTUz", "number": 913, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo0ODowNVrODoLGrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo1MzoyOFrODoLJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDUxNTY2OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo0ODowNVrOF2kLAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzozMjozMVrOF2kpWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDA2Nw==", "bodyText": "Remove this useless import", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760067", "createdAt": "2020-03-16T02:48:05Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import org.apache.iotdb.tsfile.common.conf.TSFileConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzgzNQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392767835", "createdAt": "2020-03-16T03:32:31Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import org.apache.iotdb.tsfile.common.conf.TSFileConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDA2Nw=="}, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDUxOTEzOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo1MDo1NVrOF2kNDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzozMjo0OFrOF2kpfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDU4OQ==", "bodyText": "How about using List here", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760589", "createdAt": "2020-03-16T02:50:55Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2Nzg3MQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392767871", "createdAt": "2020-03-16T03:32:48Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDU4OQ=="}, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDUxOTM5OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo1MToxMlrOF2kNOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzozMjo1MVrOF2kpkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDYzMw==", "bodyText": "Also use List", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760633", "createdAt": "2020-03-16T02:51:12Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2Nzg4OQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392767889", "createdAt": "2020-03-16T03:32:51Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDYzMw=="}, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDUyMTE0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo1Mjo0NVrOF2kOWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzo1ODowNFrOF2k6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDkyMg==", "bodyText": "could be simpliy:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else if (readCurListIndex == writeCurListIndex) {\n          \n          \n            \n                  return readCurArrayIndex < writeCurArrayIndex;\n          \n          \n            \n                } else {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n                } else {\n          \n          \n            \n                  return readCurListIndex == writeCurListIndex && readCurArrayIndex < writeCurArrayIndex;\n          \n          \n            \n                }", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392760922", "createdAt": "2020-03-16T02:52:45Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {\n+    this.count = count;\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n \n+    while (capacity < capacityThreshold) {\n+      capacity <<= 1;\n+    }\n \n-  public TimeColumn(long[] times) {\n-    this.times = times;\n+    this.writeCurListIndex = count / capacity;\n+    this.writeCurArrayIndex = count & (capacity - 1);\n+    this.timeRet = timeRet;\n   }\n \n   public void add(long time) {\n-    if (size == times.length) {\n-      long[] newArray = new long[times.length * 2];\n-      System.arraycopy(times, 0, newArray, 0, times.length);\n-      times = newArray;\n+    if (writeCurArrayIndex == capacity) {\n+      if (capacity >= capacityThreshold) {\n+        timeRet.add(new long[capacity]);\n+        writeCurListIndex++;\n+        writeCurArrayIndex = 0;\n+      } else {\n+        int newCapacity = capacity << 1;\n+\n+        long[] newTimeData = new long[newCapacity];\n+        System.arraycopy(timeRet.get(0), 0, newTimeData, 0, capacity);\n+        timeRet.set(0, newTimeData);\n+\n+        capacity = newCapacity;\n+      }\n     }\n-    times[size++] = time;\n-  }\n-\n-  public long[] getTimes() {\n-    return times;\n+    timeRet.get(writeCurListIndex)[writeCurArrayIndex] = time;\n+    writeCurArrayIndex++;\n+    count++;\n   }\n \n   public boolean hasCurrent() {\n-    return size > 0 && cur < size;\n+    if (readCurListIndex < writeCurListIndex) {\n+      return readCurArrayIndex < capacity;\n+    } else if (readCurListIndex == writeCurListIndex) {\n+      return readCurArrayIndex < writeCurArrayIndex;\n+    } else {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MjIwMg==", "bodyText": "excellent advice,  exchange order will be more easy to understand", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392772202", "createdAt": "2020-03-16T03:58:04Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {\n+    this.count = count;\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n \n+    while (capacity < capacityThreshold) {\n+      capacity <<= 1;\n+    }\n \n-  public TimeColumn(long[] times) {\n-    this.times = times;\n+    this.writeCurListIndex = count / capacity;\n+    this.writeCurArrayIndex = count & (capacity - 1);\n+    this.timeRet = timeRet;\n   }\n \n   public void add(long time) {\n-    if (size == times.length) {\n-      long[] newArray = new long[times.length * 2];\n-      System.arraycopy(times, 0, newArray, 0, times.length);\n-      times = newArray;\n+    if (writeCurArrayIndex == capacity) {\n+      if (capacity >= capacityThreshold) {\n+        timeRet.add(new long[capacity]);\n+        writeCurListIndex++;\n+        writeCurArrayIndex = 0;\n+      } else {\n+        int newCapacity = capacity << 1;\n+\n+        long[] newTimeData = new long[newCapacity];\n+        System.arraycopy(timeRet.get(0), 0, newTimeData, 0, capacity);\n+        timeRet.set(0, newTimeData);\n+\n+        capacity = newCapacity;\n+      }\n     }\n-    times[size++] = time;\n-  }\n-\n-  public long[] getTimes() {\n-    return times;\n+    timeRet.get(writeCurListIndex)[writeCurArrayIndex] = time;\n+    writeCurArrayIndex++;\n+    count++;\n   }\n \n   public boolean hasCurrent() {\n-    return size > 0 && cur < size;\n+    if (readCurListIndex < writeCurListIndex) {\n+      return readCurArrayIndex < capacity;\n+    } else if (readCurListIndex == writeCurListIndex) {\n+      return readCurArrayIndex < writeCurArrayIndex;\n+    } else {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MDkyMg=="}, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDUyMTkxOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjo1MzoyOFrOF2kO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzo0Nzo0M1rOF2kzbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MTA0NQ==", "bodyText": "use List ?", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392761045", "createdAt": "2020-03-16T02:53:28Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {\n+    this.count = count;\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n \n+    while (capacity < capacityThreshold) {\n+      capacity <<= 1;\n+    }\n \n-  public TimeColumn(long[] times) {\n-    this.times = times;\n+    this.writeCurListIndex = count / capacity;\n+    this.writeCurArrayIndex = count & (capacity - 1);\n+    this.timeRet = timeRet;\n   }\n \n   public void add(long time) {\n-    if (size == times.length) {\n-      long[] newArray = new long[times.length * 2];\n-      System.arraycopy(times, 0, newArray, 0, times.length);\n-      times = newArray;\n+    if (writeCurArrayIndex == capacity) {\n+      if (capacity >= capacityThreshold) {\n+        timeRet.add(new long[capacity]);\n+        writeCurListIndex++;\n+        writeCurArrayIndex = 0;\n+      } else {\n+        int newCapacity = capacity << 1;\n+\n+        long[] newTimeData = new long[newCapacity];\n+        System.arraycopy(timeRet.get(0), 0, newTimeData, 0, capacity);\n+        timeRet.set(0, newTimeData);\n+\n+        capacity = newCapacity;\n+      }\n     }\n-    times[size++] = time;\n-  }\n-\n-  public long[] getTimes() {\n-    return times;\n+    timeRet.get(writeCurListIndex)[writeCurArrayIndex] = time;\n+    writeCurArrayIndex++;\n+    count++;\n   }\n \n   public boolean hasCurrent() {\n-    return size > 0 && cur < size;\n+    if (readCurListIndex < writeCurListIndex) {\n+      return readCurArrayIndex < capacity;\n+    } else if (readCurListIndex == writeCurListIndex) {\n+      return readCurArrayIndex < writeCurArrayIndex;\n+    } else {\n+      return false;\n+    }\n   }\n \n   public long currentTime() {\n-    return times[cur];\n+    return this.timeRet.get(readCurListIndex)[readCurArrayIndex];\n   }\n \n   public void next() {\n-    cur++;\n+    readCurArrayIndex++;\n+    if (readCurArrayIndex == capacity) {\n+      readCurArrayIndex = 0;\n+      readCurListIndex++;\n+    }\n   }\n \n-  public long getLastTime() {\n-    return times[size - 1];\n+  public int size() {\n+    return this.count;\n   }\n \n-  public int size() {\n-    return size;\n+  public TimeColumnR asReadOnlyTimeColumn() {\n+    return new TimeColumnR(timeRet, count);\n+  }\n+\n+  private class TimeColumnR extends TimeColumn {\n+\n+    public TimeColumnR(ArrayList<long[]> timeRet, int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MDQxNQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/913#discussion_r392770415", "createdAt": "2020-03-16T03:47:43Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -19,60 +19,115 @@\n package org.apache.iotdb.tsfile.read.common;\n \n \n+import java.nio.ReadOnlyBufferException;\n+import java.util.ArrayList;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n public class TimeColumn {\n \n-  private static final int DEFAULT_INIT_SIZE = 1000;\n+  private static final int capacityThreshold = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+  private int capacity = 16;\n \n+  // outer list index for read\n+  private int readCurListIndex;\n+  // inner array index for read\n+  private int readCurArrayIndex;\n \n-  private long[] times;\n+  // outer list index for write\n+  private int writeCurListIndex;\n+  // inner array index for write\n+  private int writeCurArrayIndex;\n \n-  private int size;\n+  // the insert timestamp number of timeRet\n+  private int count;\n \n-  private int cur;\n+  private ArrayList<long[]> timeRet;\n \n   public TimeColumn() {\n-    this(DEFAULT_INIT_SIZE);\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n+    this.writeCurListIndex = 0;\n+    this.writeCurArrayIndex = 0;\n+    timeRet = new ArrayList<>();\n+    timeRet.add(new long[capacity]);\n+    count = 0;\n   }\n \n-  public TimeColumn(int initSize) {\n-    times = new long[initSize];\n-  }\n+  public TimeColumn(ArrayList<long[]> timeRet, int count) {\n+    this.count = count;\n+    this.readCurListIndex = 0;\n+    this.readCurArrayIndex = 0;\n \n+    while (capacity < capacityThreshold) {\n+      capacity <<= 1;\n+    }\n \n-  public TimeColumn(long[] times) {\n-    this.times = times;\n+    this.writeCurListIndex = count / capacity;\n+    this.writeCurArrayIndex = count & (capacity - 1);\n+    this.timeRet = timeRet;\n   }\n \n   public void add(long time) {\n-    if (size == times.length) {\n-      long[] newArray = new long[times.length * 2];\n-      System.arraycopy(times, 0, newArray, 0, times.length);\n-      times = newArray;\n+    if (writeCurArrayIndex == capacity) {\n+      if (capacity >= capacityThreshold) {\n+        timeRet.add(new long[capacity]);\n+        writeCurListIndex++;\n+        writeCurArrayIndex = 0;\n+      } else {\n+        int newCapacity = capacity << 1;\n+\n+        long[] newTimeData = new long[newCapacity];\n+        System.arraycopy(timeRet.get(0), 0, newTimeData, 0, capacity);\n+        timeRet.set(0, newTimeData);\n+\n+        capacity = newCapacity;\n+      }\n     }\n-    times[size++] = time;\n-  }\n-\n-  public long[] getTimes() {\n-    return times;\n+    timeRet.get(writeCurListIndex)[writeCurArrayIndex] = time;\n+    writeCurArrayIndex++;\n+    count++;\n   }\n \n   public boolean hasCurrent() {\n-    return size > 0 && cur < size;\n+    if (readCurListIndex < writeCurListIndex) {\n+      return readCurArrayIndex < capacity;\n+    } else if (readCurListIndex == writeCurListIndex) {\n+      return readCurArrayIndex < writeCurArrayIndex;\n+    } else {\n+      return false;\n+    }\n   }\n \n   public long currentTime() {\n-    return times[cur];\n+    return this.timeRet.get(readCurListIndex)[readCurArrayIndex];\n   }\n \n   public void next() {\n-    cur++;\n+    readCurArrayIndex++;\n+    if (readCurArrayIndex == capacity) {\n+      readCurArrayIndex = 0;\n+      readCurListIndex++;\n+    }\n   }\n \n-  public long getLastTime() {\n-    return times[size - 1];\n+  public int size() {\n+    return this.count;\n   }\n \n-  public int size() {\n-    return size;\n+  public TimeColumnR asReadOnlyTimeColumn() {\n+    return new TimeColumnR(timeRet, count);\n+  }\n+\n+  private class TimeColumnR extends TimeColumn {\n+\n+    public TimeColumnR(ArrayList<long[]> timeRet, int count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2MTA0NQ=="}, "originalCommit": {"oid": "10461382d788a7ce187fba4d76c375818dbd5f17"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 313, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}