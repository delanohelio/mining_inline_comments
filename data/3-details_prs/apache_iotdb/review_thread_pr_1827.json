{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzODg0OTc3", "number": 1827, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoxNToxOVrOEt_SpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyNjoxOFrOEt_mew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjU4MzQwOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/LogDispatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoxNToxOVrOHiHOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyODowNlrOHijd7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzMTk1Mg==", "bodyText": "I don't think the change is thread-safe, please confirm it.", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505531952", "createdAt": "2020-10-15T13:15:19Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/LogDispatcher.java", "diffHunk": "@@ -244,25 +244,20 @@ private void appendEntriesAsync(List<ByteBuffer> logList, AppendEntriesRequest r\n     private void appendEntriesSync(List<ByteBuffer> logList, AppendEntriesRequest request,\n         List<SendLogRequest> currBatch) {\n \n-      long start;\n-      if (Timer.ENABLE_INSTRUMENTING) {\n-        start = System.nanoTime();\n-      }\n+      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.setStartTime();\n       if (!member.waitForPrevLog(peer, currBatch.get(0).getLog())) {\n         logger.warn(\"{}: node {} timed out when appending {}\", member.getName(), receiver,\n             currBatch.get(0).getLog());\n         return;\n       }\n-      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.addNanoFromStart(start);\n+      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.calCostTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5NDczMw==", "bodyText": "you're right, its indeed cause concurrent problem, I'll fix it. thanks!", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505994733", "createdAt": "2020-10-16T02:28:06Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/LogDispatcher.java", "diffHunk": "@@ -244,25 +244,20 @@ private void appendEntriesAsync(List<ByteBuffer> logList, AppendEntriesRequest r\n     private void appendEntriesSync(List<ByteBuffer> logList, AppendEntriesRequest request,\n         List<SendLogRequest> currBatch) {\n \n-      long start;\n-      if (Timer.ENABLE_INSTRUMENTING) {\n-        start = System.nanoTime();\n-      }\n+      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.setStartTime();\n       if (!member.waitForPrevLog(peer, currBatch.get(0).getLog())) {\n         logger.warn(\"{}: node {} timed out when appending {}\", member.getName(), receiver,\n             currBatch.get(0).getLog());\n         return;\n       }\n-      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.addNanoFromStart(start);\n+      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.calCostTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzMTk1Mg=="}, "originalCommit": {"oid": "2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjYzNDE5OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/Timer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyNjoxOFrOHiHtiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyODoyMFrOHijeaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzOTk3OQ==", "bodyText": "The condition should be put into the first method, as System.nanoTime() is a heavy call and should be avoided when not using instrumenting.", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505539979", "createdAt": "2020-10-15T13:26:18Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/Timer.java", "diffHunk": "@@ -183,14 +184,33 @@ public void add(long val) {\n     }\n \n     /**\n-     * This method equals `add(System.nanoTime() - start)`. We wrap `System.nanoTime()` in this\n-     * method to avoid unnecessary calls when instrumenting is disabled.\n-     *\n-     * @param start\n+     * set now time as the operation's start time\n      */\n-    public void addNanoFromStart(long start) {\n+    public void setStartTime() {\n+      setStartTime(System.nanoTime());\n+    }\n+\n+    public void setStartTime(long startTime) {\n+      if (ENABLE_INSTRUMENTING) {\n+        this.startTime = startTime;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5NDg1OQ==", "bodyText": "Got it", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505994859", "createdAt": "2020-10-16T02:28:20Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/Timer.java", "diffHunk": "@@ -183,14 +184,33 @@ public void add(long val) {\n     }\n \n     /**\n-     * This method equals `add(System.nanoTime() - start)`. We wrap `System.nanoTime()` in this\n-     * method to avoid unnecessary calls when instrumenting is disabled.\n-     *\n-     * @param start\n+     * set now time as the operation's start time\n      */\n-    public void addNanoFromStart(long start) {\n+    public void setStartTime() {\n+      setStartTime(System.nanoTime());\n+    }\n+\n+    public void setStartTime(long startTime) {\n+      if (ENABLE_INSTRUMENTING) {\n+        this.startTime = startTime;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzOTk3OQ=="}, "originalCommit": {"oid": "2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 633, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}