{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNzc3NDEy", "number": 1601, "title": "add a data migration example", "bodyText": "Migrate data from one IoTDB to another IoTDB.", "createdAt": "2020-08-06T04:44:19Z", "url": "https://github.com/apache/iotdb/pull/1601", "merged": true, "mergeCommit": {"oid": "570925623a532a3436886661c73136dc286cc31f"}, "closed": true, "closedAt": "2020-08-19T02:38:21Z", "author": {"login": "qiaojialin"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8IURJgH2gAyNDYzNzc3NDEyOjhjNTYwMTZiMmRmN2U1YzY5NDgwZGNkODM1Njc3ZTVhYjRjYjc1Zjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-WqzXgFqTQ2NjQwNTA0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/8c56016b2df7e5c69480dcd835677e5ab4cb75f8", "committedDate": "2020-08-06T04:42:55Z", "message": "add a data migration example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MTk3Mjk5", "url": "https://github.com/apache/iotdb/pull/1601#pullrequestreview-464197299", "createdAt": "2020-08-10T12:49:27Z", "commit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo0OToyOFrOG-NG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1Nzo0N1rOG-NYhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3OTY2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  count ++;\n          \n          \n            \n                  count++;", "url": "https://github.com/apache/iotdb/pull/1601#discussion_r467879660", "createdAt": "2020-08-10T12:49:28Z", "author": {"login": "Alima777"}, "path": "example/session/src/main/java/org/apache/iotdb/DataMigrationExample.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.SessionDataSet.DataIterator;\n+import org.apache.iotdb.session.pool.SessionDataSetWrapper;\n+import org.apache.iotdb.session.pool.SessionPool;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.Tablet;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+\n+/**\n+ * Migrate all data belongs to a path from one IoTDB to another IoTDB\n+ * Each thread migrate one series, the concurrent thread can be configured by concurrency\n+ *\n+ * This example is\n+ * migrating all timeseries from a local IoTDB with 6667 port to a local IoTDB with 6668 port\n+ */\n+public class DataMigrationExample {\n+\n+  // used to read data from the source IoTDB\n+  private static SessionPool readerPool;\n+  // used to write data into the destination IoTDB\n+  private static SessionPool writerPool;\n+  // concurrent thread of loading timeseries data\n+  private static int concurrency = 5;\n+\n+  public static void main(String[] args)\n+      throws IoTDBConnectionException, StatementExecutionException, ExecutionException, InterruptedException {\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2 * concurrency + 1);\n+\n+    String path = \"root\";\n+\n+    if (args.length != 0) {\n+      path = args[0];\n+    }\n+\n+    readerPool = new SessionPool(\"127.0.0.1\", 6667, \"root\", \"root\", concurrency);\n+    writerPool = new SessionPool(\"127.0.0.1\", 6668, \"root\", \"root\", concurrency);\n+\n+    SessionDataSetWrapper schemaDataSet = readerPool.executeQueryStatement(\"count timeseries \" + path);\n+    DataIterator schemaIter = schemaDataSet.iterator();\n+    int total;\n+    if (schemaIter.next()) {\n+      total = schemaIter.getInt(1);\n+      System.out.println(\"Total timeseries: \" + total);\n+    } else {\n+      System.out.println(\"Can not get timeseries schema\");\n+      System.exit(1);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+\n+    schemaDataSet = readerPool\n+        .executeQueryStatement(\"show timeseries \" + path);\n+    schemaIter = schemaDataSet.iterator();\n+\n+    List<Future> futureList = new ArrayList<>();\n+    int count = 0;\n+    while (schemaIter.next()) {\n+      count ++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3OTg1OQ==", "bodyText": "Pay attention to the code style.", "url": "https://github.com/apache/iotdb/pull/1601#discussion_r467879859", "createdAt": "2020-08-10T12:49:50Z", "author": {"login": "Alima777"}, "path": "example/session/src/main/java/org/apache/iotdb/DataMigrationExample.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.SessionDataSet.DataIterator;\n+import org.apache.iotdb.session.pool.SessionDataSetWrapper;\n+import org.apache.iotdb.session.pool.SessionPool;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.Tablet;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+\n+/**\n+ * Migrate all data belongs to a path from one IoTDB to another IoTDB\n+ * Each thread migrate one series, the concurrent thread can be configured by concurrency\n+ *\n+ * This example is\n+ * migrating all timeseries from a local IoTDB with 6667 port to a local IoTDB with 6668 port\n+ */\n+public class DataMigrationExample {\n+\n+  // used to read data from the source IoTDB\n+  private static SessionPool readerPool;\n+  // used to write data into the destination IoTDB\n+  private static SessionPool writerPool;\n+  // concurrent thread of loading timeseries data\n+  private static int concurrency = 5;\n+\n+  public static void main(String[] args)\n+      throws IoTDBConnectionException, StatementExecutionException, ExecutionException, InterruptedException {\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2 * concurrency + 1);\n+\n+    String path = \"root\";\n+\n+    if (args.length != 0) {\n+      path = args[0];\n+    }\n+\n+    readerPool = new SessionPool(\"127.0.0.1\", 6667, \"root\", \"root\", concurrency);\n+    writerPool = new SessionPool(\"127.0.0.1\", 6668, \"root\", \"root\", concurrency);\n+\n+    SessionDataSetWrapper schemaDataSet = readerPool.executeQueryStatement(\"count timeseries \" + path);\n+    DataIterator schemaIter = schemaDataSet.iterator();\n+    int total;\n+    if (schemaIter.next()) {\n+      total = schemaIter.getInt(1);\n+      System.out.println(\"Total timeseries: \" + total);\n+    } else {\n+      System.out.println(\"Can not get timeseries schema\");\n+      System.exit(1);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+\n+    schemaDataSet = readerPool\n+        .executeQueryStatement(\"show timeseries \" + path);\n+    schemaIter = schemaDataSet.iterator();\n+\n+    List<Future> futureList = new ArrayList<>();\n+    int count = 0;\n+    while (schemaIter.next()) {\n+      count ++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3OTY2MA=="}, "originalCommit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3OTk4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (Future future: futureList) {\n          \n          \n            \n                for (Future future : futureList) {", "url": "https://github.com/apache/iotdb/pull/1601#discussion_r467879987", "createdAt": "2020-08-10T12:50:02Z", "author": {"login": "Alima777"}, "path": "example/session/src/main/java/org/apache/iotdb/DataMigrationExample.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.SessionDataSet.DataIterator;\n+import org.apache.iotdb.session.pool.SessionDataSetWrapper;\n+import org.apache.iotdb.session.pool.SessionPool;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.Tablet;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+\n+/**\n+ * Migrate all data belongs to a path from one IoTDB to another IoTDB\n+ * Each thread migrate one series, the concurrent thread can be configured by concurrency\n+ *\n+ * This example is\n+ * migrating all timeseries from a local IoTDB with 6667 port to a local IoTDB with 6668 port\n+ */\n+public class DataMigrationExample {\n+\n+  // used to read data from the source IoTDB\n+  private static SessionPool readerPool;\n+  // used to write data into the destination IoTDB\n+  private static SessionPool writerPool;\n+  // concurrent thread of loading timeseries data\n+  private static int concurrency = 5;\n+\n+  public static void main(String[] args)\n+      throws IoTDBConnectionException, StatementExecutionException, ExecutionException, InterruptedException {\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2 * concurrency + 1);\n+\n+    String path = \"root\";\n+\n+    if (args.length != 0) {\n+      path = args[0];\n+    }\n+\n+    readerPool = new SessionPool(\"127.0.0.1\", 6667, \"root\", \"root\", concurrency);\n+    writerPool = new SessionPool(\"127.0.0.1\", 6668, \"root\", \"root\", concurrency);\n+\n+    SessionDataSetWrapper schemaDataSet = readerPool.executeQueryStatement(\"count timeseries \" + path);\n+    DataIterator schemaIter = schemaDataSet.iterator();\n+    int total;\n+    if (schemaIter.next()) {\n+      total = schemaIter.getInt(1);\n+      System.out.println(\"Total timeseries: \" + total);\n+    } else {\n+      System.out.println(\"Can not get timeseries schema\");\n+      System.exit(1);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+\n+    schemaDataSet = readerPool\n+        .executeQueryStatement(\"show timeseries \" + path);\n+    schemaIter = schemaDataSet.iterator();\n+\n+    List<Future> futureList = new ArrayList<>();\n+    int count = 0;\n+    while (schemaIter.next()) {\n+      count ++;\n+      Path currentPath = new Path(schemaIter.getString(\"timeseries\"));\n+      Future future = executorService.submit(new LoadThread(count, currentPath, TSDataType.valueOf(schemaIter.getString(\"dataType\"))));\n+      futureList.add(future);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+    for (Future future: futureList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MDE1Nw==", "bodyText": "writerPool.close()\uff1f", "url": "https://github.com/apache/iotdb/pull/1601#discussion_r467880157", "createdAt": "2020-08-10T12:50:24Z", "author": {"login": "Alima777"}, "path": "example/session/src/main/java/org/apache/iotdb/DataMigrationExample.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.SessionDataSet.DataIterator;\n+import org.apache.iotdb.session.pool.SessionDataSetWrapper;\n+import org.apache.iotdb.session.pool.SessionPool;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.Tablet;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+\n+/**\n+ * Migrate all data belongs to a path from one IoTDB to another IoTDB\n+ * Each thread migrate one series, the concurrent thread can be configured by concurrency\n+ *\n+ * This example is\n+ * migrating all timeseries from a local IoTDB with 6667 port to a local IoTDB with 6668 port\n+ */\n+public class DataMigrationExample {\n+\n+  // used to read data from the source IoTDB\n+  private static SessionPool readerPool;\n+  // used to write data into the destination IoTDB\n+  private static SessionPool writerPool;\n+  // concurrent thread of loading timeseries data\n+  private static int concurrency = 5;\n+\n+  public static void main(String[] args)\n+      throws IoTDBConnectionException, StatementExecutionException, ExecutionException, InterruptedException {\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2 * concurrency + 1);\n+\n+    String path = \"root\";\n+\n+    if (args.length != 0) {\n+      path = args[0];\n+    }\n+\n+    readerPool = new SessionPool(\"127.0.0.1\", 6667, \"root\", \"root\", concurrency);\n+    writerPool = new SessionPool(\"127.0.0.1\", 6668, \"root\", \"root\", concurrency);\n+\n+    SessionDataSetWrapper schemaDataSet = readerPool.executeQueryStatement(\"count timeseries \" + path);\n+    DataIterator schemaIter = schemaDataSet.iterator();\n+    int total;\n+    if (schemaIter.next()) {\n+      total = schemaIter.getInt(1);\n+      System.out.println(\"Total timeseries: \" + total);\n+    } else {\n+      System.out.println(\"Can not get timeseries schema\");\n+      System.exit(1);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+\n+    schemaDataSet = readerPool\n+        .executeQueryStatement(\"show timeseries \" + path);\n+    schemaIter = schemaDataSet.iterator();\n+\n+    List<Future> futureList = new ArrayList<>();\n+    int count = 0;\n+    while (schemaIter.next()) {\n+      count ++;\n+      Path currentPath = new Path(schemaIter.getString(\"timeseries\"));\n+      Future future = executorService.submit(new LoadThread(count, currentPath, TSDataType.valueOf(schemaIter.getString(\"dataType\"))));\n+      futureList.add(future);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+    for (Future future: futureList) {\n+      future.get();\n+    }\n+    executorService.shutdown();\n+\n+    readerPool.close();\n+    readerPool.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4Mzg2NA==", "bodyText": "Are you aimed at blocking the main thread until the end of writing thread using Callable and Future interface? If so, I think using Runnable and executorService.awaitTermination() instead of Future is better.", "url": "https://github.com/apache/iotdb/pull/1601#discussion_r467883864", "createdAt": "2020-08-10T12:57:14Z", "author": {"login": "Alima777"}, "path": "example/session/src/main/java/org/apache/iotdb/DataMigrationExample.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.SessionDataSet.DataIterator;\n+import org.apache.iotdb.session.pool.SessionDataSetWrapper;\n+import org.apache.iotdb.session.pool.SessionPool;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.Tablet;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+\n+/**\n+ * Migrate all data belongs to a path from one IoTDB to another IoTDB\n+ * Each thread migrate one series, the concurrent thread can be configured by concurrency\n+ *\n+ * This example is\n+ * migrating all timeseries from a local IoTDB with 6667 port to a local IoTDB with 6668 port\n+ */\n+public class DataMigrationExample {\n+\n+  // used to read data from the source IoTDB\n+  private static SessionPool readerPool;\n+  // used to write data into the destination IoTDB\n+  private static SessionPool writerPool;\n+  // concurrent thread of loading timeseries data\n+  private static int concurrency = 5;\n+\n+  public static void main(String[] args)\n+      throws IoTDBConnectionException, StatementExecutionException, ExecutionException, InterruptedException {\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2 * concurrency + 1);\n+\n+    String path = \"root\";\n+\n+    if (args.length != 0) {\n+      path = args[0];\n+    }\n+\n+    readerPool = new SessionPool(\"127.0.0.1\", 6667, \"root\", \"root\", concurrency);\n+    writerPool = new SessionPool(\"127.0.0.1\", 6668, \"root\", \"root\", concurrency);\n+\n+    SessionDataSetWrapper schemaDataSet = readerPool.executeQueryStatement(\"count timeseries \" + path);\n+    DataIterator schemaIter = schemaDataSet.iterator();\n+    int total;\n+    if (schemaIter.next()) {\n+      total = schemaIter.getInt(1);\n+      System.out.println(\"Total timeseries: \" + total);\n+    } else {\n+      System.out.println(\"Can not get timeseries schema\");\n+      System.exit(1);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+\n+    schemaDataSet = readerPool\n+        .executeQueryStatement(\"show timeseries \" + path);\n+    schemaIter = schemaDataSet.iterator();\n+\n+    List<Future> futureList = new ArrayList<>();\n+    int count = 0;\n+    while (schemaIter.next()) {\n+      count ++;\n+      Path currentPath = new Path(schemaIter.getString(\"timeseries\"));\n+      Future future = executorService.submit(new LoadThread(count, currentPath, TSDataType.valueOf(schemaIter.getString(\"dataType\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4NDE2NA==", "bodyText": "Same as before.", "url": "https://github.com/apache/iotdb/pull/1601#discussion_r467884164", "createdAt": "2020-08-10T12:57:47Z", "author": {"login": "Alima777"}, "path": "example/session/src/main/java/org/apache/iotdb/DataMigrationExample.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.SessionDataSet.DataIterator;\n+import org.apache.iotdb.session.pool.SessionDataSetWrapper;\n+import org.apache.iotdb.session.pool.SessionPool;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.Tablet;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+\n+/**\n+ * Migrate all data belongs to a path from one IoTDB to another IoTDB\n+ * Each thread migrate one series, the concurrent thread can be configured by concurrency\n+ *\n+ * This example is\n+ * migrating all timeseries from a local IoTDB with 6667 port to a local IoTDB with 6668 port\n+ */\n+public class DataMigrationExample {\n+\n+  // used to read data from the source IoTDB\n+  private static SessionPool readerPool;\n+  // used to write data into the destination IoTDB\n+  private static SessionPool writerPool;\n+  // concurrent thread of loading timeseries data\n+  private static int concurrency = 5;\n+\n+  public static void main(String[] args)\n+      throws IoTDBConnectionException, StatementExecutionException, ExecutionException, InterruptedException {\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2 * concurrency + 1);\n+\n+    String path = \"root\";\n+\n+    if (args.length != 0) {\n+      path = args[0];\n+    }\n+\n+    readerPool = new SessionPool(\"127.0.0.1\", 6667, \"root\", \"root\", concurrency);\n+    writerPool = new SessionPool(\"127.0.0.1\", 6668, \"root\", \"root\", concurrency);\n+\n+    SessionDataSetWrapper schemaDataSet = readerPool.executeQueryStatement(\"count timeseries \" + path);\n+    DataIterator schemaIter = schemaDataSet.iterator();\n+    int total;\n+    if (schemaIter.next()) {\n+      total = schemaIter.getInt(1);\n+      System.out.println(\"Total timeseries: \" + total);\n+    } else {\n+      System.out.println(\"Can not get timeseries schema\");\n+      System.exit(1);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+\n+    schemaDataSet = readerPool\n+        .executeQueryStatement(\"show timeseries \" + path);\n+    schemaIter = schemaDataSet.iterator();\n+\n+    List<Future> futureList = new ArrayList<>();\n+    int count = 0;\n+    while (schemaIter.next()) {\n+      count ++;\n+      Path currentPath = new Path(schemaIter.getString(\"timeseries\"));\n+      Future future = executorService.submit(new LoadThread(count, currentPath, TSDataType.valueOf(schemaIter.getString(\"dataType\"))));\n+      futureList.add(future);\n+    }\n+    readerPool.closeResultSet(schemaDataSet);\n+\n+    for (Future future: futureList) {\n+      future.get();\n+    }\n+    executorService.shutdown();\n+\n+    readerPool.close();\n+    readerPool.close();\n+  }\n+\n+\n+  static class LoadThread implements Callable<Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c56016b2df7e5c69480dcd835677e5ab4cb75f8"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "313626dfe1761d2fe4e382b43e598fba7202d277", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/313626dfe1761d2fe4e382b43e598fba7202d277", "committedDate": "2020-08-10T15:12:41Z", "message": "format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NDA1MDQz", "url": "https://github.com/apache/iotdb/pull/1601#pullrequestreview-466405043", "createdAt": "2020-08-13T02:34:03Z", "commit": {"oid": "313626dfe1761d2fe4e382b43e598fba7202d277"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3369, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}