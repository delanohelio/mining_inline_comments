{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3ODIwMDY1", "number": 1739, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1Nzo1NlrOEsQZlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMzo0OFrOEsQbOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxNDk0OnYy", "diffSide": "RIGHT", "path": "zeppelin-interpreter/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1Nzo1NlrOHfdzrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1Nzo1NlrOHfdzrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjI2OA==", "bodyText": "Please add the apache header.\nYou can see it in other pom files.", "url": "https://github.com/apache/iotdb/pull/1739#discussion_r502756268", "createdAt": "2020-10-10T06:57:56Z", "author": {"login": "HTHou"}, "path": "zeppelin-interpreter/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5cbf79e20c2c596c2f262fb2da2fd9eec028aee"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxNzI1OnYy", "diffSide": "RIGHT", "path": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/iotdb/IoTDBInterpreter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMTowNlrOHfd0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMTowNlrOHfd0vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjU0MA==", "bodyText": "Please follow the format of other java files. Or use .checkstyle  to do the format check.", "url": "https://github.com/apache/iotdb/pull/1739#discussion_r502756540", "createdAt": "2020-10-10T07:01:06Z", "author": {"login": "HTHou"}, "path": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/iotdb/IoTDBInterpreter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.iotdb;\n+\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.SessionDataSet;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.thrift.TException;\n+import org.apache.zeppelin.interpreter.Interpreter;\n+import org.apache.zeppelin.interpreter.InterpreterContext;\n+import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Type;\n+import org.apache.iotdb.session.Session;\n+\n+public class IoTDBInterpreter extends Interpreter {\n+\n+\tprivate IoTDBConnectionException connectionException;\n+\tprivate Session session;\n+\n+\tpublic IoTDBInterpreter(Properties property) {\n+\t\tsuper(property);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5cbf79e20c2c596c2f262fb2da2fd9eec028aee"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxODE3OnYy", "diffSide": "RIGHT", "path": "zeppelin-interpreter/src/main/resources/interpreter-setting.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMjoxNlrOHfd1Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMjoxNlrOHfd1Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjY1MA==", "bodyText": "This file also needs a license header.", "url": "https://github.com/apache/iotdb/pull/1739#discussion_r502756650", "createdAt": "2020-10-10T07:02:16Z", "author": {"login": "HTHou"}, "path": "zeppelin-interpreter/src/main/resources/interpreter-setting.json", "diffHunk": "@@ -0,0 +1,39 @@\n+[\n+  {\n+    \"group\": \"iotdb\",\n+    \"name\": \"iotodb\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5cbf79e20c2c596c2f262fb2da2fd9eec028aee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxODM1OnYy", "diffSide": "RIGHT", "path": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/iotdb/IoTDBInterpreterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMjozNVrOHfd1QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMjozNVrOHfd1QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjY3Mg==", "bodyText": "Add license header and reformat.", "url": "https://github.com/apache/iotdb/pull/1739#discussion_r502756672", "createdAt": "2020-10-10T07:02:35Z", "author": {"login": "HTHou"}, "path": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/iotdb/IoTDBInterpreterTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.apache.zeppelin.iotdb;\n+import java.util.Properties;\n+import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.junit.After;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5cbf79e20c2c596c2f262fb2da2fd9eec028aee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxOTEzOnYy", "diffSide": "RIGHT", "path": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/iotdb/IoTDBInterpreterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMzo0OFrOHfd1pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowMzo0OFrOHfd1pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1Njc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfor(int i=0;i<100;i++){\n          \n          \n            \n            \t\tfor (int i = 0;i < 100; i++) {", "url": "https://github.com/apache/iotdb/pull/1739#discussion_r502756772", "createdAt": "2020-10-10T07:03:48Z", "author": {"login": "HTHou"}, "path": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/iotdb/IoTDBInterpreterTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.apache.zeppelin.iotdb;\n+import java.util.Properties;\n+import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IoTDBInterpreterTest {\n+\tprivate IoTDBInterpreter interpreter;\n+\n+\t@Before\n+\tpublic void open() {\n+\t\tProperties properties = new Properties();\n+\t\tinterpreter = new IoTDBInterpreter(properties);\n+\t\tinterpreter.open();\n+\t}\n+\n+\t@After\n+\tpublic void close() {\n+\t\tinterpreter.close();\n+\t}\n+\n+\t@Test\n+\tpublic void testNonQuery() {\n+\t\tfor(int i=0;i<100;i++){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5cbf79e20c2c596c2f262fb2da2fd9eec028aee"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 733, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}