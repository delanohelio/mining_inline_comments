{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjczNzA0", "number": 1248, "title": "[IOTDB-697] add enablePartition in config", "bodyText": "Disable partition by default, then the query performance will not decrease in 0.10.\nAlso, the default concurrent write partition is set to 1.", "createdAt": "2020-05-23T13:19:41Z", "url": "https://github.com/apache/iotdb/pull/1248", "merged": true, "mergeCommit": {"oid": "8bafdfc0d5656eefb0352ee79902fab0ff8fa290"}, "closed": true, "closedAt": "2020-05-24T11:53:50Z", "author": {"login": "qiaojialin"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckGrVRgH2gAyNDIyMjczNzA0Ojg1Y2E4MDA0NDA0N2YyOTM4NmQxM2ZkNjg4MDM0MTY3Njg1MzZmMWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckXRZ7gH2gAyNDIyMjczNzA0OjU4MzA1OGQ4YjljZDJlMDUzM2Q5ZWI4ZmFkNDViMTRlN2RhMmE0NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "85ca80044047f29386d13fd68803416768536f1d", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/85ca80044047f29386d13fd68803416768536f1d", "committedDate": "2020-05-23T13:14:07Z", "message": "add enablePartition in config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69e963fb987c8f8164f0b3812859a95b1cfa344", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/d69e963fb987c8f8164f0b3812859a95b1cfa344", "committedDate": "2020-05-23T13:38:43Z", "message": "fix sonar"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Mjg1MTU0", "url": "https://github.com/apache/iotdb/pull/1248#pullrequestreview-417285154", "createdAt": "2020-05-23T15:00:41Z", "commit": {"oid": "d69e963fb987c8f8164f0b3812859a95b1cfa344"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNTowMDo0MVrOGZp2bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNTowMDo0MVrOGZp2bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzI2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # default number is 5\n          \n          \n            \n            # default number is 1", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429553263", "createdAt": "2020-05-23T15:00:41Z", "author": {"login": "samperson1997"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -212,7 +216,7 @@ chunk_buffer_pool_enable=false\n # For example, your partitionInterval is 86400 and you want to insert data in 5 different days,\n # you should set this param >= 5\n # default number is 5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e963fb987c8f8164f0b3812859a95b1cfa344"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Mjg5NzE3", "url": "https://github.com/apache/iotdb/pull/1248#pullrequestreview-417289717", "createdAt": "2020-05-23T16:08:35Z", "commit": {"oid": "d69e963fb987c8f8164f0b3812859a95b1cfa344"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25deaf4b875f9d589c71213089b88105838e10b4", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/25deaf4b875f9d589c71213089b88105838e10b4", "committedDate": "2020-05-24T04:08:10Z", "message": "fix review and refactor IoTDBConfigCheck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1599acd5306eb27b04b52c205a631b8b34dc0b67", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/1599acd5306eb27b04b52c205a631b8b34dc0b67", "committedDate": "2020-05-24T04:09:28Z", "message": "fix doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/da880365644aa801cc7ae80bf345ed4c1d83e742", "committedDate": "2020-05-24T05:02:06Z", "message": "add fixing uncomplete properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzI5NDky", "url": "https://github.com/apache/iotdb/pull/1248#pullrequestreview-417329492", "createdAt": "2020-05-24T06:05:48Z", "commit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzMwODg4", "url": "https://github.com/apache/iotdb/pull/1248#pullrequestreview-417330888", "createdAt": "2020-05-24T06:31:31Z", "commit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNjozMTozMVrOGZs90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNjozNzozM1rOGZs_Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDMwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n          \n          \n            \n                    == partitionInterval)) {\n          \n          \n            \n                if (Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n          \n          \n            \n                    != partitionInterval) {", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429604306", "createdAt": "2020-05-24T06:31:31Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n       System.exit(-1);\n     }\n-    if (!(properties.getProperty(\"tsfile_storage_fs\").equals(tsfileFileSystem))) {\n-      logger.error(\"Wrong tsfile file system, please set as: \" + properties\n-              .getProperty(\"tsfile_storage_fs\") + \" !\");\n+\n+    if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n+        == partitionInterval)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDQ4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.error(\"Wrong \" + TSFILE_FILE_SYSTEM_STRING + \", please set as: \" + properties\n          \n          \n            \n                      .getProperty(TSFILE_FILE_SYSTEM_STRING) + \" !\");\n          \n          \n            \n                  logger.error(\"Wrong {}, please set as: {} !\", TSFILE_FILE_SYSTEM_STRING, properties\n          \n          \n            \n                      .getProperty(TSFILE_FILE_SYSTEM_STRING));", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429604483", "createdAt": "2020-05-24T06:34:07Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n       System.exit(-1);\n     }\n-    if (!(properties.getProperty(\"tsfile_storage_fs\").equals(tsfileFileSystem))) {\n-      logger.error(\"Wrong tsfile file system, please set as: \" + properties\n-              .getProperty(\"tsfile_storage_fs\") + \" !\");\n+\n+    if (!(Long.parseLong(properties.getProperty(PARTITION_INTERVAL_STRING))\n+        == partitionInterval)) {\n+      logger.error(\"Wrong \" + PARTITION_INTERVAL_STRING + \", please set as: \" + properties\n+          .getProperty(PARTITION_INTERVAL_STRING) + \" !\");\n       System.exit(-1);\n     }\n-  }\n \n-  private void upgradeMlog() {\n-    try {\n-      MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n-    } catch (IOException e) {\n-      logger.error(\"Upgrade mlog.txt from {} failed.\", SCHEMA_DIR, e);\n+    if (!(properties.getProperty(TSFILE_FILE_SYSTEM_STRING).equals(tsfileFileSystem))) {\n+      logger.error(\"Wrong \" + TSFILE_FILE_SYSTEM_STRING + \", please set as: \" + properties\n+          .getProperty(TSFILE_FILE_SYSTEM_STRING) + \" !\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 345}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDcxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n          \n          \n            \n                      .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");\n          \n          \n            \n                  logger.error(\"Wrong {}, please set as: {} !\", TIMESTAMP_PRECISION_STRING, properties\n          \n          \n            \n                      .getProperty(TIMESTAMP_PRECISION_STRING));", "url": "https://github.com/apache/iotdb/pull/1248#discussion_r429604710", "createdAt": "2020-05-24T06:37:33Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -37,182 +40,242 @@\n \n public class IoTDBConfigCheck {\n \n+  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n+\n   // this file is located in data/system/schema/system.properties\n   // If user delete folder \"data\", system.properties can reset.\n-  public static final String PROPERTIES_FILE_NAME = \"system.properties\";\n-  public static final String SCHEMA_DIR =\n-          IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n-  public static final String WAL_DIR =\n-      IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n-  private static final Logger logger = LoggerFactory.getLogger(IoTDBDescriptor.class);\n-  // this is a initial parameter.\n-  private static String timestampPrecision = \"ms\";\n-  private static long partitionInterval = 86400;\n-  private static String tsfileFileSystem = \"LOCAL\";\n-  private static String iotdbVersion = \"0.10.0\";\n+  private static final String PROPERTIES_FILE_NAME = \"system.properties\";\n+  private static final String SCHEMA_DIR = IoTDBDescriptor.getInstance().getConfig().getSchemaDir();\n+  private static final String WAL_DIR = IoTDBDescriptor.getInstance().getConfig().getWalFolder();\n+\n+  File propertiesFile;\n+  File tmpPropertiesFile;\n+\n   private Properties properties = new Properties();\n \n+  private Map<String, String> systemProperties = new HashMap<>();\n+\n+  private static final String SYSTEM_PROPERTIES_STRING = \"System properties:\";\n+\n+  private static final String TIMESTAMP_PRECISION_STRING = \"timestamp_precision\";\n+  private static String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+\n+  private static final String PARTITION_INTERVAL_STRING = \"partition_interval\";\n+  private static long partitionInterval = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+\n+  private static final String TSFILE_FILE_SYSTEM_STRING = \"tsfile_storage_fs\";\n+  private static String tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n+\n+  private static final String ENABLE_PARTITION_STRING = \"enable_partition\";\n+  private static boolean enablePartition = IoTDBDescriptor.getInstance().getConfig().isEnablePartition();\n+\n+  private static final String IOTDB_VERSION_STRING = \"iotdb_version\";\n+  private static String iotdbVersion = \"0.10.0\";\n+\n   public static IoTDBConfigCheck getInstance() {\n     return IoTDBConfigCheckHolder.INSTANCE;\n   }\n \n-  public void checkConfig() {\n-    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+  private static class IoTDBConfigCheckHolder {\n+    private static final IoTDBConfigCheck INSTANCE = new IoTDBConfigCheck();\n+  }\n+\n+  private IoTDBConfigCheck() {\n+    logger.info(\"Starting IoTDB \" + iotdbVersion);\n+\n+    // check whether SCHEMA_DIR exists, create if not exists\n+    File dir = SystemFileFactory.INSTANCE.getFile(SCHEMA_DIR);\n+    if (!dir.exists()) {\n+      if (!dir.mkdirs()) {\n+        logger.error(\"can not create schema dir: {}\", SCHEMA_DIR);\n+        System.exit(-1);\n+      } else {\n+        logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n+      }\n+    }\n \n     // check time stamp precision\n     if (!(timestampPrecision.equals(\"ms\") || timestampPrecision.equals(\"us\")\n-            || timestampPrecision.equals(\"ns\"))) {\n-      logger.error(\"Wrong timestamp precision, please set as: ms, us or ns ! Current is: \"\n-              + timestampPrecision);\n+        || timestampPrecision.equals(\"ns\"))) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: ms, us or ns ! Current is: \"\n+          + timestampPrecision);\n       System.exit(-1);\n     }\n \n-    partitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-            .getPartitionInterval();\n+    if (!enablePartition) {\n+      partitionInterval = Long.MAX_VALUE;\n+    }\n \n     // check partition interval\n     if (partitionInterval <= 0) {\n       logger.error(\"Partition interval must larger than 0!\");\n       System.exit(-1);\n     }\n \n-    tsfileFileSystem = IoTDBDescriptor.getInstance().getConfig().getTsFileStorageFs().toString();\n-    createDir(SCHEMA_DIR);\n-    checkFile(SCHEMA_DIR);\n-    logger.info(\"System configuration is ok.\");\n-    \n+    systemProperties.put(TIMESTAMP_PRECISION_STRING, timestampPrecision);\n+    systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+    systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+    systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(IOTDB_VERSION_STRING, iotdbVersion);\n   }\n \n-  private void createDir(String filepath) {\n-    File dir = SystemFileFactory.INSTANCE.getFile(filepath);\n-    if (!dir.exists()) {\n-      dir.mkdirs();\n-      logger.info(\" {} dir has been created.\", SCHEMA_DIR);\n-    }\n-  }\n \n-  private void checkFile(String filepath) {\n-    // create file : read timestamp precision from engine.properties, create system.properties\n-    // use output stream to write timestamp precision to file.\n-    File file = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    File tmpPropertiesFile = new File(file.getAbsoluteFile() + \".tmp\");\n-    try {\n-      if (!file.exists() && !tmpPropertiesFile.exists()) {\n-        file.createNewFile();\n-        logger.info(\" {} has been created.\", file.getAbsolutePath());\n-        try (FileOutputStream outputStream = new FileOutputStream(file.toString())) {\n-          properties.setProperty(\"timestamp_precision\", timestampPrecision);\n-          properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-          properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-          properties.setProperty(\"iotdb_version\", iotdbVersion);\n-          properties.store(outputStream, \"System properties:\");\n-        }\n-        return;\n+  /**\n+   * check configuration in system.properties when starting IoTDB\n+   *\n+   * When init: create system.properties directly\n+   *\n+   * When upgrading the system.properties:\n+   * (1) create system.properties.tmp\n+   * (2) delete system.properties\n+   * (2) rename system.properties.tmp to system.properties\n+   */\n+  public void checkConfig() throws IOException {\n+    propertiesFile = SystemFileFactory.INSTANCE\n+            .getFile(IoTDBConfigCheck.SCHEMA_DIR + File.separator + PROPERTIES_FILE_NAME);\n+    tmpPropertiesFile = new File(propertiesFile.getAbsoluteFile() + \".tmp\");\n+\n+    // system init first time, no need to check, write system.properties and return\n+    if (!propertiesFile.exists() && !tmpPropertiesFile.exists()) {\n+      // create system.properties\n+      if (propertiesFile.createNewFile()) {\n+        logger.info(\" {} has been created.\", propertiesFile.getAbsolutePath());\n+      } else {\n+        logger.error(\"can not create {}\", propertiesFile.getAbsolutePath());\n+        System.exit(-1);\n       }\n-      else if (!file.exists() && tmpPropertiesFile.exists()) {\n-        // rename upgraded system.properties.tmp to system.properties\n-        FileUtils.moveFile(tmpPropertiesFile, file);\n-        logger.info(\" {} has been upgraded.\", file.getAbsolutePath());\n-        checkProperties();\n-        return;\n+\n+      // write properties to system.properties\n+      try (FileOutputStream outputStream = new FileOutputStream(propertiesFile)) {\n+        systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+        properties.store(outputStream, SYSTEM_PROPERTIES_STRING);\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Can not create {}.\", file.getAbsolutePath(), e);\n-    }\n-    \n-    // get existed properties from system_properties.txt\n-    File inputFile = SystemFileFactory.INSTANCE\n-            .getFile(filepath + File.separator + PROPERTIES_FILE_NAME);\n-    try (FileInputStream inputStream = new FileInputStream(inputFile.toString())) {\n+      return;\n+    }\n+\n+    if (!propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // rename tmp file to system.properties, no need to check\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n+      logger.info(\"rename {} to {}\", tmpPropertiesFile, propertiesFile);\n+      return;\n+    } else if (propertiesFile.exists() && tmpPropertiesFile.exists()) {\n+      // both files exist, remove tmp file\n+      FileUtils.forceDeleteOnExit(tmpPropertiesFile);\n+      logger.info(\"remove {}\", tmpPropertiesFile);\n+    }\n+\n+    // no tmp file, read properties from system.properties\n+    try (FileInputStream inputStream = new FileInputStream(propertiesFile)) {\n       properties.load(new InputStreamReader(inputStream, TSFileConfig.STRING_CHARSET));\n-      // need to upgrade\n-      if (!properties.containsKey(\"iotdb_version\")) {\n+      // need to upgrade from 0.9 to 0.10\n+      if (!properties.containsKey(IOTDB_VERSION_STRING)) {\n         checkUnClosedTsFileV1();\n-        upgradeMlog();\n-      } else {\n-        checkProperties();\n-        return;\n+        MLogWriter.upgradeMLog(SCHEMA_DIR, MetadataConstant.METADATA_LOG);\n+        upgradePropertiesFile();\n       }\n-    } catch (IOException e) {\n-      logger.error(\"Load system.properties from {} failed.\", file.getAbsolutePath(), e);\n+      checkProperties();\n+    }\n+  }\n+\n+  /**\n+   * upgrade 0.9 properties to 0.10 properties\n+   */\n+  private void upgradePropertiesFile()\n+      throws IOException {\n+    // create an empty tmpPropertiesFile\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n     }\n \n-    // if tmpPropertiesFile exists, remove it\n-    if (tmpPropertiesFile.exists()) {\n-      try {\n-        Files.delete(tmpPropertiesFile.toPath());\n-      } catch (IOException e) {\n-        logger.error(\"Fail to remove broken file {}\", tmpPropertiesFile);\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      properties.setProperty(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n+      properties.setProperty(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n+      properties.setProperty(IOTDB_VERSION_STRING, iotdbVersion);\n+      properties.setProperty(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n+\n+      // upgrade finished, delete old system.properties file\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n+      // rename system.properties.tmp to system.properties\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n+  }\n+\n+\n+  /**\n+   *  repair 0.10 properties\n+   */\n+  private void upgradePropertiesFileFromBrokenFile()\n+      throws IOException {\n     // create an empty tmpPropertiesFile\n-    try {\n-      if (tmpPropertiesFile.createNewFile()) {\n-        logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n-      }\n-    } catch (IOException e) {\n-      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile, e);\n-    }\n-    // try to add the storage_group_time_range, tsfile_storage_fs \n-    // and iotdb_version property in system.properties.tmp\n-    try (FileOutputStream outputStream = new FileOutputStream(tmpPropertiesFile.toString())) {\n-      properties.setProperty(\"storage_group_time_range\", String.valueOf(partitionInterval));\n-      properties.setProperty(\"tsfile_storage_fs\", tsfileFileSystem);\n-      properties.setProperty(\"iotdb_version\", iotdbVersion);\n-      properties.store(outputStream, \"System properties:\");\n-      checkProperties();\n+    if (tmpPropertiesFile.createNewFile()) {\n+      logger.info(\"Create system.properties.tmp {}.\", tmpPropertiesFile);\n+    } else {\n+      logger.error(\"Create system.properties.tmp {} failed.\", tmpPropertiesFile);\n+      System.exit(-1);\n+    }\n+\n+    try (FileOutputStream tmpFOS = new FileOutputStream(tmpPropertiesFile.toString())) {\n+      systemProperties.forEach((k, v) -> properties.setProperty(k, v));\n+\n+      properties.store(tmpFOS, SYSTEM_PROPERTIES_STRING);\n       // upgrade finished, delete old system.properties file\n-      if (file.exists()) {\n-        Files.delete(file.toPath());\n+      if (propertiesFile.exists()) {\n+        Files.delete(propertiesFile.toPath());\n       }\n       // rename system.properties.tmp to system.properties\n-      FileUtils.moveFile(tmpPropertiesFile, file);\n-    }  catch (IOException e) {\n-      logger.error(\"Something went wrong while upgrading teh system.properties. The file is {}.\", file.getAbsolutePath(), e);\n+      FileUtils.moveFile(tmpPropertiesFile, propertiesFile);\n     }\n-\n   }\n \n-  private void checkProperties() {\n-    if (!properties.getProperty(\"timestamp_precision\").equals(timestampPrecision)) {\n-      logger.error(\"Wrong timestamp precision, please set as: \" + properties\n-              .getProperty(\"timestamp_precision\") + \" !\");\n-      System.exit(-1);\n+  private void checkProperties() throws IOException {\n+    for (Entry<String, String> entry : systemProperties.entrySet()) {\n+      if (!properties.contains(entry.getKey())) {\n+        upgradePropertiesFileFromBrokenFile();\n+        logger.info(\"repair system.properties, lack {}\", entry.getKey());\n+      }\n     }\n-    if (!(Long.parseLong(properties.getProperty(\"storage_group_time_range\"))\n-            == partitionInterval)) {\n-      logger.error(\"Wrong storage group time range, please set as: \" + properties\n-              .getProperty(\"storage_group_time_range\") + \" !\");\n+\n+    if (!properties.getProperty(TIMESTAMP_PRECISION_STRING).equals(timestampPrecision)) {\n+      logger.error(\"Wrong \" + TIMESTAMP_PRECISION_STRING + \", please set as: \" + properties\n+          .getProperty(TIMESTAMP_PRECISION_STRING) + \" !\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da880365644aa801cc7ae80bf345ed4c1d83e742"}, "originalPosition": 323}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583058d8b9cd2e0533d9eb8fad45b14e7da2a464", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/583058d8b9cd2e0533d9eb8fad45b14e7da2a464", "committedDate": "2020-05-24T08:34:11Z", "message": "fix sonar"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3891, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}