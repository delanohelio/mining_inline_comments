{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjE3ODQ2", "number": 1198, "title": "[IOTDB-355] Start up checks for seed nodes", "bodyText": "This pull request implements the start up checks for seed nodes. It mainly modifies the addSeedNodes method in MetaGroupMember.\nThe seed nodes should have identical values of partition interval, hash salt and relication number.", "createdAt": "2020-05-12T09:58:39Z", "url": "https://github.com/apache/iotdb/pull/1198", "merged": true, "mergeCommit": {"oid": "dddebe0e92dbb3bcdb95cd1f7541eb9680c21002"}, "closed": true, "closedAt": "2020-05-15T02:03:11Z", "author": {"login": "Ring-k"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgajYPAH2gAyNDE2NjE3ODQ2OjlkMDRmM2FiYzVhYjFkZjk1ZDkyMjg4ZTMzOTZjYTBiYzIzMzRhYjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchYR-IAFqTQxMjI5OTA3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9d04f3abc5ab1df95d92288e3396ca0bc2334ab2", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/9d04f3abc5ab1df95d92288e3396ca0bc2334ab2", "committedDate": "2020-05-12T02:07:50Z", "message": "start up check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "328322d1ece952e07c3cf1b2e1e6277c641b8841", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/328322d1ece952e07c3cf1b2e1e6277c641b8841", "committedDate": "2020-05-12T02:09:10Z", "message": "Merge branch 'cluster_new' of https://github.com/Ring-k/incubator-iotdb into cluster_new"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTU2MDgz", "url": "https://github.com/apache/iotdb/pull/1198#pullrequestreview-410556083", "createdAt": "2020-05-13T03:02:59Z", "commit": {"oid": "328322d1ece952e07c3cf1b2e1e6277c641b8841"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowMjo1OVrOGUf3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowMzo1NVrOGUf36g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NjY5OA==", "bodyText": "The log levels should be \"error\" here.", "url": "https://github.com/apache/iotdb/pull/1198#discussion_r424146698", "createdAt": "2020-05-13T03:02:59Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -319,31 +333,119 @@ private void initSubServers() throws TTransportException, StartupException {\n    */\n   private void addSeedNodes() {\n     List<String> seedUrls = config.getSeedNodeUrls();\n-    for (String seedUrl : seedUrls) {\n-      String[] split = seedUrl.split(\":\");\n-      if (split.length != 3) {\n-        logger.warn(\"Bad seed url: {}\", seedUrl);\n-        continue;\n+    boolean canEstablishCluster = false;\n+    long startTime = System.currentTimeMillis();\n+    while (!canEstablishCluster) {\n+      ExecutorService pool = new ScheduledThreadPoolExecutor(STARTUP_CHECK_THREAD_POOL_SIZE);\n+      AtomicInteger consistentNum = new AtomicInteger(1);\n+      AtomicInteger inconsistentNum = new AtomicInteger(0);\n+      for (String seedUrl : seedUrls) {\n+        String[] split = seedUrl.split(\":\");\n+        if (split.length != 3) {\n+          logger.warn(\"Bad seed url: {}\", seedUrl);\n+          continue;\n+        }\n+        String ip = split[0];\n+        try {\n+          int metaPort = Integer.parseInt(split[1]);\n+          int dataPort = Integer.parseInt(split[2]);\n+          if (!ip.equals(thisNode.ip) || metaPort != thisNode.metaPort) {\n+            // do not add the local node since it is added in `setThisNode()`\n+            Node seedNode = new Node();\n+            seedNode.setIp(ip);\n+            seedNode.setMetaPort(metaPort);\n+            seedNode.setDataPort(dataPort);\n+            if (!allNodes.contains(seedNode)) {\n+              allNodes.add(seedNode);\n+            }\n+            pool.submit(() -> {\n+              AsyncClient client = (AsyncClient) connectNode(seedNode);\n+              AtomicReference<CheckStatusResponse> response\n+                  = new AtomicReference<>(null);\n+              CheckStartUpStatusHandler handler = new CheckStartUpStatusHandler();\n+              if (client != null) {\n+                handler.setResponse(response);\n+                synchronized (response) {\n+                  try {\n+                    client.checkStatus(startUpStatus, handler);\n+                    response.wait(10 * 1000);\n+                  } catch (TException e) {\n+                    logger.warn(\"Error occurs when check status on node : {}\", seedUrl);\n+                  } catch (InterruptedException e) {\n+                    logger.warn(\"Current thread is interrupted.\");\n+                  }\n+                }\n+                if (response.get() != null) {\n+                  // check the response\n+                  boolean partitionIntervalEquals = response.get().partitionalIntervalEquals;\n+                  boolean hashSaltEquals = response.get().hashSaltEquals;\n+                  boolean replicationNumEquals = response.get().replicationNumEquals;\n+                  if (!partitionIntervalEquals) {\n+                    logger.info(\n+                        \"Local partition interval conflicts with the majority of seed nodes.\");\n+                  }\n+                  if (!hashSaltEquals) {\n+                    logger\n+                        .info(\"Local hash salt conflicts with the majority of seed nodes.\");\n+                  }\n+                  if (!replicationNumEquals) {\n+                    logger.info(\n+                        \"Local replication number conflicts with the majority of seed nodes.\");\n+                  }\n+                  if (partitionIntervalEquals && hashSaltEquals && replicationNumEquals) {\n+                    consistentNum.set(consistentNum.get() + 1);\n+                  } else {\n+                    inconsistentNum.set(inconsistentNum.get() + 1);\n+                  }\n+                } else {\n+                  logger.warn(\n+                      \"Start up exception. Cannot connect to node {}. Try again in next turn.\",\n+                      seedNode);\n+                }\n+              }\n+            });\n+          }\n+        } catch (NumberFormatException e) {\n+          logger.warn(\"Bad seed url: {}\", seedUrl);\n+        }\n       }\n-      String ip = split[0];\n+      pool.shutdown();\n       try {\n-        int metaPort = Integer.parseInt(split[1]);\n-        int dataPort = Integer.parseInt(split[2]);\n-        if (!ip.equals(thisNode.ip) || metaPort != thisNode.metaPort) {\n-          // do not add the local node since it is added in `setThisNode()`\n-          Node seedNode = new Node();\n-          seedNode.setIp(ip);\n-          seedNode.setMetaPort(metaPort);\n-          seedNode.setDataPort(dataPort);\n-          if (!allNodes.contains(seedNode)) {\n-            // avoid duplications\n-            allNodes.add(seedNode);\n-          }\n+        pool.awaitTermination(WAIT_START_UP_CHECK_TIME, WAIT_START_UP_CHECK_TIME_UNIT);\n+      } catch (InterruptedException e) {\n+        logger.error(\"Unexpected interruption when waiting for start up checks\", e);\n+        continue;\n+      }\n+      canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n+          seedUrls.size(), System.currentTimeMillis() - startTime);\n+    }\n+  }\n+\n+  private boolean analyseStartUpCheckResult(int consistentNum, int inconsistentNum,\n+      int totalSeedNum, long timeElapsed) {\n+    if (consistentNum >= (totalSeedNum + 1) / 2) {\n+      // break the loop and establsih the cluster\n+      return true;\n+    } else if (inconsistentNum >= (totalSeedNum + 1) / 2) {\n+      // this node is not consistent with the cluster, shut down\n+      logger.debug(\"The configuration of this node is inconsistent with the cluster.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328322d1ece952e07c3cf1b2e1e6277c641b8841"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NjkyMg==", "bodyText": "Please revert this.", "url": "https://github.com/apache/iotdb/pull/1198#discussion_r424146922", "createdAt": "2020-05-13T03:03:55Z", "author": {"login": "jt2594838"}, "path": "service-rpc/src/main/thrift/cluster.thrift", "diffHunk": "@@ -370,10 +370,12 @@ service TSMetaService extends RaftService {\n   **/\n   AddNodeResponse addNode(1: Node node, 2: StartUpStatus startUpStatus)\n \n+  CheckStatusResponse  checkStatus(1: StartUpStatus startUpStatus)\n+\n   /**\n   * Remove a node from the cluster. If the node is not in the cluster or the cluster size will\n   * less than replication number, the request will be rejected.\n-  * return -1(RESPONSE_AGREE) or -3(RESPONSE_REJECT) or -9(RESPONSE_CLUSTER_TOO_SMALL)\n+  * return -1(RESPONSE_AGREE) or -3(RESPONSE_REJECT) or -9(RESPONSE_CLUSTEMetaGroupMemberR_TOO_SMALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328322d1ece952e07c3cf1b2e1e6277c641b8841"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dace1ca796396831ff2bc10c24e81e956c95fd8", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/1dace1ca796396831ff2bc10c24e81e956c95fd8", "committedDate": "2020-05-13T06:22:03Z", "message": "debug -> error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "078704e7c54aee668040bb1e4ec49a89088cfa2a", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/078704e7c54aee668040bb1e4ec49a89088cfa2a", "committedDate": "2020-05-13T11:38:29Z", "message": "check seed node list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5db3755706b22484c4f4439d1f0616727c0f542e", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/5db3755706b22484c4f4439d1f0616727c0f542e", "committedDate": "2020-05-13T14:15:35Z", "message": "modify test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDExNDg0", "url": "https://github.com/apache/iotdb/pull/1198#pullrequestreview-411411484", "createdAt": "2020-05-14T01:48:45Z", "commit": {"oid": "078704e7c54aee668040bb1e4ec49a89088cfa2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTo0ODo0NVrOGVJTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTo0ODo0NVrOGVJTkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyNTc0Nw==", "bodyText": "Is it necessary to copy them to an array rather than just use List.sort()?", "url": "https://github.com/apache/iotdb/pull/1198#discussion_r424825747", "createdAt": "2020-05-14T01:48:45Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -905,6 +936,63 @@ private boolean processAddNodeLocally(Node node, StartUpStatus startUpStatus,\n     return false;\n   }\n \n+  private boolean checkSeedNodes(boolean isClusterEstablished, List<Node> localSeedNodes,\n+      List<Node> remoteSeedNodes) {\n+    return isClusterEstablished ? seedNodesContains(localSeedNodes, remoteSeedNodes)\n+        : seedNodesEquals(localSeedNodes, remoteSeedNodes);\n+  }\n+\n+  private boolean seedNodesEquals(List<Node> thisNodeList, List<Node> thatNodeList) {\n+    Node[] thisNodeArray = thisNodeList.toArray(new Node[0]);\n+    Node[] thatNodeArray = thatNodeList.toArray(new Node[0]);\n+    Arrays.sort(thisNodeArray, this::compareSeedNode);\n+    Arrays.sort(thatNodeArray, this::compareSeedNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078704e7c54aee668040bb1e4ec49a89088cfa2a"}, "originalPosition": 259}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87e3426cc43af90f2ab49f1c3e8117f949bae26", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/e87e3426cc43af90f2ab49f1c3e8117f949bae26", "committedDate": "2020-05-14T02:44:52Z", "message": "list sort"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjk5MDc1", "url": "https://github.com/apache/iotdb/pull/1198#pullrequestreview-412299075", "createdAt": "2020-05-15T02:02:56Z", "commit": {"oid": "e87e3426cc43af90f2ab49f1c3e8117f949bae26"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3854, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}