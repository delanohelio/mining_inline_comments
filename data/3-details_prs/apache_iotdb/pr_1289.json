{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDgwMDc4", "number": 1289, "title": "Add force stop storage engine interface", "bodyText": "The shut down is not simulated because syncCloseAllProcessors in StorageEngine.stop(), need to refactor", "createdAt": "2020-05-29T12:40:54Z", "url": "https://github.com/apache/iotdb/pull/1289", "merged": true, "mergeCommit": {"oid": "209c66c9426c5549c8e0803ad99ba5d3b75ba907"}, "closed": true, "closedAt": "2020-06-19T07:58:35Z", "author": {"login": "qiaojialin"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmBzK2AH2gAyNDI1MDgwMDc4OmQzZDcwZGVlM2NjMDFmYmIyMTYyOTg3N2FjOWM2ZjcwOTliZWVhZWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsuDY0gFqTQzMzg2NjA1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3d70dee3cc01fbb21629877ac9c6f7099beeaed", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/d3d70dee3cc01fbb21629877ac9c6f7099beeaed", "committedDate": "2020-05-29T12:41:00Z", "message": "add some test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c2d1f963c2026ba1bfb0213f75243fccd02df9", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/02c2d1f963c2026ba1bfb0213f75243fccd02df9", "committedDate": "2020-05-29T14:47:23Z", "message": "add one more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "882508530059235e3f501f8f79de0edb1c8792be", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/882508530059235e3f501f8f79de0edb1c8792be", "committedDate": "2020-06-01T03:03:13Z", "message": "add testStop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7638bfff96dc62c3e57e0ebeb57782b128e790c9", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7638bfff96dc62c3e57e0ebeb57782b128e790c9", "committedDate": "2020-06-01T03:03:24Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into add_restart_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d2f0de5e41cbfde9360293d9c4cac8fdba87aa", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a3d2f0de5e41cbfde9360293d9c4cac8fdba87aa", "committedDate": "2020-06-01T03:28:41Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0f62f1e3dbb431cc2895762909890bd73c93e0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8f0f62f1e3dbb431cc2895762909890bd73c93e0", "committedDate": "2020-06-01T08:31:11Z", "message": "refactor testStop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a677d2626709a7d39268f4afb44dcb3f2c1f87e5", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a677d2626709a7d39268f4afb44dcb3f2c1f87e5", "committedDate": "2020-06-01T08:47:07Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "425d1f016b813ad096718224dbc6034459471253", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/425d1f016b813ad096718224dbc6034459471253", "committedDate": "2020-06-02T01:48:51Z", "message": "fix windows test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f07f327f33b5c7f080ee1864183a5263f4d30cf", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6f07f327f33b5c7f080ee1864183a5263f4d30cf", "committedDate": "2020-06-11T09:44:30Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into add_restart_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c3cf3112e02729f5851d7dce808c0dda6b00005", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/0c3cf3112e02729f5851d7dce808c0dda6b00005", "committedDate": "2020-06-12T09:11:27Z", "message": "force stop storage engine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45604e567b36b96bdaac6e76fe31330d136d11fe", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/45604e567b36b96bdaac6e76fe31330d136d11fe", "committedDate": "2020-06-13T06:16:12Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0e2f6996df2b4a452adef95558703abd9d19de", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/2b0e2f6996df2b4a452adef95558703abd9d19de", "committedDate": "2020-06-15T05:31:33Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c933d1ebbb64a9c9d8eceea79a5082c5ba8eae94", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c933d1ebbb64a9c9d8eceea79a5082c5ba8eae94", "committedDate": "2020-06-15T07:32:21Z", "message": "fix mmanager init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa9d71f46accebd3240d4a287a1823e957671862", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/fa9d71f46accebd3240d4a287a1823e957671862", "committedDate": "2020-06-15T08:51:20Z", "message": "fix wal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52d35ed4e4ba9532ca38f1d67f17640ed440fef0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/52d35ed4e4ba9532ca38f1d67f17640ed440fef0", "committedDate": "2020-06-16T08:15:05Z", "message": "stop wal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff4135b88ec8d9afb3739b40e7e4e7840b1d180", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/1ff4135b88ec8d9afb3739b40e7e4e7840b1d180", "committedDate": "2020-06-17T02:26:07Z", "message": "add normal stop back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fd8240529106943fd0bd2c6432db39229558c46", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/4fd8240529106943fd0bd2c6432db39229558c46", "committedDate": "2020-06-17T05:58:36Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into add_restart_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "859f165811a7a74c25499709c0548a4879afb6bb", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/859f165811a7a74c25499709c0548a4879afb6bb", "committedDate": "2020-06-17T06:09:01Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6608781f87f2b98c0a122fc4d6bbf3a34a6846", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/4f6608781f87f2b98c0a122fc4d6bbf3a34a6846", "committedDate": "2020-06-17T06:19:29Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a628fdc9c53806dc311f60c68d0dfca370d433e0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a628fdc9c53806dc311f60c68d0dfca370d433e0", "committedDate": "2020-06-17T13:24:28Z", "message": "try fix error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8198df42ed72a3d42283ce3764b3ab7f8bd2431e", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8198df42ed72a3d42283ce3764b3ab7f8bd2431e", "committedDate": "2020-06-18T05:43:01Z", "message": "try fix error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae2e139d73162d7f69492798af558b3013b36d46", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ae2e139d73162d7f69492798af558b3013b36d46", "committedDate": "2020-06-18T07:50:46Z", "message": "wal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "132767e0ee91eb6d705c4c6d3ca646fc29acfad6", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/132767e0ee91eb6d705c4c6d3ca646fc29acfad6", "committedDate": "2020-06-18T08:28:22Z", "message": "add is open check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3cfa1025329d94f8360bffb0878f6c7c6ebf234", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/d3cfa1025329d94f8360bffb0878f6c7c6ebf234", "committedDate": "2020-06-18T09:28:13Z", "message": "fix restart ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/81222191bb9ae8f0aa53719de96cb22751cfb31a", "committedDate": "2020-06-18T09:30:46Z", "message": "fix restart ci"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjA0Nzk0", "url": "https://github.com/apache/iotdb/pull/1289#pullrequestreview-433204794", "createdAt": "2020-06-18T11:51:32Z", "commit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo1MTozMlrOGlr0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjoyNDoyNFrOGls4dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2ODQ0OQ==", "bodyText": "Why we need to set it to true, it seems thats it has been set to true in the constructor of MMangaer.", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442168449", "createdAt": "2020-06-18T11:51:32Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -176,6 +176,7 @@ public synchronized void init() {\n     try {\n       tagLogFile = new TagLogFile(config.getSchemaDir(), MetadataConstant.TAG_LOG);\n \n+      isRecovering = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4Mzc5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EnvironmentUtils.shutdownDaemon();\n          \n          \n            \n                EnvironmentUtils.reactiveDaemon();\n          \n          \n            \n                EnvironmentUtils.restartDaemon();", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442183799", "createdAt": "2020-06-18T12:20:44Z", "author": {"login": "JackieTien97"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.integration;\n+\n+import static org.apache.iotdb.db.constant.TestConstant.count;\n+import static org.apache.iotdb.db.constant.TestConstant.max_value;\n+import static org.apache.iotdb.db.constant.TestConstant.min_time;\n+import static org.apache.iotdb.db.constant.TestConstant.min_value;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Locale;\n+import org.apache.iotdb.db.exception.StartupException;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.apache.iotdb.jdbc.Config;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IoTDBRecoverUnclosedIT {\n+\n+  private static final String TIMESTAMP_STR = \"Time\";\n+  private static final String TEMPERATURE_STR = \"root.ln.wf01.wt01.temperature\";\n+  private static String[] creationSqls = new String[]{\n+      \"SET STORAGE GROUP TO root.vehicle.d0\",\n+      \"SET STORAGE GROUP TO root.vehicle.d1\",\n+\n+      \"CREATE TIMESERIES root.vehicle.d0.s0 WITH DATATYPE=INT32, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s1 WITH DATATYPE=INT64, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s2 WITH DATATYPE=FLOAT, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s3 WITH DATATYPE=TEXT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s4 WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\"\n+  };\n+  private static String[] dataSet2 = new String[]{\n+      \"SET STORAGE GROUP TO root.ln.wf01.wt01\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.hardware WITH DATATYPE=INT32, ENCODING=PLAIN\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(1, 1.1, false, 11)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(2, 2.2, true, 22)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(3, 3.3, false, 33 )\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(4, 4.4, false, 44)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(5, 5.5, false, 55)\"\n+  };\n+  private final String d0s0 = \"root.vehicle.d0.s0\";\n+  private final String d0s1 = \"root.vehicle.d0.s1\";\n+  private final String d0s2 = \"root.vehicle.d0.s2\";\n+  private final String d0s3 = \"root.vehicle.d0.s3\";\n+  private String insertTemplate = \"INSERT INTO root.vehicle.d0(timestamp,s0,s1,s2,s3,s4)\"\n+      + \" VALUES(%d,%d,%d,%f,%s,%s)\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.closeStatMonitor();\n+\n+    EnvironmentUtils.envSetUp();\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    prepareData();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws SQLException, IOException, StartupException {\n+    String[] retArray = new String[]{\n+        \"0,2\",\n+        \"0,4\",\n+        \"0,3\"\n+    };\n+    try (Connection connection = DriverManager.\n+        getConnection(\"jdbc:iotdb://127.0.0.1:6667/\", \"root\", \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      boolean hasResultSet = statement.execute(\n+          \"select count(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      int cnt;\n+      try (ResultSet resultSet = statement.getResultSet();) {\n+        cnt = 0;\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(count(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(1, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where temperature > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(3, cnt);\n+      }\n+\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      fail(e.getMessage());\n+    }\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4NDAyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EnvironmentUtils.shutdownDaemon();\n          \n          \n            \n                EnvironmentUtils.reactiveDaemon();\n          \n          \n            \n                EnvironmentUtils.restartDaemon();", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442184029", "createdAt": "2020-06-18T12:21:06Z", "author": {"login": "JackieTien97"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBRecoverUnclosedIT.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.integration;\n+\n+import static org.apache.iotdb.db.constant.TestConstant.count;\n+import static org.apache.iotdb.db.constant.TestConstant.max_value;\n+import static org.apache.iotdb.db.constant.TestConstant.min_time;\n+import static org.apache.iotdb.db.constant.TestConstant.min_value;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Locale;\n+import org.apache.iotdb.db.exception.StartupException;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.apache.iotdb.jdbc.Config;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IoTDBRecoverUnclosedIT {\n+\n+  private static final String TIMESTAMP_STR = \"Time\";\n+  private static final String TEMPERATURE_STR = \"root.ln.wf01.wt01.temperature\";\n+  private static String[] creationSqls = new String[]{\n+      \"SET STORAGE GROUP TO root.vehicle.d0\",\n+      \"SET STORAGE GROUP TO root.vehicle.d1\",\n+\n+      \"CREATE TIMESERIES root.vehicle.d0.s0 WITH DATATYPE=INT32, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s1 WITH DATATYPE=INT64, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s2 WITH DATATYPE=FLOAT, ENCODING=RLE\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s3 WITH DATATYPE=TEXT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.vehicle.d0.s4 WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\"\n+  };\n+  private static String[] dataSet2 = new String[]{\n+      \"SET STORAGE GROUP TO root.ln.wf01.wt01\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=PLAIN\",\n+      \"CREATE TIMESERIES root.ln.wf01.wt01.hardware WITH DATATYPE=INT32, ENCODING=PLAIN\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(1, 1.1, false, 11)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(2, 2.2, true, 22)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(3, 3.3, false, 33 )\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(4, 4.4, false, 44)\",\n+      \"INSERT INTO root.ln.wf01.wt01(timestamp,temperature,status, hardware) \"\n+          + \"values(5, 5.5, false, 55)\"\n+  };\n+  private final String d0s0 = \"root.vehicle.d0.s0\";\n+  private final String d0s1 = \"root.vehicle.d0.s1\";\n+  private final String d0s2 = \"root.vehicle.d0.s2\";\n+  private final String d0s3 = \"root.vehicle.d0.s3\";\n+  private String insertTemplate = \"INSERT INTO root.vehicle.d0(timestamp,s0,s1,s2,s3,s4)\"\n+      + \" VALUES(%d,%d,%d,%f,%s,%s)\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.closeStatMonitor();\n+\n+    EnvironmentUtils.envSetUp();\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    prepareData();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws SQLException, IOException, StartupException {\n+    String[] retArray = new String[]{\n+        \"0,2\",\n+        \"0,4\",\n+        \"0,3\"\n+    };\n+    try (Connection connection = DriverManager.\n+        getConnection(\"jdbc:iotdb://127.0.0.1:6667/\", \"root\", \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      boolean hasResultSet = statement.execute(\n+          \"select count(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      int cnt;\n+      try (ResultSet resultSet = statement.getResultSet();) {\n+        cnt = 0;\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(count(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(1, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where time > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(2, cnt);\n+      }\n+\n+      hasResultSet = statement.execute(\n+          \"select min_time(temperature) from root.ln.wf01.wt01 where temperature > 3\");\n+\n+      Assert.assertTrue(hasResultSet);\n+      try (ResultSet resultSet = statement.getResultSet()) {\n+        while (resultSet.next()) {\n+          String ans = resultSet.getString(TIMESTAMP_STR) + \",\" +\n+              resultSet.getString(min_time(TEMPERATURE_STR));\n+          Assert.assertEquals(retArray[cnt], ans);\n+          cnt++;\n+        }\n+        Assert.assertEquals(3, cnt);\n+      }\n+\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      fail(e.getMessage());\n+    }\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();\n+    \n+    insertMoreData();\n+\n+    EnvironmentUtils.shutdownDaemon();\n+    EnvironmentUtils.reactiveDaemon();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4NTg0Ng==", "bodyText": "I think you should rethrow the exception, and in the tests, you should catch it, and add failed() clause.", "url": "https://github.com/apache/iotdb/pull/1289#discussion_r442185846", "createdAt": "2020-06-18T12:24:24Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/service/RegisterManager.java", "diffHunk": "@@ -64,4 +65,21 @@ public void deregisterAll() {\n     iServices.clear();\n     logger.info(\"deregister all service.\");\n   }\n+  \n+  /**\n+   * stop all service and clear iService list.\n+   */\n+  public void shutdownAll() {\n+    //we stop JMXServer at last\n+    Collections.reverse(iServices);\n+    for (IService service : iServices) {\n+      try {\n+        service.shutdown(10000);\n+      } catch (Exception e) {\n+        logger.error(\"Failed to stop {} because:\", service.getID().getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81222191bb9ae8f0aa53719de96cb22751cfb31a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68d6f5e2516d2525a4eecd3ec011e7c0124e455", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c68d6f5e2516d2525a4eecd3ec011e7c0124e455", "committedDate": "2020-06-18T14:53:30Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85f1c0ca154f628a950501db81c1178dffd3443c", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/85f1c0ca154f628a950501db81c1178dffd3443c", "committedDate": "2020-06-19T02:52:28Z", "message": "throw exception when shutdown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af281695d449d65913633c24394cdd1196bb0550", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/af281695d449d65913633c24394cdd1196bb0550", "committedDate": "2020-06-19T06:28:49Z", "message": "code smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODY2MDUy", "url": "https://github.com/apache/iotdb/pull/1289#pullrequestreview-433866052", "createdAt": "2020-06-19T07:38:05Z", "commit": {"oid": "af281695d449d65913633c24394cdd1196bb0550"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3723, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}