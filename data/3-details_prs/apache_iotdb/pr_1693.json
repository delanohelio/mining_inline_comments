{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNDkxNTg2", "number": 1693, "title": "[IOTDB-863]: add a switch to drop ouf-of-order data that is recognized by IoTDB", "bodyText": "Users may not care about out of order data.\nSo I add a configuration parameter (enable_discard_out_of_order_data) to allow iotdb to discard the out-of-order data\njira: https://issues.apache.org/jira/projects/IOTDB/issues/IOTDB-863?filter=allopenissues", "createdAt": "2020-09-05T09:49:26Z", "url": "https://github.com/apache/iotdb/pull/1693", "merged": true, "mergeCommit": {"oid": "2e7d902176229f77c8c56e3d0bbd57a83835484b"}, "closed": true, "closedAt": "2020-09-27T12:07:21Z", "author": {"login": "haimeiguo"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7wv95gH2gAyNDgwNDkxNTg2OjEzMGNlZjgzZmRmMWY0ZmYzM2FiMzFhMzYxZTY1YWI0MWFlOTdjNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdM91OIAFqTQ5NzA3Njc0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "author": {"user": null}, "url": "https://github.com/apache/iotdb/commit/130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "committedDate": "2020-08-05T01:15:27Z", "message": "server/src/assembly/resources/conf/logback.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5c1684947a562dbbbd667c7046a1d13956d6334", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/a5c1684947a562dbbbd667c7046a1d13956d6334", "committedDate": "2020-08-05T03:30:31Z", "message": "fix loginfo appender ref to FILEINFO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDQ1MTE2", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-483045116", "createdAt": "2020-09-05T09:55:49Z", "commit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwOTo1NTo0OVrOHNhBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMDozMzowNlrOHNhMNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNDUxMQ==", "bodyText": "you should move the code to the position before previous two line, because the two line  has no meaning if the data will be discarded.", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r483934511", "createdAt": "2020-09-05T09:55:49Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -733,10 +733,15 @@ public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {\n       partitionLatestFlushedTimeForEachDevice\n           .computeIfAbsent(timePartitionId, id -> new HashMap<>());\n \n+      boolean isSequence = insertRowPlan.getTime() > partitionLatestFlushedTimeForEachDevice.get(timePartitionId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNzMzMw==", "bodyText": "so, the first row of one timepartition always insert into unsequence memtable?", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r483937333", "createdAt": "2020-09-05T10:33:06Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -808,8 +815,11 @@ public void insertTablet(InsertTabletPlan insertTabletPlan) throws BatchInsertio\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMjcyODc3", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-483272877", "createdAt": "2020-09-07T06:31:45Z", "commit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjozMTo0NVrOHNxwvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjozMTo0NVrOHNxwvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwODgyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean enable_discard_out_of_order_data = false;\n          \n          \n            \n              private boolean enableDiscardOutOfOrderData = false;", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484208829", "createdAt": "2020-09-07T06:31:45Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -144,6 +144,8 @@\n \n   private volatile boolean readOnly = false;\n \n+  private boolean enable_discard_out_of_order_data = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c890fb9057d3d96a7d37533e8e2b54a2c166f989"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTA3MTM3", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-483507137", "createdAt": "2020-09-07T12:11:35Z", "commit": {"oid": "314211aae4062769bf165613df034d556fef9b77"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTA4NzE3", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-486508717", "createdAt": "2020-09-11T06:34:03Z", "commit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozNDowNFrOHQQGAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozNDowNFrOHQQGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMjk0NA==", "bodyText": "remember to reset this to its default value in the end of the test\nWe usually do this as follows:\nboolean defaultValue = config.isEnableDiscard...;\nconfig.setEnableDiscard(true);\ndo some test\nconfig.setEnableDiscard(defaultValue);", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486802944", "createdAt": "2020-09-11T06:34:04Z", "author": {"login": "qiaojialin"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTE5MTA1", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-486519105", "createdAt": "2020-09-11T06:54:42Z", "commit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1NDo0MlrOHQQnDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzowMjowMVrOHQQzng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMTQwNw==", "bodyText": "I think you forget to control last batch of data and update cache part. These part also need to filter unsequence data", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486811407", "createdAt": "2020-09-11T06:54:42Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -706,8 +714,11 @@ public void insertTablet(InsertTabletPlan insertTabletPlan) throws BatchInsertio\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {\n             // insert into unsequence and then start sequence\n-            noFailure = insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n-                beforeTimePartition) && noFailure;\n+            if (!IoTDBDescriptor.getInstance().getConfig().isEnableDiscardOutOfOrderData()) {\n+              noFailure =\n+                  insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n+                      beforeTimePartition) && noFailure;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMzE4Mw==", "bodyText": "You may change the time partition range to test some conner case of your code", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486813183", "createdAt": "2020-09-11T06:58:42Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n+      throws QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementSchema[] schemas = new MeasurementSchema[2];\n+    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n+    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n+\n+    MNode deviceMNode = new MNode(null, deviceId);\n+    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n+    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan1.setSchemas(schemas);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan2.setSchemas(schemas);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNDYyMg==", "bodyText": "You should also add some flush operation to test your code", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486814622", "createdAt": "2020-09-11T07:02:01Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n+      throws QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementSchema[] schemas = new MeasurementSchema[2];\n+    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n+    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n+\n+    MNode deviceMNode = new MNode(null, deviceId);\n+    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n+    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan1.setSchemas(schemas);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan2.setSchemas(schemas);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538"}, "originalPosition": 111}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "495d6e35e902afb1c55e4915509558987233c181", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/495d6e35e902afb1c55e4915509558987233c181", "committedDate": "2020-09-21T02:01:08Z", "message": "Merge branch 'master_enable_discard_outoforder_data' of github.com:kelggu/incubator-iotdb into master_enable_discard_outoforder_data"}, "afterCommit": {"oid": "314211aae4062769bf165613df034d556fef9b77", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/314211aae4062769bf165613df034d556fef9b77", "committedDate": "2020-09-07T11:53:23Z", "message": "changed code position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3607ffd248d51e6eaf886c329adc6eaa88b9d008", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/3607ffd248d51e6eaf886c329adc6eaa88b9d008", "committedDate": "2020-09-21T07:11:34Z", "message": "Merge branch 'master' into apache_master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTc0MDc2", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-493174076", "createdAt": "2020-09-22T07:04:14Z", "commit": {"oid": "3d970378893628cee00521c9149f275d497fe254"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzowNDoxNFrOHVsqTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzowNDoxNFrOHVsqTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzg3MA==", "bodyText": "use this line to change the time partition and add some test over different time partition. IoTDBDescriptor.getInstance().getConfig().setPartitionInterval(100);\ndo not forget to set it back to original value. You can refer to IoTDBMultiSeriesIT.java for this. Thank you very much XD", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r492513870", "createdAt": "2020-09-22T07:04:14Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -26,6 +26,7 @@\n import java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d970378893628cee00521c9149f275d497fe254"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "355ac34138db36b9b61b1958e02903eaf023161e", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/355ac34138db36b9b61b1958e02903eaf023161e", "committedDate": "2020-09-23T01:38:14Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into apache_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5bb3b129f03154724c0298f9a6b858e8db128d4", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/e5bb3b129f03154724c0298f9a6b858e8db128d4", "committedDate": "2020-09-24T01:29:49Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into apache_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b54c38be3b408877170cec629c44932a49876ee", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/1b54c38be3b408877170cec629c44932a49876ee", "committedDate": "2020-09-24T01:54:40Z", "message": "initial code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bb5b8e2d0af1608742fbc4a99c6426ab72583f0", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/2bb5b8e2d0af1608742fbc4a99c6426ab72583f0", "committedDate": "2020-09-24T01:54:45Z", "message": "edit name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230db07b90663c3277e4fd23019f92a1f4db7709", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/230db07b90663c3277e4fd23019f92a1f4db7709", "committedDate": "2020-09-24T01:54:46Z", "message": "changed code position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00af34490d988ed93a0b28921e9f34300d1f525b", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/00af34490d988ed93a0b28921e9f34300d1f525b", "committedDate": "2020-09-24T01:55:21Z", "message": "edit test case"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0482febe488486b14743edd956cd127c29995146", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/0482febe488486b14743edd956cd127c29995146", "committedDate": "2020-09-23T06:49:54Z", "message": "Merge branch 'master_enable_discard_outoforder_data' of github.com:kelggu/incubator-iotdb into master_enable_discard_outoforder_data"}, "afterCommit": {"oid": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e", "committedDate": "2020-09-24T01:58:57Z", "message": "add test cases for different time paritition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTY4NTQx", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-496168541", "createdAt": "2020-09-25T07:19:56Z", "commit": {"oid": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxOTo1NlrOHX36YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxOTo1NlrOHX36YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5NTM2MQ==", "bodyText": "Sure, you set the time partition. But your insert time range only from 0 -150 which never cross the partition interval. By the way, you should also enable the partition like this:\nconfig.setEnablePartition(true);\n\nand do not forget:\nconfig.setEnablePartition(false);\n\nThank you very much~", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r494795361", "createdAt": "2020-09-25T07:19:56Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -267,6 +269,279 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet1()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(100);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet2()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(500);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet3()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e"}, "originalPosition": 223}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e", "committedDate": "2020-09-24T01:58:57Z", "message": "add test cases for different time paritition"}, "afterCommit": {"oid": "29e90ee5765b806bc261f822451fb50aabb514d9", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/29e90ee5765b806bc261f822451fb50aabb514d9", "committedDate": "2020-09-27T03:22:11Z", "message": "add test cases for different time paritition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a830239131e84ccd7118e8d091ffe9887063803", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/7a830239131e84ccd7118e8d091ffe9887063803", "committedDate": "2020-09-27T03:43:04Z", "message": "add test cases for different time paritition"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29e90ee5765b806bc261f822451fb50aabb514d9", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/29e90ee5765b806bc261f822451fb50aabb514d9", "committedDate": "2020-09-27T03:22:11Z", "message": "add test cases for different time paritition"}, "afterCommit": {"oid": "7a830239131e84ccd7118e8d091ffe9887063803", "author": {"user": {"login": "haimeiguo", "name": "Haimei Guo"}}, "url": "https://github.com/apache/iotdb/commit/7a830239131e84ccd7118e8d091ffe9887063803", "committedDate": "2020-09-27T03:43:04Z", "message": "add test cases for different time paritition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDc2NzQy", "url": "https://github.com/apache/iotdb/pull/1693#pullrequestreview-497076742", "createdAt": "2020-09-27T12:06:40Z", "commit": {"oid": "7a830239131e84ccd7118e8d091ffe9887063803"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3459, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}