{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NzcyNzUw", "number": 2350, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoxNDoxNVrOFJqwwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyNzozMVrOFJq27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjgyMTEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoxNDoxNVrOIMGCnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoxNDoxNVrOIMGCnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1Mjc5OQ==", "bodyText": "We shouldn't use wait without notify. We should notifyAll at \"decreaseMemtableNumber\"", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549552799", "createdAt": "2020-12-29T03:14:15Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjgyNTMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoxNzoyMFrOIMGEwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNjowNjoyN1rOIMHsDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1MzM0Ng==", "bodyText": "After interrupt. We should also throw the exception. Or this will loop forever without wait. (When enter wait with interrupt, wait will just return without wait.)", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549553346", "createdAt": "2020-12-29T03:17:20Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3OTc5MQ==", "bodyText": "Make sense~", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549579791", "createdAt": "2020-12-29T06:06:27Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1MzM0Ng=="}, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjgzNjQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyNzowN1rOIMGKZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyNzowN1rOIMGKZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDc5MQ==", "bodyText": "Also notifyAll at here", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549554791", "createdAt": "2020-12-29T03:27:07Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();\n+        }\n+        if (waitCount++ % 10 == 0) {\n+          logger.info(\"{} has waited for a memtable for {}ms\", storageGroup, waitCount * WAIT_TIME);\n+        }\n+      }\n+    }\n+  }\n+\n+  public synchronized int getCurrentMemtableNumber() {\n+    return currentMemtableNumber;\n+  }\n+\n+  public synchronized void addMemtableNumber() {\n+    currentMemtableNumber++;\n+  }\n+\n+  public synchronized void decreaseMemtableNumber() {\n+    currentMemtableNumber--;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  private boolean reachMaxMemtableNumber() {\n+    return currentMemtableNumber >= CONFIG.getMaxMemtableNumber();\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized void addOrDeleteStorageGroup(int diff) {\n+    int maxMemTableNum = CONFIG.getMaxMemtableNumber();\n+    maxMemTableNum += MEMTABLE_NUM_FOR_EACH_PARTITION \n+        * CONFIG.getConcurrentWritingTimePartition() * diff;\n+    CONFIG.setMaxMemtableNumber(maxMemTableNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjgzNjkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyNzozMVrOIMGKnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyNzozMVrOIMGKnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDg0Nw==", "bodyText": "NotifyAll at here", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549554847", "createdAt": "2020-12-29T03:27:31Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();\n+        }\n+        if (waitCount++ % 10 == 0) {\n+          logger.info(\"{} has waited for a memtable for {}ms\", storageGroup, waitCount * WAIT_TIME);\n+        }\n+      }\n+    }\n+  }\n+\n+  public synchronized int getCurrentMemtableNumber() {\n+    return currentMemtableNumber;\n+  }\n+\n+  public synchronized void addMemtableNumber() {\n+    currentMemtableNumber++;\n+  }\n+\n+  public synchronized void decreaseMemtableNumber() {\n+    currentMemtableNumber--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 477, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}