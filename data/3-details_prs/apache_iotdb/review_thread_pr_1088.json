{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjA4OTE4", "number": 1088, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMjo1OTo0MFrOD2BzYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMjowMVrOD2B02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTc5MjMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMjo1OTo0MFrOGLvO6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMjo1OTo0MFrOGLvO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTM4Ng==", "bodyText": "Move this readLock to the PlanExecutor, put it to readUnlock together.", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961386", "createdAt": "2020-04-25T02:59:40Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -857,40 +863,54 @@ public StorageGroupMNode getStorageGroupNode(String path) throws MetadataExcepti\n   /**\n    * get device node, if the storage group is not set, create it when autoCreateSchema is true\n    *\n+   * !!!!!!Attention!!!!!\n+   * must call the return node's readUnlock() if you call this method.\n    * @param path path\n    */\n   public MNode getDeviceNodeWithAutoCreateStorageGroup(String path, boolean autoCreateSchema,\n       int sgLevel) throws MetadataException {\n     lock.readLock().lock();\n     MNode node = null;\n-    boolean shouldSetStorageGroup = false;\n+    boolean shouldSetStorageGroup;\n     try {\n       node = mNodeCache.get(path);\n+      return node;\n     } catch (CacheException e) {\n       if (!autoCreateSchema) {\n         throw new PathNotExistException(path);\n-      } else {\n-        shouldSetStorageGroup = e.getCause() instanceof StorageGroupNotSetException;\n       }\n     } finally {\n+      if (node != null) {\n+        node.readLock();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTc5Mjg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMDowNVrOGLvPJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMDowNVrOGLvPJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTQ0Nw==", "bodyText": "move the readlock to caller, then remove this", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961447", "createdAt": "2020-04-25T03:00:05Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -857,40 +863,54 @@ public StorageGroupMNode getStorageGroupNode(String path) throws MetadataExcepti\n   /**\n    * get device node, if the storage group is not set, create it when autoCreateSchema is true\n    *\n+   * !!!!!!Attention!!!!!\n+   * must call the return node's readUnlock() if you call this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTc5Mzk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMDo1NlrOGLvPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMDo1NlrOGLvPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTU3NA==", "bodyText": "add java doc.\nIf delete a leafNode, lock its parent, if delete an InternalNode, lock this node", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961574", "createdAt": "2020-04-25T03:00:56Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java", "diffHunk": "@@ -46,13 +51,34 @@ public void addChild(String name, MNode child) {\n \n \n   @Override\n-  public void deleteChild(String name) {\n-    children.remove(name);\n-  }\n+  public void deleteChild(String name) throws DeleteFailedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTc5NTI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMToyNlrOGLvQMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMToyNlrOGLvQMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTcxNQ==", "bodyText": "move this to InternalMNode", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961715", "createdAt": "2020-04-25T03:01:26Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -43,6 +46,8 @@\n    */\n   protected String fullPath;\n \n+  protected ReadWriteLock lock = new ReentrantReadWriteLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTc5NTQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMTozOFrOGLvQSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMTozOFrOGLvQSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTczNg==", "bodyText": "move to InternalMNode", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961736", "createdAt": "2020-04-25T03:01:38Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -121,4 +126,20 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void readLock() {\n+    MNode node = this;\n+    while (node != null) {\n+      node.lock.readLock().lock();\n+      node = node.parent;\n+    }\n+  }\n+\n+  public void readUnlock() {\n+    MNode node = this;\n+    while (node != null) {\n+      node.lock.readLock().unlock();\n+      node = node.parent;\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTc5NTk5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMTo1NVrOGLvQgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMTo1NVrOGLvQgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTc5Mg==", "bodyText": "lock node here", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961792", "createdAt": "2020-04-25T03:01:55Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -619,24 +622,31 @@ private void createSchemaAutomatically(\n     Set<Path> registeredSeries = new HashSet<>();\n     for (ChunkGroupMetadata chunkGroupMetadata : chunkGroupMetadataList) {\n       String device = chunkGroupMetadata.getDevice();\n-      MNode node = mManager.getDeviceNodeWithAutoCreateStorageGroup(device, true, sgLevel);\n-      for (ChunkMetadata chunkMetadata : chunkGroupMetadata.getChunkMetadataList()) {\n-        Path series = new Path(chunkGroupMetadata.getDevice(), chunkMetadata.getMeasurementUid());\n-        if (!registeredSeries.contains(series)) {\n-          registeredSeries.add(series);\n-          MeasurementSchema schema = knownSchemas.get(series);\n-          if (schema == null) {\n-            throw new MetadataException(String.format(\"Can not get the schema of measurement [%s]\",\n-                    chunkMetadata.getMeasurementUid()));\n-          }\n-          if (!node.hasChild(chunkMetadata.getMeasurementUid())) {\n-            mManager.createTimeseries(series.getFullPath(), schema.getType(),\n-                schema.getEncodingType(), schema.getCompressor(), Collections.emptyMap());\n-          } else if (node.getChild(chunkMetadata.getMeasurementUid()) instanceof InternalMNode) {\n-            throw new QueryProcessException(\n-                String.format(\"Current Path is not leaf node. %s\", series));\n+      MNode node = null;\n+      try {\n+        node = mManager.getDeviceNodeWithAutoCreateStorageGroup(device, true, sgLevel);\n+        for (ChunkMetadata chunkMetadata : chunkGroupMetadata.getChunkMetadataList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTc5NjExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMjowMVrOGLvQjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMzowMjowMVrOGLvQjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTgwNA==", "bodyText": "lock here", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961804", "createdAt": "2020-04-25T03:02:01Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -705,10 +715,11 @@ public void delete(Path path, long timestamp) throws QueryProcessException {\n \n   @Override\n   public void insert(InsertPlan insertPlan) throws QueryProcessException {\n+    MNode node = null;\n     try {\n       String[] measurementList = insertPlan.getMeasurements();\n       String deviceId = insertPlan.getDeviceId();\n-      MNode node = mManager.getDeviceNodeWithAutoCreateStorageGroup(deviceId);\n+      node = mManager.getDeviceNodeWithAutoCreateStorageGroup(deviceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 83, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}