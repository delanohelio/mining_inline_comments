{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1OTg2Njg1", "number": 818, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNzo1OTo1NFrODgS6TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzo1NTo1MFrODgjdZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTkwODYwOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeSeries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNzo1OTo1NFrOFqbGSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNzo1OTo1NFrOFqbGSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyODQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TimeSeries {\n          \n          \n            \n            public class TimeColumn {\n          \n      \n    \n    \n  \n\nWe usually use TimeSeries to represent  time-value, time-value, time-value...", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380028491", "createdAt": "2020-02-17T07:59:54Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeSeries.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.apache.iotdb.tsfile.read.common;\n+\n+\n+public class TimeSeries {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "053f5e09153593ea11a4f35456c1a2608e034197"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTkxMjk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODowMTo1OFrOFqbI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODowMTo1OFrOFqbI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTE2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public boolean hasNext() throws IOException {\n          \n          \n            \n              public boolean hasNextTimeColumn() throws IOException {", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380029162", "createdAt": "2020-02-17T08:01:58Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java", "diffHunk": "@@ -20,26 +20,27 @@\n package org.apache.iotdb.db.query.timegenerator;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.reader.IPointReader;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.NodeType;\n \n public class EngineLeafNode implements Node {\n \n-  private IPointReader reader;\n+  private IBatchReader reader;\n \n-  public EngineLeafNode(IPointReader reader) {\n+  public EngineLeafNode(IBatchReader reader) {\n     this.reader = reader;\n   }\n \n   @Override\n   public boolean hasNext() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTkxMzYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODowMjoxNlrOFqbJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODowMjoxNlrOFqbJSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTI1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TimeSeries next() throws IOException {\n          \n          \n            \n              public TimeSeries nextTimeColumn() throws IOException {", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380029256", "createdAt": "2020-02-17T08:02:16Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java", "diffHunk": "@@ -20,26 +20,27 @@\n package org.apache.iotdb.db.query.timegenerator;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.reader.IPointReader;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.NodeType;\n \n public class EngineLeafNode implements Node {\n \n-  private IPointReader reader;\n+  private IBatchReader reader;\n \n-  public EngineLeafNode(IPointReader reader) {\n+  public EngineLeafNode(IBatchReader reader) {\n     this.reader = reader;\n   }\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return reader.hasNextTimeValuePair();\n+    return reader.hasNextBatch();\n   }\n \n   @Override\n-  public long next() throws IOException {\n-    return reader.nextTimeValuePair().getTimestamp();\n+  public TimeSeries next() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTkzMjU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxMTowMFrOFqbUyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxMTowMFrOFqbUyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjIwMQ==", "bodyText": "I prefer to fill the cacheTimes in hasNext.", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380032201", "createdAt": "2020-02-17T08:11:00Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTkzNjIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxMjoyMVrOFqbWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoyNzozMVrOFqfbrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjcwOA==", "bodyText": "I prefer to implement next() like this:\npublic BatchData nextBatch() throws IOException {\nif (hasCachedBatchData || hasNextBatch()) {\nhasCachedBatchData = false;\nreturn batchData;\n}\nthrow new IOException(\"no next batch\");\n}", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380032708", "createdAt": "2020-02-17T08:12:21Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (cacheTimes == null || !cacheTimes.hasMoreData()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5OTUwMw==", "bodyText": "this return value was long not batch, but  i'm impl with your suggestion", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380099503", "createdAt": "2020-02-17T10:27:31Z", "author": {"login": "liutaohua"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (cacheTimes == null || !cacheTimes.hasMoreData()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjcwOA=="}, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk0MDc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxNDoxOFrOFqbZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxNDoxOFrOFqbZfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMzQwNA==", "bodyText": "could you ensure hasMoreData() ?", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380033404", "createdAt": "2020-02-17T08:14:18Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (cacheTimes == null || !cacheTimes.hasMoreData()) {\n+      cacheTimes = operatorNode.next();\n+    }\n+    long currentTime = cacheTimes.currentTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk0NDAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxNTozMFrOFqbbWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo1NTo1M1rOFqgTeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMzg4MA==", "bodyText": "how about support a nextTimes method?", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380033880", "createdAt": "2020-02-17T08:15:30Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMzc4NA==", "bodyText": "no, that would make AndNode and OrNode hard to write", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380113784", "createdAt": "2020-02-17T10:55:53Z", "author": {"login": "liutaohua"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMzg4MA=="}, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk0OTU4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBEngineTimeGeneratorIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxNzozNFrOFqbebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxNzozNFrOFqbebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNDY3MA==", "bodyText": "remove this line", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380034670", "createdAt": "2020-02-17T08:17:34Z", "author": {"login": "qiaojialin"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBEngineTimeGeneratorIT.java", "diffHunk": "@@ -249,7 +249,7 @@ public void testMultiSeriesWithValueFilterAndTimeFilter()\n       long time = timeGenerator.next();\n       assertTrue(satisfyTimeFilter2(time));\n       cnt++;\n-      // System.out.println(\"cnt =\" + cnt + \"; time = \" + time);\n+//       System.out.println(\"cnt =\" + cnt + \"; time = \" + time);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk1MzMxOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/TimeGeneratorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxOTowN1rOFqbgtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxOTowN1rOFqbgtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNTI1Mw==", "bodyText": "the same as TimestampGenerator", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380035253", "createdAt": "2020-02-17T08:19:07Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/TimeGeneratorImpl.java", "diffHunk": "@@ -65,12 +68,17 @@ public TimeGeneratorImpl(IExpression iexpression, IChunkLoader chunkLoader,\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (cacheTimes == null || !cacheTimes.hasMoreData()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk3NTA5OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyNjo1OVrOFqbtHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo1Njo1N1rOFqgVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODQzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TimeSeries next() throws IOException {\n          \n          \n            \n              public TimeSeries nextTimes() throws IOException {", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380038431", "createdAt": "2020-02-17T08:26:59Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java", "diffHunk": "@@ -20,44 +20,28 @@\n \n import java.io.IOException;\n import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n import org.apache.iotdb.tsfile.read.reader.series.AbstractFileSeriesReader;\n \n public class LeafNode implements Node {\n \n   private AbstractFileSeriesReader reader;\n \n-  private BatchData data = null;\n-\n-  private boolean gotData = false;\n+  private BatchData cacheData;\n \n   public LeafNode(AbstractFileSeriesReader reader) {\n     this.reader = reader;\n   }\n \n   @Override\n   public boolean hasNext() throws IOException {\n-\n-    if (gotData) {\n-      data.next();\n-      gotData = false;\n-    }\n-\n-    if (data == null || !data.hasCurrent()) {\n-      if (reader.hasNextBatch()) {\n-        data = reader.nextBatch();\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return data.hasCurrent();\n+    return reader.hasNextBatch();\n   }\n \n   @Override\n-  public long next() {\n-    long time = data.currentTime();\n-    gotData = true;\n-    return time;\n+  public TimeSeries next() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExNDMwOQ==", "bodyText": "that Node Interface was rename to nextTimeColumn", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380114309", "createdAt": "2020-02-17T10:56:57Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java", "diffHunk": "@@ -20,44 +20,28 @@\n \n import java.io.IOException;\n import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n import org.apache.iotdb.tsfile.read.reader.series.AbstractFileSeriesReader;\n \n public class LeafNode implements Node {\n \n   private AbstractFileSeriesReader reader;\n \n-  private BatchData data = null;\n-\n-  private boolean gotData = false;\n+  private BatchData cacheData;\n \n   public LeafNode(AbstractFileSeriesReader reader) {\n     this.reader = reader;\n   }\n \n   @Override\n   public boolean hasNext() throws IOException {\n-\n-    if (gotData) {\n-      data.next();\n-      gotData = false;\n-    }\n-\n-    if (data == null || !data.hasCurrent()) {\n-      if (reader.hasNextBatch()) {\n-        data = reader.nextBatch();\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return data.hasCurrent();\n+    return reader.hasNextBatch();\n   }\n \n   @Override\n-  public long next() {\n-    long time = data.currentTime();\n-    gotData = true;\n-    return time;\n+  public TimeSeries next() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODQzMQ=="}, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk3NjUyOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyNzozMVrOFqbuCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyNzozMVrOFqbuCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODY2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              TimeSeries next() throws IOException;\n          \n          \n            \n              TimeSeries nextTimeColumn() throws IOException;", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380038665", "createdAt": "2020-02-17T08:27:31Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java", "diffHunk": "@@ -19,12 +19,13 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public interface Node {\n \n   boolean hasNext() throws IOException;\n \n-  long next() throws IOException;\n+  TimeSeries next() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk3NjkwOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyNzo0MVrOFqbuSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyNzo0MVrOFqbuSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODczMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              boolean hasNext() throws IOException;\n          \n          \n            \n              boolean hasNextTimeColumn() throws IOException;", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380038731", "createdAt": "2020-02-17T08:27:41Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java", "diffHunk": "@@ -19,12 +19,13 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public interface Node {\n \n   boolean hasNext() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk4MDIzOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyODo1M1rOFqbwQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyODo1M1rOFqbwQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzOTIzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private TimeSeries cachedValue;\n          \n          \n            \n              private TimeSeries cachedTimeColumn;", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380039233", "createdAt": "2020-02-17T08:28:53Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -19,19 +19,24 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private long cachedValue;\n+  private TimeSeries cachedValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk4MTAzOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyOToxMVrOFqbwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyOToxMVrOFqbwug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzOTM1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private TimeSeries leftPageData;\n          \n          \n            \n              private TimeSeries leftTimeColumn;", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380039354", "createdAt": "2020-02-17T08:29:11Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -19,19 +19,24 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private long cachedValue;\n+  private TimeSeries cachedValue;\n   private boolean hasCachedValue;\n \n+\n+  private TimeSeries leftPageData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk4MTU0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyOToyNFrOFqbxCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoyOToyNFrOFqbxCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzOTQzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private TimeSeries rightPageData;\n          \n          \n            \n              private TimeSeries rightTimeColumn;", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380039434", "createdAt": "2020-02-17T08:29:24Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -19,19 +19,24 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private long cachedValue;\n+  private TimeSeries cachedValue;\n   private boolean hasCachedValue;\n \n+\n+  private TimeSeries leftPageData;\n+  private TimeSeries rightPageData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk4ODMxOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODozMTo0NlrOFqb1AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODozMTo0NlrOFqb1AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0MDQ0OQ==", "bodyText": "add javadoc: no more data in cache and has more data in child", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380040449", "createdAt": "2020-02-17T08:31:46Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();\n     }\n-    return false;\n+    return hasCachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = leftPageData.getLastTime();\n+    long lMax = rightPageData.getLastTime();\n+    return rMax > lMax ? lMax : rMax;\n+  }\n+\n+  private void fillRightData() throws IOException {\n+    if (hasMoreData(rightPageData, rightChild)) {\n+      rightPageData = rightChild.next();\n+    }\n+  }\n+\n+  private void fillLeftData() throws IOException {\n+    if (hasMoreData(leftPageData, leftChild)) {\n+      leftPageData = leftChild.next();\n+    }\n+  }\n+\n+  private boolean hasMoreData(TimeSeries timeSeries, Node child) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjAyNTgwOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo0NDo1M1rOFqcK9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0NTowOVrOFqm3_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjA2OQ==", "bodyText": "this seems to be update again and again, consider the following case:\nleft child:  [1,2,3]  [4,5,6] [7,8,9]...\nright child: [1,2,3,4]  [5,6,7,8] [9,10,11]...\nI suggest to stop at 4 in this next(), only call one getStopBatchTime at the beginning.", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380046069", "createdAt": "2020-02-17T08:44:53Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyODIxMQ==", "bodyText": "left child:[1,2,3] [4,5,6] [7,8,9]\nright child:[1,10]\nthat will load many page into memory", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380128211", "createdAt": "2020-02-17T11:27:44Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjA2OQ=="}, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTQzNw==", "bodyText": "what about 1000 for each time ?", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380221437", "createdAt": "2020-02-17T14:45:09Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjA2OQ=="}, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjAyNzMyOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo0NToyM1rOFqcL5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTozNTo0M1rOFqhY2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjMwOA==", "bodyText": "if stop time is 4, the time 5 seems could be cached at this round", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380046308", "createdAt": "2020-02-17T08:45:23Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMTU0Ng==", "bodyText": "yes , it's bug ,i will fix", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380131546", "createdAt": "2020-02-17T11:35:43Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjMwOA=="}, "originalCommit": {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjU3MDg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTozNDowMFrOFqhWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo1NDoyNlrOFqh3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMDg1Nw==", "bodyText": "This unused import could be removed", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380130857", "createdAt": "2020-02-17T11:34:00Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -25,6 +25,7 @@\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61ba9dfeafb51c8425d5636331c3de7ff719224f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzOTMyNA==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380139324", "createdAt": "2020-02-17T11:54:26Z", "author": {"login": "liutaohua"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -25,6 +25,7 @@\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMDg1Nw=="}, "originalCommit": {"oid": "61ba9dfeafb51c8425d5636331c3de7ff719224f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjU3NDg0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTozNTozM1rOFqhYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo1NDozM1rOFqh3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMTQ4MA==", "bodyText": "How about changing to getTimeColumn, as all the naming in this method", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380131480", "createdAt": "2020-02-17T11:35:33Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "diffHunk": "@@ -515,6 +515,14 @@ public long getMaxTimestamp() {\n     return getTimeByIndex(length() - 1);\n   }\n \n+  public TimeColumn getTimeSeries() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61ba9dfeafb51c8425d5636331c3de7ff719224f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzOTM4Mw==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380139383", "createdAt": "2020-02-17T11:54:33Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "diffHunk": "@@ -515,6 +515,14 @@ public long getMaxTimestamp() {\n     return getTimeByIndex(length() - 1);\n   }\n \n+  public TimeColumn getTimeSeries() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMTQ4MA=="}, "originalCommit": {"oid": "61ba9dfeafb51c8425d5636331c3de7ff719224f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjU3ODk0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTozNjo1MVrOFqha-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo1MjowN1rOFqhzPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMjA4OQ==", "bodyText": "This constructor is not used?", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380132089", "createdAt": "2020-02-17T11:36:51Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.tsfile.read.common;\n+\n+\n+public class TimeColumn {\n+\n+  private long[] times;\n+\n+  private int size;\n+\n+  private int cur;\n+\n+\n+  public TimeColumn(int initSize) {\n+    times = new long[initSize];\n+  }\n+\n+\n+  public TimeColumn(long[] times) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61ba9dfeafb51c8425d5636331c3de7ff719224f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzODMwMw==", "bodyText": "not used , it can used for 0 copy batchdata's timeRet.", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380138303", "createdAt": "2020-02-17T11:52:07Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.tsfile.read.common;\n+\n+\n+public class TimeColumn {\n+\n+  private long[] times;\n+\n+  private int size;\n+\n+  private int cur;\n+\n+\n+  public TimeColumn(int initSize) {\n+    times = new long[initSize];\n+  }\n+\n+\n+  public TimeColumn(long[] times) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMjA4OQ=="}, "originalCommit": {"oid": "61ba9dfeafb51c8425d5636331c3de7ff719224f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjY4OTUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxNzo0M1rOFqieWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0NToyNFrOFqm4cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw==", "bodyText": "Actually, I can't get the meaning of AbstractNodeConstructor. Why we need constructNotSeriesNode() and construct() these two methods. These two methods call each other iteratively. I think we can combine these two to reduce the meaningless function call costs.", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380149337", "createdAt": "2020-02-17T12:17:43Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -19,22 +19,22 @@\n \n package org.apache.iotdb.db.query.timegenerator;\n \n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n+\n import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.path.PathException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n-import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.expression.IExpression;\n import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n \n-import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n-\n public class EngineNodeConstructor extends AbstractNodeConstructor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4MDYwMQ==", "bodyText": "yes...", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380180601", "createdAt": "2020-02-17T13:27:21Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -19,22 +19,22 @@\n \n package org.apache.iotdb.db.query.timegenerator;\n \n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n+\n import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.path.PathException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n-import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.expression.IExpression;\n import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n \n-import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n-\n public class EngineNodeConstructor extends AbstractNodeConstructor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwOTA1MQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380209051", "createdAt": "2020-02-17T14:22:08Z", "author": {"login": "liutaohua"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -19,22 +19,22 @@\n \n package org.apache.iotdb.db.query.timegenerator;\n \n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n+\n import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.path.PathException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n-import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.expression.IExpression;\n import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n \n-import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n-\n public class EngineNodeConstructor extends AbstractNodeConstructor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTU1NQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380221555", "createdAt": "2020-02-17T14:45:24Z", "author": {"login": "liutaohua"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -19,22 +19,22 @@\n \n package org.apache.iotdb.db.query.timegenerator;\n \n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n+\n import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.path.PathException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n-import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.expression.IExpression;\n import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n \n-import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n-\n public class EngineNodeConstructor extends AbstractNodeConstructor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjcwMTIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoyMTo1MVrOFqilWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0Mzo0NlrOFqm1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MTEyOQ==", "bodyText": "I think the logic here should be same as TimeGeneratorImpl in tsfile, hasCache should not be set to false directly. It may be better to be set to cacheTimes.hasNext();", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380151129", "createdAt": "2020-02-17T12:21:51Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +55,32 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      hasCache = true;\n+      return true;\n+    }\n+    while (operatorNode.hasNextTimeColumn()) {\n+      cacheTimes = operatorNode.nextTimeColumn();\n+      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+        hasCache = true;\n+        break;\n+      }\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (hasCache || hasNext()) {\n+      hasCache = false;\n+      long currentTime = cacheTimes.currentTime();\n+      cacheTimes.next();\n+      return currentTime;\n+    }\n+    throw new IOException(\"no more data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMDcwNQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380220705", "createdAt": "2020-02-17T14:43:46Z", "author": {"login": "liutaohua"}, "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +55,32 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      hasCache = true;\n+      return true;\n+    }\n+    while (operatorNode.hasNextTimeColumn()) {\n+      cacheTimes = operatorNode.nextTimeColumn();\n+      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+        hasCache = true;\n+        break;\n+      }\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (hasCache || hasNext()) {\n+      hasCache = false;\n+      long currentTime = cacheTimes.currentTime();\n+      cacheTimes.next();\n+      return currentTime;\n+    }\n+    throw new IOException(\"no more data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MTEyOQ=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjczMDE4OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjozMjowNFrOFqi2vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoyMDo0MVrOFqkLsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTU4Mg==", "bodyText": "Here can be replaced by Math.min(); It will be more readable", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380155582", "createdAt": "2020-02-17T12:32:04Z", "author": {"login": "JackieTien97"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftTimeColumn.hasMoreData() && rightTimeColumn.hasMoreData()) {\n+      long leftValue = leftTimeColumn.currentTime();\n+      long rightValue = rightTimeColumn.currentTime();\n+\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedTimeColumn.add(leftValue);\n+        leftTimeColumn.next();\n+        rightTimeColumn.next();\n+      } else if (leftValue > rightValue) {\n+        rightTimeColumn.next();\n+      } else { // leftValue < rightValue\n+        leftTimeColumn.next();\n+      }\n+\n+      if (leftValue == stopBatchTime || rightValue == stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();\n+    }\n+    return hasCachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftTimeColumn.hasMoreData()) {\n+      lMax = leftTimeColumn.getLastTime();\n     }\n-    return false;\n+    if (rightTimeColumn.hasMoreData()) {\n+      rMax = rightTimeColumn.getLastTime();\n+    }\n+    return rMax > lMax ? lMax : rMax;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NzMzMA==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380177330", "createdAt": "2020-02-17T13:20:41Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftTimeColumn.hasMoreData() && rightTimeColumn.hasMoreData()) {\n+      long leftValue = leftTimeColumn.currentTime();\n+      long rightValue = rightTimeColumn.currentTime();\n+\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedTimeColumn.add(leftValue);\n+        leftTimeColumn.next();\n+        rightTimeColumn.next();\n+      } else if (leftValue > rightValue) {\n+        rightTimeColumn.next();\n+      } else { // leftValue < rightValue\n+        leftTimeColumn.next();\n+      }\n+\n+      if (leftValue == stopBatchTime || rightValue == stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();\n+    }\n+    return hasCachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftTimeColumn.hasMoreData()) {\n+      lMax = leftTimeColumn.getLastTime();\n     }\n-    return false;\n+    if (rightTimeColumn.hasMoreData()) {\n+      rMax = rightTimeColumn.getLastTime();\n+    }\n+    return rMax > lMax ? lMax : rMax;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTU4Mg=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc0NDI4OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjozNzowNVrOFqi_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0Mzo1M1rOFqm1gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA==", "bodyText": "Why we need this field. Why not set a fixed size for cachedTimeColumn", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380157780", "createdAt": "2020-02-17T12:37:05Z", "author": {"login": "JackieTien97"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4MDkxMg==", "bodyText": "this is similar to SeriesReader.getOverlappedPage..", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380180912", "createdAt": "2020-02-17T13:28:03Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4Mzc2MQ==", "bodyText": "I think @JackieTien97  has a point here. It should be aligned with limit or fetchSize, but TsFile doesn't have that in mind. Maybe we should set a big value", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380183761", "createdAt": "2020-02-17T13:33:44Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMDgwMA==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380220800", "createdAt": "2020-02-17T14:43:53Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjgyMjIyOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzowNDowMlrOFqjt7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoyMDo1MlrOFqkMHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTcxMQ==", "bodyText": "use Math.max()", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380169711", "createdAt": "2020-02-17T13:04:02Z", "author": {"login": "JackieTien97"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,119 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimes;\n+  private TimeColumn rightTimes;\n+\n+  private TimeColumn cachedValue;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimes.hasMoreData() || rightTimes.hasMoreData();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedValue;\n     }\n-    return leftChild.next();\n-  }\n-\n-  private boolean hasRightValue() throws IOException {\n-    return hasCachedRightValue || rightChild.hasNext();\n-  }\n+    hasCachedValue = false;\n+    cachedValue = new TimeColumn(1000);\n \n-  private long getRightValue() throws IOException {\n-    if (hasCachedRightValue) {\n-      hasCachedRightValue = false;\n-      return cachedRightValue;\n+    if (!hasLeftValue() && leftChild.hasNextTimeColumn()) {\n+      leftTimes = leftChild.nextTimeColumn();\n+    }\n+    if (!hasRightValue() && rightChild.hasNextTimeColumn()) {\n+      rightTimes = rightChild.nextTimeColumn();\n     }\n-    return rightChild.next();\n-  }\n \n-  @Override\n-  public long next() throws IOException {\n     if (hasLeftValue() && !hasRightValue()) {\n-      return getLeftValue();\n+      return leftTimes;\n     } else if (!hasLeftValue() && hasRightValue()) {\n-      return getRightValue();\n-    } else if (hasLeftValue() && hasRightValue()) {\n-      long leftValue = getLeftValue();\n-      long rightValue = getRightValue();\n+      return rightTimes;\n+    }\n+\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (hasLeftValue() && hasRightValue()) {\n+      long leftValue = leftTimes.currentTime();\n+      long rightValue = rightTimes.currentTime();\n+\n       if (leftValue < rightValue) {\n-        hasCachedRightValue = true;\n-        cachedRightValue = rightValue;\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedValue.add(leftValue);\n+        leftTimes.next();\n+        if (!leftTimes.hasMoreData() && leftChild.hasNextTimeColumn()) {\n+          leftTimes = leftChild.nextTimeColumn();\n+        }\n       } else if (leftValue > rightValue) {\n-        hasCachedLeftValue = true;\n-        cachedLeftValue = leftValue;\n-        return rightValue;\n+        hasCachedValue = true;\n+        cachedValue.add(rightValue);\n+        rightTimes.next();\n+        if (!rightTimes.hasMoreData() && rightChild.hasNextTimeColumn()) {\n+          rightTimes = rightChild.nextTimeColumn();\n+        }\n       } else {\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedValue.add(leftValue);\n+        leftTimes.next();\n+        rightTimes.next();\n+        if (!leftTimes.hasMoreData() && leftChild.hasNextTimeColumn()) {\n+          leftTimes = leftChild.nextTimeColumn();\n+        }\n+        if (!rightTimes.hasMoreData() && rightChild.hasNextTimeColumn()) {\n+          rightTimes = rightChild.nextTimeColumn();\n+        }\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        break;\n       }\n     }\n-    return -1;\n+    hasCachedValue = false;\n+    return cachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftTimes.hasMoreData()) {\n+      lMax = leftTimes.getLastTime();\n+    }\n+    if (rightTimes.hasMoreData()) {\n+      rMax = rightTimes.getLastTime();\n+    }\n+    return rMax > lMax ? lMax : rMax;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NzQzOQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380177439", "createdAt": "2020-02-17T13:20:52Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,119 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimes;\n+  private TimeColumn rightTimes;\n+\n+  private TimeColumn cachedValue;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimes.hasMoreData() || rightTimes.hasMoreData();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedValue;\n     }\n-    return leftChild.next();\n-  }\n-\n-  private boolean hasRightValue() throws IOException {\n-    return hasCachedRightValue || rightChild.hasNext();\n-  }\n+    hasCachedValue = false;\n+    cachedValue = new TimeColumn(1000);\n \n-  private long getRightValue() throws IOException {\n-    if (hasCachedRightValue) {\n-      hasCachedRightValue = false;\n-      return cachedRightValue;\n+    if (!hasLeftValue() && leftChild.hasNextTimeColumn()) {\n+      leftTimes = leftChild.nextTimeColumn();\n+    }\n+    if (!hasRightValue() && rightChild.hasNextTimeColumn()) {\n+      rightTimes = rightChild.nextTimeColumn();\n     }\n-    return rightChild.next();\n-  }\n \n-  @Override\n-  public long next() throws IOException {\n     if (hasLeftValue() && !hasRightValue()) {\n-      return getLeftValue();\n+      return leftTimes;\n     } else if (!hasLeftValue() && hasRightValue()) {\n-      return getRightValue();\n-    } else if (hasLeftValue() && hasRightValue()) {\n-      long leftValue = getLeftValue();\n-      long rightValue = getRightValue();\n+      return rightTimes;\n+    }\n+\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (hasLeftValue() && hasRightValue()) {\n+      long leftValue = leftTimes.currentTime();\n+      long rightValue = rightTimes.currentTime();\n+\n       if (leftValue < rightValue) {\n-        hasCachedRightValue = true;\n-        cachedRightValue = rightValue;\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedValue.add(leftValue);\n+        leftTimes.next();\n+        if (!leftTimes.hasMoreData() && leftChild.hasNextTimeColumn()) {\n+          leftTimes = leftChild.nextTimeColumn();\n+        }\n       } else if (leftValue > rightValue) {\n-        hasCachedLeftValue = true;\n-        cachedLeftValue = leftValue;\n-        return rightValue;\n+        hasCachedValue = true;\n+        cachedValue.add(rightValue);\n+        rightTimes.next();\n+        if (!rightTimes.hasMoreData() && rightChild.hasNextTimeColumn()) {\n+          rightTimes = rightChild.nextTimeColumn();\n+        }\n       } else {\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedValue.add(leftValue);\n+        leftTimes.next();\n+        rightTimes.next();\n+        if (!leftTimes.hasMoreData() && leftChild.hasNextTimeColumn()) {\n+          leftTimes = leftChild.nextTimeColumn();\n+        }\n+        if (!rightTimes.hasMoreData() && rightChild.hasNextTimeColumn()) {\n+          rightTimes = rightChild.nextTimeColumn();\n+        }\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        break;\n       }\n     }\n-    return -1;\n+    hasCachedValue = false;\n+    return cachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftTimes.hasMoreData()) {\n+      lMax = leftTimes.getLastTime();\n+    }\n+    if (rightTimes.hasMoreData()) {\n+      rMax = rightTimes.getLastTime();\n+    }\n+    return rMax > lMax ? lMax : rMax;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTcxMQ=="}, "originalCommit": {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDM5MTEyOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDo0ODoxNlrOFqyV_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMTo1OTowOVrOFqzHgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTM0MA==", "bodyText": "This magic number can be replaced by a constant.", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380409340", "createdAt": "2020-02-18T00:48:16Z", "author": {"login": "JackieTien97"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +50,68 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "501e4fb9ff17be9bf15a34c925dbe46e530376ff"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMjAxOA==", "bodyText": "yes ,  maybe can use fetchSize", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380422018", "createdAt": "2020-02-18T01:59:09Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +50,68 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTM0MA=="}, "originalCommit": {"oid": "501e4fb9ff17be9bf15a34c925dbe46e530376ff"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDM5MjYwOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDo0OTozNlrOFqyW1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMTo1OToxNVrOFqzHkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTU1Ng==", "bodyText": "The same magic number here. You can use a constant and put it into Node.java", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380409556", "createdAt": "2020-02-18T00:49:36Z", "author": {"login": "JackieTien97"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,109 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n+  private final int fetchSize = TSFileDescriptor.getInstance().getConfig()\n+      .getFetchSizeOfTimeGenerator();\n+\n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n+\n+  private TimeColumn cachedTimeColumn;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimeColumn.hasCurrent() || rightTimeColumn.hasCurrent();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedTimeColumn;\n     }\n-    return leftChild.next();\n-  }\n+    hasCachedValue = false;\n+    cachedTimeColumn = new TimeColumn(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "501e4fb9ff17be9bf15a34c925dbe46e530376ff"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMjAzNA==", "bodyText": "done, replace to fetchSize", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380422034", "createdAt": "2020-02-18T01:59:15Z", "author": {"login": "liutaohua"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,109 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n+  private final int fetchSize = TSFileDescriptor.getInstance().getConfig()\n+      .getFetchSizeOfTimeGenerator();\n+\n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n+\n+  private TimeColumn cachedTimeColumn;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimeColumn.hasCurrent() || rightTimeColumn.hasCurrent();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedTimeColumn;\n     }\n-    return leftChild.next();\n-  }\n+    hasCachedValue = false;\n+    cachedTimeColumn = new TimeColumn(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTU1Ng=="}, "originalCommit": {"oid": "501e4fb9ff17be9bf15a34c925dbe46e530376ff"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDQ4Mjc0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/common/conf/TSFileDescriptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjowNDo1M1rOFqzLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjowNDo1M1rOFqzLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMzA0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      properties.getProperty(\"fetch_size_time_generator\",\n          \n          \n            \n                      properties.getProperty(\"batch_size\",", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380423040", "createdAt": "2020-02-18T02:04:53Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/common/conf/TSFileDescriptor.java", "diffHunk": "@@ -128,6 +130,9 @@ private void loadProps() {\n       conf.setTimeEncoder(properties.getProperty(\"time_encoder\", conf.getTimeEncoder()));\r\n       conf.setValueEncoder(properties.getProperty(\"value_encoder\", conf.getValueEncoder()));\r\n       conf.setCompressor(properties.getProperty(\"compressor\", conf.getCompressor()));\r\n+      conf.setFetchSizeOfTimeGenerator(Integer.parseInt(\r\n+          properties.getProperty(\"fetch_size_time_generator\",\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aeb7698db38f407e891d9b17740f01d7b305057"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDYxOTkxOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzo1NTo1MFrOFq0dww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzo1NTo1MFrOFq0dww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ0NDA5OQ==", "bodyText": "this field is unsless now", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380444099", "createdAt": "2020-02-18T03:55:50Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,109 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n+  private final int fetchSize = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+\n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n+\n+  private TimeColumn cachedTimeColumn;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimeColumn.hasCurrent() || rightTimeColumn.hasCurrent();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedTimeColumn;\n     }\n-    return leftChild.next();\n-  }\n+    hasCachedValue = false;\n+    cachedTimeColumn = new TimeColumn(fetchSize);\n \n-  private boolean hasRightValue() throws IOException {\n-    return hasCachedRightValue || rightChild.hasNext();\n-  }\n-\n-  private long getRightValue() throws IOException {\n-    if (hasCachedRightValue) {\n-      hasCachedRightValue = false;\n-      return cachedRightValue;\n+    if (!hasLeftValue() && leftChild.hasNextTimeColumn()) {\n+      leftTimeColumn = leftChild.nextTimeColumn();\n+    }\n+    if (!hasRightValue() && rightChild.hasNextTimeColumn()) {\n+      rightTimeColumn = rightChild.nextTimeColumn();\n     }\n-    return rightChild.next();\n-  }\n \n-  @Override\n-  public long next() throws IOException {\n     if (hasLeftValue() && !hasRightValue()) {\n-      return getLeftValue();\n+      return leftTimeColumn;\n     } else if (!hasLeftValue() && hasRightValue()) {\n-      return getRightValue();\n-    } else if (hasLeftValue() && hasRightValue()) {\n-      long leftValue = getLeftValue();\n-      long rightValue = getRightValue();\n+      return rightTimeColumn;\n+    }\n+\n+    while (hasLeftValue() && hasRightValue()) {\n+      long leftValue = leftTimeColumn.currentTime();\n+      long rightValue = rightTimeColumn.currentTime();\n+\n       if (leftValue < rightValue) {\n-        hasCachedRightValue = true;\n-        cachedRightValue = rightValue;\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedTimeColumn.add(leftValue);\n+        leftTimeColumn.next();\n+        if (!leftTimeColumn.hasCurrent() && leftChild.hasNextTimeColumn()) {\n+          leftTimeColumn = leftChild.nextTimeColumn();\n+        }\n       } else if (leftValue > rightValue) {\n-        hasCachedLeftValue = true;\n-        cachedLeftValue = leftValue;\n-        return rightValue;\n+        hasCachedValue = true;\n+        cachedTimeColumn.add(rightValue);\n+        rightTimeColumn.next();\n+        if (!rightTimeColumn.hasCurrent() && rightChild.hasNextTimeColumn()) {\n+          rightTimeColumn = rightChild.nextTimeColumn();\n+        }\n       } else {\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedTimeColumn.add(leftValue);\n+        leftTimeColumn.next();\n+        rightTimeColumn.next();\n+        if (!leftTimeColumn.hasCurrent() && leftChild.hasNextTimeColumn()) {\n+          leftTimeColumn = leftChild.nextTimeColumn();\n+        }\n+        if (!rightTimeColumn.hasCurrent() && rightChild.hasNextTimeColumn()) {\n+          rightTimeColumn = rightChild.nextTimeColumn();\n+        }\n+      }\n+\n+      if (cachedTimeColumn.size() >= fetchSize) {\n+        break;\n       }\n     }\n-    return -1;\n+    hasCachedValue = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e7f605fb4ecc1d051a095198ced621d59162123"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 212, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}