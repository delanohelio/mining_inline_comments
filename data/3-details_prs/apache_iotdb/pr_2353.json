{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1ODkxOTA2", "number": 2353, "title": "[IOTDB-1083] There is no need to get write lock each time when we try\u2026", "bodyText": "\u2026 to get or create time series file processor\n\n\nDescription\n\n\n\nContent1 ...\nContent2 ...\nContent3 ...\n\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n\n concurrent read\n concurrent write\n concurrent read and write\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods.\n added or updated version, license, or notice information\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious\nfor an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold\nfor code coverage.\n added integration tests.\n been tested in a test IoTDB cluster.\n\n\n\nKey changed/added classes (or packages if there are too many classes) in this PR", "createdAt": "2020-12-28T02:20:58Z", "url": "https://github.com/apache/iotdb/pull/2353", "merged": true, "mergeCommit": {"oid": "ad993b8d6ddb5aa375385a0e278ce9701c1c2ae5"}, "closed": true, "closedAt": "2021-01-29T07:06:44Z", "author": {"login": "yuqi1129"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqckfLgH2gAyNTQ1ODkxOTA2OjQ5NWNiMzYyNWNlYzFmNGYwNzIyZjI1MTcxYjc2MWIzODNlNjY0Y2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0z1oTAFqTU3ODk4NzA1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "495cb3625cec1f4f0722f25171b761b383e664cb", "author": {"user": {"login": "yuqi1129", "name": "Qi Yu"}}, "url": "https://github.com/apache/iotdb/commit/495cb3625cec1f4f0722f25171b761b383e664cb", "committedDate": "2020-12-28T02:19:15Z", "message": "[IOTDB-1083] There is no need to get write lock each time when we try to get or create time series file processor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5OTI5ODMx", "url": "https://github.com/apache/iotdb/pull/2353#pullrequestreview-559929831", "createdAt": "2020-12-30T07:00:43Z", "commit": {"oid": "495cb3625cec1f4f0722f25171b761b383e664cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNzowMDo0NFrOIMfNCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNzowMDo0NFrOIMfNCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk2NTA2NA==", "bodyText": "Should consider carefully whether workSequenceTsFileProcessors (The tsFileProcessorTreeMap in this method) is thread safety.", "url": "https://github.com/apache/iotdb/pull/2353#discussion_r549965064", "createdAt": "2020-12-30T07:00:44Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -969,35 +969,35 @@ private TsFileProcessor getOrCreateTsFileProcessorIntern(long timeRangeId,\n       boolean sequence)\n       throws IOException, DiskSpaceInsufficientException {\n \n-    TsFileProcessor res;\n-    // we have to ensure only one thread can change workSequenceTsFileProcessors\n-    writeLock();\n-    try {\n-      res = tsFileProcessorTreeMap.get(timeRangeId);\n-      if (res == null) {\n-        // we have to remove oldest processor to control the num of the memtables\n-        // TODO: use a method to control the number of memtables\n-        if (tsFileProcessorTreeMap.size()\n-            >= IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition()) {\n-          Map.Entry<Long, TsFileProcessor> processorEntry = tsFileProcessorTreeMap.firstEntry();\n-          logger.info(\n-              \"will close a {} TsFile because too many active partitions ({} > {}) in the storage group {},\",\n-              sequence, tsFileProcessorTreeMap.size(),\n-              IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition(),\n-              storageGroupName);\n-          asyncCloseOneTsFileProcessor(sequence, processorEntry.getValue());\n-        }\n+    TsFileProcessor res = tsFileProcessorTreeMap.get(timeRangeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "495cb3625cec1f4f0722f25171b761b383e664cb"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5OTM0MDQ1", "url": "https://github.com/apache/iotdb/pull/2353#pullrequestreview-559934045", "createdAt": "2020-12-30T07:19:32Z", "commit": {"oid": "495cb3625cec1f4f0722f25171b761b383e664cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNzoxOTozM1rOIMgBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNzoxOTozM1rOIMgBUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk3ODQ0OA==", "bodyText": "newTsFileProcess() is better.\nAnd,  I think the following should also be in the method.\n    tsFileProcessor.addCloseFileListeners(customCloseFileListeners);\n    tsFileProcessor.addFlushListeners(customFlushListeners);\n\n    tsFileProcessor.setTimeRangeId(timePartitionId);", "url": "https://github.com/apache/iotdb/pull/2353#discussion_r549978448", "createdAt": "2020-12-30T07:19:33Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1006,50 +1006,49 @@ private TsFileProcessor getOrCreateTsFileProcessorIntern(long timeRangeId,\n \n   private TsFileProcessor createTsFileProcessor(boolean sequence, long timePartitionId)\n       throws IOException, DiskSpaceInsufficientException {\n-    String baseDir;\n-    if (sequence) {\n-      baseDir = DirectoryManager.getInstance().getNextFolderForSequenceFile();\n-    } else {\n-      baseDir = DirectoryManager.getInstance().getNextFolderForUnSequenceFile();\n-    }\n+    DirectoryManager directoryManager = DirectoryManager.getInstance();\n+    String baseDir = sequence ? directoryManager.getNextFolderForSequenceFile()\n+        : directoryManager.getNextFolderForUnSequenceFile();\n+\n     fsFactory.getFile(baseDir, storageGroupName).mkdirs();\n \n     String filePath =\n         baseDir + File.separator + storageGroupName + File.separator + timePartitionId\n             + File.separator\n             + getNewTsFileName(timePartitionId);\n \n-    TsFileProcessor tsFileProcessor;\n     VersionController versionController = getVersionControllerByTimePartitionId(timePartitionId);\n+    TsFileProcessor tsFileProcessor = getTsFileProcessor(sequence, filePath, versionController);\n+    tsFileProcessor.addCloseFileListeners(customCloseFileListeners);\n+    tsFileProcessor.addFlushListeners(customFlushListeners);\n+\n+    tsFileProcessor.setTimeRangeId(timePartitionId);\n+    return tsFileProcessor;\n+  }\n+\n+  private TsFileProcessor getTsFileProcessor(boolean sequence, String filePath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "495cb3625cec1f4f0722f25171b761b383e664cb"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb1fc66fe4c23ddcf916bdec9decfb1df5cc959", "author": {"user": {"login": "yuqi1129", "name": "Qi Yu"}}, "url": "https://github.com/apache/iotdb/commit/9eb1fc66fe4c23ddcf916bdec9decfb1df5cc959", "committedDate": "2020-12-30T09:08:33Z", "message": "[IOTDB-1083] There is no need to get write lock each time when we try to get or create time series file processor, fix discussion 1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczODY3MDkx", "url": "https://github.com/apache/iotdb/pull/2353#pullrequestreview-573867091", "createdAt": "2021-01-22T01:21:36Z", "commit": {"oid": "9eb1fc66fe4c23ddcf916bdec9decfb1df5cc959"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwMToyMTozN1rOIYQhoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwMToyMTozN1rOIYQhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMwNzQ4OQ==", "bodyText": "As you say, outer code has lock this write lock. How come you lock it twice?  May be this lock op can also be removed.", "url": "https://github.com/apache/iotdb/pull/2353#discussion_r562307489", "createdAt": "2021-01-22T01:21:37Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -969,87 +969,86 @@ private TsFileProcessor getOrCreateTsFileProcessorIntern(long timeRangeId,\n       boolean sequence)\n       throws IOException, DiskSpaceInsufficientException {\n \n-    TsFileProcessor res;\n-    // we have to ensure only one thread can change workSequenceTsFileProcessors\n-    writeLock();\n-    try {\n-      res = tsFileProcessorTreeMap.get(timeRangeId);\n-      if (res == null) {\n-        // we have to remove oldest processor to control the num of the memtables\n-        // TODO: use a method to control the number of memtables\n-        if (tsFileProcessorTreeMap.size()\n-            >= IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition()) {\n-          Map.Entry<Long, TsFileProcessor> processorEntry = tsFileProcessorTreeMap.firstEntry();\n-          logger.info(\n-              \"will close a {} TsFile because too many active partitions ({} > {}) in the storage group {},\",\n-              sequence, tsFileProcessorTreeMap.size(),\n-              IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition(),\n-              storageGroupName);\n-          asyncCloseOneTsFileProcessor(sequence, processorEntry.getValue());\n-        }\n+    TsFileProcessor res = tsFileProcessorTreeMap.get(timeRangeId);\n \n-        // build new processor\n-        TsFileProcessor newProcessor = createTsFileProcessor(sequence, timeRangeId);\n-        tsFileProcessorTreeMap.put(timeRangeId, newProcessor);\n-        tsFileManagement.add(newProcessor.getTsFileResource(), sequence);\n-        res = newProcessor;\n-      }\n+    //Use double-check to shorten the lock range\n+    if (null == res) {\n+      writeLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb1fc66fe4c23ddcf916bdec9decfb1df5cc959"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad599115f8e19e485504f096aa8c37824e2d41ae", "author": {"user": {"login": "yuqi1129", "name": "Qi Yu"}}, "url": "https://github.com/apache/iotdb/commit/ad599115f8e19e485504f096aa8c37824e2d41ae", "committedDate": "2021-01-28T12:24:13Z", "message": "Merge master and remove redundant lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42be462570c7f849c98db2d1657471747f467f71", "author": {"user": {"login": "yuqi1129", "name": "Qi Yu"}}, "url": "https://github.com/apache/iotdb/commit/42be462570c7f849c98db2d1657471747f467f71", "committedDate": "2021-01-28T12:26:19Z", "message": "minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60262c87a755028efdb2fa28909548c3830b33d5", "author": {"user": {"login": "yuqi1129", "name": "Qi Yu"}}, "url": "https://github.com/apache/iotdb/commit/60262c87a755028efdb2fa28909548c3830b33d5", "committedDate": "2021-01-28T12:29:56Z", "message": "minor change again"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4OTgyMzk4", "url": "https://github.com/apache/iotdb/pull/2353#pullrequestreview-578982398", "createdAt": "2021-01-29T06:54:32Z", "commit": {"oid": "60262c87a755028efdb2fa28909548c3830b33d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4OTg3MDUx", "url": "https://github.com/apache/iotdb/pull/2353#pullrequestreview-578987051", "createdAt": "2021-01-29T07:05:02Z", "commit": {"oid": "60262c87a755028efdb2fa28909548c3830b33d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3994, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}