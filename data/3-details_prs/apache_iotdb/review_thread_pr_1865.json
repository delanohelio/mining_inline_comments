{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5OTY2Nzc1", "number": 1865, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjozMDo1N1rOEzkxQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo1Mjo1MlrOEzuGaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTE1MjY2OnYy", "diffSide": "RIGHT", "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjozMDo1N1rOHq4SaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyOTozM1rOHrLE4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcyNDQ1Nw==", "bodyText": "It's better to add a default comment.such as 'default: 1G'", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514724457", "createdAt": "2020-10-30T02:30:57Z", "author": {"login": "LebronAl"}, "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "diffHunk": "@@ -129,7 +129,26 @@ flush_raft_log_threshold=10000\n # The cycle when raft log is periodically forced to be written to disk(in milliseconds)\n # If force_raft_log_period_in_ms = 0 it means force insert raft log to be written to disk after\n # each refreshment. Set this parameter to 0 may slow down the ingestion on slow disk.\n-force_raft_log_period_in_ms=10\n+force_raft_log_period_in_ms=1000\n \n # Size of log buffer in each RaftMember's LogManager(in byte).\n-raft_log_buffer_size=16777216\n\\ No newline at end of file\n+raft_log_buffer_size=16777216\n+\n+# The maximum value of the raft log index stored in the memory per raft group,\n+# These indexes are used to index the location of the log on the disk\n+max_raft_log_index_size_in_memory=10000\n+\n+# The maximum value of the raft log persisted on disk per file(in byte) per raft group", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2463c422b62d9e6f728cbaef67214845bd792c95"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMjI4OQ==", "bodyText": "sure", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515032289", "createdAt": "2020-10-30T11:29:33Z", "author": {"login": "neuyilan"}, "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "diffHunk": "@@ -129,7 +129,26 @@ flush_raft_log_threshold=10000\n # The cycle when raft log is periodically forced to be written to disk(in milliseconds)\n # If force_raft_log_period_in_ms = 0 it means force insert raft log to be written to disk after\n # each refreshment. Set this parameter to 0 may slow down the ingestion on slow disk.\n-force_raft_log_period_in_ms=10\n+force_raft_log_period_in_ms=1000\n \n # Size of log buffer in each RaftMember's LogManager(in byte).\n-raft_log_buffer_size=16777216\n\\ No newline at end of file\n+raft_log_buffer_size=16777216\n+\n+# The maximum value of the raft log index stored in the memory per raft group,\n+# These indexes are used to index the location of the log on the disk\n+max_raft_log_index_size_in_memory=10000\n+\n+# The maximum value of the raft log persisted on disk per file(in byte) per raft group", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcyNDQ1Nw=="}, "originalCommit": {"oid": "2463c422b62d9e6f728cbaef67214845bd792c95"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTE1NTM4OnYy", "diffSide": "RIGHT", "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjozMToyOFrOHq4UQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjozMToyOFrOHq4UQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcyNDkyOA==", "bodyText": "Please fix typo", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514724928", "createdAt": "2020-10-30T02:31:28Z", "author": {"login": "LebronAl"}, "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "diffHunk": "@@ -129,7 +129,26 @@ flush_raft_log_threshold=10000\n # The cycle when raft log is periodically forced to be written to disk(in milliseconds)\n # If force_raft_log_period_in_ms = 0 it means force insert raft log to be written to disk after\n # each refreshment. Set this parameter to 0 may slow down the ingestion on slow disk.\n-force_raft_log_period_in_ms=10\n+force_raft_log_period_in_ms=1000\n \n # Size of log buffer in each RaftMember's LogManager(in byte).\n-raft_log_buffer_size=16777216\n\\ No newline at end of file\n+raft_log_buffer_size=16777216\n+\n+# The maximum value of the raft log index stored in the memory per raft group,\n+# These indexes are used to index the location of the log on the disk\n+max_raft_log_index_size_in_memory=10000\n+\n+# The maximum value of the raft log persisted on disk per file(in byte) per raft group\n+max_raft_log_persist_data_size_per_file=1073741824\n+\n+# The maximum number of persistent raft log files on disk per raft group, So each raft group's", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2463c422b62d9e6f728cbaef67214845bd792c95"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTE4MDc4OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjozNjoyNlrOHq4mXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjozNjoyNlrOHq4mXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcyOTU2NA==", "bodyText": "same as above", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514729564", "createdAt": "2020-10-30T02:36:26Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterConfig.java", "diffHunk": "@@ -127,6 +127,32 @@\n \n   private int pullSnapshotRetryIntervalMs = 5 * 1000;\n \n+  /**\n+   * The maximum value of the raft log index stored in the memory per raft group, These indexes are\n+   * used to index the location of the log on the disk\n+   */\n+  private int maxRaftLogIndexSizeInMemory = 10000;\n+\n+  /**\n+   * The maximum value of the raft log persisted on disk per file(in byte) per raft group", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2463c422b62d9e6f728cbaef67214845bd792c95"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTQyNDQxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/RaftLogManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMzoyNDoxMVrOHq7TFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMzozNTo1MFrOHrvJAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc3Mzc4Mg==", "bodyText": "I thought these code should be in the function maybeTerm in committedEntryManager, which should manager all persisted entries, it will throw a EntryCompactedException or get log from disk if isEnableRaftLogPersistence  is enabled.\nBTW, I'm a little confused about whether we should get log from disk in function getTerm,If so, then maybe we should change isEnableUsePersistLogOnDiskToCatchUp's name", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514773782", "createdAt": "2020-10-30T03:24:11Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/RaftLogManager.java", "diffHunk": "@@ -292,15 +292,29 @@ public long getLastLogIndex() {\n   public long getTerm(long index) throws EntryCompactedException {\n     long dummyIndex = getFirstIndex() - 1;\n     if (index < dummyIndex) {\n+      // search in disk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2463c422b62d9e6f728cbaef67214845bd792c95"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MjQwOA==", "bodyText": "if we manage all the persisted entries(committed or persisted) on the committedEntryManager, it's better to move the code in committedEntryManager. but now, the committedEntryManager only manager the commit log in memory. and the LogManager  managers the UnCommittedEntryManager CommittedEntryManager and StableEntryManager, I think CommittedEntryManager is as logs in memory,  StableEntryManager is as logs in the disk,  so I think it's ok to leave the code here, the log manager knows where to get the logs\nbesides, I argue with you that, when get term, we should not care the isEnableUsePersistLogOnDiskToCatchUp  parpermeter, if isEnableRaftLogPersistence is enabled is ok", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515572408", "createdAt": "2020-11-01T04:04:45Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/RaftLogManager.java", "diffHunk": "@@ -292,15 +292,29 @@ public long getLastLogIndex() {\n   public long getTerm(long index) throws EntryCompactedException {\n     long dummyIndex = getFirstIndex() - 1;\n     if (index < dummyIndex) {\n+      // search in disk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc3Mzc4Mg=="}, "originalCommit": {"oid": "2463c422b62d9e6f728cbaef67214845bd792c95"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMzE3MA==", "bodyText": "OK.As the logmanager has been given more functionality, I will try to merge UnCommittedEntryManager and CommittedEntryManager to a MemoryLogmanager to avoid redundant entry shift laterly.\nI'm OK with here~", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515623170", "createdAt": "2020-11-01T13:35:50Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/RaftLogManager.java", "diffHunk": "@@ -292,15 +292,29 @@ public long getLastLogIndex() {\n   public long getTerm(long index) throws EntryCompactedException {\n     long dummyIndex = getFirstIndex() - 1;\n     if (index < dummyIndex) {\n+      // search in disk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc3Mzc4Mg=="}, "originalCommit": {"oid": "2463c422b62d9e6f728cbaef67214845bd792c95"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjM0MzU3OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODoxMToxNFrOHrE0lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODoxMToxNFrOHrE0lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyOTgxNA==", "bodyText": "change the logSizeDeque", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514929814", "createdAt": "2020-10-30T08:11:14Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx\n+   */\n+  private static final int FILE_NAME_PART_LENGTH = 4;\n \n-  private final int flushRaftLogThreshold = ClusterDescriptor.getInstance().getConfig()\n-      .getFlushRaftLogThreshold();\n+  private int maxRaftLogIndexSizeInMemory = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogIndexSizeInMemory();\n \n-  private int bufferedLogNum = 0;\n+  private int maxRaftLogPersistDataSizePerFile = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogPersistDataSizePerFile();\n \n+  private int maxNumberOfPersistRaftLogFiles = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxNumberOfPersistRaftLogFiles();\n+\n+  private int maxPersistRaftLogNumberOnDisk = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxPersistRaftLogNumberOnDisk();\n+\n+  private ScheduledExecutorService persistLogDeleteExecutorService;\n+  private ScheduledFuture<?> persistLogDeleteLogFuture;\n+\n+  /**\n+   * indicate the first raft log's index of {@link SyncLogDequeSerializer#logIndexOffsetList}, for\n+   * example, if firstLogIndex=1000, then the offset of the log index 1000 equals\n+   * logIndexOffsetList[0], the offset of the log index 1001 equals logIndexOffsetList[1], and so\n+   * on.\n+   */\n+  private long firstLogIndex = 0;\n+\n+  /**\n+   * the offset of the log's index, for example, the first value is the offset of index\n+   * ${firstLogIndex}, the second value is the offset of index ${firstLogIndex+1}\n+   */\n+  private List<Long> logIndexOffsetList;\n+\n+  private static final int logDeleteCheckIntervalSecond = 1;\n \n   /**\n    * the lock uses when change the logSizeDeque", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjM5MzI4OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODoyNzoyMVrOHrFRig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODoyNzoyMVrOHrFRig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzNzIyNg==", "bodyText": "It seems that this function will return empty list when maxHaveAppliedCommitIndex == commitLogIndex ,So how can we handle redo log when restart as we have not merged wal and raft logs?", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514937226", "createdAt": "2020-10-30T08:27:21Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -160,31 +216,28 @@ public LogManagerMeta getMeta() {\n    * Recover all the logs in disk. This function will be called once this instance is created.\n    */\n   @Override\n-  public List<Log> getAllEntries() {\n-    List<Log> logs = recoverLog();\n-    int size = logs.size();\n-    if (size != 0 && meta.getLastLogIndex() <= logs.get(size - 1).getCurrLogIndex()) {\n-      meta.setLastLogTerm(logs.get(size - 1).getCurrLogTerm());\n-      meta.setLastLogIndex(logs.get(size - 1).getCurrLogIndex());\n-      meta.setCommitLogTerm(logs.get(size - 1).getCurrLogTerm());\n-      meta.setCommitLogIndex(logs.get(size - 1).getCurrLogIndex());\n+  public List<Log> getAllEntriesBeforeAppliedIndex() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjQ3NDI0OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo1Mjo0M1rOHrGCWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo1Mjo0M1rOHrGCWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk0OTcyMQ==", "bodyText": "Replace request.toString() with simply request.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514949721", "createdAt": "2020-10-30T08:52:43Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -191,12 +191,11 @@ private AppendEntriesRequest prepareRequest(List<ByteBuffer> logList, int startP\n         logger.error(\"getTerm failed for newly append entries\", e);\n       }\n     }\n+    logger.debug(\"{}, node={} catchup request={}\", raftMember.getName(), node, request.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjQ5NTQxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo1ODo0OVrOHrGPHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozNTo1MlrOHrNLzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1Mjk4OA==", "bodyText": "It seems more like getAllEntriesAfterAppliedIndex instead of  getAllEntriesBeforeAppliedIndex.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514952988", "createdAt": "2020-10-30T08:58:49Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -160,31 +216,28 @@ public LogManagerMeta getMeta() {\n    * Recover all the logs in disk. This function will be called once this instance is created.\n    */\n   @Override\n-  public List<Log> getAllEntries() {\n-    List<Log> logs = recoverLog();\n-    int size = logs.size();\n-    if (size != 0 && meta.getLastLogIndex() <= logs.get(size - 1).getCurrLogIndex()) {\n-      meta.setLastLogTerm(logs.get(size - 1).getCurrLogTerm());\n-      meta.setLastLogIndex(logs.get(size - 1).getCurrLogIndex());\n-      meta.setCommitLogTerm(logs.get(size - 1).getCurrLogTerm());\n-      meta.setCommitLogIndex(logs.get(size - 1).getCurrLogIndex());\n+  public List<Log> getAllEntriesBeforeAppliedIndex() {\n+    logger.debug(\"getAllEntriesBeforeAppliedIndex, maxHaveAppliedCommitIndex={}, commitLogIndex={}\",\n+        meta.getMaxHaveAppliedCommitIndex(), meta.getCommitLogIndex());\n+    if (meta.getMaxHaveAppliedCommitIndex() >= meta.getCommitLogIndex()) {\n+      return Collections.emptyList();\n     }\n-    return logs;\n+    return getLogs(meta.getMaxHaveAppliedCommitIndex(), meta.getCommitLogIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NjgzMQ==", "bodyText": "Sure, thanks", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515066831", "createdAt": "2020-10-30T12:35:52Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -160,31 +216,28 @@ public LogManagerMeta getMeta() {\n    * Recover all the logs in disk. This function will be called once this instance is created.\n    */\n   @Override\n-  public List<Log> getAllEntries() {\n-    List<Log> logs = recoverLog();\n-    int size = logs.size();\n-    if (size != 0 && meta.getLastLogIndex() <= logs.get(size - 1).getCurrLogIndex()) {\n-      meta.setLastLogTerm(logs.get(size - 1).getCurrLogTerm());\n-      meta.setLastLogIndex(logs.get(size - 1).getCurrLogIndex());\n-      meta.setCommitLogTerm(logs.get(size - 1).getCurrLogTerm());\n-      meta.setCommitLogIndex(logs.get(size - 1).getCurrLogIndex());\n+  public List<Log> getAllEntriesBeforeAppliedIndex() {\n+    logger.debug(\"getAllEntriesBeforeAppliedIndex, maxHaveAppliedCommitIndex={}, commitLogIndex={}\",\n+        meta.getMaxHaveAppliedCommitIndex(), meta.getCommitLogIndex());\n+    if (meta.getMaxHaveAppliedCommitIndex() >= meta.getCommitLogIndex()) {\n+      return Collections.emptyList();\n     }\n-    return logs;\n+    return getLogs(meta.getMaxHaveAppliedCommitIndex(), meta.getCommitLogIndex());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1Mjk4OA=="}, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjQ5NzcwOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo1OToyOFrOHrGQgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo0NzowNVrOHrLoxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MzM0Nw==", "bodyText": "It seems all the callers(close (),checkCloseCurrentFile())  to this function's has got the writelock?", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514953347", "createdAt": "2020-10-30T08:59:28Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -203,47 +256,113 @@ public void append(List<Log> entries) throws IOException {\n    */\n   private void putLogs(List<Log> entries) {\n     for (Log log : entries) {\n-      logBuffer.mark();\n+      logDataBuffer.mark();\n+      logIndexBuffer.mark();\n       ByteBuffer logData = log.serialize();\n       int size = logData.capacity() + Integer.BYTES;\n       try {\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n       } catch (BufferOverflowException e) {\n         logger.info(\"Raft log buffer overflow!\");\n-        logBuffer.reset();\n+        logDataBuffer.reset();\n+        logIndexBuffer.reset();\n         flushLogBuffer();\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        checkCloseCurrentFile(log.getCurrLogIndex() - 1);\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n+      }\n+    }\n+  }\n+\n+  private void checkCloseCurrentFile(long commitIndex) {\n+    if (offsetOfTheCurrentLogDataOutputStream > maxRaftLogPersistDataSizePerFile) {\n+      try {\n+        closeCurrentFile(commitIndex);\n+        serializeMeta(meta);\n+        createNewLogFile(logDir, commitIndex + 1);\n+      } catch (IOException e) {\n+        logger.error(\"check close current file failed\", e);\n       }\n     }\n   }\n \n+  private void closeCurrentFile(long commitIndex) throws IOException {\n+    lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0MTQ3OQ==", "bodyText": "sure, I will remove the lock here", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515041479", "createdAt": "2020-10-30T11:47:05Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -203,47 +256,113 @@ public void append(List<Log> entries) throws IOException {\n    */\n   private void putLogs(List<Log> entries) {\n     for (Log log : entries) {\n-      logBuffer.mark();\n+      logDataBuffer.mark();\n+      logIndexBuffer.mark();\n       ByteBuffer logData = log.serialize();\n       int size = logData.capacity() + Integer.BYTES;\n       try {\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n       } catch (BufferOverflowException e) {\n         logger.info(\"Raft log buffer overflow!\");\n-        logBuffer.reset();\n+        logDataBuffer.reset();\n+        logIndexBuffer.reset();\n         flushLogBuffer();\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        checkCloseCurrentFile(log.getCurrLogIndex() - 1);\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n+      }\n+    }\n+  }\n+\n+  private void checkCloseCurrentFile(long commitIndex) {\n+    if (offsetOfTheCurrentLogDataOutputStream > maxRaftLogPersistDataSizePerFile) {\n+      try {\n+        closeCurrentFile(commitIndex);\n+        serializeMeta(meta);\n+        createNewLogFile(logDir, commitIndex + 1);\n+      } catch (IOException e) {\n+        logger.error(\"check close current file failed\", e);\n       }\n     }\n   }\n \n+  private void closeCurrentFile(long commitIndex) throws IOException {\n+    lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MzM0Nw=="}, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 317}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjU0NDI0OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxNDoxMFrOHrGsww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozNjoxN1rOHrNMkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDU3OQ==", "bodyText": "Maybe list.set() is enough for this.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514960579", "createdAt": "2020-10-30T09:14:10Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -203,47 +256,113 @@ public void append(List<Log> entries) throws IOException {\n    */\n   private void putLogs(List<Log> entries) {\n     for (Log log : entries) {\n-      logBuffer.mark();\n+      logDataBuffer.mark();\n+      logIndexBuffer.mark();\n       ByteBuffer logData = log.serialize();\n       int size = logData.capacity() + Integer.BYTES;\n       try {\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n       } catch (BufferOverflowException e) {\n         logger.info(\"Raft log buffer overflow!\");\n-        logBuffer.reset();\n+        logDataBuffer.reset();\n+        logIndexBuffer.reset();\n         flushLogBuffer();\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        checkCloseCurrentFile(log.getCurrLogIndex() - 1);\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n+      }\n+    }\n+  }\n+\n+  private void checkCloseCurrentFile(long commitIndex) {\n+    if (offsetOfTheCurrentLogDataOutputStream > maxRaftLogPersistDataSizePerFile) {\n+      try {\n+        closeCurrentFile(commitIndex);\n+        serializeMeta(meta);\n+        createNewLogFile(logDir, commitIndex + 1);\n+      } catch (IOException e) {\n+        logger.error(\"check close current file failed\", e);\n       }\n     }\n   }\n \n+  private void closeCurrentFile(long commitIndex) throws IOException {\n+    lock.writeLock().lock();\n+    try {\n+      if (currentLogDataOutputStream != null) {\n+        currentLogDataOutputStream.close();\n+        currentLogDataOutputStream = null;\n+      }\n+\n+      if (currentLogIndexOutputStream != null) {\n+        currentLogIndexOutputStream.close();\n+        currentLogIndexOutputStream = null;\n+      }\n+      File currentLogDataFile = getCurrentLogDataFile();\n+      String newDataFileName = currentLogDataFile.getName()\n+          .replaceAll(String.valueOf(Long.MAX_VALUE), String.valueOf(commitIndex));\n+      File newCurrentLogDatFile = SystemFileFactory.INSTANCE\n+          .getFile(currentLogDataFile.getParent() + File.separator + newDataFileName);\n+      if (!currentLogDataFile.renameTo(newCurrentLogDatFile)) {\n+        logger.error(\"rename log data file={} failed\", currentLogDataFile.getAbsoluteFile());\n+      }\n+      logDataFileList.remove(logDataFileList.size() - 1);\n+      logDataFileList.add(newCurrentLogDatFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NzAyNQ==", "bodyText": "Got it", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515067025", "createdAt": "2020-10-30T12:36:17Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -203,47 +256,113 @@ public void append(List<Log> entries) throws IOException {\n    */\n   private void putLogs(List<Log> entries) {\n     for (Log log : entries) {\n-      logBuffer.mark();\n+      logDataBuffer.mark();\n+      logIndexBuffer.mark();\n       ByteBuffer logData = log.serialize();\n       int size = logData.capacity() + Integer.BYTES;\n       try {\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n       } catch (BufferOverflowException e) {\n         logger.info(\"Raft log buffer overflow!\");\n-        logBuffer.reset();\n+        logDataBuffer.reset();\n+        logIndexBuffer.reset();\n         flushLogBuffer();\n-        logBuffer.putInt(logData.capacity());\n-        logBuffer.put(logData);\n-        logSizeDeque.addLast(size);\n-        bufferedLogNum++;\n+        checkCloseCurrentFile(log.getCurrLogIndex() - 1);\n+        logDataBuffer.putInt(logData.capacity());\n+        logDataBuffer.put(logData);\n+        logIndexBuffer.putLong(offsetOfTheCurrentLogDataOutputStream);\n+        logIndexOffsetList.add(offsetOfTheCurrentLogDataOutputStream);\n+        offsetOfTheCurrentLogDataOutputStream += size;\n+      }\n+    }\n+  }\n+\n+  private void checkCloseCurrentFile(long commitIndex) {\n+    if (offsetOfTheCurrentLogDataOutputStream > maxRaftLogPersistDataSizePerFile) {\n+      try {\n+        closeCurrentFile(commitIndex);\n+        serializeMeta(meta);\n+        createNewLogFile(logDir, commitIndex + 1);\n+      } catch (IOException e) {\n+        logger.error(\"check close current file failed\", e);\n       }\n     }\n   }\n \n+  private void closeCurrentFile(long commitIndex) throws IOException {\n+    lock.writeLock().lock();\n+    try {\n+      if (currentLogDataOutputStream != null) {\n+        currentLogDataOutputStream.close();\n+        currentLogDataOutputStream = null;\n+      }\n+\n+      if (currentLogIndexOutputStream != null) {\n+        currentLogIndexOutputStream.close();\n+        currentLogIndexOutputStream = null;\n+      }\n+      File currentLogDataFile = getCurrentLogDataFile();\n+      String newDataFileName = currentLogDataFile.getName()\n+          .replaceAll(String.valueOf(Long.MAX_VALUE), String.valueOf(commitIndex));\n+      File newCurrentLogDatFile = SystemFileFactory.INSTANCE\n+          .getFile(currentLogDataFile.getParent() + File.separator + newDataFileName);\n+      if (!currentLogDataFile.renameTo(newCurrentLogDatFile)) {\n+        logger.error(\"rename log data file={} failed\", currentLogDataFile.getAbsoluteFile());\n+      }\n+      logDataFileList.remove(logDataFileList.size() - 1);\n+      logDataFileList.add(newCurrentLogDatFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDU3OQ=="}, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 337}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjU0NjUxOnYy", "diffSide": "RIGHT", "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxNDo0M1rOHrGuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMjo0NzoyOVrOHrrueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDkyNw==", "bodyText": "I doubt if this parameter is necessary, given that you have already prevented storage abuse by taking two parameters: max_number_of_persist_raft_log_files and max_raft_log_persist_data_size_per_file", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514960927", "createdAt": "2020-10-30T09:14:43Z", "author": {"login": "LebronAl"}, "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "diffHunk": "@@ -129,7 +129,26 @@ flush_raft_log_threshold=10000\n # The cycle when raft log is periodically forced to be written to disk(in milliseconds)\n # If force_raft_log_period_in_ms = 0 it means force insert raft log to be written to disk after\n # each refreshment. Set this parameter to 0 may slow down the ingestion on slow disk.\n-force_raft_log_period_in_ms=10\n+force_raft_log_period_in_ms=1000\n \n # Size of log buffer in each RaftMember's LogManager(in byte).\n-raft_log_buffer_size=16777216\n\\ No newline at end of file\n+raft_log_buffer_size=16777216\n+\n+# The maximum value of the raft log index stored in the memory per raft group,\n+# These indexes are used to index the location of the log on the disk\n+max_raft_log_index_size_in_memory=10000\n+\n+# The maximum value of the raft log persisted on disk per file(in byte) per raft group\n+max_raft_log_persist_data_size_per_file=1073741824\n+\n+# The maximum number of persistent raft log files on disk per raft group, So each raft group's\n+# So each raft group's log takes up disk space approximately equals\n+# max_raft_log_persist_data_size_per_file*max_number_of_persist_raft_log_files\n+max_number_of_persist_raft_log_files=5\n+\n+# The maximum number of logs saved on the disk\n+max_persist_raft_log_number_on_disk=1000000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2NzIyNQ==", "bodyText": "This parameter is used in this case: a log is small, and the number of logs a file holds is greater than this value, so in this case, only one log is needed", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515567225", "createdAt": "2020-11-01T02:47:29Z", "author": {"login": "neuyilan"}, "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "diffHunk": "@@ -129,7 +129,26 @@ flush_raft_log_threshold=10000\n # The cycle when raft log is periodically forced to be written to disk(in milliseconds)\n # If force_raft_log_period_in_ms = 0 it means force insert raft log to be written to disk after\n # each refreshment. Set this parameter to 0 may slow down the ingestion on slow disk.\n-force_raft_log_period_in_ms=10\n+force_raft_log_period_in_ms=1000\n \n # Size of log buffer in each RaftMember's LogManager(in byte).\n-raft_log_buffer_size=16777216\n\\ No newline at end of file\n+raft_log_buffer_size=16777216\n+\n+# The maximum value of the raft log index stored in the memory per raft group,\n+# These indexes are used to index the location of the log on the disk\n+max_raft_log_index_size_in_memory=10000\n+\n+# The maximum value of the raft log persisted on disk per file(in byte) per raft group\n+max_raft_log_persist_data_size_per_file=1073741824\n+\n+# The maximum number of persistent raft log files on disk per raft group, So each raft group's\n+# So each raft group's log takes up disk space approximately equals\n+# max_raft_log_persist_data_size_per_file*max_number_of_persist_raft_log_files\n+max_number_of_persist_raft_log_files=5\n+\n+# The maximum number of logs saved on the disk\n+max_persist_raft_log_number_on_disk=1000000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDkyNw=="}, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjU2OTMzOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToyMTozMFrOHrG7iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjo0Mjo0NlrOHrNZXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2NDM2Mw==", "bodyText": "Is it really startTime? I think it should more clear here.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514964363", "createdAt": "2020-10-30T09:21:30Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MDMwMQ==", "bodyText": "its typo, i'll fix it", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515070301", "createdAt": "2020-10-30T12:42:46Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2NDM2Mw=="}, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjU4NDEyOnYy", "diffSide": "RIGHT", "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToyNTo1MlrOHrHEjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToyNTo1MlrOHrHEjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2NjY2OA==", "bodyText": "It seems that the max_unsnapshoted_log_size can be deleted now", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514966668", "createdAt": "2020-10-30T09:25:52Z", "author": {"login": "LebronAl"}, "path": "cluster/src/assembly/resources/conf/iotdb-cluster.properties", "diffHunk": "@@ -129,7 +129,26 @@ flush_raft_log_threshold=10000\n # The cycle when raft log is periodically forced to be written to disk(in milliseconds)\n # If force_raft_log_period_in_ms = 0 it means force insert raft log to be written to disk after\n # each refreshment. Set this parameter to 0 may slow down the ingestion on slow disk.\n-force_raft_log_period_in_ms=10\n+force_raft_log_period_in_ms=1000\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjYwODkxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTozMjo0MVrOHrHTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDo0OToyNVrOHrk6gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3MDUzMQ==", "bodyText": "As the function checkDeletePersistRaftLog  will get the write lock, I doubt whether 1 is too small?", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514970531", "createdAt": "2020-10-30T09:32:41Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx\n+   */\n+  private static final int FILE_NAME_PART_LENGTH = 4;\n \n-  private final int flushRaftLogThreshold = ClusterDescriptor.getInstance().getConfig()\n-      .getFlushRaftLogThreshold();\n+  private int maxRaftLogIndexSizeInMemory = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogIndexSizeInMemory();\n \n-  private int bufferedLogNum = 0;\n+  private int maxRaftLogPersistDataSizePerFile = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogPersistDataSizePerFile();\n \n+  private int maxNumberOfPersistRaftLogFiles = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxNumberOfPersistRaftLogFiles();\n+\n+  private int maxPersistRaftLogNumberOnDisk = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxPersistRaftLogNumberOnDisk();\n+\n+  private ScheduledExecutorService persistLogDeleteExecutorService;\n+  private ScheduledFuture<?> persistLogDeleteLogFuture;\n+\n+  /**\n+   * indicate the first raft log's index of {@link SyncLogDequeSerializer#logIndexOffsetList}, for\n+   * example, if firstLogIndex=1000, then the offset of the log index 1000 equals\n+   * logIndexOffsetList[0], the offset of the log index 1001 equals logIndexOffsetList[1], and so\n+   * on.\n+   */\n+  private long firstLogIndex = 0;\n+\n+  /**\n+   * the offset of the log's index, for example, the first value is the offset of index\n+   * ${firstLogIndex}, the second value is the offset of index ${firstLogIndex+1}\n+   */\n+  private List<Long> logIndexOffsetList;\n+\n+  private static final int logDeleteCheckIntervalSecond = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0NTM0Ng==", "bodyText": "sure, the default log size is 1gb, the disk write speed approximately 50MB/s, so I think 5 second is enough", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515045346", "createdAt": "2020-10-30T11:54:21Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx\n+   */\n+  private static final int FILE_NAME_PART_LENGTH = 4;\n \n-  private final int flushRaftLogThreshold = ClusterDescriptor.getInstance().getConfig()\n-      .getFlushRaftLogThreshold();\n+  private int maxRaftLogIndexSizeInMemory = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogIndexSizeInMemory();\n \n-  private int bufferedLogNum = 0;\n+  private int maxRaftLogPersistDataSizePerFile = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogPersistDataSizePerFile();\n \n+  private int maxNumberOfPersistRaftLogFiles = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxNumberOfPersistRaftLogFiles();\n+\n+  private int maxPersistRaftLogNumberOnDisk = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxPersistRaftLogNumberOnDisk();\n+\n+  private ScheduledExecutorService persistLogDeleteExecutorService;\n+  private ScheduledFuture<?> persistLogDeleteLogFuture;\n+\n+  /**\n+   * indicate the first raft log's index of {@link SyncLogDequeSerializer#logIndexOffsetList}, for\n+   * example, if firstLogIndex=1000, then the offset of the log index 1000 equals\n+   * logIndexOffsetList[0], the offset of the log index 1001 equals logIndexOffsetList[1], and so\n+   * on.\n+   */\n+  private long firstLogIndex = 0;\n+\n+  /**\n+   * the offset of the log's index, for example, the first value is the offset of index\n+   * ${firstLogIndex}, the second value is the offset of index ${firstLogIndex+1}\n+   */\n+  private List<Long> logIndexOffsetList;\n+\n+  private static final int logDeleteCheckIntervalSecond = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3MDUzMQ=="}, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NTYxOA==", "bodyText": "Agree with this", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515455618", "createdAt": "2020-10-31T04:49:25Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx\n+   */\n+  private static final int FILE_NAME_PART_LENGTH = 4;\n \n-  private final int flushRaftLogThreshold = ClusterDescriptor.getInstance().getConfig()\n-      .getFlushRaftLogThreshold();\n+  private int maxRaftLogIndexSizeInMemory = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogIndexSizeInMemory();\n \n-  private int bufferedLogNum = 0;\n+  private int maxRaftLogPersistDataSizePerFile = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogPersistDataSizePerFile();\n \n+  private int maxNumberOfPersistRaftLogFiles = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxNumberOfPersistRaftLogFiles();\n+\n+  private int maxPersistRaftLogNumberOnDisk = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxPersistRaftLogNumberOnDisk();\n+\n+  private ScheduledExecutorService persistLogDeleteExecutorService;\n+  private ScheduledFuture<?> persistLogDeleteLogFuture;\n+\n+  /**\n+   * indicate the first raft log's index of {@link SyncLogDequeSerializer#logIndexOffsetList}, for\n+   * example, if firstLogIndex=1000, then the offset of the log index 1000 equals\n+   * logIndexOffsetList[0], the offset of the log index 1001 equals logIndexOffsetList[1], and so\n+   * on.\n+   */\n+  private long firstLogIndex = 0;\n+\n+  /**\n+   * the offset of the log's index, for example, the first value is the offset of index\n+   * ${firstLogIndex}, the second value is the offset of index ${firstLogIndex+1}\n+   */\n+  private List<Long> logIndexOffsetList;\n+\n+  private static final int logDeleteCheckIntervalSecond = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3MDUzMQ=="}, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjYxNDIxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTozNDoxMFrOHrHW4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTozNDoxMFrOHrHW4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3MTM2Mg==", "bodyText": "Better to use buffered stream.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514971362", "createdAt": "2020-10-30T09:34:10Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -349,9 +495,136 @@ private void checkLogFile(File file) {\n       } catch (IOException e) {\n         logger.warn(\"Cannot delete outdated log file {}\", file);\n       }\n+      return false;\n+    }\n+\n+    String[] splits = file.getName().split(FILE_NAME_SEPARATOR);\n+    // start index should be smaller than end index\n+    if (Long.parseLong(splits[0]) > Long.parseLong(splits[1])) {\n+      try {\n+        Files.delete(file.toPath());\n+      } catch (IOException e) {\n+        logger.warn(\"Cannot delete incorrect log file {}\", file);\n+      }\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  private void recoverTheLastLogFile() {\n+    if (logIndexFileList.isEmpty()) {\n+      logger.info(\"no log index file to recover\");\n+      return;\n+    }\n+\n+    File lastIndexFile = logIndexFileList.get(logIndexFileList.size() - 1);\n+    long endIndex = Long.parseLong(lastIndexFile.getName().split(FILE_NAME_SEPARATOR)[1]);\n+    boolean success = true;\n+    if (endIndex != Long.MAX_VALUE) {\n+      logger.info(\"last log index file={} no need to recover\", lastIndexFile.getAbsoluteFile());\n+    } else {\n+      success = recoverTheLastLogIndexFile(lastIndexFile);\n+    }\n+\n+    if (!success) {\n+      logger.error(\"recover log index file failed, clear all logs in disk, {}\",\n+          lastIndexFile.getAbsoluteFile());\n+      for (int i = 0; i < logIndexFileList.size(); i++) {\n+        deleteLogDataAndIndexFile(i);\n+      }\n+      clearFirstLogIndex();\n+\n+      return;\n+    }\n+\n+    File lastDataFile = logDataFileList.get(logDataFileList.size() - 1);\n+    endIndex = Long.parseLong(lastDataFile.getName().split(FILE_NAME_SEPARATOR)[1]);\n+    if (endIndex != Long.MAX_VALUE) {\n+      logger.info(\"last log data file={} no need to recover\", lastDataFile.getAbsoluteFile());\n+      return;\n+    }\n+\n+    success = recoverTheLastLogDataFile(logDataFileList.get(logDataFileList.size() - 1));\n+    if (!success) {\n+      logger.error(\"recover log data file failed, clear all logs in disk,{}\",\n+          lastDataFile.getAbsoluteFile());\n+      for (int i = 0; i < logIndexFileList.size(); i++) {\n+        deleteLogDataAndIndexFile(i);\n+      }\n+      clearFirstLogIndex();\n+    }\n+  }\n+\n+  private boolean recoverTheLastLogDataFile(File file) {\n+    String[] splits = file.getName().split(FILE_NAME_SEPARATOR);\n+    long startIndex = Long.parseLong(splits[0]);\n+    Pair<File, Pair<Long, Long>> fileStartAndEndIndex = getLogIndexFile(startIndex);\n+    if (fileStartAndEndIndex.right.left == startIndex) {\n+      long endIndex = fileStartAndEndIndex.right.right;\n+      String newDataFileName = file.getName()\n+          .replaceAll(String.valueOf(Long.MAX_VALUE), String.valueOf(endIndex));\n+      File newLogDataFile = SystemFileFactory.INSTANCE\n+          .getFile(file.getParent() + File.separator + newDataFileName);\n+      if (!file.renameTo(newLogDataFile)) {\n+        logger.error(\"rename log data file={} failed when recover\", file.getAbsoluteFile());\n+      }\n+      logDataFileList.remove(logDataFileList.size() - 1);\n+      logDataFileList.add(newLogDataFile);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private boolean recoverTheLastLogIndexFile(File file) {\n+    logger.debug(\"start to recover the last log index file={}\", file.getAbsoluteFile());\n+    String[] splits = file.getName().split(FILE_NAME_SEPARATOR);\n+    long startIndex = Long.parseLong(splits[0]);\n+    int longLength = 8;\n+    byte[] bytes = new byte[longLength];\n+\n+    int totalCount = 0;\n+    long offset = 0;\n+    try (FileInputStream inputStream = new FileInputStream(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 631}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjYzNDUwOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTozOTo1NVrOHrHjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMjozNTowMlrOHrrq9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3NDU2OQ==", "bodyText": "If maxPersistRaftLogNumberOnDisk is too small, is it possible that the current file will be deleted here?", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514974569", "createdAt": "2020-10-30T09:39:55Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -593,75 +815,385 @@ public void close() {\n   }\n \n   /**\n-   * adjust maxRemovedLogSize to the first log file\n+   * get file version from file The file name structure is as follows\uff1a\n+   * {startLogIndex}-{endLogIndex}-{version}-data)\n+   *\n+   * @param file file\n+   * @return version from file\n+   */\n+  private long getFileVersion(File file) {\n+    return Long.parseLong(file.getName().split(FILE_NAME_SEPARATOR)[2]);\n+  }\n+\n+  public void checkDeletePersistRaftLog() {\n+    // 1. check the log index offset list size\n+    try {\n+      lock.writeLock().lock();\n+      if (logIndexOffsetList.size() > maxRaftLogIndexSizeInMemory) {\n+        int compactIndex = logIndexOffsetList.size() - maxRaftLogIndexSizeInMemory;\n+        logIndexOffsetList.subList(0, compactIndex).clear();\n+        firstLogIndex += compactIndex;\n+      }\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+\n+    // 2. check the persist log file number\n+    while (logDataFileList.size() > maxNumberOfPersistRaftLogFiles) {\n+      deleteLogDataAndIndexFile(0);\n+    }\n+\n+    // 3. check the persist log index number\n+    while (!logDataFileList.isEmpty()) {\n+      File firstFile = logDataFileList.get(0);\n+      String[] splits = firstFile.getName().split(FILE_NAME_SEPARATOR);\n+      if (meta.getCommitLogIndex() - Long.parseLong(splits[1]) > maxPersistRaftLogNumberOnDisk) {\n+        deleteLogDataAndIndexFile(0);\n+      } else {\n+        return;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 951}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2NjMyNQ==", "bodyText": "Thank you for reminding me that this could happen. I'll fix it", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515566325", "createdAt": "2020-11-01T02:35:02Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -593,75 +815,385 @@ public void close() {\n   }\n \n   /**\n-   * adjust maxRemovedLogSize to the first log file\n+   * get file version from file The file name structure is as follows\uff1a\n+   * {startLogIndex}-{endLogIndex}-{version}-data)\n+   *\n+   * @param file file\n+   * @return version from file\n+   */\n+  private long getFileVersion(File file) {\n+    return Long.parseLong(file.getName().split(FILE_NAME_SEPARATOR)[2]);\n+  }\n+\n+  public void checkDeletePersistRaftLog() {\n+    // 1. check the log index offset list size\n+    try {\n+      lock.writeLock().lock();\n+      if (logIndexOffsetList.size() > maxRaftLogIndexSizeInMemory) {\n+        int compactIndex = logIndexOffsetList.size() - maxRaftLogIndexSizeInMemory;\n+        logIndexOffsetList.subList(0, compactIndex).clear();\n+        firstLogIndex += compactIndex;\n+      }\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+\n+    // 2. check the persist log file number\n+    while (logDataFileList.size() > maxNumberOfPersistRaftLogFiles) {\n+      deleteLogDataAndIndexFile(0);\n+    }\n+\n+    // 3. check the persist log index number\n+    while (!logDataFileList.isEmpty()) {\n+      File firstFile = logDataFileList.get(0);\n+      String[] splits = firstFile.getName().split(FILE_NAME_SEPARATOR);\n+      if (meta.getCommitLogIndex() - Long.parseLong(splits[1]) > maxPersistRaftLogNumberOnDisk) {\n+        deleteLogDataAndIndexFile(0);\n+      } else {\n+        return;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3NDU2OQ=="}, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 951}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjYzNjUxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0MDoyNVrOHrHkjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMzoyMzo1MFrOHrvEMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3NDg2Mg==", "bodyText": "As you have used logIndexOffsetList to record offset in putLog, I doubt whether it's necessary to maintain this buffer in putLog.Maybe You can generate index buffer in flushLogBuffer .", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514974862", "createdAt": "2020-10-30T09:40:25Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2NzYxMw==", "bodyText": "I designed it on purpose. If you set a temporary buffer, GC will occur. I think it is better to set a buffer that is not GC?", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515567613", "createdAt": "2020-11-01T02:53:46Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3NDg2Mg=="}, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTkzNw==", "bodyText": "OK~", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515621937", "createdAt": "2020-11-01T13:23:50Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3NDg2Mg=="}, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjY0NDczOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0Mjo0NlrOHrHpqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjoyNjozMlrOHr0kJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3NjE3MQ==", "bodyText": "I think we should enforce a limit on this method to avoid out ot memory when the range is too long.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514976171", "createdAt": "2020-10-30T09:42:46Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -593,75 +815,385 @@ public void close() {\n   }\n \n   /**\n-   * adjust maxRemovedLogSize to the first log file\n+   * get file version from file The file name structure is as follows\uff1a\n+   * {startLogIndex}-{endLogIndex}-{version}-data)\n+   *\n+   * @param file file\n+   * @return version from file\n+   */\n+  private long getFileVersion(File file) {\n+    return Long.parseLong(file.getName().split(FILE_NAME_SEPARATOR)[2]);\n+  }\n+\n+  public void checkDeletePersistRaftLog() {\n+    // 1. check the log index offset list size\n+    try {\n+      lock.writeLock().lock();\n+      if (logIndexOffsetList.size() > maxRaftLogIndexSizeInMemory) {\n+        int compactIndex = logIndexOffsetList.size() - maxRaftLogIndexSizeInMemory;\n+        logIndexOffsetList.subList(0, compactIndex).clear();\n+        firstLogIndex += compactIndex;\n+      }\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+\n+    // 2. check the persist log file number\n+    while (logDataFileList.size() > maxNumberOfPersistRaftLogFiles) {\n+      deleteLogDataAndIndexFile(0);\n+    }\n+\n+    // 3. check the persist log index number\n+    while (!logDataFileList.isEmpty()) {\n+      File firstFile = logDataFileList.get(0);\n+      String[] splits = firstFile.getName().split(FILE_NAME_SEPARATOR);\n+      if (meta.getCommitLogIndex() - Long.parseLong(splits[1]) > maxPersistRaftLogNumberOnDisk) {\n+        deleteLogDataAndIndexFile(0);\n+      } else {\n+        return;\n+      }\n+    }\n+  }\n+\n+  private void deleteLogDataAndIndexFile(int index) {\n+    File logDataFile = null;\n+    File logIndexFile = null;\n+    try {\n+      lock.writeLock().lock();\n+      logDataFile = logDataFileList.get(index);\n+      logIndexFile = logIndexFileList.get(index);\n+      Files.delete(logDataFile.toPath());\n+      Files.delete(logIndexFile.toPath());\n+      logDataFileList.remove(index);\n+      logIndexFileList.remove(index);\n+      logger.debug(\"delete date file={}, index file={}\", logDataFile.getAbsoluteFile(),\n+          logIndexFile.getAbsoluteFile());\n+    } catch (IOException e) {\n+      logger.error(\"delete file failed, index={}, data file={}, index file={}\", index,\n+          logDataFile == null ? null : logDataFile.getAbsoluteFile(),\n+          logIndexFile == null ? null : logIndexFile.getAbsoluteFile());\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n+  /**\n+   * The file name structure is as follows\uff1a {startLogIndex}-{endLogIndex}-{version}-data)\n+   *\n+   * @param file1 File to compare\n+   * @param file2 File to compare\n    */\n-  private void adjustNextThreshold() {\n-    if (!logFileList.isEmpty()) {\n-      maxRemovedLogSize = logFileList.get(0).length();\n+  private int comparePersistLogFileName(File file1, File file2) {\n+    String[] items1 = file1.getName().split(FILE_NAME_SEPARATOR);\n+    String[] items2 = file2.getName().split(FILE_NAME_SEPARATOR);\n+    if (items1.length != FILE_NAME_PART_LENGTH || items2.length != FILE_NAME_PART_LENGTH) {\n+      logger.error(\n+          \"file1={}, file2={} name should be in the following format: startLogIndex-endLogIndex-version-data\",\n+          file1.getAbsoluteFile(), file2.getAbsoluteFile());\n+    }\n+    long startLogIndex1 = Long.parseLong(items1[0]);\n+    long startLogIndex2 = Long.parseLong(items2[0]);\n+    int res = Long.compare(startLogIndex1, startLogIndex2);\n+    if (res == 0) {\n+      return Long.compare(Long.parseLong(items1[1]), Long.parseLong(items2[1]));\n     }\n+    return res;\n   }\n \n   /**\n-   * actually delete the data file which only contains removed data\n+   * @param startIndex the log start index\n+   * @param endIndex   the log end index\n+   * @return the raft log which index between [startIndex, endIndex] or empty if not found\n    */\n-  private void actuallyDeleteFile() {\n-    Iterator<File> logFileIterator = logFileList.iterator();\n-    while (logFileIterator.hasNext()) {\n-      File logFile = logFileIterator.next();\n-      if (logger.isDebugEnabled()) {\n-        logger.debug(\"Examining file for removal, file: {}, len: {}, removedLogSize: {}\", logFile\n-            , logFile.length(), removedLogSize);\n-      }\n-      if (logFile.length() > removedLogSize) {\n-        break;\n-      }\n-\n-      logger.info(\"Removing a log file {}, len: {}, removedLogSize: {}\", logFile,\n-          logFile.length(), removedLogSize);\n-      removedLogSize -= logFile.length();\n-      // if system down before delete, we can use this to delete file during recovery\n-      minAvailableVersion = getFileVersion(logFile);\n-      serializeMeta(meta);\n+  @Override\n+  public List<Log> getLogs(long startIndex, long endIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 1027}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMjAzOA==", "bodyText": "I add one parameter to limit the max number of logs per fetch", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515712038", "createdAt": "2020-11-02T02:26:32Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -593,75 +815,385 @@ public void close() {\n   }\n \n   /**\n-   * adjust maxRemovedLogSize to the first log file\n+   * get file version from file The file name structure is as follows\uff1a\n+   * {startLogIndex}-{endLogIndex}-{version}-data)\n+   *\n+   * @param file file\n+   * @return version from file\n+   */\n+  private long getFileVersion(File file) {\n+    return Long.parseLong(file.getName().split(FILE_NAME_SEPARATOR)[2]);\n+  }\n+\n+  public void checkDeletePersistRaftLog() {\n+    // 1. check the log index offset list size\n+    try {\n+      lock.writeLock().lock();\n+      if (logIndexOffsetList.size() > maxRaftLogIndexSizeInMemory) {\n+        int compactIndex = logIndexOffsetList.size() - maxRaftLogIndexSizeInMemory;\n+        logIndexOffsetList.subList(0, compactIndex).clear();\n+        firstLogIndex += compactIndex;\n+      }\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+\n+    // 2. check the persist log file number\n+    while (logDataFileList.size() > maxNumberOfPersistRaftLogFiles) {\n+      deleteLogDataAndIndexFile(0);\n+    }\n+\n+    // 3. check the persist log index number\n+    while (!logDataFileList.isEmpty()) {\n+      File firstFile = logDataFileList.get(0);\n+      String[] splits = firstFile.getName().split(FILE_NAME_SEPARATOR);\n+      if (meta.getCommitLogIndex() - Long.parseLong(splits[1]) > maxPersistRaftLogNumberOnDisk) {\n+        deleteLogDataAndIndexFile(0);\n+      } else {\n+        return;\n+      }\n+    }\n+  }\n+\n+  private void deleteLogDataAndIndexFile(int index) {\n+    File logDataFile = null;\n+    File logIndexFile = null;\n+    try {\n+      lock.writeLock().lock();\n+      logDataFile = logDataFileList.get(index);\n+      logIndexFile = logIndexFileList.get(index);\n+      Files.delete(logDataFile.toPath());\n+      Files.delete(logIndexFile.toPath());\n+      logDataFileList.remove(index);\n+      logIndexFileList.remove(index);\n+      logger.debug(\"delete date file={}, index file={}\", logDataFile.getAbsoluteFile(),\n+          logIndexFile.getAbsoluteFile());\n+    } catch (IOException e) {\n+      logger.error(\"delete file failed, index={}, data file={}, index file={}\", index,\n+          logDataFile == null ? null : logDataFile.getAbsoluteFile(),\n+          logIndexFile == null ? null : logIndexFile.getAbsoluteFile());\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n+  /**\n+   * The file name structure is as follows\uff1a {startLogIndex}-{endLogIndex}-{version}-data)\n+   *\n+   * @param file1 File to compare\n+   * @param file2 File to compare\n    */\n-  private void adjustNextThreshold() {\n-    if (!logFileList.isEmpty()) {\n-      maxRemovedLogSize = logFileList.get(0).length();\n+  private int comparePersistLogFileName(File file1, File file2) {\n+    String[] items1 = file1.getName().split(FILE_NAME_SEPARATOR);\n+    String[] items2 = file2.getName().split(FILE_NAME_SEPARATOR);\n+    if (items1.length != FILE_NAME_PART_LENGTH || items2.length != FILE_NAME_PART_LENGTH) {\n+      logger.error(\n+          \"file1={}, file2={} name should be in the following format: startLogIndex-endLogIndex-version-data\",\n+          file1.getAbsoluteFile(), file2.getAbsoluteFile());\n+    }\n+    long startLogIndex1 = Long.parseLong(items1[0]);\n+    long startLogIndex2 = Long.parseLong(items2[0]);\n+    int res = Long.compare(startLogIndex1, startLogIndex2);\n+    if (res == 0) {\n+      return Long.compare(Long.parseLong(items1[1]), Long.parseLong(items2[1]));\n     }\n+    return res;\n   }\n \n   /**\n-   * actually delete the data file which only contains removed data\n+   * @param startIndex the log start index\n+   * @param endIndex   the log end index\n+   * @return the raft log which index between [startIndex, endIndex] or empty if not found\n    */\n-  private void actuallyDeleteFile() {\n-    Iterator<File> logFileIterator = logFileList.iterator();\n-    while (logFileIterator.hasNext()) {\n-      File logFile = logFileIterator.next();\n-      if (logger.isDebugEnabled()) {\n-        logger.debug(\"Examining file for removal, file: {}, len: {}, removedLogSize: {}\", logFile\n-            , logFile.length(), removedLogSize);\n-      }\n-      if (logFile.length() > removedLogSize) {\n-        break;\n-      }\n-\n-      logger.info(\"Removing a log file {}, len: {}, removedLogSize: {}\", logFile,\n-          logFile.length(), removedLogSize);\n-      removedLogSize -= logFile.length();\n-      // if system down before delete, we can use this to delete file during recovery\n-      minAvailableVersion = getFileVersion(logFile);\n-      serializeMeta(meta);\n+  @Override\n+  public List<Log> getLogs(long startIndex, long endIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3NjE3MQ=="}, "originalCommit": {"oid": "30542c1d5231ec31a73b0a7728cd0b43a7eb9015"}, "originalPosition": 1027}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjY4MTM2OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo1Mjo1MlrOHrH_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDo0NzowOVrOHrk55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MTg1MA==", "bodyText": "As currently the  default maxSize of each data file is 1G,it's seems a Integer is able to record the offset.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r514981850", "createdAt": "2020-10-30T09:52:52Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx\n+   */\n+  private static final int FILE_NAME_PART_LENGTH = 4;\n \n-  private final int flushRaftLogThreshold = ClusterDescriptor.getInstance().getConfig()\n-      .getFlushRaftLogThreshold();\n+  private int maxRaftLogIndexSizeInMemory = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogIndexSizeInMemory();\n \n-  private int bufferedLogNum = 0;\n+  private int maxRaftLogPersistDataSizePerFile = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogPersistDataSizePerFile();\n \n+  private int maxNumberOfPersistRaftLogFiles = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxNumberOfPersistRaftLogFiles();\n+\n+  private int maxPersistRaftLogNumberOnDisk = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxPersistRaftLogNumberOnDisk();\n+\n+  private ScheduledExecutorService persistLogDeleteExecutorService;\n+  private ScheduledFuture<?> persistLogDeleteLogFuture;\n+\n+  /**\n+   * indicate the first raft log's index of {@link SyncLogDequeSerializer#logIndexOffsetList}, for\n+   * example, if firstLogIndex=1000, then the offset of the log index 1000 equals\n+   * logIndexOffsetList[0], the offset of the log index 1001 equals logIndexOffsetList[1], and so\n+   * on.\n+   */\n+  private long firstLogIndex = 0;\n+\n+  /**\n+   * the offset of the log's index, for example, the first value is the offset of index\n+   * ${firstLogIndex}, the second value is the offset of index ${firstLogIndex+1}\n+   */\n+  private List<Long> logIndexOffsetList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1ODkwMw==", "bodyText": "sure, but the parameter of the max size of the log data file is left to the user to set, so if the user config larger than an integer, it would occur errors, or we could limit the range of user configuration for the maxSize parameter.", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515058903", "createdAt": "2020-10-30T12:20:56Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx\n+   */\n+  private static final int FILE_NAME_PART_LENGTH = 4;\n \n-  private final int flushRaftLogThreshold = ClusterDescriptor.getInstance().getConfig()\n-      .getFlushRaftLogThreshold();\n+  private int maxRaftLogIndexSizeInMemory = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogIndexSizeInMemory();\n \n-  private int bufferedLogNum = 0;\n+  private int maxRaftLogPersistDataSizePerFile = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogPersistDataSizePerFile();\n \n+  private int maxNumberOfPersistRaftLogFiles = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxNumberOfPersistRaftLogFiles();\n+\n+  private int maxPersistRaftLogNumberOnDisk = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxPersistRaftLogNumberOnDisk();\n+\n+  private ScheduledExecutorService persistLogDeleteExecutorService;\n+  private ScheduledFuture<?> persistLogDeleteLogFuture;\n+\n+  /**\n+   * indicate the first raft log's index of {@link SyncLogDequeSerializer#logIndexOffsetList}, for\n+   * example, if firstLogIndex=1000, then the offset of the log index 1000 equals\n+   * logIndexOffsetList[0], the offset of the log index 1001 equals logIndexOffsetList[1], and so\n+   * on.\n+   */\n+  private long firstLogIndex = 0;\n+\n+  /**\n+   * the offset of the log's index, for example, the first value is the offset of index\n+   * ${firstLogIndex}, the second value is the offset of index ${firstLogIndex+1}\n+   */\n+  private List<Long> logIndexOffsetList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MTg1MA=="}, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NTQ2Mw==", "bodyText": "OK, Just let it go~Long is OK for me ~", "url": "https://github.com/apache/iotdb/pull/1865#discussion_r515455463", "createdAt": "2020-10-31T04:47:09Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializer.java", "diffHunk": "@@ -50,82 +53,140 @@\n import org.apache.iotdb.db.engine.version.SimpleFileVersionController;\n import org.apache.iotdb.db.engine.version.VersionController;\n import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.utils.BytesUtils;\n+import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class SyncLogDequeSerializer implements StableEntryManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(SyncLogDequeSerializer.class);\n-  private static final String LOG_FILE_PREFIX = \".data\";\n+  private static final String LOG_DATA_FILE_SUFFIX = \"data\";\n+  private static final String LOG_INDEX_FILE_SUFFIX = \"idx\";\n+\n+  /**\n+   * the log data files\n+   */\n+  private List<File> logDataFileList;\n+\n+  /**\n+   * the log index files\n+   */\n+  private List<File> logIndexFileList;\n \n-  List<File> logFileList;\n   private LogParser parser = LogParser.getINSTANCE();\n   private File metaFile;\n-  private FileOutputStream currentLogOutputStream;\n-  private Deque<Integer> logSizeDeque = new ArrayDeque<>();\n+  private FileOutputStream currentLogDataOutputStream;\n+  private FileOutputStream currentLogIndexOutputStream;\n   private LogManagerMeta meta;\n   private HardState state;\n-  // mark first log position\n-  private long firstLogPosition = 0;\n-  // removed log size\n-  private long removedLogSize = 0;\n-  // when the removedLogSize larger than this, we actually delete logs\n-  private long maxRemovedLogSize = ClusterDescriptor.getInstance().getConfig()\n-      .getMaxUnsnapshotLogSize();\n-  // min version of available log\n+\n+  /**\n+   * min version of available log\n+   */\n   private long minAvailableVersion = 0;\n-  // max version of available log\n+\n+  /**\n+   * max version of available log\n+   */\n   private long maxAvailableVersion = Long.MAX_VALUE;\n-  // log dir\n+\n   private String logDir;\n-  // version controller\n+\n   private VersionController versionController;\n \n-  private ByteBuffer logBuffer = ByteBuffer\n+  private ByteBuffer logDataBuffer = ByteBuffer\n       .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+  private ByteBuffer logIndexBuffer = ByteBuffer\n+      .allocate(ClusterDescriptor.getInstance().getConfig().getRaftLogBufferSize());\n+\n+  private long offsetOfTheCurrentLogDataOutputStream = 0;\n+\n+  /**\n+   * file name pattern:\n+   * <p>\n+   * for log data file: ${startTime}-${Long.MAX_VALUE}-{version}-data\n+   * <p>\n+   * for log index file: ${startTime}-${Long.MAX_VALUE}-{version}-idx\n+   */\n+  private static final int FILE_NAME_PART_LENGTH = 4;\n \n-  private final int flushRaftLogThreshold = ClusterDescriptor.getInstance().getConfig()\n-      .getFlushRaftLogThreshold();\n+  private int maxRaftLogIndexSizeInMemory = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogIndexSizeInMemory();\n \n-  private int bufferedLogNum = 0;\n+  private int maxRaftLogPersistDataSizePerFile = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxRaftLogPersistDataSizePerFile();\n \n+  private int maxNumberOfPersistRaftLogFiles = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxNumberOfPersistRaftLogFiles();\n+\n+  private int maxPersistRaftLogNumberOnDisk = ClusterDescriptor.getInstance().getConfig()\n+      .getMaxPersistRaftLogNumberOnDisk();\n+\n+  private ScheduledExecutorService persistLogDeleteExecutorService;\n+  private ScheduledFuture<?> persistLogDeleteLogFuture;\n+\n+  /**\n+   * indicate the first raft log's index of {@link SyncLogDequeSerializer#logIndexOffsetList}, for\n+   * example, if firstLogIndex=1000, then the offset of the log index 1000 equals\n+   * logIndexOffsetList[0], the offset of the log index 1001 equals logIndexOffsetList[1], and so\n+   * on.\n+   */\n+  private long firstLogIndex = 0;\n+\n+  /**\n+   * the offset of the log's index, for example, the first value is the offset of index\n+   * ${firstLogIndex}, the second value is the offset of index ${firstLogIndex+1}\n+   */\n+  private List<Long> logIndexOffsetList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MTg1MA=="}, "originalCommit": {"oid": "9eca1bc083d49ada8ed0cbaf877ece50ad10ff90"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 657, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}