{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExOTcwNDA0", "number": 1898, "title": "[IOTDB-968] Support time predicate in select last", "bodyText": "JIRA issue: https://issues.apache.org/jira/browse/IOTDB-968", "createdAt": "2020-10-29T02:40:47Z", "url": "https://github.com/apache/iotdb/pull/1898", "merged": true, "mergeCommit": {"oid": "bfd5af63ccd1b8d6876a5b6af6583014a1f0df26"}, "closed": true, "closedAt": "2020-10-30T05:33:37Z", "author": {"login": "wshao08"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXI5axgH2gAyNTExOTcwNDA0OjhjM2NlOWZjOTRhZmI1MWQyMzA2Y2I0MDc0YTcyNDkzNzYyZjIxYWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXd1jVAFqTUyMDM0NzgyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c3ce9fc94afb51d2306cb4074a72493762f21aa", "author": {"user": {"login": "wshao08", "name": null}}, "url": "https://github.com/apache/iotdb/commit/8c3ce9fc94afb51d2306cb4074a72493762f21aa", "committedDate": "2020-10-29T02:39:27Z", "message": "Support time filter for last query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dbbf1829033c30097a23742ab5bae201f0ade9e", "author": {"user": {"login": "wshao08", "name": null}}, "url": "https://github.com/apache/iotdb/commit/8dbbf1829033c30097a23742ab5bae201f0ade9e", "committedDate": "2020-10-29T03:05:09Z", "message": "Add last with filter test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7cb616c65acaad3aa929a972bdba18674b3ef1", "author": {"user": {"login": "wshao08", "name": null}}, "url": "https://github.com/apache/iotdb/commit/3d7cb616c65acaad3aa929a972bdba18674b3ef1", "committedDate": "2020-10-29T04:54:40Z", "message": "Fix test issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d4ef0fa34451057de106c4b2607b956d503b78", "author": {"user": {"login": "wshao08", "name": null}}, "url": "https://github.com/apache/iotdb/commit/a0d4ef0fa34451057de106c4b2607b956d503b78", "committedDate": "2020-10-29T07:08:24Z", "message": "Refuse to accept value filter in FROM clause"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mzk0OTc2", "url": "https://github.com/apache/iotdb/pull/1898#pullrequestreview-519394976", "createdAt": "2020-10-29T07:33:29Z", "commit": {"oid": "a0d4ef0fa34451057de106c4b2607b956d503b78"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozMzoyOVrOHqPWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNjo0MVrOHqPcEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1Mzc3NA==", "bodyText": "if the filter is null, shoudn't we return true?", "url": "https://github.com/apache/iotdb/pull/1898#discussion_r514053774", "createdAt": "2020-10-29T07:33:29Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/LastQueryExecutor.java", "diffHunk": "@@ -127,103 +127,64 @@ protected TimeValuePair calculateLastPairForOneSeries(\n    * @param context query context\n    * @return TimeValuePair\n    */\n-  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n   public static TimeValuePair calculateLastPairForOneSeriesLocally(\n-      PartialPath seriesPath, TSDataType tsDataType, QueryContext context, Set<String> deviceMeasurements)\n+      PartialPath seriesPath, TSDataType tsDataType, QueryContext context,\n+      IExpression expression, Set<String> deviceMeasurements)\n       throws IOException, QueryProcessException, StorageEngineException {\n \n     // Retrieve last value from MNode\n     MeasurementMNode node = null;\n+    Filter filter = null;\n     if (lastCacheEnabled) {\n+      if (expression != null) {\n+        filter = ((GlobalTimeExpression) expression).getFilter();\n+      }\n       try {\n         node = (MeasurementMNode) IoTDB.metaManager.getNodeByPath(seriesPath);\n       } catch (MetadataException e) {\n         TimeValuePair timeValuePair = IoTDB.metaManager.getLastCache(seriesPath);\n-        if (timeValuePair != null) {\n+        if (timeValuePair != null && satisfyFilter(filter, timeValuePair)) {\n           return timeValuePair;\n         }\n       }\n \n       if (node != null && node.getCachedLast() != null) {\n-        return node.getCachedLast();\n+        TimeValuePair timeValuePair =  node.getCachedLast();\n+        if (timeValuePair != null && satisfyFilter(filter, timeValuePair)) {\n+          return timeValuePair;\n+        }\n       }\n     }\n \n-    return calculateLastPairByScanningTsFiles(seriesPath, tsDataType, context, deviceMeasurements, node);\n+    return calculateLastPairByScanningTsFiles(\n+        seriesPath, tsDataType, context, filter, deviceMeasurements, node);\n   }\n \n   private static TimeValuePair calculateLastPairByScanningTsFiles(\n-          PartialPath seriesPath, TSDataType tsDataType, QueryContext context, Set<String> deviceMeasurements,\n-          MeasurementMNode node) throws QueryProcessException, StorageEngineException, IOException {\n+          PartialPath seriesPath, TSDataType tsDataType, QueryContext context,\n+          Filter filter, Set<String> deviceMeasurements, MeasurementMNode node)\n+      throws QueryProcessException, StorageEngineException, IOException {\n \n     QueryDataSource dataSource =\n-        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, null);\n-\n-    List<TsFileResource> seqFileResources = dataSource.getSeqResources();\n-    List<TsFileResource> unseqFileResources = dataSource.getUnseqResources();\n-\n-    TimeValuePair resultPair = new TimeValuePair(Long.MIN_VALUE, null);\n-\n-    if (!seqFileResources.isEmpty()) {\n-      for (int i = seqFileResources.size() - 1; i >= 0; i--) {\n-        TimeseriesMetadata timeseriesMetadata = FileLoaderUtils.loadTimeSeriesMetadata(\n-            seqFileResources.get(i), seriesPath, context, null, deviceMeasurements);\n-        if (timeseriesMetadata != null) {\n-          if (!timeseriesMetadata.isModified()) {\n-            Statistics timeseriesMetadataStats = timeseriesMetadata.getStatistics();\n-            resultPair = constructLastPair(\n-                timeseriesMetadataStats.getEndTime(),\n-                timeseriesMetadataStats.getLastValue(),\n-                tsDataType);\n-            break;\n-          } else {\n-            List<ChunkMetadata> chunkMetadataList = timeseriesMetadata.loadChunkMetadataList();\n-            if (!chunkMetadataList.isEmpty()) {\n-              ChunkMetadata lastChunkMetaData = chunkMetadataList.get(chunkMetadataList.size() - 1);\n-              Statistics chunkStatistics = lastChunkMetaData.getStatistics();\n-              resultPair =\n-                  constructLastPair(\n-                      chunkStatistics.getEndTime(), chunkStatistics.getLastValue(), tsDataType);\n-              break;\n-            }\n-          }\n-        }\n-      }\n-    }\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, filter);\n \n-    long version = 0;\n-    for (TsFileResource resource : unseqFileResources) {\n-      if (resource.getEndTime(seriesPath.getDevice()) < resultPair.getTimestamp()) {\n-        continue;\n-      }\n-      TimeseriesMetadata timeseriesMetadata =\n-          FileLoaderUtils\n-              .loadTimeSeriesMetadata(resource, seriesPath, context, null, deviceMeasurements);\n-      if (timeseriesMetadata != null) {\n-        for (ChunkMetadata chunkMetaData : timeseriesMetadata.loadChunkMetadataList()) {\n-          if (chunkMetaData.getEndTime() > resultPair.getTimestamp()\n-              || (chunkMetaData.getEndTime() == resultPair.getTimestamp()\n-              && chunkMetaData.getVersion() > version)) {\n-            Statistics chunkStatistics = chunkMetaData.getStatistics();\n-            resultPair =\n-                constructLastPair(\n-                    chunkStatistics.getEndTime(), chunkStatistics.getLastValue(), tsDataType);\n-            version = chunkMetaData.getVersion();\n-          }\n-        }\n-      }\n-    }\n+    LastPointReader lastReader = new LastPointReader(\n+        seriesPath, tsDataType, deviceMeasurements, context, dataSource, Long.MAX_VALUE, filter);\n+    TimeValuePair resultPair = lastReader.readLastPoint();\n \n-    // Update cached last value with low priority\n-    if (lastCacheEnabled) {\n-      IoTDB.metaManager.updateLastCache(seriesPath,\n-              resultPair, false, Long.MIN_VALUE, node);\n+    // Update cached last value with low priority unless \"FROM\" expression exists\n+    if (lastCacheEnabled && filter == null) {\n+      IoTDB.metaManager.updateLastCache(\n+          seriesPath, resultPair, false, Long.MIN_VALUE, node);\n     }\n     return resultPair;\n   }\n \n-  private static TimeValuePair constructLastPair(long timestamp, Object value,\n-                                                 TSDataType dataType) {\n-    return new TimeValuePair(timestamp, TsPrimitiveType.getByType(dataType, value));\n+  private static boolean satisfyFilter(Filter filter, TimeValuePair tvPair) {\n+    if (filter != null &&\n+        filter.satisfy(tvPair.getTimestamp(), tvPair.getValue().getValue())) {\n+      return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4ef0fa34451057de106c4b2607b956d503b78"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTE4NA==", "bodyText": "Same as before, if the filter is null, shoudn't we return true?", "url": "https://github.com/apache/iotdb/pull/1898#discussion_r514055184", "createdAt": "2020-10-29T07:36:41Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LastPointReader.java", "diffHunk": "@@ -216,6 +216,9 @@ private boolean shouldUpdate(long time, long version, long newTime, long newVers\n   }\n \n   private boolean endtimeContainedByTimeFilter(Statistics statistics) {\n+    if (timeFilter == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4ef0fa34451057de106c4b2607b956d503b78"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beef6909e2d3f9e93d16a6d45ce9abba4d53a81f", "author": {"user": {"login": "wshao08", "name": null}}, "url": "https://github.com/apache/iotdb/commit/beef6909e2d3f9e93d16a6d45ce9abba4d53a81f", "committedDate": "2020-10-29T08:19:09Z", "message": "Fix code bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56410f87c90cf22b5997250529ea018d170e01fa", "author": {"user": {"login": "wshao08", "name": null}}, "url": "https://github.com/apache/iotdb/commit/56410f87c90cf22b5997250529ea018d170e01fa", "committedDate": "2020-10-29T23:52:29Z", "message": "Update docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMjg1NTg2", "url": "https://github.com/apache/iotdb/pull/1898#pullrequestreview-520285586", "createdAt": "2020-10-30T01:05:51Z", "commit": {"oid": "56410f87c90cf22b5997250529ea018d170e01fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMzQ3ODIw", "url": "https://github.com/apache/iotdb/pull/1898#pullrequestreview-520347820", "createdAt": "2020-10-30T03:03:14Z", "commit": {"oid": "56410f87c90cf22b5997250529ea018d170e01fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3774, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}