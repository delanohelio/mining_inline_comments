{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDk3NTM4", "number": 758, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDowODoxOFrODcMD4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjo0OVrODcOueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg0MzIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDowODoxOFrOFkGslw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDowODoxOFrOFkGslw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwMjc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SeriesDataRandomReader implements IDataRandomReader {\n          \n          \n            \n            public class EngineSeriesReader implements IEngineSeriesReader {", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373402775", "createdAt": "2020-01-31T10:08:18Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -46,15 +47,18 @@\n import org.apache.iotdb.tsfile.read.controller.ChunkLoaderImpl;\n import org.apache.iotdb.tsfile.read.controller.IChunkLoader;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.filter.basic.UnaryFilter;\n import org.apache.iotdb.tsfile.read.reader.IChunkReader;\n import org.apache.iotdb.tsfile.read.reader.IPageReader;\n import org.apache.iotdb.tsfile.read.reader.chunk.ChunkReader;\n \n-public abstract class AbstractSeriesReader {\n+public class SeriesDataRandomReader implements IDataRandomReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1275014c293814a300695fe98c2025d141f26d4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg2NDAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxNTozOFrOFkG4yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxNTozOFrOFkG4yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNTg5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return !isChunkOverlapped() && satisfyFilter(chunkStatistics);\n          \n          \n            \n                return !isChunkOverlapped() && satisfyTimeFilter(chunkStatistics);", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373405899", "createdAt": "2020-01-31T10:15:38Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -80,20 +84,44 @@\n   private long currentPageEndTime = Long.MAX_VALUE;\n \n \n-  public AbstractSeriesReader(Path seriesPath, TSDataType dataType, QueryContext context,\n-      List<TsFileResource> seqFiles, List<TsFileResource> unseqFiles) {\n+  public SeriesDataRandomReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n     this.seriesPath = seriesPath;\n     this.dataType = dataType;\n     this.context = context;\n-    this.seqFileResource = seqFiles;\n-    this.unseqFileResource = sortUnSeqFileResources(unseqFiles);\n+    this.seqFileResource = dataSource.getSeqResources();\n+    this.unseqFileResource = sortUnSeqFileResources(dataSource.getUnseqResources());\n+    this.timeFilter = timeFilter;\n+    this.valueFilter = valueFilter;\n   }\n \n-  protected abstract Filter getFilter();\n+  public SeriesDataRandomReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      List<TsFileResource> seqFileResource, List<TsFileResource> unseqFileResource,\n+      Filter timeFilter, Filter valueFilter) {\n+    this.seriesPath = seriesPath;\n+    this.dataType = dataType;\n+    this.context = context;\n+    this.seqFileResource = seqFileResource;\n+    this.unseqFileResource = sortUnSeqFileResources(unseqFileResource);\n+    this.timeFilter = timeFilter;\n+    this.valueFilter = valueFilter;\n+  }\n \n   protected boolean satisfyFilter(Statistics statistics) {\n-    return getFilter() == null\n-        || getFilter().containStartEndTime(statistics.getStartTime(), statistics.getEndTime());\n+    return timeFilter == null\n+        || timeFilter.containStartEndTime(statistics.getStartTime(), statistics.getEndTime());\n+  }\n+\n+  @Override\n+  public boolean canUseCurrentChunkStatistics() {\n+    Statistics chunkStatistics = currentChunkStatistics();\n+    return !isChunkOverlapped() && satisfyFilter(chunkStatistics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1275014c293814a300695fe98c2025d141f26d4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg2NTUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxNjowOFrOFkG5qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoxMjo0NlrOFkK8GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNjEyMg==", "bodyText": "add javadoc, only be used for aggregate without value filter", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373406122", "createdAt": "2020-01-31T10:16:08Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -80,20 +84,44 @@\n   private long currentPageEndTime = Long.MAX_VALUE;\n \n \n-  public AbstractSeriesReader(Path seriesPath, TSDataType dataType, QueryContext context,\n-      List<TsFileResource> seqFiles, List<TsFileResource> unseqFiles) {\n+  public SeriesDataRandomReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n     this.seriesPath = seriesPath;\n     this.dataType = dataType;\n     this.context = context;\n-    this.seqFileResource = seqFiles;\n-    this.unseqFileResource = sortUnSeqFileResources(unseqFiles);\n+    this.seqFileResource = dataSource.getSeqResources();\n+    this.unseqFileResource = sortUnSeqFileResources(dataSource.getUnseqResources());\n+    this.timeFilter = timeFilter;\n+    this.valueFilter = valueFilter;\n   }\n \n-  protected abstract Filter getFilter();\n+  public SeriesDataRandomReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      List<TsFileResource> seqFileResource, List<TsFileResource> unseqFileResource,\n+      Filter timeFilter, Filter valueFilter) {\n+    this.seriesPath = seriesPath;\n+    this.dataType = dataType;\n+    this.context = context;\n+    this.seqFileResource = seqFileResource;\n+    this.unseqFileResource = sortUnSeqFileResources(unseqFileResource);\n+    this.timeFilter = timeFilter;\n+    this.valueFilter = valueFilter;\n+  }\n \n   protected boolean satisfyFilter(Statistics statistics) {\n-    return getFilter() == null\n-        || getFilter().containStartEndTime(statistics.getStartTime(), statistics.getEndTime());\n+    return timeFilter == null\n+        || timeFilter.containStartEndTime(statistics.getStartTime(), statistics.getEndTime());\n+  }\n+\n+  @Override\n+  public boolean canUseCurrentChunkStatistics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1275014c293814a300695fe98c2025d141f26d4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MjI4MQ==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373472281", "createdAt": "2020-01-31T13:12:46Z", "author": {"login": "liutaohua"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -80,20 +84,44 @@\n   private long currentPageEndTime = Long.MAX_VALUE;\n \n \n-  public AbstractSeriesReader(Path seriesPath, TSDataType dataType, QueryContext context,\n-      List<TsFileResource> seqFiles, List<TsFileResource> unseqFiles) {\n+  public SeriesDataRandomReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n     this.seriesPath = seriesPath;\n     this.dataType = dataType;\n     this.context = context;\n-    this.seqFileResource = seqFiles;\n-    this.unseqFileResource = sortUnSeqFileResources(unseqFiles);\n+    this.seqFileResource = dataSource.getSeqResources();\n+    this.unseqFileResource = sortUnSeqFileResources(dataSource.getUnseqResources());\n+    this.timeFilter = timeFilter;\n+    this.valueFilter = valueFilter;\n   }\n \n-  protected abstract Filter getFilter();\n+  public SeriesDataRandomReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      List<TsFileResource> seqFileResource, List<TsFileResource> unseqFileResource,\n+      Filter timeFilter, Filter valueFilter) {\n+    this.seriesPath = seriesPath;\n+    this.dataType = dataType;\n+    this.context = context;\n+    this.seqFileResource = seqFileResource;\n+    this.unseqFileResource = sortUnSeqFileResources(unseqFileResource);\n+    this.timeFilter = timeFilter;\n+    this.valueFilter = valueFilter;\n+  }\n \n   protected boolean satisfyFilter(Statistics statistics) {\n-    return getFilter() == null\n-        || getFilter().containStartEndTime(statistics.getStartTime(), statistics.getEndTime());\n+    return timeFilter == null\n+        || timeFilter.containStartEndTime(statistics.getStartTime(), statistics.getEndTime());\n+  }\n+\n+  @Override\n+  public boolean canUseCurrentChunkStatistics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNjEyMg=="}, "originalCommit": {"oid": "d1275014c293814a300695fe98c2025d141f26d4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg3NDU0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/engine/merge/MergeTaskTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxOTozM1rOFkG_Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxOTozM1rOFkG_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNzU3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.apache.iotdb.db.query.reader.seriesRelated.SeriesDataBatchReader;\n          \n          \n            \n            import org.apache.iotdb.db.query.reader.seriesRelated.SeriesRawDataReader;", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373407574", "createdAt": "2020-01-31T10:19:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/merge/MergeTaskTest.java", "diffHunk": "@@ -36,7 +36,7 @@\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.exception.path.PathException;\n import org.apache.iotdb.db.query.context.QueryContext;\n-import org.apache.iotdb.db.query.reader.seriesRelated.RawDataReaderWithoutValueFilter;\n+import org.apache.iotdb.db.query.reader.seriesRelated.SeriesDataBatchReader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1275014c293814a300695fe98c2025d141f26d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3ODIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjowNlrOFkKyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjowNlrOFkKyDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTcxMA==", "bodyText": "SeriesPointReader", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373469710", "createdAt": "2020-01-31T13:06:06Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -419,4 +490,148 @@ public void close() throws IOException {\n       openedChunkLoader.close();\n     }\n   }\n+\n+  public IPointReader getIPointReader() {\n+    return new Ite();\n+  }\n+\n+  public IBatchReader getIBatchReader() {\n+    return new BatchIte();\n+  }\n+\n+  private class BatchIte implements IBatchReader {\n+\n+    private BatchData batchData;\n+    private boolean hasCachedBatchData = false;\n+\n+    /**\n+     * This method overrides the AbstractDataReader.hasNextOverlappedPage for pause reads, to\n+     * achieve a continuous read\n+     */\n+    @Override\n+    public boolean hasNextBatch() throws IOException {\n+\n+      if (hasCachedBatchData) {\n+        return true;\n+      }\n+\n+      while (hasNextChunk()) {\n+        while (hasNextPage()) {\n+          if (!isPageOverlapped()) {\n+            batchData = nextPage();\n+            hasCachedBatchData = true;\n+            return true;\n+          }\n+          while (hasNextOverlappedPage()) {\n+            batchData = nextOverlappedPage();\n+            hasCachedBatchData = true;\n+            return true;\n+          }\n+        }\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public BatchData nextBatch() throws IOException {\n+      if (hasCachedBatchData || hasNextBatch()) {\n+        hasCachedBatchData = false;\n+        return batchData;\n+      }\n+      throw new IOException(\"no next batch\");\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+    }\n+  }\n+\n+  private class Ite implements IPointReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9330b12cca1b736bb1c592fbfe6230605638a3"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3ODgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjoyNVrOFkKyeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjoyNVrOFkKyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTgxNw==", "bodyText": "SeriesBatchReader", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373469817", "createdAt": "2020-01-31T13:06:25Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -419,4 +490,148 @@ public void close() throws IOException {\n       openedChunkLoader.close();\n     }\n   }\n+\n+  public IPointReader getIPointReader() {\n+    return new Ite();\n+  }\n+\n+  public IBatchReader getIBatchReader() {\n+    return new BatchIte();\n+  }\n+\n+  private class BatchIte implements IBatchReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9330b12cca1b736bb1c592fbfe6230605638a3"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3OTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjozOFrOFkKy3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjozOFrOFkKy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public IPointReader getIPointReader() {\n          \n          \n            \n              public IPointReader getPointReader() {", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373469917", "createdAt": "2020-01-31T13:06:38Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -419,4 +490,148 @@ public void close() throws IOException {\n       openedChunkLoader.close();\n     }\n   }\n+\n+  public IPointReader getIPointReader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9330b12cca1b736bb1c592fbfe6230605638a3"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3OTkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjo0OVrOFkKzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjo0OVrOFkKzIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTk4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public IBatchReader getIBatchReader() {\n          \n          \n            \n              public IBatchReader getBatchReader() {", "url": "https://github.com/apache/iotdb/pull/758#discussion_r373469986", "createdAt": "2020-01-31T13:06:49Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/SeriesDataRandomReader.java", "diffHunk": "@@ -419,4 +490,148 @@ public void close() throws IOException {\n       openedChunkLoader.close();\n     }\n   }\n+\n+  public IPointReader getIPointReader() {\n+    return new Ite();\n+  }\n+\n+  public IBatchReader getIBatchReader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9330b12cca1b736bb1c592fbfe6230605638a3"}, "originalPosition": 199}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 357, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}