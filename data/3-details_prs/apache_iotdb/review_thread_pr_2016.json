{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDEwNTk3", "number": 2016, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo0OTo0NlrOE4cmKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowMDo0MlrOE4ct0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI0MjM1OnYy", "diffSide": "RIGHT", "path": "grafana/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo0OTo0NlrOHyXnYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo0OTo0NlrOHyXnYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3Nzc2MA==", "bodyText": "Hi, what's this for?\nI removed this and the test is also passed...", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r522577760", "createdAt": "2020-11-13T02:49:46Z", "author": {"login": "qiaojialin"}, "path": "grafana/pom.xml", "diffHunk": "@@ -85,6 +85,12 @@\n             <version>${spring-boot.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>RELEASE</version>\n+            <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI0NTQ2OnYy", "diffSide": "RIGHT", "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/controller/DatabaseConnectController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo1MTozNlrOHyXpRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo1MTozNlrOHyXpRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODI0Nw==", "bodyText": "this looks reasonable, is this a bug before?", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r522578247", "createdAt": "2020-11-13T02:51:36Z", "author": {"login": "qiaojialin"}, "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/controller/DatabaseConnectController.java", "diffHunk": "@@ -165,7 +165,7 @@ private void setJsonTable(JsonObject obj, String target,\n     for (TimeValues tv : timeValues) {\n       JsonArray value = new JsonArray();\n       value.add(tv.getTime());\n-      values.add(GSON.toJsonTree(tv.getValue()));\n+      value.add(GSON.toJsonTree(tv.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI0OTIxOnYy", "diffSide": "RIGHT", "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo1Mzo0NFrOHyXrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjozODowMVrOH394mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ==", "bodyText": "interval?", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r522578801", "createdAt": "2020-11-13T02:53:44Z", "author": {"login": "qiaojialin"}, "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImpl.java", "diffHunk": "@@ -133,31 +133,44 @@ public static void setTimestampRadioX(String timestampPrecision) {\n   }\n \n   public List<TimeValues> querySeriesInternal(String s, Pair<ZonedDateTime, ZonedDateTime> timeRange, String function) {\n-      Long from = zonedCovertToLong(timeRange.left);\n+    Long from = zonedCovertToLong(timeRange.left);\n     Long to = zonedCovertToLong(timeRange.right);\n     final long hours = Duration.between(timeRange.left, timeRange.right).toHours();\n+\n     String sql = String.format(\"SELECT %s FROM root.%s WHERE time > %d and time < %d\",\n         s.substring(s.lastIndexOf('.') + 1), s.substring(0, s.lastIndexOf('.')),\n         from * timestampRadioX, to * timestampRadioX);\n     String columnName = \"root.\" + s;\n-    if (isDownSampling && (hours > 1)) {\n-      if (hours < 30 * 24 && hours > 24) {\n-        interval = \"1h\";\n-      } else if (hours > 30 * 24) {\n-        interval = \"1d\";\n-      }\n+\n+    String internalLocal = getInternal(hours);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MDIwMg==", "bodyText": "The value of internal is global in the past version", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r525870202", "createdAt": "2020-11-18T07:41:41Z", "author": {"login": "w169q169"}, "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImpl.java", "diffHunk": "@@ -133,31 +133,44 @@ public static void setTimestampRadioX(String timestampPrecision) {\n   }\n \n   public List<TimeValues> querySeriesInternal(String s, Pair<ZonedDateTime, ZonedDateTime> timeRange, String function) {\n-      Long from = zonedCovertToLong(timeRange.left);\n+    Long from = zonedCovertToLong(timeRange.left);\n     Long to = zonedCovertToLong(timeRange.right);\n     final long hours = Duration.between(timeRange.left, timeRange.right).toHours();\n+\n     String sql = String.format(\"SELECT %s FROM root.%s WHERE time > %d and time < %d\",\n         s.substring(s.lastIndexOf('.') + 1), s.substring(0, s.lastIndexOf('.')),\n         from * timestampRadioX, to * timestampRadioX);\n     String columnName = \"root.\" + s;\n-    if (isDownSampling && (hours > 1)) {\n-      if (hours < 30 * 24 && hours > 24) {\n-        interval = \"1h\";\n-      } else if (hours > 30 * 24) {\n-        interval = \"1d\";\n-      }\n+\n+    String internalLocal = getInternal(hours);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ=="}, "originalCommit": {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwNDIwNw==", "bodyText": "should the internal be interval?\nInterval means a time range, do you mean  an internal interval...?", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r527704207", "createdAt": "2020-11-20T13:53:02Z", "author": {"login": "qiaojialin"}, "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImpl.java", "diffHunk": "@@ -133,31 +133,44 @@ public static void setTimestampRadioX(String timestampPrecision) {\n   }\n \n   public List<TimeValues> querySeriesInternal(String s, Pair<ZonedDateTime, ZonedDateTime> timeRange, String function) {\n-      Long from = zonedCovertToLong(timeRange.left);\n+    Long from = zonedCovertToLong(timeRange.left);\n     Long to = zonedCovertToLong(timeRange.right);\n     final long hours = Duration.between(timeRange.left, timeRange.right).toHours();\n+\n     String sql = String.format(\"SELECT %s FROM root.%s WHERE time > %d and time < %d\",\n         s.substring(s.lastIndexOf('.') + 1), s.substring(0, s.lastIndexOf('.')),\n         from * timestampRadioX, to * timestampRadioX);\n     String columnName = \"root.\" + s;\n-    if (isDownSampling && (hours > 1)) {\n-      if (hours < 30 * 24 && hours > 24) {\n-        interval = \"1h\";\n-      } else if (hours > 30 * 24) {\n-        interval = \"1d\";\n-      }\n+\n+    String internalLocal = getInternal(hours);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ=="}, "originalCommit": {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0NzY0MA==", "bodyText": "already fixed.", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r528447640", "createdAt": "2020-11-23T02:38:01Z", "author": {"login": "w169q169"}, "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImpl.java", "diffHunk": "@@ -133,31 +133,44 @@ public static void setTimestampRadioX(String timestampPrecision) {\n   }\n \n   public List<TimeValues> querySeriesInternal(String s, Pair<ZonedDateTime, ZonedDateTime> timeRange, String function) {\n-      Long from = zonedCovertToLong(timeRange.left);\n+    Long from = zonedCovertToLong(timeRange.left);\n     Long to = zonedCovertToLong(timeRange.right);\n     final long hours = Duration.between(timeRange.left, timeRange.right).toHours();\n+\n     String sql = String.format(\"SELECT %s FROM root.%s WHERE time > %d and time < %d\",\n         s.substring(s.lastIndexOf('.') + 1), s.substring(0, s.lastIndexOf('.')),\n         from * timestampRadioX, to * timestampRadioX);\n     String columnName = \"root.\" + s;\n-    if (isDownSampling && (hours > 1)) {\n-      if (hours < 30 * 24 && hours > 24) {\n-        interval = \"1h\";\n-      } else if (hours > 30 * 24) {\n-        interval = \"1d\";\n-      }\n+\n+    String internalLocal = getInternal(hours);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ=="}, "originalCommit": {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI2MTk0OnYy", "diffSide": "RIGHT", "path": "grafana/src/test/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowMDo0MlrOHyXy-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowMDo0MlrOHyXy-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MDcyOQ==", "bodyText": "please remove the print", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r522580729", "createdAt": "2020-11-13T03:00:42Z", "author": {"login": "qiaojialin"}, "path": "grafana/src/test/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImplTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.web.grafana.dao.impl;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.junit.Assert.*;\n+\n+public class BasicDaoImplTest {\n+\n+\n+    @Before\n+    public void setUp() throws Exception {\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+    }\n+\n+    @Test\n+    public void getInternal() {\n+        BasicDaoImpl impl = new BasicDaoImpl(null);\n+        ReflectionTestUtils.setField(impl, \"isDownSampling\", true);\n+        ReflectionTestUtils.setField(impl, \"interval\", \"1m\");\n+\n+        String internal1 = impl.getInternal(0);\n+        assert internal1.equals(\"\");\n+\n+        String internal2 = impl.getInternal(3);\n+        System.out.println(\"123\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 617, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}