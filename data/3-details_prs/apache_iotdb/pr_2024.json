{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MTY1NTc2", "number": 2024, "title": "[IoTDB-804] Index framework: from SQL to PhysicalPlan", "bodyText": "This pull request is about the index framework, which is aimed at enabling IoTDB to support similar research.\nThe code will be submitted in several steps. This pr is the first part, from the SQL parser to the physical plan generator.\nThe issue is at JIRA-804.\nThe documents about the scenarios are at Confluence.", "createdAt": "2020-11-11T12:25:39Z", "url": "https://github.com/apache/iotdb/pull/2024", "merged": true, "mergeCommit": {"oid": "1229b86a9ff1123a1d464a525666b72a22f9d687"}, "closed": true, "closedAt": "2020-11-18T02:13:35Z", "author": {"login": "kr11"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbcdTEAH2gAyNTE5MTY1NTc2OmVlZGIwOGQxMWJkZjhjZjg2M2QyMjZmNjMwYjkzNmM1MzhiZTBkNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddj_vIAH2gAyNTE5MTY1NTc2OmU1Y2YxODE5NzFjOWE2ZTRhNzRkZTk2MzRjNzUyNjMzZjM4MGQ4Y2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71", "author": {"user": {"login": "kr11", "name": "Rong-Kang"}}, "url": "https://github.com/apache/iotdb/commit/eedb08d11bdf8cf863d226f630b936c538be0d71", "committedDate": "2020-11-11T11:42:32Z", "message": "add index: from SQL to PhysicalPlan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODYwMTEz", "url": "https://github.com/apache/iotdb/pull/2024#pullrequestreview-529860113", "createdAt": "2020-11-13T08:24:27Z", "commit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNDoyN1rOHykVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzowNTowMVrOHytkCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NjE5MQ==", "bodyText": "Now we put the public used message in the exception class, so that we don't need to repeat the message every time the exception is thrown : )\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public UnsupportedIndexTypeException(String message) {\n          \n          \n            \n                super(message, TSStatusCode.UNSUPPORTED_INDEX_TYPE_ERROR.getStatusCode());\n          \n          \n            \n              }\n          \n          \n            \n              public UnsupportedIndexTypeException(String indexType) {\n          \n          \n            \n                super(\"Unsupported index type: \" + indexType, TSStatusCode.UNSUPPORTED_INDEX_TYPE_ERROR.getStatusCode());\n          \n          \n            \n              }", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522786191", "createdAt": "2020-11-13T08:24:27Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/exception/index/UnsupportedIndexTypeException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.exception.index;\n+\n+\n+import org.apache.iotdb.rpc.TSStatusCode;\n+\n+public class UnsupportedIndexTypeException extends QueryIndexException {\n+\n+  private static final long serialVersionUID = -7091830159338197925L;\n+\n+  public UnsupportedIndexTypeException(String message) {\n+    super(message, TSStatusCode.UNSUPPORTED_INDEX_TYPE_ERROR.getStatusCode());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4ODY5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      String.format(\"index type %s is not supported.\", ctx.indexName.getText()));\n          \n          \n            \n                      String.format(ctx.indexName.getText()));", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522788691", "createdAt": "2020-11-13T08:26:35Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1199,6 +1217,36 @@ public void enterAttributeClauses(AttributeClausesContext ctx) {\n     initializedOperator = createTimeSeriesOperator;\n   }\n \n+  @Override\n+  public void enterIndexWithClause(SqlBaseParser.IndexWithClauseContext ctx) {\n+    super.enterIndexWithClause(ctx);\n+    IndexType indexType;\n+    try {\n+      indexType = IndexType.getIndexType(ctx.indexName.getText());\n+    } catch (UnsupportedIndexTypeException e) {\n+      throw new SQLParserException(\n+          String.format(\"index type %s is not supported.\", ctx.indexName.getText()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4ODkyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      String.format(\"index type %s is not supported.\", ctx.indexName.getText()));\n          \n          \n            \n                      String.format(ctx.indexName.getText()));", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522788924", "createdAt": "2020-11-13T08:26:48Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1712,4 +1779,162 @@ public void enterCreateSnapshot(CreateSnapshotContext ctx) {\n     super.enterCreateSnapshot(ctx);\n     initializedOperator = new CreateSnapshotOperator(SQLConstant.TOK_CREATE_SCHEMA_SNAPSHOT);\n   }\n+\n+  /**\n+   * for create index command, time should only have an end time.\n+   *\n+   * @param operator create index plan\n+   */\n+  private long parseCreateIndexFilter(CreateIndexOperator operator) {\n+    FilterOperator filterOperator = operator.getFilterOperator();\n+    if (filterOperator.getTokenIntType() != SQLConstant.GREATERTHAN\n+        && filterOperator.getTokenIntType() != SQLConstant.GREATERTHANOREQUALTO) {\n+      throw new SQLParserException(\n+          \"For create index command, where clause must be like : time > XXX or time >= XXX\");\n+    }\n+    long time = Long.parseLong(((BasicFunctionOperator) filterOperator).getValue());\n+    if (filterOperator.getTokenIntType() == SQLConstant.LESSTHAN) {\n+      time = time - 1;\n+    }\n+    return time;\n+  }\n+\n+  /**\n+   * For parsing CreateIndex\n+   *\n+   * <p>The default implementation does nothing.</p>\n+   */\n+  @Override\n+  public void enterCreateIndex(SqlBaseParser.CreateIndexContext ctx) {\n+    super.enterCreateIndex(ctx);\n+    createIndexOp = new CreateIndexOperator(SQLConstant.TOK_CREATE_INDEX);\n+    selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<PrefixPathContext> prefixPaths = Collections.singletonList(ctx.prefixPath());\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      PartialPath path = parsePrefixPath(prefixPath);\n+      selectOp.addSelectPath(path);\n+    }\n+    createIndexOp.setSelectOperator(selectOp);\n+    initializedOperator = createIndexOp;\n+    operatorType = SQLConstant.TOK_CREATE_INDEX;\n+  }\n+\n+  @Override\n+  public void enterDropIndex(SqlBaseParser.DropIndexContext ctx) {\n+    super.enterDropIndex(ctx);\n+    DropIndexOperator dropIndexOperator = new DropIndexOperator(SQLConstant.TOK_DROP_INDEX);\n+    selectOp = new SelectOperator(SQLConstant.TOK_SELECT);\n+    List<PrefixPathContext> prefixPaths = Collections.singletonList(ctx.prefixPath());\n+    for (PrefixPathContext prefixPath : prefixPaths) {\n+      PartialPath path = parsePrefixPath(prefixPath);\n+      selectOp.addSelectPath(path);\n+    }\n+    dropIndexOperator.setSelectOperator(selectOp);\n+    try {\n+      dropIndexOperator.setIndexType(IndexType.getIndexType(ctx.indexName.getText()));\n+    } catch (UnsupportedIndexTypeException e) {\n+      throw new SQLParserException(\n+          String.format(\"index type %s is not supported.\", ctx.indexName.getText()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4OTc3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new UnsupportedIndexTypeException(\"unsupported index type:\" + indexTypeString);\n          \n          \n            \n                  throw new UnsupportedIndexTypeException(indexTypeString);", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522789771", "createdAt": "2020-11-13T08:27:32Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/index/common/IndexType.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.iotdb.db.index.common;\r\n+\r\n+import org.apache.iotdb.db.exception.index.UnsupportedIndexTypeException;\r\n+import org.apache.iotdb.tsfile.exception.NotImplementedException;\r\n+\r\n+public enum IndexType {\r\n+\r\n+  NO_INDEX,\r\n+  RTREE_PAA,\r\n+  ELB_INDEX,\r\n+  KV_INDEX\r\n+  ;\r\n+\r\n+  /**\r\n+   * judge the index type.\r\n+   *\r\n+   * @param i an integer used to determine index type\r\n+   * @return index type\r\n+   */\r\n+  public static IndexType deserialize(short i) {\r\n+    switch (i) {\r\n+      case 0:\r\n+        return NO_INDEX;\r\n+      case 1:\r\n+        return RTREE_PAA;\r\n+      case 2:\r\n+        return ELB_INDEX;\r\n+      case 3:\r\n+        return KV_INDEX;\r\n+      default:\r\n+        throw new NotImplementedException(\"Given index is not implemented\");\r\n+    }\r\n+  }\r\n+\r\n+  public static int getSerializedSize() {\r\n+    return Short.BYTES;\r\n+  }\r\n+\r\n+  /**\r\n+   * judge the index deserialize type.\r\n+   *\r\n+   * @return the integer used to determine index type\r\n+   */\r\n+  public short serialize() {\r\n+    switch (this) {\r\n+      case NO_INDEX:\r\n+        return 0;\r\n+      case RTREE_PAA:\r\n+        return 1;\r\n+      case ELB_INDEX:\r\n+        return 2;\r\n+      case KV_INDEX:\r\n+        return 3;\r\n+      default:\r\n+        throw new NotImplementedException(\"Given index is not implemented\");\r\n+    }\r\n+  }\r\n+\r\n+  public static IndexType getIndexType(String indexTypeString)\r\n+      throws UnsupportedIndexTypeException {\r\n+    String normalized = indexTypeString.toUpperCase();\r\n+    try {\r\n+      return IndexType.valueOf(normalized);\r\n+    } catch (IllegalArgumentException e) {\r\n+      throw new UnsupportedIndexTypeException(\"unsupported index type:\" + indexTypeString);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5Nzg1MA==", "bodyText": "Remove unused import", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522797850", "createdAt": "2020-11-13T08:35:02Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -28,6 +28,7 @@\n import org.apache.iotdb.db.rescon.PrimitiveArrayManager;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.read.common.BatchData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5ODg2NA==", "bodyText": "I think all configurations are the default value...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # the default size of sliding window used for the subsequence matching in index framework\n          \n          \n            \n            default_index_window_range=10\n          \n          \n            \n            # size of sliding window used for the subsequence matching in index framework\n          \n          \n            \n            index_window_range=10", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522798864", "createdAt": "2020-11-13T08:37:11Z", "author": {"login": "samperson1997"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -572,3 +572,22 @@ authorizer_provider_class=org.apache.iotdb.db.auth.authorizer.LocalFileAuthorize\n #If OpenIdAuthorizer is enabled, then openID_url must be set.\n \n #openID_url=\n+\n+# Uncomment following fields to configure the index root directory.\n+# For Window platform, the index is as follows:\n+# index_root_dir=data\\\\index\n+# For Linux platform\n+# If its prefix is \"/\", then the path is absolute. Otherwise, it is relative.\n+# index_root_dir=data/index\n+\n+# Is index enable\n+enable_index=false\n+\n+# How many threads can concurrently build index. When <= 0, use CPU core number.\n+concurrent_index_build_thread=0\n+\n+# the default size of sliding window used for the subsequence matching in index framework\n+default_index_window_range=10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxOTU1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private int defaultIndexWindowRange = 10;\n          \n          \n            \n              private int indexWindowRange = 10;", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522919556", "createdAt": "2020-11-13T12:28:29Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -271,6 +271,38 @@\n    */\n   private boolean enableMemControl = true;\n \n+  /**\n+   * Is the write ahead log enable.\n+   */\n+  private boolean enableIndex = false;\n+\n+  /**\n+   * How many threads can concurrently build index. When <= 0, use CPU core number.\n+   */\n+  private int concurrentIndexBuildThread = Runtime.getRuntime().availableProcessors();\n+\n+  /**\n+   * If we enable the memory-control mechanism during index building , {@code indexBufferSize}\n+   * refers to the byte-size of memory buffer threshold. For each index processor, all indexes in\n+   * one {@linkplain org.apache.iotdb.db.index.IndexFileProcessor IndexFileProcessor} share a total\n+   * common buffer size. With the memory-control mechanism, the occupied memory of all raw data and\n+   * index structures will be counted. If the memory buffer size reaches this threshold, the indexes\n+   * will be flushed to the disk file. As a result, data in one series may be divided into more than\n+   * one part and indexed separately.\n+   */\n+  private long indexBufferSize = 128 * 1024 * 1024L;\n+\n+  /**\n+   * the index framework adopts sliding window model to preprocess the original tv list in the\n+   * subsequence matching task.\n+   */\n+  private int defaultIndexWindowRange = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNjA5NA==", "bodyText": "There are many unused constants in this class, I wonder whether we should define them in this PR or not : )", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522926094", "createdAt": "2020-11-13T12:42:17Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/index/common/IndexConstant.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.index.common;\n+\n+public class IndexConstant {\n+\n+  // SQL show\n+  public static final String ID = \"ID\";\n+\n+\n+  public static final String META_DIR_NAME = \"meta\";\n+  public static final String STORAGE_GROUP_INDEXING_SUFFIX = \".sg_indexing\";\n+  public static final String STORAGE_GROUP_INDEXED_SUFFIX = \".sg_index\";\n+\n+  public static final String INDEXING_SUFFIX = \".indexing\";\n+  public static final String INDEXED_SUFFIX = \".index\";\n+\n+  // whole matching\n+  public static final int NON_SET_TOP_K = -1;\n+  public static final String TOP_K = \"TOP_K\";\n+\n+  // subsequence matching: sliding window\n+  public static final String INDEX_WINDOW_RANGE = \"INDEX_WINDOW_RANGE\";\n+  public static final String INDEX_RANGE_STRATEGY = \"INDEX_RANGE_STRATEGY\";\n+  public static final String INDEX_SLIDE_STEP = \"INDEX_SLIDE_STEP\";\n+\n+  public static final String INDEX_MAGIC = \"IoTDBIndex\";\n+  public static final String DEFAULT_PROP_NAME = \"DEFAULT\";\n+\n+  public static final int INDEX_MAP_INIT_RESERVE_SIZE = 5;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkzNDY2NA==", "bodyText": "Should it be DROP_INDEX?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(false, Operator.OperatorType.DELETE_TIMESERIES);\n          \n          \n            \n                super(false, Operator.OperatorType.DROP_INDEX);", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522934664", "createdAt": "2020-11-13T12:59:40Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/DropIndexPlan.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.sys;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.index.common.IndexType;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+\n+public class DropIndexPlan extends PhysicalPlan {\n+\n+  protected List<PartialPath> paths;\n+  private IndexType indexType;\n+\n+  public DropIndexPlan() {\n+    super(false, Operator.OperatorType.DELETE_TIMESERIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkzNzM1NQ==", "bodyText": "This method should also ensure that it is an int value in inputStream. Maybe we should imply it in the method name or in comment?", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r522937355", "createdAt": "2020-11-13T13:05:01Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "diffHunk": "@@ -708,6 +708,26 @@ public static ByteBuffer readByteBufferWithSelfDescriptionLength(ByteBuffer buff\n     return byteBuffer;\n   }\n \n+  /**\n+   * read bytes from an inputStream where the length is specified at the head of the inputStream.\n+   * @param inputStream contains a int-type length and a stream\n+   * @return bytebuffer\n+   * @throws IOException if the read length doesn't equal to the self description length.\n+   */\n+  public static ByteBuffer readByteBufferWithSelfDescriptionLength(InputStream inputStream)\n+      throws IOException {\n+    int length = readInt(inputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb08d11bdf8cf863d226f630b936c538be0d71"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a9b00bbcc21a468ec15b5f7537bb75b6d9f05b", "author": {"user": {"login": "kr11", "name": "Rong-Kang"}}, "url": "https://github.com/apache/iotdb/commit/b8a9b00bbcc21a468ec15b5f7537bb75b6d9f05b", "committedDate": "2020-11-16T02:05:59Z", "message": "Apply suggestions from code review\r\n\r\nFix exception messages\n\nCo-authored-by: Zesong Sun <2474809464@qq.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "058e4e5d7c08163dc556f014aa81649ea8ba487a", "author": {"user": {"login": "kr11", "name": "Rong-Kang"}}, "url": "https://github.com/apache/iotdb/commit/058e4e5d7c08163dc556f014aa81649ea8ba487a", "committedDate": "2020-11-16T02:07:25Z", "message": "Update TVList.java\n\nremove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODgzOTg4", "url": "https://github.com/apache/iotdb/pull/2024#pullrequestreview-530883988", "createdAt": "2020-11-16T02:45:10Z", "commit": {"oid": "058e4e5d7c08163dc556f014aa81649ea8ba487a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMjo0NToxMFrOHzmWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMjo0NTozN1rOHzmWfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2NzY1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void setPaths(List<PartialPath> paths) {\n          \n          \n            \n              @Override\n          \n          \n            \n              public void setPaths(List<PartialPath> paths) {", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r523867657", "createdAt": "2020-11-16T02:45:10Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/DropIndexPlan.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.sys;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.index.common.IndexType;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+\n+public class DropIndexPlan extends PhysicalPlan {\n+\n+  protected List<PartialPath> paths;\n+  private IndexType indexType;\n+\n+  public DropIndexPlan() {\n+    super(false, Operator.OperatorType.DROP_INDEX);\n+  }\n+\n+  public DropIndexPlan(List<PartialPath> paths, IndexType indexType) {\n+    super(false, OperatorType.DROP_INDEX);\n+    this.paths = paths;\n+    this.indexType = indexType;\n+\n+  }\n+\n+  public void setPaths(List<PartialPath> paths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058e4e5d7c08163dc556f014aa81649ea8ba487a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2Nzc3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void setPaths(List<PartialPath> paths) {\n          \n          \n            \n              @Override\n          \n          \n            \n              public void setPaths(List<PartialPath> paths) {", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r523867772", "createdAt": "2020-11-16T02:45:37Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/CreateIndexPlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.sys;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.index.common.IndexType;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+public class CreateIndexPlan extends PhysicalPlan {\n+\n+  protected List<PartialPath> paths;\n+  private Map<String, String> props;\n+  private long time;\n+  private IndexType indexType;\n+\n+  public CreateIndexPlan(){\n+    super(false, OperatorType.CREATE_INDEX);\n+    canBeSplit = false;\n+  }\n+\n+  public CreateIndexPlan(List<PartialPath> paths, Map<String, String> props, long startTime,\n+      IndexType indexType) {\n+    super(false, OperatorType.CREATE_INDEX);\n+    this.paths = paths;\n+    this.props = props;\n+    time = startTime;\n+    this.indexType = indexType;\n+    canBeSplit = false;\n+  }\n+\n+  public long getTime() {\n+    return time;\n+  }\n+\n+  public void setTime(long time) {\n+    this.time = time;\n+  }\n+\n+  public IndexType getIndexType() {\n+    return indexType;\n+  }\n+\n+  public void setIndexType(IndexType indexType) {\n+    this.indexType = indexType;\n+  }\n+\n+  public Map<String, String> getProps() {\n+    return props;\n+  }\n+\n+  public void setProps(Map<String, String> props) {\n+    this.props = props;\n+  }\n+\n+  public void setPaths(List<PartialPath> paths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058e4e5d7c08163dc556f014aa81649ea8ba487a"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwOTEzNzc1", "url": "https://github.com/apache/iotdb/pull/2024#pullrequestreview-530913775", "createdAt": "2020-11-16T04:34:05Z", "commit": {"oid": "058e4e5d7c08163dc556f014aa81649ea8ba487a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNDozNDowNVrOHzoAlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNDozNDowNVrOHzoAlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg5NDkzNA==", "bodyText": "If you support this SQL, you should delete //not support yet", "url": "https://github.com/apache/iotdb/pull/2024#discussion_r523894934", "createdAt": "2020-11-16T04:34:05Z", "author": {"login": "Genius-pig"}, "path": "antlr/src/main/antlr4/org/apache/iotdb/db/qp/strategy/SqlBase.g4", "diffHunk": "@@ -40,8 +40,9 @@ statement\n     | DELETE STORAGE GROUP prefixPath (COMMA prefixPath)* #deleteStorageGroup\n     | SHOW METADATA #showMetadata // not support yet\n     | DESCRIBE prefixPath #describePath // not support yet\n-    | CREATE INDEX ON fullPath USING function=ID indexWithClause? whereClause? #createIndex //not support yet\n-    | DROP INDEX function=ID ON fullPath #dropIndex //not support yet\n+    | CREATE INDEX ON prefixPath whereClause? indexWithClause #createIndex //not support yet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058e4e5d7c08163dc556f014aa81649ea8ba487a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1f8dba6c9d7dc9a627e57285b7fcf2226b6a025", "author": {"user": {"login": "kr11", "name": "Rong-Kang"}}, "url": "https://github.com/apache/iotdb/commit/a1f8dba6c9d7dc9a627e57285b7fcf2226b6a025", "committedDate": "2020-11-17T02:37:22Z", "message": "fix pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7929ac811a4350ec71229bfa1b5ab1736652272", "author": {"user": {"login": "kr11", "name": "Rong-Kang"}}, "url": "https://github.com/apache/iotdb/commit/c7929ac811a4350ec71229bfa1b5ab1736652272", "committedDate": "2020-11-17T02:37:34Z", "message": "Merge commit '07ab57d8b19112fba0a2b988dd9cf05baa1ed945' into f_index_pr_v2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDY2MzA1", "url": "https://github.com/apache/iotdb/pull/2024#pullrequestreview-532066305", "createdAt": "2020-11-17T06:59:51Z", "commit": {"oid": "c7929ac811a4350ec71229bfa1b5ab1736652272"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5cf181971c9a6e4a74de9634c752633f380d8ca", "author": {"user": {"login": "kr11", "name": "Rong-Kang"}}, "url": "https://github.com/apache/iotdb/commit/e5cf181971c9a6e4a74de9634c752633f380d8ca", "committedDate": "2020-11-18T01:37:20Z", "message": "Merge commit '84de3f8436f34efd9cb0c3de11d962d99cc658f8' into f_index_pr_v2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4103, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}