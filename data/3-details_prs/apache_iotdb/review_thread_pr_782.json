{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzMwMDg2", "number": 782, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNDo1MlrODeVv7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjoxMDozN1rODeVzCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTQwMjA3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNDo1MlrOFna8zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNDo1MlrOFna8zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MDMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static int maxPrintRowCount = 100000;\n          \n          \n            \n              static int maxPrintRowCount = 1000;", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376880334", "createdAt": "2020-02-10T06:04:52Z", "author": {"login": "qiaojialin"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -82,89 +82,29 @@\n   static final String TIMESTAMP_STR = \"Time\";\n   static final int ISO_DATETIME_LEN = 35;\n   private static final String IMPORT_CMD = \"import\";\n-  private static final String NEED_NOT_TO_PRINT_TIMESTAMP = \"AGGREGATION\";\n   private static final String DEFAULT_TIME_FORMAT = \"default\";\n   private static String timeFormat = DEFAULT_TIME_FORMAT;\n   static int maxPrintRowCount = 100000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTQwMjQ2OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNToxM1rOFna9EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNToxM1rOFna9EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MDQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static int fetchSize = 10000;\n          \n          \n            \n              private static int fetchSize = 1000;", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376880400", "createdAt": "2020-02-10T06:05:13Z", "author": {"login": "qiaojialin"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -82,89 +82,29 @@\n   static final String TIMESTAMP_STR = \"Time\";\n   static final int ISO_DATETIME_LEN = 35;\n   private static final String IMPORT_CMD = \"import\";\n-  private static final String NEED_NOT_TO_PRINT_TIMESTAMP = \"AGGREGATION\";\n   private static final String DEFAULT_TIME_FORMAT = \"default\";\n   private static String timeFormat = DEFAULT_TIME_FORMAT;\n   static int maxPrintRowCount = 100000;\n   private static int fetchSize = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTQwNDg1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNjo1MVrOFna-eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNjo1MVrOFna-eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MDc2MQ==", "bodyText": "change this 30 to a field of this class", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376880761", "createdAt": "2020-02-10T06:06:51Z", "author": {"login": "qiaojialin"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());\n-      handleException(e);\n     }\n     long costTime = System.currentTimeMillis() - startTime;\n     println(String.format(\"It costs %.3fs\", costTime / 1000.0));\n   }\n \n+  private static List<List<String>> cacheResult(ResultSet resultSet, List<Integer> maxSizeList,\n+      int columnLength, ResultSetMetaData resultSetMetaData, ZoneId zoneId)\n+      throws SQLException {\n+    boolean printTimestamp = !((IoTDBQueryResultSet) resultSet).isIgnoreTimeStamp();\n+    List<List<String>> lists = new ArrayList<>(columnLength);\n+    for(int i = 1; i <= columnLength; i++) {\n+      List<String> list = new ArrayList<>(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 490}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTQwODE5OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowOTowOVrOFnbAUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoxMDowMVrOFnjxFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTIzMg==", "bodyText": "format", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376881232", "createdAt": "2020-02-10T06:09:09Z", "author": {"login": "qiaojialin"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());\n-      handleException(e);\n     }\n     long costTime = System.currentTimeMillis() - startTime;\n     println(String.format(\"It costs %.3fs\", costTime / 1000.0));\n   }\n \n+  private static List<List<String>> cacheResult(ResultSet resultSet, List<Integer> maxSizeList,\n+      int columnLength, ResultSetMetaData resultSetMetaData, ZoneId zoneId)\n+      throws SQLException {\n+    boolean printTimestamp = !((IoTDBQueryResultSet) resultSet).isIgnoreTimeStamp();\n+    List<List<String>> lists = new ArrayList<>(columnLength);\n+    for(int i = 1; i <= columnLength; i++) {\n+      List<String> list = new ArrayList<>(30);\n+      list.add(resultSetMetaData.getColumnLabel(i));\n+      lists.add(list);\n+      maxSizeList.add(resultSetMetaData.getColumnLabel(i).length());\n+    }\n+    int j = 0;\n+    while (resultSet.next()) {\n+      if(j > maxPrintRowCount) {\n+        break;\n+      }\n+      for(int i = 1; i <= columnLength; i++) {\n+        String tmp;\n+        if(printTimestamp && i == 1) {\n+          tmp = formatDatetime(resultSet.getLong(TIMESTAMP_STR), zoneId);\n+        } else {\n+          tmp = resultSet.getString(i);\n+        }\n+        lists.get(i-1).add(tmp);\n+        if(maxSizeList.get(i-1) < tmp.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 508}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MDM0NA==", "bodyText": "format what?", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376970344", "createdAt": "2020-02-10T10:12:59Z", "author": {"login": "Genius-pig"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());\n-      handleException(e);\n     }\n     long costTime = System.currentTimeMillis() - startTime;\n     println(String.format(\"It costs %.3fs\", costTime / 1000.0));\n   }\n \n+  private static List<List<String>> cacheResult(ResultSet resultSet, List<Integer> maxSizeList,\n+      int columnLength, ResultSetMetaData resultSetMetaData, ZoneId zoneId)\n+      throws SQLException {\n+    boolean printTimestamp = !((IoTDBQueryResultSet) resultSet).isIgnoreTimeStamp();\n+    List<List<String>> lists = new ArrayList<>(columnLength);\n+    for(int i = 1; i <= columnLength; i++) {\n+      List<String> list = new ArrayList<>(30);\n+      list.add(resultSetMetaData.getColumnLabel(i));\n+      lists.add(list);\n+      maxSizeList.add(resultSetMetaData.getColumnLabel(i).length());\n+    }\n+    int j = 0;\n+    while (resultSet.next()) {\n+      if(j > maxPrintRowCount) {\n+        break;\n+      }\n+      for(int i = 1; i <= columnLength; i++) {\n+        String tmp;\n+        if(printTimestamp && i == 1) {\n+          tmp = formatDatetime(resultSet.getLong(TIMESTAMP_STR), zoneId);\n+        } else {\n+          tmp = resultSet.getString(i);\n+        }\n+        lists.get(i-1).add(tmp);\n+        if(maxSizeList.get(i-1) < tmp.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTIzMg=="}, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 508}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyNDc4OQ==", "bodyText": "oh, nothing", "url": "https://github.com/apache/iotdb/pull/782#discussion_r377024789", "createdAt": "2020-02-10T12:10:01Z", "author": {"login": "qiaojialin"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());\n-      handleException(e);\n     }\n     long costTime = System.currentTimeMillis() - startTime;\n     println(String.format(\"It costs %.3fs\", costTime / 1000.0));\n   }\n \n+  private static List<List<String>> cacheResult(ResultSet resultSet, List<Integer> maxSizeList,\n+      int columnLength, ResultSetMetaData resultSetMetaData, ZoneId zoneId)\n+      throws SQLException {\n+    boolean printTimestamp = !((IoTDBQueryResultSet) resultSet).isIgnoreTimeStamp();\n+    List<List<String>> lists = new ArrayList<>(columnLength);\n+    for(int i = 1; i <= columnLength; i++) {\n+      List<String> list = new ArrayList<>(30);\n+      list.add(resultSetMetaData.getColumnLabel(i));\n+      lists.add(list);\n+      maxSizeList.add(resultSetMetaData.getColumnLabel(i).length());\n+    }\n+    int j = 0;\n+    while (resultSet.next()) {\n+      if(j > maxPrintRowCount) {\n+        break;\n+      }\n+      for(int i = 1; i <= columnLength; i++) {\n+        String tmp;\n+        if(printTimestamp && i == 1) {\n+          tmp = formatDatetime(resultSet.getLong(TIMESTAMP_STR), zoneId);\n+        } else {\n+          tmp = resultSet.getString(i);\n+        }\n+        lists.get(i-1).add(tmp);\n+        if(maxSizeList.get(i-1) < tmp.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTIzMg=="}, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 508}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTQwODcyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowOTozOVrOFnbAng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoxNjoxOVrOFngjEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTMxMA==", "bodyText": "add some javadoc", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376881310", "createdAt": "2020-02-10T06:09:39Z", "author": {"login": "qiaojialin"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());\n-      handleException(e);\n     }\n     long costTime = System.currentTimeMillis() - startTime;\n     println(String.format(\"It costs %.3fs\", costTime / 1000.0));\n   }\n \n+  private static List<List<String>> cacheResult(ResultSet resultSet, List<Integer> maxSizeList,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 484}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MjA1MA==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376972050", "createdAt": "2020-02-10T10:16:19Z", "author": {"login": "Genius-pig"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());\n-      handleException(e);\n     }\n     long costTime = System.currentTimeMillis() - startTime;\n     println(String.format(\"It costs %.3fs\", costTime / 1000.0));\n   }\n \n+  private static List<List<String>> cacheResult(ResultSet resultSet, List<Integer> maxSizeList,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTMxMA=="}, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 484}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTQxMDAyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjoxMDozN1rOFnbBSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoxNjoxMVrOFngiwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTQ4Mg==", "bodyText": "There is a null pointer exception, I can not print result in my client. Try to fix it...", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376881482", "createdAt": "2020-02-10T06:10:37Z", "author": {"login": "qiaojialin"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 477}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTk2OA==", "bodyText": "fixed.", "url": "https://github.com/apache/iotdb/pull/782#discussion_r376971968", "createdAt": "2020-02-10T10:16:11Z", "author": {"login": "Genius-pig"}, "path": "client/src/main/java/org/apache/iotdb/client/AbstractClient.java", "diffHunk": "@@ -805,34 +503,100 @@ private static void importCmd(String specialCmd, String cmd, IoTDBConnection con\n     } catch (SQLException e) {\n       println(String.format(\"Failed to import from %s because %s\",\n           cmd.split(\" \")[1], e.getMessage()));\n-      handleException(e);\n     } catch (TException e) {\n       println(\"Cannot connect to server\");\n-      handleException(e);\n     }\n   }\n \n   private static void executeQuery(IoTDBConnection connection, String cmd) {\n     long startTime = System.currentTimeMillis();\n-    try (Statement statement = connection.createStatement();) {\n+    try (Statement statement = connection.createStatement()) {\n       ZoneId zoneId = ZoneId.of(connection.getTimeZone());\n       statement.setFetchSize(fetchSize);\n       boolean hasResultSet = statement.execute(cmd.trim());\n       if (hasResultSet) {\n-        ResultSet resultSet = statement.getResultSet();\n-        output(resultSet, printToConsole, zoneId);\n-        if (resultSet != null) {\n-          resultSet.close();\n+        try (ResultSet resultSet = statement.getResultSet()) {\n+          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+          int columnLength = resultSetMetaData.getColumnCount();\n+          List<Integer> maxSizeList = new ArrayList<>(columnLength);\n+          List<List<String>> lists = cacheResult(resultSet, maxSizeList, columnLength,\n+              resultSetMetaData, zoneId);\n+          output(lists, maxSizeList);\n         }\n       }\n     } catch (Exception e) {\n       println(\"Msg: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTQ4Mg=="}, "originalCommit": {"oid": "5226766a408adbeb8e605182ac725ddde719038e"}, "originalPosition": 477}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 394, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}