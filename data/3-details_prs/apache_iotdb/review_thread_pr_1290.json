{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTA3NjAy", "number": 1290, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoyNjozMlrOEBFC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoyNjozMlrOEBFC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY2NzE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjoyNjozMlrOGcwIkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDo1MTo0MVrOGc5dVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ==", "bodyText": "I'm just a little bit curious why don't you use System.nanoTime() here.", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432801939", "createdAt": "2020-05-30T02:26:32Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNzkxMQ==", "bodyText": "When users use now() and set the precision as ns or ms, they want to generate dense data. if you you System.currentTimeMillis()*1000 or 1000_000, then many timstamps will repeat...", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432817911", "createdAt": "2020-05-30T07:08:59Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ=="}, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwODYyMA==", "bodyText": "System.nanoTime is not the current time in nano second, it is usually used for timing:\nlong start = System.nanoTime();\nlong elapse = System.nanoTime() - start;\nAnd, there is no System. microsecond()...", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432908620", "createdAt": "2020-05-31T04:30:44Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ=="}, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNzUwMw==", "bodyText": "I agree with @qiaojialin and @jixuan1989 both.  System.nanoTime can't get the current time correctly, while the precision of *1000 or *1000_100 is unchanged actually. We need to rethink about the implementation way.", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432927503", "createdAt": "2020-05-31T09:27:00Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ=="}, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzNDkwOA==", "bodyText": "Use Instant to generate nano seconds instead.", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432934908", "createdAt": "2020-05-31T11:00:22Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ=="}, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzNTYzNA==", "bodyText": "I think Instant.now() is a good solution.\nAnother way is just using the last 6 digits of System.nanoTime(), as in a JVM instance (which means if you do not restart the JVM), System.nanoTime() is keeping increasing.", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432935634", "createdAt": "2020-05-31T11:09:06Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ=="}, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1Mzc2Ng==", "bodyText": "Instant.getNano() returns the nanoseconds, but actully it's still millisecond resolution. I'm not sure it's useful here.", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432953766", "createdAt": "2020-05-31T14:41:00Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ=="}, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1NDcwOA==", "bodyText": "I think what we need is to keep the nano time as monotonic increasing.", "url": "https://github.com/apache/iotdb/pull/1290#discussion_r432954708", "createdAt": "2020-05-31T14:51:41Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1475,7 +1475,15 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n       throw new SQLParserException(\"input timestamp cannot be empty\");\n     }\n     if (timestampStr.equalsIgnoreCase(SQLConstant.NOW_FUNC)) {\n-      return System.currentTimeMillis();\n+      String timePrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+      switch (timePrecision) {\n+        case \"ns\":\n+          return System.currentTimeMillis() * 1000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTkzOQ=="}, "originalCommit": {"oid": "c028c0379eac6c3017a1e1b191ceb04d3db58a6f"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4894, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}