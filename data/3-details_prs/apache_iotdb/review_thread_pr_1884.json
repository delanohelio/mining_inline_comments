{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzUxOTIy", "number": 1884, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNjozN1rOEzD1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNjozN1rOEzD1cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc1NjY2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBQueryMemoryControlIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNjozN1rOHqDHwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNjozN1rOHqDHwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MzM3Nw==", "bodyText": "Don't forget to change the MaxQueryDeduplicatedPathNum back to the default value.", "url": "https://github.com/apache/iotdb/pull/1884#discussion_r513853377", "createdAt": "2020-10-29T01:16:37Z", "author": {"login": "JackieTien97"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBQueryMemoryControlIT.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.integration;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+import static org.junit.Assert.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.ResultSetMetaData;\r\n+import java.sql.Statement;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\r\n+import org.apache.iotdb.jdbc.Config;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+public class IoTDBQueryMemoryControlIT {\r\n+\r\n+  private static final String[] sqls = new String[]{\r\n+      \"set storage group to root.ln\",\r\n+\r\n+      \"create timeseries root.ln.wf01.wt01 with datatype=BOOLEAN,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf01.wt02 with datatype=BOOLEAN,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf01.wt03 with datatype=BOOLEAN,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf01.wt04 with datatype=BOOLEAN,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf01.wt05 with datatype=BOOLEAN,encoding=PLAIN\",\r\n+\r\n+      \"create timeseries root.ln.wf02.wt01 with datatype=FLOAT,encoding=RLE\",\r\n+      \"create timeseries root.ln.wf02.wt02 with datatype=FLOAT,encoding=RLE\",\r\n+      \"create timeseries root.ln.wf02.wt03 with datatype=FLOAT,encoding=RLE\",\r\n+      \"create timeseries root.ln.wf02.wt04 with datatype=FLOAT,encoding=RLE\",\r\n+      \"create timeseries root.ln.wf02.wt05 with datatype=FLOAT,encoding=RLE\",\r\n+\r\n+      \"create timeseries root.ln.wf03.wt01 with datatype=TEXT,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf03.wt02 with datatype=TEXT,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf03.wt03 with datatype=TEXT,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf03.wt04 with datatype=TEXT,encoding=PLAIN\",\r\n+      \"create timeseries root.ln.wf03.wt05 with datatype=TEXT,encoding=PLAIN\",\r\n+  };\r\n+\r\n+  @Before\r\n+  public void setUp() throws Exception {\r\n+    IoTDBDescriptor.getInstance().getConfig().setMaxQueryDeduplicatedPathNum(10);\r\n+    EnvironmentUtils.envSetUp();\r\n+    Class.forName(Config.JDBC_DRIVER_NAME);\r\n+    createTimeSeries();\r\n+  }\r\n+\r\n+  private static void createTimeSeries() {\r\n+    try (Statement statement = DriverManager.getConnection(\r\n+        Config.IOTDB_URL_PREFIX + \"127.0.0.1:6667/\", \"root\", \"root\").createStatement()) {\r\n+      for (String sql : sqls) {\r\n+        statement.execute(sql);\r\n+      }\r\n+    } catch (Exception e) {\r\n+      e.printStackTrace();\r\n+      fail(e.getMessage());\r\n+    }\r\n+  }\r\n+\r\n+  @After\r\n+  public void tearDown() throws Exception {\r\n+    EnvironmentUtils.cleanEnv();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3934efaebceb8326f4c3d59617e0b6d01936afb7"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 671, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}