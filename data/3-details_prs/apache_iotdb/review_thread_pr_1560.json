{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTc3Mzcy", "number": 1560, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMToyMjo0M1rOESNN5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMToyMjo0M1rOESNN5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTI2Mzc1OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/FilePartitionedSnapshotLogManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMToyMjo0M1rOG3Q8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjowNjoxNVrOG3RduA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwMjQzNw==", "bodyText": "Why not just use entry.value()?", "url": "https://github.com/apache/iotdb/pull/1560#discussion_r460602437", "createdAt": "2020-07-27T01:22:43Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/FilePartitionedSnapshotLogManager.java", "diffHunk": "@@ -52,21 +54,44 @@ public FilePartitionedSnapshotLogManager(LogApplier logApplier, PartitionTable p\n \n   @Override\n   public void takeSnapshot() throws IOException {\n-\n     logger.info(\"Taking snapshots, flushing IoTDB\");\n     StorageEngine.getInstance().syncCloseAllProcessor();\n     logger.info(\"Taking snapshots, IoTDB is flushed\");\n-    synchronized (slotSnapshots) {\n+    // TODO-cluster https://issues.apache.org/jira/browse/IOTDB-820\n+    synchronized (this) {\n       collectTimeseriesSchemas();\n       snapshotLastLogIndex = getCommitLogIndex();\n       snapshotLastLogTerm = getCommitLogTerm();\n-      collectTsFiles();\n+      collectTsFilesAndFillTimeseriesSchemas();\n       logger.info(\"Snapshot is taken\");\n     }\n   }\n \n-  private void collectTsFiles() throws IOException {\n+  /**\n+   * IMPORTANT, separate the collection timeseries schema from tsfile to avoid the following\n+   * situations: If the tsfile is empty at this time (only the metadata is registered, but the\n+   * tsfile has not been written yet), then the timeseries schema snapshot can still be generated\n+   * and sent to the followers.\n+   *\n+   * @throws IOException\n+   */\n+  private void collectTsFilesAndFillTimeseriesSchemas() throws IOException {\n+    // 1.collect tsfile\n+    collectTsFiles();\n+\n+    //2.register the measurement\n+    for (Map.Entry<Integer, Collection<TimeseriesSchema>> entry : slotTimeseries.entrySet()) {\n+      int slotNum = entry.getKey();\n+      FileSnapshot snapshot = slotSnapshots.computeIfAbsent(slotNum,\n+          s -> new FileSnapshot());\n+      if (snapshot.getTimeseriesSchemas().isEmpty()) {\n+        snapshot.setTimeseriesSchemas(slotTimeseries.getOrDefault(slotNum,\n+            Collections.emptySet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "428a13dc80ce1334afa4bb7d57f2bdb92fc6e689"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxMTAwMA==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1560#discussion_r460611000", "createdAt": "2020-07-27T02:06:15Z", "author": {"login": "neuyilan"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/FilePartitionedSnapshotLogManager.java", "diffHunk": "@@ -52,21 +54,44 @@ public FilePartitionedSnapshotLogManager(LogApplier logApplier, PartitionTable p\n \n   @Override\n   public void takeSnapshot() throws IOException {\n-\n     logger.info(\"Taking snapshots, flushing IoTDB\");\n     StorageEngine.getInstance().syncCloseAllProcessor();\n     logger.info(\"Taking snapshots, IoTDB is flushed\");\n-    synchronized (slotSnapshots) {\n+    // TODO-cluster https://issues.apache.org/jira/browse/IOTDB-820\n+    synchronized (this) {\n       collectTimeseriesSchemas();\n       snapshotLastLogIndex = getCommitLogIndex();\n       snapshotLastLogTerm = getCommitLogTerm();\n-      collectTsFiles();\n+      collectTsFilesAndFillTimeseriesSchemas();\n       logger.info(\"Snapshot is taken\");\n     }\n   }\n \n-  private void collectTsFiles() throws IOException {\n+  /**\n+   * IMPORTANT, separate the collection timeseries schema from tsfile to avoid the following\n+   * situations: If the tsfile is empty at this time (only the metadata is registered, but the\n+   * tsfile has not been written yet), then the timeseries schema snapshot can still be generated\n+   * and sent to the followers.\n+   *\n+   * @throws IOException\n+   */\n+  private void collectTsFilesAndFillTimeseriesSchemas() throws IOException {\n+    // 1.collect tsfile\n+    collectTsFiles();\n+\n+    //2.register the measurement\n+    for (Map.Entry<Integer, Collection<TimeseriesSchema>> entry : slotTimeseries.entrySet()) {\n+      int slotNum = entry.getKey();\n+      FileSnapshot snapshot = slotSnapshots.computeIfAbsent(slotNum,\n+          s -> new FileSnapshot());\n+      if (snapshot.getTimeseriesSchemas().isEmpty()) {\n+        snapshot.setTimeseriesSchemas(slotTimeseries.getOrDefault(slotNum,\n+            Collections.emptySet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwMjQzNw=="}, "originalCommit": {"oid": "428a13dc80ce1334afa4bb7d57f2bdb92fc6e689"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4766, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}