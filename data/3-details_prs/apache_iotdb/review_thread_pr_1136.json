{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzI1MjI3", "number": 1136, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMDoyMFrOD4AxDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMTo1M1rOD6Is7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDU5NDA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/PreviousFill.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowMDoyMFrOGOmGyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODo1MDoxOFrOGPFLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1NzU3OA==", "bodyText": "XXX?", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r417957578", "createdAt": "2020-04-30T12:00:20Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/PreviousFill.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.executor.fill;\n+\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.RawDataQueryPlan;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.control.QueryResourceManager;\n+import org.apache.iotdb.tsfile.file.metadata.TimeseriesMetadata;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.TimeValuePair;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.TimeFilter;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.filter.factory.FilterFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class PreviousFill extends IFill {\n+\n+  private Path seriesPath;\n+  private QueryContext context;\n+  private long beforeRange;\n+  private Set<String> allSensors;\n+  private Filter timeFilter;\n+\n+  private boolean untilLast;\n+\n+  public PreviousFill(TSDataType dataType, long queryTime, long beforeRange) {\n+    this(dataType, queryTime, beforeRange, false);\n+  }\n+\n+  public PreviousFill(long beforeRange) {\n+    this(beforeRange, false);\n+  }\n+\n+\n+  public PreviousFill(long beforeRange, boolean untilLast) {\n+    this.beforeRange = beforeRange;\n+    this.untilLast = untilLast;\n+  }\n+\n+\n+  public PreviousFill(TSDataType dataType, long queryTime, long beforeRange, boolean untilLast) {\n+    super(dataType, queryTime);\n+    this.beforeRange = beforeRange;\n+    this.untilLast = untilLast;\n+  }\n+\n+  @Override\n+  public IFill copy() {\n+    return new PreviousFill(dataType,  queryTime, beforeRange, untilLast);\n+  }\n+\n+  @Override\n+  void constructFilter() {\n+    Filter lowerBound = beforeRange == -1 ? TimeFilter.gtEq(Long.MIN_VALUE)\n+        : TimeFilter.gtEq(queryTime - beforeRange);\n+    // time in [queryTime - beforeRange, queryTime]\n+    timeFilter = FilterFactory.and(lowerBound, TimeFilter.ltEq(queryTime));\n+  }\n+\n+  public long getBeforeRange() {\n+    return beforeRange;\n+  }\n+\n+  @Override\n+  public void configureFill(\n+      Path path, TSDataType dataType, long queryTime, Set<String> sensors, QueryContext context) {\n+    this.seriesPath = path;\n+    this.dataType = dataType;\n+    this.context = context;\n+    this.queryTime = queryTime;\n+    this.allSensors = sensors;\n+    constructFilter();\n+  }\n+\n+  @Override\n+  public TimeValuePair getFillResult()\n+      throws IOException, QueryProcessException, StorageEngineException {\n+    QueryDataSource dataSource =\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, timeFilter);\n+    // update filter by TTL\n+    timeFilter = dataSource.updateFilterUsingTTL(timeFilter);\n+    LastPointReader lastReader = new LastPointReader(\n+        seriesPath, dataType, allSensors, context, dataSource, queryTime, timeFilter);\n+\n+    return lastReader.getTimeseriesLastPointXXX();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d591d7cd6af378b832ccf71c55eaa9f8b0bb96f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2NjcwNQ==", "bodyText": "Oh, that's a temporary name forgot to correct.. Fixed", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r418466705", "createdAt": "2020-05-01T08:50:18Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/PreviousFill.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.executor.fill;\n+\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.RawDataQueryPlan;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.control.QueryResourceManager;\n+import org.apache.iotdb.tsfile.file.metadata.TimeseriesMetadata;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.TimeValuePair;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.TimeFilter;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.filter.factory.FilterFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class PreviousFill extends IFill {\n+\n+  private Path seriesPath;\n+  private QueryContext context;\n+  private long beforeRange;\n+  private Set<String> allSensors;\n+  private Filter timeFilter;\n+\n+  private boolean untilLast;\n+\n+  public PreviousFill(TSDataType dataType, long queryTime, long beforeRange) {\n+    this(dataType, queryTime, beforeRange, false);\n+  }\n+\n+  public PreviousFill(long beforeRange) {\n+    this(beforeRange, false);\n+  }\n+\n+\n+  public PreviousFill(long beforeRange, boolean untilLast) {\n+    this.beforeRange = beforeRange;\n+    this.untilLast = untilLast;\n+  }\n+\n+\n+  public PreviousFill(TSDataType dataType, long queryTime, long beforeRange, boolean untilLast) {\n+    super(dataType, queryTime);\n+    this.beforeRange = beforeRange;\n+    this.untilLast = untilLast;\n+  }\n+\n+  @Override\n+  public IFill copy() {\n+    return new PreviousFill(dataType,  queryTime, beforeRange, untilLast);\n+  }\n+\n+  @Override\n+  void constructFilter() {\n+    Filter lowerBound = beforeRange == -1 ? TimeFilter.gtEq(Long.MIN_VALUE)\n+        : TimeFilter.gtEq(queryTime - beforeRange);\n+    // time in [queryTime - beforeRange, queryTime]\n+    timeFilter = FilterFactory.and(lowerBound, TimeFilter.ltEq(queryTime));\n+  }\n+\n+  public long getBeforeRange() {\n+    return beforeRange;\n+  }\n+\n+  @Override\n+  public void configureFill(\n+      Path path, TSDataType dataType, long queryTime, Set<String> sensors, QueryContext context) {\n+    this.seriesPath = path;\n+    this.dataType = dataType;\n+    this.context = context;\n+    this.queryTime = queryTime;\n+    this.allSensors = sensors;\n+    constructFilter();\n+  }\n+\n+  @Override\n+  public TimeValuePair getFillResult()\n+      throws IOException, QueryProcessException, StorageEngineException {\n+    QueryDataSource dataSource =\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, timeFilter);\n+    // update filter by TTL\n+    timeFilter = dataSource.updateFilterUsingTTL(timeFilter);\n+    LastPointReader lastReader = new LastPointReader(\n+        seriesPath, dataType, allSensors, context, dataSource, queryTime, timeFilter);\n+\n+    return lastReader.getTimeseriesLastPointXXX();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1NzU3OA=="}, "originalCommit": {"oid": "3d591d7cd6af378b832ccf71c55eaa9f8b0bb96f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM4MTE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1Nzo0OVrOGRH5gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1Nzo0OVrOGRH5gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwODM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private TimeValuePair calculatFirstPointAfterQueryTime()\n          \n          \n            \n              private TimeValuePair calculateFirstPointAfterQueryTime()", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r420608387", "createdAt": "2020-05-06T07:57:49Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "diffHunk": "@@ -83,57 +92,80 @@ public IFill copy() {\n   }\n \n   @Override\n-  Filter constructFilter() {\n+  void constructFilter() {\n     Filter lowerBound = beforeRange == -1 ? TimeFilter.gtEq(Long.MIN_VALUE)\n         : TimeFilter.gtEq(queryTime - beforeRange);\n     Filter upperBound = afterRange == -1 ? TimeFilter.ltEq(Long.MAX_VALUE)\n         : TimeFilter.ltEq(queryTime + afterRange);\n     // [queryTIme - beforeRange, queryTime + afterRange]\n-    return FilterFactory.and(lowerBound, upperBound);\n+    beforeFilter = FilterFactory.and(lowerBound, TimeFilter.ltEq(queryTime));\n+    afterFilter = FilterFactory.and(TimeFilter.gtEq(queryTime), upperBound);\n   }\n \n   @Override\n-  public void configureFill(Path path, TSDataType dataType, long queryTime,\n-      Set<String> sensors, QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+  public void configureFill(\n+      Path path, TSDataType dataType, long queryTime, Set<String> sensors, QueryContext context) {\n+    this.seriesPath = path;\n     this.dataType = dataType;\n     this.queryTime = queryTime;\n-    Filter timeFilter = constructFilter();\n-    dataReader = new SeriesRawDataBatchReader(path, sensors, dataType, context,\n-        QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter),\n-        timeFilter, null, null);\n+    this.context = context;\n+    this.allSensors = sensors;\n+    constructFilter();\n   }\n \n   @Override\n-  public TimeValuePair getFillResult() throws IOException, UnSupportedFillTypeException {\n-    TimeValuePair beforePair = null;\n-    TimeValuePair afterPair = null;\n-    while (batchData.hasCurrent() || dataReader.hasNextBatch()) {\n-      if (!batchData.hasCurrent() && dataReader.hasNextBatch()) {\n-        batchData = dataReader.nextBatch();\n-      }\n-      afterPair = new TimeValuePair(batchData.currentTime(), batchData.currentTsPrimitiveType());\n-      batchData.next();\n-      if (afterPair.getTimestamp() <= queryTime) {\n-        beforePair = afterPair;\n-      } else {\n-        break;\n-      }\n-    }\n+  public TimeValuePair getFillResult()\n+      throws IOException, QueryProcessException, StorageEngineException {\n+    QueryDataSource dataSource =\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, beforeFilter);\n+    LastPointReader lastReader =\n+        new LastPointReader(seriesPath, dataType, allSensors, context, dataSource, queryTime, beforeFilter);\n+\n+    TimeValuePair beforePair = lastReader.readLastPoint();\n+    TimeValuePair afterPair = calculatFirstPointAfterQueryTime();\n \n     // no before data or has data on the query timestamp\n-    if (beforePair == null || beforePair.getTimestamp() == queryTime) {\n+    if (beforePair.getValue() == null || beforePair.getTimestamp() == queryTime) {\n       return beforePair;\n     }\n \n     // on after data or after data is out of range\n-    if (afterPair.getTimestamp() < queryTime || (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n+    if (afterPair.getValue() == null || afterPair.getTimestamp() < queryTime ||\n+        (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n       return new TimeValuePair(queryTime, null);\n     }\n \n     return average(beforePair, afterPair);\n   }\n \n+  private TimeValuePair calculatFirstPointAfterQueryTime()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413518a90b049219f757596a03ebb556ad96bf58"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM4NzAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1OTozOFrOGRH9Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1OTozOFrOGRH9Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwOTMyMg==", "bodyText": "This is not needed, you could directly construct AggregateResult using dataType.", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r420609322", "createdAt": "2020-05-06T07:59:38Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "diffHunk": "@@ -83,57 +92,80 @@ public IFill copy() {\n   }\n \n   @Override\n-  Filter constructFilter() {\n+  void constructFilter() {\n     Filter lowerBound = beforeRange == -1 ? TimeFilter.gtEq(Long.MIN_VALUE)\n         : TimeFilter.gtEq(queryTime - beforeRange);\n     Filter upperBound = afterRange == -1 ? TimeFilter.ltEq(Long.MAX_VALUE)\n         : TimeFilter.ltEq(queryTime + afterRange);\n     // [queryTIme - beforeRange, queryTime + afterRange]\n-    return FilterFactory.and(lowerBound, upperBound);\n+    beforeFilter = FilterFactory.and(lowerBound, TimeFilter.ltEq(queryTime));\n+    afterFilter = FilterFactory.and(TimeFilter.gtEq(queryTime), upperBound);\n   }\n \n   @Override\n-  public void configureFill(Path path, TSDataType dataType, long queryTime,\n-      Set<String> sensors, QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+  public void configureFill(\n+      Path path, TSDataType dataType, long queryTime, Set<String> sensors, QueryContext context) {\n+    this.seriesPath = path;\n     this.dataType = dataType;\n     this.queryTime = queryTime;\n-    Filter timeFilter = constructFilter();\n-    dataReader = new SeriesRawDataBatchReader(path, sensors, dataType, context,\n-        QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter),\n-        timeFilter, null, null);\n+    this.context = context;\n+    this.allSensors = sensors;\n+    constructFilter();\n   }\n \n   @Override\n-  public TimeValuePair getFillResult() throws IOException, UnSupportedFillTypeException {\n-    TimeValuePair beforePair = null;\n-    TimeValuePair afterPair = null;\n-    while (batchData.hasCurrent() || dataReader.hasNextBatch()) {\n-      if (!batchData.hasCurrent() && dataReader.hasNextBatch()) {\n-        batchData = dataReader.nextBatch();\n-      }\n-      afterPair = new TimeValuePair(batchData.currentTime(), batchData.currentTsPrimitiveType());\n-      batchData.next();\n-      if (afterPair.getTimestamp() <= queryTime) {\n-        beforePair = afterPair;\n-      } else {\n-        break;\n-      }\n-    }\n+  public TimeValuePair getFillResult()\n+      throws IOException, QueryProcessException, StorageEngineException {\n+    QueryDataSource dataSource =\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, beforeFilter);\n+    LastPointReader lastReader =\n+        new LastPointReader(seriesPath, dataType, allSensors, context, dataSource, queryTime, beforeFilter);\n+\n+    TimeValuePair beforePair = lastReader.readLastPoint();\n+    TimeValuePair afterPair = calculatFirstPointAfterQueryTime();\n \n     // no before data or has data on the query timestamp\n-    if (beforePair == null || beforePair.getTimestamp() == queryTime) {\n+    if (beforePair.getValue() == null || beforePair.getTimestamp() == queryTime) {\n       return beforePair;\n     }\n \n     // on after data or after data is out of range\n-    if (afterPair.getTimestamp() < queryTime || (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n+    if (afterPair.getValue() == null || afterPair.getTimestamp() < queryTime ||\n+        (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n       return new TimeValuePair(queryTime, null);\n     }\n \n     return average(beforePair, afterPair);\n   }\n \n+  private TimeValuePair calculatFirstPointAfterQueryTime()\n+      throws IOException, StorageEngineException, QueryProcessException {\n+    TimeValuePair result = new TimeValuePair(0, null);\n+    List<String> aggregations = new ArrayList<>();\n+    aggregations.add(AggregationType.MIN_TIME.toString());\n+    aggregations.add(AggregationType.FIRST_VALUE.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413518a90b049219f757596a03ebb556ad96bf58"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODQxNTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowOTowMlrOGRIPJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowOTowMlrOGRIPJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzkyNg==", "bodyText": "add the LinearFill in UserGuide, explain how we fill when beforePair or afterPair is null", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r420613926", "createdAt": "2020-05-06T08:09:02Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "diffHunk": "@@ -83,57 +92,80 @@ public IFill copy() {\n   }\n \n   @Override\n-  Filter constructFilter() {\n+  void constructFilter() {\n     Filter lowerBound = beforeRange == -1 ? TimeFilter.gtEq(Long.MIN_VALUE)\n         : TimeFilter.gtEq(queryTime - beforeRange);\n     Filter upperBound = afterRange == -1 ? TimeFilter.ltEq(Long.MAX_VALUE)\n         : TimeFilter.ltEq(queryTime + afterRange);\n     // [queryTIme - beforeRange, queryTime + afterRange]\n-    return FilterFactory.and(lowerBound, upperBound);\n+    beforeFilter = FilterFactory.and(lowerBound, TimeFilter.ltEq(queryTime));\n+    afterFilter = FilterFactory.and(TimeFilter.gtEq(queryTime), upperBound);\n   }\n \n   @Override\n-  public void configureFill(Path path, TSDataType dataType, long queryTime,\n-      Set<String> sensors, QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+  public void configureFill(\n+      Path path, TSDataType dataType, long queryTime, Set<String> sensors, QueryContext context) {\n+    this.seriesPath = path;\n     this.dataType = dataType;\n     this.queryTime = queryTime;\n-    Filter timeFilter = constructFilter();\n-    dataReader = new SeriesRawDataBatchReader(path, sensors, dataType, context,\n-        QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter),\n-        timeFilter, null, null);\n+    this.context = context;\n+    this.allSensors = sensors;\n+    constructFilter();\n   }\n \n   @Override\n-  public TimeValuePair getFillResult() throws IOException, UnSupportedFillTypeException {\n-    TimeValuePair beforePair = null;\n-    TimeValuePair afterPair = null;\n-    while (batchData.hasCurrent() || dataReader.hasNextBatch()) {\n-      if (!batchData.hasCurrent() && dataReader.hasNextBatch()) {\n-        batchData = dataReader.nextBatch();\n-      }\n-      afterPair = new TimeValuePair(batchData.currentTime(), batchData.currentTsPrimitiveType());\n-      batchData.next();\n-      if (afterPair.getTimestamp() <= queryTime) {\n-        beforePair = afterPair;\n-      } else {\n-        break;\n-      }\n-    }\n+  public TimeValuePair getFillResult()\n+      throws IOException, QueryProcessException, StorageEngineException {\n+    QueryDataSource dataSource =\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, beforeFilter);\n+    LastPointReader lastReader =\n+        new LastPointReader(seriesPath, dataType, allSensors, context, dataSource, queryTime, beforeFilter);\n+\n+    TimeValuePair beforePair = lastReader.readLastPoint();\n+    TimeValuePair afterPair = calculatFirstPointAfterQueryTime();\n \n     // no before data or has data on the query timestamp\n-    if (beforePair == null || beforePair.getTimestamp() == queryTime) {\n+    if (beforePair.getValue() == null || beforePair.getTimestamp() == queryTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413518a90b049219f757596a03ebb556ad96bf58"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjA3Mzk0OnYy", "diffSide": "RIGHT", "path": "docs/zh/SystemDesign/5-DataQuery/9-FillFunction.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMTo1NTo1N1rOGRrpEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzo1NTo1MVrOGRyvvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5NDAwMw==", "bodyText": "T\u4e4b\u540e\u7684\u6700\u65e9\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u503c", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r421194003", "createdAt": "2020-05-07T01:55:57Z", "author": {"login": "JackieTien97"}, "path": "docs/zh/SystemDesign/5-DataQuery/9-FillFunction.md", "diffHunk": "@@ -146,3 +146,14 @@ public TimeValuePair getFillResult() throws IOException {\n     return lastPointResult;\n }\n ```\n+\n+# Linear \u586b\u5145\n+\n+\u5bf9\u4e8eT\u65f6\u95f4\u7684 Linear Fill \u7ebf\u6027\u586b\u5145\u503c\u662f\u7531\u8be5\u65f6\u95f4\u5e8f\u5217\u7684\u4e24\u4e2a\u76f8\u5173\u503c\u505a\u7ebf\u6027\u62df\u5408\u5f97\u5230\u7684\uff1aT\u4e4b\u524d\u7684\u6700\u8fd1\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u503c\uff0cT\u4e4b\u540e\u7684\u6700\u8fd1\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u503c\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d418649ea6ccd18ef3aa75d27484756da35e1d01"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxMDM5OA==", "bodyText": "Fixed, thx", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r421310398", "createdAt": "2020-05-07T07:55:51Z", "author": {"login": "wshao08"}, "path": "docs/zh/SystemDesign/5-DataQuery/9-FillFunction.md", "diffHunk": "@@ -146,3 +146,14 @@ public TimeValuePair getFillResult() throws IOException {\n     return lastPointResult;\n }\n ```\n+\n+# Linear \u586b\u5145\n+\n+\u5bf9\u4e8eT\u65f6\u95f4\u7684 Linear Fill \u7ebf\u6027\u586b\u5145\u503c\u662f\u7531\u8be5\u65f6\u95f4\u5e8f\u5217\u7684\u4e24\u4e2a\u76f8\u5173\u503c\u505a\u7ebf\u6027\u62df\u5408\u5f97\u5230\u7684\uff1aT\u4e4b\u524d\u7684\u6700\u8fd1\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u503c\uff0cT\u4e4b\u540e\u7684\u6700\u8fd1\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u503c\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5NDAwMw=="}, "originalCommit": {"oid": "d418649ea6ccd18ef3aa75d27484756da35e1d01"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg2Mjc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMToxMVrOGRy8qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMToxMVrOGRy8qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxMzcwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AggregateResult minTimeResult =\n          \n          \n            \n                    AggregateResultFactory.getAggrResultByName(AggregationType.MIN_TIME.toString(), dataType);\n          \n          \n            \n                AggregateResult minTimeResult = new MinTimeAggrResult(dataType);", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r421313706", "createdAt": "2020-05-07T08:01:11Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "diffHunk": "@@ -83,57 +89,79 @@ public IFill copy() {\n   }\n \n   @Override\n-  Filter constructFilter() {\n+  void constructFilter() {\n     Filter lowerBound = beforeRange == -1 ? TimeFilter.gtEq(Long.MIN_VALUE)\n         : TimeFilter.gtEq(queryTime - beforeRange);\n     Filter upperBound = afterRange == -1 ? TimeFilter.ltEq(Long.MAX_VALUE)\n         : TimeFilter.ltEq(queryTime + afterRange);\n     // [queryTIme - beforeRange, queryTime + afterRange]\n-    return FilterFactory.and(lowerBound, upperBound);\n+    beforeFilter = FilterFactory.and(lowerBound, TimeFilter.ltEq(queryTime));\n+    afterFilter = FilterFactory.and(TimeFilter.gtEq(queryTime), upperBound);\n   }\n \n   @Override\n-  public void configureFill(Path path, TSDataType dataType, long queryTime,\n-      Set<String> sensors, QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+  public void configureFill(\n+      Path path, TSDataType dataType, long queryTime, Set<String> sensors, QueryContext context) {\n+    this.seriesPath = path;\n     this.dataType = dataType;\n     this.queryTime = queryTime;\n-    Filter timeFilter = constructFilter();\n-    dataReader = new SeriesRawDataBatchReader(path, sensors, dataType, context,\n-        QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter),\n-        timeFilter, null, null);\n+    this.context = context;\n+    this.allSensors = sensors;\n+    constructFilter();\n   }\n \n   @Override\n-  public TimeValuePair getFillResult() throws IOException, UnSupportedFillTypeException {\n-    TimeValuePair beforePair = null;\n-    TimeValuePair afterPair = null;\n-    while (batchData.hasCurrent() || dataReader.hasNextBatch()) {\n-      if (!batchData.hasCurrent() && dataReader.hasNextBatch()) {\n-        batchData = dataReader.nextBatch();\n-      }\n-      afterPair = new TimeValuePair(batchData.currentTime(), batchData.currentTsPrimitiveType());\n-      batchData.next();\n-      if (afterPair.getTimestamp() <= queryTime) {\n-        beforePair = afterPair;\n-      } else {\n-        break;\n-      }\n-    }\n+  public TimeValuePair getFillResult()\n+      throws IOException, QueryProcessException, StorageEngineException {\n+    QueryDataSource dataSource =\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, beforeFilter);\n+    LastPointReader lastReader =\n+        new LastPointReader(seriesPath, dataType, allSensors, context, dataSource, queryTime, beforeFilter);\n+\n+    TimeValuePair beforePair = lastReader.readLastPoint();\n+    TimeValuePair afterPair = calculateFirstPointAfterQueryTime();\n \n     // no before data or has data on the query timestamp\n-    if (beforePair == null || beforePair.getTimestamp() == queryTime) {\n+    if (beforePair.getValue() == null || beforePair.getTimestamp() == queryTime) {\n+      beforePair.setTimestamp(queryTime);\n       return beforePair;\n     }\n \n     // on after data or after data is out of range\n-    if (afterPair.getTimestamp() < queryTime || (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n+    if (afterPair.getValue() == null || afterPair.getTimestamp() < queryTime ||\n+        (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n       return new TimeValuePair(queryTime, null);\n     }\n \n     return average(beforePair, afterPair);\n   }\n \n+  private TimeValuePair calculateFirstPointAfterQueryTime()\n+      throws IOException, StorageEngineException, QueryProcessException {\n+    TimeValuePair result = new TimeValuePair(0, null);\n+\n+    List<AggregateResult> aggregateResultList = new ArrayList<>();\n+    AggregateResult minTimeResult =\n+        AggregateResultFactory.getAggrResultByName(AggregationType.MIN_TIME.toString(), dataType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227dbddcf434478a090397f108103824e602f22f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg2NTcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMTo1NFrOGRy-Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMTo1NFrOGRy-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDE0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AggregateResult firstValueResult =\n          \n          \n            \n                    AggregateResultFactory.getAggrResultByName(\n          \n          \n            \n                        AggregationType.FIRST_VALUE.toString(), dataType);\n          \n          \n            \n                AggregateResult firstValueResult = new FirstValueAggrResult(dataType);", "url": "https://github.com/apache/iotdb/pull/1136#discussion_r421314146", "createdAt": "2020-05-07T08:01:54Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/fill/LinearFill.java", "diffHunk": "@@ -83,57 +89,79 @@ public IFill copy() {\n   }\n \n   @Override\n-  Filter constructFilter() {\n+  void constructFilter() {\n     Filter lowerBound = beforeRange == -1 ? TimeFilter.gtEq(Long.MIN_VALUE)\n         : TimeFilter.gtEq(queryTime - beforeRange);\n     Filter upperBound = afterRange == -1 ? TimeFilter.ltEq(Long.MAX_VALUE)\n         : TimeFilter.ltEq(queryTime + afterRange);\n     // [queryTIme - beforeRange, queryTime + afterRange]\n-    return FilterFactory.and(lowerBound, upperBound);\n+    beforeFilter = FilterFactory.and(lowerBound, TimeFilter.ltEq(queryTime));\n+    afterFilter = FilterFactory.and(TimeFilter.gtEq(queryTime), upperBound);\n   }\n \n   @Override\n-  public void configureFill(Path path, TSDataType dataType, long queryTime,\n-      Set<String> sensors, QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+  public void configureFill(\n+      Path path, TSDataType dataType, long queryTime, Set<String> sensors, QueryContext context) {\n+    this.seriesPath = path;\n     this.dataType = dataType;\n     this.queryTime = queryTime;\n-    Filter timeFilter = constructFilter();\n-    dataReader = new SeriesRawDataBatchReader(path, sensors, dataType, context,\n-        QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter),\n-        timeFilter, null, null);\n+    this.context = context;\n+    this.allSensors = sensors;\n+    constructFilter();\n   }\n \n   @Override\n-  public TimeValuePair getFillResult() throws IOException, UnSupportedFillTypeException {\n-    TimeValuePair beforePair = null;\n-    TimeValuePair afterPair = null;\n-    while (batchData.hasCurrent() || dataReader.hasNextBatch()) {\n-      if (!batchData.hasCurrent() && dataReader.hasNextBatch()) {\n-        batchData = dataReader.nextBatch();\n-      }\n-      afterPair = new TimeValuePair(batchData.currentTime(), batchData.currentTsPrimitiveType());\n-      batchData.next();\n-      if (afterPair.getTimestamp() <= queryTime) {\n-        beforePair = afterPair;\n-      } else {\n-        break;\n-      }\n-    }\n+  public TimeValuePair getFillResult()\n+      throws IOException, QueryProcessException, StorageEngineException {\n+    QueryDataSource dataSource =\n+        QueryResourceManager.getInstance().getQueryDataSource(seriesPath, context, beforeFilter);\n+    LastPointReader lastReader =\n+        new LastPointReader(seriesPath, dataType, allSensors, context, dataSource, queryTime, beforeFilter);\n+\n+    TimeValuePair beforePair = lastReader.readLastPoint();\n+    TimeValuePair afterPair = calculateFirstPointAfterQueryTime();\n \n     // no before data or has data on the query timestamp\n-    if (beforePair == null || beforePair.getTimestamp() == queryTime) {\n+    if (beforePair.getValue() == null || beforePair.getTimestamp() == queryTime) {\n+      beforePair.setTimestamp(queryTime);\n       return beforePair;\n     }\n \n     // on after data or after data is out of range\n-    if (afterPair.getTimestamp() < queryTime || (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n+    if (afterPair.getValue() == null || afterPair.getTimestamp() < queryTime ||\n+        (afterRange != -1 && afterPair.getTimestamp() > queryTime + afterRange)) {\n       return new TimeValuePair(queryTime, null);\n     }\n \n     return average(beforePair, afterPair);\n   }\n \n+  private TimeValuePair calculateFirstPointAfterQueryTime()\n+      throws IOException, StorageEngineException, QueryProcessException {\n+    TimeValuePair result = new TimeValuePair(0, null);\n+\n+    List<AggregateResult> aggregateResultList = new ArrayList<>();\n+    AggregateResult minTimeResult =\n+        AggregateResultFactory.getAggrResultByName(AggregationType.MIN_TIME.toString(), dataType);\n+    AggregateResult firstValueResult =\n+        AggregateResultFactory.getAggrResultByName(\n+            AggregationType.FIRST_VALUE.toString(), dataType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227dbddcf434478a090397f108103824e602f22f"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 24, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}