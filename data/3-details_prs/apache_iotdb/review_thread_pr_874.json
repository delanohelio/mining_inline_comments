{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODI0MDI0", "number": 874, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjozOToyNVrODkojbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjowOTo0OVrODlTPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzM5NzU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjozOToyNVrOFxEIZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo1NjowN1rOFxjBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MjIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * The data type is considered as String and the value is considered is the same with measurement name.\n          \n          \n            \n               * The data type is considered as String and the value is the measurement name.", "url": "https://github.com/apache/iotdb/pull/874#discussion_r386992230", "createdAt": "2020-03-03T12:39:25Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -113,64 +114,14 @@ public void setAggregationPlan(AggregationPlan aggregationPlan) {\n     this.setOperatorType(Operator.OperatorType.AGGREGATION);\n   }\n \n-  //we use the following algorithm to reproduce the order of measurements that user writes.\n-  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n-  // column there is at least one device having it, and for each b_i column there is no device\n-  // having it, and 'c_i' is a const column.\n-  // Then, measurements is {a1, a2, a3, a4, a5};\n-  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements is {2, 3, 8};\n-  // constMeasurements is {'c1', 'c2', 'c3'}, and positionOfConstMeasurements is {0, 4, 7}.\n-  // When to reproduce the order of measurements. The pseudocode is:\n-  //<pre>\n-  // current = 0;\n-  // if (min(notExist, const) <= current) {\n-  //  pull min_element(notExist, const);\n-  // } else {\n-  //  pull from measurements;\n-  // }\n-  // current ++;\n-  //</pre>\n-\n-  public void addNotExistMeasurement(int position, String measurement) {\n-    notExistMeasurements.add(measurement);\n-    positionOfNotExistMeasurements.add(position);\n-  }\n-\n-  public void addConstMeasurement(int position, String measurement) {\n-    constMeasurements.add(measurement);\n-    positionOfConstMeasurements.add(position);\n-  }\n-\n-  public List<String> getNotExistMeasurements() {\n-    return notExistMeasurements;\n-  }\n-\n-  public void setNotExistMeasurements(List<String> notExistMeasurements) {\n-    this.notExistMeasurements = notExistMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfNotExistMeasurements() {\n-    return positionOfNotExistMeasurements;\n-  }\n-\n-  public void setPositionOfNotExistMeasurements(\n-      List<Integer> positionOfNotExistMeasurements) {\n-    this.positionOfNotExistMeasurements = positionOfNotExistMeasurements;\n-  }\n-\n-  public List<String> getConstMeasurements() {\n-    return constMeasurements;\n-  }\n-\n-  public void setConstMeasurements(List<String> constMeasurements) {\n-    this.constMeasurements = constMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfConstMeasurements() {\n-    return positionOfConstMeasurements;\n-  }\n-\n-  public void setPositionOfConstMeasurements(List<Integer> positionOfConstMeasurements) {\n-    this.positionOfConstMeasurements = positionOfConstMeasurements;\n+  /**\n+   * Normal: the measurements which don't belong to NonExist and Constant.\n+   * NonExist: the measurements that do not exist in any device, data type is considered as String.\n+   * The value is considered as null.\n+   * Const: the measurements that have quotation mark. e.g. \"abc\",'11'.\n+   * The data type is considered as String and the value is considered is the same with measurement name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5ODI0NA==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/874#discussion_r387498244", "createdAt": "2020-03-04T07:56:07Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -113,64 +114,14 @@ public void setAggregationPlan(AggregationPlan aggregationPlan) {\n     this.setOperatorType(Operator.OperatorType.AGGREGATION);\n   }\n \n-  //we use the following algorithm to reproduce the order of measurements that user writes.\n-  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n-  // column there is at least one device having it, and for each b_i column there is no device\n-  // having it, and 'c_i' is a const column.\n-  // Then, measurements is {a1, a2, a3, a4, a5};\n-  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements is {2, 3, 8};\n-  // constMeasurements is {'c1', 'c2', 'c3'}, and positionOfConstMeasurements is {0, 4, 7}.\n-  // When to reproduce the order of measurements. The pseudocode is:\n-  //<pre>\n-  // current = 0;\n-  // if (min(notExist, const) <= current) {\n-  //  pull min_element(notExist, const);\n-  // } else {\n-  //  pull from measurements;\n-  // }\n-  // current ++;\n-  //</pre>\n-\n-  public void addNotExistMeasurement(int position, String measurement) {\n-    notExistMeasurements.add(measurement);\n-    positionOfNotExistMeasurements.add(position);\n-  }\n-\n-  public void addConstMeasurement(int position, String measurement) {\n-    constMeasurements.add(measurement);\n-    positionOfConstMeasurements.add(position);\n-  }\n-\n-  public List<String> getNotExistMeasurements() {\n-    return notExistMeasurements;\n-  }\n-\n-  public void setNotExistMeasurements(List<String> notExistMeasurements) {\n-    this.notExistMeasurements = notExistMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfNotExistMeasurements() {\n-    return positionOfNotExistMeasurements;\n-  }\n-\n-  public void setPositionOfNotExistMeasurements(\n-      List<Integer> positionOfNotExistMeasurements) {\n-    this.positionOfNotExistMeasurements = positionOfNotExistMeasurements;\n-  }\n-\n-  public List<String> getConstMeasurements() {\n-    return constMeasurements;\n-  }\n-\n-  public void setConstMeasurements(List<String> constMeasurements) {\n-    this.constMeasurements = constMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfConstMeasurements() {\n-    return positionOfConstMeasurements;\n-  }\n-\n-  public void setPositionOfConstMeasurements(List<Integer> positionOfConstMeasurements) {\n-    this.positionOfConstMeasurements = positionOfConstMeasurements;\n+  /**\n+   * Normal: the measurements which don't belong to NonExist and Constant.\n+   * NonExist: the measurements that do not exist in any device, data type is considered as String.\n+   * The value is considered as null.\n+   * Const: the measurements that have quotation mark. e.g. \"abc\",'11'.\n+   * The data type is considered as String and the value is considered is the same with measurement name.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MjIzMA=="}, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzQwNTk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo0MjowMVrOFxENcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo1NDoyMVrOFxi-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MzUyMA==", "bodyText": "rename the  pathForDataType to pathWithAggregation", "url": "https://github.com/apache/iotdb/pull/874#discussion_r386993520", "createdAt": "2020-03-03T12:42:01Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -320,9 +323,10 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n                 dataTypeConsistencyChecker.put(measurementChecked, dataType);\n               }\n \n-              // update measurementSetOfGivenSuffix and measurement location\n-              if (measurementSetOfGivenSuffix.add(measurementChecked)) {\n-                loc++;\n+              // update measurementSetOfGivenSuffix and Normal measurement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzU4Nw==", "bodyText": "Sorry? Apparently it may without aggregation.", "url": "https://github.com/apache/iotdb/pull/874#discussion_r387497587", "createdAt": "2020-03-04T07:54:21Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -320,9 +323,10 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n                 dataTypeConsistencyChecker.put(measurementChecked, dataType);\n               }\n \n-              // update measurementSetOfGivenSuffix and measurement location\n-              if (measurementSetOfGivenSuffix.add(measurementChecked)) {\n-                loc++;\n+              // update measurementSetOfGivenSuffix and Normal measurement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MzUyMA=="}, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzQyNTI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo0ODowNFrOFxEZRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODowMTowMVrOFxjIXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NjU1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Normal, NonExist, Const;\n          \n          \n            \n                Exist, NonExist, Constant", "url": "https://github.com/apache/iotdb/pull/874#discussion_r386996551", "createdAt": "2020-03-03T12:48:04Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -113,64 +114,14 @@ public void setAggregationPlan(AggregationPlan aggregationPlan) {\n     this.setOperatorType(Operator.OperatorType.AGGREGATION);\n   }\n \n-  //we use the following algorithm to reproduce the order of measurements that user writes.\n-  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n-  // column there is at least one device having it, and for each b_i column there is no device\n-  // having it, and 'c_i' is a const column.\n-  // Then, measurements is {a1, a2, a3, a4, a5};\n-  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements is {2, 3, 8};\n-  // constMeasurements is {'c1', 'c2', 'c3'}, and positionOfConstMeasurements is {0, 4, 7}.\n-  // When to reproduce the order of measurements. The pseudocode is:\n-  //<pre>\n-  // current = 0;\n-  // if (min(notExist, const) <= current) {\n-  //  pull min_element(notExist, const);\n-  // } else {\n-  //  pull from measurements;\n-  // }\n-  // current ++;\n-  //</pre>\n-\n-  public void addNotExistMeasurement(int position, String measurement) {\n-    notExistMeasurements.add(measurement);\n-    positionOfNotExistMeasurements.add(position);\n-  }\n-\n-  public void addConstMeasurement(int position, String measurement) {\n-    constMeasurements.add(measurement);\n-    positionOfConstMeasurements.add(position);\n-  }\n-\n-  public List<String> getNotExistMeasurements() {\n-    return notExistMeasurements;\n-  }\n-\n-  public void setNotExistMeasurements(List<String> notExistMeasurements) {\n-    this.notExistMeasurements = notExistMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfNotExistMeasurements() {\n-    return positionOfNotExistMeasurements;\n-  }\n-\n-  public void setPositionOfNotExistMeasurements(\n-      List<Integer> positionOfNotExistMeasurements) {\n-    this.positionOfNotExistMeasurements = positionOfNotExistMeasurements;\n-  }\n-\n-  public List<String> getConstMeasurements() {\n-    return constMeasurements;\n-  }\n-\n-  public void setConstMeasurements(List<String> constMeasurements) {\n-    this.constMeasurements = constMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfConstMeasurements() {\n-    return positionOfConstMeasurements;\n-  }\n-\n-  public void setPositionOfConstMeasurements(List<Integer> positionOfConstMeasurements) {\n-    this.positionOfConstMeasurements = positionOfConstMeasurements;\n+  /**\n+   * Normal: the measurements which don't belong to NonExist and Constant.\n+   * NonExist: the measurements that do not exist in any device, data type is considered as String.\n+   * The value is considered as null.\n+   * Const: the measurements that have quotation mark. e.g. \"abc\",'11'.\n+   * The data type is considered as String and the value is considered is the same with measurement name.\n+   */\n+  public enum measurementType {\n+    Normal, NonExist, Const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwMDEyNw==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/874#discussion_r387500127", "createdAt": "2020-03-04T08:01:01Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -113,64 +114,14 @@ public void setAggregationPlan(AggregationPlan aggregationPlan) {\n     this.setOperatorType(Operator.OperatorType.AGGREGATION);\n   }\n \n-  //we use the following algorithm to reproduce the order of measurements that user writes.\n-  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n-  // column there is at least one device having it, and for each b_i column there is no device\n-  // having it, and 'c_i' is a const column.\n-  // Then, measurements is {a1, a2, a3, a4, a5};\n-  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements is {2, 3, 8};\n-  // constMeasurements is {'c1', 'c2', 'c3'}, and positionOfConstMeasurements is {0, 4, 7}.\n-  // When to reproduce the order of measurements. The pseudocode is:\n-  //<pre>\n-  // current = 0;\n-  // if (min(notExist, const) <= current) {\n-  //  pull min_element(notExist, const);\n-  // } else {\n-  //  pull from measurements;\n-  // }\n-  // current ++;\n-  //</pre>\n-\n-  public void addNotExistMeasurement(int position, String measurement) {\n-    notExistMeasurements.add(measurement);\n-    positionOfNotExistMeasurements.add(position);\n-  }\n-\n-  public void addConstMeasurement(int position, String measurement) {\n-    constMeasurements.add(measurement);\n-    positionOfConstMeasurements.add(position);\n-  }\n-\n-  public List<String> getNotExistMeasurements() {\n-    return notExistMeasurements;\n-  }\n-\n-  public void setNotExistMeasurements(List<String> notExistMeasurements) {\n-    this.notExistMeasurements = notExistMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfNotExistMeasurements() {\n-    return positionOfNotExistMeasurements;\n-  }\n-\n-  public void setPositionOfNotExistMeasurements(\n-      List<Integer> positionOfNotExistMeasurements) {\n-    this.positionOfNotExistMeasurements = positionOfNotExistMeasurements;\n-  }\n-\n-  public List<String> getConstMeasurements() {\n-    return constMeasurements;\n-  }\n-\n-  public void setConstMeasurements(List<String> constMeasurements) {\n-    this.constMeasurements = constMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfConstMeasurements() {\n-    return positionOfConstMeasurements;\n-  }\n-\n-  public void setPositionOfConstMeasurements(List<Integer> positionOfConstMeasurements) {\n-    this.positionOfConstMeasurements = positionOfConstMeasurements;\n+  /**\n+   * Normal: the measurements which don't belong to NonExist and Constant.\n+   * NonExist: the measurements that do not exist in any device, data type is considered as String.\n+   * The value is considered as null.\n+   * Const: the measurements that have quotation mark. e.g. \"abc\",'11'.\n+   * The data type is considered as String and the value is considered is the same with measurement name.\n+   */\n+  public enum measurementType {\n+    Normal, NonExist, Const;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NjU1MQ=="}, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzQyODgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo0OTowNFrOFxEbYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0ODoxMVrOFxi1gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NzA5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public enum measurementType {\n          \n          \n            \n              public enum MeasurementType {", "url": "https://github.com/apache/iotdb/pull/874#discussion_r386997091", "createdAt": "2020-03-03T12:49:04Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -113,64 +114,14 @@ public void setAggregationPlan(AggregationPlan aggregationPlan) {\n     this.setOperatorType(Operator.OperatorType.AGGREGATION);\n   }\n \n-  //we use the following algorithm to reproduce the order of measurements that user writes.\n-  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n-  // column there is at least one device having it, and for each b_i column there is no device\n-  // having it, and 'c_i' is a const column.\n-  // Then, measurements is {a1, a2, a3, a4, a5};\n-  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements is {2, 3, 8};\n-  // constMeasurements is {'c1', 'c2', 'c3'}, and positionOfConstMeasurements is {0, 4, 7}.\n-  // When to reproduce the order of measurements. The pseudocode is:\n-  //<pre>\n-  // current = 0;\n-  // if (min(notExist, const) <= current) {\n-  //  pull min_element(notExist, const);\n-  // } else {\n-  //  pull from measurements;\n-  // }\n-  // current ++;\n-  //</pre>\n-\n-  public void addNotExistMeasurement(int position, String measurement) {\n-    notExistMeasurements.add(measurement);\n-    positionOfNotExistMeasurements.add(position);\n-  }\n-\n-  public void addConstMeasurement(int position, String measurement) {\n-    constMeasurements.add(measurement);\n-    positionOfConstMeasurements.add(position);\n-  }\n-\n-  public List<String> getNotExistMeasurements() {\n-    return notExistMeasurements;\n-  }\n-\n-  public void setNotExistMeasurements(List<String> notExistMeasurements) {\n-    this.notExistMeasurements = notExistMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfNotExistMeasurements() {\n-    return positionOfNotExistMeasurements;\n-  }\n-\n-  public void setPositionOfNotExistMeasurements(\n-      List<Integer> positionOfNotExistMeasurements) {\n-    this.positionOfNotExistMeasurements = positionOfNotExistMeasurements;\n-  }\n-\n-  public List<String> getConstMeasurements() {\n-    return constMeasurements;\n-  }\n-\n-  public void setConstMeasurements(List<String> constMeasurements) {\n-    this.constMeasurements = constMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfConstMeasurements() {\n-    return positionOfConstMeasurements;\n-  }\n-\n-  public void setPositionOfConstMeasurements(List<Integer> positionOfConstMeasurements) {\n-    this.positionOfConstMeasurements = positionOfConstMeasurements;\n+  /**\n+   * Normal: the measurements which don't belong to NonExist and Constant.\n+   * NonExist: the measurements that do not exist in any device, data type is considered as String.\n+   * The value is considered as null.\n+   * Const: the measurements that have quotation mark. e.g. \"abc\",'11'.\n+   * The data type is considered as String and the value is considered is the same with measurement name.\n+   */\n+  public enum measurementType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTI5Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/874#discussion_r387495296", "createdAt": "2020-03-04T07:48:11Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -113,64 +114,14 @@ public void setAggregationPlan(AggregationPlan aggregationPlan) {\n     this.setOperatorType(Operator.OperatorType.AGGREGATION);\n   }\n \n-  //we use the following algorithm to reproduce the order of measurements that user writes.\n-  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n-  // column there is at least one device having it, and for each b_i column there is no device\n-  // having it, and 'c_i' is a const column.\n-  // Then, measurements is {a1, a2, a3, a4, a5};\n-  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements is {2, 3, 8};\n-  // constMeasurements is {'c1', 'c2', 'c3'}, and positionOfConstMeasurements is {0, 4, 7}.\n-  // When to reproduce the order of measurements. The pseudocode is:\n-  //<pre>\n-  // current = 0;\n-  // if (min(notExist, const) <= current) {\n-  //  pull min_element(notExist, const);\n-  // } else {\n-  //  pull from measurements;\n-  // }\n-  // current ++;\n-  //</pre>\n-\n-  public void addNotExistMeasurement(int position, String measurement) {\n-    notExistMeasurements.add(measurement);\n-    positionOfNotExistMeasurements.add(position);\n-  }\n-\n-  public void addConstMeasurement(int position, String measurement) {\n-    constMeasurements.add(measurement);\n-    positionOfConstMeasurements.add(position);\n-  }\n-\n-  public List<String> getNotExistMeasurements() {\n-    return notExistMeasurements;\n-  }\n-\n-  public void setNotExistMeasurements(List<String> notExistMeasurements) {\n-    this.notExistMeasurements = notExistMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfNotExistMeasurements() {\n-    return positionOfNotExistMeasurements;\n-  }\n-\n-  public void setPositionOfNotExistMeasurements(\n-      List<Integer> positionOfNotExistMeasurements) {\n-    this.positionOfNotExistMeasurements = positionOfNotExistMeasurements;\n-  }\n-\n-  public List<String> getConstMeasurements() {\n-    return constMeasurements;\n-  }\n-\n-  public void setConstMeasurements(List<String> constMeasurements) {\n-    this.constMeasurements = constMeasurements;\n-  }\n-\n-  public List<Integer> getPositionOfConstMeasurements() {\n-    return positionOfConstMeasurements;\n-  }\n-\n-  public void setPositionOfConstMeasurements(List<Integer> positionOfConstMeasurements) {\n-    this.positionOfConstMeasurements = positionOfConstMeasurements;\n+  /**\n+   * Normal: the measurements which don't belong to NonExist and Constant.\n+   * NonExist: the measurements that do not exist in any device, data type is considered as String.\n+   * The value is considered as null.\n+   * Const: the measurements that have quotation mark. e.g. \"abc\",'11'.\n+   * The data type is considered as String and the value is considered is the same with measurement name.\n+   */\n+  public enum measurementType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NzA5MQ=="}, "originalCommit": {"oid": "c21e7c984d0ca671f9b22c5912f2e0defa5ed240"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTQ5Mjg5OnYy", "diffSide": "RIGHT", "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjoyNjo0MVrOFxrRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMzozOTo1MFrOFyFgHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMzQ3NQ==", "bodyText": "\u4ec0\u4e48\u662f\u6620\u5c04\u503c?", "url": "https://github.com/apache/iotdb/pull/874#discussion_r387633475", "createdAt": "2020-03-04T12:26:41Z", "author": {"login": "qiaojialin"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d8c75df982bf475cb5e880846f24b9de2f62dc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA2MzI2MA==", "bodyText": "\u5df2\u4fee\u6539\u3002", "url": "https://github.com/apache/iotdb/pull/874#discussion_r388063260", "createdAt": "2020-03-05T03:39:50Z", "author": {"login": "Alima777"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMzQ3NQ=="}, "originalCommit": {"oid": "48d8c75df982bf475cb5e880846f24b9de2f62dc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTQ5NzExOnYy", "diffSide": "RIGHT", "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjoyODowN1rOFxrT9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMzozOTo1NFrOFyFgKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNDE2Nw==", "bodyText": "\u628a\u5b9a\u4e49\u52a0\u4e0a\u5427\uff0c\u6bd4\u5982map\u5565\u7684", "url": "https://github.com/apache/iotdb/pull/874#discussion_r387634167", "createdAt": "2020-03-04T12:28:07Z", "author": {"login": "qiaojialin"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002\n+\n+### AlignByDevicePlan \u4e2d\u91cd\u8981\u5b57\u6bb5\u542b\u4e49\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b AlignByDevicePlan \u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+- measurements\uff1a\u67e5\u8be2\u4e2d\u51fa\u73b0\u7684 measurement \u5217\u8868\u3002\n+- dataTypeMapping: \u8be5\u53d8\u91cf\u7ee7\u627f\u81ea\u57fa\u7c7b QueryPlan\uff0c\u5176\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u8ba1\u7b97\u6bcf\u4e2a\u8bbe\u5907\u7684\u6267\u884c\u8def\u5f84\u65f6\uff0c\u63d0\u4f9b\u6b64\u6b21\u67e5\u8be2\u7684 paths \u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d8c75df982bf475cb5e880846f24b9de2f62dc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA2MzI3Mg==", "bodyText": "\u5df2\u4fee\u6539\u3002", "url": "https://github.com/apache/iotdb/pull/874#discussion_r388063272", "createdAt": "2020-03-05T03:39:54Z", "author": {"login": "Alima777"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002\n+\n+### AlignByDevicePlan \u4e2d\u91cd\u8981\u5b57\u6bb5\u542b\u4e49\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b AlignByDevicePlan \u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+- measurements\uff1a\u67e5\u8be2\u4e2d\u51fa\u73b0\u7684 measurement \u5217\u8868\u3002\n+- dataTypeMapping: \u8be5\u53d8\u91cf\u7ee7\u627f\u81ea\u57fa\u7c7b QueryPlan\uff0c\u5176\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u8ba1\u7b97\u6bcf\u4e2a\u8bbe\u5907\u7684\u6267\u884c\u8def\u5f84\u65f6\uff0c\u63d0\u4f9b\u6b64\u6b21\u67e5\u8be2\u7684 paths \u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNDE2Nw=="}, "originalCommit": {"oid": "48d8c75df982bf475cb5e880846f24b9de2f62dc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzk2OTUyOnYy", "diffSide": "RIGHT", "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMToyMToyN1rOFyDccw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMzo0MDo0MVrOFyFg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyOTU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - measurementType\uff1a\u8bb0\u5f55\u4e09\u79cd measurement \u7c7b\u578b\u3002\u5728\u4efb\u4f55\u8bbe\u5907\u4e2d\u90fd\u4e0d\u5b58\u5728\u7684 measurement \u4e3a `NonExist` \u7c7b\u578b\uff1b\u6709\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u7684 measurement \u4e3a `Constant` \u7c7b\u578b\uff1b\u4e0d\u5c5e\u4e8e\u4ee5\u4e0a\u4e24\u79cd\u7684\u6b63\u5e38 measurement \u4e3a `Exist` \u7c7b\u578b\u3002\n          \n          \n            \n            - measurementType\uff1a\u8bb0\u5f55\u4e09\u79cd measurement \u7c7b\u578b\u3002\u5728\u4efb\u4f55\u8bbe\u5907\u4e2d\u90fd\u4e0d\u5b58\u5728\u7684 measurement \u4e3a `NonExist` \u7c7b\u578b\uff1b\u6709\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u7684 measurement \u4e3a `Constant` \u7c7b\u578b\uff1b\u5b58\u5728\u7684 measurement \u4e3a `Exist` \u7c7b\u578b\u3002", "url": "https://github.com/apache/iotdb/pull/874#discussion_r388029555", "createdAt": "2020-03-05T01:21:27Z", "author": {"login": "qiaojialin"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002\n+\n+### AlignByDevicePlan \u4e2d\u91cd\u8981\u5b57\u6bb5\u542b\u4e49\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b AlignByDevicePlan \u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+- measurements\uff1a\u67e5\u8be2\u4e2d\u51fa\u73b0\u7684 measurement \u5217\u8868\u3002\n+- dataTypeMapping: \u8be5\u53d8\u91cf\u7ee7\u627f\u81ea\u57fa\u7c7b QueryPlan\uff0c\u5176\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u8ba1\u7b97\u6bcf\u4e2a\u8bbe\u5907\u7684\u6267\u884c\u8def\u5f84\u65f6\uff0c\u63d0\u4f9b\u6b64\u6b21\u67e5\u8be2\u7684 paths \u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\u3002\n+- deviceToMeasurementsMap, deviceToFilterMap: \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u5206\u522b\u7528\u6765\u5b58\u50a8\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\u548c\u8fc7\u6ee4\u6761\u4ef6\u3002\n+- measurementDataTypeMap\uff1aAlignByDevicePlan \u8981\u6c42\u4e0d\u540c\u8bbe\u5907\u7684\u540c\u540d sensor \u6570\u636e\u7c7b\u578b\u4e00\u81f4\uff0c\u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a `measurementName -> dataType` \u7684 Map \u7ed3\u6784\uff0c\u7528\u6765\u9a8c\u8bc1\u540c\u540d sensor \u7684\u6570\u636e\u7c7b\u578b\u4e00\u81f4\u6027\u3002\u5982 `root.sg.d1.s1` \u548c `root.sg.d2.s1` \u5e94\u8be5\u662f\u540c\u4e00\u6570\u636e\u7c7b\u578b\u3002\n+- measurementType\uff1a\u8bb0\u5f55\u4e09\u79cd measurement \u7c7b\u578b\u3002\u5728\u4efb\u4f55\u8bbe\u5907\u4e2d\u90fd\u4e0d\u5b58\u5728\u7684 measurement \u4e3a `NonExist` \u7c7b\u578b\uff1b\u6709\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u7684 measurement \u4e3a `Constant` \u7c7b\u578b\uff1b\u4e0d\u5c5e\u4e8e\u4ee5\u4e0a\u4e24\u79cd\u7684\u6b63\u5e38 measurement \u4e3a `Exist` \u7c7b\u578b\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d8c75df982bf475cb5e880846f24b9de2f62dc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA2MzQ1OA==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/874#discussion_r388063458", "createdAt": "2020-03-05T03:40:41Z", "author": {"login": "Alima777"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002\n+\n+### AlignByDevicePlan \u4e2d\u91cd\u8981\u5b57\u6bb5\u542b\u4e49\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b AlignByDevicePlan \u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+- measurements\uff1a\u67e5\u8be2\u4e2d\u51fa\u73b0\u7684 measurement \u5217\u8868\u3002\n+- dataTypeMapping: \u8be5\u53d8\u91cf\u7ee7\u627f\u81ea\u57fa\u7c7b QueryPlan\uff0c\u5176\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u8ba1\u7b97\u6bcf\u4e2a\u8bbe\u5907\u7684\u6267\u884c\u8def\u5f84\u65f6\uff0c\u63d0\u4f9b\u6b64\u6b21\u67e5\u8be2\u7684 paths \u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\u3002\n+- deviceToMeasurementsMap, deviceToFilterMap: \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u5206\u522b\u7528\u6765\u5b58\u50a8\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\u548c\u8fc7\u6ee4\u6761\u4ef6\u3002\n+- measurementDataTypeMap\uff1aAlignByDevicePlan \u8981\u6c42\u4e0d\u540c\u8bbe\u5907\u7684\u540c\u540d sensor \u6570\u636e\u7c7b\u578b\u4e00\u81f4\uff0c\u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a `measurementName -> dataType` \u7684 Map \u7ed3\u6784\uff0c\u7528\u6765\u9a8c\u8bc1\u540c\u540d sensor \u7684\u6570\u636e\u7c7b\u578b\u4e00\u81f4\u6027\u3002\u5982 `root.sg.d1.s1` \u548c `root.sg.d2.s1` \u5e94\u8be5\u662f\u540c\u4e00\u6570\u636e\u7c7b\u578b\u3002\n+- measurementType\uff1a\u8bb0\u5f55\u4e09\u79cd measurement \u7c7b\u578b\u3002\u5728\u4efb\u4f55\u8bbe\u5907\u4e2d\u90fd\u4e0d\u5b58\u5728\u7684 measurement \u4e3a `NonExist` \u7c7b\u578b\uff1b\u6709\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u7684 measurement \u4e3a `Constant` \u7c7b\u578b\uff1b\u4e0d\u5c5e\u4e8e\u4ee5\u4e0a\u4e24\u79cd\u7684\u6b63\u5e38 measurement \u4e3a `Exist` \u7c7b\u578b\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyOTU1NQ=="}, "originalCommit": {"oid": "48d8c75df982bf475cb5e880846f24b9de2f62dc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDM5MDgzOnYy", "diffSide": "RIGHT", "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjowOTo0OVrOFyHZvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NDowNFrOFyKouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5NDM5Ng==", "bodyText": "\u518d\u6839\u636e\u53d8\u6362\u540e\u7684 RowRecord \u5199\u5165\u8f93\u51fa\u6570\u636e\u6d41\u540e", "url": "https://github.com/apache/iotdb/pull/874#discussion_r388094396", "createdAt": "2020-03-05T06:09:49Z", "author": {"login": "SilverNarcissus"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002\n+\n+### AlignByDevicePlan \u4e2d\u91cd\u8981\u5b57\u6bb5\u542b\u4e49\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b AlignByDevicePlan \u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+- `List<String> measurements`\uff1a\u67e5\u8be2\u4e2d\u51fa\u73b0\u7684 measurement \u5217\u8868\u3002\n+- `Map<Path, TSDataType> dataTypeMapping`: \u8be5\u53d8\u91cf\u7ee7\u627f\u81ea\u57fa\u7c7b QueryPlan\uff0c\u5176\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u8ba1\u7b97\u6bcf\u4e2a\u8bbe\u5907\u7684\u6267\u884c\u8def\u5f84\u65f6\uff0c\u63d0\u4f9b\u6b64\u6b21\u67e5\u8be2\u7684 paths \u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\u3002\n+- `Map<String, Set<String>> deviceToMeasurementsMap`, `Map<String, IExpression> deviceToFilterMap`: \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u5206\u522b\u7528\u6765\u5b58\u50a8\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\u548c\u8fc7\u6ee4\u6761\u4ef6\u3002\n+- `Map<String, TSDataType> measurementDataTypeMap`\uff1aAlignByDevicePlan \u8981\u6c42\u4e0d\u540c\u8bbe\u5907\u7684\u540c\u540d sensor \u6570\u636e\u7c7b\u578b\u4e00\u81f4\uff0c\u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a `measurementName -> dataType` \u7684 Map \u7ed3\u6784\uff0c\u7528\u6765\u9a8c\u8bc1\u540c\u540d sensor \u7684\u6570\u636e\u7c7b\u578b\u4e00\u81f4\u6027\u3002\u5982 `root.sg.d1.s1` \u548c `root.sg.d2.s1` \u5e94\u8be5\u662f\u540c\u4e00\u6570\u636e\u7c7b\u578b\u3002\n+- `enum MeasurementType`\uff1a\u8bb0\u5f55\u4e09\u79cd measurement \u7c7b\u578b\u3002\u5728\u4efb\u4f55\u8bbe\u5907\u4e2d\u90fd\u4e0d\u5b58\u5728\u7684 measurement \u4e3a `NonExist` \u7c7b\u578b\uff1b\u6709\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u7684 measurement \u4e3a `Constant` \u7c7b\u578b\uff1b\u5b58\u5728\u7684 measurement \u4e3a `Exist` \u7c7b\u578b\u3002\n+- `Map<String, MeasurementType> measurementTypeMap`: \u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a `measureName -> measurementType` \u7684 Map \u7ed3\u6784\uff0c\u7528\u6765\u8bb0\u5f55\u67e5\u8be2\u4e2d\u6240\u6709 measurement \u7684\u7c7b\u578b\u3002\n+- groupByPlan, fillQueryPlan, aggregationPlan\uff1a\u4e3a\u4e86\u907f\u514d\u5197\u4f59\uff0c\u8fd9\u4e09\u4e2a\u6267\u884c\u8ba1\u5212\u88ab\u8bbe\u5b9a\u4e3a RawDataQueryPlan \u7684\u5b50\u7c7b\uff0c\u800c\u5728 AlignByDevicePlan \u4e2d\u88ab\u8bbe\u7f6e\u4e3a\u53d8\u91cf\u3002\u5982\u679c\u67e5\u8be2\u8ba1\u5212\u5c5e\u4e8e\u8fd9\u4e09\u4e2a\u8ba1\u5212\u4e2d\u7684\u4e00\u79cd\uff0c\u5219\u8be5\u5b57\u6bb5\u4f1a\u88ab\u8d4b\u503c\u5e76\u4fdd\u5b58\u3002\n+\n+\u5728\u8fdb\u884c\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\u7684\u8bb2\u89e3\u524d\uff0c\u5148\u7ed9\u51fa\u4e00\u4e2a\u8986\u76d6\u8f83\u4e3a\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u89e3\u91ca\u8fc7\u7a0b\u4e2d\u5c06\u7ed3\u5408\u8be5\u793a\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002\n+\n+```sql\n+SELECT s1, \"1\", *, s2, s5 FROM root.sg.d1, root.sg.* WHERE time = 1 AND s1 < 25 ALIGN BY DEVICE\n+```\n+\n+\u5176\u4e2d\uff0c\u7cfb\u7edf\u4e2d\u7684\u65f6\u95f4\u5e8f\u5217\u4e3a\uff1a\n+\n+- root.sg.d1.s1\n+- root.sg.d1.s2\n+- root.sg.d2.s1\n+\n+\u5b58\u50a8\u7ec4 `root.sg` \u5171\u5305\u542b\u4e24\u4e2a\u8bbe\u5907 d1 \u548c d2\uff0c\u5176\u4e2d d1 \u6709\u4e24\u4e2a\u4f20\u611f\u5668 s1 \u548c s2\uff0cd2 \u53ea\u6709\u4f20\u611f\u5668 s1\uff0c\u76f8\u540c\u4f20\u611f\u5668 s1 \u7684\u6570\u636e\u7c7b\u578b\u76f8\u540c\u3002\n+\n+\u4e0b\u9762\u5c06\u6309\u5177\u4f53\u8fc7\u7a0b\u8fdb\u884c\u5206\u522b\u89e3\u91ca\uff1a\n+\n+### \u903b\u8f91\u8ba1\u5212\u751f\u6210\n+\n+- org.apache.iotdb.db.qp.Planner\n+\n+\u4e0e\u539f\u59cb\u6570\u636e\u67e5\u8be2\u4e0d\u540c\uff0c\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5e76\u4e0d\u5728\u6b64\u9636\u6bb5\u8fdb\u884c SELECT \u8bed\u53e5\u548c WHERE \u8bed\u53e5\u4e2d\u540e\u7f00\u8def\u5f84\u7684\u62fc\u63a5\uff0c\u800c\u5c06\u5728\u540e\u7eed\u751f\u6210\u7269\u7406\u8ba1\u5212\u65f6\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\u3002\u56e0\u6b64\uff0c\u6309\u8bbe\u5907\u5bf9\u9f50\u5728\u6b64\u9636\u6bb5\u6240\u505a\u7684\u5de5\u4f5c\u53ea\u5305\u62ec\u5bf9 WHERE \u8bed\u53e5\u4e2d\u8fc7\u6ee4\u6761\u4ef6\u7684\u4f18\u5316\u3002\n+\n+\u5bf9\u8fc7\u6ee4\u6761\u4ef6\u7684\u4f18\u5316\u4e3b\u8981\u5305\u62ec\u4e09\u90e8\u5206\uff1a\u53bb\u975e\u3001\u8f6c\u5316\u6790\u53d6\u8303\u5f0f\u3001\u5408\u5e76\u540c\u8def\u5f84\u8fc7\u6ee4\u6761\u4ef6\u3002\u5bf9\u5e94\u7684\u4f18\u5316\u5668\u5206\u522b\u4e3a\uff1aRemoveNotOptimizer, DnfFilterOptimizer, MergeSingleFilterOptimizer\u3002\u8be5\u90e8\u5206\u903b\u8f91\u53ef\u53c2\u8003\uff1a[Planner](/#/SystemDesign/progress/chap2/sec2).\n+\n+### \u7269\u7406\u8ba1\u5212\u751f\u6210\n+\n+- org.apache.iotdb.db.qp.strategy.PhysicalGenerator\n+\n+\u751f\u6210\u903b\u8f91\u8ba1\u5212\u540e\uff0c\u5c06\u8c03\u7528 PhysicalGenerator \u7c7b\u4e2d\u7684 `transformToPhysicalPlan()` \u65b9\u6cd5\u5c06\u8be5\u903b\u8f91\u8ba1\u5212\u8f6c\u5316\u4e3a\u7269\u7406\u8ba1\u5212\u3002\u5bf9\u4e8e\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\uff0c\u8be5\u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u5b9e\u73b0\u5728 `transformQuery()` \u65b9\u6cd5\u4e2d\u3002\n+\n+**\u8be5\u9636\u6bb5\u6240\u505a\u7684\u4e3b\u8981\u5de5\u4f5c\u4e3a\u751f\u6210\u67e5\u8be2\u5bf9\u5e94\u7684** `AlignByDevicePlan`\uff0c**\u586b\u5145\u5176\u4e2d\u7684\u53d8\u91cf\u4fe1\u606f\u3002**\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b `transformQuery()` \u65b9\u6cd5\u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49(\u4e0e AlignByDevicePlan \u4e2d\u91cd\u590d\u7684\u5b57\u6bb5\u89c1\u4e0a\u6587)\uff1a\n+\n+- prefixPaths, suffixPaths\uff1a\u524d\u8005\u4e3a FROM \u5b50\u53e5\u4e2d\u7684\u524d\u7f00\u8def\u5f84\uff0c\u793a\u4f8b\u4e2d\u4e3a `[root.sg.d1, root.sg.*]`; \u540e\u8005\u4e3a SELECT \u5b50\u53e5\u4e2d\u7684\u540e\u7f00\u8def\u5f84\uff0c\u793a\u4f8b\u4e2d\u4e3a `[s1, \"1\", *, s2, s5]`.\n+- devices\uff1a\u5bf9\u524d\u7f00\u8def\u5f84\u53bb\u901a\u914d\u7b26\u548c\u8bbe\u5907\u53bb\u91cd\u540e\u5f97\u5230\u7684\u8bbe\u5907\u5217\u8868\uff0c\u793a\u4f8b\u4e2d\u4e3a `[root.sg.d1, root.sg.d2]`\u3002\n+- measurementSetOfGivenSuffix\uff1a\u4e2d\u95f4\u53d8\u91cf\uff0c\u8bb0\u5f55\u67d0\u4e00 suffix \u5bf9\u5e94\u7684 measurement\uff0c\u793a\u4f8b\u4e2d\uff0c\u5bf9\u4e8e\u540e\u7f00 \\*, `measurementSetOfGivenSuffix = {s1,s2}`\uff0c\u5bf9\u4e8e\u540e\u7f00 s1, `measurementSetOfGivenSuffix = {s1}`;\n+\n+\u63a5\u4e0b\u6765\u4ecb\u7ecd AlignByDevicePlan \u7684\u8ba1\u7b97\u8fc7\u7a0b\uff1a\n+\n+1. \u68c0\u67e5\u67e5\u8be2\u7c7b\u578b\u662f\u5426\u4e3a groupByPlan, fillQueryPlan, aggregationPlan \u8fd9\u4e09\u7c7b\u67e5\u8be2\u4e2d\u7684\u4e00\u79cd\uff0c\u5982\u679c\u662f\u5219\u5bf9\u76f8\u5e94\u7684\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\uff0c\u5e76\u66f4\u6539 `AlignByDevicePlan` \u7684\u67e5\u8be2\u7c7b\u578b\u3002\n+2. \u904d\u5386 SELECT \u540e\u7f00\u8def\u5f84\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u540e\u7f00\u8def\u5f84\u8bbe\u7f6e\u4e00\u4e2a\u4e2d\u95f4\u53d8\u91cf\u4e3a `measurementSetOfGivenSuffix`\uff0c\u7528\u6765\u8bb0\u5f55\u8be5\u540e\u7f00\u8def\u5f84\u5bf9\u5e94\u7684\u6240\u6709 measurement\u3002\u5982\u679c\u540e\u7f00\u8def\u5f84\u4ee5\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5f00\u5934\uff0c\u5219\u76f4\u63a5\u5728 `measurements` \u4e2d\u589e\u52a0\u8be5\u503c\uff0c\u5e76\u8bb0\u5f55\u5176\u7c7b\u578b\u4e3a `Constant` \u7c7b\u578b\u3002\n+3. \u5426\u5219\u5c06\u8bbe\u5907\u5217\u8868\u4e0e\u8be5\u540e\u7f00\u8def\u5f84\u62fc\u63a5\uff0c\u5f97\u5230\u5b8c\u6574\u7684\u8def\u5f84\uff0c\u5982\u679c\u62fc\u63a5\u540e\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u8be5 measurement \u662f\u5426\u5728\u5176\u5b83\u8bbe\u5907\u4e2d\u5b58\u5728\uff0c\u5982\u679c\u90fd\u6ca1\u6709\u5219\u6682\u65f6\u8bc6\u522b\u4e3a `NonExist`\uff0c\u5982\u679c\u540e\u7eed\u51fa\u73b0\u8bbe\u5907\u5b58\u5728\u8be5 measurement\uff0c\u5219\u8986\u76d6 `NonExist` \u503c\u4e3a `Exist`\u3002\n+4. \u5982\u679c\u62fc\u63a5\u540e\u8def\u5f84\u5b58\u5728\uff0c\u5219\u8bc1\u660e measurement \u662f `Exist` \u7c7b\u578b\uff0c\u9700\u8981\u68c0\u9a8c\u6570\u636e\u7c7b\u578b\u7684\u4e00\u81f4\u6027\uff0c\u4e0d\u6ee1\u8db3\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u6ee1\u8db3\u5219\u8bb0\u5f55\u4e0b\u8be5 Measurement\uff0c\u5bf9 `measurementSetOfGivenSuffix`, `deviceToMeasurementsMap` \u7b49\u8fdb\u884c\u66f4\u65b0\u3002\n+5. \u5728\u4e00\u5c42 suffix \u5faa\u73af\u7ed3\u675f\u540e\uff0c\u5c06\u8be5\u5c42\u5faa\u73af\u4e2d\u51fa\u73b0\u7684 `measurementSetOfGivenSuffix` \u52a0\u5165 `measurements` \u4e2d\u3002\u5728\u6574\u4e2a\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u5c06\u5faa\u73af\u4e2d\u5f97\u5230\u7684\u53d8\u91cf\u4fe1\u606f\u8d4b\u503c\u5230 AlignByDevicePlan \u4e2d\u3002\u6b64\u5904\u5f97\u5230\u7684 measurements \u5217\u8868\u662f\u672a\u7ecf\u8fc7\u53bb\u91cd\u7684\uff0c\u5728\u751f\u6210 `ColumnHeader` \u65f6\u5c06\u8fdb\u884c\u53bb\u91cd\u3002\n+6. \u6700\u540e\u8c03\u7528 `concatFilterByDevice()` \u65b9\u6cd5\u8ba1\u7b97 `deviceToFilterMap`\uff0c\u5f97\u5230\u5c06\u6bcf\u4e2a\u8bbe\u5907\u5206\u522b\u62fc\u63a5\u540e\u5bf9\u5e94\u7684 Filter \u4fe1\u606f\u3002\n+\n+```java\n+Map<String, IExpression> concatFilterByDevice(List<String> devices,\n+      FilterOperator operator)\n+\u8f93\u5165\uff1a\u53bb\u91cd\u540e\u7684 devices \u5217\u8868\u548c\u672a\u62fc\u63a5\u7684 FilterOperator\n+\u8f93\u5165\uff1a\u7ecf\u8fc7\u62fc\u63a5\u540e\u7684 deviceToFilterMap\uff0c\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684 Filter \u4fe1\u606f\n+```\n+\n+`concatFilterByDevice()` \u65b9\u6cd5\u7684\u4e3b\u8981\u5904\u7406\u903b\u8f91\u5728 `concatFilterPath()` \u4e2d\uff1a\n+\n+`concatFilterPath()` \u65b9\u6cd5\u904d\u5386\u672a\u62fc\u63a5\u7684 FilterOperator \u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u53d6\u8be5\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4ee5 time \u6216 root \u5f00\u5934\u5219\u4e0d\u505a\u5904\u7406\uff0c\u5426\u5219\u5c06\u8bbe\u5907\u540d\u4e0e\u8282\u70b9\u8def\u5f84\u8fdb\u884c\u62fc\u63a5\u540e\u8fd4\u56de\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5bf9\u8be5\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u8fdb\u884c\u8fed\u4ee3\u5904\u7406\u3002\u793a\u4f8b\u4e2d\uff0c\u8bbe\u59071\u8fc7\u6ee4\u6761\u4ef6\u62fc\u63a5\u540e\u7684\u7ed3\u679c\u4e3a `time = 1 AND root.sg.d1.s1 < 25`\uff0c\u8bbe\u59072\u4e3a `time = 1 AND root.sg.d2.s1 < 25`\u3002\n+\n+\u4e0b\u9762\u7528\u793a\u4f8b\u603b\u7ed3\u4e00\u4e0b\u901a\u8fc7\u8be5\u9636\u6bb5\u8ba1\u7b97\u5f97\u5230\u7684\u53d8\u91cf\u4fe1\u606f\uff1a\n+\n+- measurement \u5217\u8868 `measurements`\uff1a`[s1, \"1\", s1, s2, s2, s5]`\n+- measurement \u7c7b\u578b `measurementTypeMap`\uff1a\n+  -  `s1 -> Exist`\n+  -  `s2 -> Exist`\n+  -  `\"1\" -> Constant`\n+  -  `s5 -> NonExist`\n+- \u6bcf\u4e2a\u8bbe\u5907\u7684\u6d4b\u70b9 `deviceToMeasurementsMap`:\n+  -  `root.sg.d1 -> s1, s2`\n+  -  `root.sg.d2 -> s1`\n+- \u6bcf\u4e2a\u8bbe\u5907\u7684\u8fc7\u6ee4\u6761\u4ef6 `deviceToFilterMap`\uff1a\n+  -  `root.sg.d1 -> time = 1 AND root.sg.d1.s1 < 25`\n+  -  `root.sg.d2 -> time = 1 AND root.sg.d2.s1 < 25`\n+\n+### \u6784\u9020\u8868\u5934 (ColumnHeader)\n+\n+- org.apache.iotdb.db.service.TSServiceImpl\n+\n+\u5728\u751f\u6210\u7269\u7406\u8ba1\u5212\u540e\uff0c\u5219\u53ef\u4ee5\u6267\u884c TSServiceImpl \u4e2d\u7684 executeQueryStatement() \u65b9\u6cd5\u751f\u6210\u7ed3\u679c\u96c6\u5e76\u8fd4\u56de\uff0c\u5176\u4e2d\u7b2c\u4e00\u6b65\u662f\u6784\u9020\u8868\u5934\u3002\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5728\u8c03\u7528 `TSServiceImpl.getQueryColumnHeaders()` \u65b9\u6cd5\u540e\uff0c\u6839\u636e\u67e5\u8be2\u7c7b\u578b\u8fdb\u5165 `TSServiceImpl.getAlignByDeviceQueryHeaders()` \u6765\u6784\u9020\u8868\u5934\u3002\n+\n+`getAlignByDeviceQueryHeaders()` \u65b9\u6cd5\u58f0\u660e\u5982\u4e0b\uff1a\n+\n+```java\n+private void getAlignByDeviceQueryHeaders(\n+      AlignByDevicePlan plan, List<String> respColumns, List<String> columnTypes)\n+\u8f93\u5165\uff1a\u5f53\u524d\u6267\u884c\u7684\u7269\u7406\u8ba1\u5212 AlignByDevicePlan \u548c\u9700\u8981\u8f93\u51fa\u7684\u5217\u540d respColumns \u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b columnTypes\n+\u8f93\u51fa\uff1a\u8ba1\u7b97\u5f97\u5230\u7684\u5217\u540d respColumns \u548c\u6570\u636e\u7c7b\u578b columnTypes\n+```\n+\n+\u5176\u5177\u4f53\u5b9e\u73b0\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u9996\u5148\u52a0\u5165 `Device` \u5217\uff0c\u5176\u6570\u636e\u7c7b\u578b\u4e3a `TEXT`\uff1b\n+2. \u904d\u5386\u672a\u53bb\u91cd\u7684 measurements \u5217\u8868\uff0c\u5224\u65ad\u5f53\u524d\u904d\u5386 measurement \u7684\u7c7b\u578b\uff0c\u5982\u679c\u662f `Exist` \u7c7b\u578b\u5219\u4ece `measurementTypeMap` \u4e2d\u53d6\u5f97\u5176\u7c7b\u578b\uff1b\u5176\u4f59\u4e24\u79cd\u7c7b\u578b\u8bbe\u5176\u7c7b\u578b\u4e3a `TEXT`\uff0c\u7136\u540e\u5c06 measurement \u53ca\u5176\u7c7b\u578b\u52a0\u5165\u8868\u5934\u6570\u636e\u7ed3\u6784\u4e2d\u3002\n+3. \u6839\u636e\u4e2d\u95f4\u53d8\u91cf `deduplicatedMeasurements` \u5bf9 measurements \u8fdb\u884c\u53bb\u91cd\u3002\n+\n+\u6700\u7ec8\u5f97\u5230\u7684 Header \u4e3a\uff1a\n+\n+| Time | Device | s1  | 1   | s1  | s2  | s2  | s5  |\n+| ---- | ------ | --- | --- | --- | --- | --- | --- |\n+|      |        |     |     |     |     |     |     |\n+\n+\u53bb\u91cd\u540e\u7684 `measurements` \u4e3a `[s1, \"1\", s2, s5]`\u3002\n+\n+### \u7ed3\u679c\u96c6\u751f\u6210\n+\n+\u751f\u6210 ColumnHeader \u540e\uff0c\u6700\u540e\u4e00\u6b65\u4e3a\u751f\u6210\u7ed3\u679c\u96c6\u586b\u5145\u7ed3\u679c\u5e76\u8fd4\u56de\u3002\n+\n+#### \u7ed3\u679c\u96c6\u521b\u5efa\n+\n+- org.apache.iotdb.db.service.TSServiceImpl\n+\n+\u8be5\u9636\u6bb5\u9700\u8981\u8c03\u7528 `TSServiceImpl.createQueryDataSet()` \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u679c\u96c6\uff0c\u8fd9\u90e8\u5206\u5b9e\u73b0\u903b\u8f91\u8f83\u4e3a\u7b80\u5355\uff0c\u5bf9\u4e8e AlignByDeviceQuery \u800c\u8a00\uff0c\u53ea\u9700\u8981\u65b0\u5efa\u4e00\u4e2a `AlignByDeviceDataSet` \u5373\u53ef\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u5c06\u628a AlignByDevicePlan \u4e2d\u7684\u53c2\u6570\u8d4b\u503c\u5230\u65b0\u5efa\u7684\u7ed3\u679c\u96c6\u4e2d\u3002\n+\n+#### \u7ed3\u679c\u96c6\u586b\u5145\n+\n+- org.apache.iotdb.db.utils.QueryDataSetUtils\n+\n+\u63a5\u4e0b\u6765\u9700\u8981\u586b\u5145\u7ed3\u679c\uff0cAlignByDeviceQuery \u5c06\u8c03\u7528 `TSServiceImpl.fillRpcReturnData()` \u65b9\u6cd5\uff0c\u7136\u540e\u6839\u636e\u67e5\u8be2\u7c7b\u578b\u8fdb\u5165 `QueryDataSetUtils.convertQueryDataSetByFetchSize()` \u65b9\u6cd5.\n+\n+`convertQueryDataSetByFetchSize()` \u65b9\u6cd5\u4e2d\u83b7\u53d6\u7ed3\u679c\u7684\u91cd\u8981\u65b9\u6cd5\u4e3a QueryDataSet \u7684 `hasNext()` \u65b9\u6cd5\u3002\n+\n+`hasNext()` \u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u5224\u65ad\u662f\u5426\u6709\u89c4\u5b9a\u884c\u504f\u79fb\u91cf `rowOffset`\uff0c\u5982\u679c\u6709\u5219\u8df3\u8fc7\u9700\u8981\u504f\u79fb\u7684\u884c\u6570\uff1b\u5982\u679c\u7ed3\u679c\u603b\u884c\u6570\u5c11\u4e8e\u89c4\u5b9a\u7684\u504f\u79fb\u91cf\uff0c\u5219\u8fd4\u56de false\u3002\n+2. \u5224\u65ad\u662f\u5426\u6709\u89c4\u5b9a\u884c\u6570\u9650\u5236 `rowLimit`\uff0c\u5982\u679c\u6709\u5219\u6bd4\u8f83\u5f53\u524d\u8f93\u51fa\u884c\u6570\uff0c\u5f53\u524d\u8f93\u51fa\u884c\u6570\u5927\u4e8e\u884c\u6570\u9650\u5236\u5219\u8fd4\u56de false\u3002\n+3. \u8fdb\u5165 `AlignByDeviceDataSet.hasNextWithoutConstraint()` \u65b9\u6cd5\n+\n+<br>\n+\n+- org.apache.iotdb.db.query.dataset.AlignByDeviceDataSet\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b\u7ed3\u679c\u96c6\u4e2d\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+\n+- `deviceIterator`\uff1a\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u672c\u8d28\u4e0a\u662f\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u8be5\u5b57\u6bb5\u5373\u4e3a\u8bbe\u5907\u7684\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u67e5\u8be2\u83b7\u53d6\u4e00\u4e2a\u8bbe\u5907\u8fdb\u884c\u3002\n+- `currentDataSet`\uff1a\u8be5\u5b57\u6bb5\u4ee3\u8868\u4e86\u672c\u6b21\u5bf9\u67d0\u8bbe\u5907\u67e5\u8be2\u6240\u83b7\u5f97\u7684\u7ed3\u679c\u96c6\u3002\n+\n+`hasNextWithoutConstraint()` \u65b9\u6cd5\u6240\u505a\u7684\u5de5\u4f5c\u4e3b\u8981\u662f\u5224\u65ad\u5f53\u524d\u7ed3\u679c\u96c6\u662f\u5426\u6709\u4e0b\u4e00\u7ed3\u679c\uff0c\u6ca1\u6709\u5219\u83b7\u53d6\u4e0b\u4e00\u8bbe\u5907\uff0c\u8ba1\u7b97\u8be5\u8bbe\u5907\u6267\u884c\u67e5\u8be2\u9700\u8981\u7684\u8def\u5f84\u3001\u6570\u636e\u7c7b\u578b\u53ca\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u6309\u5176\u67e5\u8be2\u7c7b\u578b\u6267\u884c\u5177\u4f53\u7684\u67e5\u8be2\u8ba1\u5212\u540e\u83b7\u5f97\u7ed3\u679c\u96c6\uff0c\u76f4\u81f3\u6ca1\u6709\u8bbe\u5907\u53ef\u8fdb\u884c\u67e5\u8be2\u3002\n+\n+\u5176\u5177\u4f53\u5b9e\u73b0\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u9996\u5148\u5224\u65ad\u5f53\u524d\u7ed3\u679c\u96c6\u662f\u5426\u88ab\u521d\u59cb\u5316\u4e14\u6709\u4e0b\u4e00\u4e2a\u7ed3\u679c\uff0c\u5982\u679c\u662f\u5219\u76f4\u63a5\u8fd4\u56de true\uff0c\u5373\u5f53\u524d\u53ef\u4ee5\u8c03\u7528 `next()` \u65b9\u6cd5\u83b7\u53d6\u4e0b\u4e00\u4e2a `RowRecord`\uff1b\u5426\u5219\u8bbe\u7f6e\u7ed3\u679c\u96c6\u672a\u88ab\u521d\u59cb\u5316\u8fdb\u5165\u6b65\u9aa42.\n+2. \u8fed\u4ee3 `deviceIterator` \u83b7\u53d6\u672c\u6b21\u6267\u884c\u9700\u8981\u7684\u8bbe\u5907\uff0c\u4e4b\u540e `deviceToMeasurementsMap` \u4e2d\u53d6\u5f97\u8be5\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\uff0c\u5f97\u5230 `executeColumns`.\n+3. \u62fc\u63a5\u5f53\u524d\u8bbe\u5907\u540d\u4e0e measurements\uff0c\u8ba1\u7b97\u5f53\u524d\u8bbe\u5907\u7684\u67e5\u8be2\u8def\u5f84\u3001\u6570\u636e\u7c7b\u578b\u53ca\u8fc7\u6ee4\u6761\u4ef6\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u4e3a `executePaths`, `tsDataTypes`, `expression`\uff0c\u5982\u679c\u662f\u805a\u5408\u67e5\u8be2\uff0c\u5219\u8fd8\u9700\u8981\u8ba1\u7b97 `executeAggregations`\u3002\n+4. \u5224\u65ad\u5f53\u524d\u5b50\u67e5\u8be2\u7c7b\u578b\u4e3a GroupByQuery, AggregationQuery, FillQuery \u6216 RawDataQuery \u8fdb\u884c\u5bf9\u5e94\u7684\u67e5\u8be2\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\uff0c\u5b9e\u73b0\u903b\u8f91\u53ef\u53c2\u8003[\u539f\u59cb\u6570\u636e\u67e5\u8be2](/#/SystemDesign/progress/chap5/sec3)\uff0c[\u805a\u5408\u67e5\u8be2](/#/SystemDesign/progress/chap5/sec4)\uff0c[\u964d\u91c7\u6837\u67e5\u8be2](/#/SystemDesign/progress/chap5/sec5)\u3002\n+\n+\u901a\u8fc7 `hasNextWithoutConstraint()` \u65b9\u6cd5\u521d\u59cb\u5316\u7ed3\u679c\u96c6\u5e76\u786e\u4fdd\u6709\u4e0b\u4e00\u7ed3\u679c\u540e\uff0c\u5219\u53ef\u8c03\u7528 `QueryDataSet.next()` \u65b9\u6cd5\u83b7\u53d6\u4e0b\u4e00\u4e2a `RowRecord`.\n+\n+`next()` \u65b9\u6cd5\u4e3b\u8981\u5b9e\u73b0\u903b\u8f91\u4e3a `AlignByDeviceDataSet.nextWithoutConstraint()` \u65b9\u6cd5\u3002\n+\n+`nextWithoutConstraint()` \u65b9\u6cd5\u6240\u505a\u7684\u5de5\u4f5c\u4e3b\u8981\u662f**\u5c06\u5355\u4e2a\u8bbe\u5907\u67e5\u8be2\u6240\u5f97\u5230\u7684\u6309\u65f6\u95f4\u5bf9\u9f50\u7684\u7ed3\u679c\u96c6\u5f62\u5f0f\u53d8\u6362\u4e3a\u6309\u8bbe\u5907\u5bf9\u9f50\u7684\u7ed3\u679c\u96c6\u5f62\u5f0f**\uff0c\u5e76\u8fd4\u56de\u53d8\u6362\u540e\u7684 `RowRecord`\u3002\n+\n+\u5176\u5177\u4f53\u5b9e\u73b0\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u9996\u5148\u4ece\u7ed3\u679c\u96c6\u4e2d\u53d6\u5f97\u4e0b\u4e00\u4e2a\u6309\u65f6\u95f4\u5bf9\u9f50\u7684 `originRowRecord`\u3002\n+2. \u65b0\u5efa\u4e00\u4e2a\u6dfb\u52a0\u4e86\u65f6\u95f4\u6233\u7684 `RowRecord`\uff0c\u5411\u5176\u4e2d\u52a0\u5165\u8bbe\u5907\u5217\uff0c\u5148\u6839\u636e `executeColumns` \u4e0e\u5f97\u5230\u7684\u7ed3\u679c\u5efa\u7acb\u4e00\u4e2a\u7531 `measurementName -> Field` \u7684 Map \u7ed3\u6784 `currentColumnMap`.\n+3. \u4e4b\u540e\u53ea\u9700\u8981\u904d\u5386\u53bb\u91cd\u540e\u7684 `measurements` \u5217\u8868\uff0c\u5224\u65ad\u5176\u7c7b\u578b\uff0c\u5982\u679c\u7c7b\u578b\u4e3a `Exist` \u5219\u6839\u636e measurementName \u4ece `currentColumnMap` \u4e2d\u53d6\u5f97\u5176\u5bf9\u5e94\u7684\u7ed3\u679c\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8bbe\u4e3a `null`\uff1b\u5982\u679c\u662f `NonExist`\u7c7b\u578b\uff0c\u5219\u76f4\u63a5\u8bbe\u4e3a `null`; \u5982\u679c\u662f `Constant` \u7c7b\u578b\uff0c\u5219\u5c06 `measureName` \u4f5c\u4e3a\u8be5\u5217\u7684\u503c\u3002\n+\n+\u5728\u6839\u636e\u53d8\u6362\u540e\u7684 `RowRecord` \u5199\u5165\u8f93\u51fa\u6570\u636e\u6d41\u540e\uff0c\u5373\u53ef\u5c06\u7ed3\u679c\u96c6\u8fd4\u56de\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0c9cffef6f725d1a642c0aadc0c2812626267a"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzM4NQ==", "bodyText": "\u5df2\u4fee\u6539\u3002", "url": "https://github.com/apache/iotdb/pull/874#discussion_r388147385", "createdAt": "2020-03-05T08:44:04Z", "author": {"login": "Alima777"}, "path": "docs/Documentation-CHN/SystemDesign/5-DataQuery/7-AlignByDeviceQuery.md", "diffHunk": "@@ -0,0 +1,203 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+# \u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\n+\n+AlignByDevicePlan \u5373\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5bf9\u5e94\u7684\u8868\u7ed3\u6784\u4e3a\uff1a\n+\n+| Time | Device | sensor1 | sensor2 | sensor3 | ... |\n+| ---- | ------ | ------- | ------- | ------- | --- |\n+|      |        |         |         |         |     |\n+\n+## \u8bbe\u8ba1\u539f\u7406\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5176\u5b9e\u73b0\u539f\u7406\u4e3b\u8981\u662f\u8ba1\u7b97\u51fa\u67e5\u8be2\u4e2d\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u96c6\u62fc\u88c5\u5e76\u8fd4\u56de\u3002\n+\n+### AlignByDevicePlan \u4e2d\u91cd\u8981\u5b57\u6bb5\u542b\u4e49\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b AlignByDevicePlan \u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+- `List<String> measurements`\uff1a\u67e5\u8be2\u4e2d\u51fa\u73b0\u7684 measurement \u5217\u8868\u3002\n+- `Map<Path, TSDataType> dataTypeMapping`: \u8be5\u53d8\u91cf\u7ee7\u627f\u81ea\u57fa\u7c7b QueryPlan\uff0c\u5176\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u8ba1\u7b97\u6bcf\u4e2a\u8bbe\u5907\u7684\u6267\u884c\u8def\u5f84\u65f6\uff0c\u63d0\u4f9b\u6b64\u6b21\u67e5\u8be2\u7684 paths \u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\u3002\n+- `Map<String, Set<String>> deviceToMeasurementsMap`, `Map<String, IExpression> deviceToFilterMap`: \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u5206\u522b\u7528\u6765\u5b58\u50a8\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\u548c\u8fc7\u6ee4\u6761\u4ef6\u3002\n+- `Map<String, TSDataType> measurementDataTypeMap`\uff1aAlignByDevicePlan \u8981\u6c42\u4e0d\u540c\u8bbe\u5907\u7684\u540c\u540d sensor \u6570\u636e\u7c7b\u578b\u4e00\u81f4\uff0c\u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a `measurementName -> dataType` \u7684 Map \u7ed3\u6784\uff0c\u7528\u6765\u9a8c\u8bc1\u540c\u540d sensor \u7684\u6570\u636e\u7c7b\u578b\u4e00\u81f4\u6027\u3002\u5982 `root.sg.d1.s1` \u548c `root.sg.d2.s1` \u5e94\u8be5\u662f\u540c\u4e00\u6570\u636e\u7c7b\u578b\u3002\n+- `enum MeasurementType`\uff1a\u8bb0\u5f55\u4e09\u79cd measurement \u7c7b\u578b\u3002\u5728\u4efb\u4f55\u8bbe\u5907\u4e2d\u90fd\u4e0d\u5b58\u5728\u7684 measurement \u4e3a `NonExist` \u7c7b\u578b\uff1b\u6709\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u7684 measurement \u4e3a `Constant` \u7c7b\u578b\uff1b\u5b58\u5728\u7684 measurement \u4e3a `Exist` \u7c7b\u578b\u3002\n+- `Map<String, MeasurementType> measurementTypeMap`: \u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a `measureName -> measurementType` \u7684 Map \u7ed3\u6784\uff0c\u7528\u6765\u8bb0\u5f55\u67e5\u8be2\u4e2d\u6240\u6709 measurement \u7684\u7c7b\u578b\u3002\n+- groupByPlan, fillQueryPlan, aggregationPlan\uff1a\u4e3a\u4e86\u907f\u514d\u5197\u4f59\uff0c\u8fd9\u4e09\u4e2a\u6267\u884c\u8ba1\u5212\u88ab\u8bbe\u5b9a\u4e3a RawDataQueryPlan \u7684\u5b50\u7c7b\uff0c\u800c\u5728 AlignByDevicePlan \u4e2d\u88ab\u8bbe\u7f6e\u4e3a\u53d8\u91cf\u3002\u5982\u679c\u67e5\u8be2\u8ba1\u5212\u5c5e\u4e8e\u8fd9\u4e09\u4e2a\u8ba1\u5212\u4e2d\u7684\u4e00\u79cd\uff0c\u5219\u8be5\u5b57\u6bb5\u4f1a\u88ab\u8d4b\u503c\u5e76\u4fdd\u5b58\u3002\n+\n+\u5728\u8fdb\u884c\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\u7684\u8bb2\u89e3\u524d\uff0c\u5148\u7ed9\u51fa\u4e00\u4e2a\u8986\u76d6\u8f83\u4e3a\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u89e3\u91ca\u8fc7\u7a0b\u4e2d\u5c06\u7ed3\u5408\u8be5\u793a\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002\n+\n+```sql\n+SELECT s1, \"1\", *, s2, s5 FROM root.sg.d1, root.sg.* WHERE time = 1 AND s1 < 25 ALIGN BY DEVICE\n+```\n+\n+\u5176\u4e2d\uff0c\u7cfb\u7edf\u4e2d\u7684\u65f6\u95f4\u5e8f\u5217\u4e3a\uff1a\n+\n+- root.sg.d1.s1\n+- root.sg.d1.s2\n+- root.sg.d2.s1\n+\n+\u5b58\u50a8\u7ec4 `root.sg` \u5171\u5305\u542b\u4e24\u4e2a\u8bbe\u5907 d1 \u548c d2\uff0c\u5176\u4e2d d1 \u6709\u4e24\u4e2a\u4f20\u611f\u5668 s1 \u548c s2\uff0cd2 \u53ea\u6709\u4f20\u611f\u5668 s1\uff0c\u76f8\u540c\u4f20\u611f\u5668 s1 \u7684\u6570\u636e\u7c7b\u578b\u76f8\u540c\u3002\n+\n+\u4e0b\u9762\u5c06\u6309\u5177\u4f53\u8fc7\u7a0b\u8fdb\u884c\u5206\u522b\u89e3\u91ca\uff1a\n+\n+### \u903b\u8f91\u8ba1\u5212\u751f\u6210\n+\n+- org.apache.iotdb.db.qp.Planner\n+\n+\u4e0e\u539f\u59cb\u6570\u636e\u67e5\u8be2\u4e0d\u540c\uff0c\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5e76\u4e0d\u5728\u6b64\u9636\u6bb5\u8fdb\u884c SELECT \u8bed\u53e5\u548c WHERE \u8bed\u53e5\u4e2d\u540e\u7f00\u8def\u5f84\u7684\u62fc\u63a5\uff0c\u800c\u5c06\u5728\u540e\u7eed\u751f\u6210\u7269\u7406\u8ba1\u5212\u65f6\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\u3002\u56e0\u6b64\uff0c\u6309\u8bbe\u5907\u5bf9\u9f50\u5728\u6b64\u9636\u6bb5\u6240\u505a\u7684\u5de5\u4f5c\u53ea\u5305\u62ec\u5bf9 WHERE \u8bed\u53e5\u4e2d\u8fc7\u6ee4\u6761\u4ef6\u7684\u4f18\u5316\u3002\n+\n+\u5bf9\u8fc7\u6ee4\u6761\u4ef6\u7684\u4f18\u5316\u4e3b\u8981\u5305\u62ec\u4e09\u90e8\u5206\uff1a\u53bb\u975e\u3001\u8f6c\u5316\u6790\u53d6\u8303\u5f0f\u3001\u5408\u5e76\u540c\u8def\u5f84\u8fc7\u6ee4\u6761\u4ef6\u3002\u5bf9\u5e94\u7684\u4f18\u5316\u5668\u5206\u522b\u4e3a\uff1aRemoveNotOptimizer, DnfFilterOptimizer, MergeSingleFilterOptimizer\u3002\u8be5\u90e8\u5206\u903b\u8f91\u53ef\u53c2\u8003\uff1a[Planner](/#/SystemDesign/progress/chap2/sec2).\n+\n+### \u7269\u7406\u8ba1\u5212\u751f\u6210\n+\n+- org.apache.iotdb.db.qp.strategy.PhysicalGenerator\n+\n+\u751f\u6210\u903b\u8f91\u8ba1\u5212\u540e\uff0c\u5c06\u8c03\u7528 PhysicalGenerator \u7c7b\u4e2d\u7684 `transformToPhysicalPlan()` \u65b9\u6cd5\u5c06\u8be5\u903b\u8f91\u8ba1\u5212\u8f6c\u5316\u4e3a\u7269\u7406\u8ba1\u5212\u3002\u5bf9\u4e8e\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\uff0c\u8be5\u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u5b9e\u73b0\u5728 `transformQuery()` \u65b9\u6cd5\u4e2d\u3002\n+\n+**\u8be5\u9636\u6bb5\u6240\u505a\u7684\u4e3b\u8981\u5de5\u4f5c\u4e3a\u751f\u6210\u67e5\u8be2\u5bf9\u5e94\u7684** `AlignByDevicePlan`\uff0c**\u586b\u5145\u5176\u4e2d\u7684\u53d8\u91cf\u4fe1\u606f\u3002**\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b `transformQuery()` \u65b9\u6cd5\u4e2d\u4e00\u4e9b\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49(\u4e0e AlignByDevicePlan \u4e2d\u91cd\u590d\u7684\u5b57\u6bb5\u89c1\u4e0a\u6587)\uff1a\n+\n+- prefixPaths, suffixPaths\uff1a\u524d\u8005\u4e3a FROM \u5b50\u53e5\u4e2d\u7684\u524d\u7f00\u8def\u5f84\uff0c\u793a\u4f8b\u4e2d\u4e3a `[root.sg.d1, root.sg.*]`; \u540e\u8005\u4e3a SELECT \u5b50\u53e5\u4e2d\u7684\u540e\u7f00\u8def\u5f84\uff0c\u793a\u4f8b\u4e2d\u4e3a `[s1, \"1\", *, s2, s5]`.\n+- devices\uff1a\u5bf9\u524d\u7f00\u8def\u5f84\u53bb\u901a\u914d\u7b26\u548c\u8bbe\u5907\u53bb\u91cd\u540e\u5f97\u5230\u7684\u8bbe\u5907\u5217\u8868\uff0c\u793a\u4f8b\u4e2d\u4e3a `[root.sg.d1, root.sg.d2]`\u3002\n+- measurementSetOfGivenSuffix\uff1a\u4e2d\u95f4\u53d8\u91cf\uff0c\u8bb0\u5f55\u67d0\u4e00 suffix \u5bf9\u5e94\u7684 measurement\uff0c\u793a\u4f8b\u4e2d\uff0c\u5bf9\u4e8e\u540e\u7f00 \\*, `measurementSetOfGivenSuffix = {s1,s2}`\uff0c\u5bf9\u4e8e\u540e\u7f00 s1, `measurementSetOfGivenSuffix = {s1}`;\n+\n+\u63a5\u4e0b\u6765\u4ecb\u7ecd AlignByDevicePlan \u7684\u8ba1\u7b97\u8fc7\u7a0b\uff1a\n+\n+1. \u68c0\u67e5\u67e5\u8be2\u7c7b\u578b\u662f\u5426\u4e3a groupByPlan, fillQueryPlan, aggregationPlan \u8fd9\u4e09\u7c7b\u67e5\u8be2\u4e2d\u7684\u4e00\u79cd\uff0c\u5982\u679c\u662f\u5219\u5bf9\u76f8\u5e94\u7684\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\uff0c\u5e76\u66f4\u6539 `AlignByDevicePlan` \u7684\u67e5\u8be2\u7c7b\u578b\u3002\n+2. \u904d\u5386 SELECT \u540e\u7f00\u8def\u5f84\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u540e\u7f00\u8def\u5f84\u8bbe\u7f6e\u4e00\u4e2a\u4e2d\u95f4\u53d8\u91cf\u4e3a `measurementSetOfGivenSuffix`\uff0c\u7528\u6765\u8bb0\u5f55\u8be5\u540e\u7f00\u8def\u5f84\u5bf9\u5e94\u7684\u6240\u6709 measurement\u3002\u5982\u679c\u540e\u7f00\u8def\u5f84\u4ee5\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5f00\u5934\uff0c\u5219\u76f4\u63a5\u5728 `measurements` \u4e2d\u589e\u52a0\u8be5\u503c\uff0c\u5e76\u8bb0\u5f55\u5176\u7c7b\u578b\u4e3a `Constant` \u7c7b\u578b\u3002\n+3. \u5426\u5219\u5c06\u8bbe\u5907\u5217\u8868\u4e0e\u8be5\u540e\u7f00\u8def\u5f84\u62fc\u63a5\uff0c\u5f97\u5230\u5b8c\u6574\u7684\u8def\u5f84\uff0c\u5982\u679c\u62fc\u63a5\u540e\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u8be5 measurement \u662f\u5426\u5728\u5176\u5b83\u8bbe\u5907\u4e2d\u5b58\u5728\uff0c\u5982\u679c\u90fd\u6ca1\u6709\u5219\u6682\u65f6\u8bc6\u522b\u4e3a `NonExist`\uff0c\u5982\u679c\u540e\u7eed\u51fa\u73b0\u8bbe\u5907\u5b58\u5728\u8be5 measurement\uff0c\u5219\u8986\u76d6 `NonExist` \u503c\u4e3a `Exist`\u3002\n+4. \u5982\u679c\u62fc\u63a5\u540e\u8def\u5f84\u5b58\u5728\uff0c\u5219\u8bc1\u660e measurement \u662f `Exist` \u7c7b\u578b\uff0c\u9700\u8981\u68c0\u9a8c\u6570\u636e\u7c7b\u578b\u7684\u4e00\u81f4\u6027\uff0c\u4e0d\u6ee1\u8db3\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u6ee1\u8db3\u5219\u8bb0\u5f55\u4e0b\u8be5 Measurement\uff0c\u5bf9 `measurementSetOfGivenSuffix`, `deviceToMeasurementsMap` \u7b49\u8fdb\u884c\u66f4\u65b0\u3002\n+5. \u5728\u4e00\u5c42 suffix \u5faa\u73af\u7ed3\u675f\u540e\uff0c\u5c06\u8be5\u5c42\u5faa\u73af\u4e2d\u51fa\u73b0\u7684 `measurementSetOfGivenSuffix` \u52a0\u5165 `measurements` \u4e2d\u3002\u5728\u6574\u4e2a\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u5c06\u5faa\u73af\u4e2d\u5f97\u5230\u7684\u53d8\u91cf\u4fe1\u606f\u8d4b\u503c\u5230 AlignByDevicePlan \u4e2d\u3002\u6b64\u5904\u5f97\u5230\u7684 measurements \u5217\u8868\u662f\u672a\u7ecf\u8fc7\u53bb\u91cd\u7684\uff0c\u5728\u751f\u6210 `ColumnHeader` \u65f6\u5c06\u8fdb\u884c\u53bb\u91cd\u3002\n+6. \u6700\u540e\u8c03\u7528 `concatFilterByDevice()` \u65b9\u6cd5\u8ba1\u7b97 `deviceToFilterMap`\uff0c\u5f97\u5230\u5c06\u6bcf\u4e2a\u8bbe\u5907\u5206\u522b\u62fc\u63a5\u540e\u5bf9\u5e94\u7684 Filter \u4fe1\u606f\u3002\n+\n+```java\n+Map<String, IExpression> concatFilterByDevice(List<String> devices,\n+      FilterOperator operator)\n+\u8f93\u5165\uff1a\u53bb\u91cd\u540e\u7684 devices \u5217\u8868\u548c\u672a\u62fc\u63a5\u7684 FilterOperator\n+\u8f93\u5165\uff1a\u7ecf\u8fc7\u62fc\u63a5\u540e\u7684 deviceToFilterMap\uff0c\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684 Filter \u4fe1\u606f\n+```\n+\n+`concatFilterByDevice()` \u65b9\u6cd5\u7684\u4e3b\u8981\u5904\u7406\u903b\u8f91\u5728 `concatFilterPath()` \u4e2d\uff1a\n+\n+`concatFilterPath()` \u65b9\u6cd5\u904d\u5386\u672a\u62fc\u63a5\u7684 FilterOperator \u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u53d6\u8be5\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4ee5 time \u6216 root \u5f00\u5934\u5219\u4e0d\u505a\u5904\u7406\uff0c\u5426\u5219\u5c06\u8bbe\u5907\u540d\u4e0e\u8282\u70b9\u8def\u5f84\u8fdb\u884c\u62fc\u63a5\u540e\u8fd4\u56de\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5bf9\u8be5\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u8fdb\u884c\u8fed\u4ee3\u5904\u7406\u3002\u793a\u4f8b\u4e2d\uff0c\u8bbe\u59071\u8fc7\u6ee4\u6761\u4ef6\u62fc\u63a5\u540e\u7684\u7ed3\u679c\u4e3a `time = 1 AND root.sg.d1.s1 < 25`\uff0c\u8bbe\u59072\u4e3a `time = 1 AND root.sg.d2.s1 < 25`\u3002\n+\n+\u4e0b\u9762\u7528\u793a\u4f8b\u603b\u7ed3\u4e00\u4e0b\u901a\u8fc7\u8be5\u9636\u6bb5\u8ba1\u7b97\u5f97\u5230\u7684\u53d8\u91cf\u4fe1\u606f\uff1a\n+\n+- measurement \u5217\u8868 `measurements`\uff1a`[s1, \"1\", s1, s2, s2, s5]`\n+- measurement \u7c7b\u578b `measurementTypeMap`\uff1a\n+  -  `s1 -> Exist`\n+  -  `s2 -> Exist`\n+  -  `\"1\" -> Constant`\n+  -  `s5 -> NonExist`\n+- \u6bcf\u4e2a\u8bbe\u5907\u7684\u6d4b\u70b9 `deviceToMeasurementsMap`:\n+  -  `root.sg.d1 -> s1, s2`\n+  -  `root.sg.d2 -> s1`\n+- \u6bcf\u4e2a\u8bbe\u5907\u7684\u8fc7\u6ee4\u6761\u4ef6 `deviceToFilterMap`\uff1a\n+  -  `root.sg.d1 -> time = 1 AND root.sg.d1.s1 < 25`\n+  -  `root.sg.d2 -> time = 1 AND root.sg.d2.s1 < 25`\n+\n+### \u6784\u9020\u8868\u5934 (ColumnHeader)\n+\n+- org.apache.iotdb.db.service.TSServiceImpl\n+\n+\u5728\u751f\u6210\u7269\u7406\u8ba1\u5212\u540e\uff0c\u5219\u53ef\u4ee5\u6267\u884c TSServiceImpl \u4e2d\u7684 executeQueryStatement() \u65b9\u6cd5\u751f\u6210\u7ed3\u679c\u96c6\u5e76\u8fd4\u56de\uff0c\u5176\u4e2d\u7b2c\u4e00\u6b65\u662f\u6784\u9020\u8868\u5934\u3002\n+\n+\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u5728\u8c03\u7528 `TSServiceImpl.getQueryColumnHeaders()` \u65b9\u6cd5\u540e\uff0c\u6839\u636e\u67e5\u8be2\u7c7b\u578b\u8fdb\u5165 `TSServiceImpl.getAlignByDeviceQueryHeaders()` \u6765\u6784\u9020\u8868\u5934\u3002\n+\n+`getAlignByDeviceQueryHeaders()` \u65b9\u6cd5\u58f0\u660e\u5982\u4e0b\uff1a\n+\n+```java\n+private void getAlignByDeviceQueryHeaders(\n+      AlignByDevicePlan plan, List<String> respColumns, List<String> columnTypes)\n+\u8f93\u5165\uff1a\u5f53\u524d\u6267\u884c\u7684\u7269\u7406\u8ba1\u5212 AlignByDevicePlan \u548c\u9700\u8981\u8f93\u51fa\u7684\u5217\u540d respColumns \u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b columnTypes\n+\u8f93\u51fa\uff1a\u8ba1\u7b97\u5f97\u5230\u7684\u5217\u540d respColumns \u548c\u6570\u636e\u7c7b\u578b columnTypes\n+```\n+\n+\u5176\u5177\u4f53\u5b9e\u73b0\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u9996\u5148\u52a0\u5165 `Device` \u5217\uff0c\u5176\u6570\u636e\u7c7b\u578b\u4e3a `TEXT`\uff1b\n+2. \u904d\u5386\u672a\u53bb\u91cd\u7684 measurements \u5217\u8868\uff0c\u5224\u65ad\u5f53\u524d\u904d\u5386 measurement \u7684\u7c7b\u578b\uff0c\u5982\u679c\u662f `Exist` \u7c7b\u578b\u5219\u4ece `measurementTypeMap` \u4e2d\u53d6\u5f97\u5176\u7c7b\u578b\uff1b\u5176\u4f59\u4e24\u79cd\u7c7b\u578b\u8bbe\u5176\u7c7b\u578b\u4e3a `TEXT`\uff0c\u7136\u540e\u5c06 measurement \u53ca\u5176\u7c7b\u578b\u52a0\u5165\u8868\u5934\u6570\u636e\u7ed3\u6784\u4e2d\u3002\n+3. \u6839\u636e\u4e2d\u95f4\u53d8\u91cf `deduplicatedMeasurements` \u5bf9 measurements \u8fdb\u884c\u53bb\u91cd\u3002\n+\n+\u6700\u7ec8\u5f97\u5230\u7684 Header \u4e3a\uff1a\n+\n+| Time | Device | s1  | 1   | s1  | s2  | s2  | s5  |\n+| ---- | ------ | --- | --- | --- | --- | --- | --- |\n+|      |        |     |     |     |     |     |     |\n+\n+\u53bb\u91cd\u540e\u7684 `measurements` \u4e3a `[s1, \"1\", s2, s5]`\u3002\n+\n+### \u7ed3\u679c\u96c6\u751f\u6210\n+\n+\u751f\u6210 ColumnHeader \u540e\uff0c\u6700\u540e\u4e00\u6b65\u4e3a\u751f\u6210\u7ed3\u679c\u96c6\u586b\u5145\u7ed3\u679c\u5e76\u8fd4\u56de\u3002\n+\n+#### \u7ed3\u679c\u96c6\u521b\u5efa\n+\n+- org.apache.iotdb.db.service.TSServiceImpl\n+\n+\u8be5\u9636\u6bb5\u9700\u8981\u8c03\u7528 `TSServiceImpl.createQueryDataSet()` \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u679c\u96c6\uff0c\u8fd9\u90e8\u5206\u5b9e\u73b0\u903b\u8f91\u8f83\u4e3a\u7b80\u5355\uff0c\u5bf9\u4e8e AlignByDeviceQuery \u800c\u8a00\uff0c\u53ea\u9700\u8981\u65b0\u5efa\u4e00\u4e2a `AlignByDeviceDataSet` \u5373\u53ef\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u5c06\u628a AlignByDevicePlan \u4e2d\u7684\u53c2\u6570\u8d4b\u503c\u5230\u65b0\u5efa\u7684\u7ed3\u679c\u96c6\u4e2d\u3002\n+\n+#### \u7ed3\u679c\u96c6\u586b\u5145\n+\n+- org.apache.iotdb.db.utils.QueryDataSetUtils\n+\n+\u63a5\u4e0b\u6765\u9700\u8981\u586b\u5145\u7ed3\u679c\uff0cAlignByDeviceQuery \u5c06\u8c03\u7528 `TSServiceImpl.fillRpcReturnData()` \u65b9\u6cd5\uff0c\u7136\u540e\u6839\u636e\u67e5\u8be2\u7c7b\u578b\u8fdb\u5165 `QueryDataSetUtils.convertQueryDataSetByFetchSize()` \u65b9\u6cd5.\n+\n+`convertQueryDataSetByFetchSize()` \u65b9\u6cd5\u4e2d\u83b7\u53d6\u7ed3\u679c\u7684\u91cd\u8981\u65b9\u6cd5\u4e3a QueryDataSet \u7684 `hasNext()` \u65b9\u6cd5\u3002\n+\n+`hasNext()` \u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u5224\u65ad\u662f\u5426\u6709\u89c4\u5b9a\u884c\u504f\u79fb\u91cf `rowOffset`\uff0c\u5982\u679c\u6709\u5219\u8df3\u8fc7\u9700\u8981\u504f\u79fb\u7684\u884c\u6570\uff1b\u5982\u679c\u7ed3\u679c\u603b\u884c\u6570\u5c11\u4e8e\u89c4\u5b9a\u7684\u504f\u79fb\u91cf\uff0c\u5219\u8fd4\u56de false\u3002\n+2. \u5224\u65ad\u662f\u5426\u6709\u89c4\u5b9a\u884c\u6570\u9650\u5236 `rowLimit`\uff0c\u5982\u679c\u6709\u5219\u6bd4\u8f83\u5f53\u524d\u8f93\u51fa\u884c\u6570\uff0c\u5f53\u524d\u8f93\u51fa\u884c\u6570\u5927\u4e8e\u884c\u6570\u9650\u5236\u5219\u8fd4\u56de false\u3002\n+3. \u8fdb\u5165 `AlignByDeviceDataSet.hasNextWithoutConstraint()` \u65b9\u6cd5\n+\n+<br>\n+\n+- org.apache.iotdb.db.query.dataset.AlignByDeviceDataSet\n+\n+\u9996\u5148\u89e3\u91ca\u4e00\u4e0b\u7ed3\u679c\u96c6\u4e2d\u91cd\u8981\u5b57\u6bb5\u7684\u542b\u4e49\uff1a\n+\n+- `deviceIterator`\uff1a\u6309\u8bbe\u5907\u5bf9\u9f50\u67e5\u8be2\u672c\u8d28\u4e0a\u662f\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u7684\u6620\u5c04\u503c\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u6309\u8bbe\u5907\u5206\u522b\u8fdb\u884c\uff0c\u8be5\u5b57\u6bb5\u5373\u4e3a\u8bbe\u5907\u7684\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u67e5\u8be2\u83b7\u53d6\u4e00\u4e2a\u8bbe\u5907\u8fdb\u884c\u3002\n+- `currentDataSet`\uff1a\u8be5\u5b57\u6bb5\u4ee3\u8868\u4e86\u672c\u6b21\u5bf9\u67d0\u8bbe\u5907\u67e5\u8be2\u6240\u83b7\u5f97\u7684\u7ed3\u679c\u96c6\u3002\n+\n+`hasNextWithoutConstraint()` \u65b9\u6cd5\u6240\u505a\u7684\u5de5\u4f5c\u4e3b\u8981\u662f\u5224\u65ad\u5f53\u524d\u7ed3\u679c\u96c6\u662f\u5426\u6709\u4e0b\u4e00\u7ed3\u679c\uff0c\u6ca1\u6709\u5219\u83b7\u53d6\u4e0b\u4e00\u8bbe\u5907\uff0c\u8ba1\u7b97\u8be5\u8bbe\u5907\u6267\u884c\u67e5\u8be2\u9700\u8981\u7684\u8def\u5f84\u3001\u6570\u636e\u7c7b\u578b\u53ca\u8fc7\u6ee4\u6761\u4ef6\uff0c\u7136\u540e\u6309\u5176\u67e5\u8be2\u7c7b\u578b\u6267\u884c\u5177\u4f53\u7684\u67e5\u8be2\u8ba1\u5212\u540e\u83b7\u5f97\u7ed3\u679c\u96c6\uff0c\u76f4\u81f3\u6ca1\u6709\u8bbe\u5907\u53ef\u8fdb\u884c\u67e5\u8be2\u3002\n+\n+\u5176\u5177\u4f53\u5b9e\u73b0\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u9996\u5148\u5224\u65ad\u5f53\u524d\u7ed3\u679c\u96c6\u662f\u5426\u88ab\u521d\u59cb\u5316\u4e14\u6709\u4e0b\u4e00\u4e2a\u7ed3\u679c\uff0c\u5982\u679c\u662f\u5219\u76f4\u63a5\u8fd4\u56de true\uff0c\u5373\u5f53\u524d\u53ef\u4ee5\u8c03\u7528 `next()` \u65b9\u6cd5\u83b7\u53d6\u4e0b\u4e00\u4e2a `RowRecord`\uff1b\u5426\u5219\u8bbe\u7f6e\u7ed3\u679c\u96c6\u672a\u88ab\u521d\u59cb\u5316\u8fdb\u5165\u6b65\u9aa42.\n+2. \u8fed\u4ee3 `deviceIterator` \u83b7\u53d6\u672c\u6b21\u6267\u884c\u9700\u8981\u7684\u8bbe\u5907\uff0c\u4e4b\u540e `deviceToMeasurementsMap` \u4e2d\u53d6\u5f97\u8be5\u8bbe\u5907\u5bf9\u5e94\u7684\u6d4b\u70b9\uff0c\u5f97\u5230 `executeColumns`.\n+3. \u62fc\u63a5\u5f53\u524d\u8bbe\u5907\u540d\u4e0e measurements\uff0c\u8ba1\u7b97\u5f53\u524d\u8bbe\u5907\u7684\u67e5\u8be2\u8def\u5f84\u3001\u6570\u636e\u7c7b\u578b\u53ca\u8fc7\u6ee4\u6761\u4ef6\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u4e3a `executePaths`, `tsDataTypes`, `expression`\uff0c\u5982\u679c\u662f\u805a\u5408\u67e5\u8be2\uff0c\u5219\u8fd8\u9700\u8981\u8ba1\u7b97 `executeAggregations`\u3002\n+4. \u5224\u65ad\u5f53\u524d\u5b50\u67e5\u8be2\u7c7b\u578b\u4e3a GroupByQuery, AggregationQuery, FillQuery \u6216 RawDataQuery \u8fdb\u884c\u5bf9\u5e94\u7684\u67e5\u8be2\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\uff0c\u5b9e\u73b0\u903b\u8f91\u53ef\u53c2\u8003[\u539f\u59cb\u6570\u636e\u67e5\u8be2](/#/SystemDesign/progress/chap5/sec3)\uff0c[\u805a\u5408\u67e5\u8be2](/#/SystemDesign/progress/chap5/sec4)\uff0c[\u964d\u91c7\u6837\u67e5\u8be2](/#/SystemDesign/progress/chap5/sec5)\u3002\n+\n+\u901a\u8fc7 `hasNextWithoutConstraint()` \u65b9\u6cd5\u521d\u59cb\u5316\u7ed3\u679c\u96c6\u5e76\u786e\u4fdd\u6709\u4e0b\u4e00\u7ed3\u679c\u540e\uff0c\u5219\u53ef\u8c03\u7528 `QueryDataSet.next()` \u65b9\u6cd5\u83b7\u53d6\u4e0b\u4e00\u4e2a `RowRecord`.\n+\n+`next()` \u65b9\u6cd5\u4e3b\u8981\u5b9e\u73b0\u903b\u8f91\u4e3a `AlignByDeviceDataSet.nextWithoutConstraint()` \u65b9\u6cd5\u3002\n+\n+`nextWithoutConstraint()` \u65b9\u6cd5\u6240\u505a\u7684\u5de5\u4f5c\u4e3b\u8981\u662f**\u5c06\u5355\u4e2a\u8bbe\u5907\u67e5\u8be2\u6240\u5f97\u5230\u7684\u6309\u65f6\u95f4\u5bf9\u9f50\u7684\u7ed3\u679c\u96c6\u5f62\u5f0f\u53d8\u6362\u4e3a\u6309\u8bbe\u5907\u5bf9\u9f50\u7684\u7ed3\u679c\u96c6\u5f62\u5f0f**\uff0c\u5e76\u8fd4\u56de\u53d8\u6362\u540e\u7684 `RowRecord`\u3002\n+\n+\u5176\u5177\u4f53\u5b9e\u73b0\u903b\u8f91\u5982\u4e0b\uff1a\n+\n+1. \u9996\u5148\u4ece\u7ed3\u679c\u96c6\u4e2d\u53d6\u5f97\u4e0b\u4e00\u4e2a\u6309\u65f6\u95f4\u5bf9\u9f50\u7684 `originRowRecord`\u3002\n+2. \u65b0\u5efa\u4e00\u4e2a\u6dfb\u52a0\u4e86\u65f6\u95f4\u6233\u7684 `RowRecord`\uff0c\u5411\u5176\u4e2d\u52a0\u5165\u8bbe\u5907\u5217\uff0c\u5148\u6839\u636e `executeColumns` \u4e0e\u5f97\u5230\u7684\u7ed3\u679c\u5efa\u7acb\u4e00\u4e2a\u7531 `measurementName -> Field` \u7684 Map \u7ed3\u6784 `currentColumnMap`.\n+3. \u4e4b\u540e\u53ea\u9700\u8981\u904d\u5386\u53bb\u91cd\u540e\u7684 `measurements` \u5217\u8868\uff0c\u5224\u65ad\u5176\u7c7b\u578b\uff0c\u5982\u679c\u7c7b\u578b\u4e3a `Exist` \u5219\u6839\u636e measurementName \u4ece `currentColumnMap` \u4e2d\u53d6\u5f97\u5176\u5bf9\u5e94\u7684\u7ed3\u679c\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8bbe\u4e3a `null`\uff1b\u5982\u679c\u662f `NonExist`\u7c7b\u578b\uff0c\u5219\u76f4\u63a5\u8bbe\u4e3a `null`; \u5982\u679c\u662f `Constant` \u7c7b\u578b\uff0c\u5219\u5c06 `measureName` \u4f5c\u4e3a\u8be5\u5217\u7684\u503c\u3002\n+\n+\u5728\u6839\u636e\u53d8\u6362\u540e\u7684 `RowRecord` \u5199\u5165\u8f93\u51fa\u6570\u636e\u6d41\u540e\uff0c\u5373\u53ef\u5c06\u7ed3\u679c\u96c6\u8fd4\u56de\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5NDM5Ng=="}, "originalCommit": {"oid": "0f0c9cffef6f725d1a642c0aadc0c2812626267a"}, "originalPosition": 203}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 271, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}