{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODE0MDky", "number": 929, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwNDo1MzoxMFrODqD2Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzozNzo1NVrODvYmYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDI5ODM4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwNDo1MzoxMFrOF5nlZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMjo0MDowOFrOF5pRTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2MTcwMA==", "bodyText": "I remember this version has 0day bug", "url": "https://github.com/apache/iotdb/pull/929#discussion_r395961700", "createdAt": "2020-03-21T04:53:10Z", "author": {"login": "liutaohua"}, "path": "pom.xml", "diffHunk": "@@ -86,6 +87,7 @@\n         <common.lang3.version>3.8.1</common.lang3.version>\n         <common.logging.version>1.1.3</common.logging.version>\n         <guava.version>21.0</guava.version>\n+        <fastjson.version>1.2.31</fastjson.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66297ab36796c3fd3c0d9862f525c6656035744e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4OTMyNA==", "bodyText": "Good catch.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r395989324", "createdAt": "2020-03-21T12:40:08Z", "author": {"login": "vesense"}, "path": "pom.xml", "diffHunk": "@@ -86,6 +87,7 @@\n         <common.lang3.version>3.8.1</common.lang3.version>\n         <common.logging.version>1.1.3</common.logging.version>\n         <guava.version>21.0</guava.version>\n+        <fastjson.version>1.2.31</fastjson.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2MTcwMA=="}, "originalCommit": {"oid": "66297ab36796c3fd3c0d9862f525c6656035744e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTIxNjI0OnYy", "diffSide": "RIGHT", "path": "mqtt/src/main/java/org/apache/iotdb/mqtt/PublishHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMTowNjoyNlrOF5u17A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjoyMDozMFrOF5vPsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4MDYyMA==", "bodyText": "Hi, the IoTDBSessionException is replaced by StatementExecuteException and IoTDBConnectionException", "url": "https://github.com/apache/iotdb/pull/929#discussion_r396080620", "createdAt": "2020-03-22T11:06:26Z", "author": {"login": "qiaojialin"}, "path": "mqtt/src/main/java/org/apache/iotdb/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.IoTDBSessionException;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private Session session;\n+    private PayloadFormatter payloadFormat;\n+    static boolean testing = false;\n+\n+    public PublishHandler(MQTTBrokerConfig config) {\n+        payloadFormat = PayloadFormatManager.getPayloadFormat(config.getPayloadFormatter());\n+        initSession(config);\n+    }\n+\n+    public void initSession(MQTTBrokerConfig config) {\n+        if (testing) {\n+            return;\n+        }\n+        session = new Session(config.getIotDBHost(), config.getIotDBPort(),\n+                config.getIotDBUsername(), config.getIotDBPassword());\n+        try {\n+            session.open();\n+        } catch (IoTDBSessionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ee854cb397ac37095721f3f4d825c92665b53f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NzIxOQ==", "bodyText": "Updated.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r396087219", "createdAt": "2020-03-22T12:20:30Z", "author": {"login": "vesense"}, "path": "mqtt/src/main/java/org/apache/iotdb/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.IoTDBSessionException;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private Session session;\n+    private PayloadFormatter payloadFormat;\n+    static boolean testing = false;\n+\n+    public PublishHandler(MQTTBrokerConfig config) {\n+        payloadFormat = PayloadFormatManager.getPayloadFormat(config.getPayloadFormatter());\n+        initSession(config);\n+    }\n+\n+    public void initSession(MQTTBrokerConfig config) {\n+        if (testing) {\n+            return;\n+        }\n+        session = new Session(config.getIotDBHost(), config.getIotDBPort(),\n+                config.getIotDBUsername(), config.getIotDBPassword());\n+        try {\n+            session.open();\n+        } catch (IoTDBSessionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4MDYyMA=="}, "originalCommit": {"oid": "82ee854cb397ac37095721f3f4d825c92665b53f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzgxOTAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo1OTozOVrOGA43Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTo0NzowM1rOGBFgsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NDc3NA==", "bodyText": "Hi,  \"read only\" -> \"write only\"", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403584774", "createdAt": "2020-04-04T23:59:39Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.executor.IPlanExecutor;\n+import org.apache.iotdb.db.qp.executor.PlanExecutor;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+import org.apache.iotdb.db.qp.physical.crud.InsertPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private IPlanExecutor executor;\n+    private PayloadFormatter payloadFormat;\n+\n+    public PublishHandler(IoTDBConfig config) {\n+        this.payloadFormat = PayloadFormatManager.getPayloadFormat(config.getMqttPayloadFormatter());\n+        try {\n+            this.executor = new PlanExecutor();\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat) {\n+        this.executor = executor;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return \"iotdb-mqtt-broker-listener\";\n+    }\n+\n+    @Override\n+    public void onPublish(InterceptPublishMessage msg) {\n+        String clientId = msg.getClientID();\n+        ByteBuf payload = msg.getPayload();\n+        String topic = msg.getTopicName();\n+        String username = msg.getUsername();\n+        MqttQoS qos = msg.getQos();\n+\n+        LOG.debug(\"Receive publish message. clientId: {}, username: {}, qos: {}, topic: {}, payload: {}\",\n+                clientId, username, qos, topic, payload);\n+\n+        Message event = payloadFormat.format(payload);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        InsertPlan plan = new InsertPlan();\n+        plan.setDeviceId(event.getDevice());\n+        plan.setTime(event.getTimestamp());\n+        plan.setMeasurements(event.getMeasurements().toArray(new String[event.getMeasurements().size()]));\n+        plan.setValues(event.getValues().toArray(new String[event.getValues().size()]));\n+\n+        boolean status;\n+        try {\n+            status = executeNonQuery(plan);\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        LOG.debug(\"event process result: {}\", status);\n+    }\n+\n+    private boolean executeNonQuery(PhysicalPlan plan) throws QueryProcessException {\n+        if (IoTDBDescriptor.getInstance().getConfig().isReadOnly()) {\n+            throw new QueryProcessException(\n+                    \"Current system mode is read-only, does not support non-query operation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NTY1Mg==", "bodyText": "why?", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403645652", "createdAt": "2020-04-05T04:02:09Z", "author": {"login": "vesense"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.executor.IPlanExecutor;\n+import org.apache.iotdb.db.qp.executor.PlanExecutor;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+import org.apache.iotdb.db.qp.physical.crud.InsertPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private IPlanExecutor executor;\n+    private PayloadFormatter payloadFormat;\n+\n+    public PublishHandler(IoTDBConfig config) {\n+        this.payloadFormat = PayloadFormatManager.getPayloadFormat(config.getMqttPayloadFormatter());\n+        try {\n+            this.executor = new PlanExecutor();\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat) {\n+        this.executor = executor;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return \"iotdb-mqtt-broker-listener\";\n+    }\n+\n+    @Override\n+    public void onPublish(InterceptPublishMessage msg) {\n+        String clientId = msg.getClientID();\n+        ByteBuf payload = msg.getPayload();\n+        String topic = msg.getTopicName();\n+        String username = msg.getUsername();\n+        MqttQoS qos = msg.getQos();\n+\n+        LOG.debug(\"Receive publish message. clientId: {}, username: {}, qos: {}, topic: {}, payload: {}\",\n+                clientId, username, qos, topic, payload);\n+\n+        Message event = payloadFormat.format(payload);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        InsertPlan plan = new InsertPlan();\n+        plan.setDeviceId(event.getDevice());\n+        plan.setTime(event.getTimestamp());\n+        plan.setMeasurements(event.getMeasurements().toArray(new String[event.getMeasurements().size()]));\n+        plan.setValues(event.getValues().toArray(new String[event.getValues().size()]));\n+\n+        boolean status;\n+        try {\n+            status = executeNonQuery(plan);\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        LOG.debug(\"event process result: {}\", status);\n+    }\n+\n+    private boolean executeNonQuery(PhysicalPlan plan) throws QueryProcessException {\n+        if (IoTDBDescriptor.getInstance().getConfig().isReadOnly()) {\n+            throw new QueryProcessException(\n+                    \"Current system mode is read-only, does not support non-query operation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NDc3NA=="}, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NjU1NA==", "bodyText": "read-only is right :)", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403696554", "createdAt": "2020-04-05T12:41:28Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.executor.IPlanExecutor;\n+import org.apache.iotdb.db.qp.executor.PlanExecutor;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+import org.apache.iotdb.db.qp.physical.crud.InsertPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private IPlanExecutor executor;\n+    private PayloadFormatter payloadFormat;\n+\n+    public PublishHandler(IoTDBConfig config) {\n+        this.payloadFormat = PayloadFormatManager.getPayloadFormat(config.getMqttPayloadFormatter());\n+        try {\n+            this.executor = new PlanExecutor();\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat) {\n+        this.executor = executor;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return \"iotdb-mqtt-broker-listener\";\n+    }\n+\n+    @Override\n+    public void onPublish(InterceptPublishMessage msg) {\n+        String clientId = msg.getClientID();\n+        ByteBuf payload = msg.getPayload();\n+        String topic = msg.getTopicName();\n+        String username = msg.getUsername();\n+        MqttQoS qos = msg.getQos();\n+\n+        LOG.debug(\"Receive publish message. clientId: {}, username: {}, qos: {}, topic: {}, payload: {}\",\n+                clientId, username, qos, topic, payload);\n+\n+        Message event = payloadFormat.format(payload);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        InsertPlan plan = new InsertPlan();\n+        plan.setDeviceId(event.getDevice());\n+        plan.setTime(event.getTimestamp());\n+        plan.setMeasurements(event.getMeasurements().toArray(new String[event.getMeasurements().size()]));\n+        plan.setValues(event.getValues().toArray(new String[event.getValues().size()]));\n+\n+        boolean status;\n+        try {\n+            status = executeNonQuery(plan);\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        LOG.debug(\"event process result: {}\", status);\n+    }\n+\n+    private boolean executeNonQuery(PhysicalPlan plan) throws QueryProcessException {\n+        if (IoTDBDescriptor.getInstance().getConfig().isReadOnly()) {\n+            throw new QueryProcessException(\n+                    \"Current system mode is read-only, does not support non-query operation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NDc3NA=="}, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5MjA1MQ==", "bodyText": "my fault..", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403792051", "createdAt": "2020-04-06T01:47:03Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import io.moquette.interception.AbstractInterceptHandler;\n+import io.moquette.interception.messages.InterceptPublishMessage;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.executor.IPlanExecutor;\n+import org.apache.iotdb.db.qp.executor.PlanExecutor;\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n+import org.apache.iotdb.db.qp.physical.crud.InsertPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PublishHandler handle the messages from MQTT clients.\n+ */\n+public class PublishHandler extends AbstractInterceptHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);\n+\n+    private IPlanExecutor executor;\n+    private PayloadFormatter payloadFormat;\n+\n+    public PublishHandler(IoTDBConfig config) {\n+        this.payloadFormat = PayloadFormatManager.getPayloadFormat(config.getMqttPayloadFormatter());\n+        try {\n+            this.executor = new PlanExecutor();\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat) {\n+        this.executor = executor;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return \"iotdb-mqtt-broker-listener\";\n+    }\n+\n+    @Override\n+    public void onPublish(InterceptPublishMessage msg) {\n+        String clientId = msg.getClientID();\n+        ByteBuf payload = msg.getPayload();\n+        String topic = msg.getTopicName();\n+        String username = msg.getUsername();\n+        MqttQoS qos = msg.getQos();\n+\n+        LOG.debug(\"Receive publish message. clientId: {}, username: {}, qos: {}, topic: {}, payload: {}\",\n+                clientId, username, qos, topic, payload);\n+\n+        Message event = payloadFormat.format(payload);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        InsertPlan plan = new InsertPlan();\n+        plan.setDeviceId(event.getDevice());\n+        plan.setTime(event.getTimestamp());\n+        plan.setMeasurements(event.getMeasurements().toArray(new String[event.getMeasurements().size()]));\n+        plan.setValues(event.getValues().toArray(new String[event.getValues().size()]));\n+\n+        boolean status;\n+        try {\n+            status = executeNonQuery(plan);\n+        } catch (QueryProcessException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        LOG.debug(\"event process result: {}\", status);\n+    }\n+\n+    private boolean executeNonQuery(PhysicalPlan plan) throws QueryProcessException {\n+        if (IoTDBDescriptor.getInstance().getConfig().isReadOnly()) {\n+            throw new QueryProcessException(\n+                    \"Current system mode is read-only, does not support non-query operation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NDc3NA=="}, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzgzMTk0OnYy", "diffSide": "RIGHT", "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDowMzowM1rOGA48cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNDowMjozOFrOGA8k-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NjE2MA==", "bodyText": "I think a textual example is needed for introduction the JSON format.\ne.g.,\n{\n\t\"device\": \"root.sg.d1\",\n\t\"timestamp\": \"150423423423\",\n\t\"measurements\": [\"s1\", \"s2\"],\n\t\"values\": [5.0, \"abc\"]\n}", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403586160", "createdAt": "2020-04-05T00:03:03Z", "author": {"login": "jixuan1989"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,82 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol\n+\n+[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\n+It was designed as an extremely lightweight publish/subscribe messaging transport.\n+It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n+\n+IoTDB supports the MQTT v3.1(an OASIS Standard) protocol.\n+IoTDB server includes a built-in MQTT service that allows remote devices send messages into IoTDB server directly.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357432-0c71cf80-75e4-11ea-98aa-c43a54d469ce.png\">\n+\n+\n+## Built-in MQTT Service\n+The Built-in MQTT Service provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients\n+ and then write the data into storage immediately. \n+The messages payload can be format to events by `PayloadFormatter` which loaded by java SPI, and the default implementation is `JSONPayloadFormatter`.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357469-1bf11880-75e4-11ea-978f-a53996667a0d.png\">\n+\n+## MQTT Configurations\n+The IoTDB MQTT service load configurations from `${IOTDB_HOME}/${IOTDB_CONF}/iotdb-engine.properties` by default.\n+\n+Configurations are as following:\n+\n+| NAME        | DESCRIPTION           | DEFAULT  |\n+| ------------- |:-------------:|:------:|\n+| enable_mqtt_service      | whether to enable the mqtt service | true |\n+| mqtt_host      | the mqtt service binding host | 0.0.0.0 |\n+| mqtt_port      | the mqtt service binding port    |   1883 |\n+| mqtt_handler_pool_size | the handler pool size for handing the mqtt messages      |    1 |\n+| mqtt_payload_formatter | the mqtt message payload formatter     |    json |\n+\n+\n+## Examples\n+The following is an example which a mqtt client send messages to IoTDB server.\n+\n+ ```java\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            Map<String,Object> tuple = new HashMap();\n+            tuple.put(\"device\", \"root.sg.d1\");\n+            tuple.put(\"timestamp\", System.currentTimeMillis());\n+            tuple.put(\"measurements\", \"s1\");\n+            tuple.put(\"values\", random.nextDouble());\n+\n+            String payload = JSON.toJSONString(tuple);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NTY5MQ==", "bodyText": "Good catch, will update.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403645691", "createdAt": "2020-04-05T04:02:38Z", "author": {"login": "vesense"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,82 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol\n+\n+[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\n+It was designed as an extremely lightweight publish/subscribe messaging transport.\n+It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n+\n+IoTDB supports the MQTT v3.1(an OASIS Standard) protocol.\n+IoTDB server includes a built-in MQTT service that allows remote devices send messages into IoTDB server directly.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357432-0c71cf80-75e4-11ea-98aa-c43a54d469ce.png\">\n+\n+\n+## Built-in MQTT Service\n+The Built-in MQTT Service provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients\n+ and then write the data into storage immediately. \n+The messages payload can be format to events by `PayloadFormatter` which loaded by java SPI, and the default implementation is `JSONPayloadFormatter`.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357469-1bf11880-75e4-11ea-978f-a53996667a0d.png\">\n+\n+## MQTT Configurations\n+The IoTDB MQTT service load configurations from `${IOTDB_HOME}/${IOTDB_CONF}/iotdb-engine.properties` by default.\n+\n+Configurations are as following:\n+\n+| NAME        | DESCRIPTION           | DEFAULT  |\n+| ------------- |:-------------:|:------:|\n+| enable_mqtt_service      | whether to enable the mqtt service | true |\n+| mqtt_host      | the mqtt service binding host | 0.0.0.0 |\n+| mqtt_port      | the mqtt service binding port    |   1883 |\n+| mqtt_handler_pool_size | the handler pool size for handing the mqtt messages      |    1 |\n+| mqtt_payload_formatter | the mqtt message payload formatter     |    json |\n+\n+\n+## Examples\n+The following is an example which a mqtt client send messages to IoTDB server.\n+\n+ ```java\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            Map<String,Object> tuple = new HashMap();\n+            tuple.put(\"device\", \"root.sg.d1\");\n+            tuple.put(\"timestamp\", System.currentTimeMillis());\n+            tuple.put(\"measurements\", \"s1\");\n+            tuple.put(\"values\", random.nextDouble());\n+\n+            String payload = JSON.toJSONString(tuple);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4NjE2MA=="}, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzgzOTg2OnYy", "diffSide": "RIGHT", "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDowNDo1N1rOGA4_rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwODo1NjoxNVrOGA-HZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4Njk5MA==", "bodyText": "Is the first parameter the clientID, right? If so, change the example as \"clientID1\" is better.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403586990", "createdAt": "2020-04-05T00:04:57Z", "author": {"login": "jixuan1989"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,82 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol\n+\n+[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\n+It was designed as an extremely lightweight publish/subscribe messaging transport.\n+It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n+\n+IoTDB supports the MQTT v3.1(an OASIS Standard) protocol.\n+IoTDB server includes a built-in MQTT service that allows remote devices send messages into IoTDB server directly.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357432-0c71cf80-75e4-11ea-98aa-c43a54d469ce.png\">\n+\n+\n+## Built-in MQTT Service\n+The Built-in MQTT Service provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients\n+ and then write the data into storage immediately. \n+The messages payload can be format to events by `PayloadFormatter` which loaded by java SPI, and the default implementation is `JSONPayloadFormatter`.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357469-1bf11880-75e4-11ea-978f-a53996667a0d.png\">\n+\n+## MQTT Configurations\n+The IoTDB MQTT service load configurations from `${IOTDB_HOME}/${IOTDB_CONF}/iotdb-engine.properties` by default.\n+\n+Configurations are as following:\n+\n+| NAME        | DESCRIPTION           | DEFAULT  |\n+| ------------- |:-------------:|:------:|\n+| enable_mqtt_service      | whether to enable the mqtt service | true |\n+| mqtt_host      | the mqtt service binding host | 0.0.0.0 |\n+| mqtt_port      | the mqtt service binding port    |   1883 |\n+| mqtt_handler_pool_size | the handler pool size for handing the mqtt messages      |    1 |\n+| mqtt_payload_formatter | the mqtt message payload formatter     |    json |\n+\n+\n+## Examples\n+The following is an example which a mqtt client send messages to IoTDB server.\n+\n+ ```java\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            Map<String,Object> tuple = new HashMap();\n+            tuple.put(\"device\", \"root.sg.d1\");\n+            tuple.put(\"timestamp\", System.currentTimeMillis());\n+            tuple.put(\"measurements\", \"s1\");\n+            tuple.put(\"values\", random.nextDouble());\n+\n+            String payload = JSON.toJSONString(tuple);\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NTk1OQ==", "bodyText": "The first parameter isn't clientID. it's the mqtt topic which is corresponding to the IoTDB timeseries.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403645959", "createdAt": "2020-04-05T04:06:39Z", "author": {"login": "vesense"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,82 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol\n+\n+[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\n+It was designed as an extremely lightweight publish/subscribe messaging transport.\n+It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n+\n+IoTDB supports the MQTT v3.1(an OASIS Standard) protocol.\n+IoTDB server includes a built-in MQTT service that allows remote devices send messages into IoTDB server directly.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357432-0c71cf80-75e4-11ea-98aa-c43a54d469ce.png\">\n+\n+\n+## Built-in MQTT Service\n+The Built-in MQTT Service provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients\n+ and then write the data into storage immediately. \n+The messages payload can be format to events by `PayloadFormatter` which loaded by java SPI, and the default implementation is `JSONPayloadFormatter`.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357469-1bf11880-75e4-11ea-978f-a53996667a0d.png\">\n+\n+## MQTT Configurations\n+The IoTDB MQTT service load configurations from `${IOTDB_HOME}/${IOTDB_CONF}/iotdb-engine.properties` by default.\n+\n+Configurations are as following:\n+\n+| NAME        | DESCRIPTION           | DEFAULT  |\n+| ------------- |:-------------:|:------:|\n+| enable_mqtt_service      | whether to enable the mqtt service | true |\n+| mqtt_host      | the mqtt service binding host | 0.0.0.0 |\n+| mqtt_port      | the mqtt service binding port    |   1883 |\n+| mqtt_handler_pool_size | the handler pool size for handing the mqtt messages      |    1 |\n+| mqtt_payload_formatter | the mqtt message payload formatter     |    json |\n+\n+\n+## Examples\n+The following is an example which a mqtt client send messages to IoTDB server.\n+\n+ ```java\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            Map<String,Object> tuple = new HashMap();\n+            tuple.put(\"device\", \"root.sg.d1\");\n+            tuple.put(\"timestamp\", System.currentTimeMillis());\n+            tuple.put(\"measurements\", \"s1\");\n+            tuple.put(\"values\", random.nextDouble());\n+\n+            String payload = JSON.toJSONString(tuple);\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4Njk5MA=="}, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MDg4NQ==", "bodyText": "I added some documents to make it clear.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403670885", "createdAt": "2020-04-05T08:56:15Z", "author": {"login": "vesense"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,82 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol\n+\n+[MQTT](http://mqtt.org/) is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol.\n+It was designed as an extremely lightweight publish/subscribe messaging transport.\n+It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n+\n+IoTDB supports the MQTT v3.1(an OASIS Standard) protocol.\n+IoTDB server includes a built-in MQTT service that allows remote devices send messages into IoTDB server directly.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357432-0c71cf80-75e4-11ea-98aa-c43a54d469ce.png\">\n+\n+\n+## Built-in MQTT Service\n+The Built-in MQTT Service provide the ability of direct connection to IoTDB through MQTT. It listen the publish messages from MQTT clients\n+ and then write the data into storage immediately. \n+The messages payload can be format to events by `PayloadFormatter` which loaded by java SPI, and the default implementation is `JSONPayloadFormatter`.\n+\n+<img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/6711230/78357469-1bf11880-75e4-11ea-978f-a53996667a0d.png\">\n+\n+## MQTT Configurations\n+The IoTDB MQTT service load configurations from `${IOTDB_HOME}/${IOTDB_CONF}/iotdb-engine.properties` by default.\n+\n+Configurations are as following:\n+\n+| NAME        | DESCRIPTION           | DEFAULT  |\n+| ------------- |:-------------:|:------:|\n+| enable_mqtt_service      | whether to enable the mqtt service | true |\n+| mqtt_host      | the mqtt service binding host | 0.0.0.0 |\n+| mqtt_port      | the mqtt service binding port    |   1883 |\n+| mqtt_handler_pool_size | the handler pool size for handing the mqtt messages      |    1 |\n+| mqtt_payload_formatter | the mqtt message payload formatter     |    json |\n+\n+\n+## Examples\n+The following is an example which a mqtt client send messages to IoTDB server.\n+\n+ ```java\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            Map<String,Object> tuple = new HashMap();\n+            tuple.put(\"device\", \"root.sg.d1\");\n+            tuple.put(\"timestamp\", System.currentTimeMillis());\n+            tuple.put(\"measurements\", \"s1\");\n+            tuple.put(\"values\", random.nextDouble());\n+\n+            String payload = JSON.toJSONString(tuple);\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4Njk5MA=="}, "originalCommit": {"oid": "621a57a85b85526a76934d7fc3c7e4f39923a802"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc1MjAzOnYy", "diffSide": "RIGHT", "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjoyNjo0MlrOGA_lRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyMTozNlrOGBA43w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NDkxNg==", "bodyText": "How about moving this to UserGuide/4-Client", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403694916", "createdAt": "2020-04-05T12:26:42Z", "author": {"login": "qiaojialin"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,91 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjMxOQ==", "bodyText": "Make sense. just like JDBC or Session API. Will update.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403716319", "createdAt": "2020-04-05T15:21:36Z", "author": {"login": "vesense"}, "path": "docs/UserGuide/3-Server/6-MQTT Protocol.md", "diffHunk": "@@ -0,0 +1,91 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# MQTT Protocol", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NDkxNg=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3MTEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0ODo0MFrOGA_vEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1OTozMlrOGBWfUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzQyNA==", "bodyText": "Suppose we add a \"batchjson\" formatter in the future, such as:\n{\"device\" = \"root.sg.d1\"\n\"timestamps\" = \"[1, 2, 3, 4, 5]\"\n\"measurements\" = ['s1', 's2']\n\"values\" = {[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]}\n}\nWhen receives a json, which format does the server choose to transform the message? Will the server tries the two formatters?", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403697424", "createdAt": "2020-04-05T12:48:40Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "diffHunk": "@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+org.apache.iotdb.db.mqtt.JSONPayloadFormatter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5MzQ4Mw==", "bodyText": "Hi jialin, your json format is incorrect so I can not follow what you are concerning ...\n\n(minor) Json uses \":\" rather than \"=\";\n(major) Json does not support\n\n{\n\"value\" : { \n  [1, 2], \n  [3, 4]\n }\n}\n(You can find the markdown render has label the error in red)\nAs \"[]\" is an array and \"{}\" is an object, everything in \"{}\" should be key-value pair.\nSo, the correct json is:\n{\n\t\"device\": \"root.sg.d1\",\n\t\"timestamp\": \"150423423423\",\n\t\"measurements\": [\"s1\", \"s2\"],\n\t\"values\": {\n\t\t\"s1\": [5.0, \"4.0\"],\n\t\t\"s2\": [6.0, \"7.0\"]\n\t}\n}\nIn this case, what is your concern?", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403793483", "createdAt": "2020-04-06T01:54:35Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "diffHunk": "@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+org.apache.iotdb.db.mqtt.JSONPayloadFormatter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzQyNA=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgwNDUzOQ==", "bodyText": "Users can implement PayloadFormatter interface and change the config mqtt_payload_formatter if the default json formatter JSONPayloadFormatter don't match the need.\nFor the scenario you stated, user might implement a BatchJSONPayloadFormatter and named batchjson.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403804539", "createdAt": "2020-04-06T02:51:42Z", "author": {"login": "vesense"}, "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "diffHunk": "@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+org.apache.iotdb.db.mqtt.JSONPayloadFormatter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzQyNA=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2MDA4OQ==", "bodyText": "I wonder could the server provide two formats at the same time..", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403960089", "createdAt": "2020-04-06T09:42:46Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "diffHunk": "@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+org.apache.iotdb.db.mqtt.JSONPayloadFormatter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzQyNA=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTgxNQ==", "bodyText": "I updated the code to make default json formatter support both two json format:\n {\n      \"device\":\"root.sg.d1\",\n      \"timestamp\":1586076045524,\n      \"measurements\":[\"s1\",\"s2\"],\n      \"values\":[0.530635,0.530635]\n }\nor\n{\n      \"device\":\"root.sg.d1\",\n      \"timestamps\":[1586076045524,1586076065526],\n      \"measurements\":[\"s1\",\"s2\"],\n      \"values\":[[0.530635,0.530635], [0.530655,0.530695]]\n  }", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404069815", "createdAt": "2020-04-06T12:58:54Z", "author": {"login": "vesense"}, "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "diffHunk": "@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+org.apache.iotdb.db.mqtt.JSONPayloadFormatter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzQyNA=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MDIyNg==", "bodyText": "Also added unit tests and docs.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404070226", "createdAt": "2020-04-06T12:59:32Z", "author": {"login": "vesense"}, "path": "server/src/main/resources/META-INF/services/org.apache.iotdb.db.mqtt.PayloadFormatter", "diffHunk": "@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+org.apache.iotdb.db.mqtt.JSONPayloadFormatter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzQyNA=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc4NzQyOnYy", "diffSide": "RIGHT", "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzowNjo1NlrOGA_3ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzowMTo0OVrOGBWlDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5OTU1Nw==", "bodyText": "I remove this line and test the performance of the insertion on my laptop,  I find that the connection.publish() cost about 1 second, is there any rate-limiting\uff1f", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403699557", "createdAt": "2020-04-05T13:06:56Z", "author": {"login": "qiaojialin"}, "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+\n+import java.util.Random;\n+\n+public class MQTTClient {\n+    public static void main(String[] args) throws Exception {\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            String payload = String.format(\"{\\n\" +\n+                    \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n+                    \"\\\"timestamp\\\":%d,\\n\" +\n+                    \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n+                    \"\\\"values\\\":[%f]\\n\" +\n+                    \"}\", System.currentTimeMillis(), random.nextDouble());\n+\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5MzgyOA==", "bodyText": "Look forward to the new progress.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403793828", "createdAt": "2020-04-06T01:56:33Z", "author": {"login": "jixuan1989"}, "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+\n+import java.util.Random;\n+\n+public class MQTTClient {\n+    public static void main(String[] args) throws Exception {\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            String payload = String.format(\"{\\n\" +\n+                    \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n+                    \"\\\"timestamp\\\":%d,\\n\" +\n+                    \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n+                    \"\\\"values\\\":[%f]\\n\" +\n+                    \"}\", System.currentTimeMillis(), random.nextDouble());\n+\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5OTU1Nw=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgwNDQ0OQ==", "bodyText": "This is a known PUBACK flush issue for moquette when the QoS is AT_LEAST_ONCE and EXACTLY_ONCE, this issue has fixed but not released. moquette-io/moquette#515\nDon't worry, I have fixed that when used in the  IoTDB MQTT service, just try again.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403804449", "createdAt": "2020-04-06T02:51:25Z", "author": {"login": "vesense"}, "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+\n+import java.util.Random;\n+\n+public class MQTTClient {\n+    public static void main(String[] args) throws Exception {\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            String payload = String.format(\"{\\n\" +\n+                    \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n+                    \"\\\"timestamp\\\":%d,\\n\" +\n+                    \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n+                    \"\\\"values\\\":[%f]\\n\" +\n+                    \"}\", System.currentTimeMillis(), random.nextDouble());\n+\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5OTU1Nw=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2NjQyOA==", "bodyText": "Hi, thank! It performs right now. In this case, could the \"Thread.sleep(1000)\" in MQTTClient be deleted?", "url": "https://github.com/apache/iotdb/pull/929#discussion_r403966428", "createdAt": "2020-04-06T09:53:12Z", "author": {"login": "qiaojialin"}, "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+\n+import java.util.Random;\n+\n+public class MQTTClient {\n+    public static void main(String[] args) throws Exception {\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            String payload = String.format(\"{\\n\" +\n+                    \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n+                    \"\\\"timestamp\\\":%d,\\n\" +\n+                    \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n+                    \"\\\"values\\\":[%f]\\n\" +\n+                    \"}\", System.currentTimeMillis(), random.nextDouble());\n+\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5OTU1Nw=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODQ2OQ==", "bodyText": "OK", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404068469", "createdAt": "2020-04-06T12:56:50Z", "author": {"login": "vesense"}, "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+\n+import java.util.Random;\n+\n+public class MQTTClient {\n+    public static void main(String[] args) throws Exception {\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            String payload = String.format(\"{\\n\" +\n+                    \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n+                    \"\\\"timestamp\\\":%d,\\n\" +\n+                    \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n+                    \"\\\"values\\\":[%f]\\n\" +\n+                    \"}\", System.currentTimeMillis(), random.nextDouble());\n+\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5OTU1Nw=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MTY5NA==", "bodyText": "done.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404071694", "createdAt": "2020-04-06T13:01:49Z", "author": {"login": "vesense"}, "path": "example/mqtt/src/main/java/org/apache/iotdb/mqtt/MQTTClient.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.mqtt;\n+\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+\n+import java.util.Random;\n+\n+public class MQTTClient {\n+    public static void main(String[] args) throws Exception {\n+        MQTT mqtt = new MQTT();\n+        mqtt.setHost(\"127.0.0.1\", 1883);\n+        mqtt.setUserName(\"root\");\n+        mqtt.setPassword(\"root\");\n+\n+        BlockingConnection connection = mqtt.blockingConnection();\n+        connection.connect();\n+\n+        Random random = new Random();\n+        for (int i = 0; i < 10; i++) {\n+            String payload = String.format(\"{\\n\" +\n+                    \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n+                    \"\\\"timestamp\\\":%d,\\n\" +\n+                    \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n+                    \"\\\"values\\\":[%f]\\n\" +\n+                    \"}\", System.currentTimeMillis(), random.nextDouble());\n+\n+            connection.publish(\"root.sg.d1.s1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5OTU1Nw=="}, "originalCommit": {"oid": "78dd9091bc406825d9390d0b3be653633e57eccb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzY0MjI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/moquette/broker/MQTTConnection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoxMzoxNlrOGBZu8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTowMDo0M1rOGBvRlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyMzM3OQ==", "bodyText": "Hi, as the source code is not written by us, we'd better to claim it in our LICENSE file. You can get an example at the tail of our current LICENSE file.\nAnd do not forget to remove it from the license file once you delete this class.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404123379", "createdAt": "2020-04-06T14:13:16Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/io/moquette/broker/MQTTConnection.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.moquette.broker;\n+\n+import io.moquette.broker.subscriptions.Topic;\n+import io.moquette.broker.security.IAuthenticator;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.mqtt.*;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.netty.channel.ChannelFutureListener.CLOSE_ON_FAILURE;\n+import static io.netty.channel.ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE;\n+import static io.netty.handler.codec.mqtt.MqttConnectReturnCode.*;\n+import static io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader.from;\n+import static io.netty.handler.codec.mqtt.MqttQoS.*;\n+\n+// NOTE:\n+// override the MQTTConnection class in the moquette 0.12.1 jar to fix the PUBACK flush issue\n+// https://github.com/moquette-io/moquette/pull/454\n+// when moquette fixed version released, we can remove this.\n+final class MQTTConnection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54c55780722b36f0e2285ae70fae8bbfb004b151"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NDI2Ng==", "bodyText": "OK", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404474266", "createdAt": "2020-04-07T00:53:35Z", "author": {"login": "vesense"}, "path": "server/src/main/java/io/moquette/broker/MQTTConnection.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.moquette.broker;\n+\n+import io.moquette.broker.subscriptions.Topic;\n+import io.moquette.broker.security.IAuthenticator;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.mqtt.*;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.netty.channel.ChannelFutureListener.CLOSE_ON_FAILURE;\n+import static io.netty.channel.ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE;\n+import static io.netty.handler.codec.mqtt.MqttConnectReturnCode.*;\n+import static io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader.from;\n+import static io.netty.handler.codec.mqtt.MqttQoS.*;\n+\n+// NOTE:\n+// override the MQTTConnection class in the moquette 0.12.1 jar to fix the PUBACK flush issue\n+// https://github.com/moquette-io/moquette/pull/454\n+// when moquette fixed version released, we can remove this.\n+final class MQTTConnection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyMzM3OQ=="}, "originalCommit": {"oid": "54c55780722b36f0e2285ae70fae8bbfb004b151"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NjMxMA==", "bodyText": "done.", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404476310", "createdAt": "2020-04-07T01:00:43Z", "author": {"login": "vesense"}, "path": "server/src/main/java/io/moquette/broker/MQTTConnection.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.moquette.broker;\n+\n+import io.moquette.broker.subscriptions.Topic;\n+import io.moquette.broker.security.IAuthenticator;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.mqtt.*;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.netty.channel.ChannelFutureListener.CLOSE_ON_FAILURE;\n+import static io.netty.channel.ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE;\n+import static io.netty.handler.codec.mqtt.MqttConnectReturnCode.*;\n+import static io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader.from;\n+import static io.netty.handler.codec.mqtt.MqttQoS.*;\n+\n+// NOTE:\n+// override the MQTTConnection class in the moquette 0.12.1 jar to fix the PUBACK flush issue\n+// https://github.com/moquette-io/moquette/pull/454\n+// when moquette fixed version released, we can remove this.\n+final class MQTTConnection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyMzM3OQ=="}, "originalCommit": {"oid": "54c55780722b36f0e2285ae70fae8bbfb004b151"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDEyNzA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/mqtt/JSONPayloadFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzozNzo1NVrOGBxuUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzozNzo1NVrOGBxuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNjQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String JSON_KEY_DEVICE = \"device\";\n          \n          \n            \n                public static final String JSON_KEY_TIMESTAMP = \"timestamp\";\n          \n          \n            \n                public static final String JSON_KEY_TIMESTAMPS = \"timestamps\";\n          \n          \n            \n                public static final String JSON_KEY_MEASUREMENTS = \"measurements\";\n          \n          \n            \n                public static final String JSON_KEY_VALUES = \"values\";\n          \n          \n            \n                private static final String JSON_KEY_DEVICE = \"device\";\n          \n          \n            \n                private static final String JSON_KEY_TIMESTAMP = \"timestamp\";\n          \n          \n            \n                private static final String JSON_KEY_TIMESTAMPS = \"timestamps\";\n          \n          \n            \n                private static final String JSON_KEY_MEASUREMENTS = \"measurements\";\n          \n          \n            \n                private static final String JSON_KEY_VALUES = \"values\";", "url": "https://github.com/apache/iotdb/pull/929#discussion_r404516433", "createdAt": "2020-04-07T03:37:55Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/mqtt/JSONPayloadFormatter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.db.mqtt;\n+\n+import com.alibaba.fastjson.JSON;\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import com.google.common.collect.Lists;\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The JSON payload formatter.\n+ * two json format supported:\n+ * {\n+ *     \"device\":\"root.sg.d1\",\n+ *     \"timestamp\":1586076045524,\n+ *     \"measurements\":[\"s1\",\"s2\"],\n+ *     \"values\":[0.530635,0.530635]\n+ * }\n+ *\n+ * {\n+ *     \"device\":\"root.sg.d1\",\n+ *     \"timestamps\":[1586076045524,1586076065526],\n+ *     \"measurements\":[\"s1\",\"s2\"],\n+ *     \"values\":[[0.530635,0.530635], [0.530655,0.530695]]\n+ * }\n+ */\n+public class JSONPayloadFormatter implements PayloadFormatter {\n+    public static final String JSON_KEY_DEVICE = \"device\";\n+    public static final String JSON_KEY_TIMESTAMP = \"timestamp\";\n+    public static final String JSON_KEY_TIMESTAMPS = \"timestamps\";\n+    public static final String JSON_KEY_MEASUREMENTS = \"measurements\";\n+    public static final String JSON_KEY_VALUES = \"values\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b169efcec2186c636b7cdc82f5100ccb441399"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 136, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}