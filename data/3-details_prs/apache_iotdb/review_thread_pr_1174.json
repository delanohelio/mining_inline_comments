{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTk0OTQ5", "number": 1174, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTo0MjozOVrOD67A6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowMDo0OVrOD79BAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTEwODg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTo0MjozOVrOGS_oXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTowOToxM1rOGTJZdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDA3Ng==", "bodyText": "format back", "url": "https://github.com/apache/iotdb/pull/1174#discussion_r422570076", "createdAt": "2020-05-10T01:42:39Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapter.java", "diffHunk": "@@ -30,86 +30,70 @@\n  * This class is to dynamically adjust some important parameters of the system, determine the speed\n  * of MenTable brushing disk, the speed of file sealing and so on, with the continuous change of\n  * load in the process of system operation.\n- *\n+ * <p>\n  * There are three dynamically adjustable parameters: maxMemTableNum, memtableSize and\n  * tsFileSizeThreshold.\n- *\n+ * <p>\n  * 1. maxMemTableNum. This parameter represents the size of the MemTable available in the MemTable\n  * pool, which is closely related to the number of storage groups. When adding or deleting a storage\n  * group, the parameter also adds or deletes four MemTables. The reason why adding or deleting four\n  * MemTables is that when the system is running stably, the speed of the flush operation is faster\n  * than that of data writing, so one is used for the Flush process and the other is used for data\n  * writing. Otherwise, the system should limit the speed of data writing to maintain stability. And\n  * two for sequence data, two for unsequence data.\n- *\n+ * <p>\n  * 2. memtableSize. This parameter determines the threshold value for the MemTable in memory to be\n  * flushed into disk. When the system load increases, the parameter should be set smaller so that\n  * the data in memory can be flushed into disk as soon as possible.\n- *\n+ * <p>\n  * 3. tsFileSizeThreshold. This parameter determines the speed of the tsfile seal, and then\n  * determines the maximum size of metadata information maintained in memory. When the system load\n  * increases, the parameter should be smaller to seal the file as soon as possible, release the\n  * memory occupied by the corresponding metadata information as soon as possible.\n- *\n+ * <p>\n  * The following equation is used to adjust the dynamic parameters of the data:\n- *\n- * Abbreviation of parameters:\n- * 1 memtableSize: m\n- * 2 maxMemTableNum: Nm\n- * 3 maxSeriesNumberAmongStorageGroup: Ns\n- * 4 tsFileSizeThreshold: Sf\n- * 5 CompressionRatio: c\n- * 6 chunk metadata size: a\n- * 7 static memory: b\n- * 8 allocate memory for write: S\n- *\n- * The equation: m * Nm + Nm * Ns * Sf * a * c / m + b = S\n- * Namely: MemTable data memory size + chunk metadata memory size + static memory size = memory size for write\n- *\n+ * <p>\n+ * Abbreviation of parameters: 1 memtableSize: m 2 maxMemTableNum: Nm 3\n+ * maxSeriesNumberAmongStorageGroup: Ns 4 tsFileSizeThreshold: Sf 5 CompressionRatio: c 6 chunk\n+ * metadata size: a 7 static memory: b 8 allocate memory for write: S\n+ * <p>\n+ * The equation: m * Nm + Nm * Ns * Sf * a * c / m + b = S Namely: MemTable data memory size + chunk\n+ * metadata memory size + static memory size = memory size for write", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77677dea2a0005ff6aba512756395e63862f8e3e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczMDEwMw==", "bodyText": "Sure~", "url": "https://github.com/apache/iotdb/pull/1174#discussion_r422730103", "createdAt": "2020-05-11T01:09:13Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapter.java", "diffHunk": "@@ -30,86 +30,70 @@\n  * This class is to dynamically adjust some important parameters of the system, determine the speed\n  * of MenTable brushing disk, the speed of file sealing and so on, with the continuous change of\n  * load in the process of system operation.\n- *\n+ * <p>\n  * There are three dynamically adjustable parameters: maxMemTableNum, memtableSize and\n  * tsFileSizeThreshold.\n- *\n+ * <p>\n  * 1. maxMemTableNum. This parameter represents the size of the MemTable available in the MemTable\n  * pool, which is closely related to the number of storage groups. When adding or deleting a storage\n  * group, the parameter also adds or deletes four MemTables. The reason why adding or deleting four\n  * MemTables is that when the system is running stably, the speed of the flush operation is faster\n  * than that of data writing, so one is used for the Flush process and the other is used for data\n  * writing. Otherwise, the system should limit the speed of data writing to maintain stability. And\n  * two for sequence data, two for unsequence data.\n- *\n+ * <p>\n  * 2. memtableSize. This parameter determines the threshold value for the MemTable in memory to be\n  * flushed into disk. When the system load increases, the parameter should be set smaller so that\n  * the data in memory can be flushed into disk as soon as possible.\n- *\n+ * <p>\n  * 3. tsFileSizeThreshold. This parameter determines the speed of the tsfile seal, and then\n  * determines the maximum size of metadata information maintained in memory. When the system load\n  * increases, the parameter should be smaller to seal the file as soon as possible, release the\n  * memory occupied by the corresponding metadata information as soon as possible.\n- *\n+ * <p>\n  * The following equation is used to adjust the dynamic parameters of the data:\n- *\n- * Abbreviation of parameters:\n- * 1 memtableSize: m\n- * 2 maxMemTableNum: Nm\n- * 3 maxSeriesNumberAmongStorageGroup: Ns\n- * 4 tsFileSizeThreshold: Sf\n- * 5 CompressionRatio: c\n- * 6 chunk metadata size: a\n- * 7 static memory: b\n- * 8 allocate memory for write: S\n- *\n- * The equation: m * Nm + Nm * Ns * Sf * a * c / m + b = S\n- * Namely: MemTable data memory size + chunk metadata memory size + static memory size = memory size for write\n- *\n+ * <p>\n+ * Abbreviation of parameters: 1 memtableSize: m 2 maxMemTableNum: Nm 3\n+ * maxSeriesNumberAmongStorageGroup: Ns 4 tsFileSizeThreshold: Sf 5 CompressionRatio: c 6 chunk\n+ * metadata size: a 7 static memory: b 8 allocate memory for write: S\n+ * <p>\n+ * The equation: m * Nm + Nm * Ns * Sf * a * c / m + b = S Namely: MemTable data memory size + chunk\n+ * metadata memory size + static memory size = memory size for write", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDA3Ng=="}, "originalCommit": {"oid": "77677dea2a0005ff6aba512756395e63862f8e3e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkxNjQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1OTowNlrOGUl3vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjowNzo1NFrOGUuadA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTE4MA==", "bodyText": "why divide 4?", "url": "https://github.com/apache/iotdb/pull/1174#discussion_r424245180", "createdAt": "2020-05-13T07:59:06Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -276,7 +275,7 @@ private long getMemtableSizeThresholdBasedOnSeriesNum() {\n       return config.getMemtableSizeThreshold();\n     }\n     long memTableSize = (long) (config.getMemtableSizeThreshold() * config.getMaxMemtableNumber()\n-        / IoTDBDescriptor.getInstance().getConfig().getMemtableNumInEachStorageGroup()\n+        / IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition() / 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2173c34eebad6d9bcec36ef5ef74e83391b5c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTg1Mw==", "bodyText": "Ok I see...\nBut you'd better set 4 as a constant value, and refer to the const \"4\" in  addOrDeleteStorageGroup()", "url": "https://github.com/apache/iotdb/pull/1174#discussion_r424245853", "createdAt": "2020-05-13T08:00:15Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -276,7 +275,7 @@ private long getMemtableSizeThresholdBasedOnSeriesNum() {\n       return config.getMemtableSizeThreshold();\n     }\n     long memTableSize = (long) (config.getMemtableSizeThreshold() * config.getMaxMemtableNumber()\n-        / IoTDBDescriptor.getInstance().getConfig().getMemtableNumInEachStorageGroup()\n+        / IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition() / 4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTE4MA=="}, "originalCommit": {"oid": "dd2173c34eebad6d9bcec36ef5ef74e83391b5c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4NTE0MA==", "bodyText": "Sure~ I will fix it!", "url": "https://github.com/apache/iotdb/pull/1174#discussion_r424385140", "createdAt": "2020-05-13T12:07:54Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -276,7 +275,7 @@ private long getMemtableSizeThresholdBasedOnSeriesNum() {\n       return config.getMemtableSizeThreshold();\n     }\n     long memTableSize = (long) (config.getMemtableSizeThreshold() * config.getMaxMemtableNumber()\n-        / IoTDBDescriptor.getInstance().getConfig().getMemtableNumInEachStorageGroup()\n+        / IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition() / 4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTE4MA=="}, "originalCommit": {"oid": "dd2173c34eebad6d9bcec36ef5ef74e83391b5c6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTkyMjU3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowMDo0OVrOGUl7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjowNzo1OVrOGUuanw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NjE5NQ==", "bodyText": "The same issue, set 4 as const and a reference from addOrDeleteStorageGroup()", "url": "https://github.com/apache/iotdb/pull/1174#discussion_r424246195", "createdAt": "2020-05-13T08:00:49Z", "author": {"login": "jixuan1989"}, "path": "server/src/test/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapterTest.java", "diffHunk": "@@ -66,7 +66,7 @@ public void addOrDeleteStorageGroup() throws ConfigAdjusterException {\n     for (int i = 1; i < 1000000; i++) {\n       try {\n         IoTDBConfigDynamicAdapter.getInstance().addOrDeleteStorageGroup(1);\n-        memTableNum += IoTDBDescriptor.getInstance().getConfig().getMemtableNumInEachStorageGroup();\n+        memTableNum += IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition() * 4 + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2173c34eebad6d9bcec36ef5ef74e83391b5c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4NTE4Mw==", "bodyText": "Sure~ I will fix it!", "url": "https://github.com/apache/iotdb/pull/1174#discussion_r424385183", "createdAt": "2020-05-13T12:07:59Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/test/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapterTest.java", "diffHunk": "@@ -66,7 +66,7 @@ public void addOrDeleteStorageGroup() throws ConfigAdjusterException {\n     for (int i = 1; i < 1000000; i++) {\n       try {\n         IoTDBConfigDynamicAdapter.getInstance().addOrDeleteStorageGroup(1);\n-        memTableNum += IoTDBDescriptor.getInstance().getConfig().getMemtableNumInEachStorageGroup();\n+        memTableNum += IoTDBDescriptor.getInstance().getConfig().getConcurrentWritingTimePartition() * 4 + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NjE5NQ=="}, "originalCommit": {"oid": "dd2173c34eebad6d9bcec36ef5ef74e83391b5c6"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4962, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}