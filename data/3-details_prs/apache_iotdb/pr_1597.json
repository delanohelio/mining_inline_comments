{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTAxNzE5", "number": 1597, "title": "add tsfilemanage-merge", "bodyText": "", "createdAt": "2020-08-05T02:11:43Z", "url": "https://github.com/apache/iotdb/pull/1597", "merged": true, "mergeCommit": {"oid": "107f83a1d5770044d7a1a8bd03605db442eeb84a"}, "closed": true, "closedAt": "2020-08-14T08:16:21Z", "author": {"login": "zhanglingzhe0820"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7xgVmgH2gAyNDYzMTAxNzE5OjllNzAyODIzMTlmOTVmYjJmMTdlMDdmZjUwNzYwOGUyNjdhYzM0NWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-u1W3AH2gAyNDYzMTAxNzE5OmE1M2M0ZDY4MDhlYmFlZjI0MjgwODQ5YWMyMzkwY2RkODlkODMxYzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e70282319f95fb2f17e07ff507608e267ac345b", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/9e70282319f95fb2f17e07ff507608e267ac345b", "committedDate": "2020-08-05T02:08:17Z", "message": "add tsfilemanage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca800d5af849085b45befb5d78b995808c541c9b", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/ca800d5af849085b45befb5d78b995808c541c9b", "committedDate": "2020-08-05T02:28:53Z", "message": "Merge branch 'merge' into recover_TsFileProcessor\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9636c72d9ec49ad1151a79184ce17f9abf0102cf", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/9636c72d9ec49ad1151a79184ce17f9abf0102cf", "committedDate": "2020-08-10T01:53:51Z", "message": "add license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc94968f88b72332e4ddc2255caf2e4b80fe035a", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/bc94968f88b72332e4ddc2255caf2e4b80fe035a", "committedDate": "2020-08-10T04:14:59Z", "message": "add lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4946bfb285e7935636a657cfcec07ffc17f2e75a", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/4946bfb285e7935636a657cfcec07ffc17f2e75a", "committedDate": "2020-08-10T15:51:14Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aec0f0fc46ce9093f0e6ba6fe368cb442cb96a4e", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/aec0f0fc46ce9093f0e6ba6fe368cb442cb96a4e", "committedDate": "2020-08-10T16:00:46Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60aeec68d88613ea881e3e68dc9f5312de168182", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/60aeec68d88613ea881e3e68dc9f5312de168182", "committedDate": "2020-08-11T03:33:04Z", "message": "fix windows ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eab828b5b26ce6dfb8c3580a78a779168cbd16bf", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/eab828b5b26ce6dfb8c3580a78a779168cbd16bf", "committedDate": "2020-08-11T06:32:10Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "894aec0236dc49746e6ddada8ec0b1dd8d549757", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/894aec0236dc49746e6ddada8ec0b1dd8d549757", "committedDate": "2020-08-11T10:46:44Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc9770b47fc2e28edfc868fb334074e27d701e24", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/dc9770b47fc2e28edfc868fb334074e27d701e24", "committedDate": "2020-08-11T11:54:38Z", "message": "remove debug log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTU1NTgx", "url": "https://github.com/apache/iotdb/pull/1597#pullrequestreview-464955581", "createdAt": "2020-08-11T10:53:11Z", "commit": {"oid": "894aec0236dc49746e6ddada8ec0b1dd8d549757"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDo1MzoxMVrOG-ykRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoxOTozOVrOG-1Ouw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5MzM4MA==", "bodyText": "Change back", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468493380", "createdAt": "2020-08-11T10:53:11Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -588,9 +591,9 @@\n   private int defaultFillInterval = -1;\n \n   /**\n-   * default TTL for storage groups that are not set TTL by statements, in ms\n-   * Notice: if this property is changed, previous created storage group which are not set TTL\n-   * will also be affected.\n+   * default TTL for storage groups that are not set TTL by statements, in ms Notice: if this\n+   * property is changed, previous created storage group which are not set TTL will also be\n+   * affected.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894aec0236dc49746e6ddada8ec0b1dd8d549757"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5NzgyOA==", "bodyText": "It seems that you forgot to call it in IoTDBDescriptor", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468497828", "createdAt": "2020-08-11T11:01:59Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -1256,20 +1252,30 @@ public void setMergeFileStrategy(\n     this.mergeFileStrategy = mergeFileStrategy;\n   }\n \n-  public boolean isEnableVm() {\n-    return enableVm;\n+\n+  public TsFileManagementStrategy getTsFileManagementStrategy() {\n+    return tsFileManagementStrategy;\n+  }\n+\n+  public void setTsFileManagementStrategy(\n+      TsFileManagementStrategy tsFileManagementStrategy) {\n+    this.tsFileManagementStrategy = tsFileManagementStrategy;\n+  }\n+\n+  public int getMaxFileNumInEachLevel() {\n+    return maxFileNumInEachLevel;\n   }\n \n-  public void setEnableVm(boolean enableVm) {\n-    this.enableVm = enableVm;\n+  public void setMaxFileNumInEachLevel(int maxFileNumInEachLevel) {\n+    this.maxFileNumInEachLevel = maxFileNumInEachLevel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894aec0236dc49746e6ddada8ec0b1dd8d549757"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxMTU0OQ==", "bodyText": "You should call closeStorageGroupCondition.notify() somewhere.", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468511549", "createdAt": "2020-08-11T11:30:59Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1182,6 +1179,13 @@ public void syncCloseAllWorkingTsFileProcessors() {\n                 (System.currentTimeMillis() - startTime) / 1000);\n           }\n         }\n+        while (hotCompactionMergeWorking) {\n+          closeStorageGroupCondition.wait(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894aec0236dc49746e6ddada8ec0b1dd8d549757"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxMjY1NA==", "bodyText": "why we need to call logDeletion twice.", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468512654", "createdAt": "2020-08-11T11:33:13Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1376,6 +1384,7 @@ public void delete(String deviceId, String measurementId, long startTime, long e\n \n       // write log to impacted working TsFileProcessors\n       logDeletion(startTime, endTime, deviceId, measurementId);\n+      logDeletion(startTime, endTime, deviceId, measurementId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894aec0236dc49746e6ddada8ec0b1dd8d549757"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNjk5Mg==", "bodyText": "It's better to add some java doc for these abstract methods. It will be useful for someone else to implement another TsFileManagement.", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468526992", "createdAt": "2020-08-11T12:01:07Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/TsFileManagement.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupProcessor.CloseHotCompactionMergeCallBack;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+\n+public abstract class TsFileManagement {\n+\n+  protected String storageGroupName;\n+  protected String storageGroupDir;\n+\n+  public TsFileManagement(String storageGroupName, String storageGroupDir) {\n+    this.storageGroupName = storageGroupName;\n+    this.storageGroupDir = storageGroupDir;\n+  }\n+\n+  public abstract List<TsFileResource> getMergeTsFileList(boolean sequence);\n+\n+  public abstract List<TsFileResource> getTsFileList(boolean sequence);\n+\n+  public abstract Iterator<TsFileResource> getIterator(boolean sequence);\n+\n+  public abstract void remove(TsFileResource tsFileResource, boolean sequence);\n+\n+  public abstract void removeAll(List<TsFileResource> tsFileResourceList, boolean sequence);\n+\n+  public abstract void add(TsFileResource tsFileResource, boolean sequence);\n+\n+  public abstract void addAll(List<TsFileResource> tsFileResourceList, boolean sequence);\n+\n+  public abstract void addMerged(TsFileResource tsFileResource, boolean sequence);\n+\n+  public abstract void addMergedAll(List<TsFileResource> tsFileResourceList, boolean sequence);\n+\n+  public abstract boolean contains(TsFileResource tsFileResource, boolean sequence);\n+\n+  public abstract void clear();\n+\n+  public abstract boolean isEmpty(boolean sequence);\n+\n+  public abstract int size(boolean sequence);\n+\n+  public abstract void recover();\n+\n+  public abstract void forkCurrentFileList();\n+\n+  protected abstract void merge(ReadWriteLock hotCompactionMergeLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9770b47fc2e28edfc868fb334074e27d701e24"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzMTEzNg==", "bodyText": "Why we need to iterate each level to delete vmMergeTsFiles? Cause, according to my understanding, they should be on the same level.", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468531136", "createdAt": "2020-08-11T12:08:37Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement.level;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.FILE_NAME_SEPARATOR;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.HOT_COMPACTION_LOG_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.SOURCE_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.TARGET_NAME;\n+import static org.apache.iotdb.tsfile.common.constant.TsFileConstant.TSFILE_SUFFIX;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.cache.ChunkMetadataCache;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogAnalyzer;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionUtils;\n+import org.apache.iotdb.db.query.control.FileReaderManager;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.writer.RestorableTsFileIOWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LevelTsFileManagement extends TsFileManagement {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(LevelTsFileManagement.class);\n+  private int maxLevelNum = IoTDBDescriptor.getInstance().getConfig().getMaxLevelNum();\n+  private final List<List<TsFileResource>> sequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> unSequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> forkedSequenceTsFileResources = new ArrayList<>();\n+  private final List<List<TsFileResource>> forkedUnSequenceTsFileResources = new ArrayList<>();\n+\n+  public LevelTsFileManagement(String storageGroupName, String storageGroupDir) {\n+    super(storageGroupName, storageGroupDir);\n+    clear();\n+  }\n+\n+  private void deleteLevelFiles(List<TsFileResource> vmMergeTsFiles) {\n+    logger.debug(\"{} [hot compaction] merge starts to delete file\", storageGroupName);\n+    for (TsFileResource vmMergeTsFile : vmMergeTsFiles) {\n+      deleteLevelFile(vmMergeTsFile);\n+    }\n+    for (int i = 0; i < maxLevelNum; i++) {\n+      sequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+      unSequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9770b47fc2e28edfc868fb334074e27d701e24"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzMTkyOA==", "bodyText": "It seems that we should use currMergeFiles instead of getTsFileList(sequence).", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468531928", "createdAt": "2020-08-11T12:10:07Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement.level;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.FILE_NAME_SEPARATOR;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.HOT_COMPACTION_LOG_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.SOURCE_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.TARGET_NAME;\n+import static org.apache.iotdb.tsfile.common.constant.TsFileConstant.TSFILE_SUFFIX;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.cache.ChunkMetadataCache;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogAnalyzer;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionUtils;\n+import org.apache.iotdb.db.query.control.FileReaderManager;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.writer.RestorableTsFileIOWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LevelTsFileManagement extends TsFileManagement {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(LevelTsFileManagement.class);\n+  private int maxLevelNum = IoTDBDescriptor.getInstance().getConfig().getMaxLevelNum();\n+  private final List<List<TsFileResource>> sequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> unSequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> forkedSequenceTsFileResources = new ArrayList<>();\n+  private final List<List<TsFileResource>> forkedUnSequenceTsFileResources = new ArrayList<>();\n+\n+  public LevelTsFileManagement(String storageGroupName, String storageGroupDir) {\n+    super(storageGroupName, storageGroupDir);\n+    clear();\n+  }\n+\n+  private void deleteLevelFiles(List<TsFileResource> vmMergeTsFiles) {\n+    logger.debug(\"{} [hot compaction] merge starts to delete file\", storageGroupName);\n+    for (TsFileResource vmMergeTsFile : vmMergeTsFiles) {\n+      deleteLevelFile(vmMergeTsFile);\n+    }\n+    for (int i = 0; i < maxLevelNum; i++) {\n+      sequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+      unSequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+    }\n+  }\n+\n+  private static void deleteLevelFile(TsFileResource seqFile) {\n+    seqFile.writeLock();\n+    try {\n+      ChunkMetadataCache.getInstance().remove(seqFile);\n+      FileReaderManager.getInstance().closeFileAndRemoveReader(seqFile.getTsFilePath());\n+      seqFile.setDeleted(true);\n+      if (seqFile.getTsFile().exists()) {\n+        Files.delete(seqFile.getTsFile().toPath());\n+      }\n+    } catch (Exception e) {\n+      logger.error(e.getMessage(), e);\n+    } finally {\n+      seqFile.writeUnlock();\n+    }\n+  }\n+\n+  private void flushAllFilesToLastLevel(List<List<TsFileResource>> currMergeFiles,\n+      HotCompactionLogger hotCompactionLogger, boolean sequence,\n+      ReadWriteLock hotCompactionMergeLock) throws IOException {\n+    TsFileResource sourceFile = currMergeFiles.get(0).get(0);\n+    File newTargetFile = createNewTsFileName(sourceFile.getTsFile(), maxLevelNum - 1);\n+    TsFileResource targetResource = new TsFileResource(newTargetFile);\n+    HotCompactionUtils.merge(targetResource, getTsFileList(sequence),\n+        storageGroupName, hotCompactionLogger, new HashSet<>(), sequence);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9770b47fc2e28edfc868fb334074e27d701e24"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzMzg5Mw==", "bodyText": "change the parameter name. it can be either sequenceTsFileResources or unSequenceTsFileResources", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468533893", "createdAt": "2020-08-11T12:13:55Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement.level;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.FILE_NAME_SEPARATOR;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.HOT_COMPACTION_LOG_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.SOURCE_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.TARGET_NAME;\n+import static org.apache.iotdb.tsfile.common.constant.TsFileConstant.TSFILE_SUFFIX;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.cache.ChunkMetadataCache;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogAnalyzer;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionUtils;\n+import org.apache.iotdb.db.query.control.FileReaderManager;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.writer.RestorableTsFileIOWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LevelTsFileManagement extends TsFileManagement {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(LevelTsFileManagement.class);\n+  private int maxLevelNum = IoTDBDescriptor.getInstance().getConfig().getMaxLevelNum();\n+  private final List<List<TsFileResource>> sequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> unSequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> forkedSequenceTsFileResources = new ArrayList<>();\n+  private final List<List<TsFileResource>> forkedUnSequenceTsFileResources = new ArrayList<>();\n+\n+  public LevelTsFileManagement(String storageGroupName, String storageGroupDir) {\n+    super(storageGroupName, storageGroupDir);\n+    clear();\n+  }\n+\n+  private void deleteLevelFiles(List<TsFileResource> vmMergeTsFiles) {\n+    logger.debug(\"{} [hot compaction] merge starts to delete file\", storageGroupName);\n+    for (TsFileResource vmMergeTsFile : vmMergeTsFiles) {\n+      deleteLevelFile(vmMergeTsFile);\n+    }\n+    for (int i = 0; i < maxLevelNum; i++) {\n+      sequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+      unSequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+    }\n+  }\n+\n+  private static void deleteLevelFile(TsFileResource seqFile) {\n+    seqFile.writeLock();\n+    try {\n+      ChunkMetadataCache.getInstance().remove(seqFile);\n+      FileReaderManager.getInstance().closeFileAndRemoveReader(seqFile.getTsFilePath());\n+      seqFile.setDeleted(true);\n+      if (seqFile.getTsFile().exists()) {\n+        Files.delete(seqFile.getTsFile().toPath());\n+      }\n+    } catch (Exception e) {\n+      logger.error(e.getMessage(), e);\n+    } finally {\n+      seqFile.writeUnlock();\n+    }\n+  }\n+\n+  private void flushAllFilesToLastLevel(List<List<TsFileResource>> currMergeFiles,\n+      HotCompactionLogger hotCompactionLogger, boolean sequence,\n+      ReadWriteLock hotCompactionMergeLock) throws IOException {\n+    TsFileResource sourceFile = currMergeFiles.get(0).get(0);\n+    File newTargetFile = createNewTsFileName(sourceFile.getTsFile(), maxLevelNum - 1);\n+    TsFileResource targetResource = new TsFileResource(newTargetFile);\n+    HotCompactionUtils.merge(targetResource, getTsFileList(sequence),\n+        storageGroupName, hotCompactionLogger, new HashSet<>(), sequence);\n+    hotCompactionLogger.logFullMerge();\n+    hotCompactionLogger.logSequence(sequence);\n+    hotCompactionLogger.logFile(TARGET_NAME, newTargetFile);\n+    hotCompactionMergeLock.writeLock().lock();\n+    for (int i = 0; i < maxLevelNum - 1; i++) {\n+      deleteLevelFiles(currMergeFiles.get(i));\n+    }\n+    hotCompactionMergeLock.writeLock().unlock();\n+    hotCompactionLogger.logMergeFinish();\n+  }\n+\n+  @Override\n+  public List<TsFileResource> getMergeTsFileList(boolean sequence) {\n+    if (sequence) {\n+      return sequenceTsFileResources.get(maxLevelNum - 1);\n+    } else {\n+      return unSequenceTsFileResources.get(maxLevelNum - 1);\n+    }\n+  }\n+\n+  @Override\n+  public List<TsFileResource> getTsFileList(boolean sequence) {\n+    List<TsFileResource> result = new ArrayList<>();\n+    if (sequence) {\n+      for (int i = sequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result.addAll(sequenceTsFileResources.get(i));\n+      }\n+    } else {\n+      for (int i = unSequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result.addAll(unSequenceTsFileResources.get(i));\n+      }\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public Iterator<TsFileResource> getIterator(boolean sequence) {\n+    return getTsFileList(sequence).iterator();\n+  }\n+\n+  @Override\n+  public void remove(TsFileResource tsFileResource, boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        sequenceTsFileResource.remove(tsFileResource);\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        unSequenceTsFileResource.remove(tsFileResource);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void removeAll(List<TsFileResource> tsFileResourceList, boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        sequenceTsFileResource.removeAll(tsFileResourceList);\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        unSequenceTsFileResource.removeAll(tsFileResourceList);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void add(TsFileResource tsFileResource, boolean sequence) {\n+    int level = getMergeLevel(tsFileResource.getTsFile());\n+    if (level <= maxLevelNum - 1) {\n+      if (sequence) {\n+        sequenceTsFileResources.get(level).add(tsFileResource);\n+      } else {\n+        unSequenceTsFileResources.get(level).add(tsFileResource);\n+      }\n+    } else {\n+      if (sequence) {\n+        sequenceTsFileResources.get(maxLevelNum).add(tsFileResource);\n+      } else {\n+        unSequenceTsFileResources.get(maxLevelNum).add(tsFileResource);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void addAll(List<TsFileResource> tsFileResourceList, boolean sequence) {\n+    for (TsFileResource tsFileResource : tsFileResourceList) {\n+      add(tsFileResource, sequence);\n+    }\n+  }\n+\n+  @Override\n+  public void addMerged(TsFileResource tsFileResource, boolean sequence) {\n+    if (sequence) {\n+      sequenceTsFileResources.get(maxLevelNum - 1).add(tsFileResource);\n+    } else {\n+      unSequenceTsFileResources.get(maxLevelNum - 1).add(tsFileResource);\n+    }\n+  }\n+\n+  @Override\n+  public void addMergedAll(List<TsFileResource> tsFileResourceList, boolean sequence) {\n+    if (sequence) {\n+      sequenceTsFileResources.get(maxLevelNum - 1).addAll(tsFileResourceList);\n+    } else {\n+      unSequenceTsFileResources.get(maxLevelNum - 1).addAll(tsFileResourceList);\n+    }\n+  }\n+\n+  @Override\n+  public boolean contains(TsFileResource tsFileResource, boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        if (sequenceTsFileResource.contains(tsFileResource)) {\n+          return true;\n+        }\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        if (unSequenceTsFileResource.contains(tsFileResource)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void clear() {\n+    sequenceTsFileResources.clear();\n+    for (int i = 0; i < maxLevelNum + 1; i++) {\n+      sequenceTsFileResources.add(new CopyOnWriteArrayList<>());\n+    }\n+    unSequenceTsFileResources.clear();\n+    for (int i = 0; i < maxLevelNum + 1; i++) {\n+      unSequenceTsFileResources.add(new CopyOnWriteArrayList<>());\n+    }\n+  }\n+\n+  @Override\n+  public boolean isEmpty(boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        if (!sequenceTsFileResource.isEmpty()) {\n+          return false;\n+        }\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        if (!unSequenceTsFileResource.isEmpty()) {\n+          return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public int size(boolean sequence) {\n+    int result = 0;\n+    if (sequence) {\n+      for (int i = sequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result += sequenceTsFileResources.size();\n+      }\n+    } else {\n+      for (int i = unSequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result += unSequenceTsFileResources.size();\n+      }\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * recover files\n+   */\n+  @Override\n+  public void recover() {\n+    File logFile = FSFactoryProducer.getFSFactory()\n+        .getFile(storageGroupDir, storageGroupName + HOT_COMPACTION_LOG_NAME);\n+    try {\n+      if (logFile.exists()) {\n+        HotCompactionLogAnalyzer logAnalyzer = new HotCompactionLogAnalyzer(logFile);\n+        logAnalyzer.analyze();\n+        Set<String> deviceSet = logAnalyzer.getDeviceSet();\n+        List<File> sourceFileList = logAnalyzer.getSourceFiles();\n+        long offset = logAnalyzer.getOffset();\n+        File targetFile = logAnalyzer.getTargetFile();\n+        boolean isMergeFinished = logAnalyzer.isMergeFinished();\n+        boolean fullMerge = logAnalyzer.isFullMerge();\n+        boolean isSeq = logAnalyzer.isSeq();\n+        if (targetFile == null) {\n+          return;\n+        }\n+        if (fullMerge) {\n+          if (!isMergeFinished) {\n+            RestorableTsFileIOWriter writer = new RestorableTsFileIOWriter(targetFile);\n+            writer.getIOWriterOut().truncate(offset - 1);\n+            writer.close();\n+            HotCompactionUtils\n+                .merge(new TsFileResource(targetFile), getTsFileList(isSeq), storageGroupName,\n+                    new HotCompactionLogger(storageGroupDir, storageGroupName), deviceSet, isSeq);\n+            if (isSeq) {\n+              for (List<TsFileResource> currMergeFile : sequenceTsFileResources) {\n+                deleteLevelFiles(currMergeFile);\n+              }\n+            } else {\n+              for (List<TsFileResource> currMergeFile : unSequenceTsFileResources) {\n+                deleteLevelFiles(currMergeFile);\n+              }\n+            }\n+          }\n+        } else {\n+          TsFileResource targetResource = new TsFileResource(targetFile);\n+          RestorableTsFileIOWriter writer = new RestorableTsFileIOWriter(targetFile);\n+          if (sourceFileList.isEmpty()) {\n+            return;\n+          }\n+          int level = getMergeLevel(sourceFileList.get(0));\n+          if (!isMergeFinished) {\n+            if (deviceSet.isEmpty()) {\n+              Files.delete(targetFile.toPath());\n+            } else {\n+              writer.getIOWriterOut().truncate(offset - 1);\n+              writer.close();\n+              if (isSeq) {\n+                HotCompactionUtils\n+                    .merge(targetResource, sequenceTsFileResources.get(level),\n+                        storageGroupName,\n+                        new HotCompactionLogger(storageGroupDir, storageGroupName), deviceSet,\n+                        true);\n+                deleteLevelFiles(sequenceTsFileResources.get(level));\n+                sequenceTsFileResources.get(level + 1).add(targetResource);\n+              } else {\n+                HotCompactionUtils\n+                    .merge(targetResource, unSequenceTsFileResources.get(level),\n+                        storageGroupName,\n+                        new HotCompactionLogger(storageGroupDir, storageGroupName), deviceSet,\n+                        false);\n+                deleteLevelFiles(unSequenceTsFileResources.get(level));\n+                unSequenceTsFileResources.get(level + 1).add(targetResource);\n+              }\n+            }\n+          }\n+        }\n+      }\n+    } catch (IOException e) {\n+      logger.error(\"recover vm error \", e);\n+    } finally {\n+      if (logFile.exists()) {\n+        try {\n+          Files.delete(logFile.toPath());\n+        } catch (IOException e) {\n+          logger.error(\"delete vm log file error \", e);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void forkCurrentFileList() {\n+    forkTsFileList(forkedSequenceTsFileResources, sequenceTsFileResources);\n+    forkTsFileList(forkedUnSequenceTsFileResources, unSequenceTsFileResources);\n+  }\n+\n+  private void forkTsFileList(List<List<TsFileResource>> forkedSequenceTsFileResources,\n+      List<List<TsFileResource>> sequenceTsFileResources) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9770b47fc2e28edfc868fb334074e27d701e24"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNzAxOQ==", "bodyText": "sequenceTsFileResources' size is maxLevelNum + 1, so should the maxLevelNum - 1 be maxLevelNum?", "url": "https://github.com/apache/iotdb/pull/1597#discussion_r468537019", "createdAt": "2020-08-11T12:19:39Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/tsfilemanagement/level/LevelTsFileManagement.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.tsfilemanagement.level;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.FILE_NAME_SEPARATOR;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.HOT_COMPACTION_LOG_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.SOURCE_NAME;\n+import static org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger.TARGET_NAME;\n+import static org.apache.iotdb.tsfile.common.constant.TsFileConstant.TSFILE_SUFFIX;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.cache.ChunkMetadataCache;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.engine.tsfilemanagement.TsFileManagement;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogAnalyzer;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionLogger;\n+import org.apache.iotdb.db.engine.tsfilemanagement.utils.HotCompactionUtils;\n+import org.apache.iotdb.db.query.control.FileReaderManager;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.writer.RestorableTsFileIOWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LevelTsFileManagement extends TsFileManagement {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(LevelTsFileManagement.class);\n+  private int maxLevelNum = IoTDBDescriptor.getInstance().getConfig().getMaxLevelNum();\n+  private final List<List<TsFileResource>> sequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> unSequenceTsFileResources = new CopyOnWriteArrayList<>();\n+  private final List<List<TsFileResource>> forkedSequenceTsFileResources = new ArrayList<>();\n+  private final List<List<TsFileResource>> forkedUnSequenceTsFileResources = new ArrayList<>();\n+\n+  public LevelTsFileManagement(String storageGroupName, String storageGroupDir) {\n+    super(storageGroupName, storageGroupDir);\n+    clear();\n+  }\n+\n+  private void deleteLevelFiles(List<TsFileResource> vmMergeTsFiles) {\n+    logger.debug(\"{} [hot compaction] merge starts to delete file\", storageGroupName);\n+    for (TsFileResource vmMergeTsFile : vmMergeTsFiles) {\n+      deleteLevelFile(vmMergeTsFile);\n+    }\n+    for (int i = 0; i < maxLevelNum; i++) {\n+      sequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+      unSequenceTsFileResources.get(i).removeAll(vmMergeTsFiles);\n+    }\n+  }\n+\n+  private static void deleteLevelFile(TsFileResource seqFile) {\n+    seqFile.writeLock();\n+    try {\n+      ChunkMetadataCache.getInstance().remove(seqFile);\n+      FileReaderManager.getInstance().closeFileAndRemoveReader(seqFile.getTsFilePath());\n+      seqFile.setDeleted(true);\n+      if (seqFile.getTsFile().exists()) {\n+        Files.delete(seqFile.getTsFile().toPath());\n+      }\n+    } catch (Exception e) {\n+      logger.error(e.getMessage(), e);\n+    } finally {\n+      seqFile.writeUnlock();\n+    }\n+  }\n+\n+  private void flushAllFilesToLastLevel(List<List<TsFileResource>> currMergeFiles,\n+      HotCompactionLogger hotCompactionLogger, boolean sequence,\n+      ReadWriteLock hotCompactionMergeLock) throws IOException {\n+    TsFileResource sourceFile = currMergeFiles.get(0).get(0);\n+    File newTargetFile = createNewTsFileName(sourceFile.getTsFile(), maxLevelNum - 1);\n+    TsFileResource targetResource = new TsFileResource(newTargetFile);\n+    HotCompactionUtils.merge(targetResource, getTsFileList(sequence),\n+        storageGroupName, hotCompactionLogger, new HashSet<>(), sequence);\n+    hotCompactionLogger.logFullMerge();\n+    hotCompactionLogger.logSequence(sequence);\n+    hotCompactionLogger.logFile(TARGET_NAME, newTargetFile);\n+    hotCompactionMergeLock.writeLock().lock();\n+    for (int i = 0; i < maxLevelNum - 1; i++) {\n+      deleteLevelFiles(currMergeFiles.get(i));\n+    }\n+    hotCompactionMergeLock.writeLock().unlock();\n+    hotCompactionLogger.logMergeFinish();\n+  }\n+\n+  @Override\n+  public List<TsFileResource> getMergeTsFileList(boolean sequence) {\n+    if (sequence) {\n+      return sequenceTsFileResources.get(maxLevelNum - 1);\n+    } else {\n+      return unSequenceTsFileResources.get(maxLevelNum - 1);\n+    }\n+  }\n+\n+  @Override\n+  public List<TsFileResource> getTsFileList(boolean sequence) {\n+    List<TsFileResource> result = new ArrayList<>();\n+    if (sequence) {\n+      for (int i = sequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result.addAll(sequenceTsFileResources.get(i));\n+      }\n+    } else {\n+      for (int i = unSequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result.addAll(unSequenceTsFileResources.get(i));\n+      }\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public Iterator<TsFileResource> getIterator(boolean sequence) {\n+    return getTsFileList(sequence).iterator();\n+  }\n+\n+  @Override\n+  public void remove(TsFileResource tsFileResource, boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        sequenceTsFileResource.remove(tsFileResource);\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        unSequenceTsFileResource.remove(tsFileResource);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void removeAll(List<TsFileResource> tsFileResourceList, boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        sequenceTsFileResource.removeAll(tsFileResourceList);\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        unSequenceTsFileResource.removeAll(tsFileResourceList);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void add(TsFileResource tsFileResource, boolean sequence) {\n+    int level = getMergeLevel(tsFileResource.getTsFile());\n+    if (level <= maxLevelNum - 1) {\n+      if (sequence) {\n+        sequenceTsFileResources.get(level).add(tsFileResource);\n+      } else {\n+        unSequenceTsFileResources.get(level).add(tsFileResource);\n+      }\n+    } else {\n+      if (sequence) {\n+        sequenceTsFileResources.get(maxLevelNum).add(tsFileResource);\n+      } else {\n+        unSequenceTsFileResources.get(maxLevelNum).add(tsFileResource);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void addAll(List<TsFileResource> tsFileResourceList, boolean sequence) {\n+    for (TsFileResource tsFileResource : tsFileResourceList) {\n+      add(tsFileResource, sequence);\n+    }\n+  }\n+\n+  @Override\n+  public void addMerged(TsFileResource tsFileResource, boolean sequence) {\n+    if (sequence) {\n+      sequenceTsFileResources.get(maxLevelNum - 1).add(tsFileResource);\n+    } else {\n+      unSequenceTsFileResources.get(maxLevelNum - 1).add(tsFileResource);\n+    }\n+  }\n+\n+  @Override\n+  public void addMergedAll(List<TsFileResource> tsFileResourceList, boolean sequence) {\n+    if (sequence) {\n+      sequenceTsFileResources.get(maxLevelNum - 1).addAll(tsFileResourceList);\n+    } else {\n+      unSequenceTsFileResources.get(maxLevelNum - 1).addAll(tsFileResourceList);\n+    }\n+  }\n+\n+  @Override\n+  public boolean contains(TsFileResource tsFileResource, boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        if (sequenceTsFileResource.contains(tsFileResource)) {\n+          return true;\n+        }\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        if (unSequenceTsFileResource.contains(tsFileResource)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void clear() {\n+    sequenceTsFileResources.clear();\n+    for (int i = 0; i < maxLevelNum + 1; i++) {\n+      sequenceTsFileResources.add(new CopyOnWriteArrayList<>());\n+    }\n+    unSequenceTsFileResources.clear();\n+    for (int i = 0; i < maxLevelNum + 1; i++) {\n+      unSequenceTsFileResources.add(new CopyOnWriteArrayList<>());\n+    }\n+  }\n+\n+  @Override\n+  public boolean isEmpty(boolean sequence) {\n+    if (sequence) {\n+      for (List<TsFileResource> sequenceTsFileResource : sequenceTsFileResources) {\n+        if (!sequenceTsFileResource.isEmpty()) {\n+          return false;\n+        }\n+      }\n+    } else {\n+      for (List<TsFileResource> unSequenceTsFileResource : unSequenceTsFileResources) {\n+        if (!unSequenceTsFileResource.isEmpty()) {\n+          return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public int size(boolean sequence) {\n+    int result = 0;\n+    if (sequence) {\n+      for (int i = sequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result += sequenceTsFileResources.size();\n+      }\n+    } else {\n+      for (int i = unSequenceTsFileResources.size() - 1; i >= 0; i--) {\n+        result += unSequenceTsFileResources.size();\n+      }\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * recover files\n+   */\n+  @Override\n+  public void recover() {\n+    File logFile = FSFactoryProducer.getFSFactory()\n+        .getFile(storageGroupDir, storageGroupName + HOT_COMPACTION_LOG_NAME);\n+    try {\n+      if (logFile.exists()) {\n+        HotCompactionLogAnalyzer logAnalyzer = new HotCompactionLogAnalyzer(logFile);\n+        logAnalyzer.analyze();\n+        Set<String> deviceSet = logAnalyzer.getDeviceSet();\n+        List<File> sourceFileList = logAnalyzer.getSourceFiles();\n+        long offset = logAnalyzer.getOffset();\n+        File targetFile = logAnalyzer.getTargetFile();\n+        boolean isMergeFinished = logAnalyzer.isMergeFinished();\n+        boolean fullMerge = logAnalyzer.isFullMerge();\n+        boolean isSeq = logAnalyzer.isSeq();\n+        if (targetFile == null) {\n+          return;\n+        }\n+        if (fullMerge) {\n+          if (!isMergeFinished) {\n+            RestorableTsFileIOWriter writer = new RestorableTsFileIOWriter(targetFile);\n+            writer.getIOWriterOut().truncate(offset - 1);\n+            writer.close();\n+            HotCompactionUtils\n+                .merge(new TsFileResource(targetFile), getTsFileList(isSeq), storageGroupName,\n+                    new HotCompactionLogger(storageGroupDir, storageGroupName), deviceSet, isSeq);\n+            if (isSeq) {\n+              for (List<TsFileResource> currMergeFile : sequenceTsFileResources) {\n+                deleteLevelFiles(currMergeFile);\n+              }\n+            } else {\n+              for (List<TsFileResource> currMergeFile : unSequenceTsFileResources) {\n+                deleteLevelFiles(currMergeFile);\n+              }\n+            }\n+          }\n+        } else {\n+          TsFileResource targetResource = new TsFileResource(targetFile);\n+          RestorableTsFileIOWriter writer = new RestorableTsFileIOWriter(targetFile);\n+          if (sourceFileList.isEmpty()) {\n+            return;\n+          }\n+          int level = getMergeLevel(sourceFileList.get(0));\n+          if (!isMergeFinished) {\n+            if (deviceSet.isEmpty()) {\n+              Files.delete(targetFile.toPath());\n+            } else {\n+              writer.getIOWriterOut().truncate(offset - 1);\n+              writer.close();\n+              if (isSeq) {\n+                HotCompactionUtils\n+                    .merge(targetResource, sequenceTsFileResources.get(level),\n+                        storageGroupName,\n+                        new HotCompactionLogger(storageGroupDir, storageGroupName), deviceSet,\n+                        true);\n+                deleteLevelFiles(sequenceTsFileResources.get(level));\n+                sequenceTsFileResources.get(level + 1).add(targetResource);\n+              } else {\n+                HotCompactionUtils\n+                    .merge(targetResource, unSequenceTsFileResources.get(level),\n+                        storageGroupName,\n+                        new HotCompactionLogger(storageGroupDir, storageGroupName), deviceSet,\n+                        false);\n+                deleteLevelFiles(unSequenceTsFileResources.get(level));\n+                unSequenceTsFileResources.get(level + 1).add(targetResource);\n+              }\n+            }\n+          }\n+        }\n+      }\n+    } catch (IOException e) {\n+      logger.error(\"recover vm error \", e);\n+    } finally {\n+      if (logFile.exists()) {\n+        try {\n+          Files.delete(logFile.toPath());\n+        } catch (IOException e) {\n+          logger.error(\"delete vm log file error \", e);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void forkCurrentFileList() {\n+    forkTsFileList(forkedSequenceTsFileResources, sequenceTsFileResources);\n+    forkTsFileList(forkedUnSequenceTsFileResources, unSequenceTsFileResources);\n+  }\n+\n+  private void forkTsFileList(List<List<TsFileResource>> forkedSequenceTsFileResources,\n+      List<List<TsFileResource>> sequenceTsFileResources) {\n+    forkedSequenceTsFileResources.clear();\n+    for (int i = 0; i < maxLevelNum - 1; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9770b47fc2e28edfc868fb334074e27d701e24"}, "originalPosition": 373}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9017dac414d8da6daef63726cd2ee2ba65fded78", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/9017dac414d8da6daef63726cd2ee2ba65fded78", "committedDate": "2020-08-11T13:32:20Z", "message": "resolve conversation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e46d3a241f1a786ac583e072ffa0e002dbc042b", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/6e46d3a241f1a786ac583e072ffa0e002dbc042b", "committedDate": "2020-08-12T01:19:54Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15a5fbb392e502a17bd02f67b11b28d61cc82af", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/d15a5fbb392e502a17bd02f67b11b28d61cc82af", "committedDate": "2020-08-12T06:04:58Z", "message": "dev ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd174455d42e503265f074fcb9e37b30909dfd1b", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/cd174455d42e503265f074fcb9e37b30909dfd1b", "committedDate": "2020-08-12T07:11:14Z", "message": "Revert \"dev ci\"\n\nThis reverts commit d15a5fbb392e502a17bd02f67b11b28d61cc82af."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b457e4ff8bb91c3a88bb455c2984b41d0b474475", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/b457e4ff8bb91c3a88bb455c2984b41d0b474475", "committedDate": "2020-08-12T07:37:08Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cddaa76ff15498a999947d20c752cd1fc9382f8e", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/cddaa76ff15498a999947d20c752cd1fc9382f8e", "committedDate": "2020-08-12T08:11:45Z", "message": "update pool position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34712bfee5912e0f69ad4419e4304e94eb3e1f1c", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/34712bfee5912e0f69ad4419e4304e94eb3e1f1c", "committedDate": "2020-08-12T08:13:37Z", "message": "Merge branch 'merge' into recover_TsFileProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7acc04d193f00c83a99106692ed9f3bd2506ec89", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/7acc04d193f00c83a99106692ed9f3bd2506ec89", "committedDate": "2020-08-12T09:41:20Z", "message": "update level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76dacae95a29e6ef2219521e59823f08f3ec00be", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/76dacae95a29e6ef2219521e59823f08f3ec00be", "committedDate": "2020-08-12T10:57:42Z", "message": "update lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f4e1812a0d8d2ed6dc218f39abdc367850f5c3", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/f9f4e1812a0d8d2ed6dc218f39abdc367850f5c3", "committedDate": "2020-08-13T01:57:57Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba46b3d7b6015aedbdf6cccd85a0c07a8d723b54", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/ba46b3d7b6015aedbdf6cccd85a0c07a8d723b54", "committedDate": "2020-08-13T02:54:36Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9486d260ed94b00fdc514f8a128bc4a4189f3fb7", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/9486d260ed94b00fdc514f8a128bc4a4189f3fb7", "committedDate": "2020-08-13T03:59:14Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf4f862f1a4ef6402d2a50c6d75b70120eef7b31", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/cf4f862f1a4ef6402d2a50c6d75b70120eef7b31", "committedDate": "2020-08-13T06:46:00Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ecd4149fe40289c4a1be34796dc670ed73f21b", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/53ecd4149fe40289c4a1be34796dc670ed73f21b", "committedDate": "2020-08-13T08:17:47Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "861cb39b81290d58a222b2d5987058c333338c7c", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/861cb39b81290d58a222b2d5987058c333338c7c", "committedDate": "2020-08-13T12:22:19Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c4893c5e24eee64b88b38e040a39bcb25806344", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/6c4893c5e24eee64b88b38e040a39bcb25806344", "committedDate": "2020-08-13T15:00:49Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1580b584e2ae3dad074bd49fd8071c75e3e2b51b", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/1580b584e2ae3dad074bd49fd8071c75e3e2b51b", "committedDate": "2020-08-14T05:16:56Z", "message": "fix ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53c4d6808ebaef24280849ac2390cdd89d831c7", "author": {"user": {"login": "zhanglingzhe0820", "name": null}}, "url": "https://github.com/apache/iotdb/commit/a53c4d6808ebaef24280849ac2390cdd89d831c7", "committedDate": "2020-08-14T06:43:18Z", "message": "try fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3363, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}