{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDA4ODI2", "number": 1102, "title": "[IOTDB-348] Implement LoadConfigurationPlan", "bodyText": "This pull request implements how the LoadConfigurationPlan is transmitted among nodes in the cluster and then executed.\nThere are two kinds of LoadConfigurationPlan, one being executed locally, the other globally.\nThe following statements are tested:\n\nLOAD CONFIGURATION           // locally\nLOAD CONFIGURATION -g      // globally", "createdAt": "2020-04-26T03:28:05Z", "url": "https://github.com/apache/iotdb/pull/1102", "merged": true, "mergeCommit": {"oid": "c6ef5b618671a1cc8b29668e31aa9b0292c4702b"}, "closed": true, "closedAt": "2020-04-28T02:48:50Z", "author": {"login": "Ring-k"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcae70OAH2gAyNDA5MDA4ODI2OjJkMWJjM2NhOTc2NWExY2EwYjFmZTAzMDRjMTg3MjQ5NTU5YTUyN2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcb6vr4gFqTQwMTQ2MTAzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d1bc3ca9765a1ca0b1fe0304c187249559a527e", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/2d1bc3ca9765a1ca0b1fe0304c187249559a527e", "committedDate": "2020-04-23T15:50:36Z", "message": "implement load configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f58611cd12ad84c90e3e844cd9eacf01cf4564", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/98f58611cd12ad84c90e3e844cd9eacf01cf4564", "committedDate": "2020-04-25T15:28:47Z", "message": "implement load configuration -g"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0164140708b89030905d8e168216ea9b4a08d33", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/f0164140708b89030905d8e168216ea9b4a08d33", "committedDate": "2020-04-26T03:19:12Z", "message": "execute local"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/7d3d0759bbb9d6808854c4b92e9878926e64baf8", "committedDate": "2020-04-26T03:34:34Z", "message": "delete some comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTg4OTEx", "url": "https://github.com/apache/iotdb/pull/1102#pullrequestreview-400588911", "createdAt": "2020-04-27T02:17:38Z", "commit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxNzozOVrOGMN94A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjo0NToyMlrOGMOcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NDkyOA==", "bodyText": "Please find somewhere to add the documents about what configurations are supported even if it is only an empty list now.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415464928", "createdAt": "2020-04-27T02:17:39Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "diffHunk": "@@ -204,4 +206,53 @@ private void loadProps() {\n     }\n     return urlList;\n   }\n+\n+  public void loadHotModifiedProps() throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      logger.info(\"Start to reload config file {}\", url);\n+      Properties properties = new Properties();\n+      properties.load(inputStream);\n+      loadHotModifiedProps(properties, false);\n+    } catch (Exception e) {\n+      logger.warn(\"Fail to reload config file {}\", url, e);\n+      throw new QueryProcessException(\n+          String.format(\"Fail to reload config file %s because %s\", url, e.getMessage()));\n+    }\n+  }\n+\n+  public void loadHotModifiedProps(Properties properties, boolean toCheckProperties)\n+      throws QueryProcessException {\n+    if (toCheckProperties && !checkProperties(properties)) {\n+      throw new QueryProcessException(\n+          \"Failed to load configuration from properties because some are missing locally.\");\n+    }\n+    // TODO implement some hot modified properties to load\n+    logger.info(\"Set cluster configuration {}\", properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzA4Mw==", "bodyText": "I am not sure if I got it right, but the parameter properties is loaded from getPropUrl() and you also load getPropUrl() into localProperties, so it seems that properties must be a subset of localProperties.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415467083", "createdAt": "2020-04-27T02:25:03Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "diffHunk": "@@ -204,4 +206,53 @@ private void loadProps() {\n     }\n     return urlList;\n   }\n+\n+  public void loadHotModifiedProps() throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      logger.info(\"Start to reload config file {}\", url);\n+      Properties properties = new Properties();\n+      properties.load(inputStream);\n+      loadHotModifiedProps(properties, false);\n+    } catch (Exception e) {\n+      logger.warn(\"Fail to reload config file {}\", url, e);\n+      throw new QueryProcessException(\n+          String.format(\"Fail to reload config file %s because %s\", url, e.getMessage()));\n+    }\n+  }\n+\n+  public void loadHotModifiedProps(Properties properties, boolean toCheckProperties)\n+      throws QueryProcessException {\n+    if (toCheckProperties && !checkProperties(properties)) {\n+      throw new QueryProcessException(\n+          \"Failed to load configuration from properties because some are missing locally.\");\n+    }\n+    // TODO implement some hot modified properties to load\n+    logger.info(\"Set cluster configuration {}\", properties);\n+  }\n+\n+  private boolean checkProperties(Properties properties) throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return false;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      Properties localProperties = System.getProperties();\n+      localProperties.load(inputStream);\n+      Set<String> localPropertyNames = localProperties.stringPropertyNames();\n+      for (String propertyName : properties.stringPropertyNames()) {\n+        if (!localPropertyNames.contains(propertyName)) {\n+          return false;\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDM0NA==", "bodyText": "Please remove this.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415470344", "createdAt": "2020-04-27T02:36:39Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }\n+          stream.writeInt(propertiesMap.size());\n+          for(Entry entry : propertiesMap.entrySet()){\n+            putString(stream, String.valueOf(entry.getKey()));\n+            putString(stream, String.valueOf(entry.getValue()));\n+          }\n+//          ReadWriteIOUtils.write(propertiesMap, stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MTE2MA==", "bodyText": "I wonder if it is necessary to put the properties into a new map, as you have the entrySet, you can just write them into the stream within this loop.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415471160", "createdAt": "2020-04-27T02:39:38Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MjY3OA==", "bodyText": "Maybe you could just use Properties.setProperty and discard the map.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415472678", "createdAt": "2020-04-27T02:45:22Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }\n+          stream.writeInt(propertiesMap.size());\n+          for(Entry entry : propertiesMap.entrySet()){\n+            putString(stream, String.valueOf(entry.getKey()));\n+            putString(stream, String.valueOf(entry.getValue()));\n+          }\n+//          ReadWriteIOUtils.write(propertiesMap, stream);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuffer buffer) {\n+    loadConfigurationPlanType = LoadConfigurationPlanType.values()[buffer.getInt()];\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      int propertiesNum = buffer.getInt();\n+      propertiesArray = new Properties[propertiesNum];\n+      for (int i = 0; i < propertiesArray.length; i++) {\n+        if (buffer.getInt() == 1) {\n+          propertiesArray[i] = new Properties();\n+          int size = buffer.getInt();\n+          Map<String, String> values = new HashMap<>(size);\n+          for(int j = 0; j < size; j++){\n+            values.put(readString(buffer), readString(buffer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f81cec02bb581416fc310650b5cc9795cba7ab4", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/7f81cec02bb581416fc310650b5cc9795cba7ab4", "committedDate": "2020-04-27T03:06:44Z", "message": "\u3000add antlr file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2791604a60e0094db1aa550586fedc75216b6e2d", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/2791604a60e0094db1aa550586fedc75216b6e2d", "committedDate": "2020-04-27T03:17:31Z", "message": "remove map"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjA4MDgx", "url": "https://github.com/apache/iotdb/pull/1102#pullrequestreview-400608081", "createdAt": "2020-04-27T03:41:19Z", "commit": {"oid": "2791604a60e0094db1aa550586fedc75216b6e2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "475efb2d2ef27579cb49feefd14629f6cd8925de", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/475efb2d2ef27579cb49feefd14629f6cd8925de", "committedDate": "2020-04-27T09:42:25Z", "message": "fix conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fdf27a4a049310b21405985f1d7f4a15451279f", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/3fdf27a4a049310b21405985f1d7f4a15451279f", "committedDate": "2020-04-27T09:45:35Z", "message": "remove unused arg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c4f9ad5b4427a8650822f1f952898f7df527724", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/4c4f9ad5b4427a8650822f1f952898f7df527724", "committedDate": "2020-04-27T10:00:35Z", "message": "hot modified cluster properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3ce34b729553817889a3ab92a7e354263c28bc", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/3c3ce34b729553817889a3ab92a7e354263c28bc", "committedDate": "2020-04-27T10:03:17Z", "message": "remove rpc compression as hot modified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f10e50c48df590a11d4a87ec31c7fa5a8afc49d9", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/f10e50c48df590a11d4a87ec31c7fa5a8afc49d9", "committedDate": "2020-04-27T10:27:07Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1154f7875039e4a97c220c5bf3dc1d7e2604dd0", "author": {"user": {"login": "Ring-k", "name": null}}, "url": "https://github.com/apache/iotdb/commit/e1154f7875039e4a97c220c5bf3dc1d7e2604dd0", "committedDate": "2020-04-28T00:48:39Z", "message": "fix conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDYxMDMz", "url": "https://github.com/apache/iotdb/pull/1102#pullrequestreview-401461033", "createdAt": "2020-04-28T02:48:37Z", "commit": {"oid": "e1154f7875039e4a97c220c5bf3dc1d7e2604dd0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2987, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}