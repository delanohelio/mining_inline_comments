{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTk5MjI4", "number": 1161, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMDo0M1rOD6EkEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMjoyMlrOD6ElHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjE4NzcxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMDo0M1rOGRsqoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzo0ODoyNFrOGRtX_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMDc4NQ==", "bodyText": "As a node exists in multiple groups, a node will perform the same deletion several times and I am not sure if it is meaningful. Why not just send the deletion to each node in allNodes?", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421210785", "createdAt": "2020-05-07T03:00:43Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -373,8 +373,85 @@ protected void loadConfiguration(LoadConfigurationPlan plan) throws QueryProcess\n         break;\n       default:\n         throw new QueryProcessException(String\n-            .format(\"Unrecognized load configuration plan type: %s\",\n-                plan.getLoadConfigurationPlanType()));\n+                .format(\"Unrecognized load configuration plan type: %s\",\n+                        plan.getLoadConfigurationPlanType()));\n+    }\n+  }\n+\n+  @Override\n+  protected Pair<Set<String>, String> deleteTimeseries(String path) throws MetadataException {\n+    ConcurrentHashMap<String, Set<String>> resultPair = new ConcurrentHashMap<>();\n+    Pair<Set<String>, String> localPair = MManager.getInstance().deleteTimeseries(path);\n+    resultPair.put(localPair.right, localPair.left);\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (PartitionGroup group : metaGroupMember.getPartitionTable().getGlobalGroups()) {\n+      Node header = group.getHeader();\n+      if (header.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        DeleteTimeseriesHandler handler = new DeleteTimeseriesHandler();\n+        AtomicReference<DeleteTimeseriesRespPair> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+\n+        for (Node node : group) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10121f523d6f6868741e36515c1db011addef7"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyMjM5OA==", "bodyText": "Thanks for your advice. I've changed the logic.", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421222398", "createdAt": "2020-05-07T03:48:24Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -373,8 +373,85 @@ protected void loadConfiguration(LoadConfigurationPlan plan) throws QueryProcess\n         break;\n       default:\n         throw new QueryProcessException(String\n-            .format(\"Unrecognized load configuration plan type: %s\",\n-                plan.getLoadConfigurationPlanType()));\n+                .format(\"Unrecognized load configuration plan type: %s\",\n+                        plan.getLoadConfigurationPlanType()));\n+    }\n+  }\n+\n+  @Override\n+  protected Pair<Set<String>, String> deleteTimeseries(String path) throws MetadataException {\n+    ConcurrentHashMap<String, Set<String>> resultPair = new ConcurrentHashMap<>();\n+    Pair<Set<String>, String> localPair = MManager.getInstance().deleteTimeseries(path);\n+    resultPair.put(localPair.right, localPair.left);\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (PartitionGroup group : metaGroupMember.getPartitionTable().getGlobalGroups()) {\n+      Node header = group.getHeader();\n+      if (header.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        DeleteTimeseriesHandler handler = new DeleteTimeseriesHandler();\n+        AtomicReference<DeleteTimeseriesRespPair> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+\n+        for (Node node : group) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMDc4NQ=="}, "originalCommit": {"oid": "df10121f523d6f6868741e36515c1db011addef7"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjE5MDM5OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMjoyMlrOGRssMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzo0ODo0MFrOGRtYRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTE4NQ==", "bodyText": "I think you should notify result when an error occurs.", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421211185", "createdAt": "2020-05-07T03:02:22Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.cluster.server.handlers.caller;\n+\n+import org.apache.iotdb.cluster.rpc.thrift.DeleteTimeseriesRespPair;\n+import org.apache.iotdb.cluster.rpc.thrift.Node;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class DeleteTimeseriesHandler implements AsyncMethodCallback<DeleteTimeseriesRespPair> {\n+  private static final Logger logger = LoggerFactory.getLogger(DeleteTimeseriesHandler.class);\n+\n+  private Node contact;\n+  private AtomicReference<DeleteTimeseriesRespPair> result;\n+\n+  @Override\n+  public void onComplete(DeleteTimeseriesRespPair resp) {\n+    logger.info(\"Received delete timeseries result from {}\", contact);\n+    synchronized (result) {\n+      result.set(resp);\n+      result.notifyAll();\n+    }\n+  }\n+\n+  @Override\n+  public void onError(Exception exception) {\n+    logger.warn(\"Cannot delete timeseries from {}, because \", contact, exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10121f523d6f6868741e36515c1db011addef7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyMjQ3MA==", "bodyText": "Thanks for your reminding.", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421222470", "createdAt": "2020-05-07T03:48:40Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.cluster.server.handlers.caller;\n+\n+import org.apache.iotdb.cluster.rpc.thrift.DeleteTimeseriesRespPair;\n+import org.apache.iotdb.cluster.rpc.thrift.Node;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class DeleteTimeseriesHandler implements AsyncMethodCallback<DeleteTimeseriesRespPair> {\n+  private static final Logger logger = LoggerFactory.getLogger(DeleteTimeseriesHandler.class);\n+\n+  private Node contact;\n+  private AtomicReference<DeleteTimeseriesRespPair> result;\n+\n+  @Override\n+  public void onComplete(DeleteTimeseriesRespPair resp) {\n+    logger.info(\"Received delete timeseries result from {}\", contact);\n+    synchronized (result) {\n+      result.set(resp);\n+      result.notifyAll();\n+    }\n+  }\n+\n+  @Override\n+  public void onError(Exception exception) {\n+    logger.warn(\"Cannot delete timeseries from {}, because \", contact, exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTE4NQ=="}, "originalCommit": {"oid": "df10121f523d6f6868741e36515c1db011addef7"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4947, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}