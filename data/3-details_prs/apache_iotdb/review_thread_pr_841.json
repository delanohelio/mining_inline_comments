{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDQ5NjE1", "number": 841, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzo1NDoxNVrODi-NCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzo1NjozOVrODi-PTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTk3MzIyOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzo1NDoxNVrOFuhHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNzo1MlrOFuhsew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyMTQyMA==", "bodyText": "Two of if are same, please check the logic", "url": "https://github.com/apache/iotdb/pull/841#discussion_r384321420", "createdAt": "2020-02-26T07:54:15Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "diffHunk": "@@ -108,13 +108,66 @@ private IExpression handleOneGlobalTimeFilter(GlobalTimeExpression globalTimeExp\n       addTimeFilterToQueryFilter((globalTimeExpression).getFilter(), regularRightIExpression);\n       return regularRightIExpression;\n     } else if (relation == ExpressionType.OR) {\n-      return BinaryExpression\n-          .or(pushGlobalTimeFilterToAllSeries(globalTimeExpression, selectedSeries),\n-              regularRightIExpression);\n+      IExpression afterTransform = pushGlobalTimeFilterToAllSeries(globalTimeExpression,\n+          selectedSeries);\n+      return mergeSecondTreeToFirstTree(afterTransform, regularRightIExpression);\n     }\n     throw new QueryFilterOptimizationException(\"unknown relation in IExpression:\" + relation);\n   }\n \n+  /**\n+   * This method merge the second input, which is of tree structure, to the first parameter. It\n+   * visits all leaf nodes, which are SingleSeriesExpressions, or AndExpression in right Expression,\n+   * merge them to the right position in leftExpression.\n+   *\n+   * @param leftExpression  The IExpression transformed from GlobalTimeExpression, which might have\n+   *                        already be updated and merged.\n+   * @param rightExpression The IExpression to be merged into the first IExpression\n+   * @return a merged IExpression, which is initially based on the input leftExpression\n+   */\n+  private IExpression mergeSecondTreeToFirstTree(IExpression leftExpression,\n+      IExpression rightExpression) {\n+    if (rightExpression.getType() == ExpressionType.SERIES) {\n+      SingleSeriesExpression leaf = (SingleSeriesExpression) rightExpression;\n+      updateFilterWithOr(leftExpression, leaf.getFilter(), leaf.getSeriesPath());\n+      return leftExpression;\n+    } else if (rightExpression.getType() == ExpressionType.SERIES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzMDg3NQ==", "bodyText": "It's a mistake. Thanks for your reminding.", "url": "https://github.com/apache/iotdb/pull/841#discussion_r384330875", "createdAt": "2020-02-26T08:17:52Z", "author": {"login": "Ring-k"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "diffHunk": "@@ -108,13 +108,66 @@ private IExpression handleOneGlobalTimeFilter(GlobalTimeExpression globalTimeExp\n       addTimeFilterToQueryFilter((globalTimeExpression).getFilter(), regularRightIExpression);\n       return regularRightIExpression;\n     } else if (relation == ExpressionType.OR) {\n-      return BinaryExpression\n-          .or(pushGlobalTimeFilterToAllSeries(globalTimeExpression, selectedSeries),\n-              regularRightIExpression);\n+      IExpression afterTransform = pushGlobalTimeFilterToAllSeries(globalTimeExpression,\n+          selectedSeries);\n+      return mergeSecondTreeToFirstTree(afterTransform, regularRightIExpression);\n     }\n     throw new QueryFilterOptimizationException(\"unknown relation in IExpression:\" + relation);\n   }\n \n+  /**\n+   * This method merge the second input, which is of tree structure, to the first parameter. It\n+   * visits all leaf nodes, which are SingleSeriesExpressions, or AndExpression in right Expression,\n+   * merge them to the right position in leftExpression.\n+   *\n+   * @param leftExpression  The IExpression transformed from GlobalTimeExpression, which might have\n+   *                        already be updated and merged.\n+   * @param rightExpression The IExpression to be merged into the first IExpression\n+   * @return a merged IExpression, which is initially based on the input leftExpression\n+   */\n+  private IExpression mergeSecondTreeToFirstTree(IExpression leftExpression,\n+      IExpression rightExpression) {\n+    if (rightExpression.getType() == ExpressionType.SERIES) {\n+      SingleSeriesExpression leaf = (SingleSeriesExpression) rightExpression;\n+      updateFilterWithOr(leftExpression, leaf.getFilter(), leaf.getSeriesPath());\n+      return leftExpression;\n+    } else if (rightExpression.getType() == ExpressionType.SERIES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyMTQyMA=="}, "originalCommit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTk3OTAzOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzo1NjozOVrOFuhK_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxODo1NFrOFuhuIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyMjMwMA==", "bodyText": "The return value is boolean but not an expression", "url": "https://github.com/apache/iotdb/pull/841#discussion_r384322300", "createdAt": "2020-02-26T07:56:39Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "diffHunk": "@@ -108,13 +108,66 @@ private IExpression handleOneGlobalTimeFilter(GlobalTimeExpression globalTimeExp\n       addTimeFilterToQueryFilter((globalTimeExpression).getFilter(), regularRightIExpression);\n       return regularRightIExpression;\n     } else if (relation == ExpressionType.OR) {\n-      return BinaryExpression\n-          .or(pushGlobalTimeFilterToAllSeries(globalTimeExpression, selectedSeries),\n-              regularRightIExpression);\n+      IExpression afterTransform = pushGlobalTimeFilterToAllSeries(globalTimeExpression,\n+          selectedSeries);\n+      return mergeSecondTreeToFirstTree(afterTransform, regularRightIExpression);\n     }\n     throw new QueryFilterOptimizationException(\"unknown relation in IExpression:\" + relation);\n   }\n \n+  /**\n+   * This method merge the second input, which is of tree structure, to the first parameter. It\n+   * visits all leaf nodes, which are SingleSeriesExpressions, or AndExpression in right Expression,\n+   * merge them to the right position in leftExpression.\n+   *\n+   * @param leftExpression  The IExpression transformed from GlobalTimeExpression, which might have\n+   *                        already be updated and merged.\n+   * @param rightExpression The IExpression to be merged into the first IExpression\n+   * @return a merged IExpression, which is initially based on the input leftExpression\n+   */\n+  private IExpression mergeSecondTreeToFirstTree(IExpression leftExpression,\n+      IExpression rightExpression) {\n+    if (rightExpression.getType() == ExpressionType.SERIES) {\n+      SingleSeriesExpression leaf = (SingleSeriesExpression) rightExpression;\n+      updateFilterWithOr(leftExpression, leaf.getFilter(), leaf.getSeriesPath());\n+      return leftExpression;\n+    } else if (rightExpression.getType() == ExpressionType.SERIES) {\n+      IExpression leftChild = ((BinaryExpression) rightExpression).getLeft();\n+      IExpression rightChild = ((BinaryExpression) rightExpression).getRight();\n+      leftExpression = mergeSecondTreeToFirstTree(leftExpression, leftChild);\n+      leftExpression = mergeSecondTreeToFirstTree(leftExpression, rightChild);\n+      return leftExpression;\n+    } else {\n+      return BinaryExpression.or(leftExpression, rightExpression);\n+    }\n+  }\n+\n+  /**\n+   * This method search  the node in the input expression, whose path is identical to the input\n+   * path, then merges its filter and the input filter with relation OR.\n+   *\n+   * @return an expression, some of whose node contains the input filter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzMTI5OQ==", "bodyText": "The return value should be of boolean type. I will modify the it. Thanks for your suggestion.", "url": "https://github.com/apache/iotdb/pull/841#discussion_r384331299", "createdAt": "2020-02-26T08:18:54Z", "author": {"login": "Ring-k"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/util/ExpressionOptimizer.java", "diffHunk": "@@ -108,13 +108,66 @@ private IExpression handleOneGlobalTimeFilter(GlobalTimeExpression globalTimeExp\n       addTimeFilterToQueryFilter((globalTimeExpression).getFilter(), regularRightIExpression);\n       return regularRightIExpression;\n     } else if (relation == ExpressionType.OR) {\n-      return BinaryExpression\n-          .or(pushGlobalTimeFilterToAllSeries(globalTimeExpression, selectedSeries),\n-              regularRightIExpression);\n+      IExpression afterTransform = pushGlobalTimeFilterToAllSeries(globalTimeExpression,\n+          selectedSeries);\n+      return mergeSecondTreeToFirstTree(afterTransform, regularRightIExpression);\n     }\n     throw new QueryFilterOptimizationException(\"unknown relation in IExpression:\" + relation);\n   }\n \n+  /**\n+   * This method merge the second input, which is of tree structure, to the first parameter. It\n+   * visits all leaf nodes, which are SingleSeriesExpressions, or AndExpression in right Expression,\n+   * merge them to the right position in leftExpression.\n+   *\n+   * @param leftExpression  The IExpression transformed from GlobalTimeExpression, which might have\n+   *                        already be updated and merged.\n+   * @param rightExpression The IExpression to be merged into the first IExpression\n+   * @return a merged IExpression, which is initially based on the input leftExpression\n+   */\n+  private IExpression mergeSecondTreeToFirstTree(IExpression leftExpression,\n+      IExpression rightExpression) {\n+    if (rightExpression.getType() == ExpressionType.SERIES) {\n+      SingleSeriesExpression leaf = (SingleSeriesExpression) rightExpression;\n+      updateFilterWithOr(leftExpression, leaf.getFilter(), leaf.getSeriesPath());\n+      return leftExpression;\n+    } else if (rightExpression.getType() == ExpressionType.SERIES) {\n+      IExpression leftChild = ((BinaryExpression) rightExpression).getLeft();\n+      IExpression rightChild = ((BinaryExpression) rightExpression).getRight();\n+      leftExpression = mergeSecondTreeToFirstTree(leftExpression, leftChild);\n+      leftExpression = mergeSecondTreeToFirstTree(leftExpression, rightChild);\n+      return leftExpression;\n+    } else {\n+      return BinaryExpression.or(leftExpression, rightExpression);\n+    }\n+  }\n+\n+  /**\n+   * This method search  the node in the input expression, whose path is identical to the input\n+   * path, then merges its filter and the input filter with relation OR.\n+   *\n+   * @return an expression, some of whose node contains the input filter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyMjMwMA=="}, "originalCommit": {"oid": "05c77c84be05df421b2875b0f3d297aa9565da80"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 248, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}