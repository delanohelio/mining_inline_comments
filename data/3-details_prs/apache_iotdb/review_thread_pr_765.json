{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjUzNDIx", "number": 765, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODoxNjoxMFrODc46fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODoxODo1N1rODc49Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE5MTk3OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODoxNjoxMFrOFlLOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODo1Njo1N1rOFlMSDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNTYxMg==", "bodyText": "If one series relates to a   min_time and first_value, we'd better return result if all aggregateResult  has calculated aggregation results.", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374525612", "createdAt": "2020-02-04T08:16:10Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -121,23 +127,21 @@ private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContex\n         //cal by pageheader\n         if (seriesReader.canUseCurrentPageStatistics()) {\n           Statistics pageStatistic = seriesReader.currentPageStatistics();\n-          aggregateResult.updateResultFromStatistics(pageStatistic);\n-          if (aggregateResult.isCalculatedAggregationResult()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81439c03ea56560f1372b62e253317c1365d4dc7"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0Mjg2MA==", "bodyText": "Thanks for your proposal. I use an aggregateResultList to store whether the aggregateResult is calculated... which is consistent with the aggregateResultList. Do you think it is okay?", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374542860", "createdAt": "2020-02-04T08:56:57Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -121,23 +127,21 @@ private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContex\n         //cal by pageheader\n         if (seriesReader.canUseCurrentPageStatistics()) {\n           Statistics pageStatistic = seriesReader.currentPageStatistics();\n-          aggregateResult.updateResultFromStatistics(pageStatistic);\n-          if (aggregateResult.isCalculatedAggregationResult()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNTYxMg=="}, "originalCommit": {"oid": "81439c03ea56560f1372b62e253317c1365d4dc7"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE5ODg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODoxODo1N1rOFlLS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODo1NzozNFrOFlMTQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng==", "bodyText": "add javadoc and an example\ngiven :\npaths: s1, s2, s3, s1\naggregations: count, sum, count, sum\nseriesMap:\ns1 -> 0, 3\ns2 -> 2\ns3 -> 3", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374526696", "createdAt": "2020-02-04T08:18:57Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -80,39 +82,43 @@ public QueryDataSet executeWithoutValueFilter(QueryContext context)\n       timeFilter = ((GlobalTimeExpression) expression).getFilter();\n     }\n \n-    List<AggregateResult> aggregateResultList = new ArrayList<>();\n     //TODO use multi-thread\n-    for (int i = 0; i < selectedSeries.size(); i++) {\n-      AggregateResult aggregateResult = aggregateOneSeries(i, timeFilter, context);\n-      aggregateResultList.add(aggregateResult);\n+    Map<Path, List<Integer>> seriesMap = mergeSameSeries(selectedSeries);\n+    AggregateResult[] aggregateResultList = new AggregateResult[selectedSeries.size()];\n+    for (Map.Entry<Path, List<Integer>> entry : seriesMap.entrySet()) {\n+      List<AggregateResult> aggregateResults = aggregateOneSeries(entry, timeFilter, context);\n+      int index = 0;\n+      for (int i : entry.getValue()) {\n+        aggregateResultList[i] = aggregateResults.get(index);\n+        index++;\n+      }\n     }\n-    return constructDataSet(aggregateResultList);\n-  }\n \n+    return constructDataSet(Arrays.asList(aggregateResultList));\n+  }\n \n-  /**\n-   * get aggregation result for one series\n-   */\n-  private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContext context)\n+  private List<AggregateResult> aggregateOneSeries(Map.Entry<Path, List<Integer>> series,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81439c03ea56560f1372b62e253317c1365d4dc7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzMTcyNA==", "bodyText": "Hi, thanks! I have intended put the example to mergeSameSeries method", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374531724", "createdAt": "2020-02-04T08:31:25Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -80,39 +82,43 @@ public QueryDataSet executeWithoutValueFilter(QueryContext context)\n       timeFilter = ((GlobalTimeExpression) expression).getFilter();\n     }\n \n-    List<AggregateResult> aggregateResultList = new ArrayList<>();\n     //TODO use multi-thread\n-    for (int i = 0; i < selectedSeries.size(); i++) {\n-      AggregateResult aggregateResult = aggregateOneSeries(i, timeFilter, context);\n-      aggregateResultList.add(aggregateResult);\n+    Map<Path, List<Integer>> seriesMap = mergeSameSeries(selectedSeries);\n+    AggregateResult[] aggregateResultList = new AggregateResult[selectedSeries.size()];\n+    for (Map.Entry<Path, List<Integer>> entry : seriesMap.entrySet()) {\n+      List<AggregateResult> aggregateResults = aggregateOneSeries(entry, timeFilter, context);\n+      int index = 0;\n+      for (int i : entry.getValue()) {\n+        aggregateResultList[i] = aggregateResults.get(index);\n+        index++;\n+      }\n     }\n-    return constructDataSet(aggregateResultList);\n-  }\n \n+    return constructDataSet(Arrays.asList(aggregateResultList));\n+  }\n \n-  /**\n-   * get aggregation result for one series\n-   */\n-  private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContext context)\n+  private List<AggregateResult> aggregateOneSeries(Map.Entry<Path, List<Integer>> series,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng=="}, "originalCommit": {"oid": "81439c03ea56560f1372b62e253317c1365d4dc7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNTAwOQ==", "bodyText": "this function could be renamed to  groupAggregationsBySeries", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374535009", "createdAt": "2020-02-04T08:39:18Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -80,39 +82,43 @@ public QueryDataSet executeWithoutValueFilter(QueryContext context)\n       timeFilter = ((GlobalTimeExpression) expression).getFilter();\n     }\n \n-    List<AggregateResult> aggregateResultList = new ArrayList<>();\n     //TODO use multi-thread\n-    for (int i = 0; i < selectedSeries.size(); i++) {\n-      AggregateResult aggregateResult = aggregateOneSeries(i, timeFilter, context);\n-      aggregateResultList.add(aggregateResult);\n+    Map<Path, List<Integer>> seriesMap = mergeSameSeries(selectedSeries);\n+    AggregateResult[] aggregateResultList = new AggregateResult[selectedSeries.size()];\n+    for (Map.Entry<Path, List<Integer>> entry : seriesMap.entrySet()) {\n+      List<AggregateResult> aggregateResults = aggregateOneSeries(entry, timeFilter, context);\n+      int index = 0;\n+      for (int i : entry.getValue()) {\n+        aggregateResultList[i] = aggregateResults.get(index);\n+        index++;\n+      }\n     }\n-    return constructDataSet(aggregateResultList);\n-  }\n \n+    return constructDataSet(Arrays.asList(aggregateResultList));\n+  }\n \n-  /**\n-   * get aggregation result for one series\n-   */\n-  private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContext context)\n+  private List<AggregateResult> aggregateOneSeries(Map.Entry<Path, List<Integer>> series,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng=="}, "originalCommit": {"oid": "81439c03ea56560f1372b62e253317c1365d4dc7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0MzE3MQ==", "bodyText": "Done.", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374543171", "createdAt": "2020-02-04T08:57:34Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -80,39 +82,43 @@ public QueryDataSet executeWithoutValueFilter(QueryContext context)\n       timeFilter = ((GlobalTimeExpression) expression).getFilter();\n     }\n \n-    List<AggregateResult> aggregateResultList = new ArrayList<>();\n     //TODO use multi-thread\n-    for (int i = 0; i < selectedSeries.size(); i++) {\n-      AggregateResult aggregateResult = aggregateOneSeries(i, timeFilter, context);\n-      aggregateResultList.add(aggregateResult);\n+    Map<Path, List<Integer>> seriesMap = mergeSameSeries(selectedSeries);\n+    AggregateResult[] aggregateResultList = new AggregateResult[selectedSeries.size()];\n+    for (Map.Entry<Path, List<Integer>> entry : seriesMap.entrySet()) {\n+      List<AggregateResult> aggregateResults = aggregateOneSeries(entry, timeFilter, context);\n+      int index = 0;\n+      for (int i : entry.getValue()) {\n+        aggregateResultList[i] = aggregateResults.get(index);\n+        index++;\n+      }\n     }\n-    return constructDataSet(aggregateResultList);\n-  }\n \n+    return constructDataSet(Arrays.asList(aggregateResultList));\n+  }\n \n-  /**\n-   * get aggregation result for one series\n-   */\n-  private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContext context)\n+  private List<AggregateResult> aggregateOneSeries(Map.Entry<Path, List<Integer>> series,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng=="}, "originalCommit": {"oid": "81439c03ea56560f1372b62e253317c1365d4dc7"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 371, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}