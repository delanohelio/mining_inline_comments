{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NjIwNzgw", "number": 1808, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo0OToxMlrOErfRgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo0OToxMlrOErfRgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDM2NjA5OnYy", "diffSide": "RIGHT", "path": "tsfile/src/test/java/org/apache/iotdb/tsfile/read/GetAllDevicesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo0OToxMlrOHeSDIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjoyNjo0M1rOHecErQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNTA0Mg==", "bodyText": "These two readers should be closed...", "url": "https://github.com/apache/iotdb/pull/1808#discussion_r501515042", "createdAt": "2020-10-08T07:49:12Z", "author": {"login": "HTHou"}, "path": "tsfile/src/test/java/org/apache/iotdb/tsfile/read/GetAllDevicesTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.read;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.utils.FileGenerator;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class GetAllDevicesTest {\n+\n+  private final TSFileConfig conf = TSFileDescriptor.getInstance().getConfig();\n+  private int maxDegreeOfIndexNode;\n+  private static final String FILE_PATH = FileGenerator.outputDataFile;\n+\n+  @Before\n+  public void before() {\n+    maxDegreeOfIndexNode = conf.getMaxDegreeOfIndexNode();\n+    conf.setMaxDegreeOfIndexNode(3);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    FileGenerator.after();\n+    conf.setMaxDegreeOfIndexNode(maxDegreeOfIndexNode);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices1() throws IOException {\n+    testGetAllDevices(2, 2);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices2() throws IOException {\n+    testGetAllDevices(2, 50);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices3() throws IOException {\n+    testGetAllDevices(50, 2);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices4() throws IOException {\n+    testGetAllDevices(50, 50);\n+  }\n+\n+  public void testGetAllDevices(int deviceNum, int measurementNum) throws IOException {\n+    FileGenerator.generateFile(10000, deviceNum, measurementNum);\n+    TsFileSequenceReader fileReader = new TsFileSequenceReader(FILE_PATH);\n+    ReadOnlyTsFile tsFile = new ReadOnlyTsFile(fileReader);\n+\n+    // test\n+    TsFileSequenceReader reader = new TsFileSequenceReader(FILE_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c55742dfb8cba2622bc1f67bb4e15241a26a68d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3OTI3Nw==", "bodyText": "Thanks!!!!!", "url": "https://github.com/apache/iotdb/pull/1808#discussion_r501679277", "createdAt": "2020-10-08T12:26:43Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/test/java/org/apache/iotdb/tsfile/read/GetAllDevicesTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.read;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.utils.FileGenerator;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class GetAllDevicesTest {\n+\n+  private final TSFileConfig conf = TSFileDescriptor.getInstance().getConfig();\n+  private int maxDegreeOfIndexNode;\n+  private static final String FILE_PATH = FileGenerator.outputDataFile;\n+\n+  @Before\n+  public void before() {\n+    maxDegreeOfIndexNode = conf.getMaxDegreeOfIndexNode();\n+    conf.setMaxDegreeOfIndexNode(3);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    FileGenerator.after();\n+    conf.setMaxDegreeOfIndexNode(maxDegreeOfIndexNode);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices1() throws IOException {\n+    testGetAllDevices(2, 2);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices2() throws IOException {\n+    testGetAllDevices(2, 50);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices3() throws IOException {\n+    testGetAllDevices(50, 2);\n+  }\n+\n+  @Test\n+  public void testGetAllDevices4() throws IOException {\n+    testGetAllDevices(50, 50);\n+  }\n+\n+  public void testGetAllDevices(int deviceNum, int measurementNum) throws IOException {\n+    FileGenerator.generateFile(10000, deviceNum, measurementNum);\n+    TsFileSequenceReader fileReader = new TsFileSequenceReader(FILE_PATH);\n+    ReadOnlyTsFile tsFile = new ReadOnlyTsFile(fileReader);\n+\n+    // test\n+    TsFileSequenceReader reader = new TsFileSequenceReader(FILE_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNTA0Mg=="}, "originalCommit": {"oid": "3c55742dfb8cba2622bc1f67bb4e15241a26a68d"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 789, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}