{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MDAyNzEw", "number": 1298, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoyMzo1N1rOEBYakA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoyMzo1N1rOEBYakA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODg0MDQ4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBSimpleQueryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoyMzo1N1rOGdMYzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDoyMzo1N1rOGdMYzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2NDg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(resultSet.getInt(\"root.sg1.d0.s0\"), 1);\n          \n          \n            \n                    assertEquals(resultSet.getString(\"root.sg1.d0.s1\"), null);\n          \n          \n            \n                    assertEquals(1, resultSet.getInt(\"root.sg1.d0.s0\"));\n          \n          \n            \n                    assertEquals(null, resultSet.getString(\"root.sg1.d0.s1\"));", "url": "https://github.com/apache/iotdb/pull/1298#discussion_r433264844", "createdAt": "2020-06-01T14:23:57Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBSimpleQueryIT.java", "diffHunk": "@@ -169,6 +172,34 @@ public void testFirstOverlappedPageFiltered() throws SQLException, ClassNotFound\n   }\n \n \n+  @Test\n+  public void testPartialInsertion() throws SQLException, ClassNotFoundException {\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    try(Connection connection = DriverManager\n+        .getConnection(Config.IOTDB_URL_PREFIX + \"127.0.0.1:6667/\",\n+            \"root\", \"root\");\n+        Statement statement = connection.createStatement()){\n+      statement.execute(\"SET STORAGE GROUP TO root.sg1\");\n+      statement.execute(\"CREATE TIMESERIES root.sg1.d0.s0 WITH DATATYPE=INT32,ENCODING=PLAIN\");\n+      statement.execute(\"CREATE TIMESERIES root.sg1.d0.s1 WITH DATATYPE=INT32,ENCODING=PLAIN\");\n+\n+      // seq chunk : [1,10]\n+      try {\n+        statement.execute(\"INSERT INTO root.sg1.d0(timestamp, s0, s1) VALUES (1, 1, 2.2)\");\n+        fail();\n+      } catch (IoTDBSQLException e) {\n+        assertTrue(e.getMessage().contains(\"s1\"));\n+      }\n+\n+      ResultSet resultSet = statement.executeQuery(\"select s0, s1 from root.sg1.d0\");\n+\n+      while(resultSet.next()) {\n+        assertEquals(resultSet.getInt(\"root.sg1.d0.s0\"), 1);\n+        assertEquals(resultSet.getString(\"root.sg1.d0.s1\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba15f610f28624ea425d72b98ef1b1b2d5ae4491"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4899, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}