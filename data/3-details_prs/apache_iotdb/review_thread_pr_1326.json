{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTQwMTE1", "number": 1326, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo0NjozOFrOEDWirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowNDozNlrOEKaDPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTUwNTA4OnYy", "diffSide": "RIGHT", "path": "cli/src/assembly/resources/sbin/start-cli.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo0NjozOFrOGgUeJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo0NjozOFrOGgUeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MzAxMw==", "bodyText": "This may prevent \"class not found\" when using git bash in windows to run this script.", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r436543013", "createdAt": "2020-06-08T08:46:38Z", "author": {"login": "jt2594838"}, "path": "cli/src/assembly/resources/sbin/start-cli.sh", "diffHunk": "@@ -29,7 +29,7 @@ fi\n MAIN_CLASS=org.apache.iotdb.cli.Cli\n \n \n-CLASSPATH=\"\"\n+CLASSPATH=\".\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78f8d9bfc17c2483da08b59b59708ebe1f2a86c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDEyMTMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/version/VersionController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMjozNjoyOVrOGqC82A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0Mjo0NVrOGrcodw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0MTcyMA==", "bodyText": "remove this?", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r446741720", "createdAt": "2020-06-29T02:36:29Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/version/VersionController.java", "diffHunk": "@@ -19,6 +19,8 @@\n \n package org.apache.iotdb.db.engine.version;\n \n+import java.io.IOException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c8f5a227fe77171b92bb3d2e12a292a096c53d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMTA2Mw==", "bodyText": "removed", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448211063", "createdAt": "2020-07-01T08:42:45Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/version/VersionController.java", "diffHunk": "@@ -19,6 +19,8 @@\n \n package org.apache.iotdb.db.engine.version;\n \n+import java.io.IOException;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0MTcyMA=="}, "originalCommit": {"oid": "37c8f5a227fe77171b92bb3d2e12a292a096c53d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc0NzMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/version/SimpleFileVersionController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowOTo1NVrOGrUaOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0MzowNlrOGrcpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjM0Ng==", "bodyText": "what does the previous code do?", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448076346", "createdAt": "2020-07-01T02:09:55Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/version/SimpleFileVersionController.java", "diffHunk": "@@ -144,7 +142,9 @@ private void restore() throws IOException {\n     } else {\n       versionFile = SystemFileFactory.INSTANCE.getFile(directory, FILE_PREFIX + \"0\");\n       prevVersion = 0;\n-      new FileOutputStream(versionFile).close();\n+      if (!versionFile.createNewFile()) {\n+        logger.warn(\"Cannot create new version file {}\", versionFile);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMTI1Mg==", "bodyText": "create an empty file", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448211252", "createdAt": "2020-07-01T08:43:06Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/version/SimpleFileVersionController.java", "diffHunk": "@@ -144,7 +142,9 @@ private void restore() throws IOException {\n     } else {\n       versionFile = SystemFileFactory.INSTANCE.getFile(directory, FILE_PREFIX + \"0\");\n       prevVersion = 0;\n-      new FileOutputStream(versionFile).close();\n+      if (!versionFile.createNewFile()) {\n+        logger.warn(\"Cannot create new version file {}\", versionFile);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjM0Ng=="}, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc0ODIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxMDoyNlrOGrUavQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0NjozNVrOGrcwyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjQ3Nw==", "bodyText": "remove", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448076477", "createdAt": "2020-07-01T02:10:26Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1133,9 +1138,15 @@ public MNode getDeviceNode(String path) throws MetadataException {\n   }\n \n   /**\n+<<<<<<< HEAD\n+   * To reduce the String number in memory, \n+   * use the deviceId from MManager instead of the deviceId read from disk\n+   * \n+=======", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMzE5NA==", "bodyText": "removed", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448213194", "createdAt": "2020-07-01T08:46:35Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1133,9 +1138,15 @@ public MNode getDeviceNode(String path) throws MetadataException {\n   }\n \n   /**\n+<<<<<<< HEAD\n+   * To reduce the String number in memory, \n+   * use the deviceId from MManager instead of the deviceId read from disk\n+   * \n+=======", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjQ3Nw=="}, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc0ODQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxMDozNVrOGrUa4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxMDozNVrOGrUa4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjUxMg==", "bodyText": "remove", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448076512", "createdAt": "2020-07-01T02:10:35Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1133,9 +1138,15 @@ public MNode getDeviceNode(String path) throws MetadataException {\n   }\n \n   /**\n+<<<<<<< HEAD\n+   * To reduce the String number in memory, \n+   * use the deviceId from MManager instead of the deviceId read from disk\n+   * \n+=======\n    * To reduce the String number in memory, use the deviceId from MManager instead of the deviceId\n    * read from disk\n    *\n+>>>>>>> master", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc1NjUzOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/schema/TimeseriesSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxNToxOVrOGrUfiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0ODowMFrOGrcz-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NzcwNA==", "bodyText": "Could we reuse the MeasurementSchema?", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448077704", "createdAt": "2020-07-01T02:15:19Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/schema/TimeseriesSchema.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.write.schema;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.encoding.encoder.Encoder;\n+import org.apache.iotdb.tsfile.encoding.encoder.TSEncodingBuilder;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+\n+/**\n+ * TimeseriesSchema is like MeasurementSchema, but instead of measurementId, it stores the full\n+ * path.\n+ */\n+public class TimeseriesSchema implements Comparable<TimeseriesSchema>, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNDAxMQ==", "bodyText": "No, the judgement is made based on a specific class, and reusing that would make the two usages too confusing.", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448214011", "createdAt": "2020-07-01T08:48:00Z", "author": {"login": "jt2594838"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/schema/TimeseriesSchema.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.write.schema;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.encoding.encoder.Encoder;\n+import org.apache.iotdb.tsfile.encoding.encoder.TSEncodingBuilder;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+\n+/**\n+ * TimeseriesSchema is like MeasurementSchema, but instead of measurementId, it stores the full\n+ * path.\n+ */\n+public class TimeseriesSchema implements Comparable<TimeseriesSchema>, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NzcwNA=="}, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc1ODg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/SerializeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxNjozOVrOGrUg3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0OTo0NFrOGrc37A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODA0Ng==", "bodyText": "add some javadoc, give an example of str", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448078046", "createdAt": "2020-07-01T02:16:39Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/SerializeUtils.java", "diffHunk": "@@ -494,4 +494,21 @@ public static ByteBuffer serializeLongs(long[] longs) {\n     }\n     return ret;\n   }\n+\n+  public static Node stringToNode(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNTAyMA==", "bodyText": "added", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448215020", "createdAt": "2020-07-01T08:49:44Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/SerializeUtils.java", "diffHunk": "@@ -494,4 +494,21 @@ public static ByteBuffer serializeLongs(long[] longs) {\n     }\n     return ret;\n   }\n+\n+  public static Node stringToNode(String str) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODA0Ng=="}, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQ4MDI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/InsertPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowNDozNlrOGrbRSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1MToyMVrOGrc7yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4ODc0Ng==", "bodyText": "Extract -1 to a constant?", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448188746", "createdAt": "2020-07-01T08:04:36Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/InsertPlan.java", "diffHunk": "@@ -301,9 +296,14 @@ public void serialize(DataOutputStream stream) throws IOException {\n \n   private void putValues(DataOutputStream outputStream) throws QueryProcessException, IOException {\n     for (int i = 0; i < values.length; i++) {\n-      if (types[i] == null) {\n+      // types are not determined, the situation mainly occurs when the plan uses string values\n+      // and is forwarded to other nodes\n+      if (types == null || types[i] == null) {\n+        ReadWriteIOUtils.write((short) -1, outputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjAwOA==", "bodyText": "done", "url": "https://github.com/apache/iotdb/pull/1326#discussion_r448216008", "createdAt": "2020-07-01T08:51:21Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/InsertPlan.java", "diffHunk": "@@ -301,9 +296,14 @@ public void serialize(DataOutputStream stream) throws IOException {\n \n   private void putValues(DataOutputStream outputStream) throws QueryProcessException, IOException {\n     for (int i = 0; i < values.length; i++) {\n-      if (types[i] == null) {\n+      // types are not determined, the situation mainly occurs when the plan uses string values\n+      // and is forwarded to other nodes\n+      if (types == null || types[i] == null) {\n+        ReadWriteIOUtils.write((short) -1, outputStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4ODc0Ng=="}, "originalCommit": {"oid": "332d51b5b8dba3596eae3516dda0d279288ed6fd"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4922, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}