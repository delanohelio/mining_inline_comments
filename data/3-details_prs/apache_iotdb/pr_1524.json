{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMTMwMDc1", "number": 1524, "title": "[IOTDB-776] Control the memory usage of flushing the memtable", "bodyText": "Performance test report\uff1a\nhttps://cwiki.apache.org/confluence/display/IOTDB/%5BIOTDB-776%5D+Control+the+memory+usage+of+flushing+the+memtable", "createdAt": "2020-07-20T07:02:06Z", "url": "https://github.com/apache/iotdb/pull/1524", "merged": true, "mergeCommit": {"oid": "04d3ac0ba0110aa7027396036ba5d9780ecd1412"}, "closed": true, "closedAt": "2020-11-03T15:37:02Z", "author": {"login": "HTHou"}, "timelineItems": {"totalCount": 246, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYefDIgH2gAyNDUzMTMwMDc1OjNlMTk2ZTFmZTcyOWQ0ZGRkZDkzOGRmZTkyMjZkMGEwODE5NmQ0ZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY4k3TAH2gAyNDUzMTMwMDc1OmVmYWEwZTRlNzVlMWZlM2MzNzU4ZjVlZmE3MjQzY2FjYTNiYjBhODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "committedDate": "2020-11-02T06:22:29Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c60ca098c18fea40c3d38e39135d4103f73a3c73", "committedDate": "2020-11-02T06:39:04Z", "message": "fix review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzcwOTU2", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521370956", "createdAt": "2020-11-02T07:05:49Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzowNTo0OVrOHr4QlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzowNTo0OVrOHr4QlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3MjU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public boolean checkIfNeedStartNewChunk(String deviceId, String measurement) {\n          \n          \n            \n              public boolean checkIfChunkDoesNotExist(String deviceId, String measurement) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515772565", "createdAt": "2020-11-02T07:05:49Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -159,6 +171,21 @@ public void write(InsertTabletPlan insertTabletPlan, int start, int end) {\n     }\n   }\n \n+  @Override\n+  public boolean checkIfNeedStartNewChunk(String deviceId, String measurement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzczMTQ5", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521373149", "createdAt": "2020-11-02T07:11:25Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxMToyNVrOHr4XLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxMToyNVrOHr4XLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NDI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.debug(\"Report Storage Group Status to system. \"\n          \n          \n            \n                      + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n          \n          \n            \n                logger.debug(\"Report Storage Group Status to the system. \"\n          \n          \n            \n                      + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515774253", "createdAt": "2020-11-02T07:11:25Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc0NTU2", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521374556", "createdAt": "2020-11-02T07:14:32Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxNDozM1rOHr4boA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxNTowMFrOHr4cPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NTM5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n          \n          \n            \n                if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515775392", "createdAt": "2020-11-02T07:14:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NTQ1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n          \n          \n            \n                if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515775452", "createdAt": "2020-11-02T07:14:43Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NTU1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.debug(\"Change system to reject status...\");\n          \n          \n            \n                  logger.info(\"Change system to reject status...\");\n          \n      \n    \n    \n  \n\nAdd current memory info", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515775551", "createdAt": "2020-11-02T07:15:00Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc2NzQz", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521376743", "createdAt": "2020-11-02T07:19:33Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxOTozM1rOHr4h7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxOTozM1rOHr4h7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n          \n          \n            \n                  if (totalSgMemCost < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777007", "createdAt": "2020-11-02T07:19:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc2ODAw", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521376800", "createdAt": "2020-11-02T07:19:41Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxOTo0MVrOHr4iJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoxOTo0MVrOHr4iJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzA2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n          \n          \n            \n                  if (totalSgMemCost > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777060", "createdAt": "2020-11-02T07:19:41Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc2OTg3", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521376987", "createdAt": "2020-11-02T07:20:06Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMDowNlrOHr4itw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMDowNlrOHr4itw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzIwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Some sg memery released, set system to normal status.\");\n          \n          \n            \n                    logger.debug(\"Some sg memory released, set system to normal status.\");", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777207", "createdAt": "2020-11-02T07:20:06Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+        logger.debug(\"Some sg memery released, set system to normal status.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc3MDcx", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521377071", "createdAt": "2020-11-02T07:20:15Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMDoxNVrOHr4jHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMDoxNVrOHr4jHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzMwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.warn(\"Some sg memery released, but system is still in reject status.\");\n          \n          \n            \n                    logger.warn(\"Some sg memory released, but system is still in reject status.\");", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777309", "createdAt": "2020-11-02T07:20:15Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+        logger.debug(\"Some sg memery released, set system to normal status.\");\n+        logCost();\n+        rejected = false;\n+      } else {\n+        logger.warn(\"Some sg memery released, but system is still in reject status.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc3MjE3", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521377217", "createdAt": "2020-11-02T07:20:34Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMDozNVrOHr4jlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMDozNVrOHr4jlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzQyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Some sg memery released, call flush.\");\n          \n          \n            \n                    logger.debug(\"Some sg memory released, call flush.\");", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777428", "createdAt": "2020-11-02T07:20:35Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc3Nzc0", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521377774", "createdAt": "2020-11-02T07:21:58Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMTo1OFrOHr4lWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMTo1OFrOHr4lWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3Nzg4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void logCost() {\n          \n          \n            \n              private void logCurrentTotalSGMemory() {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777882", "createdAt": "2020-11-02T07:21:58Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+        logger.debug(\"Some sg memery released, set system to normal status.\");\n+        logCost();\n+        rejected = false;\n+      } else {\n+        logger.warn(\"Some sg memery released, but system is still in reject status.\");\n+        logCost();\n+        rejected = true;\n+      }\n+      reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    }\n+  }\n+\n+  private void logCost() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a5957f7cf73653cbcc95937a5f0523f1b107026b", "committedDate": "2020-11-02T07:25:36Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f944b582f2d19fe418ef1bf06fc3f63df1ce46dd", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/f944b582f2d19fe418ef1bf06fc3f63df1ce46dd", "committedDate": "2020-11-02T07:38:44Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2239f3301973182f8c171a483f6706504ae6a9a", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d2239f3301973182f8c171a483f6706504ae6a9a", "committedDate": "2020-11-02T07:41:35Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff54d8921a62ffd7d6df84d5d5e9e5bda56e0051", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ff54d8921a62ffd7d6df84d5d5e9e5bda56e0051", "committedDate": "2020-11-02T07:46:16Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f0a792726ee503947244705a00a3d1501ef570d", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/0f0a792726ee503947244705a00a3d1501ef570d", "committedDate": "2020-11-02T07:54:16Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6afbb810340ef260963e624a81ae08feacb7e3e0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6afbb810340ef260963e624a81ae08feacb7e3e0", "committedDate": "2020-11-02T07:59:28Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84a9ecb33d42a3a3a22bf3257674c498d9101058", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/84a9ecb33d42a3a3a22bf3257674c498d9101058", "committedDate": "2020-11-02T08:58:48Z", "message": "fix mod and rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bd35b78546811a9c5a408a13ec79b52409e7b6e", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/5bd35b78546811a9c5a408a13ec79b52409e7b6e", "committedDate": "2020-11-02T10:49:15Z", "message": "modify doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458828ad92155080ef2b7596cc8a7262c3c826ab", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/458828ad92155080ef2b7596cc8a7262c3c826ab", "committedDate": "2020-11-02T10:50:21Z", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1337d71cfb979810d44d814fafd928849078ef43", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/1337d71cfb979810d44d814fafd928849078ef43", "committedDate": "2020-11-02T11:40:14Z", "message": "remove unnecessary report"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b815080c1cb248e159235da870c24cabfc2b69e", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6b815080c1cb248e159235da870c24cabfc2b69e", "committedDate": "2020-11-02T11:40:34Z", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b49f3f738bc7ecda2b5a0f1c769802f03aaa5bc", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/2b49f3f738bc7ecda2b5a0f1c769802f03aaa5bc", "committedDate": "2020-11-02T11:51:13Z", "message": "reset to normal when delete timeseries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8767c4c57b608908fc9d971600431ed1df1d6d1", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/f8767c4c57b608908fc9d971600431ed1df1d6d1", "committedDate": "2020-11-02T11:54:36Z", "message": "reset to normal when delete timeseries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1002463795d41b0cac6a5c43ac10c54a3650de8", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/d1002463795d41b0cac6a5c43ac10c54a3650de8", "committedDate": "2020-11-02T13:16:46Z", "message": "fix code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ec943096504bc32656e008a46792c1e206a1e2", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/00ec943096504bc32656e008a46792c1e206a1e2", "committedDate": "2020-11-02T13:28:08Z", "message": "add log for PrimitiveArrayManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cc80c0c215ee3f82a177f5af039788c092e9c41", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/2cc80c0c215ee3f82a177f5af039788c092e9c41", "committedDate": "2020-11-02T13:30:53Z", "message": "add a config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "committedDate": "2020-11-02T13:31:08Z", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzc3NTAx", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521377501", "createdAt": "2020-11-02T07:21:22Z", "commit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyMToyM1rOHr4kgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjowMTo1NFrOHsKwvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzY2Ng==", "bodyText": "if you only use !enableMemControl, why not call it disableMemControl", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777666", "createdAt": "2020-11-02T07:21:23Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -56,6 +56,17 @@\n \n   private long memSize = 0;\n \n+  /**\n+   * The initial value is false because we should calculate the text data size when recover\n+   * memTable!!\n+   */\n+  protected boolean enableMemControl = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNzU1Nw==", "bodyText": "add javadoc: must guarantee the device exists in the workmemtable", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515827557", "createdAt": "2020-11-02T09:07:28Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java", "diffHunk": "@@ -121,6 +132,21 @@ ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType dataType,\n \n   void release();\n \n+  /**\n+   * only used when mem control enabled\n+   */\n+  boolean checkIfNeedStartNewChunk(String deviceId, String measurement);\n+\n+  /**\n+   * only used when mem control enabled\n+   */\n+  int getCurrentTVListSize(String deviceId, String measurement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MDE5MA==", "bodyText": "why synchronized", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516060190", "createdAt": "2020-11-02T15:40:58Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+  private static int currentDataTypeTotalNum = 0;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicLong bufferedArraysRamSize = new AtomicLong();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicLong outOfBufferArraysRamSize = new AtomicLong();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+    logger.info(\"BufferedArraySizeThreshold is {}\", BUFFERED_ARRAY_SIZE_THRESHOLD);\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getPrimitiveArraysByType(TSDataType dataType) {\n+    // check memory of buffered array, if already full, generate OOB\n+    if (bufferedArraysRamSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysRamSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return createPrimitiveArray(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // try to get a buffered array\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+      // no buffered array, create one\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysRamSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+    }\n+\n+    return createPrimitiveArray(dataType);\n+  }\n+\n+  private static Object createPrimitiveArray(TSDataType dataType) {\n+    Object dataArray;\n+    switch (dataType) {\n+      case BOOLEAN:\n+        dataArray = new boolean[ARRAY_SIZE];\n+        break;\n+      case INT32:\n+        dataArray = new int[ARRAY_SIZE];\n+        break;\n+      case INT64:\n+        dataArray = new long[ARRAY_SIZE];\n+        break;\n+      case FLOAT:\n+        dataArray = new float[ARRAY_SIZE];\n+        break;\n+      case DOUBLE:\n+        dataArray = new double[ARRAY_SIZE];\n+        break;\n+      case TEXT:\n+        dataArray = new Binary[ARRAY_SIZE];\n+        break;\n+      default:\n+        throw new UnSupportedDataTypeException(dataType.toString());\n+    }\n+\n+    return dataArray;\n+  }\n+\n+  /**\n+   * Get primitive data lists according to data type and size, only for TVList's sorting\n+   *\n+   * @param dataType data type\n+   * @param size     needed capacity\n+   * @return an array of primitive data arrays\n+   */\n+  public static synchronized Object createDataListsByType(TSDataType dataType, int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MzA3OA==", "bodyText": "now, sorted timestamps use new memory? no OOM danger?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516063078", "createdAt": "2020-11-02T15:44:51Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/BinaryTVList.java", "diffHunk": "@@ -120,9 +119,6 @@ void clearValue() {\n   @Override\n   void clearSortedValue() {\n     if (sortedValues != null) {\n-      for (Binary[] dataArray : sortedValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NTI3MA==", "bodyText": "concurrency problem?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516075270", "createdAt": "2020-11-02T16:01:15Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -394,14 +411,13 @@ public void createTimeseries(CreateTimeSeriesPlan plan, long offset) throws Meta\n         }\n       }\n \n-      // update statistics\n-      if (config.isEnableParameterAdapter()) {\n-        int size = seriesNumberInStorageGroups.get(storageGroupPath.getFullPath());\n-        seriesNumberInStorageGroups.put(storageGroupPath.getFullPath(), size + 1);\n-        if (size + 1 > maxSeriesNumberAmongStorageGroup) {\n-          maxSeriesNumberAmongStorageGroup = size + 1L;\n-        }\n+      // update statistics and schemaDataTypeNumMap\n+      totalSeriesNumber++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NTcxMA==", "bodyText": "how about set currentDataTypeTotalNum as a field?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516075710", "createdAt": "2020-11-02T16:01:54Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -589,39 +580,58 @@ public void setStorageGroup(PartialPath storageGroup) throws MetadataException {\n   public void deleteStorageGroups(List<PartialPath> storageGroups) throws MetadataException {\n     try {\n       for (PartialPath storageGroup : storageGroups) {\n-\n+        totalSeriesNumber -= mtree.getAllTimeseriesCount(storageGroup);\n         // clear cached MNode\n+        if (!allowToCreateNewSeries && \n+            totalSeriesNumber * ESTIMATED_SERIES_SIZE < MTREE_SIZE_THRESHOLD) {\n+          logger.info(\"Current series number {} come back to normal level\", totalSeriesNumber);\n+          allowToCreateNewSeries = true;\n+        }\n         mNodeCache.clear();\n \n         // try to delete storage group\n         List<MeasurementMNode> leafMNodes = mtree.deleteStorageGroup(storageGroup);\n         for (MeasurementMNode leafMNode : leafMNodes) {\n           removeFromTagInvertedIndex(leafMNode);\n+          // update statistics in schemaDataTypeNumMap\n+          updateSchemaDataTypeNumMap(leafMNode.getSchema().getType(), -1);\n         }\n \n-        if (config.isEnableParameterAdapter()) {\n-          IoTDBConfigDynamicAdapter.getInstance().addOrDeleteStorageGroup(-1);\n-          int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n-          IoTDBConfigDynamicAdapter.getInstance().addOrDeleteTimeSeries(size * -1);\n-          ActiveTimeSeriesCounter.getInstance().delete(storageGroup.getFullPath());\n-          seriesNumberInStorageGroups.remove(storageGroup.getFullPath());\n-          if (size == maxSeriesNumberAmongStorageGroup) {\n-            maxSeriesNumberAmongStorageGroup =\n-                seriesNumberInStorageGroups.values().stream().max(Integer::compareTo).orElse(0);\n-          }\n-        }\n         // if success\n         if (!isRecovering) {\n           logWriter.deleteStorageGroup(storageGroup.getFullPath());\n         }\n       }\n-    } catch (ConfigAdjusterException e) {\n-      throw new MetadataException(e);\n     } catch (IOException e) {\n       throw new MetadataException(e.getMessage());\n     }\n   }\n \n+  /**\n+   * update statistics in schemaDataTypeNumMap\n+   *\n+   * @param type data type\n+   * @param num  1 for creating timeseries and -1 for deleting timeseries\n+   */\n+  private synchronized void updateSchemaDataTypeNumMap(TSDataType type, int num) {\n+    // add an array of the series type\n+    schemaDataTypeNumMap.put(type, schemaDataTypeNumMap.getOrDefault(type, 0) + num);\n+    // add an array of time\n+    schemaDataTypeNumMap.put(TSDataType.INT64,\n+        schemaDataTypeNumMap.getOrDefault(TSDataType.INT64, 0) + num);\n+\n+    int currentDataTypeTotalNum = 0;\n+    for (int typeSize : schemaDataTypeNumMap.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc"}, "originalPosition": 377}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f2fd407db118861473d347581813137dc0aa6fe", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/1f2fd407db118861473d347581813137dc0aa6fe", "committedDate": "2020-11-03T02:20:07Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bbcaf1788b355a66ddac841a73d8d1d808f32af", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8bbcaf1788b355a66ddac841a73d8d1d808f32af", "committedDate": "2020-11-03T02:27:27Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50303e0b6fe56f86909a10afaeed4d26997da415", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/50303e0b6fe56f86909a10afaeed4d26997da415", "committedDate": "2020-11-03T03:12:28Z", "message": "modify flush"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869c2af4f386ed658a80c409567dcde807542d70", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/869c2af4f386ed658a80c409567dcde807542d70", "committedDate": "2020-11-03T05:08:55Z", "message": "Fix a bug of PrimitiveArrayManager.isCurrentDataTypeExceeded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cafab8f6d9b54f6d83ed6465632a3eea15ee9bc0", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/cafab8f6d9b54f6d83ed6465632a3eea15ee9bc0", "committedDate": "2020-11-03T05:09:40Z", "message": "Merge remote-tracking branch 'origin/mem_control' into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b831bda9fc67f3e60c8c45dc258a220e5d7553e", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/0b831bda9fc67f3e60c8c45dc258a220e5d7553e", "committedDate": "2020-11-03T05:19:55Z", "message": "Remove currentDataTypeTotalNum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2fb431ebc8206a57b52b8ee752db59e5dd6de23", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/d2fb431ebc8206a57b52b8ee752db59e5dd6de23", "committedDate": "2020-11-03T10:10:11Z", "message": "accelerate mem calculate for tablet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6547ef0280ef44c9350101fabb92e5f00f94058", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e6547ef0280ef44c9350101fabb92e5f00f94058", "committedDate": "2020-11-03T10:46:02Z", "message": "change block time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45eb51864cbb0b8ff0cd807d108fb3f7292737c2", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/45eb51864cbb0b8ff0cd807d108fb3f7292737c2", "committedDate": "2020-11-03T11:50:51Z", "message": "add config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33b1bb2e638077584f9dd6ecdd84486e01494690", "author": {"user": {"login": "EJTTianYu", "name": "gwmh"}}, "url": "https://github.com/apache/iotdb/commit/33b1bb2e638077584f9dd6ecdd84486e01494690", "committedDate": "2020-11-03T11:54:02Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "277e18a49194478cb64ec9cb867622a09c78acce", "author": {"user": {"login": "EJTTianYu", "name": "gwmh"}}, "url": "https://github.com/apache/iotdb/commit/277e18a49194478cb64ec9cb867622a09c78acce", "committedDate": "2020-11-03T11:54:33Z", "message": "Merge branch 'mem_control' of github.com:apache/iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc6c4599d1ee55e6abab4608cd85da73c77dbf99", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/cc6c4599d1ee55e6abab4608cd85da73c77dbf99", "committedDate": "2020-11-03T11:59:00Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94284c6583cfe82af9e9a1e66210ae7418716ac1", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/94284c6583cfe82af9e9a1e66210ae7418716ac1", "committedDate": "2020-11-03T11:59:26Z", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86606ad308bf1518edaf5f6d7923aa2b6cae3cc2", "author": {"user": {"login": "EJTTianYu", "name": "gwmh"}}, "url": "https://github.com/apache/iotdb/commit/86606ad308bf1518edaf5f6d7923aa2b6cae3cc2", "committedDate": "2020-11-03T12:19:17Z", "message": "revert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNDU2NzUw", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-522456750", "createdAt": "2020-11-03T12:41:55Z", "commit": {"oid": "86606ad308bf1518edaf5f6d7923aa2b6cae3cc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNDU3Mzk0", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-522457394", "createdAt": "2020-11-03T12:42:50Z", "commit": {"oid": "86606ad308bf1518edaf5f6d7923aa2b6cae3cc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efaa0e4e75e1fe3c3758f5efa7243caca3bb0a89", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/efaa0e4e75e1fe3c3758f5efa7243caca3bb0a89", "committedDate": "2020-11-03T12:46:22Z", "message": "change tsfile threshold to 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c25f3bf0da1e128f0e659770ec1ae315942dca8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/9c25f3bf0da1e128f0e659770ec1ae315942dca8", "committedDate": "2020-08-18T09:22:06Z", "message": "add some javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1983c88e594a746a8ce09bffedd7e6b6d67713d", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d1983c88e594a746a8ce09bffedd7e6b6d67713d", "committedDate": "2020-08-19T08:03:42Z", "message": "completely fix OOM when insert TEXT data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb32147f8e0bcd077bd9659692e312f3264ba94", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6eb32147f8e0bcd077bd9659692e312f3264ba94", "committedDate": "2020-08-19T08:54:51Z", "message": "fix UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7363269fa8538669881749a3c74f339b59dde693", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7363269fa8538669881749a3c74f339b59dde693", "committedDate": "2020-08-20T03:52:31Z", "message": "improve resource mem cost accuracy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2584600d52dbee82e82874db8c2e93f441f77e98", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/2584600d52dbee82e82874db8c2e93f441f77e98", "committedDate": "2020-08-20T08:00:06Z", "message": "fix estimate resource mem cost"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25950667c43ccb9f0ebcf09eb163b9387e650aee", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/25950667c43ccb9f0ebcf09eb163b9387e650aee", "committedDate": "2020-08-21T02:11:03Z", "message": "Remove more useless codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c226499cd0d08214fdcdcb97a2d7db39ee98c0", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/f6c226499cd0d08214fdcdcb97a2d7db39ee98c0", "committedDate": "2020-08-21T02:31:07Z", "message": "Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d09bd6230bbf0b5701b5aa581009f88a0541878a", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d09bd6230bbf0b5701b5aa581009f88a0541878a", "committedDate": "2020-08-21T03:50:54Z", "message": "fix the init value of minTime in TVList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0f695c49a584afdcacc4d16c0521347769cf6b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6e0f695c49a584afdcacc4d16c0521347769cf6b", "committedDate": "2020-08-21T05:42:56Z", "message": "fix the default value of minTime when clear TVList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3207fa466b24b2c63168ccec1d589c17d46d1f14", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/3207fa466b24b2c63168ccec1d589c17d46d1f14", "committedDate": "2020-08-21T09:40:47Z", "message": "add limit to sg to keep from reject status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdead02c1d53b8c7bb1ff64700c12978aa67506", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/5cdead02c1d53b8c7bb1ff64700c12978aa67506", "committedDate": "2020-08-24T09:00:33Z", "message": "don't get array from array pool for sorting and fix flush small memtable when closing tsfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32b9cc800a128a7aa51a7d7cfcd35511c5a81381", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/32b9cc800a128a7aa51a7d7cfcd35511c5a81381", "committedDate": "2020-08-24T14:49:52Z", "message": "fix workmemtable is null when insert text data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee16dc4135d42b9df6dd0acd0bfdf4a207b5dd75", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ee16dc4135d42b9df6dd0acd0bfdf4a207b5dd75", "committedDate": "2020-08-25T03:11:24Z", "message": "fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4be4928af28e787319d0b6722bda444c40a6fbbd", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/4be4928af28e787319d0b6722bda444c40a6fbbd", "committedDate": "2020-08-25T08:42:06Z", "message": "fix insertion logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23bb34750d4ccc78d44209785fb8558bc35d672d", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/23bb34750d4ccc78d44209785fb8558bc35d672d", "committedDate": "2020-08-25T09:05:34Z", "message": "fix release binary array in memtable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c023b1b78cef7c313e2e68d806bf7261b08def", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/92c023b1b78cef7c313e2e68d806bf7261b08def", "committedDate": "2020-08-25T09:15:03Z", "message": "Merge branch 'mem_control' into remove_dynamic_adapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb24177c5cc1cd2abf65d1e885d0f68901495d57", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/eb24177c5cc1cd2abf65d1e885d0f68901495d57", "committedDate": "2020-08-25T09:15:36Z", "message": "Merge pull request #1615 from apache/remove_dynamic_adapter\n\n[IOTDB-834] Remove DynamicAdapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e94aef4dac8393a8b15cbab7cd93a29002b9058", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7e94aef4dac8393a8b15cbab7cd93a29002b9058", "committedDate": "2020-08-25T09:16:41Z", "message": "Merge branch 'master' into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f951bda9afb8a6d6e88d3d76236f0e705aa310a", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7f951bda9afb8a6d6e88d3d76236f0e705aa310a", "committedDate": "2020-08-26T07:45:20Z", "message": "fix multiple sgs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f", "committedDate": "2020-08-26T08:34:14Z", "message": "fix closing tsfile when use insert tablet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NjE2NDY0", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-476616464", "createdAt": "2020-08-27T11:13:55Z", "commit": {"oid": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMToxMzo1NVrOHILfxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMToyMTozNFrOHImYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzOTAxNA==", "bodyText": "what is the reason of modifing the sgReportThreshold?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478339014", "createdAt": "2020-08-27T11:13:55Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeSet;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private long arrayPoolMemCost;\n+  private boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report applying a new out of buffered array to system. Attention: It should be invoked before\n+   * applying new OOB array actually.\n+   *\n+   * @param dataType data type of array\n+   * @param size     size of array\n+   * @return Return true if it's agreed when memory is enough.\n+   */\n+  public synchronized boolean applyNewOOBArray(TSDataType dataType, int size) {\n+    // if current memory is enough\n+    if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      logger.debug(\"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      return true;\n+    } else if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      // invoke flush()\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing. \"\n+          + \"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      flush();\n+      return true;\n+    } else {\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing \"\n+          + \"and change system to rejected status...Current total mem cost is {}\", \n+          (arrayPoolMemCost + totalSgMemCost));\n+      rejected = true;\n+      flush();\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   * @param delta mem cost\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() - \n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+        + \"Current array pool mem cost is {}, sg mem cost is {}.\", arrayPoolMemCost,\n+        totalSgMemCost);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+\n+    long newSgReportThreshold = calculateNewSgReportThreshold(storageGroupInfo);\n+    storageGroupInfo.setStorageGroupReportThreshold(newSgReportThreshold);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3OTQzOA==", "bodyText": "the maximum value is what?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478779438", "createdAt": "2020-08-28T01:21:34Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeSet;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private long arrayPoolMemCost;\n+  private boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report applying a new out of buffered array to system. Attention: It should be invoked before\n+   * applying new OOB array actually.\n+   *\n+   * @param dataType data type of array\n+   * @param size     size of array\n+   * @return Return true if it's agreed when memory is enough.\n+   */\n+  public synchronized boolean applyNewOOBArray(TSDataType dataType, int size) {\n+    // if current memory is enough\n+    if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      logger.debug(\"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      return true;\n+    } else if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      // invoke flush()\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing. \"\n+          + \"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      flush();\n+      return true;\n+    } else {\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing \"\n+          + \"and change system to rejected status...Current total mem cost is {}\", \n+          (arrayPoolMemCost + totalSgMemCost));\n+      rejected = true;\n+      flush();\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   * @param delta mem cost\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() - \n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+        + \"Current array pool mem cost is {}, sg mem cost is {}.\", arrayPoolMemCost,\n+        totalSgMemCost);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+\n+    long newSgReportThreshold = calculateNewSgReportThreshold(storageGroupInfo);\n+    storageGroupInfo.setStorageGroupReportThreshold(newSgReportThreshold);\n+    if (arrayPoolMemCost + totalSgMemCost\n+        >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}, array pool cost is {}\", totalSgMemCost, arrayPoolMemCost);\n+      flush();\n+    } \n+    if (arrayPoolMemCost + totalSgMemCost\n+        >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Calculate new Sg report threshold. The maximum value is ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTg0MjQ1", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-477184245", "createdAt": "2020-08-28T01:27:17Z", "commit": {"oid": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMToyNzoxN1rOHImd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMToyNzoxN1rOHImd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MDkxNg==", "bodyText": "clear is thread safe? maybe several threads could call the clear()?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478780916", "createdAt": "2020-08-28T01:27:17Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+/**\n+ * The TsFileProcessorInfo records the memory cost of this TsFileProcessor.\n+ */\n+public class TsFileProcessorInfo {\n+\n+  /**\n+   * Once tspInfo updated, report to storageGroupInfo that this TSP belongs to.\n+   */\n+  private StorageGroupInfo storageGroupInfo;\n+\n+  /**\n+   * The memory cost of the unsealed TsFileResources of this TSP\n+   */\n+  private long unsealedResourceMemCost;\n+  \n+  /**\n+   * The memory cost of TEXT data of this TSP\n+   */\n+  private long bytesMemCost;\n+\n+  /**\n+   * The memory cost of ChunkMetadata of this TSP\n+   */\n+  private long chunkMetadataMemCost;\n+\n+  /**\n+   * The memory cost of WAL of this TSP\n+   */\n+  private long walMemCost;\n+\n+  public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n+    this.storageGroupInfo = storageGroupInfo;\n+    this.unsealedResourceMemCost = 0;\n+    this.bytesMemCost = 0;\n+    this.chunkMetadataMemCost = 0;\n+    this.walMemCost = IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost += cost;\n+    storageGroupInfo.addUnsealedResourceMemCost(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost += cost;\n+    storageGroupInfo.addChunkMetadataMemCost(cost);\n+  }\n+\n+  public void addBytesMemCost(long cost) {\n+    bytesMemCost += cost;\n+    storageGroupInfo.addBytesMemCost(cost);\n+  }\n+\n+  /**\n+   * call this method when closing TSP\n+   */\n+  public void clear() {\n+    storageGroupInfo.resetUnsealedResourceMemCost(unsealedResourceMemCost);\n+    storageGroupInfo.resetChunkMetadataMemCost(chunkMetadataMemCost);\n+    storageGroupInfo.resetWalMemCost(walMemCost);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a84387e4131d1afb7c75b455f64d3703d5738f69", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a84387e4131d1afb7c75b455f64d3703d5738f69", "committedDate": "2020-08-31T02:52:46Z", "message": "Merge branch 'master' into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da517adc5d3568f33de9aacaad8e6792c976af13", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/da517adc5d3568f33de9aacaad8e6792c976af13", "committedDate": "2020-08-31T03:15:23Z", "message": "fix conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc5df4084de8712c6b5fddaabe6c159f6660797", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ffc5df4084de8712c6b5fddaabe6c159f6660797", "committedDate": "2020-08-31T03:44:04Z", "message": "fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e032b61d57666f6acd401a3e2f64d93ffc454394", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e032b61d57666f6acd401a3e2f64d93ffc454394", "committedDate": "2020-08-31T08:03:00Z", "message": "fix a delete timeseries bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d096c10ca9771748510d0f37702398e49afabfb8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d096c10ca9771748510d0f37702398e49afabfb8", "committedDate": "2020-08-31T08:04:59Z", "message": "fix a delete timeseries bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ce6a9ea2cff590f6835a921e8953a42e2bdb23", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e0ce6a9ea2cff590f6835a921e8953a42e2bdb23", "committedDate": "2020-09-02T07:15:42Z", "message": "fix null pointer exception when insert text data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de7c336e5731811befc8d5df9154734e76f34e05", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/de7c336e5731811befc8d5df9154734e76f34e05", "committedDate": "2020-09-02T07:17:33Z", "message": "merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf192619a99589b712ad1d59067c522994e21c49", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/bf192619a99589b712ad1d59067c522994e21c49", "committedDate": "2020-09-02T08:17:40Z", "message": "fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2da833107790e5d461915d424d1ad19a89d6ba1", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a2da833107790e5d461915d424d1ad19a89d6ba1", "committedDate": "2020-09-04T09:10:42Z", "message": "improve array manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d40df8acf240f20a50da523a11f5018082b40c4c", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d40df8acf240f20a50da523a11f5018082b40c4c", "committedDate": "2020-09-04T09:17:07Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce03ec0062caf7b3b76fdb24837441c3817e3c8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/5ce03ec0062caf7b3b76fdb24837441c3817e3c8", "committedDate": "2020-09-11T03:51:37Z", "message": "fix conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6bd6eabf441a8b2286440c0ce07914d1bf30a3e", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a6bd6eabf441a8b2286440c0ce07914d1bf30a3e", "committedDate": "2020-09-14T02:19:07Z", "message": "change some log level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db02f320403d990586c024783945eb43b3b303c7", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/db02f320403d990586c024783945eb43b3b303c7", "committedDate": "2020-09-14T06:44:47Z", "message": "add log to show chunk size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13f1b592f4b51ad4dd9712fbfe3a01b03c066324", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/13f1b592f4b51ad4dd9712fbfe3a01b03c066324", "committedDate": "2020-09-14T07:38:05Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c5821b138321a03501f7943f7e801607545674", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/16c5821b138321a03501f7943f7e801607545674", "committedDate": "2020-09-14T07:44:38Z", "message": "fix cross-test error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e93751b01da0bdd5cf52e7b8dd16d862a0699a", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e3e93751b01da0bdd5cf52e7b8dd16d862a0699a", "committedDate": "2020-09-17T09:03:22Z", "message": "optimate insertion and fix OOM when use small memory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9e97a32d7459f0324fbab7c3ba57ce501d81848", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a9e97a32d7459f0324fbab7c3ba57ce501d81848", "committedDate": "2020-09-17T09:06:03Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41eec679ba4d7e367a20aa3ddb47a5f566e43057", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/41eec679ba4d7e367a20aa3ddb47a5f566e43057", "committedDate": "2020-09-17T10:01:19Z", "message": "fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a217174b7ea07cdd86f19f4610a856806476037a", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a217174b7ea07cdd86f19f4610a856806476037a", "committedDate": "2020-09-21T06:20:37Z", "message": "change the time of invoking flush"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9e81994e52ebdfd100490098340aeb8ecc89968", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a9e81994e52ebdfd100490098340aeb8ecc89968", "committedDate": "2020-09-22T09:44:58Z", "message": "fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59ad75d967cf95315e29d9f8ab3fe5a6d6687de6", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/59ad75d967cf95315e29d9f8ab3fe5a6d6687de6", "committedDate": "2020-09-22T09:48:21Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "798f878c50b448b64d72c3b6f3c533071c14d6db", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/798f878c50b448b64d72c3b6f3c533071c14d6db", "committedDate": "2020-09-23T03:00:37Z", "message": "add an error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d636518ebd09d1805742896475d274733eb4e01", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/0d636518ebd09d1805742896475d274733eb4e01", "committedDate": "2020-09-23T05:36:32Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6955753c24f60643f9d29d293ac6ec50c7e323fd", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6955753c24f60643f9d29d293ac6ec50c7e323fd", "committedDate": "2020-10-06T02:06:40Z", "message": "time out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a349d6e24e3b43a0b969d1fe4bc1048dff99b0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e2a349d6e24e3b43a0b969d1fe4bc1048dff99b0", "committedDate": "2020-10-06T02:12:43Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f0cb0918f5fc69545f752cc29046dc3644e3213", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7f0cb0918f5fc69545f752cc29046dc3644e3213", "committedDate": "2020-10-06T02:26:26Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e644bedc3c769ea2ad8915ad55a9c79c2404c960", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e644bedc3c769ea2ad8915ad55a9c79c2404c960", "committedDate": "2020-10-06T03:11:52Z", "message": "change log level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "763fe2acd4a7f0ef6679913049732c0fd031a80d", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/763fe2acd4a7f0ef6679913049732c0fd031a80d", "committedDate": "2020-10-13T03:33:57Z", "message": "add switch for mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c3203a32404a884f8570261545d7645aab28626", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6c3203a32404a884f8570261545d7645aab28626", "committedDate": "2020-10-13T06:07:19Z", "message": "add switch for mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5034bb3df25ace698326a67eb4b136696780073", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e5034bb3df25ace698326a67eb4b136696780073", "committedDate": "2020-10-13T07:26:30Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "322b2a291869e4e6aece137bee5a8498c18140c4", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/322b2a291869e4e6aece137bee5a8498c18140c4", "committedDate": "2020-10-13T12:00:18Z", "message": "Fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1400603f9495e361c2386a48d6a405f30d7eee6", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c1400603f9495e361c2386a48d6a405f30d7eee6", "committedDate": "2020-10-16T06:49:50Z", "message": "change logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8e7a456c616367f232f79a30ce8755ff453dded", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/a8e7a456c616367f232f79a30ce8755ff453dded", "committedDate": "2020-10-19T03:14:00Z", "message": "fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdf967e60357f98dd088ad224f4d7dba1b8ec0d7", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/bdf967e60357f98dd088ad224f4d7dba1b8ec0d7", "committedDate": "2020-10-19T03:45:23Z", "message": "update branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a54cd11c5bddc18fdcec4b92d4a88e05eb12bf", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/56a54cd11c5bddc18fdcec4b92d4a88e05eb12bf", "committedDate": "2020-10-19T05:07:52Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8637399ac9f5963ef11fbe9be5d4b0bc8dbd77cd", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8637399ac9f5963ef11fbe9be5d4b0bc8dbd77cd", "committedDate": "2020-10-19T06:24:36Z", "message": "correct some method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c8464e77872d34e9d501edd4e057e729022364f", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6c8464e77872d34e9d501edd4e057e729022364f", "committedDate": "2020-10-19T07:20:16Z", "message": "fix a bug in mmanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02a109dabb6e4e99b6021a4a1fb21ea2b3d3db7", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/b02a109dabb6e4e99b6021a4a1fb21ea2b3d3db7", "committedDate": "2020-10-19T09:14:06Z", "message": "fix names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "976a2d5cf0f4ca86a0c80ceffb394e74de1a1e06", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/976a2d5cf0f4ca86a0c80ceffb394e74de1a1e06", "committedDate": "2020-10-20T02:12:56Z", "message": "Merge branch 'master' of https://github.com/apache/iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6edbc53822fe8d9b4c5f720aeb8bfde10ca88c95", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6edbc53822fe8d9b4c5f720aeb8bfde10ca88c95", "committedDate": "2020-10-20T06:52:49Z", "message": "fix many issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7ecda1dbbee2f80b88b5373b9ccd4737495de62", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c7ecda1dbbee2f80b88b5373b9ccd4737495de62", "committedDate": "2020-10-20T09:26:03Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fde44d171f8ac99de5813b23fcbcd6ddeade5c74", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/fde44d171f8ac99de5813b23fcbcd6ddeade5c74", "committedDate": "2020-10-22T03:20:16Z", "message": "fix some issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f45e4388c655a6031124cf4ab79340b92ea4c3b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/9f45e4388c655a6031124cf4ab79340b92ea4c3b", "committedDate": "2020-10-22T03:34:42Z", "message": "fix some issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "committedDate": "2020-10-22T05:44:31Z", "message": "merge master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NDYwNDM0", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-514460434", "createdAt": "2020-10-22T08:04:54Z", "commit": {"oid": "9f45e4388c655a6031124cf4ab79340b92ea4c3b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODowNDo1NVrOHmVd0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMToyNTo1NVrOHm5M3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1OTYzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If storage group increased more than this threshold, report to system. The default value is 16777216\n          \n          \n            \n            # If storage group increased more than this threshold (in byte), report to system. The default value is 16MB", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r509959632", "createdAt": "2020-10-22T08:04:55Z", "author": {"login": "samperson1997"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -232,14 +232,16 @@ write_read_free_memory_proportion=4:3:1:2\n primitive_array_size=32\n \n # Ratio of memory allocated for buffered arrays, 0.6 by default\n-buffered_arrays_memory_proportion=0.4\n+buffered_arrays_memory_proportion=0.6\n \n # Flush proportion for system, 0.5 by default\n flush_proportion=0.5\n \n # Reject proportion for system, 0.8 by default\n reject_proportion=0.8\n \n+# If storage group increased more than this threshold, report to system. The default value is 16777216", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f45e4388c655a6031124cf4ab79340b92ea4c3b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0NTA4Mw==", "bodyText": "no need to throw WriteProcessException in this test : )", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510545083", "createdAt": "2020-10-23T01:25:45Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java", "diffHunk": "@@ -30,7 +32,7 @@\n \n \n   @Test\n-  public void testLongTVList1() {\n+  public void testLongTVList1() throws WriteProcessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0NTExNg==", "bodyText": "remove unused import", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510545116", "createdAt": "2020-10-23T01:25:55Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java", "diffHunk": "@@ -21,6 +21,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Random;\n+\n+import org.apache.iotdb.db.exception.WriteProcessException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjI2MTky", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-515226192", "createdAt": "2020-10-23T01:48:27Z", "commit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo0ODoyN1rOHm5g9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1Nzo0OVrOHm5p5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDI2Mw==", "bodyText": "WriteProcessException could be removed in this class...", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550263", "createdAt": "2020-10-23T01:48:27Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -122,24 +130,24 @@ public void insertTablet(InsertTabletPlan insertTabletPlan, int start, int end)\n       throws WriteProcessException {\n     try {\n       write(insertTabletPlan, start, end);\n-      memSize += MemUtils.getRecordSize(insertTabletPlan, start, end);\n+      memSize += MemUtils.getRecordSize(insertTabletPlan, start, end, !enableMemControl);\n       totalPointsNum += (insertTabletPlan.getMeasurements().length - insertTabletPlan.getFailedMeasurementNumber())\n         * (end - start);\n     } catch (RuntimeException e) {\n-      throw new WriteProcessException(e.getMessage());\n+      throw new WriteProcessException(e);\n     }\n   }\n \n \n   @Override\n   public void write(String deviceId, String measurement, MeasurementSchema schema, long insertTime,\n-      Object objectValue) {\n+      Object objectValue) throws WriteProcessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDQ2Mg==", "bodyText": "... so that all WriteProcessException in this test could be removed too", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550462", "createdAt": "2020-10-23T01:49:14Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java", "diffHunk": "@@ -49,7 +51,7 @@ public void setUp() {\n   }\n \n   @Test\n-  public void memSeriesSortIteratorTest() throws IOException {\n+  public void memSeriesSortIteratorTest() throws IOException, WriteProcessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDc4Nw==", "bodyText": "remove 3 WriteProcessException (one is in line 81)", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550787", "createdAt": "2020-10-23T01:50:32Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java", "diffHunk": "@@ -43,9 +43,9 @@\n   Map<String, Map<String, IWritableMemChunk>> getMemTableMap();\n \n   void write(String deviceId, String measurement, MeasurementSchema schema,\n-      long insertTime, Object objectValue);\n+      long insertTime, Object objectValue) throws WriteProcessException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDk3Mw==", "bodyText": "Remove WriteProcessException", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550973", "createdAt": "2020-10-23T01:51:18Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableFlushTaskTest.java", "diffHunk": "@@ -62,7 +63,7 @@ public void tearDown() throws Exception {\n   }\n \n   @Test\n-  public void testFlushMemTable() throws ExecutionException, InterruptedException, IOException {\n+  public void testFlushMemTable() throws ExecutionException, InterruptedException, IOException, WriteProcessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MTEyNA==", "bodyText": "Remove WriteProcessException", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510551124", "createdAt": "2020-10-23T01:51:57Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableTestUtils.java", "diffHunk": "@@ -40,7 +41,7 @@\n   }\n \n   public static void produceData(IMemTable iMemTable, long startTime, long endTime, String deviceId,\n-      String measurementId, TSDataType dataType) {\n+      String measurementId, TSDataType dataType) throws WriteProcessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjU1MA==", "bodyText": "Remove WriteProcessException", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510552550", "createdAt": "2020-10-23T01:57:49Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -100,15 +107,16 @@ private IWritableMemChunk createIfNotExistAndGet(String deviceId, String measure\n   protected abstract IWritableMemChunk genMemSeries(MeasurementSchema schema);\n \n   @Override\n-  public void insert(InsertRowPlan insertRowPlan) {\n+  public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fbccbcadabefdf509114ce645c0fe6fc8d5c6ad", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8fbccbcadabefdf509114ce645c0fe6fc8d5c6ad", "committedDate": "2020-10-23T05:32:10Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dae54799411fb9fb693e6fbda99cb860c070386", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/2dae54799411fb9fb693e6fbda99cb860c070386", "committedDate": "2020-10-23T12:17:44Z", "message": "fix engine properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97f7365aa374e05175b3513c1393017443bbfc29", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/97f7365aa374e05175b3513c1393017443bbfc29", "committedDate": "2020-10-24T02:42:58Z", "message": "merge master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjM1Mjgy", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-515235282", "createdAt": "2020-10-23T02:22:57Z", "commit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyMjo1N1rOHm6AUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjozMzoyOVrOHm6J5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODI5MA==", "bodyText": "Would modifying to this be better?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * If mem control enabled, do not get text data size here, the size will add to memtable\n          \n          \n            \n               * If mem control enabled, do not add text data size here, the size will add to memtable", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510558290", "createdAt": "2020-10-23T02:22:57Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "diffHunk": "@@ -45,8 +45,11 @@ private MemUtils(){\n \n   /**\n    * function for getting the value size.\n+   * If mem control enabled, do not get text data size here, the size will add to memtable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODM2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * If mem control enabled, do not get text data size here, the size will add to memtable\n          \n          \n            \n               * If mem control enabled, do not add text data size here, the size will add to memtable", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510558367", "createdAt": "2020-10-23T02:23:16Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "diffHunk": "@@ -70,7 +73,12 @@ public static long getBinarySize(Binary value) {\n         .sizeOf(value.getValues());\n   }\n \n-  public static long getRecordSize(InsertTabletPlan insertTabletPlan, int start, int end) {\n+  /**\n+   * If mem control enabled, do not get text data size here, the size will add to memtable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTkwMQ==", "bodyText": "indent is not correct", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510559901", "createdAt": "2020-10-23T02:29:48Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -529,23 +569,22 @@ private PartialPath deleteOneTimeseriesAndUpdateStatistics(PartialPath path)\n     removeFromTagInvertedIndex(pair.right);\n     PartialPath storageGroupPath = pair.left;\n \n-    // TODO: delete the path node and all its ancestors\n-    mNodeCache.clear();\n-    try {\n-      IoTDBConfigDynamicAdapter.getInstance().addOrDeleteTimeSeries(-1);\n-    } catch (ConfigAdjusterException e) {\n-      throw new MetadataException(e);\n-    }\n+      // update statistics in schemaDataTypeNumMap\n+      updateSchemaDataTypeNumMap(pair.right.getSchema().getType(), -1);\n+\n+      // TODO: delete the path node and all its ancestors\n+      mNodeCache.clear();\n \n-    if (config.isEnableParameterAdapter()) {\n-      PartialPath storageGroup = getStorageGroupPath(path);\n-      int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n-      seriesNumberInStorageGroups.put(storageGroup.getFullPath(), size - 1);\n-      if (size == maxSeriesNumberAmongStorageGroup) {\n-        seriesNumberInStorageGroups.values().stream().max(Integer::compareTo)\n-            .ifPresent(val -> maxSeriesNumberAmongStorageGroup = val);\n+      if (config.isEnableActiveTimeseriesCounter()) {\n+        PartialPath storageGroup = getStorageGroupPath(path);\n+        int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n+        seriesNumberInStorageGroups.put(storageGroup.getFullPath(), size - 1);\n+        totalSeriesNumber--;\n+        if (size == maxSeriesNumberAmongStorageGroup) {\n+          seriesNumberInStorageGroups.values().stream().max(Integer::compareTo)\n+              .ifPresent(val -> maxSeriesNumberAmongStorageGroup = val);\n+        }\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU2MDc0MA==", "bodyText": "to be consistent with maxSeriesNumberAmongStorageGroup and  totalSeriesNumber below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private int reportedDataTypeTotalNum;\n          \n          \n            \n              private long reportedDataTypeTotalNum;", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510560740", "createdAt": "2020-10-23T02:33:29Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -119,15 +118,41 @@\n   private RandomDeleteCache<PartialPath, MNode> mNodeCache;\n   // tag key -> tag value -> LeafMNode\n   private Map<String, Map<String, Set<MeasurementMNode>>> tagIndex = new HashMap<>();\n+\n+  // data type -> number\n+  private Map<TSDataType, Integer> schemaDataTypeNumMap = new ConcurrentHashMap<>();\n+  // reported total series number\n+  private int reportedDataTypeTotalNum;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cee57d11fe983849bc2c13c87ac1ed4d00553a8a", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/cee57d11fe983849bc2c13c87ac1ed4d00553a8a", "committedDate": "2020-10-26T02:10:50Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09993c369bfbe68ca4ff887e02decf120d0f192c", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/09993c369bfbe68ca4ff887e02decf120d0f192c", "committedDate": "2020-10-26T02:11:10Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "committedDate": "2020-10-26T02:11:25Z", "message": "Merge branch 'master' of https://github.com/apache/iotdb into mem_control"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTI0ODQ3", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-516524847", "createdAt": "2020-10-26T07:43:39Z", "commit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzo0MzozOVrOHoDsYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODozODo0OFrOHoFUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTYwMw==", "bodyText": "Have you fixed the concurrent issue? I think current implementation isn't thread safe", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511765603", "createdAt": "2020-10-26T07:43:39Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+/**\n+ * The TsFileProcessorInfo records the memory cost of this TsFileProcessor.\n+ */\n+public class TsFileProcessorInfo {\n+\n+  /**\n+   * Once tspInfo updated, report to storageGroupInfo that this TSP belongs to.\n+   */\n+  private StorageGroupInfo storageGroupInfo;\n+\n+  /**\n+   * The memory cost of the unsealed TsFileResources of this TSP\n+   */\n+  private long unsealedResourceMemCost;\n+  \n+  /**\n+   * The memory cost of memTable of this TSP\n+   */\n+  private long memTableCost;\n+\n+  /**\n+   * The memory cost of ChunkMetadata of this TSP\n+   */\n+  private long chunkMetadataMemCost;\n+\n+  /**\n+   * The memory cost of WAL of this TSP\n+   */\n+  private long walMemCost;\n+\n+  public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n+    this.storageGroupInfo = storageGroupInfo;\n+    this.unsealedResourceMemCost = 0;\n+    this.memTableCost = 0;\n+    this.chunkMetadataMemCost = 0;\n+    this.walMemCost = IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost += cost;\n+    storageGroupInfo.addUnsealedResourceMemCost(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost += cost;\n+    storageGroupInfo.addChunkMetadataMemCost(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost += cost;\n+    storageGroupInfo.addMemTableCost(cost);\n+  }\n+\n+  /**\n+   * call this method when closing TSP\n+   */\n+  public void clear() {\n+    storageGroupInfo.resetUnsealedResourceMemCost(unsealedResourceMemCost);\n+    storageGroupInfo.resetChunkMetadataMemCost(chunkMetadataMemCost);\n+    storageGroupInfo.resetWalMemCost(walMemCost);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3OTYwMg==", "bodyText": "\"1.1\" should be a static final constant and have a descriptive name", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511779602", "createdAt": "2020-10-26T08:14:34Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -608,13 +644,28 @@ public void deleteStorageGroups(List<PartialPath> storageGroups) throws Metadata\n           logWriter.deleteStorageGroup(storageGroup.getFullPath());\n         }\n       }\n-    } catch (ConfigAdjusterException e) {\n-      throw new MetadataException(e);\n     } catch (IOException e) {\n       throw new MetadataException(e.getMessage());\n     }\n   }\n \n+  /**\n+   * update statistics in schemaDataTypeNumMap\n+   *\n+   * @param type data type\n+   * @param num 1 for creating timeseries and -1 for deleting timeseries\n+   */\n+  private void updateSchemaDataTypeNumMap(TSDataType type, int num) {\n+    schemaDataTypeNumMap.put(type, schemaDataTypeNumMap.getOrDefault(type, 0) + num);\n+    schemaDataTypeNumMap.put(TSDataType.INT64,\n+        schemaDataTypeNumMap.getOrDefault(TSDataType.INT64, 0) + num);\n+    int currentDataTypeTotalNum = schemaDataTypeNumMap.values().size();\n+    if (num > 0 && currentDataTypeTotalNum >= reportedDataTypeTotalNum * 1.1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4Mzc4NA==", "bodyText": "We may not get here, so we should return null and add some comments", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511783784", "createdAt": "2020-10-26T08:22:46Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicInteger bufferedArraysSize = new AtomicInteger();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicInteger outOfBufferArraysSize = new AtomicInteger();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getDataListByType(TSDataType dataType) {\n+    // check buffered array num\n+    if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return getDataList(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // return a buffered array\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+    }\n+    return getDataList(dataType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MjI4Nw==", "bodyText": "Reference's length is 8 bytes. Or 16 bytes exactly (Java objects head length)", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511792287", "createdAt": "2020-10-26T08:38:48Z", "author": {"login": "SilverNarcissus"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSDataType.java", "diffHunk": "@@ -98,6 +99,23 @@ public short serialize() {\n     return enumToByte();\r\n   }\r\n \r\n+  public int getDataTypeSize() {\r\n+    switch (this) {\r\n+      case BOOLEAN:\r\n+        return 1;\r\n+      case INT32:\r\n+      case FLOAT:\r\n+        // For text: return the size of reference here\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTIwNzAx", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-516520701", "createdAt": "2020-10-26T07:35:29Z", "commit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzozNToyOVrOHoDfog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODo0ODoyOFrOHoFpvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MjMzOA==", "bodyText": "Is this method used?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511762338", "createdAt": "2020-10-26T07:35:29Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/flush/FlushManager.java", "diffHunk": "@@ -96,6 +96,13 @@ public void runMayThrow() {\n     }\n   }\n \n+  /**\n+   * get the current size of flush queue\n+   */\n+  public int getTsFileProcessorQueueSize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTc4Mg==", "bodyText": "Remove WriteProcessException", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511765782", "createdAt": "2020-10-26T07:44:03Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java", "diffHunk": "@@ -45,7 +45,7 @@\n   void write(String deviceId, String measurement, MeasurementSchema schema,\n       long insertTime, Object objectValue);\n \n-  void write(InsertTabletPlan insertTabletPlan, int start, int end);\n+  void write(InsertTabletPlan insertTabletPlan, int start, int end) throws WriteProcessException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NjEzOQ==", "bodyText": "Remove all WriteProcessException in this test (4 in functions and 1 in import)", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511766139", "createdAt": "2020-10-26T07:44:56Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java", "diffHunk": "@@ -22,7 +22,9 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Random;\n+\n import org.apache.iotdb.db.engine.querycontext.ReadOnlyMemChunk;\n+import org.apache.iotdb.db.exception.WriteProcessException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5NzY5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.unsealedResourceMemCost = 0;\n          \n          \n            \n                this.memTableCost = 0;\n          \n          \n            \n                this.chunkMetadataMemCost = 0;\n          \n          \n            \n                this.unsealedResourceMemCost = 0L;\n          \n          \n            \n                this.memTableCost = 0L;\n          \n          \n            \n                this.chunkMetadataMemCost = 0L;", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511797694", "createdAt": "2020-10-26T08:48:28Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+/**\n+ * The TsFileProcessorInfo records the memory cost of this TsFileProcessor.\n+ */\n+public class TsFileProcessorInfo {\n+\n+  /**\n+   * Once tspInfo updated, report to storageGroupInfo that this TSP belongs to.\n+   */\n+  private StorageGroupInfo storageGroupInfo;\n+\n+  /**\n+   * The memory cost of the unsealed TsFileResources of this TSP\n+   */\n+  private long unsealedResourceMemCost;\n+  \n+  /**\n+   * The memory cost of memTable of this TSP\n+   */\n+  private long memTableCost;\n+\n+  /**\n+   * The memory cost of ChunkMetadata of this TSP\n+   */\n+  private long chunkMetadataMemCost;\n+\n+  /**\n+   * The memory cost of WAL of this TSP\n+   */\n+  private long walMemCost;\n+\n+  public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n+    this.storageGroupInfo = storageGroupInfo;\n+    this.unsealedResourceMemCost = 0;\n+    this.memTableCost = 0;\n+    this.chunkMetadataMemCost = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "960db21f2a794a4cc129ac9dd30f72b0f3968ab1", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/960db21f2a794a4cc129ac9dd30f72b0f3968ab1", "committedDate": "2020-10-26T13:45:12Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0acc6e9f2ba1734e7522fb841be1eb6145b2e4", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8a0acc6e9f2ba1734e7522fb841be1eb6145b2e4", "committedDate": "2020-10-26T13:47:30Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4236b50042cb433d25e02765bd2a13f1a21ea5f6", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/4236b50042cb433d25e02765bd2a13f1a21ea5f6", "committedDate": "2020-10-27T09:01:03Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac71102dd9ade6ca58d9bf746ee8e4505a3a65f5", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ac71102dd9ade6ca58d9bf746ee8e4505a3a65f5", "committedDate": "2020-10-27T09:23:27Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a03a501082679b469bf5982a151e0308ae9ba24a", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/a03a501082679b469bf5982a151e0308ae9ba24a", "committedDate": "2020-10-27T12:31:01Z", "message": "[IOTDB-961] Remove ActiveTimeSeriesCounter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b8b1e2a004b84078ad4d3ac679fe1f779c3311", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/b2b8b1e2a004b84078ad4d3ac679fe1f779c3311", "committedDate": "2020-10-27T12:59:28Z", "message": "Fix MManagerBasicTest.testAddPathAndExist test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c0416ab4d891ce0e73fc071e3b8bfe49d40a48b", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/1c0416ab4d891ce0e73fc071e3b8bfe49d40a48b", "committedDate": "2020-10-28T01:31:32Z", "message": "Fix deleteStorageGroupTest.deleteStorageGroupTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392039100b3cc6b833b98074ccb4385f2d10c4a7", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/392039100b3cc6b833b98074ccb4385f2d10c4a7", "committedDate": "2020-10-28T02:29:22Z", "message": "Fix spark module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "720e5e26fcdc591cfdfe77a511d440b16cec2673", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/720e5e26fcdc591cfdfe77a511d440b16cec2673", "committedDate": "2020-10-28T03:10:00Z", "message": "Merge pull request #1875 from apache/jira_961\n\n[IOTDB-961] Remove ActiveTimeSeriesCounter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b308216d079511a52f6ac2eb348067bcdd39afc0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/b308216d079511a52f6ac2eb348067bcdd39afc0", "committedDate": "2020-10-28T13:11:48Z", "message": "merge master branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mjk3ODc2", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-519297876", "createdAt": "2020-10-29T03:02:21Z", "commit": {"oid": "b308216d079511a52f6ac2eb348067bcdd39afc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "947ce37c8eb0165f1ec729a924ee3091db8963e5", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/947ce37c8eb0165f1ec729a924ee3091db8963e5", "committedDate": "2020-10-31T02:20:23Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b173222c54be1ac9d0ca0045dd097607ce80a73", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8b173222c54be1ac9d0ca0045dd097607ce80a73", "committedDate": "2020-10-31T03:47:32Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/da98fb206b66e25186ac979e209d087cc33de845", "committedDate": "2020-10-31T11:45:55Z", "message": "modify properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjE4MDEx", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521218011", "createdAt": "2020-11-01T12:05:02Z", "commit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMjowNTowMlrOHrujiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNTozNDoyM1rOHrv72g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzU3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            write_read_mtree_free_memory_proportion=4:3:1:2\n          \n          \n            \n            write_read_schema_free_memory_proportion=4:3:1:2", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515613579", "createdAt": "2020-11-01T12:05:02Z", "author": {"login": "qiaojialin"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -218,24 +218,28 @@ mtree_snapshot_threshold_time=3600\n ### Memory Control Configuration\n ####################\n \n-# This adapter could adjust the system memory to avoid OOM.\n-# It will refuse to create time series or add storage groups under high system load.\n-#\n-# Attention!!!\n-# If disable this parameter, you need to set some parameters according to your system load:\n-# Normal scenario: 1-50 storage groups. <100k devices, <10M time series\n-# memtable_size_threshold = tsfile_size_threshold = IoTDB memory allocation in byte / 2 / num of storage group / 4\n-# Make sure the total num of time series in system * primitive_array_size * 16 <= IoTDB memory allocation in byte / 2 / 4\n-# you could reduce the primitive_array_size in very high workload.\n-enable_parameter_adapter=true\n-\n-# Memory Allocation Ratio: Write, Read, and Free Memory.\n-# The parameter form is a:b:c, where a, b and c are integers. for example: 1:1:1 , 6:3:1\n-write_read_free_memory_proportion=6:3:1\n+# Whether to enable memory control\n+enable_mem_control=true\n+\n+# Memory Allocation Ratio: Write, Read, MTree and Free Memory.\n+# The parameter form is a:b:c:d, where a, b, c and d are integers. for example: 1:1:1:1 , 6:2:1:1\n+write_read_mtree_free_memory_proportion=4:3:1:2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzc1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private double flushProportion = 0.5;\n          \n          \n            \n              private double flushProportion = 0.3;", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515613752", "createdAt": "2020-11-01T12:06:52Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -138,9 +142,24 @@\n   private volatile int maxQueryDeduplicatedPathNum = 1000;\n \n   /**\n-   * Is dynamic parameter adapter enable.\n+   * Ratio of memory allocated for buffered arrays\n+   */\n+  private double bufferedArraysMemoryProportion = 0.6;\n+\n+  /**\n+   * Flush proportion for system\n    */\n-  private boolean enableParameterAdapter = true;\n+  private double flushProportion = 0.5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMDgwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected boolean enableMemControl = false;\n          \n          \n            \n              protected boolean enableMemControl = true;", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515630802", "createdAt": "2020-11-01T14:45:24Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -56,6 +56,13 @@\n \n   private long memSize = 0;\n \n+  protected boolean enableMemControl = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMTk3Mg==", "bodyText": "for a FloatStatistics, there exist 5 float fields", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515631972", "createdAt": "2020-11-01T14:56:51Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -259,6 +259,11 @@ public long calculateRamSize() {\n         .calculateRamSize();\n   }\n \n+  public static long calculateRamSize(String measurementId, TSDataType dataType) {\n+    return CHUNK_METADATA_FIXED_RAM_SIZE + RamUsageEstimator.sizeOf(measurementId) + Statistics\n+        .getStatsByType(dataType).calculateRamSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjE2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Log cannot fit into buffer, please increase wal_buffer_size or please increase the JVM memory\", e);\n          \n          \n            \n                      \"Log cannot fit into the buffer, please increase wal_buffer_size\", e);", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632167", "createdAt": "2020-11-01T14:58:54Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/writelog/node/ExclusiveWriteLogNode.java", "diffHunk": "@@ -89,8 +89,7 @@ public void write(PhysicalPlan plan) throws IOException {\n       }\n     } catch (BufferOverflowException e) {\n       throw new IOException(\n-          \"Log cannot fit into buffer, if you don't enable Dynamic Parameter Adapter, please increase wal_buffer_size;\"\n-              + \"otherwise, please increase the JVM memory\", e);\n+          \"Log cannot fit into buffer, please increase wal_buffer_size or please increase the JVM memory\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjI2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PrimitiveArrayManager.ARRAY_SIZE * TSDataType.INT64.getDataTypeSize();\n          \n          \n            \n                    PrimitiveArrayManager.ARRAY_SIZE * 8;", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632269", "createdAt": "2020-11-01T14:59:42Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -494,6 +477,17 @@ public IPointReader getIterator(int floatPrecision, TSEncoding encoding) {\n     return new Ite(floatPrecision, encoding);\n   }\n \n+  public static long tvListArrayMemSize(TSDataType type) {\n+    long size = 0;\n+    // time size\n+    size +=\n+        PrimitiveArrayManager.ARRAY_SIZE * TSDataType.INT64.getDataTypeSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjUxOA==", "bodyText": "Is this right?  If the ARRAY_SIZE is 128, and current TVList size is 129 (contains two array), then even add one data point, this returns false", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632518", "createdAt": "2020-11-01T15:01:54Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -275,11 +249,18 @@ protected void clearSortedTime() {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add(\n-          (long[]) PrimitiveArrayPool.getInstance().getPrimitiveDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n     }\n   }\n \n+  protected Object getDataListByType(TSDataType dataType) {\n+    return PrimitiveArrayManager.getDataListByType(dataType);\n+  }\n+\n+  public boolean checkIfDataListIsEnough(int lengthToBeAdded) {\n+    return size + lengthToBeAdded < ARRAY_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjY3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected Object getDataListByType(TSDataType dataType) {\n          \n          \n            \n              protected Object getPrimitiveArraysByType(TSDataType dataType) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632672", "createdAt": "2020-11-01T15:03:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -275,11 +249,18 @@ protected void clearSortedTime() {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add(\n-          (long[]) PrimitiveArrayPool.getInstance().getPrimitiveDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n     }\n   }\n \n+  protected Object getDataListByType(TSDataType dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjY5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return PrimitiveArrayManager.getDataListByType(dataType);\n          \n          \n            \n                return PrimitiveArrayManager.getPrimitiveArraysByType(dataType);", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632699", "createdAt": "2020-11-01T15:03:52Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -275,11 +249,18 @@ protected void clearSortedTime() {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add(\n-          (long[]) PrimitiveArrayPool.getInstance().getPrimitiveDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n     }\n   }\n \n+  protected Object getDataListByType(TSDataType dataType) {\n+    return PrimitiveArrayManager.getDataListByType(dataType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMzc3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Object getDataList(TSDataType dataType) {\n          \n          \n            \n              private static Object createPrimitiveArray(TSDataType dataType) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515633772", "createdAt": "2020-11-01T15:12:37Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicInteger bufferedArraysSize = new AtomicInteger();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicInteger outOfBufferArraysSize = new AtomicInteger();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getDataListByType(TSDataType dataType) {\n+    // check buffered array num (to avoid entering synchronized block every time)\n+    if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return getDataList(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // return a buffered array\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+    }\n+\n+    // if no buffered array is returned, return an out of buffer array\n+    outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+    return getDataList(dataType);\n+  }\n+\n+  private static Object getDataList(TSDataType dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMzgwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static synchronized Object getDataListsByType(TSDataType dataType, int size) {\n          \n          \n            \n              public static synchronized Object generateDataListsByType(TSDataType dataType, int size) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515633806", "createdAt": "2020-11-01T15:12:55Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicInteger bufferedArraysSize = new AtomicInteger();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicInteger outOfBufferArraysSize = new AtomicInteger();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getDataListByType(TSDataType dataType) {\n+    // check buffered array num (to avoid entering synchronized block every time)\n+    if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return getDataList(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // return a buffered array\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+    }\n+\n+    // if no buffered array is returned, return an out of buffer array\n+    outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+    return getDataList(dataType);\n+  }\n+\n+  private static Object getDataList(TSDataType dataType) {\n+    Object dataArray;\n+    switch (dataType) {\n+      case BOOLEAN:\n+        dataArray = new boolean[ARRAY_SIZE];\n+        break;\n+      case INT32:\n+        dataArray = new int[ARRAY_SIZE];\n+        break;\n+      case INT64:\n+        dataArray = new long[ARRAY_SIZE];\n+        break;\n+      case FLOAT:\n+        dataArray = new float[ARRAY_SIZE];\n+        break;\n+      case DOUBLE:\n+        dataArray = new double[ARRAY_SIZE];\n+        break;\n+      case TEXT:\n+        dataArray = new Binary[ARRAY_SIZE];\n+        break;\n+      default:\n+        throw new UnSupportedDataTypeException(dataType.toString());\n+    }\n+\n+    return dataArray;\n+  }\n+\n+  /**\n+   * Get primitive data lists according to data type and size\n+   *\n+   * @param dataType data type\n+   * @param size     needed capacity\n+   * @return an array of primitive data arrays\n+   */\n+  public static synchronized Object getDataListsByType(TSDataType dataType, int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNDcwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void resetUnsealedResourceMemCost(long cost) {\n          \n          \n            \n              public void releaseUnsealedResourceMemCost(long cost) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515634705", "createdAt": "2020-11-01T15:21:03Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    unsealedResourceMemCost = new AtomicLong();\n+    memTableCost = new AtomicLong();\n+    chunkMetadataMemCost = new AtomicLong();\n+    walMemCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n+    if (reportedTsps.add(tsFileProcessor)) {\n+      walMemCost.getAndAdd(IoTDBDescriptor.getInstance().getConfig().getWalBufferSize());\n+    }\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost.getAndAdd(cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetUnsealedResourceMemCost(long cost) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNDc3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void resetChunkMetadataMemCost(long cost) {\n          \n          \n            \n              public void releaseChunkMetadataMemCost(long cost) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515634779", "createdAt": "2020-11-01T15:21:44Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    unsealedResourceMemCost = new AtomicLong();\n+    memTableCost = new AtomicLong();\n+    chunkMetadataMemCost = new AtomicLong();\n+    walMemCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n+    if (reportedTsps.add(tsFileProcessor)) {\n+      walMemCost.getAndAdd(IoTDBDescriptor.getInstance().getConfig().getWalBufferSize());\n+    }\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost.getAndAdd(cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(-cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetChunkMetadataMemCost(long cost) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTA3MA==", "bodyText": "why only this cost impact the lastReportedSize?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635070", "createdAt": "2020-11-01T15:24:13Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    unsealedResourceMemCost = new AtomicLong();\n+    memTableCost = new AtomicLong();\n+    chunkMetadataMemCost = new AtomicLong();\n+    walMemCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n+    if (reportedTsps.add(tsFileProcessor)) {\n+      walMemCost.getAndAdd(IoTDBDescriptor.getInstance().getConfig().getWalBufferSize());\n+    }\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost.getAndAdd(cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(-cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(-cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when a memTable flushed\n+   */\n+  public void resetMemTableCost(long cost) {\n+    memTableCost.getAndAdd(-cost);\n+    lastReportedSize -= cost;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTE1Mw==", "bodyText": "do we need four AtomicLongs?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635153", "createdAt": "2020-11-01T15:24:54Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTUxOQ==", "bodyText": "add a parameter in config file?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635519", "createdAt": "2020-11-01T15:28:30Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -121,15 +120,37 @@\n   private RandomDeleteCache<PartialPath, MNode> mNodeCache;\n   // tag key -> tag value -> LeafMNode\n   private Map<String, Map<String, Set<MeasurementMNode>>> tagIndex = new HashMap<>();\n-  // storage group name -> the series number\n-  private Map<String, Integer> seriesNumberInStorageGroups = new HashMap<>();\n-  private long maxSeriesNumberAmongStorageGroup;\n+\n+  // data type -> number\n+  private Map<TSDataType, Integer> schemaDataTypeNumMap = new ConcurrentHashMap<>();\n+  // reported total series number\n+  private long reportedDataTypeTotalNum;\n+  private long totalSeriesNumber = 0L;\n   private boolean initialized;\n+  protected static IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n   private File logFile;\n   private ScheduledExecutorService timedCreateMTreeSnapshotThread;\n \n+  /**\n+   * threshold total size of MTree\n+   */\n+  private static final long MTREE_SIZE_THRESHOLD = config.getAllocateMemoryForMTree();\n+\n+  private boolean allowToCreateNewSeries = true;\n+\n+  private static final int ESTIMATED_SERIES_SIZE = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTc1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      + \"please increase memory\");\n          \n          \n            \n                      + \"please increase MAX_HEAP_SIZE in iotdb-env.sh/bat and restart\");", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635755", "createdAt": "2020-11-01T15:30:17Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -359,6 +377,10 @@ public void createTimeseries(CreateTimeSeriesPlan plan) throws MetadataException\n \n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n   public void createTimeseries(CreateTimeSeriesPlan plan, long offset) throws MetadataException {\n+    if (!allowToCreateNewSeries) {\n+      throw new MetadataException(\"IoTDB system load is too large to create timeseries, \"\n+          + \"please increase memory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNjE4Ng==", "bodyText": "use sg name?  will the StorageGroupInfo be changed?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515636186", "createdAt": "2020-11-01T15:34:23Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da98fb206b66e25186ac979e209d087cc33de845"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51560bce11bb3b4332a043fa718069341f96828e", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/51560bce11bb3b4332a043fa718069341f96828e", "committedDate": "2020-11-02T03:06:26Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed120588ac1bcf27f2b4f467d3814b4a3462db3", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6ed120588ac1bcf27f2b4f467d3814b4a3462db3", "committedDate": "2020-11-02T03:07:44Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9668b6200cf53d85d0664387629bb6fc13f15bce", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/9668b6200cf53d85d0664387629bb6fc13f15bce", "committedDate": "2020-11-02T03:47:39Z", "message": "fix statistic size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d85a0eee2db3d1440dffd94829557f6c573264f4", "committedDate": "2020-11-02T03:57:58Z", "message": "fix a issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzQ4MDgw", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521348080", "createdAt": "2020-11-02T05:59:51Z", "commit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTo1OTo1MVrOHr3Iuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTo1OTo1MVrOHr3Iuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDE3MQ==", "bodyText": "memoryCost", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515754171", "createdAt": "2020-11-02T05:59:51Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total Storage group memory cost\n+   */\n+  private AtomicLong memTableCost;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzQ5Mzc4", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521349378", "createdAt": "2020-11-02T06:04:13Z", "commit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjowNDoxM1rOHr3M5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjowNDoxM1rOHr3M5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTIzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n          \n          \n            \n              public void initTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515755238", "createdAt": "2020-11-02T06:04:13Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total Storage group memory cost\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    memTableCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4ee75bdf07099ad7e7ae4bfad96e44adb6102bc", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/f4ee75bdf07099ad7e7ae4bfad96e44adb6102bc", "committedDate": "2020-11-02T06:07:33Z", "message": "fix bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzUxNzYy", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-521351762", "createdAt": "2020-11-02T06:11:39Z", "commit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjoxMTozOVrOHr3Uuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjoyMTo0NFrOHr3fZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NzI0Mw==", "bodyText": "add  comment for this parameter", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515757243", "createdAt": "2020-11-02T06:11:39Z", "author": {"login": "jixuan1989"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -179,7 +179,7 @@ tsfile_size_threshold=536870912\n # When a memTable's size (in byte) exceeds this, the memtable is flushed to disk. The default threshold is 1 GB.\n memtable_size_threshold=1073741824\n \n-avg_series_point_number_threshold=100000\n+avg_series_point_number_threshold=10000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1Nzc3NA==", "bodyText": "0.8 of total memory? or write_memory?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515757774", "createdAt": "2020-11-02T06:13:40Z", "author": {"login": "jixuan1989"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -218,28 +218,35 @@ mtree_snapshot_threshold_time=3600\n ### Memory Control Configuration\n ####################\n \n-# This adapter could adjust the system memory to avoid OOM.\n-# It will refuse to create time series or add storage groups under high system load.\n-#\n-# Attention!!!\n-# If disable this parameter, you need to set some parameters according to your system load:\n-# Normal scenario: 1-50 storage groups. <100k devices, <10M time series\n-# memtable_size_threshold = tsfile_size_threshold = IoTDB memory allocation in byte / 2 / num of storage group / 4\n-# Make sure the total num of time series in system * primitive_array_size * 16 <= IoTDB memory allocation in byte / 2 / 4\n-# you could reduce the primitive_array_size in very high workload.\n-enable_parameter_adapter=true\n-\n-# Memory Allocation Ratio: Write, Read, and Free Memory.\n-# The parameter form is a:b:c, where a, b and c are integers. for example: 1:1:1 , 6:3:1\n-write_read_free_memory_proportion=6:3:1\n+# Whether to enable memory control\n+enable_mem_control=true\n+\n+# Memory Allocation Ratio: Write, Read, Schema and Free Memory.\n+# The parameter form is a:b:c:d, where a, b, c and d are integers. for example: 1:1:1:1 , 6:2:1:1\n+write_read_schema_free_memory_proportion=4:3:1:2\n \n # primitive array size (length of each array) in array pool\n primitive_array_size=128\n \n+# Ratio of memory allocated for buffered arrays, 0.8 by default\n+buffered_arrays_memory_proportion=0.8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1ODA4OA==", "bodyText": "comment is  not clear.", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515758088", "createdAt": "2020-11-02T06:14:45Z", "author": {"login": "jixuan1989"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -218,28 +218,35 @@ mtree_snapshot_threshold_time=3600\n ### Memory Control Configuration\n ####################\n \n-# This adapter could adjust the system memory to avoid OOM.\n-# It will refuse to create time series or add storage groups under high system load.\n-#\n-# Attention!!!\n-# If disable this parameter, you need to set some parameters according to your system load:\n-# Normal scenario: 1-50 storage groups. <100k devices, <10M time series\n-# memtable_size_threshold = tsfile_size_threshold = IoTDB memory allocation in byte / 2 / num of storage group / 4\n-# Make sure the total num of time series in system * primitive_array_size * 16 <= IoTDB memory allocation in byte / 2 / 4\n-# you could reduce the primitive_array_size in very high workload.\n-enable_parameter_adapter=true\n-\n-# Memory Allocation Ratio: Write, Read, and Free Memory.\n-# The parameter form is a:b:c, where a, b and c are integers. for example: 1:1:1 , 6:3:1\n-write_read_free_memory_proportion=6:3:1\n+# Whether to enable memory control\n+enable_mem_control=true\n+\n+# Memory Allocation Ratio: Write, Read, Schema and Free Memory.\n+# The parameter form is a:b:c:d, where a, b, c and d are integers. for example: 1:1:1:1 , 6:2:1:1\n+write_read_schema_free_memory_proportion=4:3:1:2\n \n # primitive array size (length of each array) in array pool\n primitive_array_size=128\n \n+# Ratio of memory allocated for buffered arrays, 0.8 by default\n+buffered_arrays_memory_proportion=0.8\n+\n+# Flush proportion for system, 0.3 by default\n+flush_proportion=0.3\n+\n+# Reject proportion for system, 0.8 by default\n+reject_proportion=0.8\n+\n+# If storage group increased more than this threshold, report to system. The default value is 16MB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTk3Mw==", "bodyText": "unit", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515759973", "createdAt": "2020-11-02T06:21:44Z", "author": {"login": "jixuan1989"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -218,28 +218,35 @@ mtree_snapshot_threshold_time=3600\n ### Memory Control Configuration\n ####################\n \n-# This adapter could adjust the system memory to avoid OOM.\n-# It will refuse to create time series or add storage groups under high system load.\n-#\n-# Attention!!!\n-# If disable this parameter, you need to set some parameters according to your system load:\n-# Normal scenario: 1-50 storage groups. <100k devices, <10M time series\n-# memtable_size_threshold = tsfile_size_threshold = IoTDB memory allocation in byte / 2 / num of storage group / 4\n-# Make sure the total num of time series in system * primitive_array_size * 16 <= IoTDB memory allocation in byte / 2 / 4\n-# you could reduce the primitive_array_size in very high workload.\n-enable_parameter_adapter=true\n-\n-# Memory Allocation Ratio: Write, Read, and Free Memory.\n-# The parameter form is a:b:c, where a, b and c are integers. for example: 1:1:1 , 6:3:1\n-write_read_free_memory_proportion=6:3:1\n+# Whether to enable memory control\n+enable_mem_control=true\n+\n+# Memory Allocation Ratio: Write, Read, Schema and Free Memory.\n+# The parameter form is a:b:c:d, where a, b, c and d are integers. for example: 1:1:1:1 , 6:2:1:1\n+write_read_schema_free_memory_proportion=4:3:1:2\n \n # primitive array size (length of each array) in array pool\n primitive_array_size=128\n \n+# Ratio of memory allocated for buffered arrays, 0.8 by default\n+buffered_arrays_memory_proportion=0.8\n+\n+# Flush proportion for system, 0.3 by default\n+flush_proportion=0.3\n+\n+# Reject proportion for system, 0.8 by default\n+reject_proportion=0.8\n+\n+# If storage group increased more than this threshold, report to system. The default value is 16MB\n+storage_group_report_threshold=16777216\n+\n # allowed max numbers of deduplicated path in one query\n # it's just an advised value, the real limitation will be the smaller one between this and the one we calculated\n max_deduplicated_path_num=1000\n \n+# estimated metadata size of one timeseries in Mtree\n+estimated_series_size=300", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd31b1aa34532db6a473d1a320b66518ba9feaf", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/afd31b1aa34532db6a473d1a320b66518ba9feaf", "committedDate": "2020-07-20T07:00:43Z", "message": "add TsFileProcessorInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e617dbe024edef275dc93a9b5f96b86ca03f34f0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e617dbe024edef275dc93a9b5f96b86ca03f34f0", "committedDate": "2020-07-22T01:42:27Z", "message": "logic of checking array size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf3cac4b18a11fd1f9c8b8c4910f3f72b260717", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/cdf3cac4b18a11fd1f9c8b8c4910f3f72b260717", "committedDate": "2020-07-22T03:22:38Z", "message": "logic of writing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93cadccb864ba374d248a4d8692a54899e1a3a77", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/93cadccb864ba374d248a4d8692a54899e1a3a77", "committedDate": "2020-07-22T07:45:56Z", "message": "estimate chunkMetadata Mem cost"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "182b230872d6ca62ba7f46048610948219762ee7", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/182b230872d6ca62ba7f46048610948219762ee7", "committedDate": "2020-07-22T09:14:13Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db167a8c8d500b78369b8a269966496125d9867", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/0db167a8c8d500b78369b8a269966496125d9867", "committedDate": "2020-07-22T09:17:06Z", "message": "Add interface for System module and ArrayManager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMjcxMjcy", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-453271272", "createdAt": "2020-07-22T12:33:24Z", "commit": {"oid": "0db167a8c8d500b78369b8a269966496125d9867"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjozMzoyNFrOG1gTiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjozMzoyNFrOG1gTiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1NzAwMA==", "bodyText": "Hi, according to previous design, checkBufferedArray is to be done by ArrayManager module.\nWhen TSP is asking for one array, it could call ArrayManager.getDataListByType (and it is the only interface for asking array). This method will check whether there are enough buffered arrays and return one if true; or apply an out of buffer array and return one if system module agrees; or return null if system module refuses to offer one.\nIn this way, TSP does not need to know whether the array is buffered or out of buffer. The management of arrays is responsibility of ArrayManager. What do you think?", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r458757000", "createdAt": "2020-07-22T12:33:24Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -241,34 +272,91 @@ public void insertTablet(InsertTabletPlan insertTabletPlan, int start, int end,\n       workMemTable = MemTablePool.getInstance().getAvailableMemTable(this);\n     }\n \n-    // insert insertRowPlan to the work memtable\n-    try {\n-      workMemTable.insertTablet(insertTabletPlan, start, end);\n-      if (IoTDBDescriptor.getInstance().getConfig().isEnableWal()) {\n-        insertTabletPlan.setStart(start);\n-        insertTabletPlan.setEnd(end);\n-        getLogNode().write(insertTabletPlan);\n+    if (workMemTable.checkIfArrayIsEnough(insertTabletPlan)) {\n+      // insert insertRowPlan to the work memtable\n+      try {\n+        workMemTable.insertTablet(insertTabletPlan, start, end);\n+        if (IoTDBDescriptor.getInstance().getConfig().isEnableWal()) {\n+          insertTabletPlan.setStart(start);\n+          insertTabletPlan.setEnd(end);\n+          getLogNode().write(insertTabletPlan);\n+        }\n+      } catch (Exception e) {\n+        for (int i = start; i < end; i++) {\n+          results[i] = RpcUtils.getStatus(TSStatusCode.INTERNAL_SERVER_ERROR, e.getMessage());\n+        }\n+        throw new WriteProcessException(e);\n       }\n-    } catch (Exception e) {\n+  \n       for (int i = start; i < end; i++) {\n-        results[i] = RpcUtils.getStatus(TSStatusCode.INTERNAL_SERVER_ERROR, e.getMessage());\n+        results[i] = RpcUtils.SUCCESS_STATUS;\n+      }\n+  \n+      tsFileResource\n+          .updateStartTime(insertTabletPlan.getDeviceId(), insertTabletPlan.getTimes()[start]);\n+  \n+      //for sequence tsfile, we update the endTime only when the file is prepared to be closed.\n+      //for unsequence tsfile, we have to update the endTime for each insertion.\n+      if (!sequence) {\n+        tsFileResource\n+            .updateEndTime(\n+                insertTabletPlan.getDeviceId(), insertTabletPlan.getTimes()[end - 1]);\n       }\n-      throw new WriteProcessException(e);\n     }\n-\n-    for (int i = start; i < end; i++) {\n-      results[i] = RpcUtils.SUCCESS_STATUS;\n+    else {\n+      // if there are available buffered arrays in array pool\n+      boolean isbufferedArrayEnough = true;\n+      // TODO: isbufferedArrayEnough = checkBufferedArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db167a8c8d500b78369b8a269966496125d9867"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc3c03e738255279f589132cb068dc3264e890e", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/1fc3c03e738255279f589132cb068dc3264e890e", "committedDate": "2020-07-23T03:04:29Z", "message": "Update ArrayManager and delete useless codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e25971c3f265573b9942b164c3c3b9af480fc15", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6e25971c3f265573b9942b164c3c3b9af480fc15", "committedDate": "2020-07-23T06:47:17Z", "message": "update insertion logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad8f05a3d9dd12dd5b112ac4b48afdc417fb8ddb", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ad8f05a3d9dd12dd5b112ac4b48afdc417fb8ddb", "committedDate": "2020-07-23T09:20:52Z", "message": "add some tspInfo init values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "725b0237b01d00953ebdb68a866840e3f09f9fd9", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/725b0237b01d00953ebdb68a866840e3f09f9fd9", "committedDate": "2020-07-23T12:12:38Z", "message": "Add MManager.collectSchemaDataTypeNum and related tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a172691fc20905f3cd16c2b8e6b5c12ec63d7b5b", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/a172691fc20905f3cd16c2b8e6b5c12ec63d7b5b", "committedDate": "2020-07-23T15:27:22Z", "message": "Merge remote-tracking branch 'origin/master' into mem_control\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/metadata/MManager.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb4384efc8020ffbde7c9a62767c769c86e4444b", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/bb4384efc8020ffbde7c9a62767c769c86e4444b", "committedDate": "2020-07-23T15:28:35Z", "message": "Merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f3277861f49ced0d7aa69487ede0c9afb18691", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/09f3277861f49ced0d7aa69487ede0c9afb18691", "committedDate": "2020-07-24T06:57:21Z", "message": "add some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b0a51ce6f6526efc44a97c568f4b4ab937665b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c1b0a51ce6f6526efc44a97c568f4b4ab937665b", "committedDate": "2020-07-24T07:33:15Z", "message": "recover tspInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "953f96b4ff46a94de1230d27ef35a33fe0406dab", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/953f96b4ff46a94de1230d27ef35a33fe0406dab", "committedDate": "2020-07-24T07:39:02Z", "message": "init tspinfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a807156e5a0f54a34bba5dd2317ba22ac830bf49", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/a807156e5a0f54a34bba5dd2317ba22ac830bf49", "committedDate": "2020-07-24T08:28:32Z", "message": "Add timedCollectSchemaDataTypeNumThread for collect data type num"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c79a4f405ec3cb8cd6ca9ffca6966139590a7fa", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/7c79a4f405ec3cb8cd6ca9ffca6966139590a7fa", "committedDate": "2020-07-24T08:33:44Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b38777615ec729c7bf28ee9d00ecb07f48e4557", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/0b38777615ec729c7bf28ee9d00ecb07f48e4557", "committedDate": "2020-07-24T08:49:46Z", "message": "fix reportTsFileProcessorStatus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5111811f1b1a34ff480b78a7538df73d1fe3d25e", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/5111811f1b1a34ff480b78a7538df73d1fe3d25e", "committedDate": "2020-07-24T08:56:41Z", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c566001db3f6a9a0d7b9141943cacbe4a61d1fde", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c566001db3f6a9a0d7b9141943cacbe4a61d1fde", "committedDate": "2020-07-24T09:11:05Z", "message": "fix reportTsFileProcessorStatus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160b9a532e51f68385e2913123fde156d47fa6f0", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/160b9a532e51f68385e2913123fde156d47fa6f0", "committedDate": "2020-07-24T10:54:08Z", "message": "SystemInfo 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e027ec4445433033e89c783096480ff836d8e6a", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/9e027ec4445433033e89c783096480ff836d8e6a", "committedDate": "2020-07-24T11:01:47Z", "message": "SystemInfo 1 (#1559)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "071a314d8b875db3d147a5b11d87890efa72d5b6", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/071a314d8b875db3d147a5b11d87890efa72d5b6", "committedDate": "2020-07-24T11:03:52Z", "message": "Fix sonar bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e544a45200ffdda6aa47dcfc657bf9a6055cb45", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/1e544a45200ffdda6aa47dcfc657bf9a6055cb45", "committedDate": "2020-07-24T11:04:06Z", "message": "Merge remote-tracking branch 'origin/mem_control' into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6cfad9e87d27da063f0264a86985d7d11e8b24", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/fa6cfad9e87d27da063f0264a86985d7d11e8b24", "committedDate": "2020-07-24T13:36:07Z", "message": "Add SystemInfo.reportCreateArray interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d982b3eb7325006aaadcc052c77a3132322922", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/61d982b3eb7325006aaadcc052c77a3132322922", "committedDate": "2020-07-25T03:16:53Z", "message": "systeminfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a71b9c8b75a0aabd344ab9aa86a1f53148917b", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/f1a71b9c8b75a0aabd344ab9aa86a1f53148917b", "committedDate": "2020-07-26T04:33:32Z", "message": "Add waitAndGetDataListByType for getting data lists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b68dacdf246f2ab4f7d2077dc9c34b180b24b78", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/4b68dacdf246f2ab4f7d2077dc9c34b180b24b78", "committedDate": "2020-07-26T09:32:44Z", "message": "Add replacement strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6684391c76fa040b9b24ae7b781d3ac56c18df75", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6684391c76fa040b9b24ae7b781d3ac56c18df75", "committedDate": "2020-07-27T02:39:38Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2586b4883a92a8d62241b595a6f4b1c1f5b22d4b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/2586b4883a92a8d62241b595a6f4b1c1f5b22d4b", "committedDate": "2020-07-27T03:28:39Z", "message": "add UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0bb3c561d54712efb9da6859fa5652481efe0de", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/b0bb3c561d54712efb9da6859fa5652481efe0de", "committedDate": "2020-07-27T07:13:16Z", "message": "fix conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66559533c10e634b3202b8b3fe4f6a8a365fa4f6", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/66559533c10e634b3202b8b3fe4f6a8a365fa4f6", "committedDate": "2020-07-27T07:52:29Z", "message": "buffered array threshold"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9176c51d3cc88e5c3b21297765abbbe6272abafc", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/9176c51d3cc88e5c3b21297765abbbe6272abafc", "committedDate": "2020-07-28T02:15:39Z", "message": "reset mem cost after flushing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ef787ea09ed8f3b8c49acf6e12cb42b1e76669", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/89ef787ea09ed8f3b8c49acf6e12cb42b1e76669", "committedDate": "2020-07-28T02:32:54Z", "message": "calculate unsealedResource cost"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf5d23050d22d39d4655c73f1be1e4209fd65f0d", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/cf5d23050d22d39d4655c73f1be1e4209fd65f0d", "committedDate": "2020-07-28T08:04:33Z", "message": "complete system info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "337e3d610b30aaf7ea612447b7e76630829312a4", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/337e3d610b30aaf7ea612447b7e76630829312a4", "committedDate": "2020-07-28T08:05:37Z", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "660c1076c5a7c0885890b5e64fb51179ac2f6698", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/660c1076c5a7c0885890b5e64fb51179ac2f6698", "committedDate": "2020-07-28T09:22:36Z", "message": "full complete system info part"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e813918b2456d34d5696257abdafb7d6c97a46", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/52e813918b2456d34d5696257abdafb7d6c97a46", "committedDate": "2020-07-28T09:25:37Z", "message": "System info part of Mem control (#1573)\n\n* SystemInfo 1\r\n\r\n* systeminfo\r\n\r\n* buffered array threshold\r\n\r\n* complete system info\r\n\r\n* full complete system info part"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a26fbac9f04bdfbc7bf7b76f2798c62755197b7a", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/a26fbac9f04bdfbc7bf7b76f2798c62755197b7a", "committedDate": "2020-07-29T02:55:38Z", "message": "Fix / by zero"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "045b8027e1367ebde0a19cd5cf039fdcba6a2ab2", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/045b8027e1367ebde0a19cd5cf039fdcba6a2ab2", "committedDate": "2020-07-29T03:13:02Z", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4797f3e23a4ddf65dc96eac0f9d772386528d131", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/4797f3e23a4ddf65dc96eac0f9d772386528d131", "committedDate": "2020-07-29T03:20:07Z", "message": "skip fail measurements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d87227c94e1eb2ae81c61caa6263a8e3fa64a5", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d9d87227c94e1eb2ae81c61caa6263a8e3fa64a5", "committedDate": "2020-07-29T03:21:10Z", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcf5797208f37a7d866ac68285132100d0a14f37", "author": {"user": {"login": "Alima777", "name": "Xiangwei Wei"}}, "url": "https://github.com/apache/iotdb/commit/bcf5797208f37a7d866ac68285132100d0a14f37", "committedDate": "2020-07-29T03:37:53Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e1625f60a01f4ca78f5f76757030aa377bc44f", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/73e1625f60a01f4ca78f5f76757030aa377bc44f", "committedDate": "2020-07-29T03:40:52Z", "message": "Merge pull request #1581 from Alima777/mem_control\n\nAdd comments - System part of Mem control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e8c1aaeeefa6c46c921ff36939f53813090fb14", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7e8c1aaeeefa6c46c921ff36939f53813090fb14", "committedDate": "2020-07-29T05:30:03Z", "message": "try to fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16adef6749ac213d5be1156061294953e520d8bd", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/16adef6749ac213d5be1156061294953e520d8bd", "committedDate": "2020-07-29T05:30:27Z", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74fa80c4f569f962859e29119934c3dc1b164b07", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/74fa80c4f569f962859e29119934c3dc1b164b07", "committedDate": "2020-07-29T06:08:12Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac6ca0ae185c46be77ffe9f7d232257516891c30", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/ac6ca0ae185c46be77ffe9f7d232257516891c30", "committedDate": "2020-07-29T06:41:26Z", "message": "Fix PrimitiveMemTableTest and IoTDBCompleteIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a3f0ff85f1c81c97fbb6aa8cd395c1b18cb2fa9", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/0a3f0ff85f1c81c97fbb6aa8cd395c1b18cb2fa9", "committedDate": "2020-07-29T07:04:52Z", "message": "Fix IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be5abad616a98e4af1c130878ba46738e9a25959", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/be5abad616a98e4af1c130878ba46738e9a25959", "committedDate": "2020-07-30T02:06:08Z", "message": "remove MemTablePool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4699d17f3b0607e8b00d84335da671d4574ea840", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/4699d17f3b0607e8b00d84335da671d4574ea840", "committedDate": "2020-07-30T02:43:24Z", "message": "Add config and fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6917dbd0bcdade66d4584a3dc86dcda5907edaad", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/6917dbd0bcdade66d4584a3dc86dcda5907edaad", "committedDate": "2020-07-30T02:53:15Z", "message": "Add config report_buffered_arrays_threshold"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0773c1eb0ee36a8564eb3da33e0b060c66e1895", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/c0773c1eb0ee36a8564eb3da33e0b060c66e1895", "committedDate": "2020-07-30T04:12:39Z", "message": "Fix test in spark connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d789c41764b78fc7c2989945d03a9900601da4d", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/9d789c41764b78fc7c2989945d03a9900601da4d", "committedDate": "2020-07-30T11:58:40Z", "message": "Move updateSchemaDataTypeNumMap to MManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4971ec959459ab4fa68df5f31b1518802f4b7e9", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/a4971ec959459ab4fa68df5f31b1518802f4b7e9", "committedDate": "2020-07-30T12:57:28Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b44a70b3cf9820076c92d7be51ca0c656ab443", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e6b44a70b3cf9820076c92d7be51ca0c656ab443", "committedDate": "2020-07-31T08:25:53Z", "message": "update report logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb49f86215e203ef11e4cb05378a6753bffed18", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/deb49f86215e203ef11e4cb05378a6753bffed18", "committedDate": "2020-07-31T08:32:59Z", "message": "merge branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f28c2466762303d91fe15e2b442977a3dee99d", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/71f28c2466762303d91fe15e2b442977a3dee99d", "committedDate": "2020-07-31T08:33:14Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0640f3aeb61500af4dec62a8f38c4505e9a19efe", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/0640f3aeb61500af4dec62a8f38c4505e9a19efe", "committedDate": "2020-07-31T08:41:39Z", "message": "add flush config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9505b5935b23ff01c2e609f8758ac2e13b9a8be", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/f9505b5935b23ff01c2e609f8758ac2e13b9a8be", "committedDate": "2020-07-31T09:45:51Z", "message": "fix resource ram size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dffb5277988bc0895c838d81b299b500afdfe872", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/dffb5277988bc0895c838d81b299b500afdfe872", "committedDate": "2020-08-01T11:38:31Z", "message": "fix update report threshold"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTg0NjAw", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-459584600", "createdAt": "2020-08-01T15:18:27Z", "commit": {"oid": "dffb5277988bc0895c838d81b299b500afdfe872"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNToxODoyOFrOG6ekmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNToxODoyOFrOG6ekmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            reject_proportion=0.5\n          \n          \n            \n            flush_proportion=0.5", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r463971482", "createdAt": "2020-08-01T15:18:28Z", "author": {"login": "samperson1997"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -235,6 +235,9 @@ primitive_array_size=128\n # Ratio of memory allocated for buffered arrays, 0.8 by default\n buffered_arrays_memory_proportion=0.8\n \n+# Flush proportion for system, 0.5 by default\n+reject_proportion=0.5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb5277988bc0895c838d81b299b500afdfe872"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeab1ed4b80cc692d40ed6c459ad60b50f48c5bc", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/eeab1ed4b80cc692d40ed6c459ad60b50f48c5bc", "committedDate": "2020-08-02T05:05:50Z", "message": "Update server/src/assembly/resources/conf/iotdb-engine.properties\n\nCo-authored-by: Zesong Sun <szs19@mails.tsinghua.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb900b76aaf0202356c7d9317adbaf51fb6b9408", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/fb900b76aaf0202356c7d9317adbaf51fb6b9408", "committedDate": "2020-08-04T13:10:21Z", "message": "try to debug and fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "297b02845c69400f07a53778bdd1a8384f8422c0", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/297b02845c69400f07a53778bdd1a8384f8422c0", "committedDate": "2020-08-05T01:36:29Z", "message": "try to fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac091f54faf2832ad2398afdbba59b14bed804d8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ac091f54faf2832ad2398afdbba59b14bed804d8", "committedDate": "2020-08-05T03:04:32Z", "message": "try to fix CI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf4a748c79adc44e120a970f83013c3b43d8b39e", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/bf4a748c79adc44e120a970f83013c3b43d8b39e", "committedDate": "2020-08-05T03:59:43Z", "message": "try to fix CI"}, "afterCommit": {"oid": "ac091f54faf2832ad2398afdbba59b14bed804d8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ac091f54faf2832ad2398afdbba59b14bed804d8", "committedDate": "2020-08-05T03:04:32Z", "message": "try to fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ff355ca8993e14d3ea294498e66ce23aebe3f2", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e1ff355ca8993e14d3ea294498e66ce23aebe3f2", "committedDate": "2020-08-05T06:29:00Z", "message": "try to fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea02f88f050a69762616fa9e551fc86b7ecf9165", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ea02f88f050a69762616fa9e551fc86b7ecf9165", "committedDate": "2020-08-05T08:52:53Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0889194dcc3fbde6c0436ecfa6a95edeb1a11e46", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/0889194dcc3fbde6c0436ecfa6a95edeb1a11e46", "committedDate": "2020-08-05T09:25:51Z", "message": "try to fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bafd6a6f1602177d5aeef7bcefede19b60eb3beb", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/bafd6a6f1602177d5aeef7bcefede19b60eb3beb", "committedDate": "2020-08-05T14:38:23Z", "message": "try to fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ed7072faf9e37886ac7b9059f4a7bcfd71c10b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/39ed7072faf9e37886ac7b9059f4a7bcfd71c10b", "committedDate": "2020-08-10T09:20:24Z", "message": "try to debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b9099a0fce8b7f32e254a11baa24ba66f273e3a", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/8b9099a0fce8b7f32e254a11baa24ba66f273e3a", "committedDate": "2020-08-11T00:58:05Z", "message": "Fix deadlock (system still continues refusing)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab2b94eae7b56401d3c07dbca04206f8bed15e90", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/ab2b94eae7b56401d3c07dbca04206f8bed15e90", "committedDate": "2020-08-11T02:45:06Z", "message": "Set default bufferedArraysMemoryProportion = 0.75 and fix sonar"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NzEyMzQ5", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-464712349", "createdAt": "2020-08-11T02:46:35Z", "commit": {"oid": "ab2b94eae7b56401d3c07dbca04206f8bed15e90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjo0NjozNVrOG-mdPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjo0NjozNVrOG-mdPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NDk3NA==", "bodyText": "I will change this back later...", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r468294974", "createdAt": "2020-08-11T02:46:35Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -271,7 +271,7 @@\n   /**\n    * Is vm merge enable\n    */\n-  private boolean enableVm = true;\n+  private boolean enableVm = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b94eae7b56401d3c07dbca04206f8bed15e90"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3acf2c0c6aa7228a08381083944aa1042646e02a", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/3acf2c0c6aa7228a08381083944aa1042646e02a", "committedDate": "2020-08-11T06:00:42Z", "message": "Remove PrimitiveArrayManager.getInstance()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "267fed8dded189ad3b6f062a7b66fdc999ee6c64", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/267fed8dded189ad3b6f062a7b66fdc999ee6c64", "committedDate": "2020-08-11T06:08:29Z", "message": "Revert enableVm = true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d67d1464ced47751dda7be4093ba289dbd0d19", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/99d67d1464ced47751dda7be4093ba289dbd0d19", "committedDate": "2020-08-11T06:14:48Z", "message": "Fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4abc35b77768dd32e660ca8eed978e7677201ace", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/4abc35b77768dd32e660ca8eed978e7677201ace", "committedDate": "2020-08-11T07:54:51Z", "message": "add a recover system mem cost test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7545e384d2decdae43824ce1f1dd97a5504a3209", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/7545e384d2decdae43824ce1f1dd97a5504a3209", "committedDate": "2020-08-11T09:06:30Z", "message": "Avoid Map<TSDataType, xxx>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f8914870cfc58dd1c1a14e3e298ffabf9d6a4e6", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/7f8914870cfc58dd1c1a14e3e298ffabf9d6a4e6", "committedDate": "2020-08-11T09:44:05Z", "message": "Add LAST for TSDataType"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f8914870cfc58dd1c1a14e3e298ffabf9d6a4e6", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/7f8914870cfc58dd1c1a14e3e298ffabf9d6a4e6", "committedDate": "2020-08-11T09:44:05Z", "message": "Add LAST for TSDataType"}, "afterCommit": {"oid": "4abc35b77768dd32e660ca8eed978e7677201ace", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/4abc35b77768dd32e660ca8eed978e7677201ace", "committedDate": "2020-08-11T07:54:51Z", "message": "add a recover system mem cost test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "634e409d7a2f426616ef66f036967500aad6a1c1", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/634e409d7a2f426616ef66f036967500aad6a1c1", "committedDate": "2020-08-12T04:16:26Z", "message": "Change array pool lock to queue lock of each data type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb7d09cf2a70c282b6013bea6a9be8212acca157", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/fb7d09cf2a70c282b6013bea6a9be8212acca157", "committedDate": "2020-08-12T05:58:32Z", "message": "modify insertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7741710532f24e4a3329f5b430699cc2e2f2fbca", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7741710532f24e4a3329f5b430699cc2e2f2fbca", "committedDate": "2020-08-12T06:07:59Z", "message": "merge branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb0bde3342c71601bf2f18387558c9ac4508d40a", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/cb0bde3342c71601bf2f18387558c9ac4508d40a", "committedDate": "2020-08-12T06:19:34Z", "message": "Revert to EnumMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07b95ae3f1fbb62b6cd12bedd197bfadc78dfdbf", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/07b95ae3f1fbb62b6cd12bedd197bfadc78dfdbf", "committedDate": "2020-08-12T12:09:51Z", "message": "issue fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "330473d48f51bbfc86c54d3e0c1e00ab6e9afe48", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/330473d48f51bbfc86c54d3e0c1e00ab6e9afe48", "committedDate": "2020-08-12T15:57:39Z", "message": "[IOTDB-834] Remove DynamicAdapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6dac5d1145b06698647bae9bd236bd05e1d520c", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/f6dac5d1145b06698647bae9bd236bd05e1d520c", "committedDate": "2020-08-12T16:02:17Z", "message": "Ignore upper/lower case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "644448ad6b317bd67adef59d9388756520796488", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/644448ad6b317bd67adef59d9388756520796488", "committedDate": "2020-08-13T02:24:49Z", "message": "remove writeProcessException from tvlist"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31fc4bbcf3070fc0d970896e41478a99468e4a32", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/31fc4bbcf3070fc0d970896e41478a99468e4a32", "committedDate": "2020-08-13T02:25:26Z", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODc0NDYy", "url": "https://github.com/apache/iotdb/pull/1524#pullrequestreview-466874462", "createdAt": "2020-08-13T15:28:59Z", "commit": {"oid": "31fc4bbcf3070fc0d970896e41478a99468e4a32"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyODo1OVrOHAQ2TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozNjo1NFrOHARKyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODA5Mg==", "bodyText": "This count may be not very accurate. If you want accurate count, consider synchronize. If you need performance and accept inaccurate count, this way is better.", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470038092", "createdAt": "2020-08-13T15:28:59Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -609,6 +609,15 @@ public boolean isFileAlreadyExist(TsFileResource tsFileResource, String storageG\n     return processor != null && processor.isFileAlreadyExist(tsFileResource, partitionNum);\n   }\n \n+  public int countTsFileProcessors() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31fc4bbcf3070fc0d970896e41478a99468e4a32"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzOTIzOQ==", "bodyText": "Need some comment here to show this class's function", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470039239", "createdAt": "2020-08-13T15:30:40Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+public class StorageGroupInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31fc4bbcf3070fc0d970896e41478a99468e4a32"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MTA0Ng==", "bodyText": "Need some comment to show this class's function.", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470041046", "createdAt": "2020-08-13T15:33:25Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+public class TsFileProcessorInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31fc4bbcf3070fc0d970896e41478a99468e4a32"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MzMzOQ==", "bodyText": "Use Integer.compare() rather than a - b;", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470043339", "createdAt": "2020-08-13T15:36:54Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.TreeMap;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgInfoMemCost;\n+  private long arrayPoolMemCost;\n+  private boolean rejected = false;\n+\n+  private TreeMap<StorageGroupInfo, Long> reportedSgMemCostMap = new TreeMap<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31fc4bbcf3070fc0d970896e41478a99468e4a32"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df64eb4ae3e411937f3809708e05c7212c5c64e4", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/df64eb4ae3e411937f3809708e05c7212c5c64e4", "committedDate": "2020-08-14T02:33:19Z", "message": "change the treemap in sgInfo to list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8988c2d46af7452fcd3a118f846b8d98980f0126", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8988c2d46af7452fcd3a118f846b8d98980f0126", "committedDate": "2020-08-14T09:08:05Z", "message": "FIX A LOT OF BUGS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c628a839cdbf92bc1746cf11d1f031bd98c96f2", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6c628a839cdbf92bc1746cf11d1f031bd98c96f2", "committedDate": "2020-08-14T09:53:31Z", "message": "no need to report sgInfo when non-TEXT data flushed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c709e4a5f03df15dd8eeebf5e23c211d81998f6", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/8c709e4a5f03df15dd8eeebf5e23c211d81998f6", "committedDate": "2020-08-17T08:57:20Z", "message": "fix closing tsfile and a bug when flush the second tsfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ecce541b3b9355c9293f30e03d511aa63042a66", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7ecce541b3b9355c9293f30e03d511aa63042a66", "committedDate": "2020-08-17T13:46:05Z", "message": "try to fix OOM when insert text data (still not working...)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1328106261a24a69d35e2e91096322d4c0b30fd9", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/1328106261a24a69d35e2e91096322d4c0b30fd9", "committedDate": "2020-08-18T02:46:53Z", "message": "fix OOM when insert text data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb5f0383befaa3dac5806da1fcedf7745dc07b8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6eb5f0383befaa3dac5806da1fcedf7745dc07b8", "committedDate": "2020-08-18T06:36:43Z", "message": "Merge branch 'mem_control' into remove_dynamic_adapter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3498, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}