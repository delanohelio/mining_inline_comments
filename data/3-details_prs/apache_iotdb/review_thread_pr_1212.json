{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NDMzODY3", "number": 1212, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0NDoxNVrOD82zEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo1MjoyN1rOD82-Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTM4OTYzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/AccountableString.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0NDoxNVrOGWDRow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0NDoxNVrOGWDRow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NTUyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private long RAMSize;\n          \n          \n            \n              private long ramSize;", "url": "https://github.com/apache/iotdb/pull/1212#discussion_r425775523", "createdAt": "2020-05-15T12:44:15Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/AccountableString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.cache;\n+\n+import java.util.Objects;\n+import org.apache.iotdb.tsfile.common.cache.Accountable;\n+\n+public class AccountableString implements Accountable {\n+\n+  private final String string;\n+  private long RAMSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8814f05585bc0d1d934543f7efd44b16ee42026a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTM5ODQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0Njo0NVrOGWDXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0Njo0NVrOGWDXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NjkzMA==", "bodyText": "This may be not enough, it also has a statistics, in which different data type may have different occupation, especially the TEXT type.", "url": "https://github.com/apache/iotdb/pull/1212#discussion_r425776930", "createdAt": "2020-05-15T12:46:45Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java", "diffHunk": "@@ -47,45 +47,55 @@\n   private static final Logger logger = LoggerFactory.getLogger(ChunkMetadataCache.class);\n   private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n   private static final long MEMORY_THRESHOLD_IN_B = config.getAllocateMemoryForChunkMetaDataCache();\n-  private static boolean cacheEnable = config.isMetaDataCacheEnable();\n+  private static final boolean cacheEnable = config.isMetaDataCacheEnable();\n+  private static final long CHUNK_METADATA_FIXED_RAM_SIZE = 160;\n+\n   /**\n    * key: file path dot deviceId dot sensorId.\n    * <p>\n    * value: chunkMetaData list of one timeseries in the file.\n    */\n-  private final LRULinkedHashMap<String, List<ChunkMetadata>> lruCache;\n+  private final LRULinkedHashMap<AccountableString, List<ChunkMetadata>> lruCache;\n \n   private final ReadWriteLock lock = new ReentrantReadWriteLock();\n \n-  private AtomicLong cacheHitNum = new AtomicLong();\n-  private AtomicLong cacheRequestNum = new AtomicLong();\n+  private final AtomicLong cacheHitNum = new AtomicLong();\n+  private final AtomicLong cacheRequestNum = new AtomicLong();\n \n \n   private ChunkMetadataCache(long memoryThreshold) {\n     if (cacheEnable) {\n       logger.info(\"ChunkMetadataCache size = \" + memoryThreshold);\n     }\n-    lruCache = new LRULinkedHashMap<String, List<ChunkMetadata>>(memoryThreshold, true) {\n+    lruCache = new LRULinkedHashMap<AccountableString, List<ChunkMetadata>>(memoryThreshold) {\n       @Override\n-      protected long calEntrySize(String key, List<ChunkMetadata> value) {\n+      protected long calEntrySize(AccountableString key, List<ChunkMetadata> value) {\n         if (value.isEmpty()) {\n-          return key.getBytes().length + averageSize * value.size();\n+          return RamUsageEstimator.sizeOf(key) + RamUsageEstimator.shallowSizeOf(value);\n         }\n+        long entrySize;\n         if (count < 10) {\n-          long currentSize = RamUsageEstimator.shallowSizeOf(value.get(0)) + RamUsageEstimator\n-              .shallowSizeOf(value.get(0).getStatistics());\n+          long currentSize = CHUNK_METADATA_FIXED_RAM_SIZE + RamUsageEstimator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8814f05585bc0d1d934543f7efd44b16ee42026a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTQxMDUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/TimeSeriesMetadataCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo1MDoxMFrOGWDemw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo1MDoxMFrOGWDemw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3ODg0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private long RAMSize;\n          \n          \n            \n                private long ramSize;", "url": "https://github.com/apache/iotdb/pull/1212#discussion_r425778843", "createdAt": "2020-05-15T12:50:10Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/TimeSeriesMetadataCache.java", "diffHunk": "@@ -198,11 +206,14 @@ public void remove(TimeSeriesMetadataCacheKey key) {\n     lock.writeLock().unlock();\n   }\n \n-  public static class TimeSeriesMetadataCacheKey {\n+  public static class TimeSeriesMetadataCacheKey implements Accountable {\n+\n+    private final String filePath;\n+    private final String device;\n+    private final String measurement;\n+\n+    private long RAMSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8814f05585bc0d1d934543f7efd44b16ee42026a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTQxNzc1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/TimeSeriesMetadataCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo1MjoyN1rOGWDjJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo1MjoyN1rOGWDjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4MDAwNQ==", "bodyText": "As we already replace the reader by resource, do we need to copy?\nBut the resource may be also removed from memory, so copy is fine...", "url": "https://github.com/apache/iotdb/pull/1212#discussion_r425780005", "createdAt": "2020-05-15T12:52:27Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/TimeSeriesMetadataCache.java", "diffHunk": "@@ -134,7 +142,7 @@ public TimeseriesMetadata get(TimeSeriesMetadataCacheKey key, Set<String> allSen\n       timeSeriesMetadataList.forEach(timeseriesMetadata ->\n           lruCache.put(new TimeSeriesMetadataCacheKey(key.filePath, key.device,\n               timeseriesMetadata.getMeasurementId()), timeseriesMetadata));\n-      return lruCache.get(key);\n+      return new TimeseriesMetadata(lruCache.get(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8814f05585bc0d1d934543f7efd44b16ee42026a"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4990, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}