{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTY4MDk1", "number": 1400, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMzo1NjowNVrOEJhobg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1MjowMVrOEMX3KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDIzNjYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMzo1NjowNVrOGqD9iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTozOToxOFrOGqoftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1ODI4MQ==", "bodyText": "if (modification instanceof Deletion)", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r446758281", "createdAt": "2020-06-29T03:56:05Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -203,38 +204,38 @@ public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType da\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n     }\n-    long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n+    List<Pair<Long, Long>> deletionList = findUndeletedTime(deviceId, measurement, timeLowerBound);\n     IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n     TVList chunkCopy = memChunk.getTVList().clone();\n \n-    chunkCopy.setTimeOffset(undeletedTime);\n+    chunkCopy.setDeletionList(deletionList);\n     return new ReadOnlyMemChunk(measurement, dataType, encoding, chunkCopy, props, getVersion());\n   }\n \n \n-  private long findUndeletedTime(String deviceId, String measurement, long timeLowerBound) {\n-    long undeletedTime = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> findUndeletedTime(String deviceId, String measurement,\n+      long timeLowerBound) {\n+    List<Pair<Long, Long>> deletionList = new ArrayList<>();\n     for (Modification modification : modifications) {\n-      if (modification instanceof Deletion) {\n-        Deletion deletion = (Deletion) modification;\n-        if (deletion.getDevice().equals(deviceId) && deletion.getMeasurement().equals(measurement)\n-            && deletion.getTimestamp() > undeletedTime) {\n-          undeletedTime = deletion.getTimestamp();\n-        }\n+      Deletion deletion = (Deletion) modification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1Njg1NA==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r447356854", "createdAt": "2020-06-30T01:39:18Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -203,38 +204,38 @@ public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType da\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n     }\n-    long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n+    List<Pair<Long, Long>> deletionList = findUndeletedTime(deviceId, measurement, timeLowerBound);\n     IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n     TVList chunkCopy = memChunk.getTVList().clone();\n \n-    chunkCopy.setTimeOffset(undeletedTime);\n+    chunkCopy.setDeletionList(deletionList);\n     return new ReadOnlyMemChunk(measurement, dataType, encoding, chunkCopy, props, getVersion());\n   }\n \n \n-  private long findUndeletedTime(String deviceId, String measurement, long timeLowerBound) {\n-    long undeletedTime = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> findUndeletedTime(String deviceId, String measurement,\n+      long timeLowerBound) {\n+    List<Pair<Long, Long>> deletionList = new ArrayList<>();\n     for (Modification modification : modifications) {\n-      if (modification instanceof Deletion) {\n-        Deletion deletion = (Deletion) modification;\n-        if (deletion.getDevice().equals(deviceId) && deletion.getMeasurement().equals(measurement)\n-            && deletion.getTimestamp() > undeletedTime) {\n-          undeletedTime = deletion.getTimestamp();\n-        }\n+      Deletion deletion = (Deletion) modification;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1ODI4MQ=="}, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDI0MDQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMzo1NzozMVrOGqD_YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTozOToyN1rOGqof3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1ODc1Mg==", "bodyText": "the method name should be changed.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r446758752", "createdAt": "2020-06-29T03:57:31Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -203,38 +204,38 @@ public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType da\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n     }\n-    long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n+    List<Pair<Long, Long>> deletionList = findUndeletedTime(deviceId, measurement, timeLowerBound);\n     IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n     TVList chunkCopy = memChunk.getTVList().clone();\n \n-    chunkCopy.setTimeOffset(undeletedTime);\n+    chunkCopy.setDeletionList(deletionList);\n     return new ReadOnlyMemChunk(measurement, dataType, encoding, chunkCopy, props, getVersion());\n   }\n \n \n-  private long findUndeletedTime(String deviceId, String measurement, long timeLowerBound) {\n-    long undeletedTime = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> findUndeletedTime(String deviceId, String measurement,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1Njg5Mg==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r447356892", "createdAt": "2020-06-30T01:39:27Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -203,38 +204,38 @@ public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType da\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n     }\n-    long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n+    List<Pair<Long, Long>> deletionList = findUndeletedTime(deviceId, measurement, timeLowerBound);\n     IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n     TVList chunkCopy = memChunk.getTVList().clone();\n \n-    chunkCopy.setTimeOffset(undeletedTime);\n+    chunkCopy.setDeletionList(deletionList);\n     return new ReadOnlyMemChunk(measurement, dataType, encoding, chunkCopy, props, getVersion());\n   }\n \n \n-  private long findUndeletedTime(String deviceId, String measurement, long timeLowerBound) {\n-    long undeletedTime = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> findUndeletedTime(String deviceId, String measurement,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1ODc1Mg=="}, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDI0NDUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDowMDoyOFrOGqEBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTozOTozMFrOGqof9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1OTMyMQ==", "bodyText": "!=5 first, then !=4", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r446759321", "createdAt": "2020-06-29T04:00:28Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "diffHunk": "@@ -124,28 +124,42 @@ private static Modification decodeModification(String src) throws IOException {\n   private static String encodeDeletion(Deletion del) {\n     return del.getType().toString() + SEPARATOR + del.getPathString()\n         + SEPARATOR + del.getVersionNum() + SEPARATOR\n-        + del.getTimestamp();\n+        + del.getStartTime() + SEPARATOR + del.getEndTime();\n   }\n \n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    if (fields.length != 4) {\n+    if (fields.length != 4 && fields.length != 5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1NjkxNg==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r447356916", "createdAt": "2020-06-30T01:39:30Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "diffHunk": "@@ -124,28 +124,42 @@ private static Modification decodeModification(String src) throws IOException {\n   private static String encodeDeletion(Deletion del) {\n     return del.getType().toString() + SEPARATOR + del.getPathString()\n         + SEPARATOR + del.getVersionNum() + SEPARATOR\n-        + del.getTimestamp();\n+        + del.getStartTime() + SEPARATOR + del.getEndTime();\n   }\n \n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    if (fields.length != 4) {\n+    if (fields.length != 4 && fields.length != 5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1OTMyMQ=="}, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDM4NDcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNToyNzo1NVrOGqFRbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTozOTo0MVrOGqogGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3OTc1OQ==", "bodyText": ".filter( x -> x instanceof Deletion)", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r446779759", "createdAt": "2020-06-29T05:27:55Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -45,46 +49,52 @@ private QueryUtils() {\n    */\n   public static void modifyChunkMetaData(List<ChunkMetadata> chunkMetaData,\n                                          List<Modification> modifications) {\n-    int modIndex = 0;\n+    List<Modification> sortedModifications = sortModifications(modifications);\n \n     for (int metaIndex = 0; metaIndex < chunkMetaData.size(); metaIndex++) {\n       ChunkMetadata metaData = chunkMetaData.get(metaIndex);\n-      for (int j = modIndex; j < modifications.size(); j++) {\n-        // iterate each modification to find the max deletion time\n-        Modification modification = modifications.get(j);\n+      for (Modification modification : sortedModifications) {\n         if (modification.getVersionNum() > metaData.getVersion()) {\n-          // this modification is after the Chunk, try modifying the chunk\n-          // if this modification succeeds, update modIndex so in the next loop the previous\n-          // modifications will not be examined\n-          modIndex = doModifyChunkMetaData(modification, metaData)? j : modIndex;\n-        } else {\n-          // skip old modifications for next metadata\n-          modIndex++;\n+          doModifyChunkMetaData(modification, metaData);\n         }\n       }\n     }\n     // remove chunks that are completely deleted\n     chunkMetaData.removeIf(metaData -> {\n-      if (metaData.getDeletedAt() >= metaData.getEndTime()) {\n-        return true;\n-      } else {\n-        if (metaData.getDeletedAt() >= metaData.getStartTime()) {\n+      long lower = metaData.getStartTime();\n+      long upper = metaData.getEndTime();\n+      for (Pair<Long, Long> range : metaData.getDeleteRangeList()) {\n+        if (upper < range.left) {\n+          break;\n+        }\n+        if (range.left <= lower && lower <= range.right) {\n+          metaData.setModified(true);\n+          if (upper <= range.right) {\n+            return true;\n+          }\n+          lower = range.right;\n+        } else if (lower < range.left) {\n           metaData.setModified(true);\n+          break;\n         }\n-        return false;\n       }\n+      return false;\n     });\n   }\n \n-  private static boolean doModifyChunkMetaData(Modification modification, ChunkMetadata metaData) {\n+  private static LinkedList<Modification> sortModifications(List<Modification> modifications) {\n+    return modifications.stream()\n+        .sorted(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1Njk1Mw==", "bodyText": "Added", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r447356953", "createdAt": "2020-06-30T01:39:41Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -45,46 +49,52 @@ private QueryUtils() {\n    */\n   public static void modifyChunkMetaData(List<ChunkMetadata> chunkMetaData,\n                                          List<Modification> modifications) {\n-    int modIndex = 0;\n+    List<Modification> sortedModifications = sortModifications(modifications);\n \n     for (int metaIndex = 0; metaIndex < chunkMetaData.size(); metaIndex++) {\n       ChunkMetadata metaData = chunkMetaData.get(metaIndex);\n-      for (int j = modIndex; j < modifications.size(); j++) {\n-        // iterate each modification to find the max deletion time\n-        Modification modification = modifications.get(j);\n+      for (Modification modification : sortedModifications) {\n         if (modification.getVersionNum() > metaData.getVersion()) {\n-          // this modification is after the Chunk, try modifying the chunk\n-          // if this modification succeeds, update modIndex so in the next loop the previous\n-          // modifications will not be examined\n-          modIndex = doModifyChunkMetaData(modification, metaData)? j : modIndex;\n-        } else {\n-          // skip old modifications for next metadata\n-          modIndex++;\n+          doModifyChunkMetaData(modification, metaData);\n         }\n       }\n     }\n     // remove chunks that are completely deleted\n     chunkMetaData.removeIf(metaData -> {\n-      if (metaData.getDeletedAt() >= metaData.getEndTime()) {\n-        return true;\n-      } else {\n-        if (metaData.getDeletedAt() >= metaData.getStartTime()) {\n+      long lower = metaData.getStartTime();\n+      long upper = metaData.getEndTime();\n+      for (Pair<Long, Long> range : metaData.getDeleteRangeList()) {\n+        if (upper < range.left) {\n+          break;\n+        }\n+        if (range.left <= lower && lower <= range.right) {\n+          metaData.setModified(true);\n+          if (upper <= range.right) {\n+            return true;\n+          }\n+          lower = range.right;\n+        } else if (lower < range.left) {\n           metaData.setModified(true);\n+          break;\n         }\n-        return false;\n       }\n+      return false;\n     });\n   }\n \n-  private static boolean doModifyChunkMetaData(Modification modification, ChunkMetadata metaData) {\n+  private static LinkedList<Modification> sortModifications(List<Modification> modifications) {\n+    return modifications.stream()\n+        .sorted(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3OTc1OQ=="}, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDM5NTI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTozMzoxMVrOGqFXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTozMzoxMVrOGqFXbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4MTI5Mg==", "bodyText": "Deletion operation is rare.\nPut new ArrayList() to delete(), add check whether the list == null before using it.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r446781292", "createdAt": "2020-06-29T05:33:11Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -46,7 +47,7 @@\n   /**\n    * this field is effective only in the Tvlist in a RealOnlyMemChunk.\n    */\n-  private long timeOffset = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> deletionList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDQyMTU2OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/page/PageReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTo0Njo1OFrOGqFnCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTo0Njo1OFrOGqFnCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4NTI5MQ==", "bodyText": "similar, deleteRangeList usually be null.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r446785291", "createdAt": "2020-06-29T05:46:58Z", "author": {"login": "jixuan1989"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/page/PageReader.java", "diffHunk": "@@ -61,9 +64,9 @@\n   private Filter filter;\n \n   /**\n-   * Data whose timestamp <= deletedAt should be considered deleted(not be returned).\n+   * A list of deleted intervals.\n    */\n-  private long deletedAt = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> deleteRangeList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135302307ae30ea367c61c90d63627d95a32fd58"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIzMzgzOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNjo0M1rOGqWpwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1Mjo1NVrOGqpvdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NDUxMw==", "bodyText": "em... if so, you still generate many ArrayList instances ...\nIf you do not want to check whether the list is null, use Collections.emptyList instead", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r447064513", "createdAt": "2020-06-29T15:36:43Z", "author": {"login": "jixuan1989"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -171,12 +174,22 @@ public void setVersion(long version) {\n     this.version = version;\n   }\n \n-  public long getDeletedAt() {\n-    return deletedAt;\n+  public List<Pair<Long, Long>> getDeleteRangeList() {\n+    if (deleteRangeList == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d0996609cba9d613a48735bef1c8b5515b672d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NzI2OQ==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r447377269", "createdAt": "2020-06-30T02:52:55Z", "author": {"login": "wshao08"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -171,12 +174,22 @@ public void setVersion(long version) {\n     this.version = version;\n   }\n \n-  public long getDeletedAt() {\n-    return deletedAt;\n+  public List<Pair<Long, Long>> getDeleteRangeList() {\n+    if (deleteRangeList == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NDUxMw=="}, "originalCommit": {"oid": "56d0996609cba9d613a48735bef1c8b5515b672d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzQ5OTQ0OnYy", "diffSide": "RIGHT", "path": "docs/UserGuide/Operation Manual/DML Data Manipulation Language.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODowNTo0MVrOGsB8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODowNTo0MVrOGsB8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyMjQwMw==", "bodyText": "give more examples\nput the sqls in pr here", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448822403", "createdAt": "2020-07-02T08:05:41Z", "author": {"login": "qiaojialin"}, "path": "docs/UserGuide/Operation Manual/DML Data Manipulation Language.md", "diffHunk": "@@ -783,6 +783,12 @@ The wf02 plant's wt02 device has many segments of errors in its power supply sta\n delete from root.ln.wf02.wt02.status where time<=2017-11-01T16:26:00;\n ```\n \n+In case we hope to merely delete the data before 2017-11-01 16:26:00 in the year of 2017, The SQL statement is:\n+```\n+delete from root.ln.wf02.wt02.status where time>=2017-01-01T00:00:00 and time<=2017-11-01T16:26:00;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzUyMzQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODoxMjo0MVrOGsCL1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxMDoyM1rOGuZdMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyNjMyNw==", "bodyText": "Don't we need to add a [-infinity, lowerBound] into deletionList?", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448826327", "createdAt": "2020-07-02T08:12:41Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -203,38 +204,40 @@ public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType da\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n     }\n-    long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n+    List<Pair<Long, Long>> deletionList = constructDeletionList(deviceId, measurement, timeLowerBound);\n     IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n     TVList chunkCopy = memChunk.getTVList().clone();\n \n-    chunkCopy.setTimeOffset(undeletedTime);\n+    chunkCopy.setDeletionList(deletionList);\n     return new ReadOnlyMemChunk(measurement, dataType, encoding, chunkCopy, props, getVersion());\n   }\n \n \n-  private long findUndeletedTime(String deviceId, String measurement, long timeLowerBound) {\n-    long undeletedTime = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> constructDeletionList(String deviceId, String measurement,\n+      long timeLowerBound) {\n+    List<Pair<Long, Long>> deletionList = new ArrayList<>();\n     for (Modification modification : modifications) {\n       if (modification instanceof Deletion) {\n         Deletion deletion = (Deletion) modification;\n         if (deletion.getDevice().equals(deviceId) && deletion.getMeasurement().equals(measurement)\n-            && deletion.getTimestamp() > undeletedTime) {\n-          undeletedTime = deletion.getTimestamp();\n+            && deletion.getEndTime() > timeLowerBound) {\n+          long lowerBound = Math.max(deletion.getStartTime(), timeLowerBound);\n+          deletionList.add(new Pair<>(lowerBound, deletion.getEndTime()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNDc1Mw==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451304753", "createdAt": "2020-07-08T06:10:23Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -203,38 +204,40 @@ public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType da\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n     }\n-    long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n+    List<Pair<Long, Long>> deletionList = constructDeletionList(deviceId, measurement, timeLowerBound);\n     IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n     TVList chunkCopy = memChunk.getTVList().clone();\n \n-    chunkCopy.setTimeOffset(undeletedTime);\n+    chunkCopy.setDeletionList(deletionList);\n     return new ReadOnlyMemChunk(measurement, dataType, encoding, chunkCopy, props, getVersion());\n   }\n \n \n-  private long findUndeletedTime(String deviceId, String measurement, long timeLowerBound) {\n-    long undeletedTime = Long.MIN_VALUE;\n+  private List<Pair<Long, Long>> constructDeletionList(String deviceId, String measurement,\n+      long timeLowerBound) {\n+    List<Pair<Long, Long>> deletionList = new ArrayList<>();\n     for (Modification modification : modifications) {\n       if (modification instanceof Deletion) {\n         Deletion deletion = (Deletion) modification;\n         if (deletion.getDevice().equals(deviceId) && deletion.getMeasurement().equals(measurement)\n-            && deletion.getTimestamp() > undeletedTime) {\n-          undeletedTime = deletion.getTimestamp();\n+            && deletion.getEndTime() > timeLowerBound) {\n+          long lowerBound = Math.max(deletion.getStartTime(), timeLowerBound);\n+          deletionList.add(new Pair<>(lowerBound, deletion.getEndTime()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyNjMyNw=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzU3OTAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/Deletion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODoyODoyOVrOGsCvMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxMDozMFrOGuZdVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNTM3OA==", "bodyText": "this.startTime = Long.MIN_VALUE;", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448835378", "createdAt": "2020-07-02T08:28:29Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/Deletion.java", "diffHunk": "@@ -28,21 +28,36 @@\n public class Deletion extends Modification {\n \n   /**\n-   * data whose timestamp <= this field are to be deleted.\n+   * data within the interval [startTime, endTime] are to be deleted.\n    */\n-  private long timestamp;\n+  private long startTime;\n+  private long endTime;\n \n-  public Deletion(Path path, long versionNum, long timestamp) {\n+  public Deletion(Path path, long versionNum, long endTime) {\n     super(Type.DELETION, path, versionNum);\n-    this.timestamp = timestamp;\n+    this.endTime = endTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNDc4OA==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451304788", "createdAt": "2020-07-08T06:10:30Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/Deletion.java", "diffHunk": "@@ -28,21 +28,36 @@\n public class Deletion extends Modification {\n \n   /**\n-   * data whose timestamp <= this field are to be deleted.\n+   * data within the interval [startTime, endTime] are to be deleted.\n    */\n-  private long timestamp;\n+  private long startTime;\n+  private long endTime;\n \n-  public Deletion(Path path, long versionNum, long timestamp) {\n+  public Deletion(Path path, long versionNum, long endTime) {\n     super(Type.DELETION, path, versionNum);\n-    this.timestamp = timestamp;\n+    this.endTime = endTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNTM3OA=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzYyMjYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODozOToyN1rOGsDKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxMDozOFrOGuZdow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0MjI4MA==", "bodyText": "You can combine the two parsing and put the whole deletion line into IOException", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448842280", "createdAt": "2020-07-02T08:39:27Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "diffHunk": "@@ -124,28 +124,42 @@ private static Modification decodeModification(String src) throws IOException {\n   private static String encodeDeletion(Deletion del) {\n     return del.getType().toString() + SEPARATOR + del.getPathString()\n         + SEPARATOR + del.getVersionNum() + SEPARATOR\n-        + del.getTimestamp();\n+        + del.getStartTime() + SEPARATOR + del.getEndTime();\n   }\n \n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    if (fields.length != 4) {\n+    if (fields.length != 5 && fields.length != 4) {\n       throw new IOException(\"Incorrect deletion fields number: \" + fields.length);\n     }\n \n     String path = fields[1];\n     long versionNum;\n-    long timestamp;\n+    long startTimestamp = Long.MIN_VALUE;\n+    long endTimestamp;\n     try {\n       versionNum = Long.parseLong(fields[2]);\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Invalid version number: \" + fields[2]);\n     }\n-    try {\n-      timestamp = Long.parseLong(fields[3]);\n-    } catch (NumberFormatException e) {\n-      throw new IOException(\"Invalid timestamp: \" + fields[3]);\n+    if (fields.length == 4) {\n+      try {\n+        endTimestamp = Long.parseLong(fields[3]);\n+      } catch (NumberFormatException e) {\n+        throw new IOException(\"Invalid timestamp: \" + fields[3]);\n+      }\n+    } else {\n+      try {\n+        startTimestamp = Long.parseLong(fields[3]);\n+      } catch (NumberFormatException e) {\n+        throw new IOException(\"Invalid timestamp: \" + fields[3]);\n+      }\n+      try {\n+        endTimestamp = Long.parseLong(fields[4]);\n+      } catch (NumberFormatException e) {\n+        throw new IOException(\"Invalid timestamp: \" + fields[4]);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNDg2Nw==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451304867", "createdAt": "2020-07-08T06:10:38Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "diffHunk": "@@ -124,28 +124,42 @@ private static Modification decodeModification(String src) throws IOException {\n   private static String encodeDeletion(Deletion del) {\n     return del.getType().toString() + SEPARATOR + del.getPathString()\n         + SEPARATOR + del.getVersionNum() + SEPARATOR\n-        + del.getTimestamp();\n+        + del.getStartTime() + SEPARATOR + del.getEndTime();\n   }\n \n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    if (fields.length != 4) {\n+    if (fields.length != 5 && fields.length != 4) {\n       throw new IOException(\"Incorrect deletion fields number: \" + fields.length);\n     }\n \n     String path = fields[1];\n     long versionNum;\n-    long timestamp;\n+    long startTimestamp = Long.MIN_VALUE;\n+    long endTimestamp;\n     try {\n       versionNum = Long.parseLong(fields[2]);\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Invalid version number: \" + fields[2]);\n     }\n-    try {\n-      timestamp = Long.parseLong(fields[3]);\n-    } catch (NumberFormatException e) {\n-      throw new IOException(\"Invalid timestamp: \" + fields[3]);\n+    if (fields.length == 4) {\n+      try {\n+        endTimestamp = Long.parseLong(fields[3]);\n+      } catch (NumberFormatException e) {\n+        throw new IOException(\"Invalid timestamp: \" + fields[3]);\n+      }\n+    } else {\n+      try {\n+        startTimestamp = Long.parseLong(fields[3]);\n+      } catch (NumberFormatException e) {\n+        throw new IOException(\"Invalid timestamp: \" + fields[3]);\n+      }\n+      try {\n+        endTimestamp = Long.parseLong(fields[4]);\n+      } catch (NumberFormatException e) {\n+        throw new IOException(\"Invalid timestamp: \" + fields[4]);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0MjI4MA=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzcwOTI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTowMjowNlrOGsEBTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTowMjowNlrOGsEBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1NjM5Nw==", "bodyText": "I wonder why LinkedList is preferred.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448856397", "createdAt": "2020-07-02T09:02:06Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -45,46 +49,52 @@ private QueryUtils() {\n    */\n   public static void modifyChunkMetaData(List<ChunkMetadata> chunkMetaData,\n                                          List<Modification> modifications) {\n-    int modIndex = 0;\n+    List<Modification> sortedModifications = sortModifications(modifications);\n \n     for (int metaIndex = 0; metaIndex < chunkMetaData.size(); metaIndex++) {\n       ChunkMetadata metaData = chunkMetaData.get(metaIndex);\n-      for (int j = modIndex; j < modifications.size(); j++) {\n-        // iterate each modification to find the max deletion time\n-        Modification modification = modifications.get(j);\n+      for (Modification modification : sortedModifications) {\n         if (modification.getVersionNum() > metaData.getVersion()) {\n-          // this modification is after the Chunk, try modifying the chunk\n-          // if this modification succeeds, update modIndex so in the next loop the previous\n-          // modifications will not be examined\n-          modIndex = doModifyChunkMetaData(modification, metaData)? j : modIndex;\n-        } else {\n-          // skip old modifications for next metadata\n-          modIndex++;\n+          doModifyChunkMetaData(modification, metaData);\n         }\n       }\n     }\n     // remove chunks that are completely deleted\n     chunkMetaData.removeIf(metaData -> {\n-      if (metaData.getDeletedAt() >= metaData.getEndTime()) {\n-        return true;\n-      } else {\n-        if (metaData.getDeletedAt() >= metaData.getStartTime()) {\n-          metaData.setModified(true);\n+      long lower = metaData.getStartTime();\n+      long upper = metaData.getEndTime();\n+      if (metaData.getDeleteIntervalList() != null) {\n+        for (Pair<Long, Long> range : metaData.getDeleteIntervalList()) {\n+          if (upper < range.left) {\n+            break;\n+          }\n+          if (range.left <= lower && lower <= range.right) {\n+            metaData.setModified(true);\n+            if (upper <= range.right) {\n+              return true;\n+            }\n+            lower = range.right;\n+          } else if (lower < range.left) {\n+            metaData.setModified(true);\n+            break;\n+          }\n         }\n-        return false;\n       }\n+      return false;\n     });\n   }\n \n-  private static boolean doModifyChunkMetaData(Modification modification, ChunkMetadata metaData) {\n+  private static LinkedList<Modification> sortModifications(List<Modification> modifications) {\n+    return modifications.stream().filter(x -> x instanceof Deletion)\n+        .sorted(Comparator.comparingLong(mods -> ((Deletion) mods).getStartTime()))\n+        .collect(Collectors.toCollection(LinkedList::new));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzczNzg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTowOTo1NlrOGsETaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzoxMjozOFrOGtttGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTAzMg==", "bodyText": "I think it is not necessary to start from the first of the deletions at each call of isPointDeleted(), as this method is called with ordered timestamps, if one timestamp is after the range of one deletion, all remaining timestamps will either.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448861032", "createdAt": "2020-07-02T09:09:56Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -531,6 +530,17 @@ public boolean hasNextTimeValuePair() {\n       return hasCachedPair;\n     }\n \n+    private boolean isPointDeleted(long timestamp) {\n+      if (deletionList != null) {\n+        for (Pair<Long, Long> del : deletionList) {\n+          if (del.left <= timestamp && timestamp <= del.right) {\n+            return true;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4NzkzMA==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r450587930", "createdAt": "2020-07-07T03:12:38Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -531,6 +530,17 @@ public boolean hasNextTimeValuePair() {\n       return hasCachedPair;\n     }\n \n+    private boolean isPointDeleted(long timestamp) {\n+      if (deletionList != null) {\n+        for (Pair<Long, Long> del : deletionList) {\n+          if (del.left <= timestamp && timestamp <= del.right) {\n+            return true;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTAzMg=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc0MTE2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/engine/merge/MergeTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToxMDo1MFrOGsEVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzoxMjo0MlrOGtttJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTU1Mg==", "bodyText": "Please mind the format.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448861552", "createdAt": "2020-07-02T09:10:50Z", "author": {"login": "jt2594838"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/merge/MergeTaskTest.java", "diffHunk": "@@ -218,7 +218,7 @@ public void testPartialMerge3() throws Exception {\n   public void mergeWithDeletionTest() throws Exception {\n     try {\n       seqResources.get(0).getModFile().write(new Deletion(new Path(deviceIds[0],\n-          measurementSchemas[0].getMeasurementId()), 10000, 49));\n+          measurementSchemas[0].getMeasurementId()), 10000, 0,49));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4Nzk0Mw==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r450587943", "createdAt": "2020-07-07T03:12:42Z", "author": {"login": "wshao08"}, "path": "server/src/test/java/org/apache/iotdb/db/engine/merge/MergeTaskTest.java", "diffHunk": "@@ -218,7 +218,7 @@ public void testPartialMerge3() throws Exception {\n   public void mergeWithDeletionTest() throws Exception {\n     try {\n       seqResources.get(0).getModFile().write(new Deletion(new Path(deviceIds[0],\n-          measurementSchemas[0].getMeasurementId()), 10000, 49));\n+          measurementSchemas[0].getMeasurementId()), 10000, 0,49));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTU1Mg=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc1MDI5OnYy", "diffSide": "RIGHT", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToxMzoyMVrOGsEbOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzoxMjo1MlrOGtttSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MzAzNA==", "bodyText": "It may simply be changed to a call of deleteData(paths, Long.MIN_VALUE, endtime).", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448863034", "createdAt": "2020-07-02T09:13:21Z", "author": {"login": "jt2594838"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -747,14 +747,37 @@ public void deleteData(String path, long time)\n    * delete data <= time in multiple timeseries\n    *\n    * @param paths data in which time series to delete\n-   * @param time  data with time stamp less than or equal to time will be deleted\n+   * @param endTime data with time stamp less than or equal to time will be deleted\n    */\n-  public void deleteData(List<String> paths, long time)\n+  public void deleteData(List<String> paths, long endTime)\n       throws IoTDBConnectionException, StatementExecutionException {\n     TSDeleteDataReq request = new TSDeleteDataReq();\n     request.setSessionId(sessionId);\n     request.setPaths(paths);\n-    request.setTimestamp(time);\n+    request.setStartTime(Long.MIN_VALUE);\n+    request.setEndTime(endTime);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4Nzk3OQ==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r450587979", "createdAt": "2020-07-07T03:12:52Z", "author": {"login": "wshao08"}, "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -747,14 +747,37 @@ public void deleteData(String path, long time)\n    * delete data <= time in multiple timeseries\n    *\n    * @param paths data in which time series to delete\n-   * @param time  data with time stamp less than or equal to time will be deleted\n+   * @param endTime data with time stamp less than or equal to time will be deleted\n    */\n-  public void deleteData(List<String> paths, long time)\n+  public void deleteData(List<String> paths, long endTime)\n       throws IoTDBConnectionException, StatementExecutionException {\n     TSDeleteDataReq request = new TSDeleteDataReq();\n     request.setSessionId(sessionId);\n     request.setPaths(paths);\n-    request.setTimestamp(time);\n+    request.setStartTime(Long.MIN_VALUE);\n+    request.setEndTime(endTime);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MzAzNA=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc4Nzc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyNDowMVrOGsEzVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyNDowMVrOGsEzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2OTIwNQ==", "bodyText": "It's better to remove this constructor, it may misleading others that this means delete time = deleteTime.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448869205", "createdAt": "2020-07-02T09:24:01Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePlan.java", "diffHunk": "@@ -45,7 +46,22 @@ public DeletePlan() {\n    */\n   public DeletePlan(long deleteTime, Path path) {\n     super(false, Operator.OperatorType.DELETE);\n-    this.deleteTime = deleteTime;\n+    this.deleteStartTime = Long.MIN_VALUE;\n+    this.deleteEndTime = deleteTime;\n+    this.paths.add(path);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc5MTk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyNDo1OVrOGsE18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxMDo1M1rOGuZd6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2OTg3NQ==", "bodyText": "also delete this", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448869875", "createdAt": "2020-07-02T09:24:59Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePlan.java", "diffHunk": "@@ -57,16 +73,39 @@ public DeletePlan(long deleteTime, Path path) {\n    */\n   public DeletePlan(long deleteTime, List<Path> paths) {\n     super(false, Operator.OperatorType.DELETE);\n-    this.deleteTime = deleteTime;\n+    this.deleteStartTime = Long.MIN_VALUE;\n+    this.deleteEndTime = deleteTime;\n+    this.paths = paths;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNDkzNg==", "bodyText": "Done", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451304936", "createdAt": "2020-07-08T06:10:53Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/DeletePlan.java", "diffHunk": "@@ -57,16 +73,39 @@ public DeletePlan(long deleteTime, Path path) {\n    */\n   public DeletePlan(long deleteTime, List<Path> paths) {\n     super(false, Operator.OperatorType.DELETE);\n-    this.deleteTime = deleteTime;\n+    this.deleteStartTime = Long.MIN_VALUE;\n+    this.deleteEndTime = deleteTime;\n+    this.paths = paths;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2OTg3NQ=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzg0MDQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTozODo0M1rOGsFVfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTozODo0M1rOGsFVfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3Nzk0OA==", "bodyText": "add more check for BinaryOperator, it must be a AndOperator and the  lower bound must <= the upper bound", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448877948", "createdAt": "2020-07-02T09:38:43Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1550,18 +1552,52 @@ long parseTimeFormat(String timestampStr) throws SQLParserException {\n    *\n    * @param operator delete logical plan\n    */\n-  private long parseDeleteTimeFilter(DeleteDataOperator operator) {\n+  private Pair<Long, Long> parseDeleteTimeRange(DeleteDataOperator operator) {\n     FilterOperator filterOperator = operator.getFilterOperator();\n-    if (filterOperator.getTokenIntType() != SQLConstant.LESSTHAN\n-        && filterOperator.getTokenIntType() != SQLConstant.LESSTHANOREQUALTO) {\n+    if (!filterOperator.isLeaf() && filterOperator.getTokenIntType() != SQLConstant.KW_AND) {\n       throw new SQLParserException(\n-          \"For delete command, where clause must be like : time < XXX or time <= XXX\");\n+          \"For delete command, where clause can only contain atomic expressions like : \"\n+              + \"time > XXX, time <= XXX, or And with two atomic expressions\");\n     }\n+\n+    if (filterOperator.isLeaf()) {\n+      return calcOperatorRange(filterOperator);\n+    }\n+\n+    List<FilterOperator> children = filterOperator.getChildren();\n+    FilterOperator lOperator = children.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzg5MDYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTo1MjozM1rOGsF1Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxNTowMlrOGuZjiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4NjA4Mg==", "bodyText": "This should be sortAndMerge\nSuppose we have [1,10], [5,12], [15,20], [16,21]\nIt's better to merge them to [1,12] and [15,21]", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448886082", "createdAt": "2020-07-02T09:52:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -45,46 +49,52 @@ private QueryUtils() {\n    */\n   public static void modifyChunkMetaData(List<ChunkMetadata> chunkMetaData,\n                                          List<Modification> modifications) {\n-    int modIndex = 0;\n+    List<Modification> sortedModifications = sortModifications(modifications);\n \n     for (int metaIndex = 0; metaIndex < chunkMetaData.size(); metaIndex++) {\n       ChunkMetadata metaData = chunkMetaData.get(metaIndex);\n-      for (int j = modIndex; j < modifications.size(); j++) {\n-        // iterate each modification to find the max deletion time\n-        Modification modification = modifications.get(j);\n+      for (Modification modification : sortedModifications) {\n         if (modification.getVersionNum() > metaData.getVersion()) {\n-          // this modification is after the Chunk, try modifying the chunk\n-          // if this modification succeeds, update modIndex so in the next loop the previous\n-          // modifications will not be examined\n-          modIndex = doModifyChunkMetaData(modification, metaData)? j : modIndex;\n-        } else {\n-          // skip old modifications for next metadata\n-          modIndex++;\n+          doModifyChunkMetaData(modification, metaData);\n         }\n       }\n     }\n     // remove chunks that are completely deleted\n     chunkMetaData.removeIf(metaData -> {\n-      if (metaData.getDeletedAt() >= metaData.getEndTime()) {\n-        return true;\n-      } else {\n-        if (metaData.getDeletedAt() >= metaData.getStartTime()) {\n-          metaData.setModified(true);\n+      long lower = metaData.getStartTime();\n+      long upper = metaData.getEndTime();\n+      if (metaData.getDeleteIntervalList() != null) {\n+        for (Pair<Long, Long> range : metaData.getDeleteIntervalList()) {\n+          if (upper < range.left) {\n+            break;\n+          }\n+          if (range.left <= lower && lower <= range.right) {\n+            metaData.setModified(true);\n+            if (upper <= range.right) {\n+              return true;\n+            }\n+            lower = range.right;\n+          } else if (lower < range.left) {\n+            metaData.setModified(true);\n+            break;\n+          }\n         }\n-        return false;\n       }\n+      return false;\n     });\n   }\n \n-  private static boolean doModifyChunkMetaData(Modification modification, ChunkMetadata metaData) {\n+  private static LinkedList<Modification> sortModifications(List<Modification> modifications) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNjM3Ng==", "bodyText": "Change to sort and merge intervals when added into ChunkMetadata", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451306376", "createdAt": "2020-07-08T06:15:02Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -45,46 +49,52 @@ private QueryUtils() {\n    */\n   public static void modifyChunkMetaData(List<ChunkMetadata> chunkMetaData,\n                                          List<Modification> modifications) {\n-    int modIndex = 0;\n+    List<Modification> sortedModifications = sortModifications(modifications);\n \n     for (int metaIndex = 0; metaIndex < chunkMetaData.size(); metaIndex++) {\n       ChunkMetadata metaData = chunkMetaData.get(metaIndex);\n-      for (int j = modIndex; j < modifications.size(); j++) {\n-        // iterate each modification to find the max deletion time\n-        Modification modification = modifications.get(j);\n+      for (Modification modification : sortedModifications) {\n         if (modification.getVersionNum() > metaData.getVersion()) {\n-          // this modification is after the Chunk, try modifying the chunk\n-          // if this modification succeeds, update modIndex so in the next loop the previous\n-          // modifications will not be examined\n-          modIndex = doModifyChunkMetaData(modification, metaData)? j : modIndex;\n-        } else {\n-          // skip old modifications for next metadata\n-          modIndex++;\n+          doModifyChunkMetaData(modification, metaData);\n         }\n       }\n     }\n     // remove chunks that are completely deleted\n     chunkMetaData.removeIf(metaData -> {\n-      if (metaData.getDeletedAt() >= metaData.getEndTime()) {\n-        return true;\n-      } else {\n-        if (metaData.getDeletedAt() >= metaData.getStartTime()) {\n-          metaData.setModified(true);\n+      long lower = metaData.getStartTime();\n+      long upper = metaData.getEndTime();\n+      if (metaData.getDeleteIntervalList() != null) {\n+        for (Pair<Long, Long> range : metaData.getDeleteIntervalList()) {\n+          if (upper < range.left) {\n+            break;\n+          }\n+          if (range.left <= lower && lower <= range.right) {\n+            metaData.setModified(true);\n+            if (upper <= range.right) {\n+              return true;\n+            }\n+            lower = range.right;\n+          } else if (lower < range.left) {\n+            metaData.setModified(true);\n+            break;\n+          }\n         }\n-        return false;\n       }\n+      return false;\n     });\n   }\n \n-  private static boolean doModifyChunkMetaData(Modification modification, ChunkMetadata metaData) {\n+  private static LinkedList<Modification> sortModifications(List<Modification> modifications) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4NjA4Mg=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzkzMzAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDowNDo1MFrOGsGQOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxNToxN1rOGuZj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5Mjk4NQ==", "bodyText": "you record the deletion pair in the TVList, when iterating the TVList, it's better to sortAndMerge all deletions.\nWhen calling the Ite, the TVList should be sorted already, you can store the deletions inside the Ite and record and index of current checked deletion. Then you could use a more efficient way to check which point is deleted.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448892985", "createdAt": "2020-07-02T10:04:50Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -519,7 +518,7 @@ public boolean hasNextTimeValuePair() {\n \n       while (cur < size) {\n         long time = getTime(cur);\n-        if (time < getTimeOffset() || (cur + 1 < size() && (time == getTime(cur + 1)))) {\n+        if (isPointDeleted(time) || (cur + 1 < size() && (time == getTime(cur + 1)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNjQ3NQ==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451306475", "createdAt": "2020-07-08T06:15:17Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -519,7 +518,7 @@ public boolean hasNextTimeValuePair() {\n \n       while (cur < size) {\n         long time = getTime(cur);\n-        if (time < getTimeOffset() || (cur + 1 < size() && (time == getTime(cur + 1)))) {\n+        if (isPointDeleted(time) || (cur + 1 < size() && (time == getTime(cur + 1)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5Mjk4NQ=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzk1NDY0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/chunk/ChunkReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoxMToyMFrOGsGdww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxMToxNVrOGuZeZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NjQ1MQ==", "bodyText": "if the page is totally deleted, this page is not satisfied, return false.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448896451", "createdAt": "2020-07-02T10:11:20Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/chunk/ChunkReader.java", "diffHunk": "@@ -131,10 +132,25 @@ private void skipBytesInStreamByLength(long length) {\n   }\n \n   public boolean pageSatisfied(PageHeader pageHeader) {\n-    if (pageHeader.getEndTime() <= deletedAt) {\n-      return false;\n-    } else if (pageHeader.getStartTime() <= deletedAt) {\n-      pageHeader.setModified(true);\n+    long lower = pageHeader.getStartTime();\n+    long upper = pageHeader.getEndTime();\n+    // deleteIntervalList is sorted in terms of startTime\n+    if (deleteIntervalList != null) {\n+      for (Pair<Long, Long> range : deleteIntervalList) {\n+        if (upper < range.left) {\n+          break;\n+        }\n+        if (range.left <= lower && lower <= range.right) {\n+          pageHeader.setModified(true);\n+          if (upper <= range.right) {\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNTA2Mg==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451305062", "createdAt": "2020-07-08T06:11:15Z", "author": {"login": "wshao08"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/chunk/ChunkReader.java", "diffHunk": "@@ -131,10 +132,25 @@ private void skipBytesInStreamByLength(long length) {\n   }\n \n   public boolean pageSatisfied(PageHeader pageHeader) {\n-    if (pageHeader.getEndTime() <= deletedAt) {\n-      return false;\n-    } else if (pageHeader.getStartTime() <= deletedAt) {\n-      pageHeader.setModified(true);\n+    long lower = pageHeader.getStartTime();\n+    long upper = pageHeader.getEndTime();\n+    // deleteIntervalList is sorted in terms of startTime\n+    if (deleteIntervalList != null) {\n+      for (Pair<Long, Long> range : deleteIntervalList) {\n+        if (upper < range.left) {\n+          break;\n+        }\n+        if (range.left <= lower && lower <= range.right) {\n+          pageHeader.setModified(true);\n+          if (upper <= range.right) {\n+            return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NjQ1MQ=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzk1NzU5OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/chunk/ChunkReaderByTimestamp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoxMjoxN1rOGsGfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxMToyMFrOGuZegg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NjkzMQ==", "bodyText": "remove this", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448896931", "createdAt": "2020-07-02T10:12:17Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/chunk/ChunkReaderByTimestamp.java", "diffHunk": "@@ -35,7 +35,10 @@ public ChunkReaderByTimestamp(Chunk chunk) throws IOException {\n   public boolean pageSatisfied(PageHeader pageHeader) {\n     long maxTimestamp = pageHeader.getEndTime();\n     // if maxTimestamp > currentTimestamp, this page should NOT be skipped\n-    return maxTimestamp >= currentTimestamp && maxTimestamp > deletedAt;\n+    // return maxTimestamp >= currentTimestamp && super.pageSatisfied(pageHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNTA5MA==", "bodyText": "Done", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451305090", "createdAt": "2020-07-08T06:11:20Z", "author": {"login": "wshao08"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/chunk/ChunkReaderByTimestamp.java", "diffHunk": "@@ -35,7 +35,10 @@ public ChunkReaderByTimestamp(Chunk chunk) throws IOException {\n   public boolean pageSatisfied(PageHeader pageHeader) {\n     long maxTimestamp = pageHeader.getEndTime();\n     // if maxTimestamp > currentTimestamp, this page should NOT be skipped\n-    return maxTimestamp >= currentTimestamp && maxTimestamp > deletedAt;\n+    // return maxTimestamp >= currentTimestamp && super.pageSatisfied(pageHeader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NjkzMQ=="}, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzk2MTkwOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/page/PageReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoxMzo0MVrOGsGidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoxMzo0MVrOGsGidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NzY1Mg==", "bodyText": "also, the Deletions should be sortAndMerge, then optimize this check", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r448897652", "createdAt": "2020-07-02T10:13:41Z", "author": {"login": "qiaojialin"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/page/PageReader.java", "diffHunk": "@@ -159,12 +161,23 @@ public void setFilter(Filter filter) {\n     this.filter = filter;\n   }\n \n-  public void setDeletedAt(long deletedAt) {\n-    this.deletedAt = deletedAt;\n+  public void setDeleteIntervalList(List<Pair<Long, Long>> list) {\n+    this.deleteIntervalList = list;\n   }\n \n   @Override\n   public boolean isModified() {\n     return pageHeader.isModified();\n   }\n+\n+  private boolean isDeleted(long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35de2ba3ae213e0a79793d10d0e6404aa9a49b65"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzgyODMxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/qp/plan/LogicalPlanSmallTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyNjowMVrOGuZyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNjowNlrOGuhIHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMDI3NQ==", "bodyText": "Why is this commented?", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451310275", "createdAt": "2020-07-08T06:26:01Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/qp/plan/LogicalPlanSmallTest.java", "diffHunk": "@@ -237,5 +239,100 @@ public void testChineseCharacter() {\n     Assert.assertEquals(paths, ((QueryOperator) operator).getSelectedPaths());\n   }\n \n+  @Test\n+  public void testRangeDelete() {\n+    String sql1 = \"delete from root.d1.s1 where time>=1 and time < 3\";\n+    Operator op = parseDriver.parse(sql1, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(DeleteDataOperator.class, op.getClass());\n+    ArrayList<Path> paths = new ArrayList<>();\n+    paths.add(new Path(\"root.d1.s1\"));\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(1, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(2, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql2 = \"delete from root.d1.s1 where time>=1\";\n+    op = parseDriver.parse(sql2, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(1, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(Long.MAX_VALUE, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql3 = \"delete from root.d1.s1 where time>1\";\n+    op = parseDriver.parse(sql3, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(2, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(Long.MAX_VALUE, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql4 = \"delete from root.d1.s1 where time <= 1\";\n+    op = parseDriver.parse(sql4, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(Long.MIN_VALUE, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(1, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql5 = \"delete from root.d1.s1 where time<1\";\n+    op = parseDriver.parse(sql5, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(Long.MIN_VALUE, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(0, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql6 = \"delete from root.d1.s1 where time = 3\";\n+    op = parseDriver.parse(sql6, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(3, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(3, ((DeleteDataOperator) op).getEndTime());\n \n+    String sql7 = \"delete from root.d1.s1 where time = 1 and time < -1\";\n+    String errorMsg = null;\n+    try {\n+      op = parseDriver.parse(sql7, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (RuntimeException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(errorMsg, \"Invalid delete range: [1, -2]\");\n+\n+    String sql8 = \"delete from root.d1.s1 where time > 5 and time <= 0\";\n+    try {\n+      op = parseDriver.parse(sql8, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (RuntimeException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(errorMsg, \"Invalid delete range: [6, 0]\");\n+  }\n+\n+  @Test\n+  public void testErrorDeleteRange() {\n+    String sql = \"delete from root.d1.s1 where time>=1 and time < 3 or time >1\";\n+    String errorMsg = null;\n+    try {\n+      parseDriver.parse(sql, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (SQLParserException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(\n+        \"For delete command, where clause can only contain atomic expressions like : \"\n+            + \"time > XXX, time <= XXX, or And with two atomic expressions\",\n+        errorMsg);\n+\n+    sql = \"delete from root.d1.s1 where time>=1 or time < 3\";\n+    errorMsg = null;\n+    try {\n+      parseDriver.parse(sql, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (SQLParserException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(\n+        \"For delete command, where clause can only contain atomic expressions like : \"\n+            + \"time > XXX, time <= XXX, or And with two atomic expressions\",\n+        errorMsg);\n+\n+    /*\n+    sql = \"delete from root.d1.s1 where time<=1 and time > 3\";\n+    errorMsg = null;\n+    try {\n+      parseDriver.parse(sql, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (SQLParserException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(\"Unreachable deleted time interval\", errorMsg);\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMDQyOA==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451430428", "createdAt": "2020-07-08T10:06:06Z", "author": {"login": "wshao08"}, "path": "server/src/test/java/org/apache/iotdb/db/qp/plan/LogicalPlanSmallTest.java", "diffHunk": "@@ -237,5 +239,100 @@ public void testChineseCharacter() {\n     Assert.assertEquals(paths, ((QueryOperator) operator).getSelectedPaths());\n   }\n \n+  @Test\n+  public void testRangeDelete() {\n+    String sql1 = \"delete from root.d1.s1 where time>=1 and time < 3\";\n+    Operator op = parseDriver.parse(sql1, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(DeleteDataOperator.class, op.getClass());\n+    ArrayList<Path> paths = new ArrayList<>();\n+    paths.add(new Path(\"root.d1.s1\"));\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(1, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(2, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql2 = \"delete from root.d1.s1 where time>=1\";\n+    op = parseDriver.parse(sql2, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(1, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(Long.MAX_VALUE, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql3 = \"delete from root.d1.s1 where time>1\";\n+    op = parseDriver.parse(sql3, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(2, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(Long.MAX_VALUE, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql4 = \"delete from root.d1.s1 where time <= 1\";\n+    op = parseDriver.parse(sql4, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(Long.MIN_VALUE, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(1, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql5 = \"delete from root.d1.s1 where time<1\";\n+    op = parseDriver.parse(sql5, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(Long.MIN_VALUE, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(0, ((DeleteDataOperator) op).getEndTime());\n+\n+    String sql6 = \"delete from root.d1.s1 where time = 3\";\n+    op = parseDriver.parse(sql6, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    Assert.assertEquals(paths, ((DeleteDataOperator) op).getSelectedPaths());\n+    Assert.assertEquals(3, ((DeleteDataOperator) op).getStartTime());\n+    Assert.assertEquals(3, ((DeleteDataOperator) op).getEndTime());\n \n+    String sql7 = \"delete from root.d1.s1 where time = 1 and time < -1\";\n+    String errorMsg = null;\n+    try {\n+      op = parseDriver.parse(sql7, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (RuntimeException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(errorMsg, \"Invalid delete range: [1, -2]\");\n+\n+    String sql8 = \"delete from root.d1.s1 where time > 5 and time <= 0\";\n+    try {\n+      op = parseDriver.parse(sql8, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (RuntimeException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(errorMsg, \"Invalid delete range: [6, 0]\");\n+  }\n+\n+  @Test\n+  public void testErrorDeleteRange() {\n+    String sql = \"delete from root.d1.s1 where time>=1 and time < 3 or time >1\";\n+    String errorMsg = null;\n+    try {\n+      parseDriver.parse(sql, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (SQLParserException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(\n+        \"For delete command, where clause can only contain atomic expressions like : \"\n+            + \"time > XXX, time <= XXX, or And with two atomic expressions\",\n+        errorMsg);\n+\n+    sql = \"delete from root.d1.s1 where time>=1 or time < 3\";\n+    errorMsg = null;\n+    try {\n+      parseDriver.parse(sql, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (SQLParserException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(\n+        \"For delete command, where clause can only contain atomic expressions like : \"\n+            + \"time > XXX, time <= XXX, or And with two atomic expressions\",\n+        errorMsg);\n+\n+    /*\n+    sql = \"delete from root.d1.s1 where time<=1 and time > 3\";\n+    errorMsg = null;\n+    try {\n+      parseDriver.parse(sql, IoTDBDescriptor.getInstance().getConfig().getZoneID());\n+    } catch (SQLParserException e) {\n+      errorMsg = e.getMessage();\n+    }\n+    Assert.assertEquals(\"Unreachable deleted time interval\", errorMsg);\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMDI3NQ=="}, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzg1NTA5OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozNjowNVrOGuaCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNjoyN1rOGuhI2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNDMyOA==", "bodyText": "I think it's better to add the deleteInterval in string and hash code. What do you think?", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451314328", "createdAt": "2020-07-08T06:36:05Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -91,8 +94,8 @@ public ChunkMetadata(String measurementUid, TSDataType tsDataType, long fileOffs\n \n   @Override\n   public String toString() {\n-    return String.format(\"measurementId: %s, datatype: %s, version: %d, deletedAt: %d, \"\n-        + \"Statistics: %s\", measurementUid, tsDataType, version, deletedAt, statistics);\n+    return String.format(\"measurementId: %s, datatype: %s, version: %d, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMDYxNw==", "bodyText": "Yes, added in toString and hash", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451430617", "createdAt": "2020-07-08T10:06:27Z", "author": {"login": "wshao08"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -91,8 +94,8 @@ public ChunkMetadata(String measurementUid, TSDataType tsDataType, long fileOffs\n \n   @Override\n   public String toString() {\n-    return String.format(\"measurementId: %s, datatype: %s, version: %d, deletedAt: %d, \"\n-        + \"Statistics: %s\", measurementUid, tsDataType, version, deletedAt, statistics);\n+    return String.format(\"measurementId: %s, datatype: %s, version: %d, \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNDMyOA=="}, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzg1ODg0OnYy", "diffSide": "LEFT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozNzozNVrOGuaEyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNjozN1rOGuhJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNDg4OQ==", "bodyText": "I think deleteInterval should be compared as well", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451314889", "createdAt": "2020-07-08T06:37:35Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -198,15 +222,14 @@ public boolean equals(Object o) {\n     ChunkMetadata that = (ChunkMetadata) o;\n     return offsetOfChunkHeader == that.offsetOfChunkHeader &&\n         version == that.version &&\n-        deletedAt == that.deletedAt &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMDY4Nw==", "bodyText": "Added", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451430687", "createdAt": "2020-07-08T10:06:37Z", "author": {"login": "wshao08"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -198,15 +222,14 @@ public boolean equals(Object o) {\n     ChunkMetadata that = (ChunkMetadata) o;\n     return offsetOfChunkHeader == that.offsetOfChunkHeader &&\n         version == that.version &&\n-        deletedAt == that.deletedAt &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNDg4OQ=="}, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzkzMTg0OnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/page/PageReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzowNDoxMVrOGuav8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNjo1NlrOGuhJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyNTkzOQ==", "bodyText": "Could you please recheck the logic? deleteCursor will not be changed after calling this method, since you didn't return it... When you call this method, deleteCursor keeps value 0.", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451325939", "createdAt": "2020-07-08T07:04:11Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/page/PageReader.java", "diffHunk": "@@ -159,12 +162,25 @@ public void setFilter(Filter filter) {\n     this.filter = filter;\n   }\n \n-  public void setDeletedAt(long deletedAt) {\n-    this.deletedAt = deletedAt;\n+  public void setDeleteIntervalList(List<TimeRange> list) {\n+    this.deleteIntervalList = list;\n   }\n \n   @Override\n   public boolean isModified() {\n     return pageHeader.isModified();\n   }\n+\n+  private boolean isDeleted(long timestamp, int deleteCursor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMDg2NA==", "bodyText": "Fixed, thanks!", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451430864", "createdAt": "2020-07-08T10:06:56Z", "author": {"login": "wshao08"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/page/PageReader.java", "diffHunk": "@@ -159,12 +162,25 @@ public void setFilter(Filter filter) {\n     this.filter = filter;\n   }\n \n-  public void setDeletedAt(long deletedAt) {\n-    this.deletedAt = deletedAt;\n+  public void setDeleteIntervalList(List<TimeRange> list) {\n+    this.deleteIntervalList = list;\n   }\n \n   @Override\n   public boolean isModified() {\n     return pageHeader.isModified();\n   }\n+\n+  private boolean isDeleted(long timestamp, int deleteCursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyNTkzOQ=="}, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzk2OTAyOnYy", "diffSide": "RIGHT", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeRange.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxNjoyOFrOGubGig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNTo1N1rOGuhH1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMTcyMg==", "bodyText": "Format this line to 3 lines : D", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451331722", "createdAt": "2020-07-08T07:16:28Z", "author": {"login": "samperson1997"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeRange.java", "diffHunk": "@@ -103,6 +103,8 @@ public boolean contains(long min, long max) {\n     return this.min <= min && this.max >= max;\n   }\n \n+  public boolean contains(long time) {return this.min <= time && time <= this.max;}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMDM1Nw==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451430357", "createdAt": "2020-07-08T10:05:57Z", "author": {"login": "wshao08"}, "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeRange.java", "diffHunk": "@@ -103,6 +103,8 @@ public boolean contains(long min, long max) {\n     return this.min <= min && this.max >= max;\n   }\n \n+  public boolean contains(long time) {return this.min <= time && time <= this.max;}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMTcyMg=="}, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzk5NjI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoyNDo0NFrOGubXEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoyNDo0NFrOGubXEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzNTk1Mg==", "bodyText": "Why 1?", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451335952", "createdAt": "2020-07-08T07:24:44Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1350,14 +1353,13 @@ public void delete(String deviceId, String measurementId, long timestamp) throws\n         return;\n       }\n \n-      // time partition to divide storage group\n-      long timePartitionId = StorageEngine.getTimePartition(timestamp);\n       // write log to impacted working TsFileProcessors\n-      logDeletion(timestamp, deviceId, measurementId, timePartitionId);\n+      logDeletion(startTime, endTime, deviceId, measurementId);\n+      // delete Last cache record if necessary\n+      tryToDeleteLastCache(deviceId, measurementId, startTime, endTime);\n \n       Path fullPath = new Path(deviceId, measurementId);\n-      Deletion deletion = new Deletion(fullPath,\n-          getVersionControllerByTimePartitionId(timePartitionId).nextVersion(), timestamp);\n+      Deletion deletion = new Deletion(fullPath, 1, startTime, endTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA0NTAyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBDeletionIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzozODowOFrOGub0Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNTo0NlrOGuhHeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MzM2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  statement.execute(\"DELETE FROM root.vehicle.d0.s0  WHERE time <= 300\");\n          \n          \n            \n                  statement.execute(\"DELETE FROM root.vehicle.d0.s0 WHERE time <= 300\");", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451343367", "createdAt": "2020-07-08T07:38:08Z", "author": {"login": "samperson1997"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBDeletionIT.java", "diffHunk": "@@ -164,6 +164,43 @@ public void testDelAfterFlush() throws SQLException {\n     }\n   }\n \n+  @Test\n+  public void testRangeDelete() throws SQLException {\n+    prepareData();\n+    try (Connection connection = DriverManager\n+        .getConnection(Config.IOTDB_URL_PREFIX + \"127.0.0.1:6667/\", \"root\",\n+            \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      statement.execute(\"DELETE FROM root.vehicle.d0.s0  WHERE time <= 300\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMDI2NA==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451430264", "createdAt": "2020-07-08T10:05:46Z", "author": {"login": "wshao08"}, "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBDeletionIT.java", "diffHunk": "@@ -164,6 +164,43 @@ public void testDelAfterFlush() throws SQLException {\n     }\n   }\n \n+  @Test\n+  public void testRangeDelete() throws SQLException {\n+    prepareData();\n+    try (Connection connection = DriverManager\n+        .getConnection(Config.IOTDB_URL_PREFIX + \"127.0.0.1:6667/\", \"root\",\n+            \"root\");\n+        Statement statement = connection.createStatement()) {\n+\n+      statement.execute(\"DELETE FROM root.vehicle.d0.s0  WHERE time <= 300\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MzM2Nw=="}, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA5MzIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1MjowMVrOGucRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNTo0MFrOGuhHSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MDk2NQ==", "bodyText": "Remove unused import", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451350965", "createdAt": "2020-07-08T07:52:01Z", "author": {"login": "samperson1997"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -19,6 +19,9 @@\n \n package org.apache.iotdb.db.utils;\n \n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMDIxNw==", "bodyText": "Fixed", "url": "https://github.com/apache/iotdb/pull/1400#discussion_r451430217", "createdAt": "2020-07-08T10:05:40Z", "author": {"login": "wshao08"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -19,6 +19,9 @@\n \n package org.apache.iotdb.db.utils;\n \n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MDk2NQ=="}, "originalCommit": {"oid": "4f85ecac71d96cb7f6e3448a6169859b82f5eabd"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4811, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}