{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NTgxMzY3", "number": 2340, "title": "[IOTDB-1076] Create interface of TimeIndex", "bodyText": "Create interface of TimeIndex as ITimeIndex, and supply two default implement methods: DeviceTimeIndex and FileTimeIndex.\nDesign document: https://cwiki.apache.org/confluence/display/IOTDB/Interface+design+of+TsFileResource", "createdAt": "2020-12-25T11:47:59Z", "url": "https://github.com/apache/iotdb/pull/2340", "merged": true, "mergeCommit": {"oid": "44a055c55be62dccd549132e74ca0e70ec322c22"}, "closed": true, "closedAt": "2021-01-06T09:56:47Z", "author": {"login": "samperson1997"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpTK5rAH2gAyNTQ1NTgxMzY3OmRhZjEwNGM4ZDA3NmJhZThlMzA5MWM0NDBmMjQzZTkzMGZkMDU5MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtbsc4gFqTU2MjQyMDAwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "daf104c8d076bae8e3091c440f243e930fd05920", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/daf104c8d076bae8e3091c440f243e930fd05920", "committedDate": "2020-12-24T12:48:14Z", "message": "Move time arrays to DeviceTimeIndex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74e06c8f024daa5ad464db795bdacf320a83798", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/a74e06c8f024daa5ad464db795bdacf320a83798", "committedDate": "2020-12-25T11:26:25Z", "message": "Add configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced7b03432a693ee47ee4c82a5d108a86d31c95f", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/ced7b03432a693ee47ee4c82a5d108a86d31c95f", "committedDate": "2020-12-25T11:46:36Z", "message": "Modify RemoteTsFileResource for cluster"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODA5NTg4", "url": "https://github.com/apache/iotdb/pull/2340#pullrequestreview-558809588", "createdAt": "2020-12-25T11:56:06Z", "commit": {"oid": "ced7b03432a693ee47ee4c82a5d108a86d31c95f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMTo1NjowNlrOILb7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMTo1NjowNlrOILb7UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg2MjgwMA==", "bodyText": "We need some comment on the interface", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r548862800", "createdAt": "2020-12-25T11:56:06Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+import org.apache.iotdb.db.rescon.CachedStringPool;\n+\n+public interface ITimeIndex {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced7b03432a693ee47ee4c82a5d108a86d31c95f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d76f26d2c95bfa2f7ec2f8e90c75ad3a376b5d3d", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/d76f26d2c95bfa2f7ec2f8e90c75ad3a376b5d3d", "committedDate": "2020-12-25T12:39:26Z", "message": "Fix sonar and add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "committedDate": "2020-12-25T12:48:52Z", "message": "Fix sonar"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODE0MzI1", "url": "https://github.com/apache/iotdb/pull/2340#pullrequestreview-558814325", "createdAt": "2020-12-25T13:01:37Z", "commit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODE0NDQ0", "url": "https://github.com/apache/iotdb/pull/2340#pullrequestreview-558814444", "createdAt": "2020-12-25T13:03:35Z", "commit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MDQ5MTc2", "url": "https://github.com/apache/iotdb/pull/2340#pullrequestreview-559049176", "createdAt": "2020-12-28T08:46:41Z", "commit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwODo0Njo0MVrOIL0dtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0MDoyN1rOIL1fpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI2NDgyMw==", "bodyText": "I think you may continue here since you have found that the file does not contain the device.", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549264823", "createdAt": "2020-12-28T08:46:41Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1558,10 +1516,14 @@ private void logDeletion(long startTime, long endTime, PartialPath path)\n   private boolean canSkipDelete(TsFileResource tsFileResource, Set<PartialPath> devicePaths,\n       long deleteStart, long deleteEnd) {\n     for (PartialPath device : devicePaths) {\n-      if (tsFileResource.containsDevice(device.getFullPath()) &&\n-          (deleteEnd >= tsFileResource.getStartTime(device.getFullPath()) &&\n-              deleteStart <= tsFileResource\n-                  .getOrDefaultEndTime(device.getFullPath(), Long.MAX_VALUE))) {\n+      String deviceId = device.getFullPath();\n+      long endTime = tsFileResource.getEndTime(deviceId);\n+      if (endTime == Long.MIN_VALUE) {\n+        endTime = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MDQzNw==", "bodyText": "You use getAbsolutePath() previously but toString() here, will this make any difference?", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549270437", "createdAt": "2020-12-28T09:04:23Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileResource.java", "diffHunk": "@@ -700,31 +571,7 @@ public long getTimePartition() {\n    * @throws PartitionViolationException if the data of the file cross partitions or it is empty\n    */\n   public long getTimePartitionWithCheck() throws PartitionViolationException {\n-    long partitionId = -1;\n-    for (Long startTime : startTimes) {\n-      long p = StorageEngine.getTimePartition(startTime);\n-      if (partitionId == -1) {\n-        partitionId = p;\n-      } else {\n-        if (partitionId != p) {\n-          throw new PartitionViolationException(this);\n-        }\n-      }\n-    }\n-    for (Long endTime : endTimes) {\n-      long p = StorageEngine.getTimePartition(endTime);\n-      if (partitionId == -1) {\n-        partitionId = p;\n-      } else {\n-        if (partitionId != p) {\n-          throw new PartitionViolationException(this);\n-        }\n-      }\n-    }\n-    if (partitionId == -1) {\n-      throw new PartitionViolationException(this);\n-    }\n-    return partitionId;\n+    return timeIndex.getTimePartitionWithCheck(file.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 492}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MTc4OQ==", "bodyText": "Maybe we can record the device number of the last TsFile in each storage group, and use them to initialize because it is reasonable to assume that the adjacent files should have similar numbers of devices.", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549271789", "createdAt": "2020-12-28T09:08:41Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.iotdb.db.engine.StorageEngine;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+import org.apache.iotdb.db.rescon.CachedStringPool;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n+import org.apache.iotdb.db.utils.SerializeUtils;\n+import org.apache.iotdb.tsfile.utils.RamUsageEstimator;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+public class DeviceTimeIndex implements ITimeIndex {\n+\n+  protected static final int INIT_ARRAY_SIZE = 64;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MzA3NA==", "bodyText": "How about serializing the three fields in a columnar style? This way we may be able to encode them.", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549273074", "createdAt": "2020-12-28T09:13:11Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.iotdb.db.engine.StorageEngine;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+import org.apache.iotdb.db.rescon.CachedStringPool;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n+import org.apache.iotdb.db.utils.SerializeUtils;\n+import org.apache.iotdb.tsfile.utils.RamUsageEstimator;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+public class DeviceTimeIndex implements ITimeIndex {\n+\n+  protected static final int INIT_ARRAY_SIZE = 64;\n+\n+  protected static final Map<String, String> cachedDevicePool = CachedStringPool.getInstance()\n+      .getCachedPool();\n+\n+  /**\n+   * start times array.\n+   */\n+  protected long[] startTimes;\n+\n+  /**\n+   * end times array. The values in this array are Long.MIN_VALUE if it's an unsealed sequence\n+   * tsfile\n+   */\n+  protected long[] endTimes;\n+\n+  /**\n+   * device -> index of start times array and end times array\n+   */\n+  protected Map<String, Integer> deviceToIndex;\n+\n+  public DeviceTimeIndex() {\n+    init();\n+  }\n+\n+  public DeviceTimeIndex(Map<String, Integer> deviceToIndex, long[] startTimes, long[] endTimes) {\n+    this.startTimes = startTimes;\n+    this.endTimes = endTimes;\n+    this.deviceToIndex = deviceToIndex;\n+  }\n+\n+  @Override\n+  public void init() {\n+    this.deviceToIndex = new ConcurrentHashMap<>();\n+    this.startTimes = new long[INIT_ARRAY_SIZE];\n+    this.endTimes = new long[INIT_ARRAY_SIZE];\n+    initTimes(startTimes, Long.MAX_VALUE);\n+    initTimes(endTimes, Long.MIN_VALUE);\n+  }\n+\n+  @Override\n+  public void serialize(OutputStream outputStream) throws IOException {\n+    ReadWriteIOUtils.write(deviceToIndex.size(), outputStream);\n+    for (Entry<String, Integer> entry : deviceToIndex.entrySet()) {\n+      ReadWriteIOUtils.write(entry.getKey(), outputStream);\n+      ReadWriteIOUtils.write(startTimes[entry.getValue()], outputStream);\n+      ReadWriteIOUtils.write(endTimes[entry.getValue()], outputStream);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NzkyNA==", "bodyText": "This method is a bit confusing. What is this method used for? Or what should the caller expect when calling it?", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549277924", "createdAt": "2020-12-28T09:27:43Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+\n+public interface ITimeIndex {\n+\n+  /**\n+   * init startTimes with Long.MAX_VALUE, endTimes with Long.MIN_VALUE\n+   */\n+  void init();\n+\n+  /**\n+   * serialize to outputStream\n+   *\n+   * @param outputStream outputStream\n+   */\n+  void serialize(OutputStream outputStream) throws IOException;\n+\n+  /**\n+   * deserialize from inputStream\n+   *\n+   * @param inputStream inputStream\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(InputStream inputStream) throws IOException;\n+\n+  /**\n+   * deserialize from byte buffer\n+   *\n+   * @param buffer byte buffer\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(ByteBuffer buffer);\n+\n+  /**\n+   * called by TsFileResource.close()\n+   */\n+  void close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3ODE2OQ==", "bodyText": "What does \"initial resource map\" mean?", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549278169", "createdAt": "2020-12-28T09:28:30Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+\n+public interface ITimeIndex {\n+\n+  /**\n+   * init startTimes with Long.MAX_VALUE, endTimes with Long.MIN_VALUE\n+   */\n+  void init();\n+\n+  /**\n+   * serialize to outputStream\n+   *\n+   * @param outputStream outputStream\n+   */\n+  void serialize(OutputStream outputStream) throws IOException;\n+\n+  /**\n+   * deserialize from inputStream\n+   *\n+   * @param inputStream inputStream\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(InputStream inputStream) throws IOException;\n+\n+  /**\n+   * deserialize from byte buffer\n+   *\n+   * @param buffer byte buffer\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(ByteBuffer buffer);\n+\n+  /**\n+   * called by TsFileResource.close()\n+   */\n+  void close();\n+\n+  /**\n+   * get devices in TimeIndex\n+   *\n+   * @return device names\n+   */\n+  Set<String> getDevices();\n+\n+  /**\n+   * @return whether end time is empty (Long.MIN_VALUE)\n+   */\n+  boolean endTimeEmpty();\n+\n+  /**\n+   * @param timeLowerBound time lower bound\n+   * @return whether any of the device lives over the given time bound\n+   */\n+  boolean stillLives(long timeLowerBound);\n+\n+  /**\n+   * @return initial resource map size\n+   */\n+  long calculateRamSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3OTMzMw==", "bodyText": "No files are involved previously, yet a file is introduced here. What is the relationship between the file and the ITimeIndex?", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549279333", "createdAt": "2020-12-28T09:32:34Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+\n+public interface ITimeIndex {\n+\n+  /**\n+   * init startTimes with Long.MAX_VALUE, endTimes with Long.MIN_VALUE\n+   */\n+  void init();\n+\n+  /**\n+   * serialize to outputStream\n+   *\n+   * @param outputStream outputStream\n+   */\n+  void serialize(OutputStream outputStream) throws IOException;\n+\n+  /**\n+   * deserialize from inputStream\n+   *\n+   * @param inputStream inputStream\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(InputStream inputStream) throws IOException;\n+\n+  /**\n+   * deserialize from byte buffer\n+   *\n+   * @param buffer byte buffer\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(ByteBuffer buffer);\n+\n+  /**\n+   * called by TsFileResource.close()\n+   */\n+  void close();\n+\n+  /**\n+   * get devices in TimeIndex\n+   *\n+   * @return device names\n+   */\n+  Set<String> getDevices();\n+\n+  /**\n+   * @return whether end time is empty (Long.MIN_VALUE)\n+   */\n+  boolean endTimeEmpty();\n+\n+  /**\n+   * @param timeLowerBound time lower bound\n+   * @return whether any of the device lives over the given time bound\n+   */\n+  boolean stillLives(long timeLowerBound);\n+\n+  /**\n+   * @return initial resource map size\n+   */\n+  long calculateRamSize();\n+\n+  /**\n+   * Calculate the resource ram increment when insert data in TsFileProcessor\n+   *\n+   * @param deviceToBeChecked device to be checked\n+   * @return ramIncrement\n+   */\n+  long estimateRamIncrement(String deviceToBeChecked);\n+\n+  /**\n+   * get time partition\n+   *\n+   * @param file file path\n+   * @return partition\n+   */\n+  long getTimePartition(String file);\n+\n+  /**\n+   * get time partition with check. If data of file cross partitions, an exception will be thrown\n+   *\n+   * @param file file absolute path\n+   * @return partition\n+   * @throws PartitionViolationException data of file cross partitions\n+   */\n+  long getTimePartitionWithCheck(String file) throws PartitionViolationException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MTcwMg==", "bodyText": "Although FILE_TIME_INDEX is provided, ITimeIndex is heavily bound to devices, as many of its methods involve devices, which leaves FileTimeIndex in an embarrassing position. Maybe it would be better to do some abstraction between DeviceTimeIndex and ITimeIndex and put device-related methods into this abstraction.", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549281702", "createdAt": "2020-12-28T09:40:27Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/TimeIndexLevel.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+public enum TimeIndexLevel {\n+  FILE_TIME_INDEX, DEVICE_TIME_INDEX;\n+\n+  public ITimeIndex getTimeIndex() {\n+    switch (this) {\n+      case FILE_TIME_INDEX:\n+        return new FileTimeIndex();\n+      case DEVICE_TIME_INDEX:\n+      default:\n+        return new DeviceTimeIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c088b71834b23760d111a4596f3538c313904f", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/f3c088b71834b23760d111a4596f3538c313904f", "committedDate": "2020-12-28T11:05:40Z", "message": "Fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85af5935a045a93e70210f7ddfc0639986dacad", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/c85af5935a045a93e70210f7ddfc0639986dacad", "committedDate": "2020-12-28T11:53:25Z", "message": "Fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe84c7a95ff0277368b80fc0915dfcce7a79617", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/8fe84c7a95ff0277368b80fc0915dfcce7a79617", "committedDate": "2020-12-30T06:51:58Z", "message": "[IOTDB-1076] Record the device number of the last TsFile in each storage group (#2379)\n\n* Record the device number of the last TsFile in each storage group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de4a1bb1a22a2a857100a599eade1f87f67dedfc", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/de4a1bb1a22a2a857100a599eade1f87f67dedfc", "committedDate": "2020-12-30T06:54:02Z", "message": "Merge remote-tracking branch 'origin/master' into time_index\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/conf/IoTDBDescriptor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27029747ea27b3810f93bfc17acb3f496d8841b", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/d27029747ea27b3810f93bfc17acb3f496d8841b", "committedDate": "2021-01-06T06:48:27Z", "message": "Add version number and time index type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1445dc41772718e79419ef4a52c241e52e91934c", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/1445dc41772718e79419ef4a52c241e52e91934c", "committedDate": "2021-01-06T08:54:29Z", "message": "Fix sonar and update change list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyNDIwMDA2", "url": "https://github.com/apache/iotdb/pull/2340#pullrequestreview-562420006", "createdAt": "2021-01-06T08:59:49Z", "commit": {"oid": "1445dc41772718e79419ef4a52c241e52e91934c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3981, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}