{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTc2Mzgy", "number": 1112, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTowMjoxN1rOD3idsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0ODo1MVrOD5pDqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTYyOTI5OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterFillExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTowMjoxN1rOGN17rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTo1NToxN1rOGN3uHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2ODMwMg==", "bodyText": "The class is moved to another package and modified, you should remove it.", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r417168302", "createdAt": "2020-04-29T09:02:17Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterFillExecutor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.query;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.cluster.server.member.MetaGroupMember;\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.executor.FillQueryExecutor;\n+import org.apache.iotdb.db.query.fill.IFill;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+\n+public class ClusterFillExecutor extends FillQueryExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213e38a6b3f01b56b46112e8179a83efe3578053"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NzU5Nw==", "bodyText": "Sure. I will fix it~", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r417197597", "createdAt": "2020-04-29T09:55:17Z", "author": {"login": "SilverNarcissus"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterFillExecutor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.query;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.cluster.server.member.MetaGroupMember;\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.executor.FillQueryExecutor;\n+import org.apache.iotdb.db.query.fill.IFill;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+\n+public class ClusterFillExecutor extends FillQueryExecutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2ODMwMg=="}, "originalCommit": {"oid": "213e38a6b3f01b56b46112e8179a83efe3578053"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjAxNDAyOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDo1Njo1M1rOGN5qCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjo0NDoxMVrOGN9Diw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTMyMw==", "bodyText": "I've found that this way of appendEntries has a high concurrency bug, this is the fix document. Please refer to function appendEntry's implementation.", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r417229323", "createdAt": "2020-04-29T10:56:53Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -384,7 +385,89 @@ public void appendEntry(AppendEntryRequest request, AsyncMethodCallback resultHa\n \n   @Override\n   public void appendEntries(AppendEntriesRequest request, AsyncMethodCallback resultHandler) {\n-    //TODO-Cluster#354: implement\n+    logger.debug(\"{} received an AppendEntriesRequest\", name);\n+\n+    // the term checked here is that of the leader, not that of the log\n+    if (!checkRequestTerm(request, resultHandler)) {\n+      return;\n+    }\n+\n+    try {\n+      long response = 0;\n+      List<Log> logs = new ArrayList<>();\n+      for (ByteBuffer buffer : request.getEntries()) {\n+        Log log = LogParser.getINSTANCE().parse(buffer);\n+        logs.add(log);\n+      }\n+\n+      response = appendEntries(logs);\n+      resultHandler.onComplete(response);\n+      logger.debug(\"{} AppendEntriesRequest of log size {} completed\", name,\n+          request.getEntries().size());\n+    } catch (UnknownLogTypeException e) {\n+      resultHandler.onError(e);\n+    }\n+  }\n+\n+  /**\n+   * Find the local previous log of \"log\". If such log is found, discard all local logs behind it\n+   * and append \"log\" to it. Otherwise report a log mismatch.\n+   *\n+   * @param logs\n+   * @return Response.RESPONSE_AGREE when the log is successfully appended or Response\n+   * .RESPONSE_LOG_MISMATCH if the previous log of \"log\" is not found.\n+   */\n+  private long appendEntries(List<Log> logs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4eab24696a232cf667df7bfee8c45d745f0ab37"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNzk2NQ==", "bodyText": "I guess LebronAl is talking about the chance that the logs are disjoint with the local last log, but as appendEntries is only used in catch-up, I think the possibility of that case is relatively low.\nStill, it would be better to check the index of the first coming log and the last local log, which I previously hoped to be done inside the LogManager. As you can see, other users may not bother to do the checks (the may not know the checks actually), so any necessary checks are better to be done within underlined classes.", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r417237965", "createdAt": "2020-04-29T11:14:40Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -384,7 +385,89 @@ public void appendEntry(AppendEntryRequest request, AsyncMethodCallback resultHa\n \n   @Override\n   public void appendEntries(AppendEntriesRequest request, AsyncMethodCallback resultHandler) {\n-    //TODO-Cluster#354: implement\n+    logger.debug(\"{} received an AppendEntriesRequest\", name);\n+\n+    // the term checked here is that of the leader, not that of the log\n+    if (!checkRequestTerm(request, resultHandler)) {\n+      return;\n+    }\n+\n+    try {\n+      long response = 0;\n+      List<Log> logs = new ArrayList<>();\n+      for (ByteBuffer buffer : request.getEntries()) {\n+        Log log = LogParser.getINSTANCE().parse(buffer);\n+        logs.add(log);\n+      }\n+\n+      response = appendEntries(logs);\n+      resultHandler.onComplete(response);\n+      logger.debug(\"{} AppendEntriesRequest of log size {} completed\", name,\n+          request.getEntries().size());\n+    } catch (UnknownLogTypeException e) {\n+      resultHandler.onError(e);\n+    }\n+  }\n+\n+  /**\n+   * Find the local previous log of \"log\". If such log is found, discard all local logs behind it\n+   * and append \"log\" to it. Otherwise report a log mismatch.\n+   *\n+   * @param logs\n+   * @return Response.RESPONSE_AGREE when the log is successfully appended or Response\n+   * .RESPONSE_LOG_MISMATCH if the previous log of \"log\" is not found.\n+   */\n+  private long appendEntries(List<Log> logs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTMyMw=="}, "originalCommit": {"oid": "f4eab24696a232cf667df7bfee8c45d745f0ab37"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NTAwMw==", "bodyText": "Actually,I used to think that the interface raftLogManager exposed to followers to append logs was maybeAppend, and in that function we can handle this check, but now appendEntry's RPC doesn't have lastLogTerm, lastLogIndex, leaderCommit. So i have to use append . This is indeed a not very good implementation, let me solve it.\nSo now we can either add some fields to the appendEntry rpc to support the use of maybeAppend, or we can do this check inside append. What's your opinion?", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r417285003", "createdAt": "2020-04-29T12:44:11Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -384,7 +385,89 @@ public void appendEntry(AppendEntryRequest request, AsyncMethodCallback resultHa\n \n   @Override\n   public void appendEntries(AppendEntriesRequest request, AsyncMethodCallback resultHandler) {\n-    //TODO-Cluster#354: implement\n+    logger.debug(\"{} received an AppendEntriesRequest\", name);\n+\n+    // the term checked here is that of the leader, not that of the log\n+    if (!checkRequestTerm(request, resultHandler)) {\n+      return;\n+    }\n+\n+    try {\n+      long response = 0;\n+      List<Log> logs = new ArrayList<>();\n+      for (ByteBuffer buffer : request.getEntries()) {\n+        Log log = LogParser.getINSTANCE().parse(buffer);\n+        logs.add(log);\n+      }\n+\n+      response = appendEntries(logs);\n+      resultHandler.onComplete(response);\n+      logger.debug(\"{} AppendEntriesRequest of log size {} completed\", name,\n+          request.getEntries().size());\n+    } catch (UnknownLogTypeException e) {\n+      resultHandler.onError(e);\n+    }\n+  }\n+\n+  /**\n+   * Find the local previous log of \"log\". If such log is found, discard all local logs behind it\n+   * and append \"log\" to it. Otherwise report a log mismatch.\n+   *\n+   * @param logs\n+   * @return Response.RESPONSE_AGREE when the log is successfully appended or Response\n+   * .RESPONSE_LOG_MISMATCH if the previous log of \"log\" is not found.\n+   */\n+  private long appendEntries(List<Log> logs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTMyMw=="}, "originalCommit": {"oid": "f4eab24696a232cf667df7bfee8c45d745f0ab37"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTA2NDIyOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjoxNTo0OFrOGOXaDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTowMToyNlrOGRA3ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjc1MQ==", "bodyText": "I think maybe it's better to make useBatch a configuration item instead of calling it manually every time", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r417716751", "createdAt": "2020-04-30T02:15:48Z", "author": {"login": "LebronAl"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -39,17 +43,25 @@\n public class LogCatchUpTask implements Runnable {\n \n   private static final Logger logger = LoggerFactory.getLogger(LogCatchUpTask.class);\n-\n-  private List<Log> logs;\n+  private static final int LOG_NUM_IN_BATCH = 128;\n   Node node;\n   RaftMember raftMember;\n+  private List<Log> logs;\n+  private boolean useBatch = false;\n \n   public LogCatchUpTask(List<Log> logs, Node node, RaftMember raftMember) {\n     this.logs = logs;\n     this.node = node;\n     this.raftMember = raftMember;\n   }\n \n+  public LogCatchUpTask(List<Log> logs, Node node, RaftMember raftMember, boolean useBatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227868f37dfbfa94ab123dc8999f7b21e6cd5129"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MzIxOQ==", "bodyText": "Sure, I will fix it", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r420493219", "createdAt": "2020-05-06T01:01:26Z", "author": {"login": "SilverNarcissus"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -39,17 +43,25 @@\n public class LogCatchUpTask implements Runnable {\n \n   private static final Logger logger = LoggerFactory.getLogger(LogCatchUpTask.class);\n-\n-  private List<Log> logs;\n+  private static final int LOG_NUM_IN_BATCH = 128;\n   Node node;\n   RaftMember raftMember;\n+  private List<Log> logs;\n+  private boolean useBatch = false;\n \n   public LogCatchUpTask(List<Log> logs, Node node, RaftMember raftMember) {\n     this.logs = logs;\n     this.node = node;\n     this.raftMember = raftMember;\n   }\n \n+  public LogCatchUpTask(List<Log> logs, Node node, RaftMember raftMember, boolean useBatch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjc1MQ=="}, "originalCommit": {"oid": "227868f37dfbfa94ab123dc8999f7b21e6cd5129"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3NzI0OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0NjoxNVrOGRBhDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjoyNzoxNVrOGRQi4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzgyMw==", "bodyText": "LebronAl has now provided a safer method called maybeAppendBatch in RaftLogManager, please switch to that and check the return value.", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r420503823", "createdAt": "2020-05-06T01:46:15Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -398,7 +399,92 @@ public void appendEntry(AppendEntryRequest request, AsyncMethodCallback resultHa\n \n   @Override\n   public void appendEntries(AppendEntriesRequest request, AsyncMethodCallback resultHandler) {\n-    //TODO-Cluster#354: implement\n+    logger.debug(\"{} received an AppendEntriesRequest\", name);\n+\n+    // the term checked here is that of the leader, not that of the log\n+    if (!checkRequestTerm(request, resultHandler)) {\n+      return;\n+    }\n+\n+    try {\n+      long response = 0;\n+      List<Log> logs = new ArrayList<>();\n+      for (ByteBuffer buffer : request.getEntries()) {\n+        Log log = LogParser.getINSTANCE().parse(buffer);\n+        logs.add(log);\n+      }\n+\n+      response = appendEntries(logs);\n+      resultHandler.onComplete(response);\n+      logger.debug(\"{} AppendEntriesRequest of log size {} completed\", name,\n+          request.getEntries().size());\n+    } catch (UnknownLogTypeException e) {\n+      resultHandler.onError(e);\n+    }\n+  }\n+\n+  /**\n+   * Find the local previous log of \"log\". If such log is found, discard all local logs behind it\n+   * and append \"log\" to it. Otherwise report a log mismatch.\n+   *\n+   * @param logs\n+   * @return Response.RESPONSE_AGREE when the log is successfully appended or Response\n+   * .RESPONSE_LOG_MISMATCH if the previous log of \"log\" is not found.\n+   */\n+  private long appendEntries(List<Log> logs) {\n+    if (logs.isEmpty()) {\n+      return Response.RESPONSE_AGREE;\n+    }\n+\n+    long resp;\n+    synchronized (logManager) {\n+      if (logs.get(0).getCurrLogIndex() > logManager.getLastLogIndex() + 1) {\n+        // the incoming log points to an illegal position, reject it\n+        resp = Response.RESPONSE_LOG_MISMATCH;\n+      } else {\n+        logManager.append(logs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff6f79fa373dd1decf536e4bf5e97ee0242f2978"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1MDA1MA==", "bodyText": "Fine~ Fixed~", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r420750050", "createdAt": "2020-05-06T12:27:15Z", "author": {"login": "SilverNarcissus"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -398,7 +399,92 @@ public void appendEntry(AppendEntryRequest request, AsyncMethodCallback resultHa\n \n   @Override\n   public void appendEntries(AppendEntriesRequest request, AsyncMethodCallback resultHandler) {\n-    //TODO-Cluster#354: implement\n+    logger.debug(\"{} received an AppendEntriesRequest\", name);\n+\n+    // the term checked here is that of the leader, not that of the log\n+    if (!checkRequestTerm(request, resultHandler)) {\n+      return;\n+    }\n+\n+    try {\n+      long response = 0;\n+      List<Log> logs = new ArrayList<>();\n+      for (ByteBuffer buffer : request.getEntries()) {\n+        Log log = LogParser.getINSTANCE().parse(buffer);\n+        logs.add(log);\n+      }\n+\n+      response = appendEntries(logs);\n+      resultHandler.onComplete(response);\n+      logger.debug(\"{} AppendEntriesRequest of log size {} completed\", name,\n+          request.getEntries().size());\n+    } catch (UnknownLogTypeException e) {\n+      resultHandler.onError(e);\n+    }\n+  }\n+\n+  /**\n+   * Find the local previous log of \"log\". If such log is found, discard all local logs behind it\n+   * and append \"log\" to it. Otherwise report a log mismatch.\n+   *\n+   * @param logs\n+   * @return Response.RESPONSE_AGREE when the log is successfully appended or Response\n+   * .RESPONSE_LOG_MISMATCH if the previous log of \"log\" is not found.\n+   */\n+  private long appendEntries(List<Log> logs) {\n+    if (logs.isEmpty()) {\n+      return Response.RESPONSE_AGREE;\n+    }\n+\n+    long resp;\n+    synchronized (logManager) {\n+      if (logs.get(0).getCurrLogIndex() > logManager.getLastLogIndex() + 1) {\n+        // the incoming log points to an illegal position, reject it\n+        resp = Response.RESPONSE_LOG_MISMATCH;\n+      } else {\n+        logManager.append(logs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzgyMw=="}, "originalCommit": {"oid": "ff6f79fa373dd1decf536e4bf5e97ee0242f2978"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY4MTA1OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0ODo1MVrOGRBjMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjoyNzoxMVrOGRQivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDM2OQ==", "bodyText": "The implementation of checkRequestTerm for AppendEntryRequest has been changed slightly, so please see to it and make necessary modifications.\nBy the way, the log message should use AppendEntriesRequest here instead of AppendEntriesRequest.", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r420504369", "createdAt": "2020-05-06T01:48:51Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -398,7 +399,92 @@ public void appendEntry(AppendEntryRequest request, AsyncMethodCallback resultHa\n \n   @Override\n   public void appendEntries(AppendEntriesRequest request, AsyncMethodCallback resultHandler) {\n-    //TODO-Cluster#354: implement\n+    logger.debug(\"{} received an AppendEntriesRequest\", name);\n+\n+    // the term checked here is that of the leader, not that of the log\n+    if (!checkRequestTerm(request, resultHandler)) {\n+      return;\n+    }\n+\n+    try {\n+      long response = 0;\n+      List<Log> logs = new ArrayList<>();\n+      for (ByteBuffer buffer : request.getEntries()) {\n+        Log log = LogParser.getINSTANCE().parse(buffer);\n+        logs.add(log);\n+      }\n+\n+      response = appendEntries(logs);\n+      resultHandler.onComplete(response);\n+      logger.debug(\"{} AppendEntriesRequest of log size {} completed\", name,\n+          request.getEntries().size());\n+    } catch (UnknownLogTypeException e) {\n+      resultHandler.onError(e);\n+    }\n+  }\n+\n+  /**\n+   * Find the local previous log of \"log\". If such log is found, discard all local logs behind it\n+   * and append \"log\" to it. Otherwise report a log mismatch.\n+   *\n+   * @param logs\n+   * @return Response.RESPONSE_AGREE when the log is successfully appended or Response\n+   * .RESPONSE_LOG_MISMATCH if the previous log of \"log\" is not found.\n+   */\n+  private long appendEntries(List<Log> logs) {\n+    if (logs.isEmpty()) {\n+      return Response.RESPONSE_AGREE;\n+    }\n+\n+    long resp;\n+    synchronized (logManager) {\n+      if (logs.get(0).getCurrLogIndex() > logManager.getLastLogIndex() + 1) {\n+        // the incoming log points to an illegal position, reject it\n+        resp = Response.RESPONSE_LOG_MISMATCH;\n+      } else {\n+        logManager.append(logs);\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(\"{} append new logs list {}\", name, logs);\n+        }\n+        resp = Response.RESPONSE_AGREE;\n+      }\n+    }\n+    return resp;\n+  }\n+\n+  /**\n+   * Check the term of the AppendEntryRequest. The term checked is the term of the leader, not the\n+   * term of the log. A new leader can still send logs of old leaders.\n+   *\n+   * @param request\n+   * @param resultHandler if the term is illegal, the \"resultHandler\" will be invoked so the caller\n+   *                      does not need to invoke it again\n+   * @return true if the term is legal, false otherwise\n+   */\n+  private boolean checkRequestTerm(AppendEntriesRequest request,\n+      AsyncMethodCallback resultHandler) {\n+    long leaderTerm = request.getTerm();\n+    long localTerm;\n+\n+    synchronized (term) {\n+      // if the request comes before the heartbeat arrives, the local term may be smaller than the\n+      // leader term\n+      localTerm = term.get();\n+      if (leaderTerm < localTerm) {\n+        logger.debug(\"{} rejected the AppendEntryRequest for term: {}/{}\", name, leaderTerm,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff6f79fa373dd1decf536e4bf5e97ee0242f2978"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1MDAxNQ==", "bodyText": "Fixed~", "url": "https://github.com/apache/iotdb/pull/1112#discussion_r420750015", "createdAt": "2020-05-06T12:27:11Z", "author": {"login": "SilverNarcissus"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/RaftMember.java", "diffHunk": "@@ -398,7 +399,92 @@ public void appendEntry(AppendEntryRequest request, AsyncMethodCallback resultHa\n \n   @Override\n   public void appendEntries(AppendEntriesRequest request, AsyncMethodCallback resultHandler) {\n-    //TODO-Cluster#354: implement\n+    logger.debug(\"{} received an AppendEntriesRequest\", name);\n+\n+    // the term checked here is that of the leader, not that of the log\n+    if (!checkRequestTerm(request, resultHandler)) {\n+      return;\n+    }\n+\n+    try {\n+      long response = 0;\n+      List<Log> logs = new ArrayList<>();\n+      for (ByteBuffer buffer : request.getEntries()) {\n+        Log log = LogParser.getINSTANCE().parse(buffer);\n+        logs.add(log);\n+      }\n+\n+      response = appendEntries(logs);\n+      resultHandler.onComplete(response);\n+      logger.debug(\"{} AppendEntriesRequest of log size {} completed\", name,\n+          request.getEntries().size());\n+    } catch (UnknownLogTypeException e) {\n+      resultHandler.onError(e);\n+    }\n+  }\n+\n+  /**\n+   * Find the local previous log of \"log\". If such log is found, discard all local logs behind it\n+   * and append \"log\" to it. Otherwise report a log mismatch.\n+   *\n+   * @param logs\n+   * @return Response.RESPONSE_AGREE when the log is successfully appended or Response\n+   * .RESPONSE_LOG_MISMATCH if the previous log of \"log\" is not found.\n+   */\n+  private long appendEntries(List<Log> logs) {\n+    if (logs.isEmpty()) {\n+      return Response.RESPONSE_AGREE;\n+    }\n+\n+    long resp;\n+    synchronized (logManager) {\n+      if (logs.get(0).getCurrLogIndex() > logManager.getLastLogIndex() + 1) {\n+        // the incoming log points to an illegal position, reject it\n+        resp = Response.RESPONSE_LOG_MISMATCH;\n+      } else {\n+        logManager.append(logs);\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(\"{} append new logs list {}\", name, logs);\n+        }\n+        resp = Response.RESPONSE_AGREE;\n+      }\n+    }\n+    return resp;\n+  }\n+\n+  /**\n+   * Check the term of the AppendEntryRequest. The term checked is the term of the leader, not the\n+   * term of the log. A new leader can still send logs of old leaders.\n+   *\n+   * @param request\n+   * @param resultHandler if the term is illegal, the \"resultHandler\" will be invoked so the caller\n+   *                      does not need to invoke it again\n+   * @return true if the term is legal, false otherwise\n+   */\n+  private boolean checkRequestTerm(AppendEntriesRequest request,\n+      AsyncMethodCallback resultHandler) {\n+    long leaderTerm = request.getTerm();\n+    long localTerm;\n+\n+    synchronized (term) {\n+      // if the request comes before the heartbeat arrives, the local term may be smaller than the\n+      // leader term\n+      localTerm = term.get();\n+      if (leaderTerm < localTerm) {\n+        logger.debug(\"{} rejected the AppendEntryRequest for term: {}/{}\", name, leaderTerm,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDM2OQ=="}, "originalCommit": {"oid": "ff6f79fa373dd1decf536e4bf5e97ee0242f2978"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 117, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}