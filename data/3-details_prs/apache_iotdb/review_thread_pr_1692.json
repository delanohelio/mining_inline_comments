{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNDA2OTgz", "number": 1692, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozNDozNlrOEgk4Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoyMzowMFrOEqlNUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0MTI2OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozNDozNlrOHNgB4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwOTowNzowNVrOHNgxZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODMwNA==", "bodyText": "can you add a comment to describe the structure of ResultSet?", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r483918304", "createdAt": "2020-09-05T06:34:36Z", "author": {"login": "jixuan1989"}, "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "diffHunk": "@@ -307,7 +307,7 @@ private static boolean queryDatabaseMeta(String[] strHeadInfo, File file, Buffer\n         ResultSet resultSet = statement.getResultSet();\n         try {\n           if (resultSet.next()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c28657d3d8ce5e66613394c51dd80ec6cbba02"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMDQ3MA==", "bodyText": "ok, I will add some description. Thank you for pointing this out.", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r483930470", "createdAt": "2020-09-05T09:07:05Z", "author": {"login": "mychaow"}, "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "diffHunk": "@@ -307,7 +307,7 @@ private static boolean queryDatabaseMeta(String[] strHeadInfo, File file, Buffer\n         ResultSet resultSet = statement.getResultSet();\n         try {\n           if (resultSet.next()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODMwNA=="}, "originalCommit": {"oid": "39c28657d3d8ce5e66613394c51dd80ec6cbba02"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTA5NTQ3OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo0NDo0NFrOHQQWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo0NzowNFrOHQSGKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNzA4MQ==", "bodyText": "could you add some comment...  give some example", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r486807081", "createdAt": "2020-09-11T06:44:44Z", "author": {"login": "qiaojialin"}, "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "diffHunk": "@@ -378,7 +388,12 @@ private static String createOneSql(Map.Entry<String, ArrayList<Integer>> entry,\n         continue;\n       }\n       if (timeseriesToType.get(headInfo.get(colIndex.get(j))).equals(STRING_DATA_TYPE)) {\n-        sbd.append(\", \\'\").append(data[colIndex.get(j) + 1]).append(\"\\'\");\n+        if ((data[colIndex.get(j) + 1].startsWith(\"'\") && data[colIndex.get(j) + 1].endsWith(\"'\")) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "598fa8e088bb3f677726a2c76a910dcfde44a21f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzNTc1NQ==", "bodyText": "ok", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r486835755", "createdAt": "2020-09-11T07:47:04Z", "author": {"login": "mychaow"}, "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "diffHunk": "@@ -378,7 +388,12 @@ private static String createOneSql(Map.Entry<String, ArrayList<Integer>> entry,\n         continue;\n       }\n       if (timeseriesToType.get(headInfo.get(colIndex.get(j))).equals(STRING_DATA_TYPE)) {\n-        sbd.append(\", \\'\").append(data[colIndex.get(j) + 1]).append(\"\\'\");\n+        if ((data[colIndex.get(j) + 1].startsWith(\"'\") && data[colIndex.get(j) + 1].endsWith(\"'\")) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNzA4MQ=="}, "originalCommit": {"oid": "598fa8e088bb3f677726a2c76a910dcfde44a21f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTEwNjY0OnYy", "diffSide": "RIGHT", "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/AbstractScript.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo0ODozNlrOHQQcjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo0ODozNlrOHQQcjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwODcxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<String> outputList = new ArrayList<>();\n          \n          \n            \n                List<String> actualOutput = new ArrayList<>();", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r486808718", "createdAt": "2020-09-11T06:48:36Z", "author": {"login": "qiaojialin"}, "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/AbstractScript.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.cross.tests.tools.importCsv;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class AbstractScript {\n+\n+  protected void testOutput(ProcessBuilder builder, String[] output) throws IOException {\n+    builder.redirectErrorStream(true);\n+    Process p = builder.start();\n+    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+    String line;\n+    List<String> outputList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "598fa8e088bb3f677726a2c76a910dcfde44a21f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTEwNzc3OnYy", "diffSide": "RIGHT", "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/AbstractScript.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo0ODo1N1rOHQQdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo0NzowMVrOHQSGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwODg3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  System.out.println(\"output:\" + output[i]);\n          \n          \n            \n                  System.out.println(\"outputList:\" + outputList.get(i));\n          \n          \n            \n                  System.out.println(\"expect:\" + output[i]);\n          \n          \n            \n                  System.out.println(\"actual:\" + outputList.get(i));\n          \n      \n    \n    \n  \n\nOr remove the print", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r486808876", "createdAt": "2020-09-11T06:48:57Z", "author": {"login": "qiaojialin"}, "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/AbstractScript.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.cross.tests.tools.importCsv;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class AbstractScript {\n+\n+  protected void testOutput(ProcessBuilder builder, String[] output) throws IOException {\n+    builder.redirectErrorStream(true);\n+    Process p = builder.start();\n+    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+    String line;\n+    List<String> outputList = new ArrayList<>();\n+    while (true) {\n+      line = r.readLine();\n+      if (line == null) {\n+        break;\n+      } else {\n+        outputList.add(line);\n+      }\n+    }\n+    r.close();\n+    p.destroy();\n+\n+    for (int i = 0; i < output.length; i++) {\n+      System.out.println(\"output:\" + output[i]);\n+      System.out.println(\"outputList:\" + outputList.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "598fa8e088bb3f677726a2c76a910dcfde44a21f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzNTczNQ==", "bodyText": "ok", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r486835735", "createdAt": "2020-09-11T07:47:01Z", "author": {"login": "mychaow"}, "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/AbstractScript.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.cross.tests.tools.importCsv;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class AbstractScript {\n+\n+  protected void testOutput(ProcessBuilder builder, String[] output) throws IOException {\n+    builder.redirectErrorStream(true);\n+    Process p = builder.start();\n+    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+    String line;\n+    List<String> outputList = new ArrayList<>();\n+    while (true) {\n+      line = r.readLine();\n+      if (line == null) {\n+        break;\n+      } else {\n+        outputList.add(line);\n+      }\n+    }\n+    r.close();\n+    p.destroy();\n+\n+    for (int i = 0; i < output.length; i++) {\n+      System.out.println(\"output:\" + output[i]);\n+      System.out.println(\"outputList:\" + outputList.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwODg3Ng=="}, "originalCommit": {"oid": "598fa8e088bb3f677726a2c76a910dcfde44a21f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDg1MjY1OnYy", "diffSide": "RIGHT", "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/AbstractScript.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoyMzowMFrOHc3d_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoyMzowMFrOHc3d_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzMDk3NQ==", "bodyText": "Hi, the ImportCsvTestIT keeps failing occasionally in windows environment of Travis these days. @Genius-pig could also reproduce this failure in his local PC. Could you please have another check? I created an issue in JIRA : )", "url": "https://github.com/apache/iotdb/pull/1692#discussion_r500030975", "createdAt": "2020-10-06T06:23:00Z", "author": {"login": "samperson1997"}, "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/AbstractScript.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.cross.tests.tools.importCsv;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class AbstractScript {\n+\n+  protected void testOutput(ProcessBuilder builder, String[] output) throws IOException {\n+    builder.redirectErrorStream(true);\n+    Process p = builder.start();\n+    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+    String line;\n+    List<String> actualOutput = new ArrayList<>();\n+    while (true) {\n+      line = r.readLine();\n+      if (line == null) {\n+        break;\n+      } else {\n+        actualOutput.add(line);\n+      }\n+    }\n+    r.close();\n+    p.destroy();\n+\n+    for (int i = 0; i < output.length; i++) {\n+      assertTrue(actualOutput.get(i).startsWith(output[i]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bf6ebdceeee858bd1b3fff7af08c56c60e2b33"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4700, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}