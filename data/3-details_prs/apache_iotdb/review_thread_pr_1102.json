{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDA4ODI2", "number": 1102, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxNzozOVrOD2c4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjo0NToyMlrOD2dPlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDIyODU3OnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxNzozOVrOGMN94A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoxNzozOVrOGMN94A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NDkyOA==", "bodyText": "Please find somewhere to add the documents about what configurations are supported even if it is only an empty list now.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415464928", "createdAt": "2020-04-27T02:17:39Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "diffHunk": "@@ -204,4 +206,53 @@ private void loadProps() {\n     }\n     return urlList;\n   }\n+\n+  public void loadHotModifiedProps() throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      logger.info(\"Start to reload config file {}\", url);\n+      Properties properties = new Properties();\n+      properties.load(inputStream);\n+      loadHotModifiedProps(properties, false);\n+    } catch (Exception e) {\n+      logger.warn(\"Fail to reload config file {}\", url, e);\n+      throw new QueryProcessException(\n+          String.format(\"Fail to reload config file %s because %s\", url, e.getMessage()));\n+    }\n+  }\n+\n+  public void loadHotModifiedProps(Properties properties, boolean toCheckProperties)\n+      throws QueryProcessException {\n+    if (toCheckProperties && !checkProperties(properties)) {\n+      throw new QueryProcessException(\n+          \"Failed to load configuration from properties because some are missing locally.\");\n+    }\n+    // TODO implement some hot modified properties to load\n+    logger.info(\"Set cluster configuration {}\", properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDI0NTMxOnYy", "diffSide": "RIGHT", "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoyNTowM1rOGMOGSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzoxMDozM1rOGMO4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzA4Mw==", "bodyText": "I am not sure if I got it right, but the parameter properties is loaded from getPropUrl() and you also load getPropUrl() into localProperties, so it seems that properties must be a subset of localProperties.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415467083", "createdAt": "2020-04-27T02:25:03Z", "author": {"login": "jt2594838"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "diffHunk": "@@ -204,4 +206,53 @@ private void loadProps() {\n     }\n     return urlList;\n   }\n+\n+  public void loadHotModifiedProps() throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      logger.info(\"Start to reload config file {}\", url);\n+      Properties properties = new Properties();\n+      properties.load(inputStream);\n+      loadHotModifiedProps(properties, false);\n+    } catch (Exception e) {\n+      logger.warn(\"Fail to reload config file {}\", url, e);\n+      throw new QueryProcessException(\n+          String.format(\"Fail to reload config file %s because %s\", url, e.getMessage()));\n+    }\n+  }\n+\n+  public void loadHotModifiedProps(Properties properties, boolean toCheckProperties)\n+      throws QueryProcessException {\n+    if (toCheckProperties && !checkProperties(properties)) {\n+      throw new QueryProcessException(\n+          \"Failed to load configuration from properties because some are missing locally.\");\n+    }\n+    // TODO implement some hot modified properties to load\n+    logger.info(\"Set cluster configuration {}\", properties);\n+  }\n+\n+  private boolean checkProperties(Properties properties) throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return false;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      Properties localProperties = System.getProperties();\n+      localProperties.load(inputStream);\n+      Set<String> localPropertyNames = localProperties.stringPropertyNames();\n+      for (String propertyName : properties.stringPropertyNames()) {\n+        if (!localPropertyNames.contains(propertyName)) {\n+          return false;\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTg5MQ==", "bodyText": "It seems that the check there is unnecessary. I will remove it.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415479891", "createdAt": "2020-04-27T03:10:33Z", "author": {"login": "Ring-k"}, "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "diffHunk": "@@ -204,4 +206,53 @@ private void loadProps() {\n     }\n     return urlList;\n   }\n+\n+  public void loadHotModifiedProps() throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      logger.info(\"Start to reload config file {}\", url);\n+      Properties properties = new Properties();\n+      properties.load(inputStream);\n+      loadHotModifiedProps(properties, false);\n+    } catch (Exception e) {\n+      logger.warn(\"Fail to reload config file {}\", url, e);\n+      throw new QueryProcessException(\n+          String.format(\"Fail to reload config file %s because %s\", url, e.getMessage()));\n+    }\n+  }\n+\n+  public void loadHotModifiedProps(Properties properties, boolean toCheckProperties)\n+      throws QueryProcessException {\n+    if (toCheckProperties && !checkProperties(properties)) {\n+      throw new QueryProcessException(\n+          \"Failed to load configuration from properties because some are missing locally.\");\n+    }\n+    // TODO implement some hot modified properties to load\n+    logger.info(\"Set cluster configuration {}\", properties);\n+  }\n+\n+  private boolean checkProperties(Properties properties) throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return false;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      Properties localProperties = System.getProperties();\n+      localProperties.load(inputStream);\n+      Set<String> localPropertyNames = localProperties.stringPropertyNames();\n+      for (String propertyName : properties.stringPropertyNames()) {\n+        if (!localPropertyNames.contains(propertyName)) {\n+          return false;\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzA4Mw=="}, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDI3MDMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjozNjozOVrOGMOTCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzoxNTo1MVrOGMO90A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDM0NA==", "bodyText": "Please remove this.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415470344", "createdAt": "2020-04-27T02:36:39Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }\n+          stream.writeInt(propertiesMap.size());\n+          for(Entry entry : propertiesMap.entrySet()){\n+            putString(stream, String.valueOf(entry.getKey()));\n+            putString(stream, String.valueOf(entry.getValue()));\n+          }\n+//          ReadWriteIOUtils.write(propertiesMap, stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4MTI5Ng==", "bodyText": "Thanks for your reminding.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415481296", "createdAt": "2020-04-27T03:15:51Z", "author": {"login": "Ring-k"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }\n+          stream.writeInt(propertiesMap.size());\n+          for(Entry entry : propertiesMap.entrySet()){\n+            putString(stream, String.valueOf(entry.getKey()));\n+            putString(stream, String.valueOf(entry.getValue()));\n+          }\n+//          ReadWriteIOUtils.write(propertiesMap, stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDM0NA=="}, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDI3NjQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjozOTozOFrOGMOWOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzoxNjoxOVrOGMO-bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MTE2MA==", "bodyText": "I wonder if it is necessary to put the properties into a new map, as you have the entrySet, you can just write them into the stream within this loop.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415471160", "createdAt": "2020-04-27T02:39:38Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4MTQ1Mw==", "bodyText": "Thanks. It is not necessary.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415481453", "createdAt": "2020-04-27T03:16:19Z", "author": {"login": "Ring-k"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MTE2MA=="}, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDI4ODIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjo0NToyMlrOGMOcJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjo0NToyMlrOGMOcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MjY3OA==", "bodyText": "Maybe you could just use Properties.setProperty and discard the map.", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415472678", "createdAt": "2020-04-27T02:45:22Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }\n+          stream.writeInt(propertiesMap.size());\n+          for(Entry entry : propertiesMap.entrySet()){\n+            putString(stream, String.valueOf(entry.getKey()));\n+            putString(stream, String.valueOf(entry.getValue()));\n+          }\n+//          ReadWriteIOUtils.write(propertiesMap, stream);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuffer buffer) {\n+    loadConfigurationPlanType = LoadConfigurationPlanType.values()[buffer.getInt()];\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      int propertiesNum = buffer.getInt();\n+      propertiesArray = new Properties[propertiesNum];\n+      for (int i = 0; i < propertiesArray.length; i++) {\n+        if (buffer.getInt() == 1) {\n+          propertiesArray[i] = new Properties();\n+          int size = buffer.getInt();\n+          Map<String, String> values = new HashMap<>(size);\n+          for(int j = 0; j < size; j++){\n+            values.put(readString(buffer), readString(buffer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 108, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}