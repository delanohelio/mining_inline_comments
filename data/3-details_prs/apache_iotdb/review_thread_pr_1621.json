{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODQ3ODIy", "number": 1621, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNDowM1rOEazciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyODoyM1rOEe0ZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQxMzIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNDowM1rOHEcrGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowNTo0NlrOHEeLDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjEzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String column = path.getTsAlias() != null ? path.getTsAlias() : null;\n          \n          \n            \n                    String column = path.getTsAlias();", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r474426139", "createdAt": "2020-08-21T06:04:03Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -664,11 +674,9 @@ private void deduplicate(QueryPlan queryPlan) throws MetadataException {\n     if (queryPlan instanceof LastQueryPlan) {\n       for (int i = 0; i < paths.size(); i++) {\n         Path path = paths.get(i);\n-        String column;\n-        if (path.getAlias() != null) {\n-          column = path.getFullPathWithAlias();\n-        } else {\n-          column = path.toString();\n+        String column = path.getTsAlias() != null ? path.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8a5d0e0e5b1ad1771d76152fb43a819eedca17"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MDcwMw==", "bodyText": "Sorry...Fixed.", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r474450703", "createdAt": "2020-08-21T07:05:46Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -664,11 +674,9 @@ private void deduplicate(QueryPlan queryPlan) throws MetadataException {\n     if (queryPlan instanceof LastQueryPlan) {\n       for (int i = 0; i < paths.size(); i++) {\n         Path path = paths.get(i);\n-        String column;\n-        if (path.getAlias() != null) {\n-          column = path.getFullPathWithAlias();\n-        } else {\n-          column = path.toString();\n+        String column = path.getTsAlias() != null ? path.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjEzOQ=="}, "originalCommit": {"oid": "0b8a5d0e0e5b1ad1771d76152fb43a819eedca17"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTQyNjAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowOTozMFrOHEcyLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowNTo1MlrOHEeLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNzk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String column = indexedPath.left.getTsAlias() != null ? indexedPath.left.getTsAlias() : null;\n          \n          \n            \n                  String column = indexedPath.left.getTsAlias();", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r474427951", "createdAt": "2020-08-21T06:09:30Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -689,14 +697,14 @@ private void deduplicate(QueryPlan queryPlan) throws MetadataException {\n \n     int index = 0;\n     for (Pair<Path, Integer> indexedPath : indexedPaths) {\n-      String column;\n-      if (indexedPath.left.getAlias() != null) {\n-        column = indexedPath.left.getFullPathWithAlias();\n-      } else {\n-        column = indexedPath.left.toString();\n-      }\n-      if (queryPlan instanceof AggregationPlan) {\n-        column = queryPlan.getAggregations().get(indexedPath.right) + \"(\" + column + \")\";\n+      // judge whether as clause is used or not first\n+      String column = indexedPath.left.getTsAlias() != null ? indexedPath.left.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8a5d0e0e5b1ad1771d76152fb43a819eedca17"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MDc3NA==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r474450774", "createdAt": "2020-08-21T07:05:52Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -689,14 +697,14 @@ private void deduplicate(QueryPlan queryPlan) throws MetadataException {\n \n     int index = 0;\n     for (Pair<Path, Integer> indexedPath : indexedPaths) {\n-      String column;\n-      if (indexedPath.left.getAlias() != null) {\n-        column = indexedPath.left.getFullPathWithAlias();\n-      } else {\n-        column = indexedPath.left.toString();\n-      }\n-      if (queryPlan instanceof AggregationPlan) {\n-        column = queryPlan.getAggregations().get(indexedPath.right) + \"(\" + column + \")\";\n+      // judge whether as clause is used or not first\n+      String column = indexedPath.left.getTsAlias() != null ? indexedPath.left.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNzk1MQ=="}, "originalCommit": {"oid": "0b8a5d0e0e5b1ad1771d76152fb43a819eedca17"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTUxNTAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjo0ODo1MFrOHEdmww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowNTo1OFrOHEeLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MTQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      String column = path.getTsAlias() != null ? path.getTsAlias() : null;\n          \n          \n            \n                      String column = path.getTsAlias();", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r474441411", "createdAt": "2020-08-21T06:48:50Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -788,11 +787,15 @@ private void getWideQueryHeaders(\n           }\n         }\n         for (int i = 0; i < paths.size(); i++) {\n-          if (paths.get(i).getAlias() != null) {\n-            respColumns.add(aggregations.get(i) + \"(\" + paths.get(i).getFullPathWithAlias() + \")\");\n-          } else {\n-            respColumns.add(aggregations.get(i) + \"(\" + paths.get(i).getFullPath() + \")\");\n+          Path path = paths.get(i);\n+          // judge whether as clause is used or not first\n+          String column = path.getTsAlias() != null ? path.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8a5d0e0e5b1ad1771d76152fb43a819eedca17"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MDgzMg==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r474450832", "createdAt": "2020-08-21T07:05:58Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -788,11 +787,15 @@ private void getWideQueryHeaders(\n           }\n         }\n         for (int i = 0; i < paths.size(); i++) {\n-          if (paths.get(i).getAlias() != null) {\n-            respColumns.add(aggregations.get(i) + \"(\" + paths.get(i).getFullPathWithAlias() + \")\");\n-          } else {\n-            respColumns.add(aggregations.get(i) + \"(\" + paths.get(i).getFullPath() + \")\");\n+          Path path = paths.get(i);\n+          // judge whether as clause is used or not first\n+          String column = path.getTsAlias() != null ? path.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MTQxMQ=="}, "originalCommit": {"oid": "0b8a5d0e0e5b1ad1771d76152fb43a819eedca17"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzEyMzUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTo1NTowM1rOHIm5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzozNjoyMlrOHIoYKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4Nzk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // judge whether as clause is used or not first\n          \n          \n            \n                      String column = path.getTsAlias() != null ? path.getTsAlias() : null;\n          \n          \n            \n                      // judge whether as clause is used or not first\n          \n          \n            \n                      String column = path.getTsAlias();", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r478787953", "createdAt": "2020-08-28T01:55:03Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -761,22 +759,23 @@ private TSExecuteStatementResp getQueryColumnHeaders(PhysicalPlan physicalPlan,\n   // wide means not align by device\n   private void getWideQueryHeaders(\n       QueryPlan plan, List<String> respColumns, List<String> columnTypes)\n-      throws TException, QueryProcessException, MetadataException {\n+      throws TException, MetadataException {\n     // Restore column header of aggregate to func(column_name), only\n     // support single aggregate function for now\n     List<Path> paths = plan.getPaths();\n-    List<TSDataType> seriesTypes;\n+    List<TSDataType> seriesTypes = new ArrayList<>();\n     switch (plan.getOperatorType()) {\n       case QUERY:\n       case FILL:\n         for (Path path : paths) {\n-          if (path.getAlias() != null) {\n-            respColumns.add(path.getFullPathWithAlias());\n-          } else {\n-            respColumns.add(path.getFullPath());\n+          // judge whether as clause is used or not first\n+          String column = path.getTsAlias() != null ? path.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223c942a0e8abfb4cc10a60f36a2593229e61e26"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMjIwMA==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r478812200", "createdAt": "2020-08-28T03:36:22Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -761,22 +759,23 @@ private TSExecuteStatementResp getQueryColumnHeaders(PhysicalPlan physicalPlan,\n   // wide means not align by device\n   private void getWideQueryHeaders(\n       QueryPlan plan, List<String> respColumns, List<String> columnTypes)\n-      throws TException, QueryProcessException, MetadataException {\n+      throws TException, MetadataException {\n     // Restore column header of aggregate to func(column_name), only\n     // support single aggregate function for now\n     List<Path> paths = plan.getPaths();\n-    List<TSDataType> seriesTypes;\n+    List<TSDataType> seriesTypes = new ArrayList<>();\n     switch (plan.getOperatorType()) {\n       case QUERY:\n       case FILL:\n         for (Path path : paths) {\n-          if (path.getAlias() != null) {\n-            respColumns.add(path.getFullPathWithAlias());\n-          } else {\n-            respColumns.add(path.getFullPath());\n+          // judge whether as clause is used or not first\n+          String column = path.getTsAlias() != null ? path.getTsAlias() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4Nzk1Mw=="}, "originalCommit": {"oid": "223c942a0e8abfb4cc10a60f36a2593229e61e26"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ4NjU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMToyNVrOHKtn6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowMjowOVrOHK1OUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NTMwNA==", "bodyText": "measurementAlias", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r480995304", "createdAt": "2020-09-01T09:21:25Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -31,7 +31,10 @@\n public class PartialPath extends Path implements Comparable<Path> {\n \n   private String[] nodes;\n-  private String alias;\n+  // alias of sensor\n+  private String alias = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7604913099a74fea226af5e543e672c0f3221cec"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExOTgyNA==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r481119824", "createdAt": "2020-09-01T13:02:09Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -31,7 +31,10 @@\n public class PartialPath extends Path implements Comparable<Path> {\n \n   private String[] nodes;\n-  private String alias;\n+  // alias of sensor\n+  private String alias = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NTMwNA=="}, "originalCommit": {"oid": "7604913099a74fea226af5e543e672c0f3221cec"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ4NzQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMTo0MlrOHKtogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowMjoxNVrOHK1OlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NTQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // alias of sensor\n          \n          \n            \n              // alias of measurement", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r480995459", "createdAt": "2020-09-01T09:21:42Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -31,7 +31,10 @@\n public class PartialPath extends Path implements Comparable<Path> {\n \n   private String[] nodes;\n-  private String alias;\n+  // alias of sensor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7604913099a74fea226af5e543e672c0f3221cec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExOTg5Mg==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r481119892", "createdAt": "2020-09-01T13:02:15Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -31,7 +31,10 @@\n public class PartialPath extends Path implements Comparable<Path> {\n \n   private String[] nodes;\n-  private String alias;\n+  // alias of sensor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NTQ1OQ=="}, "originalCommit": {"oid": "7604913099a74fea226af5e543e672c0f3221cec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzUxMjUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyODoyM1rOHKt4GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowMjowNVrOHK1OGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5OTQ0OQ==", "bodyText": "what is not first?", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r480999449", "createdAt": "2020-09-01T09:28:23Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -690,14 +700,14 @@ private void deduplicate(QueryPlan queryPlan) throws MetadataException {\n \n     int index = 0;\n     for (Pair<PartialPath, Integer> indexedPath : indexedPaths) {\n-      String column;\n-      if (indexedPath.left.getAlias() != null) {\n-        column = indexedPath.left.getFullPathWithAlias();\n-      } else {\n-        column = indexedPath.left.getFullPath();\n-      }\n-      if (queryPlan instanceof AggregationPlan) {\n-        column = queryPlan.getAggregations().get(indexedPath.right) + \"(\" + column + \")\";\n+      // judge whether as clause is used or not first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7604913099a74fea226af5e543e672c0f3221cec"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExOTc2OA==", "bodyText": "If as clause is used, measurementAlias will be covered.", "url": "https://github.com/apache/iotdb/pull/1621#discussion_r481119768", "createdAt": "2020-09-01T13:02:05Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -690,14 +700,14 @@ private void deduplicate(QueryPlan queryPlan) throws MetadataException {\n \n     int index = 0;\n     for (Pair<PartialPath, Integer> indexedPath : indexedPaths) {\n-      String column;\n-      if (indexedPath.left.getAlias() != null) {\n-        column = indexedPath.left.getFullPathWithAlias();\n-      } else {\n-        column = indexedPath.left.getFullPath();\n-      }\n-      if (queryPlan instanceof AggregationPlan) {\n-        column = queryPlan.getAggregations().get(indexedPath.right) + \"(\" + column + \")\";\n+      // judge whether as clause is used or not first", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5OTQ0OQ=="}, "originalCommit": {"oid": "7604913099a74fea226af5e543e672c0f3221cec"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4649, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}