{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NzcyNzUw", "number": 2350, "title": "[To rel/0.11] [IOTDB-1069] restrict the flushing memtable number to avoid OOM when mem_control is disabled", "bodyText": "See #2315\n\n\n\n\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n\n concurrent read\n concurrent write\n concurrent read and write\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods.\n added or updated version, license, or notice information\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious\nfor an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold\nfor code coverage.\n added integration tests.\n been tested in a test IoTDB cluster.\n\n\n\nKey changed/added classes (or packages if there are too many classes) in this PR", "createdAt": "2020-12-27T06:57:18Z", "url": "https://github.com/apache/iotdb/pull/2350", "merged": true, "mergeCommit": {"oid": "9157d451b142f8f4e6851a495ddddfa55f3c093e"}, "closed": true, "closedAt": "2020-12-29T13:02:25Z", "author": {"login": "HTHou"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdo6vOegH2gAyNTQ1NzcyNzUwOmY5NzgwYTkzNzBmYzQ2ZjEyY2VlMGM1NDU2MGI2ODY5M2U4MzFmZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdq34NrAH2gAyNTQ1NzcyNzUwOjVlOWJlYzdkZjVhNmRlMjdmNDY5MGE5MGY4NzI0MDU4M2JiZjMwMTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9780a9370fc46f12cee0c54560b68693e831fe7", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/f9780a9370fc46f12cee0c54560b68693e831fe7", "committedDate": "2020-12-23T08:20:17Z", "message": "restrict flushing memtable number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db70c362929c10d326c9047ca1ba90a1705f46ef", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/db70c362929c10d326c9047ca1ba90a1705f46ef", "committedDate": "2020-12-23T08:23:28Z", "message": "restrict flushing memtable number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "360750937d282f47de4264df66e041caaa7afd59", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/360750937d282f47de4264df66e041caaa7afd59", "committedDate": "2020-12-24T01:38:16Z", "message": "fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa02e4ef5185057477f0d9ceff57cc8c41da5e78", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/fa02e4ef5185057477f0d9ceff57cc8c41da5e78", "committedDate": "2020-12-24T05:01:43Z", "message": "fix flushing memtable size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2cca41e7227c000547ea4fb5813af6684cd8170", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/c2cca41e7227c000547ea4fb5813af6684cd8170", "committedDate": "2020-12-24T06:08:57Z", "message": "fix code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6d89ead67e5bdd4a6a935f1c29974be070d2fe", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/3d6d89ead67e5bdd4a6a935f1c29974be070d2fe", "committedDate": "2020-12-24T06:28:25Z", "message": "fix synchronized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921ac8af1afd790e313d48d1b75da9e6e91d9163", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/921ac8af1afd790e313d48d1b75da9e6e91d9163", "committedDate": "2020-12-25T00:59:31Z", "message": "change 1000 to 100"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e67c336ad1fa1b511dbb760b0de2054395c512f6", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/e67c336ad1fa1b511dbb760b0de2054395c512f6", "committedDate": "2020-12-25T05:49:18Z", "message": "add max memtable number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd833f52775ffdb4a3ed9fe467f51b291c602362", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/dd833f52775ffdb4a3ed9fe467f51b291c602362", "committedDate": "2020-12-25T08:45:49Z", "message": "change max memtable number to 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "888c769eaf7d06fd4e4174250f3c8db00e2beb02", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/888c769eaf7d06fd4e4174250f3c8db00e2beb02", "committedDate": "2020-12-25T09:08:35Z", "message": "add synchronized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0084d06d8255f422bc790e251cc81be8edbfd2", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/bd0084d06d8255f422bc790e251cc81be8edbfd2", "committedDate": "2020-12-25T16:25:36Z", "message": "add memtable manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eeb002ce00e2bad7975633f87ca373d7259fa72", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/6eeb002ce00e2bad7975633f87ca373d7259fa72", "committedDate": "2020-12-26T07:19:02Z", "message": "fix name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b17a6288536af9254b622481be4ef568bcd6c84", "author": {"user": {"login": "qiaojialin", "name": "Jialin Qiao"}}, "url": "https://github.com/apache/iotdb/commit/8b17a6288536af9254b622481be4ef568bcd6c84", "committedDate": "2020-12-27T05:48:13Z", "message": "Update server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105f38a0b5cb14108d48d391ca27bbfde14d8dc8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/105f38a0b5cb14108d48d391ca27bbfde14d8dc8", "committedDate": "2020-12-27T06:49:41Z", "message": "fix wait"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05c8be1c43806d96e7e42743c2b78ecb829e06b1", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/05c8be1c43806d96e7e42743c2b78ecb829e06b1", "committedDate": "2020-12-27T06:50:29Z", "message": "Merge branch 'restrict_memtable_11' of https://github.com/apache/iotdb into restrict_memtable_11"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3abacc3acb83c584c80851acf879c9b391cec0f8", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/3abacc3acb83c584c80851acf879c9b391cec0f8", "committedDate": "2020-12-27T07:07:04Z", "message": "code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff93f314aaac38ebc63d5610a94b0c76c4c50b73", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/ff93f314aaac38ebc63d5610a94b0c76c4c50b73", "committedDate": "2020-12-28T09:09:56Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/d8c751a2fd3b53db9219546e13960a9e274a829b", "committedDate": "2020-12-28T15:50:16Z", "message": "Merge branch 'rel/0.11' of https://github.com/apache/iotdb into restrict_memtable_11"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzY0MzU3", "url": "https://github.com/apache/iotdb/pull/2350#pullrequestreview-559364357", "createdAt": "2020-12-29T03:14:15Z", "commit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoxNDoxNVrOIMGCnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyNzozMVrOIMGKnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1Mjc5OQ==", "bodyText": "We shouldn't use wait without notify. We should notifyAll at \"decreaseMemtableNumber\"", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549552799", "createdAt": "2020-12-29T03:14:15Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1MzM0Ng==", "bodyText": "After interrupt. We should also throw the exception. Or this will loop forever without wait. (When enter wait with interrupt, wait will just return without wait.)", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549553346", "createdAt": "2020-12-29T03:17:20Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDc5MQ==", "bodyText": "Also notifyAll at here", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549554791", "createdAt": "2020-12-29T03:27:07Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();\n+        }\n+        if (waitCount++ % 10 == 0) {\n+          logger.info(\"{} has waited for a memtable for {}ms\", storageGroup, waitCount * WAIT_TIME);\n+        }\n+      }\n+    }\n+  }\n+\n+  public synchronized int getCurrentMemtableNumber() {\n+    return currentMemtableNumber;\n+  }\n+\n+  public synchronized void addMemtableNumber() {\n+    currentMemtableNumber++;\n+  }\n+\n+  public synchronized void decreaseMemtableNumber() {\n+    currentMemtableNumber--;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  private boolean reachMaxMemtableNumber() {\n+    return currentMemtableNumber >= CONFIG.getMaxMemtableNumber();\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized void addOrDeleteStorageGroup(int diff) {\n+    int maxMemTableNum = CONFIG.getMaxMemtableNumber();\n+    maxMemTableNum += MEMTABLE_NUM_FOR_EACH_PARTITION \n+        * CONFIG.getConcurrentWritingTimePartition() * diff;\n+    CONFIG.setMaxMemtableNumber(maxMemTableNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDg0Nw==", "bodyText": "NotifyAll at here", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549554847", "createdAt": "2020-12-29T03:27:31Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();\n+        }\n+        if (waitCount++ % 10 == 0) {\n+          logger.info(\"{} has waited for a memtable for {}ms\", storageGroup, waitCount * WAIT_TIME);\n+        }\n+      }\n+    }\n+  }\n+\n+  public synchronized int getCurrentMemtableNumber() {\n+    return currentMemtableNumber;\n+  }\n+\n+  public synchronized void addMemtableNumber() {\n+    currentMemtableNumber++;\n+  }\n+\n+  public synchronized void decreaseMemtableNumber() {\n+    currentMemtableNumber--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ef9526932021e18200f422608e6ef653ca2da22", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/7ef9526932021e18200f422608e6ef653ca2da22", "committedDate": "2020-12-29T06:37:31Z", "message": "fix concurrent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Mzk2ODYz", "url": "https://github.com/apache/iotdb/pull/2350#pullrequestreview-559396863", "createdAt": "2020-12-29T06:42:58Z", "commit": {"oid": "7ef9526932021e18200f422608e6ef653ca2da22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e9bec7df5a6de27f4690a90f87240583bbf3014", "author": {"user": {"login": "HTHou", "name": "Haonan"}}, "url": "https://github.com/apache/iotdb/commit/5e9bec7df5a6de27f4690a90f87240583bbf3014", "committedDate": "2020-12-29T10:08:14Z", "message": "Merge branch 'rel/0.11' of https://github.com/apache/iotdb into restrict_memtable_11"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3985, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}