{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMTM3MTkx", "number": 2271, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyMzowN1rOFGJDCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozNDozMlrOFGK3xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTg0MDEwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyMzowN1rOIHAhog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyMzowN1rOIHAhog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxOTU1NA==", "bodyText": "Add javadoc to explain what the test is about, and try not to name a test as just test()", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544219554", "createdAt": "2020-12-16T11:23:07Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTk4NTIxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1ODowMVrOIHBzog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjo1MzoyMlrOIHnKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MDU0Ng==", "bodyText": "What's this for? You sure about the construct method?", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544240546", "createdAt": "2020-12-16T11:58:01Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {\n+    authorizer.createUser(user.getName(), user.getPassword());\n+    authorizer.grantPrivilegeToUser(user.getName(), nodeName, 1);\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg1MjUyMA==", "bodyText": "update", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544852520", "createdAt": "2020-12-17T06:53:22Z", "author": {"login": "Genius-pig"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {\n+    authorizer.createUser(user.getName(), user.getPassword());\n+    authorizer.grantPrivilegeToUser(user.getName(), nodeName, 1);\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MDU0Ng=="}, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDAzNzMzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxMDoyOFrOIHCRAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjo1MzozMFrOIHnKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0ODA2NA==", "bodyText": "It's not a good test. The user created has no privilege at all, so all assertions return false. The correct test method may be: 1. test the authority before granting, return false. 2. grant the privilege 3. test the authority again, return true.", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544248064", "createdAt": "2020-12-16T12:10:28Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {\n+    authorizer.createUser(user.getName(), user.getPassword());\n+    authorizer.grantPrivilegeToUser(user.getName(), nodeName, 1);\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);\n+\n+    Assert.assertTrue(\n+        AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+            OperatorType.INSERT, user.getName()));\n+\n+    Assert.assertTrue(AuthorityChecker.check(\"root\", null, null, null));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.CREATE_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.QUERY, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.UPDATE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DROP_INDEX, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.UNION, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), new ArrayList<>(),\n+        OperatorType.INSERT, user.getName()));\n+\n+    Assert.assertTrue(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.MODIFY_PASSWORD, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_USER_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_USER_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_USER_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_USER, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.LIST_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.LIST_USER, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.SET_STORAGE_GROUP, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.CREATE_TIMESERIES, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_TIMESERIES, user.getName()));\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg1MjU1OA==", "bodyText": "update", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544852558", "createdAt": "2020-12-17T06:53:30Z", "author": {"login": "Genius-pig"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {\n+    authorizer.createUser(user.getName(), user.getPassword());\n+    authorizer.grantPrivilegeToUser(user.getName(), nodeName, 1);\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);\n+\n+    Assert.assertTrue(\n+        AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+            OperatorType.INSERT, user.getName()));\n+\n+    Assert.assertTrue(AuthorityChecker.check(\"root\", null, null, null));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.CREATE_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.QUERY, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.UPDATE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DROP_INDEX, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.UNION, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), new ArrayList<>(),\n+        OperatorType.INSERT, user.getName()));\n+\n+    Assert.assertTrue(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.MODIFY_PASSWORD, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_USER_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_USER_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_USER_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_USER, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.LIST_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.LIST_USER, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.SET_STORAGE_GROUP, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.CREATE_TIMESERIES, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_TIMESERIES, user.getName()));\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0ODA2NA=="}, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDA1Njc2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/LocalFileAuthorizerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxNTowMFrOIHCb4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjoxNDoyOFrOIHmQ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MDg1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class LocalFileAuthorizerTest {\n          \n          \n            \n            public class BasicAuthorizerTest {", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544250850", "createdAt": "2020-12-16T12:15:00Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/LocalFileAuthorizerTest.java", "diffHunk": "@@ -16,29 +16,37 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.iotdb.db.auth;\n+package org.apache.iotdb.db.auth.authorizer;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n-import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n-import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.AuthException;\n+import org.apache.iotdb.db.auth.entity.Role;\n import org.apache.iotdb.db.auth.entity.User;\n import org.apache.iotdb.db.conf.IoTDBConstant;\n import org.apache.iotdb.db.utils.EnvironmentUtils;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n public class LocalFileAuthorizerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1NDk4Nw==", "bodyText": "I think BasicAuthorizerTest is better..", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544254987", "createdAt": "2020-12-16T12:21:32Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/LocalFileAuthorizerTest.java", "diffHunk": "@@ -16,29 +16,37 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.iotdb.db.auth;\n+package org.apache.iotdb.db.auth.authorizer;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n-import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n-import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.AuthException;\n+import org.apache.iotdb.db.auth.entity.Role;\n import org.apache.iotdb.db.auth.entity.User;\n import org.apache.iotdb.db.conf.IoTDBConstant;\n import org.apache.iotdb.db.utils.EnvironmentUtils;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n public class LocalFileAuthorizerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MDg1MA=="}, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNzg4MA==", "bodyText": "In fact, BasicAuthorizer getInstance  return a LocalFileAuthorizer instance", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544837880", "createdAt": "2020-12-17T06:14:28Z", "author": {"login": "Genius-pig"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/LocalFileAuthorizerTest.java", "diffHunk": "@@ -16,29 +16,37 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.iotdb.db.auth;\n+package org.apache.iotdb.db.auth.authorizer;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n-import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n-import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.AuthException;\n+import org.apache.iotdb.db.auth.entity.Role;\n import org.apache.iotdb.db.auth.entity.User;\n import org.apache.iotdb.db.conf.IoTDBConstant;\n import org.apache.iotdb.db.utils.EnvironmentUtils;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n public class LocalFileAuthorizerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MDg1MA=="}, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDExNjIwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoyOTowOFrOIHC94A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoyOTowOFrOIHC94A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1OTU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<Integer> set = new HashSet<>();\n          \n          \n            \n                set.add(1);\n          \n          \n            \n                user.setPrivileges(\"root.ln\", set);\n          \n          \n            \n                user.setPrivileges(\"root.ln\", Collections.singleton(1));", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544259552", "createdAt": "2020-12-16T12:29:08Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth.entity;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class UserTest {\n+\n+  @Test\n+  public void testUser() {\n+    User user = new User(\"user\", \"password\");\n+    PathPrivilege pathPrivilege = new PathPrivilege(\"root.ln\");\n+    user.setPrivilegeList(Collections.singletonList(pathPrivilege));\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    user.setPrivileges(\"root.ln\", set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDEyMjAwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozMDoyOVrOIHDBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozMDoyOVrOIHDBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MDQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<Integer> set = new HashSet<>();\n          \n          \n            \n                set.add(1);\n          \n          \n            \n                role.setPrivileges(\"root.ln\", set);\n          \n          \n            \n                role.setPrivileges(\"root.ln\", Collections.singleton(1));", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544260407", "createdAt": "2020-12-16T12:30:29Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth.entity;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class RoleTest {\n+\n+  @Test\n+  public void testRole() {\n+    Role role = new Role(\"role\");\n+    PathPrivilege pathPrivilege = new PathPrivilege(\"root.ln\");\n+    role.setPrivilegeList(Collections.singletonList(pathPrivilege));\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    role.setPrivileges(\"root.ln\", set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDEyNzYyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozMTo1NVrOIHDEeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozMTo1NVrOIHDEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MTI0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<Integer> set = new HashSet<>();\n          \n          \n            \n                set.add(1);\n          \n          \n            \n                pathPrivilege.setPrivileges(set);\n          \n          \n            \n                pathPrivilege.setPrivileges(\"root.ln\", Collections.singleton(1));", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544261241", "createdAt": "2020-12-16T12:31:55Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth.entity;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PathPrivilegeTest {\n+\n+  @Test\n+  public void testPathPrivilege() {\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    pathPrivilege.setPath(\"root.ln\");\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDEzNzQxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozNDoxM1rOIHDKLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozNDoxM1rOIHDKLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MjcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void isAdmin_hasAccess()\n          \n          \n            \n                  throws AuthException, ParseException {\n          \n          \n            \n              public void isAdmin_hasAccess() throws AuthException, ParseException {", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544262701", "createdAt": "2020-12-16T12:34:13Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java", "diffHunk": "@@ -32,49 +35,63 @@\n \n public class OpenIdAuthorizerTest {\n \n-    private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  @Test\n+  public void loginWithJWT() throws AuthException, ParseException, URISyntaxException {\n+    String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMTcxNzYsImlhdCI6MTU5MDMxNjg3NiwianRpIjoiY2MyNWQ3MDAtYjc5NC00OTA4LTg0OGUtOTRhNzYzNmM5YzQxIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6Ijg2YWRmNGIzLWE4ZTUtNDc1NC1iNWEwLTQ4OGI0OWY0M2VkMiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6Ijk0ZmI5NGZjLTg3YTMtNDg4Ny04M2Q3LWE5MmQ1MzMzOTMzMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImNsaWVudEhvc3QiOiIxOTIuMTY4LjE2OS4yMSIsImNsaWVudElkIjoiaW90ZGIiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1pb3RkYiIsImNsaWVudEFkZHJlc3MiOiIxOTIuMTY4LjE2OS4yMSJ9.GxQFltm1PrZzVL7rR6K-GpQINFLymjqAxxoDt_DGfQEMt61M6ebmx2oHiP_3G0HDSl7sbamajQbbRrfyTg--emBC2wfhdZ7v_7O0qWC60Yd8cWZ9qxwqwTFKYb8a0Z6_TeH9-vUmsy6kp2BfJZXq3mSy0My21VGUAXRmWTbghiM4RFoHKjAZVhsPHWelFmtLftYPdOGxv-7c9iUOVh_W-nOcCNRJpYY7BEjUYN24TsjvCEwWDQWD9E29LMYfA6LNeG0KdL9Jvqad4bc2FTJn9TaCnJMCiAJ7wEEiotqhXn70uEBWYxGXIVlm3vn3MDe3pTKA2TZy7U5xcrE7S8aGMg\";\n+\n+    OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n+    boolean login = authorizer.login(jwt, null);\n+\n+    assertTrue(login);\n+  }\n+\n+  @Test\n+  public void isAdmin_hasAccess()\n+      throws AuthException, ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDEzODk1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozNDozMlrOIHDK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjozNDozMlrOIHDK-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MjkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void isAdmin_noAdminClaim()\n          \n          \n            \n                  throws AuthException, ParseException {\n          \n          \n            \n              public void isAdmin_noAdminClaim() throws AuthException, ParseException {", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544262907", "createdAt": "2020-12-16T12:34:32Z", "author": {"login": "Alima777"}, "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java", "diffHunk": "@@ -32,49 +35,63 @@\n \n public class OpenIdAuthorizerTest {\n \n-    private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  @Test\n+  public void loginWithJWT() throws AuthException, ParseException, URISyntaxException {\n+    String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMTcxNzYsImlhdCI6MTU5MDMxNjg3NiwianRpIjoiY2MyNWQ3MDAtYjc5NC00OTA4LTg0OGUtOTRhNzYzNmM5YzQxIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6Ijg2YWRmNGIzLWE4ZTUtNDc1NC1iNWEwLTQ4OGI0OWY0M2VkMiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6Ijk0ZmI5NGZjLTg3YTMtNDg4Ny04M2Q3LWE5MmQ1MzMzOTMzMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImNsaWVudEhvc3QiOiIxOTIuMTY4LjE2OS4yMSIsImNsaWVudElkIjoiaW90ZGIiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1pb3RkYiIsImNsaWVudEFkZHJlc3MiOiIxOTIuMTY4LjE2OS4yMSJ9.GxQFltm1PrZzVL7rR6K-GpQINFLymjqAxxoDt_DGfQEMt61M6ebmx2oHiP_3G0HDSl7sbamajQbbRrfyTg--emBC2wfhdZ7v_7O0qWC60Yd8cWZ9qxwqwTFKYb8a0Z6_TeH9-vUmsy6kp2BfJZXq3mSy0My21VGUAXRmWTbghiM4RFoHKjAZVhsPHWelFmtLftYPdOGxv-7c9iUOVh_W-nOcCNRJpYY7BEjUYN24TsjvCEwWDQWD9E29LMYfA6LNeG0KdL9Jvqad4bc2FTJn9TaCnJMCiAJ7wEEiotqhXn70uEBWYxGXIVlm3vn3MDe3pTKA2TZy7U5xcrE7S8aGMg\";\n+\n+    OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n+    boolean login = authorizer.login(jwt, null);\n+\n+    assertTrue(login);\n+  }\n+\n+  @Test\n+  public void isAdmin_hasAccess()\n+      throws AuthException, ParseException {\n+    // IOTDB_ADMIN = true\n+    String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMjM5MjgsImlhdCI6MTU5MDMyMzYyOCwianRpIjoiZGQ5ZDZhNmItZjgzOC00Mjk3LTg5YWUtMjdlZTgxNzVhMThiIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImJhMzJlNDcxLWM3NzItNGIzMy04ZGE2LTZmZThhY2RhMDA3MyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6IjViZDRhNmM5LTBmYzItNGIxMy05Y2QxLTFhN2NjMzk3NjVhNyIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImlvdGRiX2FkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyIn0.LthDI93A3jqATc_8Fm0ismqQSN62TUknD6ara6w43eao2hY6KBoMXVY1c6SXSy8hhQeHLiWpopjJE6fsG9xbaV2Gs24SJYnP4DkHvhULlBJ_PUjFy18QxzeexwYK358a99eVHG_8yu-f2kN3mJslOSrlny8oZDxeSxUi9wYNIuQFeLPmGfSISVFn_5V8lpoUAHeENmf9h8mSyEcUHGqtZfVm5zEYIbPPSBqvNei2NvKAFle6qoaJ1l13dpbw39KkOtIUF8dJ7v8XY_xgO2GXCJCvZ5YGr-q4UnA9v_GM3h3vSa5dyCuG0HXBmAujxSxywzPl5RB_QCTiYcTm7MGKLg\";\n+\n+    OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n+    boolean admin = authorizer.isAdmin(jwt);\n+\n+    assertTrue(admin);\n+  }\n+\n+  @Test\n+  public void isAdmin_noAdminClaim()\n+      throws AuthException, ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 443, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}