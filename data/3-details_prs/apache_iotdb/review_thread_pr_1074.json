{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDcyNzUx", "number": 1074, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMToyOTowOFrODz_zIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMzoxN1rOD0HFdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODQ5MjUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMToyOTowOFrOGIubdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTo0NzowMFrOGJBa_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgwMjQ4Ng==", "bodyText": "Hi, this may slow down the write performance of TEXT data heavily. It's better to do sampling or calculate the constant header of Binary and byte[].", "url": "https://github.com/apache/iotdb/pull/1074#discussion_r411802486", "createdAt": "2020-04-21T01:29:08Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "diffHunk": "@@ -88,7 +86,7 @@ public static long getRecordSize(BatchInsertPlan batchInsertPlan, int start, int\n         case TEXT:\n           memSize += (end - start) * 8L;\n           for (int j = start; j < end; j++) {\n-            memSize += ((Binary[]) batchInsertPlan.getColumns()[i])[j].getLength();\n+            memSize += RamUsageEstimator.sizeOf(((Binary[]) batchInsertPlan.getColumns()[i])[j]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f3b8e3d45b2802c68e43153d6726b83dbe65e9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MTYwMQ==", "bodyText": "Agreed.", "url": "https://github.com/apache/iotdb/pull/1074#discussion_r411971601", "createdAt": "2020-04-21T08:14:37Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "diffHunk": "@@ -88,7 +86,7 @@ public static long getRecordSize(BatchInsertPlan batchInsertPlan, int start, int\n         case TEXT:\n           memSize += (end - start) * 8L;\n           for (int j = start; j < end; j++) {\n-            memSize += ((Binary[]) batchInsertPlan.getColumns()[i])[j].getLength();\n+            memSize += RamUsageEstimator.sizeOf(((Binary[]) batchInsertPlan.getColumns()[i])[j]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgwMjQ4Ng=="}, "originalCommit": {"oid": "52f3b8e3d45b2802c68e43153d6726b83dbe65e9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjExMzY2MA==", "bodyText": "I have modified the way to estimate the size of Binary. In new way, the efficiency is nearly same with the origin way which approved that it'll not affect the performance of the engine.", "url": "https://github.com/apache/iotdb/pull/1074#discussion_r412113660", "createdAt": "2020-04-21T11:47:00Z", "author": {"login": "fanhualta"}, "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "diffHunk": "@@ -88,7 +86,7 @@ public static long getRecordSize(BatchInsertPlan batchInsertPlan, int start, int\n         case TEXT:\n           memSize += (end - start) * 8L;\n           for (int j = start; j < end; j++) {\n-            memSize += ((Binary[]) batchInsertPlan.getColumns()[i])[j].getLength();\n+            memSize += RamUsageEstimator.sizeOf(((Binary[]) batchInsertPlan.getColumns()[i])[j]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgwMjQ4Ng=="}, "originalCommit": {"oid": "52f3b8e3d45b2802c68e43153d6726b83dbe65e9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTY4NjMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMzoxN1rOGI4sMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTo1MTowM1rOGJBkqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MDYxMA==", "bodyText": "This import is added but I cannot find usages of it in this PR, so maybe it is unused?", "url": "https://github.com/apache/iotdb/pull/1074#discussion_r411970610", "createdAt": "2020-04-21T08:13:17Z", "author": {"login": "jt2594838"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -44,6 +44,7 @@\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.conf.directories.DirectoryManager;\n import org.apache.iotdb.db.engine.StorageEngine;\n+import org.apache.iotdb.db.engine.cache.RamUsageEstimator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f3b8e3d45b2802c68e43153d6726b83dbe65e9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjExNjEzOA==", "bodyText": "fixed", "url": "https://github.com/apache/iotdb/pull/1074#discussion_r412116138", "createdAt": "2020-04-21T11:51:03Z", "author": {"login": "fanhualta"}, "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -44,6 +44,7 @@\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.conf.directories.DirectoryManager;\n import org.apache.iotdb.db.engine.StorageEngine;\n+import org.apache.iotdb.db.engine.cache.RamUsageEstimator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MDYxMA=="}, "originalCommit": {"oid": "52f3b8e3d45b2802c68e43153d6726b83dbe65e9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 69, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}