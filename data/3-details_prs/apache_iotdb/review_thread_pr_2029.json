{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjAyOTgy", "number": 2029, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo1Mjo0MVrOE4BR9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjoxNzozNlrOFDS3hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTc2NjkyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/iotdb/db/query/executor/GroupByEngineDataSetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo1Mjo0MVrOHxsszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzowMzoxMlrOHxs7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3NDYzOQ==", "bodyText": "Hi, what is this import for?", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r521874639", "createdAt": "2020-11-12T06:52:41Z", "author": {"login": "HTHou"}, "path": "server/src/test/java/org/apache/iotdb/db/query/executor/GroupByEngineDataSetTest.java", "diffHunk": "@@ -19,9 +19,16 @@\n package org.apache.iotdb.db.query.executor;\n \n \n+import com.sun.xml.internal.ws.api.message.saaj.SaajStaxWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3063f35b0b6a307ac3d1e8176ea451de529f40d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3ODMzOA==", "bodyText": "removed. thank you!", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r521878338", "createdAt": "2020-11-12T07:03:12Z", "author": {"login": "haimeiguo"}, "path": "server/src/test/java/org/apache/iotdb/db/query/executor/GroupByEngineDataSetTest.java", "diffHunk": "@@ -19,9 +19,16 @@\n package org.apache.iotdb.db.query.executor;\n \n \n+import com.sun.xml.internal.ws.api.message.saaj.SaajStaxWriter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3NDYzOQ=="}, "originalCommit": {"oid": "c3063f35b0b6a307ac3d1e8176ea451de529f40d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTA5NjQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoxMDo0MFrOH0lrDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoxMDo0MFrOH0lrDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNTIzMA==", "bodyText": "define the number to a const variable", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r524905230", "createdAt": "2020-11-17T06:10:40Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -70,36 +77,69 @@ public GroupByEngineDataSet(QueryContext context, GroupByTimePlan groupByTimePla\n       long intervalNum = (long) Math.ceil(queryRange / (double) slidingStep);\n       curStartTime = slidingStep * (intervalNum - 1) + startTime;\n     }\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+\n+    //if is group by months interval and sliding step are calculated in ms by * 30 * 86400_000L\n+    //now converting them back to integer months\n+    if (isIntervalByMonth) {\n+      interval = interval / 30 / 86400_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29df2301ae6c4e6cc8b579a0ab1a6a598237a1a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTE1MjY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjozNToxNlrOH0mK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoxODo0OVrOH0pIWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMzM2Mg==", "bodyText": "Please add some comments about the implement. You could list some example to explain it.", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r524913362", "createdAt": "2020-11-17T06:35:16Z", "author": {"login": "mychaow"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -70,36 +77,69 @@ public GroupByEngineDataSet(QueryContext context, GroupByTimePlan groupByTimePla\n       long intervalNum = (long) Math.ceil(queryRange / (double) slidingStep);\n       curStartTime = slidingStep * (intervalNum - 1) + startTime;\n     }\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+\n+    //if is group by months interval and sliding step are calculated in ms by * 30 * 86400_000L\n+    //now converting them back to integer months\n+    if (isIntervalByMonth) {\n+      interval = interval / 30 / 86400_000L;\n+      curEndTime = Math.min(curStartTime + calcIntervalByMonth(interval, curStartTime), endTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b277867cef5777c71823c53b87702136d42913eb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MTg4MA==", "bodyText": "added. Thank you!", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r524961880", "createdAt": "2020-11-17T08:18:49Z", "author": {"login": "haimeiguo"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -70,36 +77,69 @@ public GroupByEngineDataSet(QueryContext context, GroupByTimePlan groupByTimePla\n       long intervalNum = (long) Math.ceil(queryRange / (double) slidingStep);\n       curStartTime = slidingStep * (intervalNum - 1) + startTime;\n     }\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+\n+    //if is group by months interval and sliding step are calculated in ms by * 30 * 86400_000L\n+    //now converting them back to integer months\n+    if (isIntervalByMonth) {\n+      interval = interval / 30 / 86400_000L;\n+      curEndTime = Math.min(curStartTime + calcIntervalByMonth(interval, curStartTime), endTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMzM2Mg=="}, "originalCommit": {"oid": "b277867cef5777c71823c53b87702136d42913eb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjUwNzMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTozMjoxNVrOH2UJLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODoxNzowN1rOH4Cx5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxNTE4Mg==", "bodyText": "I think the logic here should be moved to the enterGroupByTimeClause() function, because only group by time query has the two attributes: isIntervalByMonth and isSlidingStepByMonth .\nAnd if so, isParsingSlidingStep is useless.", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r526715182", "createdAt": "2020-11-19T09:32:15Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1411,6 +1418,16 @@ private Long parseDuration(String durationStr) {\n           i++;\n           unit += durationStr.charAt(i);\n         }\n+        if (unit.toLowerCase().equals(\"mo\")) {\n+          //interval is by month, sliding step by default equals to interval\n+          if (!isParsingSlidingStep) {\n+            queryOp.setIntervalByMonth(true);\n+          }\n+          queryOp.setSlidingStepByMonth(true);\n+        } else if (isParsingSlidingStep) {\n+          //parsing sliding step value, and unit is not by month\n+          queryOp.setSlidingStepByMonth(false);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa9a275de22d1eacb3e6a96662558d1d76c67c2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUyNzg0Ng==", "bodyText": "Hi, thank you for your review.\nIn parseDuration clause, it converts the interval and sliding step in milliseconds, also determines the unit for natural month aggregation. If I put the parsing \"mo\" in enterGroupByTimeClause(). i think it will be redoing the same thing.", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r528527846", "createdAt": "2020-11-23T08:17:07Z", "author": {"login": "haimeiguo"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1411,6 +1418,16 @@ private Long parseDuration(String durationStr) {\n           i++;\n           unit += durationStr.charAt(i);\n         }\n+        if (unit.toLowerCase().equals(\"mo\")) {\n+          //interval is by month, sliding step by default equals to interval\n+          if (!isParsingSlidingStep) {\n+            queryOp.setIntervalByMonth(true);\n+          }\n+          queryOp.setSlidingStepByMonth(true);\n+        } else if (isParsingSlidingStep) {\n+          //parsing sliding step value, and unit is not by month\n+          queryOp.setSlidingStepByMonth(false);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxNTE4Mg=="}, "originalCommit": {"oid": "faa9a275de22d1eacb3e6a96662558d1d76c67c2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjUxNDY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTozMzo1MFrOH2UNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzozMzo1NFrOH3DehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxNjI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final long msToMonth = 30 * 86400_000L;\n          \n          \n            \n              private static final long MS_T0_MONTH = 30 * 86400_000L;", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r526716279", "createdAt": "2020-11-19T09:33:50Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -43,6 +45,10 @@\n   protected boolean hasCachedTimeInterval;\n \n   protected boolean leftCRightO;\n+  private boolean isIntervalByMonth = false;\n+  private boolean isSlidingStepByMonth = false;\n+  protected int intervalTimes;\n+  private final long msToMonth = 30 * 86400_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa9a275de22d1eacb3e6a96662558d1d76c67c2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MDY5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final long msToMonth = 30 * 86400_000L;\n          \n          \n            \n              private static final long MS_TO_MONTH = 30 * 86400_000L;\n          \n      \n    \n    \n  \n\n\ud83d\ude02", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r527490692", "createdAt": "2020-11-20T07:33:54Z", "author": {"login": "HTHou"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -43,6 +45,10 @@\n   protected boolean hasCachedTimeInterval;\n \n   protected boolean leftCRightO;\n+  private boolean isIntervalByMonth = false;\n+  private boolean isSlidingStepByMonth = false;\n+  protected int intervalTimes;\n+  private final long msToMonth = 30 * 86400_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxNjI3OQ=="}, "originalCommit": {"oid": "faa9a275de22d1eacb3e6a96662558d1d76c67c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjYyODMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo1OToxNVrOH2VRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODozMjoxNlrOH4DPHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczMzc2Nw==", "bodyText": "I think you can directly return the calendar.getTimeInMillis() instead of the delta to curStartTime, because it seems that you still add the curStartTime each time you call the calcIntervalByMonth function.\nAnd in this function, it's better to use calendar.setTimeInMillis(curStartTime); instead of startTime, if so the attribute intervalTimes can be deleted.", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r526733767", "createdAt": "2020-11-19T09:59:15Z", "author": {"login": "JackieTien97"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -70,36 +78,72 @@ public GroupByEngineDataSet(QueryContext context, GroupByTimePlan groupByTimePla\n       long intervalNum = (long) Math.ceil(queryRange / (double) slidingStep);\n       curStartTime = slidingStep * (intervalNum - 1) + startTime;\n     }\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+\n+\n+    if (isIntervalByMonth) {\n+      //if is group by months interval and sliding step are calculated in ms by * 30 * 86400_000L\n+      //now converting them back to integer months\n+      interval = interval / msToMonth;\n+      //calculate interval length by natural month based on curStartTime\n+      //ie. startTIme = 1/31, interval = 1mo, curEndTime will be set to 2/29\n+      curEndTime = Math.min(curStartTime + calcIntervalByMonth(interval, curStartTime), endTime);\n+    } else {\n+      curEndTime = Math.min(curStartTime + interval, endTime);\n+    }\n+    if (isSlidingStepByMonth) {\n+      slidingStep = slidingStep / msToMonth;\n+    }\n     this.hasCachedTimeInterval = true;\n   }\n \n   @Override\n   protected boolean hasNextWithoutConstraint() {\n+    long curSlidingStep = slidingStep;\n+    long curInterval = interval;\n     // has cached\n     if (hasCachedTimeInterval) {\n       return true;\n     }\n \n+    intervalTimes++;\n+    //group by natural month, given startTime recalculate interval and sliding step\n+    if (isIntervalByMonth) {\n+      curInterval = calcIntervalByMonth(intervalTimes * slidingStep + interval, startTime);\n+    }\n+    if (isSlidingStepByMonth) {\n+      curSlidingStep = calcIntervalByMonth(slidingStep * intervalTimes, curStartTime);\n+    }\n+\n     // check if the next interval out of range\n     if (ascending) {\n-      curStartTime += slidingStep;\n+      curStartTime += curSlidingStep;\n       //This is an open interval , [0-100)\n       if (curStartTime >= endTime) {\n         return false;\n       }\n     } else {\n-      curStartTime -= slidingStep;\n+      curStartTime -= curSlidingStep;\n       if (curStartTime < startTime) {\n         return false;\n       }\n     }\n \n     hasCachedTimeInterval = true;\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+    if (isIntervalByMonth) {\n+      curEndTime = Math.min(startTime + curInterval, endTime);\n+    } else {\n+      curEndTime = Math.min(curStartTime + curInterval, endTime);\n+    }\n     return true;\n   }\n \n+  public long calcIntervalByMonth(long numMonths, long curStartTime) {\n+    Calendar calendar = Calendar.getInstance();\n+    calendar.setTimeInMillis(startTime);\n+    calendar.add(Calendar.MONTH, (int) (numMonths));\n+    return calendar.getTimeInMillis() - curStartTime;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa9a275de22d1eacb3e6a96662558d1d76c67c2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUzNTMyNA==", "bodyText": "Hi, the calendar is set to the original startTime and uses intervalTImes to calendar.add() in case of dates = 29, 30, 31\nie.\nwhen add one month to 1/31, curStartTime increments to 2/29\nif then set calendar to curStartTime = 2/29, then increments one month, we get curStartTime = 3/29, which is not what we intended. What we want is 1/31, 2/29, 3/30, 4/31 ....\nso I used intervalTimes each time calculating the interval and set calendar to original startTime and add intervalTimes months to startTime to avoid edge cases.", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r528535324", "createdAt": "2020-11-23T08:32:16Z", "author": {"login": "haimeiguo"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -70,36 +78,72 @@ public GroupByEngineDataSet(QueryContext context, GroupByTimePlan groupByTimePla\n       long intervalNum = (long) Math.ceil(queryRange / (double) slidingStep);\n       curStartTime = slidingStep * (intervalNum - 1) + startTime;\n     }\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+\n+\n+    if (isIntervalByMonth) {\n+      //if is group by months interval and sliding step are calculated in ms by * 30 * 86400_000L\n+      //now converting them back to integer months\n+      interval = interval / msToMonth;\n+      //calculate interval length by natural month based on curStartTime\n+      //ie. startTIme = 1/31, interval = 1mo, curEndTime will be set to 2/29\n+      curEndTime = Math.min(curStartTime + calcIntervalByMonth(interval, curStartTime), endTime);\n+    } else {\n+      curEndTime = Math.min(curStartTime + interval, endTime);\n+    }\n+    if (isSlidingStepByMonth) {\n+      slidingStep = slidingStep / msToMonth;\n+    }\n     this.hasCachedTimeInterval = true;\n   }\n \n   @Override\n   protected boolean hasNextWithoutConstraint() {\n+    long curSlidingStep = slidingStep;\n+    long curInterval = interval;\n     // has cached\n     if (hasCachedTimeInterval) {\n       return true;\n     }\n \n+    intervalTimes++;\n+    //group by natural month, given startTime recalculate interval and sliding step\n+    if (isIntervalByMonth) {\n+      curInterval = calcIntervalByMonth(intervalTimes * slidingStep + interval, startTime);\n+    }\n+    if (isSlidingStepByMonth) {\n+      curSlidingStep = calcIntervalByMonth(slidingStep * intervalTimes, curStartTime);\n+    }\n+\n     // check if the next interval out of range\n     if (ascending) {\n-      curStartTime += slidingStep;\n+      curStartTime += curSlidingStep;\n       //This is an open interval , [0-100)\n       if (curStartTime >= endTime) {\n         return false;\n       }\n     } else {\n-      curStartTime -= slidingStep;\n+      curStartTime -= curSlidingStep;\n       if (curStartTime < startTime) {\n         return false;\n       }\n     }\n \n     hasCachedTimeInterval = true;\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+    if (isIntervalByMonth) {\n+      curEndTime = Math.min(startTime + curInterval, endTime);\n+    } else {\n+      curEndTime = Math.min(curStartTime + curInterval, endTime);\n+    }\n     return true;\n   }\n \n+  public long calcIntervalByMonth(long numMonths, long curStartTime) {\n+    Calendar calendar = Calendar.getInstance();\n+    calendar.setTimeInMillis(startTime);\n+    calendar.add(Calendar.MONTH, (int) (numMonths));\n+    return calendar.getTimeInMillis() - curStartTime;\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczMzc2Nw=="}, "originalCommit": {"oid": "faa9a275de22d1eacb3e6a96662558d1d76c67c2"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODE2NzQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzozMjoxM1rOIBK5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzozMjoxM1rOIBK5Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA5Nzk5NQ==", "bodyText": "I just wonder how to set the curStartTime... pls add a Javadoc for this function and the intervalTimes", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r538097995", "createdAt": "2020-12-08T07:32:13Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByEngineDataSet.java", "diffHunk": "@@ -68,38 +80,81 @@ public GroupByEngineDataSet(QueryContext context, GroupByTimePlan groupByTimePla\n       long queryRange = endTime - startTime;\n       // calculate the total interval number\n       long intervalNum = (long) Math.ceil(queryRange / (double) slidingStep);\n-      curStartTime = slidingStep * (intervalNum - 1) + startTime;\n+      if (isSlidingStepByMonth) {\n+        intervalTimes = (int) intervalNum - 1;\n+        curStartTime = startTime + calcIntervalByMonth(intervalTimes * slidingStep / MS_TO_MONTH, startTime);\n+      } else {\n+        curStartTime = slidingStep * (intervalNum - 1) + startTime;\n+      }\n+    }\n+\n+    if (isSlidingStepByMonth) {\n+      slidingStep = slidingStep / MS_TO_MONTH;\n+    }\n+\n+    if (isIntervalByMonth) {\n+      //calculate interval length by natural month based on curStartTime\n+      //ie. startTIme = 1/31, interval = 1mo, curEndTime will be set to 2/29\n+      curEndTime = Math.min(startTime + calcIntervalByMonth(interval + slidingStep * intervalTimes, startTime), endTime);\n+    } else {\n+      curEndTime = Math.min(curStartTime + interval, endTime);\n     }\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+\n     this.hasCachedTimeInterval = true;\n   }\n \n   @Override\n   protected boolean hasNextWithoutConstraint() {\n+    long curSlidingStep = slidingStep;\n+    long curInterval = interval;\n     // has cached\n     if (hasCachedTimeInterval) {\n       return true;\n     }\n \n+    intervalTimes += ascending ? 1 : -1;\n+    //group by natural month, given startTime recalculate interval and sliding step\n+    if (isIntervalByMonth) {\n+      curInterval = calcIntervalByMonth(intervalTimes * slidingStep + interval, startTime);\n+    }\n+    if (isSlidingStepByMonth) {\n+      curSlidingStep = calcIntervalByMonth(slidingStep * intervalTimes, curStartTime);\n+    }\n+\n     // check if the next interval out of range\n     if (ascending) {\n-      curStartTime += slidingStep;\n+      curStartTime += curSlidingStep;\n       //This is an open interval , [0-100)\n       if (curStartTime >= endTime) {\n         return false;\n       }\n     } else {\n-      curStartTime -= slidingStep;\n+      if (isSlidingStepByMonth) {\n+        curStartTime = startTime + calcIntervalByMonth(slidingStep * intervalTimes, startTime);\n+      } else {\n+        curStartTime -= curSlidingStep;\n+      }\n       if (curStartTime < startTime) {\n         return false;\n       }\n     }\n \n     hasCachedTimeInterval = true;\n-    curEndTime = Math.min(curStartTime + interval, endTime);\n+    if (isIntervalByMonth) {\n+      curEndTime = Math.min(startTime + curInterval, endTime);\n+    } else {\n+      curEndTime = Math.min(curStartTime + curInterval, endTime);\n+    }\n     return true;\n   }\n \n+  public long calcIntervalByMonth(long numMonths, long curStartTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6794be549cb49095c9149e688b4ef56c1e29fe21"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTk5MTcyOnYy", "diffSide": "RIGHT", "path": "docs/zh/UserGuide/Operation Manual/DML Data Manipulation Language.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjoxNzozNlrOIC3sNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjoxNzozNlrOIC3sNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg4MDUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5212\u5206\u65f6\u95f4\u8f74\u7684\u65f6\u95f4\u95f4\u9694\u53c2\u6570\uff0c\u5c06`1mo`\u5f53\u4f5c\u5212\u5206\u95f4\u9694\uff0c\u663e\u793a\u7a97\u53e3\u53c2\u6570\u7684\u8d77\u59cb\u65f6\u95f4\u5f53\u4f5c\u5206\u5272\u539f\u70b9\uff0c\u65f6\u95f4\u8f74\u5373\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u65f6\u95f4\u95f4\u9694\uff1a[2017-11-01T00:00:00, 2019-12-01T00:00:00), [2018-02-01T00:00:00, 2018-03-01T00:00:00), [2018-05-03T00:00:00, 2018-06-01T00:00:00)\u7b49\u7b49\u3002\n          \n          \n            \n            \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5212\u5206\u65f6\u95f4\u8f74\u7684\u65f6\u95f4\u95f4\u9694\u53c2\u6570\uff0c\u5c06`1mo`\u5f53\u4f5c\u5212\u5206\u95f4\u9694\uff0c\u663e\u793a\u7a97\u53e3\u53c2\u6570\u7684\u8d77\u59cb\u65f6\u95f4\u5f53\u4f5c\u5206\u5272\u539f\u70b9\uff0c\u65f6\u95f4\u8f74\u5373\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u65f6\u95f4\u95f4\u9694\uff1a[2017-11-01T00:00:00, 2017-12-01T00:00:00), [2018-02-01T00:00:00, 2018-03-01T00:00:00), [2018-05-03T00:00:00, 2018-06-01T00:00:00)\u7b49\u7b49\u3002", "url": "https://github.com/apache/iotdb/pull/2029#discussion_r539880500", "createdAt": "2020-12-10T06:17:36Z", "author": {"login": "qiaojialin"}, "path": "docs/zh/UserGuide/Operation Manual/DML Data Manipulation Language.md", "diffHunk": "@@ -486,6 +486,98 @@ Total line number = 7\n It costs 0.018s\n ```\n \n+#### \u6309\u7167\u81ea\u7136\u6708\u4efd\u7684\u964d\u9891\u805a\u5408\u67e5\u8be2\n+\n+\u5bf9\u5e94\u7684SQL\u8bed\u53e5\u662f:\n+\n+```\n+select count(status) from root.ln.wf01.wt01 where time > 2017-11-01T01:00:00 group by([2017-11-01T00:00:00, 2019-11-07T23:00:00), 1mo, 2mo);\n+```\n+\n+\u8fd9\u6761\u67e5\u8be2\u7684\u542b\u4e49\u662f:\n+\n+\u7531\u4e8e\u7528\u6237\u6307\u5b9a\u4e86\u6ed1\u52a8\u6b65\u957f\u4e3a`2mo`\uff0cGROUP BY\u8bed\u53e5\u6267\u884c\u65f6\u5c06\u4f1a\u6bcf\u6b21\u628a\u65f6\u95f4\u95f4\u9694\u5f80\u540e\u79fb\u52a82\u4e2a\u81ea\u7136\u6708\u7684\u6b65\u957f\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u76841\u4e2a\u81ea\u7136\u6708\u3002\n+\n+\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u6211\u4eec\u60f3\u8981\u53d6\u4ece2017-11-01\u52302019-11-07\u6bcf2\u4e2a\u81ea\u7136\u6708\u7684\u7b2c\u4e00\u4e2a\u6708\u7684\u6570\u636e\u3002\n+\n+\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u663e\u793a\u7a97\u53e3\u53c2\u6570\uff0c\u51b3\u5b9a\u4e86\u6700\u7ec8\u7684\u663e\u793a\u8303\u56f4\u662f[2017-11-01T00:00:00, 2019-11-07T23:00:00)\u3002\n+\n+\u8d77\u59cb\u65f6\u95f4\u4e3a2017-11-01T00:00:00\uff0c\u6ed1\u52a8\u6b65\u957f\u5c06\u4f1a\u4ee5\u8d77\u59cb\u65f6\u95f4\u4f5c\u4e3a\u6807\u51c6\u6309\u6708\u9012\u589e\uff0c\u53d6\u5f53\u6708\u76841\u53f7\u4f5c\u4e3a\u65f6\u95f4\u95f4\u9694\u7684\u8d77\u59cb\u65f6\u95f4\u3002\n+\n+\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5212\u5206\u65f6\u95f4\u8f74\u7684\u65f6\u95f4\u95f4\u9694\u53c2\u6570\uff0c\u5c06`1mo`\u5f53\u4f5c\u5212\u5206\u95f4\u9694\uff0c\u663e\u793a\u7a97\u53e3\u53c2\u6570\u7684\u8d77\u59cb\u65f6\u95f4\u5f53\u4f5c\u5206\u5272\u539f\u70b9\uff0c\u65f6\u95f4\u8f74\u5373\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u65f6\u95f4\u95f4\u9694\uff1a[2017-11-01T00:00:00, 2019-12-01T00:00:00), [2018-02-01T00:00:00, 2018-03-01T00:00:00), [2018-05-03T00:00:00, 2018-06-01T00:00:00)\u7b49\u7b49\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6794be549cb49095c9149e688b4ef56c1e29fe21"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 548, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}