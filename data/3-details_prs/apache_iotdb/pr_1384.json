{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NjE0Mzk5", "number": 1384, "title": "[IOTDB-726] CheckPoint of MTree", "bodyText": "Requirement source: In the situation that there exist a large number of timeseries, it would take a long time to restart IoTDB by reading mlog.txt and executing the commands line by line. For example, it takes about 2 minutes to restart with 20M timeseries.\nBasic ideas: Every time mlog.txt reaches a certain number of lines, Generate a snapshot, which includes the serialization of MTree. When a new snapshot is generated, the old one is deleted. Snapshot file and mlog.txt are in the same directory.\nUser configuration: Users could configure the threshold number of the mlog lines mtree_snapshot_interval. By default, a snapshot is generated for every 100k lines.", "createdAt": "2020-06-17T05:36:53Z", "url": "https://github.com/apache/iotdb/pull/1384", "merged": true, "mergeCommit": {"oid": "bacbbe77ed257d08e9651e8c441d896320baf537"}, "closed": true, "closedAt": "2020-06-23T03:39:55Z", "author": {"login": "samperson1997"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsDD8DAH2gAyNDM1NjE0Mzk5OjFjYTcwOWI0NjliMmQ1MGU2N2EzNDY4ZDk4YjFiMGE1MWE2MjdjMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct9CGxgFqTQzNTQxNzQ1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ca709b469b2d50e67a3468d98b1b0a51a627c12", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/1ca709b469b2d50e67a3468d98b1b0a51a627c12", "committedDate": "2020-06-17T05:32:46Z", "message": "MTree checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "committedDate": "2020-06-17T10:28:38Z", "message": "Fix sonar"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODk5NTQw", "url": "https://github.com/apache/iotdb/pull/1384#pullrequestreview-432899540", "createdAt": "2020-06-18T02:33:32Z", "commit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjozMzozMlrOGldh-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjozMzozMlrOGldh-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNDMyOQ==", "bodyText": "Hi~ You should specify the unit of this config. Is it second or millisecond\uff1f", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441934329", "createdAt": "2020-06-18T02:33:32Z", "author": {"login": "SilverNarcissus"}, "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -204,6 +204,9 @@ tag_attribute_total_size=700\n # if enable partial insert, one measurement failure will not impact other measurements\n enable_partial_insert=true\n \n+# The interval line numbers of mlog.txt when creating a checkpoint and saving snapshot of mtree", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTQ2MjE1", "url": "https://github.com/apache/iotdb/pull/1384#pullrequestreview-432946215", "createdAt": "2020-06-18T05:14:54Z", "commit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNToxNDo1NFrOGlf3mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNToxNDo1NFrOGlf3mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA==", "bodyText": "Actually, it means the line number of mlog file that is serialized in snapshot. And the current name may be confusing because it's referred to the line number in snapshot log file. So you'd better rename this variable as serializedLineNumber.", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441972634", "createdAt": "2020-06-18T05:14:54Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -72,27 +80,34 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n+\n   private MNode root;\n+  private int snapshotLineNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTY0MDcz", "url": "https://github.com/apache/iotdb/pull/1384#pullrequestreview-432964073", "createdAt": "2020-06-18T06:04:50Z", "commit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjowNDo1MFrOGlgv7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjowNDo1MFrOGlgv7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NzA1Mw==", "bodyText": "whether to enable data partition. If disabled, all data belongs to partition 0", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441987053", "createdAt": "2020-06-18T06:04:50Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -568,11 +568,15 @@\n   private int primitiveArraySize = 64;\n \n   /**\n-   * whether enable data partition\n-   * if disabled, all data belongs to partition 0\n+   * whether enable data partition if disabled, all data belongs to partition 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTY1NjYw", "url": "https://github.com/apache/iotdb/pull/1384#pullrequestreview-432965660", "createdAt": "2020-06-18T06:08:27Z", "commit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjowODoyN1rOGlg0mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoyNzo0MFrOGlhQGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODI0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return lineNumber++;\n          \n          \n            \n                return ++lineNumber;", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441988248", "createdAt": "2020-06-18T06:08:27Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java", "diffHunk": "@@ -158,17 +149,23 @@ public static void upgradeMLog(String schemaDir, String logFileName) throws IOEx\n         writer.write(buf.toString());\n         writer.newLine();\n         writer.flush();\n-        \n       }\n     }\n \n     // upgrade finished, delete old mlog file\n     if (!logFile.delete()) {\n       throw new IOException(\"Deleting \" + logFile + \"failed.\");\n     }\n-    \n+\n     // rename tmpLogFile to mlog\n     FSFactoryProducer.getFSFactory().moveFile(tmpLogFile, logFile);\n   }\n-  \n+\n+  private int newLine() throws IOException {\n+    writer.newLine();\n+    writer.flush();\n+\n+    // Every MTREE_SNAPSHOT_INTERVAL lines, create a checkpoint and save the MTree as a snapshot\n+    return lineNumber++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTU3NQ==", "bodyText": "should this be < ?", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441989575", "createdAt": "2020-06-18T06:12:11Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -199,11 +203,16 @@ public synchronized void init() {\n \n   private void initFromLog(File logFile) throws IOException {\n     // init the metadata from the operation log\n-    mtree = new MTree();\n+    mtree = MTree.deserializeFrom(mtreeSnapshotPath);\n     if (logFile.exists()) {\n       try (FileReader fr = new FileReader(logFile);\n           BufferedReader br = new BufferedReader(fr)) {\n         String cmd;\n+        int idx = 0;\n+        while (idx <= mtree.getSnapshotLineNumber()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MDQwMQ==", "bodyText": "snapshotedLineNumber is ok...", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441990401", "createdAt": "2020-06-18T06:14:37Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -72,27 +80,34 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n+\n   private MNode root;\n+  private int snapshotLineNumber;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MTMxOQ==", "bodyText": "You may need to serialize to a tmp snapshot file first and then rename it to avoid a shutdown when serializing.", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441991319", "createdAt": "2020-06-18T06:17:12Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +914,70 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDI3Ng==", "bodyText": "We use LinkedHashMap before.", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441994276", "createdAt": "2020-06-18T06:25:08Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +914,70 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(\n+        new FileWriter(SystemFileFactory.INSTANCE.getFile(snapshotPath)))) {\n+      bw.write(String.valueOf(lineNumber));\n+      bw.newLine();\n+      root.serializeTo(bw);\n+    }\n+  }\n+\n+  public static MTree deserializeFrom(String mtreeSnapshotPath) throws IOException {\n+    File mtreeSnapshot = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotPath);\n+    if (!mtreeSnapshot.exists()) {\n+      return new MTree();\n+    }\n+\n+    try (BufferedReader br = new BufferedReader(new FileReader(mtreeSnapshot))) {\n+      int snapshotLineNumber = Integer.parseInt(br.readLine());\n+      String s;\n+      Deque<MNode> nodeStack = new ArrayDeque<>();\n+      MNode node = null;\n+\n+      while ((s = br.readLine()) != null) {\n+        String[] nodeInfo = s.split(\",\");\n+        short nodeType = Short.parseShort(nodeInfo[0]);\n+        if (nodeType == MetadataConstant.STORAGE_GROUP_MNODE_TYPE) {\n+          node = StorageGroupMNode.deserializeFrom(nodeInfo);\n+        } else if (nodeType == MetadataConstant.MEASUREMENT_MNODE_TYPE) {\n+          node = MeasurementMNode.deserializeFrom(nodeInfo);\n+        } else {\n+          node = new MNode(null, nodeInfo[1]);\n+        }\n+\n+        int childrenSize = Integer.parseInt(nodeInfo[nodeInfo.length - 1]);\n+        if (childrenSize == 0) {\n+          nodeStack.push(node);\n+        } else {\n+          Map<String, MNode> childrenMap = new TreeMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTI4OQ==", "bodyText": "catch all exception and return an empty MTree if meet a broken file", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441995289", "createdAt": "2020-06-18T06:27:40Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +914,70 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(\n+        new FileWriter(SystemFileFactory.INSTANCE.getFile(snapshotPath)))) {\n+      bw.write(String.valueOf(lineNumber));\n+      bw.newLine();\n+      root.serializeTo(bw);\n+    }\n+  }\n+\n+  public static MTree deserializeFrom(String mtreeSnapshotPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6832e294591d69e57297ce0d2b9880d99a1686f9", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/6832e294591d69e57297ce0d2b9880d99a1686f9", "committedDate": "2020-06-18T08:45:23Z", "message": "Fix review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43aad64b01576a66c301fc250587eb7c7f7bee15", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/43aad64b01576a66c301fc250587eb7c7f7bee15", "committedDate": "2020-06-22T01:14:30Z", "message": "MTree checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1077a0b527527ed1ce9194a8cd189f441f3b5a3b", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/1077a0b527527ed1ce9194a8cd189f441f3b5a3b", "committedDate": "2020-06-22T01:24:45Z", "message": "Merge remote-tracking branch 'origin/master'\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n#\tserver/src/main/java/org/apache/iotdb/db/metadata/MManager.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f35679781fef1c5e7242a4fc58c139baec05ff9", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/3f35679781fef1c5e7242a4fc58c139baec05ff9", "committedDate": "2020-06-22T01:25:57Z", "message": "Merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "426c8fadc00813ced6df988acbb8be19e7ce5680", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/426c8fadc00813ced6df988acbb8be19e7ce5680", "committedDate": "2020-06-22T01:36:35Z", "message": "Fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6665a1cded525f4cade920ae0d7fe22d17da852e", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/6665a1cded525f4cade920ae0d7fe22d17da852e", "committedDate": "2020-06-22T05:08:07Z", "message": "Add design document and config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/1c01f8c85ed4441f8f2498de54374658c17698fe", "committedDate": "2020-06-22T05:20:06Z", "message": "Add config manual"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjMwOTAy", "url": "https://github.com/apache/iotdb/pull/1384#pullrequestreview-434630902", "createdAt": "2020-06-22T06:21:26Z", "commit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyMToyN1rOGmzPXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0Njo1NlrOGmzx_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzODU5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Common MNode: 0,name,children size\n          \n          \n            \n            * MNode: 0,name,children size", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443338591", "createdAt": "2020-06-22T06:21:27Z", "author": {"login": "qiaojialin"}, "path": "docs/SystemDesign/SchemaManager/SchemaManager.md", "diffHunk": "@@ -175,6 +175,16 @@ The root node exists by default. Creating storage groups, deleting storage group\n \n * Deleting a storage group is similar to deleting a time series. That is, the storage group or time series node is deleted in its parent node. The time series node also needs to delete its alias in the parent node; if in the deletion process, a node is found not to have any child node, needs to be deleted recursively.\n \t\n+## MTree checkpoint\n+\n+To speed up restarting of IoTDB, we set checkpoint for MTree. Every several minutes, background thread checks the last modified time of MTree. If users haven\u2019t modified MTree for more than 1 hour (which means `mlog.txt` hasn\u2019t been updated for more than 1 hour), and `mlog.txt` has reached the threshold line number of user configuration, MTree snapshot is created. In this way, we could avoid reading mlog.txt and executing the commands line by line. \n+\n+The serialization of MTree is depth-first from children to parent. Information of nodes are converted into String according to different node types, which is convenient for deserialization.\n+\n+* Common MNode: 0,name,children size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0MTk5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private int mtreeSnapshotInterval = 1000000;\n          \n          \n            \n              private int mtreeSnapshotInterval = 100000;", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443341998", "createdAt": "2020-06-22T06:31:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -568,11 +568,21 @@\n   private int primitiveArraySize = 64;\n \n   /**\n-   * whether enable data partition\n-   * if disabled, all data belongs to partition 0\n+   * whether enable data partition. If disabled, all data belongs to partition 0\n    */\n   private boolean enablePartition = false;\n \n+  /**\n+   * Interval line number of mlog.txt when creating a checkpoint and saving snapshot of mtree\n+   */\n+  private int mtreeSnapshotInterval = 1000000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTA4MQ==", "bodyText": "replace this by config", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443345081", "createdAt": "2020-06-22T06:40:37Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTM4NQ==", "bodyText": "remove tmp file", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443345385", "createdAt": "2020-06-22T06:41:27Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+      logger.info(\"MTree snapshot is not created because of active modification\");\n+    } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n+      logger.info(\"MTree snapshot need not be created\");\n+    } else {\n+      lock.writeLock().lock();\n+      logger.info(\"Start creating MTree snapshot. This may take a while...\");\n+      try {\n+        mtree.serializeTo(mtreeSnapshotTmpPath, logWriter.getLineNumber());\n+        lastSnapshotLogLineNumber = logWriter.getLineNumber();\n+        File tmpFile = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotTmpPath);\n+        File snapshotFile = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotPath);\n+        if (snapshotFile.exists()) {\n+          Files.delete(snapshotFile.toPath());\n+        }\n+        if (tmpFile.renameTo(snapshotFile)) {\n+          logger.info(\"Finish creating MTree snapshot to {}.\", mtreeSnapshotPath);\n+        }\n+      } catch (IOException e) {\n+        logger.warn(\"Failed to create MTree snapshot to {}\", mtreeSnapshotPath, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "originalPosition": 400}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTgyNA==", "bodyText": "log the line number", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443345824", "createdAt": "2020-06-22T06:42:37Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+      logger.info(\"MTree snapshot is not created because of active modification\");\n+    } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n+      logger.info(\"MTree snapshot need not be created\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "originalPosition": 384}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjAyNg==", "bodyText": "use read lock", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443346026", "createdAt": "2020-06-22T06:43:13Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+      logger.info(\"MTree snapshot is not created because of active modification\");\n+    } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n+      logger.info(\"MTree snapshot need not be created\");\n+    } else {\n+      lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "originalPosition": 386}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjE1NQ==", "bodyText": "snapshot is ok", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443346155", "createdAt": "2020-06-22T06:43:37Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -72,27 +80,34 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n+\n   private MNode root;\n+  private int snapshotLineNumber;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjIxNg==", "bodyText": "add some comment", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443346216", "createdAt": "2020-06-22T06:43:50Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -72,27 +80,34 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n+\n   private MNode root;\n+  private int snapshotLineNumber;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, "originalCommit": {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzQ1Mg==", "bodyText": "just remind, make sure if the snapshot is crashed, we can still recover the MTree from mlog", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443347452", "createdAt": "2020-06-22T06:46:56Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +918,69 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(\n+        new FileWriter(SystemFileFactory.INSTANCE.getFile(snapshotPath)))) {\n+      bw.write(String.valueOf(lineNumber));\n+      bw.newLine();\n+      root.serializeTo(bw);\n+    }\n+  }\n+\n+  public static MTree deserializeFrom(File mtreeSnapshot) {\n+    try (BufferedReader br = new BufferedReader(new FileReader(mtreeSnapshot))) {\n+      int snapshotLineNumber = Integer.parseInt(br.readLine());\n+      String s;\n+      Deque<MNode> nodeStack = new ArrayDeque<>();\n+      MNode node = null;\n+\n+      while ((s = br.readLine()) != null) {\n+        String[] nodeInfo = s.split(\",\");\n+        short nodeType = Short.parseShort(nodeInfo[0]);\n+        if (nodeType == MetadataConstant.STORAGE_GROUP_MNODE_TYPE) {\n+          node = StorageGroupMNode.deserializeFrom(nodeInfo);\n+        } else if (nodeType == MetadataConstant.MEASUREMENT_MNODE_TYPE) {\n+          node = MeasurementMNode.deserializeFrom(nodeInfo);\n+        } else {\n+          node = new MNode(null, nodeInfo[1]);\n+        }\n+\n+        int childrenSize = Integer.parseInt(nodeInfo[nodeInfo.length - 1]);\n+        if (childrenSize == 0) {\n+          nodeStack.push(node);\n+        } else {\n+          Map<String, MNode> childrenMap = new LinkedHashMap<>();\n+          for (int i = 0; i < childrenSize; i++) {\n+            MNode child = nodeStack.removeFirst();\n+            child.setParent(node);\n+            childrenMap.put(child.getName(), child);\n+            if (child instanceof MeasurementMNode) {\n+              String alias = ((MeasurementMNode) child).getAlias();\n+              if (alias != null) {\n+                node.addAlias(alias, child);\n+              }\n+            }\n+          }\n+          node.setChildren(childrenMap);\n+          nodeStack.push(node);\n+        }\n+      }\n+      return new MTree(node, snapshotLineNumber);\n+    } catch (IOException e) {\n+      logger.warn(\"Failed to deserialize from {}. Use a new MTree.\", mtreeSnapshot.getPath());\n+      return new MTree();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe"}, "originalPosition": 181}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8118addea0d65c4eefa215980e2f60b088f9d6d6", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/8118addea0d65c4eefa215980e2f60b088f9d6d6", "committedDate": "2020-06-22T07:39:03Z", "message": "Fix review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfcbb903a14f49850ee4714bb267e0cc3ffcd7fa", "author": {"user": {"login": "samperson1997", "name": "Zesong Sun"}}, "url": "https://github.com/apache/iotdb/commit/dfcbb903a14f49850ee4714bb267e0cc3ffcd7fa", "committedDate": "2020-06-22T08:31:46Z", "message": "Add config of MtreeSnapshotThresholdTime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzYzMjk5", "url": "https://github.com/apache/iotdb/pull/1384#pullrequestreview-434763299", "createdAt": "2020-06-22T09:40:27Z", "commit": {"oid": "dfcbb903a14f49850ee4714bb267e0cc3ffcd7fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDE3NDUw", "url": "https://github.com/apache/iotdb/pull/1384#pullrequestreview-435417450", "createdAt": "2020-06-23T03:39:11Z", "commit": {"oid": "dfcbb903a14f49850ee4714bb267e0cc3ffcd7fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3586, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}