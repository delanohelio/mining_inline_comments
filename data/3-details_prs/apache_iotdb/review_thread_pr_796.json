{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTM0Mjg3", "number": 796, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzoyOToxMFrODfEkPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToxODo0NlrODfY02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA3MjYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzoyOToxMFrOFokDDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTo1Mjo1MlrOFooCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3Nzk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private List<String> measurements; // for group by device sql, e.g. temperature\n          \n          \n            \n              private List<String> measurements; // e.g. temperature\n          \n      \n    \n    \n  \n\ngive a more complex example, such as m1, m2, m3", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378077967", "createdAt": "2020-02-12T07:29:10Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4Nzg0Nw==", "bodyText": "What's the difference between this measurements with the paths in QueryPlan?\nRefactor the organization or rename this field", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378087847", "createdAt": "2020-02-12T07:58:25Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3Nzk2Nw=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MzMxNA==", "bodyText": "Actually, the paths in QueryPlan are paths of all devices. It's for verification and complete DataTypeMap to execute the datatypes for the execution paths this time in DataSet.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378143314", "createdAt": "2020-02-12T09:52:52Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3Nzk2Nw=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA3MzM2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzoyOToyN1rOFokDfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTo1MzoxMFrOFooDCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODA3OQ==", "bodyText": "the same as above", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378078079", "createdAt": "2020-02-12T07:29:27Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MzQ5Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378143497", "createdAt": "2020-02-12T09:53:10Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODA3OQ=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA3NzgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozMToyNlrOFokGBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTo1NTo1OFrOFooJbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n          \n          \n            \n              private Map<String, TSDataType> seriesTypeMap; // e.g. root.ln.d1.temperature -> Float\n          \n      \n    \n    \n  \n\nmake the field name clear", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378078727", "createdAt": "2020-02-12T07:31:26Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NTEzMg==", "bodyText": "Add a comment to explain it.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378145132", "createdAt": "2020-02-12T09:55:58Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODcyNw=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA3OTY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozMjoxNFrOFokHCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozODoxM1rOFozerQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA==", "bodyText": "why there isn't a RawDataQueryPan", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378078984", "createdAt": "2020-02-12T07:32:14Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NTUwNw==", "bodyText": "Of course there isn't a RawDataQueryPan. We don't need parameters in it.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378145507", "createdAt": "2020-02-12T09:56:32Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNzQxNg==", "bodyText": "but you need to do a RawData query for each device a", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378227416", "createdAt": "2020-02-12T12:44:20Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMDc5Nw==", "bodyText": "I have added a RawDataQueryPlan in AlignByDeviceDataSet.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378330797", "createdAt": "2020-02-12T15:38:13Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA4MTAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozMjo0OFrOFokH0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTo1Njo0N1rOFooLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTE4Ng==", "bodyText": "put fields in the front of the class", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378079186", "createdAt": "2020-02-12T07:32:48Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>(); // for group by device sql\n+  //the measurements that have quotation mark. e.g., \"abc\",\n+  // '11', the data type is considered as String and the value  is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>(); // for group by device sql\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>(); // for group by device sql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NTY2Mw==", "bodyText": "OK.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378145663", "createdAt": "2020-02-12T09:56:47Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>(); // for group by device sql\n+  //the measurements that have quotation mark. e.g., \"abc\",\n+  // '11', the data type is considered as String and the value  is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>(); // for group by device sql\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>(); // for group by device sql", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTE4Ng=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA4Mzc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozNDowN1rOFokJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTo1ODowOVrOFooOtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTYwMg==", "bodyText": "remove this", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378079602", "createdAt": "2020-02-12T07:34:07Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NjQ4Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378146486", "createdAt": "2020-02-12T09:58:09Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTYwMg=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTEwNDY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0MzoyMFrOFokVrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoyNzoyOVrOFoucdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MjczNQ==", "bodyText": "min what?", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378082735", "createdAt": "2020-02-12T07:43:20Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>(); // for group by device sql\n+  //the measurements that have quotation mark. e.g., \"abc\",\n+  // '11', the data type is considered as String and the value  is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>(); // for group by device sql\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>(); // for group by device sql\n+\n+  //we use the following algorithm to reproduce the order of measurements that user writes.\n+  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n+  // column there is at least one device having it, and for each b_i column there is no device\n+  // having it, and 'c_i' is a const column.\n+  // Then, measurements = {a1, a2, a3, a4, a5};\n+  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements = {2, 3, 8};\n+  // constMeasurements = {'c1', 'c2', 'c3'}, and positionOfConstMeasurements = {0, 4, 7}.\n+  // When to reproduce the order of measurements. The pseudocode is:\n+  //<pre>\n+  // current = 0;\n+  // if (min(notExist, const) <= current) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0ODI4Mg==", "bodyText": "I don't understand it too. Let's call that guy writing this comment to modify.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378148282", "createdAt": "2020-02-12T10:01:15Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>(); // for group by device sql\n+  //the measurements that have quotation mark. e.g., \"abc\",\n+  // '11', the data type is considered as String and the value  is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>(); // for group by device sql\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>(); // for group by device sql\n+\n+  //we use the following algorithm to reproduce the order of measurements that user writes.\n+  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n+  // column there is at least one device having it, and for each b_i column there is no device\n+  // having it, and 'c_i' is a const column.\n+  // Then, measurements = {a1, a2, a3, a4, a5};\n+  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements = {2, 3, 8};\n+  // constMeasurements = {'c1', 'c2', 'c3'}, and positionOfConstMeasurements = {0, 4, 7}.\n+  // When to reproduce the order of measurements. The pseudocode is:\n+  //<pre>\n+  // current = 0;\n+  // if (min(notExist, const) <= current) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MjczNQ=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0ODMwOA==", "bodyText": "Hi, I am the author :-D\nNotice that:\npositionOfNotExistMeasurements = {2, 3, 8} \npositionOfConstMeasurements = {0, 4, 7}\n\nThen\nif (min(notExist, const) <= current)\n\nmeans if min(positionOfNotExistMeasurements[i], positionOfConstMeasurements[j]) < current", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378248308", "createdAt": "2020-02-12T13:27:29Z", "author": {"login": "jixuan1989"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>(); // for group by device sql\n+  //the measurements that have quotation mark. e.g., \"abc\",\n+  // '11', the data type is considered as String and the value  is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>(); // for group by device sql\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>(); // for group by device sql\n+\n+  //we use the following algorithm to reproduce the order of measurements that user writes.\n+  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n+  // column there is at least one device having it, and for each b_i column there is no device\n+  // having it, and 'c_i' is a const column.\n+  // Then, measurements = {a1, a2, a3, a4, a5};\n+  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements = {2, 3, 8};\n+  // constMeasurements = {'c1', 'c2', 'c3'}, and positionOfConstMeasurements = {0, 4, 7}.\n+  // When to reproduce the order of measurements. The pseudocode is:\n+  //<pre>\n+  // current = 0;\n+  // if (min(notExist, const) <= current) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MjczNQ=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE1Mzk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODowNDo1MVrOFokzIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDowMjowN1rOFooXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (queryOperator.isGroupByDevice()) {\n          \n          \n            \n                if (queryOperator.isAlignByDevice()) {", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378090272", "createdAt": "2020-02-12T08:04:51Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -242,16 +244,26 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       ((AggregationPlan) queryPlan)\n           .setAggregations(queryOperator.getSelectOperator().getAggregations());\n     } else {\n-      queryPlan = new QueryPlan();\n+      queryPlan = new RawDataQueryPlan();\n     }\n     if (queryOperator.isGroupByDevice()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDYzMw==", "bodyText": "Futher, should the QueryOperator be separate to different type?", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378090633", "createdAt": "2020-02-12T08:05:49Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -242,16 +244,26 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       ((AggregationPlan) queryPlan)\n           .setAggregations(queryOperator.getSelectOperator().getAggregations());\n     } else {\n-      queryPlan = new QueryPlan();\n+      queryPlan = new RawDataQueryPlan();\n     }\n     if (queryOperator.isGroupByDevice()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDI3Mg=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0ODcyOQ==", "bodyText": "I think it's nice now.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378148729", "createdAt": "2020-02-12T10:02:07Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -242,16 +244,26 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       ((AggregationPlan) queryPlan)\n           .setAggregations(queryOperator.getSelectOperator().getAggregations());\n     } else {\n-      queryPlan = new QueryPlan();\n+      queryPlan = new RawDataQueryPlan();\n     }\n     if (queryOperator.isGroupByDevice()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDI3Mg=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE2NTAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODowOToyOVrOFok5iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDowMjoxOVrOFooX7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MTkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ((AlignByDevicePlan) queryPlan).setDataTypeConsistencyChecker(dataTypeConsistencyChecker);\n          \n          \n            \n                  ((AlignByDevicePlan) queryPlan).setDataTypeConsistencyChecker(seriesTypeMap);", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378091913", "createdAt": "2020-02-12T08:09:29Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -373,17 +386,17 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       }\n \n       // assigns to queryPlan\n-      queryPlan.setGroupByDevice(true);\n-      queryPlan.setMeasurements(measurements);\n-      queryPlan.setMeasurementsGroupByDevice(measurementsGroupByDevice);\n-      queryPlan.setDataTypeConsistencyChecker(dataTypeConsistencyChecker);\n+      ((AlignByDevicePlan) queryPlan).setMeasurements(measurements);\n+      ((AlignByDevicePlan) queryPlan).setMeasurementsGroupByDevice(deviceToMeasurementsMap);\n+      ((AlignByDevicePlan) queryPlan).setDataTypeConsistencyChecker(dataTypeConsistencyChecker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0ODg0Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378148847", "createdAt": "2020-02-12T10:02:19Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -373,17 +386,17 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       }\n \n       // assigns to queryPlan\n-      queryPlan.setGroupByDevice(true);\n-      queryPlan.setMeasurements(measurements);\n-      queryPlan.setMeasurementsGroupByDevice(measurementsGroupByDevice);\n-      queryPlan.setDataTypeConsistencyChecker(dataTypeConsistencyChecker);\n+      ((AlignByDevicePlan) queryPlan).setMeasurements(measurements);\n+      ((AlignByDevicePlan) queryPlan).setMeasurementsGroupByDevice(deviceToMeasurementsMap);\n+      ((AlignByDevicePlan) queryPlan).setDataTypeConsistencyChecker(dataTypeConsistencyChecker);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MTkxMw=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE3Mjg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoxMjozMlrOFok-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxNzowOFrOFoo36A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzA2Nw==", "bodyText": "This line could be put in the last, then you do not need to convert query plan to an AlignByDevicePlan each time", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378093067", "createdAt": "2020-02-12T08:12:32Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -242,16 +244,26 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       ((AggregationPlan) queryPlan)\n           .setAggregations(queryOperator.getSelectOperator().getAggregations());\n     } else {\n-      queryPlan = new QueryPlan();\n+      queryPlan = new RawDataQueryPlan();\n     }\n     if (queryOperator.isGroupByDevice()) {\n-      // below is the core realization of GROUP_BY_DEVICE sql logic\n+      // below is the core realization of ALIGN_BY_DEVICE sql logic\n+      AlignByDevicePlan alignByDevicePlan = new AlignByDevicePlan();\n+      if (queryPlan instanceof GroupByPlan) {\n+        alignByDevicePlan.setGroupByPlan((GroupByPlan) queryPlan);\n+      } else if (queryPlan instanceof FillQueryPlan) {\n+        alignByDevicePlan.setFillQueryPlan((FillQueryPlan) queryPlan);\n+      } else if (queryPlan instanceof AggregationPlan) {\n+        alignByDevicePlan.setAggregationPlan((AggregationPlan) queryPlan);\n+      }\n+\n+      queryPlan = alignByDevicePlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NzAzMg==", "bodyText": "Thank you for advice! Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378157032", "createdAt": "2020-02-12T10:17:08Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -242,16 +244,26 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       ((AggregationPlan) queryPlan)\n           .setAggregations(queryOperator.getSelectOperator().getAggregations());\n     } else {\n-      queryPlan = new QueryPlan();\n+      queryPlan = new RawDataQueryPlan();\n     }\n     if (queryOperator.isGroupByDevice()) {\n-      // below is the core realization of GROUP_BY_DEVICE sql logic\n+      // below is the core realization of ALIGN_BY_DEVICE sql logic\n+      AlignByDevicePlan alignByDevicePlan = new AlignByDevicePlan();\n+      if (queryPlan instanceof GroupByPlan) {\n+        alignByDevicePlan.setGroupByPlan((GroupByPlan) queryPlan);\n+      } else if (queryPlan instanceof FillQueryPlan) {\n+        alignByDevicePlan.setFillQueryPlan((FillQueryPlan) queryPlan);\n+      } else if (queryPlan instanceof AggregationPlan) {\n+        alignByDevicePlan.setAggregationPlan((AggregationPlan) queryPlan);\n+      }\n+\n+      queryPlan = alignByDevicePlan;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzA2Nw=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE3NjA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoxMzo1MVrOFok_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxODowNFrOFoo5tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzU1NQ==", "bodyText": "There is a typo in line 426, divice", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378093555", "createdAt": "2020-02-12T08:13:51Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -395,7 +408,7 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n \n       if (filterOperator != null) {\n         IExpression expression = filterOperator.transformToExpression();\n-        queryPlan.setExpression(expression);\n+        ((RawDataQueryPlan) queryPlan).setExpression(expression);\n       }\n     }\n     generateDataTypes(queryPlan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NzQ5NA==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378157494", "createdAt": "2020-02-12T10:18:04Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -395,7 +408,7 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n \n       if (filterOperator != null) {\n         IExpression expression = filterOperator.transformToExpression();\n-        queryPlan.setExpression(expression);\n+        ((RawDataQueryPlan) queryPlan).setExpression(expression);\n       }\n     }\n     generateDataTypes(queryPlan);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzU1NQ=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE4NTc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoxNzoxNlrOFolFgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxODo0OVrOFoo7TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NDk3Ng==", "bodyText": "remove the for group by device comment", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378094976", "createdAt": "2020-02-12T08:17:16Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NzkwMA==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378157900", "createdAt": "2020-02-12T10:18:49Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NDk3Ng=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTIxMzMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoyNjo1MlrOFolV_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNTozNFrOFopfFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTE5OA==", "bodyText": "remove this comment", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378099198", "createdAt": "2020-02-12T08:26:52Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NzA2MQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378167061", "createdAt": "2020-02-12T10:35:34Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTE5OA=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTIxNDY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoyNzoxOVrOFolWvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNTozMlrOFopfAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTM5MA==", "bodyText": "remove this", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378099390", "createdAt": "2020-02-12T08:27:19Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NzA0MQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378167041", "createdAt": "2020-02-12T10:35:32Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTM5MA=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTIxNTI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoyNzozM1rOFolXIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoyMDo1MFrOFoo_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTQ5MQ==", "bodyText": "remove this", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378099491", "createdAt": "2020-02-12T08:27:33Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n+      this.unit = alignByDevicePlan.getGroupByPlan().getInterval();\n+      this.slidingStep = alignByDevicePlan.getGroupByPlan().getSlidingStep();\n+      this.startTime = alignByDevicePlan.getGroupByPlan().getStartTime();\n+      this.endTime = alignByDevicePlan.getGroupByPlan().getEndTime();\n \n-    } else if (queryPlan instanceof AggregationPlan) {\n+    } else if (alignByDevicePlan.getAggregationPlan() != null) {\n       this.dataSetType = DataSetType.AGGREGATE;\n \n-    } else if (queryPlan instanceof FillQueryPlan) {\n+    } else if (alignByDevicePlan.getFillQueryPlan() != null) {\n       this.dataSetType = DataSetType.FILL;\n       // assign parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1OTA0NQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378159045", "createdAt": "2020-02-12T10:20:50Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n+      this.unit = alignByDevicePlan.getGroupByPlan().getInterval();\n+      this.slidingStep = alignByDevicePlan.getGroupByPlan().getSlidingStep();\n+      this.startTime = alignByDevicePlan.getGroupByPlan().getStartTime();\n+      this.endTime = alignByDevicePlan.getGroupByPlan().getEndTime();\n \n-    } else if (queryPlan instanceof AggregationPlan) {\n+    } else if (alignByDevicePlan.getAggregationPlan() != null) {\n       this.dataSetType = DataSetType.AGGREGATE;\n \n-    } else if (queryPlan instanceof FillQueryPlan) {\n+    } else if (alignByDevicePlan.getFillQueryPlan() != null) {\n       this.dataSetType = DataSetType.FILL;\n       // assign parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTQ5MQ=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTM4Nzk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOToyMjoxOVrOFom_YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoyNzo1NVrOFopO4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNjE3Ng==", "bodyText": "We could add a queryType in AlignByDevicePlan, and use switch here", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378126176", "createdAt": "2020-02-12T09:22:19Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2MjkxNQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378162915", "createdAt": "2020-02-12T10:27:55Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNjE3Ng=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTM5OTQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOToyNTozMlrOFonGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNToyNlrOFopeyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNzkxNg==", "bodyText": "Don't you save three plans in AlignByDevicePlan? They could be reused", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378127916", "createdAt": "2020-02-12T09:25:32Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -207,7 +211,7 @@ protected boolean hasNextWithoutConstraint() throws IOException {\n             currentDataSet = queryRouter.fill(fillQueryPlan, context);\n             break;\n           case QUERY:\n-            QueryPlan queryPlan = new QueryPlan();\n+            RawDataQueryPlan queryPlan = new RawDataQueryPlan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2Njk4Nw==", "bodyText": "Good Idea. Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378166987", "createdAt": "2020-02-12T10:35:26Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -207,7 +211,7 @@ protected boolean hasNextWithoutConstraint() throws IOException {\n             currentDataSet = queryRouter.fill(fillQueryPlan, context);\n             break;\n           case QUERY:\n-            QueryPlan queryPlan = new QueryPlan();\n+            RawDataQueryPlan queryPlan = new RawDataQueryPlan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNzkxNg=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTQwMTM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOToyNjowM1rOFonHXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNToxOFrOFopehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyODIyMg==", "bodyText": "Reuse the query plan in AlignByDevicePlan, no need to set the parameters again and again", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378128222", "createdAt": "2020-02-12T09:26:03Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n+      this.unit = alignByDevicePlan.getGroupByPlan().getInterval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NjkxNg==", "bodyText": "Good Idea. Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378166916", "createdAt": "2020-02-12T10:35:18Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n+      this.unit = alignByDevicePlan.getGroupByPlan().getInterval();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyODIyMg=="}, "originalCommit": {"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA1OTU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo1MTo1N1rOFotYew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyODo0NFrOFozFIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMDkwNw==", "bodyText": "remove this unused", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378230907", "createdAt": "2020-02-12T12:51:57Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // e.g. temperature, status, speed\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // e.g. root.ln.d1 -> temperature\n+  // to check data type consistency for the same name sensor of different devices\n+  private Map<String, TSDataType> dataTypeConsistencyChecker;\n+  private Map<String, IExpression> deviceToFilterMap;\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  // the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>();\n+  // the measurements that have quotation mark. e.g. \"abc\",\n+  // '11', the data type is considered as String and the value is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>();\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>();\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNDI1OQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378324259", "createdAt": "2020-02-12T15:28:44Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // e.g. temperature, status, speed\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // e.g. root.ln.d1 -> temperature\n+  // to check data type consistency for the same name sensor of different devices\n+  private Map<String, TSDataType> dataTypeConsistencyChecker;\n+  private Map<String, IExpression> deviceToFilterMap;\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  // the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>();\n+  // the measurements that have quotation mark. e.g. \"abc\",\n+  // '11', the data type is considered as String and the value is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>();\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>();\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMDkwNw=="}, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA2OTMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo1NToxMlrOFoteXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyODo1MVrOFozFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjQxMg==", "bodyText": "ha?", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378232412", "createdAt": "2020-02-12T12:55:12Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "diffHunk": "@@ -20,7 +20,8 @@\n \n import org.apache.iotdb.db.qp.logical.Operator;\n \n-public class GroupByPlan extends AggregationPlan {\n+public class\n+GroupByPlan extends AggregationPlan {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNDMzNA==", "bodyText": "...Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378324334", "createdAt": "2020-02-12T15:28:51Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "diffHunk": "@@ -20,7 +20,8 @@\n \n import org.apache.iotdb.db.qp.logical.Operator;\n \n-public class GroupByPlan extends AggregationPlan {\n+public class\n+GroupByPlan extends AggregationPlan {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjQxMg=="}, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA3MTY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo1NTo1NVrOFotfwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyOTo0N1rOFozIOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            GroupByPlan extends AggregationPlan {\n          \n          \n            \n            GroupByTimePlan extends AggregationPlan {", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378232769", "createdAt": "2020-02-12T12:55:55Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "diffHunk": "@@ -20,7 +20,8 @@\n \n import org.apache.iotdb.db.qp.logical.Operator;\n \n-public class GroupByPlan extends AggregationPlan {\n+public class\n+GroupByPlan extends AggregationPlan {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNTA0OQ==", "bodyText": "Just keep it.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378325049", "createdAt": "2020-02-12T15:29:47Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "diffHunk": "@@ -20,7 +20,8 @@\n \n import org.apache.iotdb.db.qp.logical.Operator;\n \n-public class GroupByPlan extends AggregationPlan {\n+public class\n+GroupByPlan extends AggregationPlan {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjc2OQ=="}, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA3NDE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo1NjoyOVrOFothGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozNjoyM1rOFozaKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzExMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean isAlignByDevice = false;\n          \n          \n            \n              private boolean alignByDevice = false;", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378233113", "createdAt": "2020-02-12T12:56:29Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -45,8 +45,8 @@\n   private int seriesLimit = 0;\n   private int seriesOffset = 0;\n \n-  private boolean isGroupByDevice = false;\n-  private boolean isAlign = true;\n+  private boolean isAlignByDevice = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTY0MA==", "bodyText": "Just keep it.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378329640", "createdAt": "2020-02-12T15:36:23Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -45,8 +45,8 @@\n   private int seriesLimit = 0;\n   private int seriesOffset = 0;\n \n-  private boolean isGroupByDevice = false;\n-  private boolean isAlign = true;\n+  private boolean isAlignByDevice = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzExMw=="}, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA3NDgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo1NjozOVrOFothcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozNjozNVrOFozaqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean isAlignByTime = true;\n          \n          \n            \n              private boolean alignByTime = true;", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378233202", "createdAt": "2020-02-12T12:56:39Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -45,8 +45,8 @@\n   private int seriesLimit = 0;\n   private int seriesOffset = 0;\n \n-  private boolean isGroupByDevice = false;\n-  private boolean isAlign = true;\n+  private boolean isAlignByDevice = false;\n+  private boolean isAlignByTime = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTc2OA==", "bodyText": "Just keep it please.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378329768", "createdAt": "2020-02-12T15:36:35Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -45,8 +45,8 @@\n   private int seriesLimit = 0;\n   private int seriesOffset = 0;\n \n-  private boolean isGroupByDevice = false;\n-  private boolean isAlign = true;\n+  private boolean isAlignByDevice = false;\n+  private boolean isAlignByTime = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzIwMg=="}, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA4NTk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzowMDo0M1rOFotoiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozMDo1NVrOFozLfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTAxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This QueryDataSet is used for GROUP_BY_DEVICE query result.\n          \n          \n            \n             * This QueryDataSet is used for align by device query result.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378235019", "createdAt": "2020-02-12T13:00:43Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -36,9 +42,6 @@\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n import org.apache.iotdb.tsfile.utils.Binary;\n \n-import java.io.IOException;\n-import java.util.*;\n-\n \n /**\n  * This QueryDataSet is used for GROUP_BY_DEVICE query result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNTg4Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378325886", "createdAt": "2020-02-12T15:30:55Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -36,9 +42,6 @@\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n import org.apache.iotdb.tsfile.utils.Binary;\n \n-import java.io.IOException;\n-import java.util.*;\n-\n \n /**\n  * This QueryDataSet is used for GROUP_BY_DEVICE query result.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTAxOQ=="}, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA4NzYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzowMToyMlrOFotpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozNDo1OVrOFozWiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTMyNQ==", "bodyText": "how about renaming this class to AlignByDeviceDataset", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378235325", "createdAt": "2020-02-12T13:01:22Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,45 +77,41 @@\n   private int[] currentColumnMapRelation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyODcxMg==", "bodyText": "It's nice. I will rename it.", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378328712", "createdAt": "2020-02-12T15:34:59Z", "author": {"login": "Alima777"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,45 +77,41 @@\n   private int[] currentColumnMapRelation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTMyNQ=="}, "originalCommit": {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjM5MTk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/AlignByDeviceDataSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToxODo0NlrOFpEJ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToxODo0NlrOFpEJ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwNDAyMg==", "bodyText": "This logic is a little strange", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378604022", "createdAt": "2020-02-13T01:18:46Z", "author": {"login": "qiaojialin"}, "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/AlignByDeviceDataSet.java", "diffHunk": "@@ -80,45 +78,42 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public AlignByDeviceDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n-    //BuildOutDataTypes();\n+    this.deviceToMeasurementsMap = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n \n-    if (queryPlan instanceof GroupByPlan) {\n-      this.dataSetType = DataSetType.GROUPBY;\n-      // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n-\n-    } else if (queryPlan instanceof AggregationPlan) {\n-      this.dataSetType = DataSetType.AGGREGATE;\n-\n-    } else if (queryPlan instanceof FillQueryPlan) {\n-      this.dataSetType = DataSetType.FILL;\n-      // assign parameters\n-      this.queryTime = ((FillQueryPlan) queryPlan).getQueryTime();\n-      this.fillType = ((FillQueryPlan) queryPlan).getFillType();\n-    } else {\n-      this.dataSetType = DataSetType.QUERY;\n+    switch (alignByDevicePlan.getOperatorType()){\n+      case GROUPBY:\n+        this.dataSetType = DataSetType.GROUPBY;\n+        this.groupByPlan = alignByDevicePlan.getGroupByPlan();\n+        break;\n+      case AGGREGATION:\n+        this.dataSetType = DataSetType.AGGREGATE;\n+        this.aggregationPlan = alignByDevicePlan.getAggregationPlan();\n+        break;\n+      case FILL:\n+        this.dataSetType = DataSetType.FILL;\n+        this.fillQueryPlan = alignByDevicePlan.getFillQueryPlan();\n+        break;\n+      default:\n+        this.dataSetType = DataSetType.QUERY;\n+        this.rawDataQueryPlan = new RawDataQueryPlan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c991383bb5e55b2f3f2ba75072cd214207d8034d"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 411, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}