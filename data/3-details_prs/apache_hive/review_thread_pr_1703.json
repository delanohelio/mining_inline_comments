{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjEzNjgx", "number": 1703, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTowMToyNVrOE9ldZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTowMToyNVrOE9ldZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDEyMzI2OnYy", "diffSide": "RIGHT", "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTowMToyNVrOH6WdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODozOToxNFrOH7wm8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NzQ0OQ==", "bodyText": "What if interruption occurs while the execution of CleanerThread is within this try block, wouldn't the InterruptedException be caught by this catch block, and the thread will go on?", "url": "https://github.com/apache/hive/pull/1703#discussion_r530947449", "createdAt": "2020-11-26T11:01:25Z", "author": {"login": "miklosgergely"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -1242,64 +1244,50 @@ private void process(NotificationEvent event, ListenerEvent listenerEvent) throw\n   }\n \n   private static class CleanerThread extends Thread {\n-    private RawStore rs;\n+    private final RawStore rs;\n     private int ttl;\n-    private boolean shouldRun = true;\n     private long sleepTime;\n \n     CleanerThread(Configuration conf, RawStore rs) {\n       super(\"DB-Notification-Cleaner\");\n-      this.rs = rs;\n-      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n-      if(isReplEnabled){\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.REPL_EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      else {\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      setCleanupInterval(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL,\n-              TimeUnit.MILLISECONDS));\n       setDaemon(true);\n+      this.rs = Objects.requireNonNull(rs);\n+\n+      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n+      ConfVars ttlConf = (isReplEnabled) ?  ConfVars.REPL_EVENT_DB_LISTENER_TTL : ConfVars.EVENT_DB_LISTENER_TTL;\n+      setTimeToLive(MetastoreConf.getTimeVar(conf, ttlConf, TimeUnit.SECONDS));\n+      setCleanupInterval(\n+          MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL, TimeUnit.MILLISECONDS));\n     }\n \n     @Override\n     public void run() {\n-      while (shouldRun) {\n+      while (true) {\n+        LOG.debug(\"Cleaner thread running\");\n         try {\n           rs.cleanNotificationEvents(ttl);\n           rs.cleanWriteNotificationEvents(ttl);\n         } catch (Exception ex) {\n-          //catching exceptions here makes sure that the thread doesn't die in case of unexpected\n-          //exceptions\n-          LOG.warn(\"Exception received while cleaning notifications: \", ex);\n+          LOG.warn(\"Exception received while cleaning notifications\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNTc3Mw==", "bodyText": "Hey, fair question, and I considered that, however, InterruptedException is a checked-exception and neither of these two methods declare it so it will never be thrown here (unless the signature changes later to throw one).  In fact, these methods do not throw any checked exceptions at all.\n void cleanWriteNotificationEvents(int olderThan);\n void cleanNotificationEvents(int olderThan);\n\nSo, if the thread is interrupted at any point, it will eventually make its ways to the Thread.sleep() call and throw the InterruptedException at that time (and exit).", "url": "https://github.com/apache/hive/pull/1703#discussion_r531715773", "createdAt": "2020-11-27T17:48:09Z", "author": {"login": "belugabehr"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -1242,64 +1244,50 @@ private void process(NotificationEvent event, ListenerEvent listenerEvent) throw\n   }\n \n   private static class CleanerThread extends Thread {\n-    private RawStore rs;\n+    private final RawStore rs;\n     private int ttl;\n-    private boolean shouldRun = true;\n     private long sleepTime;\n \n     CleanerThread(Configuration conf, RawStore rs) {\n       super(\"DB-Notification-Cleaner\");\n-      this.rs = rs;\n-      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n-      if(isReplEnabled){\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.REPL_EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      else {\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      setCleanupInterval(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL,\n-              TimeUnit.MILLISECONDS));\n       setDaemon(true);\n+      this.rs = Objects.requireNonNull(rs);\n+\n+      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n+      ConfVars ttlConf = (isReplEnabled) ?  ConfVars.REPL_EVENT_DB_LISTENER_TTL : ConfVars.EVENT_DB_LISTENER_TTL;\n+      setTimeToLive(MetastoreConf.getTimeVar(conf, ttlConf, TimeUnit.SECONDS));\n+      setCleanupInterval(\n+          MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL, TimeUnit.MILLISECONDS));\n     }\n \n     @Override\n     public void run() {\n-      while (shouldRun) {\n+      while (true) {\n+        LOG.debug(\"Cleaner thread running\");\n         try {\n           rs.cleanNotificationEvents(ttl);\n           rs.cleanWriteNotificationEvents(ttl);\n         } catch (Exception ex) {\n-          //catching exceptions here makes sure that the thread doesn't die in case of unexpected\n-          //exceptions\n-          LOG.warn(\"Exception received while cleaning notifications: \", ex);\n+          LOG.warn(\"Exception received while cleaning notifications\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NzQ0OQ=="}, "originalCommit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5Mzk4OQ==", "bodyText": "@miklosgergely Any further questions or concerns?", "url": "https://github.com/apache/hive/pull/1703#discussion_r532093989", "createdAt": "2020-11-28T18:54:33Z", "author": {"login": "belugabehr"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -1242,64 +1244,50 @@ private void process(NotificationEvent event, ListenerEvent listenerEvent) throw\n   }\n \n   private static class CleanerThread extends Thread {\n-    private RawStore rs;\n+    private final RawStore rs;\n     private int ttl;\n-    private boolean shouldRun = true;\n     private long sleepTime;\n \n     CleanerThread(Configuration conf, RawStore rs) {\n       super(\"DB-Notification-Cleaner\");\n-      this.rs = rs;\n-      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n-      if(isReplEnabled){\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.REPL_EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      else {\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      setCleanupInterval(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL,\n-              TimeUnit.MILLISECONDS));\n       setDaemon(true);\n+      this.rs = Objects.requireNonNull(rs);\n+\n+      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n+      ConfVars ttlConf = (isReplEnabled) ?  ConfVars.REPL_EVENT_DB_LISTENER_TTL : ConfVars.EVENT_DB_LISTENER_TTL;\n+      setTimeToLive(MetastoreConf.getTimeVar(conf, ttlConf, TimeUnit.SECONDS));\n+      setCleanupInterval(\n+          MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL, TimeUnit.MILLISECONDS));\n     }\n \n     @Override\n     public void run() {\n-      while (shouldRun) {\n+      while (true) {\n+        LOG.debug(\"Cleaner thread running\");\n         try {\n           rs.cleanNotificationEvents(ttl);\n           rs.cleanWriteNotificationEvents(ttl);\n         } catch (Exception ex) {\n-          //catching exceptions here makes sure that the thread doesn't die in case of unexpected\n-          //exceptions\n-          LOG.warn(\"Exception received while cleaning notifications: \", ex);\n+          LOG.warn(\"Exception received while cleaning notifications\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NzQ0OQ=="}, "originalCommit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQyNDQzMg==", "bodyText": "No, go ahead and merge it", "url": "https://github.com/apache/hive/pull/1703#discussion_r532424432", "createdAt": "2020-11-30T08:39:14Z", "author": {"login": "miklosgergely"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -1242,64 +1244,50 @@ private void process(NotificationEvent event, ListenerEvent listenerEvent) throw\n   }\n \n   private static class CleanerThread extends Thread {\n-    private RawStore rs;\n+    private final RawStore rs;\n     private int ttl;\n-    private boolean shouldRun = true;\n     private long sleepTime;\n \n     CleanerThread(Configuration conf, RawStore rs) {\n       super(\"DB-Notification-Cleaner\");\n-      this.rs = rs;\n-      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n-      if(isReplEnabled){\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.REPL_EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      else {\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      setCleanupInterval(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL,\n-              TimeUnit.MILLISECONDS));\n       setDaemon(true);\n+      this.rs = Objects.requireNonNull(rs);\n+\n+      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n+      ConfVars ttlConf = (isReplEnabled) ?  ConfVars.REPL_EVENT_DB_LISTENER_TTL : ConfVars.EVENT_DB_LISTENER_TTL;\n+      setTimeToLive(MetastoreConf.getTimeVar(conf, ttlConf, TimeUnit.SECONDS));\n+      setCleanupInterval(\n+          MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL, TimeUnit.MILLISECONDS));\n     }\n \n     @Override\n     public void run() {\n-      while (shouldRun) {\n+      while (true) {\n+        LOG.debug(\"Cleaner thread running\");\n         try {\n           rs.cleanNotificationEvents(ttl);\n           rs.cleanWriteNotificationEvents(ttl);\n         } catch (Exception ex) {\n-          //catching exceptions here makes sure that the thread doesn't die in case of unexpected\n-          //exceptions\n-          LOG.warn(\"Exception received while cleaning notifications: \", ex);\n+          LOG.warn(\"Exception received while cleaning notifications\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NzQ0OQ=="}, "originalCommit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 264, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}