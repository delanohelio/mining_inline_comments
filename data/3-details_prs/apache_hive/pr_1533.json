{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjgxMjU4", "number": 1533, "title": "HIVE-24211: Replace Snapshot invalidate logic with WriteSet check for txn conflict detection", "bodyText": "\u2026tection\n\nWhat changes were proposed in this pull request?\n\nHIVE-24211: Replace Snapshot invalidate logic with WriteSet check for txn conflict detection.\nWhy are the changes needed?\n\nThe Issue is that writeId in Snapshot has no information on partition, meaning that concurrent writes to different partitions would be seen as writes to the same non-partitioned table causing Snapshot to be obsolete.\nDoes this PR introduce any user-facing change?\n\nHMS API, new method added\nHow was this patch tested?\n\nunit tests", "createdAt": "2020-09-28T16:57:52Z", "url": "https://github.com/apache/hive/pull/1533", "merged": true, "mergeCommit": {"oid": "9feb08710fa29efeed082e457e63ed8a3e6ff9d7"}, "closed": true, "closedAt": "2020-10-09T15:08:20Z", "author": {"login": "deniskuzZ"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNnqXCgFqTQ5ODQzMjYyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQJQapAFqTUwMzY3MzMyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDMyNjI0", "url": "https://github.com/apache/hive/pull/1533#pullrequestreview-498432624", "createdAt": "2020-09-29T12:50:49Z", "commit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1MDo0OVrOHZrikA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1MDo0OVrOHZrikA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4OTgwOA==", "bodyText": "That is an interesting change, do I understand correctly, that this says we only need to do a follow up check only, if the txn was outdated, because in the other cases the exclusive lock + the partition based writeset checking guarantees, that writeIds will be always valid at the second time? Could you add some comments here", "url": "https://github.com/apache/hive/pull/1533#discussion_r496689808", "createdAt": "2020-09-29T12:50:49Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/Driver.java", "diffHunk": "@@ -497,38 +497,41 @@ private void runInternal(String command, boolean alreadyCompiled) throws Command\n         HiveConf.ConfVars.HIVE_TXN_MAX_RETRYSNAPSHOT_COUNT);\n \n       try {\n-        while (!driverTxnHandler.isValidTxnListState() && ++retryShapshotCnt <= maxRetrySnapshotCnt) {\n-          LOG.info(\"Re-compiling after acquiring locks, attempt #\" + retryShapshotCnt);\n-          // Snapshot was outdated when locks were acquired, hence regenerate context, txn list and retry.\n-          // TODO: Lock acquisition should be moved before analyze, this is a bit hackish.\n-          // Currently, we acquire a snapshot, compile the query with that snapshot, and then - acquire locks.\n-          // If snapshot is still valid, we continue as usual.\n-          // But if snapshot is not valid, we recompile the query.\n-          if (driverContext.isOutdatedTxn()) {\n-            LOG.info(\"Snapshot is outdated, re-initiating transaction ...\");\n-            driverContext.getTxnManager().rollbackTxn();\n-\n-            String userFromUGI = DriverUtils.getUserFromUGI(driverContext);\n-            driverContext.getTxnManager().openTxn(context, userFromUGI, driverContext.getTxnType());\n-            lockAndRespond();\n+        do {\n+          driverContext.setOutdatedTxn(false);\n+\n+          if (!driverTxnHandler.isValidTxnListState()) {\n+            LOG.info(\"Re-compiling after acquiring locks, attempt #\" + retryShapshotCnt);\n+            // Snapshot was outdated when locks were acquired, hence regenerate context, txn list and retry.\n+            // TODO: Lock acquisition should be moved before analyze, this is a bit hackish.\n+            // Currently, we acquire a snapshot, compile the query with that snapshot, and then - acquire locks.\n+            // If snapshot is still valid, we continue as usual.\n+            // But if snapshot is not valid, we recompile the query.\n+            if (driverContext.isOutdatedTxn()) {\n+              LOG.info(\"Snapshot is outdated, re-initiating transaction ...\");\n+              driverContext.getTxnManager().rollbackTxn();\n+\n+              String userFromUGI = DriverUtils.getUserFromUGI(driverContext);\n+              driverContext.getTxnManager().openTxn(context, userFromUGI, driverContext.getTxnType());\n+              lockAndRespond();\n+            }\n+            driverContext.setRetrial(true);\n+            driverContext.getBackupContext().addSubContext(context);\n+            driverContext.getBackupContext().setHiveLocks(context.getHiveLocks());\n+            context = driverContext.getBackupContext();\n+\n+            driverContext.getConf().set(ValidTxnList.VALID_TXNS_KEY,\n+              driverContext.getTxnManager().getValidTxns().toString());\n+\n+            if (driverContext.getPlan().hasAcidResourcesInQuery()) {\n+              compileInternal(context.getCmd(), true);\n+              driverTxnHandler.recordValidWriteIds();\n+              driverTxnHandler.setWriteIdForAcidFileSinks();\n+            }\n+            // Since we're reusing the compiled plan, we need to update its start time for current run\n+            driverContext.getPlan().setQueryStartTime(driverContext.getQueryDisplay().getQueryStartTime());\n           }\n-\n-          driverContext.setRetrial(true);\n-          driverContext.getBackupContext().addSubContext(context);\n-          driverContext.getBackupContext().setHiveLocks(context.getHiveLocks());\n-          context = driverContext.getBackupContext();\n-\n-          driverContext.getConf().set(ValidTxnList.VALID_TXNS_KEY,\n-            driverContext.getTxnManager().getValidTxns().toString());\n-\n-          if (driverContext.getPlan().hasAcidResourcesInQuery()) {\n-            compileInternal(context.getCmd(), true);\n-            driverTxnHandler.recordValidWriteIds();\n-            driverTxnHandler.setWriteIdForAcidFileSinks();\n-          }\n-          // Since we're reusing the compiled plan, we need to update its start time for current run\n-          driverContext.getPlan().setQueryStartTime(driverContext.getQueryDisplay().getQueryStartTime());\n-        }\n+        } while (driverContext.isOutdatedTxn() && ++retryShapshotCnt <= maxRetrySnapshotCnt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDQxNTA2", "url": "https://github.com/apache/hive/pull/1533#pullrequestreview-498441506", "createdAt": "2020-09-29T13:00:44Z", "commit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowMDo0NFrOHZr9BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowMDo0NFrOHZr9BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5NjU4MQ==", "bodyText": "Maybe add some javadoc, what does it do. I would emphasise that this method call only makes sense if the caller holds an exclusive lock, that blocks other txns to commit writes. And also, that this deliberately ignores inserts, or maybe this should be added to the DriverTxnHandler, that inserts will not invalidate the snapshot, that can cause duplicates", "url": "https://github.com/apache/hive/pull/1533#discussion_r496696581", "createdAt": "2020-09-29T13:00:44Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -1408,6 +1410,43 @@ private boolean isUpdateOrDelete(Statement stmt, String conflictSQLSuffix) throw\n     }\n   }\n \n+  public long getLatestTxnInConflict(long txnid) throws MetaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDQ2MDkz", "url": "https://github.com/apache/hive/pull/1533#pullrequestreview-498446093", "createdAt": "2020-09-29T13:05:53Z", "commit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowNTo1M1rOHZsKRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowNTo1M1rOHZsKRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5OTk3NQ==", "bodyText": "This fix is not related to the original problem, shouldn't it be committed separately?", "url": "https://github.com/apache/hive/pull/1533#discussion_r496699975", "createdAt": "2020-09-29T13:05:53Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -3501,6 +3541,10 @@ public void addDynamicPartitions(AddDynamicPartitions rqst)\n             pstmt.executeBatch();\n           }\n         }\n+        try (PreparedStatement pstmt = dbConn.prepareStatement(TXN_COMPONENTS_DP_DELETE_QUERY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDU1MzE5", "url": "https://github.com/apache/hive/pull/1533#pullrequestreview-498455319", "createdAt": "2020-09-29T13:15:50Z", "commit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNTo1MVrOHZslaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNTo1MVrOHZslaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjkyMw==", "bodyText": "This is probably a big enough change, but I was wondering if you could return all the conflicting txnIds and writeIds. In that case if the max conflicting txnId is less than the current one, you could skip two other call to the HMS for validTxnList and validWriteIdList and just remove the exceptions from the list.", "url": "https://github.com/apache/hive/pull/1533#discussion_r496706923", "createdAt": "2020-09-29T13:15:51Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -1408,6 +1410,43 @@ private boolean isUpdateOrDelete(Statement stmt, String conflictSQLSuffix) throw\n     }\n   }\n \n+  public long getLatestTxnInConflict(long txnid) throws MetaException {\n+    Connection dbConn = null;\n+    Statement stmt = null;\n+\n+    try {\n+      dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+      stmt = dbConn.createStatement();\n+\n+      String writeConflictQuery = \"SELECT MAX(\\\"COMMITTED\\\".\\\"WS_TXNID\\\")\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6ea97470067a90fbc1a6d0b809ddb28c5a7502c", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/d6ea97470067a90fbc1a6d0b809ddb28c5a7502c", "committedDate": "2020-09-28T16:56:31Z", "message": "Snapshot invalidate logic replace with writeset check for conflict detection"}, "afterCommit": {"oid": "4696f8d97a236a44562d3b25820745aa65583c7e", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/4696f8d97a236a44562d3b25820745aa65583c7e", "committedDate": "2020-09-29T17:02:40Z", "message": "Snapshot invalidate logic replace with writeset check for conflict detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4696f8d97a236a44562d3b25820745aa65583c7e", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/4696f8d97a236a44562d3b25820745aa65583c7e", "committedDate": "2020-09-29T17:02:40Z", "message": "Snapshot invalidate logic replace with writeset check for conflict detection"}, "afterCommit": {"oid": "c0ab72f709b5bb91c326e63eb3fbe60844bce41e", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/c0ab72f709b5bb91c326e63eb3fbe60844bce41e", "committedDate": "2020-09-29T20:20:31Z", "message": "Snapshot invalidate logic replace with writeset check for conflict detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0ab72f709b5bb91c326e63eb3fbe60844bce41e", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/c0ab72f709b5bb91c326e63eb3fbe60844bce41e", "committedDate": "2020-09-29T20:20:31Z", "message": "Snapshot invalidate logic replace with writeset check for conflict detection"}, "afterCommit": {"oid": "fee7ea9bb4dab2e6b326a70e969bedfeed6216ec", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/fee7ea9bb4dab2e6b326a70e969bedfeed6216ec", "committedDate": "2020-09-30T09:43:55Z", "message": "HIVE-24211: Replace Snapshot invalidate logic with WriteSet check for txn conflict detection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8860246dad2109251507a53d587c757c26193a78", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/8860246dad2109251507a53d587c757c26193a78", "committedDate": "2020-09-30T10:22:05Z", "message": "HIVE-24211: Replace Snapshot invalidate logic with WriteSet check for txn conflict detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fee7ea9bb4dab2e6b326a70e969bedfeed6216ec", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/fee7ea9bb4dab2e6b326a70e969bedfeed6216ec", "committedDate": "2020-09-30T09:43:55Z", "message": "HIVE-24211: Replace Snapshot invalidate logic with WriteSet check for txn conflict detection"}, "afterCommit": {"oid": "8860246dad2109251507a53d587c757c26193a78", "author": {"user": {"login": "deniskuzZ", "name": "Denys Kuzmenko"}}, "url": "https://github.com/apache/hive/commit/8860246dad2109251507a53d587c757c26193a78", "committedDate": "2020-09-30T10:22:05Z", "message": "HIVE-24211: Replace Snapshot invalidate logic with WriteSet check for txn conflict detection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjczMzIx", "url": "https://github.com/apache/hive/pull/1533#pullrequestreview-503673321", "createdAt": "2020-10-07T09:07:06Z", "commit": {"oid": "8860246dad2109251507a53d587c757c26193a78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3118, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}