{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3ODI3OTY1", "number": 992, "title": "HIVE-23269: Unsafe comparing bigints and strings", "bodyText": "Comparing bigints and (var)chars may output wrong results", "createdAt": "2020-04-23T10:34:14Z", "url": "https://github.com/apache/hive/pull/992", "merged": true, "mergeCommit": {"oid": "cd7252c7175c6f82731e619b16e3371565aaaec5"}, "closed": true, "closedAt": "2020-06-12T08:45:15Z", "author": {"login": "dengzhhu653"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcabmWHAFqTM5OTAyMDA3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcj6MzzgBqjMzNjYzNTk5Mjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDIwMDc3", "url": "https://github.com/apache/hive/pull/992#pullrequestreview-399020077", "createdAt": "2020-04-23T11:49:12Z", "commit": {"oid": "3ca425983510ee841439e9a9dd83b6e0547501a9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTo0OToxMlrOGKlLtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTo1NzoxNVrOGKleoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0ODE1MQ==", "bodyText": "this is a \"@parameterized\" testclass; please don't add testcases which are not use the parameterized nature... move these to a new testclass\nit might make sense to split the testcases into separate methods", "url": "https://github.com/apache/hive/pull/992#discussion_r413748151", "createdAt": "2020-04-23T11:49:12Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/parse/type/TestTypeCheckProcFactory.java", "diffHunk": "@@ -140,4 +147,37 @@ public void testWithNonZeroFraction() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testValidateUDFOnTypeCheck() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca425983510ee841439e9a9dd83b6e0547501a9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0OTc3Mg==", "bodyText": "you could move the oiTypeInfo0 conditions into a method (along with the Set) and then reuse the method 2 lines down\nmight make this more readable", "url": "https://github.com/apache/hive/pull/992#discussion_r413749772", "createdAt": "2020-04-23T11:51:54Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java", "diffHunk": "@@ -789,12 +791,25 @@ protected void validateUDF(ASTNode expr, boolean isFunction, TypeCheckCtx ctx, F\n \n         LogHelper console = new LogHelper(LOG);\n \n+        Set<PrimitiveObjectInspector.PrimitiveCategory> unsafeConventionTyps = Sets.newHashSet(\n+            PrimitiveObjectInspector.PrimitiveCategory.STRING,\n+            PrimitiveObjectInspector.PrimitiveCategory.VARCHAR,\n+            PrimitiveObjectInspector.PrimitiveCategory.CHAR);\n         // For now, if a bigint is going to be cast to a double throw an error or warning\n-        if ((oiTypeInfo0.equals(TypeInfoFactory.stringTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) ||\n-            (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.stringTypeInfo))) {\n+        if ((oiTypeInfo0 instanceof PrimitiveTypeInfo &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca425983510ee841439e9a9dd83b6e0547501a9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MDgyNA==", "bodyText": "I don't think the type variable is needed - you could just get both types when you are generating the warning messages.", "url": "https://github.com/apache/hive/pull/992#discussion_r413750824", "createdAt": "2020-04-23T11:53:40Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java", "diffHunk": "@@ -789,12 +791,25 @@ protected void validateUDF(ASTNode expr, boolean isFunction, TypeCheckCtx ctx, F\n \n         LogHelper console = new LogHelper(LOG);\n \n+        Set<PrimitiveObjectInspector.PrimitiveCategory> unsafeConventionTyps = Sets.newHashSet(\n+            PrimitiveObjectInspector.PrimitiveCategory.STRING,\n+            PrimitiveObjectInspector.PrimitiveCategory.VARCHAR,\n+            PrimitiveObjectInspector.PrimitiveCategory.CHAR);\n         // For now, if a bigint is going to be cast to a double throw an error or warning\n-        if ((oiTypeInfo0.equals(TypeInfoFactory.stringTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) ||\n-            (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.stringTypeInfo))) {\n+        if ((oiTypeInfo0 instanceof PrimitiveTypeInfo &&\n+            unsafeConventionTyps.contains(((PrimitiveTypeInfo)oiTypeInfo0).getPrimitiveCategory()) &&\n+            oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) || (oiTypeInfo1 instanceof PrimitiveTypeInfo &&\n+            unsafeConventionTyps.contains(((PrimitiveTypeInfo)oiTypeInfo1).getPrimitiveCategory()) &&\n+            oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo))) {\n           String error = StrictChecks.checkTypeSafety(conf);\n-          if (error != null) throw new UDFArgumentException(error);\n-          console.printError(\"WARNING: Comparing a bigint and a string may result in a loss of precision.\");\n+          if (error != null) {\n+            throw new UDFArgumentException(error);\n+          }\n+          String type = oiTypeInfo0.getTypeName();\n+          if (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo)) {\n+            type = oiTypeInfo1.getTypeName();\n+          }\n+          console.printError(\"WARNING: Comparing a bigint and a \" + type + \" may result in a loss of precision.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca425983510ee841439e9a9dd83b6e0547501a9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1Mjk5Mg==", "bodyText": "I think these both '2882303761517473127' and '2882303761517473276' should fit into char(20) / varchar(20)\nand because of that this result leaves me a bit puzzled; is this row expected with the appid1 = 2882303761517473127 condition?", "url": "https://github.com/apache/hive/pull/992#discussion_r413752992", "createdAt": "2020-04-23T11:57:15Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/llap/unsafe_compare.q.out", "diffHunk": "@@ -0,0 +1,40 @@\n+PREHOOK: query: CREATE TABLE test_a (appid1 varchar(256),  appid2 char(20))\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@test_a\n+POSTHOOK: query: CREATE TABLE test_a (appid1 varchar(256),  appid2 char(20))\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@test_a\n+PREHOOK: query: INSERT INTO  test_a VALUES ('2882303761517473127', '2882303761517473127'), ('2882303761517473276','2882303761517473276')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@test_a\n+POSTHOOK: query: INSERT INTO  test_a VALUES ('2882303761517473127', '2882303761517473127'), ('2882303761517473276','2882303761517473276')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@test_a\n+POSTHOOK: Lineage: test_a.appid1 SCRIPT []\n+POSTHOOK: Lineage: test_a.appid2 SCRIPT []\n+WARNING: Comparing a bigint and a varchar(256) may result in a loss of precision.\n+PREHOOK: query: SELECT appid1 FROM test_a WHERE appid1 = 2882303761517473127\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@test_a\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT appid1 FROM test_a WHERE appid1 = 2882303761517473127\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@test_a\n+#### A masked pattern was here ####\n+2882303761517473127\n+2882303761517473276", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca425983510ee841439e9a9dd83b6e0547501a9"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ca425983510ee841439e9a9dd83b6e0547501a9", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/3ca425983510ee841439e9a9dd83b6e0547501a9", "committedDate": "2020-04-23T10:08:56Z", "message": "HIVE-23269. Unsafe comparing bigints and (var)chars"}, "afterCommit": {"oid": "10b555901bf661646ea952ba30794a99a7f7edc5", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/10b555901bf661646ea952ba30794a99a7f7edc5", "committedDate": "2020-04-23T15:39:36Z", "message": "HIVE-23269. Unsafe comparing bigints and (var)chars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9641962f666dae166d763ab1970e10194c154652", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/9641962f666dae166d763ab1970e10194c154652", "committedDate": "2020-05-22T05:36:19Z", "message": "HIVE-23269: Unsafe comparing bigints and chars"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10b555901bf661646ea952ba30794a99a7f7edc5", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/10b555901bf661646ea952ba30794a99a7f7edc5", "committedDate": "2020-04-23T15:39:36Z", "message": "HIVE-23269. Unsafe comparing bigints and (var)chars"}, "afterCommit": {"oid": "9641962f666dae166d763ab1970e10194c154652", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/9641962f666dae166d763ab1970e10194c154652", "committedDate": "2020-05-22T05:36:19Z", "message": "HIVE-23269: Unsafe comparing bigints and chars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a0ff832026163b3b6e4de9956bfcbafc92075cd", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/2a0ff832026163b3b6e4de9956bfcbafc92075cd", "committedDate": "2020-05-22T22:40:18Z", "message": "fix error output message that resulting to failing tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9caeab9e9e43b319fae31eec74eff04ddec3a26", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/e9caeab9e9e43b319fae31eec74eff04ddec3a26", "committedDate": "2020-05-22T22:21:46Z", "message": "fix error output message that resulting to failing tests"}, "afterCommit": {"oid": "2a0ff832026163b3b6e4de9956bfcbafc92075cd", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/2a0ff832026163b3b6e4de9956bfcbafc92075cd", "committedDate": "2020-05-22T22:40:18Z", "message": "fix error output message that resulting to failing tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3926, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}