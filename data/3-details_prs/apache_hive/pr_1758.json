{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MTA4NzI3", "number": 1758, "title": "HIVE-24504: VectorFileSinkArrowOperator does not serialize complex types correctly", "bodyText": "What changes were proposed in this pull request?\nUse an empty batch to generate the schema for the empty results\nWhy are the changes needed?\nClients expect the full schema even for empty results\nDoes this PR introduce any user-facing change?\nNo\nHow was this patch tested?\nUnit and other test", "createdAt": "2020-12-09T11:23:56Z", "url": "https://github.com/apache/hive/pull/1758", "merged": true, "mergeCommit": {"oid": "41c5c7919e828101b6df907bc3defca09cba2987"}, "closed": true, "closedAt": "2020-12-10T17:14:23Z", "author": {"login": "pvary"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkNLKYAH2gAyNTM1MTA4NzI3OjljOTZlNmNlZjg0NWZhMjMwNDliZTJmNGQ2MzVmN2I5ZDZkNzNjODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkzcD3gFqTU0OTE5ODk5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/hive/commit/9c96e6cef845fa23049be2f4d635f7b9d6d73c83", "committedDate": "2020-12-08T16:59:28Z", "message": "HIVE-24504: VectorFileSinkArrowOperator does not serialize complex types correctly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDkwMTIw", "url": "https://github.com/apache/hive/pull/1758#pullrequestreview-548090120", "createdAt": "2020-12-09T11:29:57Z", "commit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToyOTo1N1rOICP7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTozNToyOVrOICQIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODkzMw==", "bodyText": "Nit: Would probably name it testEmptyList for consistency with the Serializer", "url": "https://github.com/apache/hive/pull/1758#discussion_r539228933", "createdAt": "2020-12-09T11:29:57Z", "author": {"login": "pgaref"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.io.arrow;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestSerializer {\n+  @Test\n+  public void testEmptyArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzMjM0OQ==", "bodyText": "Would it make sense to test nested types here as well? like list ?", "url": "https://github.com/apache/hive/pull/1758#discussion_r539232349", "createdAt": "2020-12-09T11:35:29Z", "author": {"login": "pgaref"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.io.arrow;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestSerializer {\n+  @Test\n+  public void testEmptyArray() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"array<tinyint>\");\n+    List<String> fieldNames = Arrays.asList(new String[]{\"a\"});\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: List<$data$: Int(8, true)>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyStruct() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"struct<b:int,c:string>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: Struct<b: Int(32, true), c: Utf8>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyMap() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"map<string,string>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: List<$data$: Struct<keys: Utf8, values: Utf8>>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyComplexStruct() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\n+        \"struct<b:array<tinyint>,c:map<string,string>,d:struct<e:array<tinyint>,f:map<string,string>>>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\n+        \"Schema<a: Struct<b: List<$data$: Int(8, true)>, c: List<$data$: Struct<keys: Utf8, values: Utf8>>, \" +\n+            \"d: Struct<e: List<$data$: Int(8, true)>, f: List<$data$: Struct<keys: Utf8, values: Utf8>>>>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eb926970a3f53efd54465a2ad50f7616af1e2e1", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/hive/commit/0eb926970a3f53efd54465a2ad50f7616af1e2e1", "committedDate": "2020-12-09T14:08:25Z", "message": "Addressed review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjM3MjIz", "url": "https://github.com/apache/hive/pull/1758#pullrequestreview-548237223", "createdAt": "2020-12-09T14:28:04Z", "commit": {"oid": "0eb926970a3f53efd54465a2ad50f7616af1e2e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTk4OTk4", "url": "https://github.com/apache/hive/pull/1758#pullrequestreview-549198998", "createdAt": "2020-12-10T13:34:19Z", "commit": {"oid": "0eb926970a3f53efd54465a2ad50f7616af1e2e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2894, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}