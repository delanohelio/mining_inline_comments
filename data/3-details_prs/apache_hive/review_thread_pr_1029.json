{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzYyMjEz", "number": 1029, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzozODoyMFrOEBoRnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDozMDo0MVrOECluQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTQzOTAwOnYy", "diffSide": "LEFT", "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzozODoyMFrOGdlqkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTowMDowMVrOGdoi8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ==", "bodyText": "removing this line will mean that the resultset will be never closed - even when the issue doesn't happen...\nisn't there a way to fix this w/o removing this close call?", "url": "https://github.com/apache/hive/pull/1029#discussion_r433678995", "createdAt": "2020-06-02T07:38:20Z", "author": {"login": "kgyrtkirk"}, "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -974,86 +974,79 @@ private boolean executeInternal(String sql, boolean call) {\n \n     ClientHook hook = ClientCommandHookFactory.get().getHook(beeLine, sql);\n \n-    try {\n-      Statement stmnt = null;\n-      boolean hasResults;\n-      Thread logThread = null;\n+    Statement stmnt = null;\n+    boolean hasResults;\n+    Thread logThread = null;\n \n-      try {\n-        long start = System.currentTimeMillis();\n+    try {\n+      long start = System.currentTimeMillis();\n \n-        if (call) {\n-          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n-          hasResults = ((CallableStatement) stmnt).execute();\n+      if (call) {\n+        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n+        hasResults = ((CallableStatement) stmnt).execute();\n+      } else {\n+        stmnt = beeLine.createStatement();\n+        // In test mode we want the operation logs regardless of the settings\n+        if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n+          hasResults = stmnt.execute(sql);\n         } else {\n-          stmnt = beeLine.createStatement();\n-          // In test mode we want the operation logs regardless of the settings\n-          if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n-            hasResults = stmnt.execute(sql);\n-          } else {\n-            InPlaceUpdateStream.EventNotifier eventNotifier =\n-                new InPlaceUpdateStream.EventNotifier();\n-            logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n-            logThread.setDaemon(true);\n-            logThread.start();\n-            if (stmnt instanceof HiveStatement) {\n-              HiveStatement hiveStatement = (HiveStatement) stmnt;\n-              hiveStatement.setInPlaceUpdateStream(\n-                  new BeelineInPlaceUpdateStream(\n-                      beeLine.getErrorStream(),\n-                      eventNotifier\n-                  ));\n-            }\n-            hasResults = stmnt.execute(sql);\n-            logThread.interrupt();\n-            logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n+          InPlaceUpdateStream.EventNotifier eventNotifier =\n+              new InPlaceUpdateStream.EventNotifier();\n+          logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n+          logThread.setDaemon(true);\n+          logThread.start();\n+          if (stmnt instanceof HiveStatement) {\n+            HiveStatement hiveStatement = (HiveStatement) stmnt;\n+            hiveStatement.setInPlaceUpdateStream(\n+                new BeelineInPlaceUpdateStream(\n+                    beeLine.getErrorStream(),\n+                    eventNotifier\n+                ));\n           }\n+          hasResults = stmnt.execute(sql);\n+          logThread.interrupt();\n+          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n         }\n+      }\n \n-        beeLine.showWarnings();\n-\n-        if (hasResults) {\n-          OutputFile outputFile = beeLine.getRecordOutputFile();\n-          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-            outputFile.fetchStarted();\n-            if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n-              outputFile.foundQuery(true);\n-            } else {\n-              outputFile.foundQuery(false);\n-            }\n-          }\n-          do {\n-            ResultSet rs = stmnt.getResultSet();\n-            try {\n-              int count = beeLine.print(rs);\n-              long end = System.currentTimeMillis();\n-\n-              if (showReport()) {\n-                beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n-                    true, beeLine.getErrorStream());\n-              }\n-            } finally {\n-              if (logThread != null) {\n-                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n-                showRemainingLogsIfAny(stmnt);\n-                logThread = null;\n-              }\n-              rs.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674abf18fa33d4ecd7659f06be467e377854c369"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwMjMyMg==", "bodyText": "resultset::close() will close remote operation, this can be also achieved by stmnt::close() in finally block, wondering if this can be removed to make codes more elegant.", "url": "https://github.com/apache/hive/pull/1029#discussion_r433702322", "createdAt": "2020-06-02T08:20:08Z", "author": {"login": "dengzhhu653"}, "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -974,86 +974,79 @@ private boolean executeInternal(String sql, boolean call) {\n \n     ClientHook hook = ClientCommandHookFactory.get().getHook(beeLine, sql);\n \n-    try {\n-      Statement stmnt = null;\n-      boolean hasResults;\n-      Thread logThread = null;\n+    Statement stmnt = null;\n+    boolean hasResults;\n+    Thread logThread = null;\n \n-      try {\n-        long start = System.currentTimeMillis();\n+    try {\n+      long start = System.currentTimeMillis();\n \n-        if (call) {\n-          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n-          hasResults = ((CallableStatement) stmnt).execute();\n+      if (call) {\n+        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n+        hasResults = ((CallableStatement) stmnt).execute();\n+      } else {\n+        stmnt = beeLine.createStatement();\n+        // In test mode we want the operation logs regardless of the settings\n+        if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n+          hasResults = stmnt.execute(sql);\n         } else {\n-          stmnt = beeLine.createStatement();\n-          // In test mode we want the operation logs regardless of the settings\n-          if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n-            hasResults = stmnt.execute(sql);\n-          } else {\n-            InPlaceUpdateStream.EventNotifier eventNotifier =\n-                new InPlaceUpdateStream.EventNotifier();\n-            logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n-            logThread.setDaemon(true);\n-            logThread.start();\n-            if (stmnt instanceof HiveStatement) {\n-              HiveStatement hiveStatement = (HiveStatement) stmnt;\n-              hiveStatement.setInPlaceUpdateStream(\n-                  new BeelineInPlaceUpdateStream(\n-                      beeLine.getErrorStream(),\n-                      eventNotifier\n-                  ));\n-            }\n-            hasResults = stmnt.execute(sql);\n-            logThread.interrupt();\n-            logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n+          InPlaceUpdateStream.EventNotifier eventNotifier =\n+              new InPlaceUpdateStream.EventNotifier();\n+          logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n+          logThread.setDaemon(true);\n+          logThread.start();\n+          if (stmnt instanceof HiveStatement) {\n+            HiveStatement hiveStatement = (HiveStatement) stmnt;\n+            hiveStatement.setInPlaceUpdateStream(\n+                new BeelineInPlaceUpdateStream(\n+                    beeLine.getErrorStream(),\n+                    eventNotifier\n+                ));\n           }\n+          hasResults = stmnt.execute(sql);\n+          logThread.interrupt();\n+          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n         }\n+      }\n \n-        beeLine.showWarnings();\n-\n-        if (hasResults) {\n-          OutputFile outputFile = beeLine.getRecordOutputFile();\n-          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-            outputFile.fetchStarted();\n-            if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n-              outputFile.foundQuery(true);\n-            } else {\n-              outputFile.foundQuery(false);\n-            }\n-          }\n-          do {\n-            ResultSet rs = stmnt.getResultSet();\n-            try {\n-              int count = beeLine.print(rs);\n-              long end = System.currentTimeMillis();\n-\n-              if (showReport()) {\n-                beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n-                    true, beeLine.getErrorStream());\n-              }\n-            } finally {\n-              if (logThread != null) {\n-                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n-                showRemainingLogsIfAny(stmnt);\n-                logThread = null;\n-              }\n-              rs.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}, "originalCommit": {"oid": "674abf18fa33d4ecd7659f06be467e377854c369"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNDA0MA==", "bodyText": "in case it should be fixed in some other way ResultSet is AutoCloseable so it is expected to call close on it no matter what - I now think that this fix should either land in the jdbc driver - or should be fixed in thrift", "url": "https://github.com/apache/hive/pull/1029#discussion_r433704040", "createdAt": "2020-06-02T08:22:59Z", "author": {"login": "kgyrtkirk"}, "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -974,86 +974,79 @@ private boolean executeInternal(String sql, boolean call) {\n \n     ClientHook hook = ClientCommandHookFactory.get().getHook(beeLine, sql);\n \n-    try {\n-      Statement stmnt = null;\n-      boolean hasResults;\n-      Thread logThread = null;\n+    Statement stmnt = null;\n+    boolean hasResults;\n+    Thread logThread = null;\n \n-      try {\n-        long start = System.currentTimeMillis();\n+    try {\n+      long start = System.currentTimeMillis();\n \n-        if (call) {\n-          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n-          hasResults = ((CallableStatement) stmnt).execute();\n+      if (call) {\n+        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n+        hasResults = ((CallableStatement) stmnt).execute();\n+      } else {\n+        stmnt = beeLine.createStatement();\n+        // In test mode we want the operation logs regardless of the settings\n+        if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n+          hasResults = stmnt.execute(sql);\n         } else {\n-          stmnt = beeLine.createStatement();\n-          // In test mode we want the operation logs regardless of the settings\n-          if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n-            hasResults = stmnt.execute(sql);\n-          } else {\n-            InPlaceUpdateStream.EventNotifier eventNotifier =\n-                new InPlaceUpdateStream.EventNotifier();\n-            logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n-            logThread.setDaemon(true);\n-            logThread.start();\n-            if (stmnt instanceof HiveStatement) {\n-              HiveStatement hiveStatement = (HiveStatement) stmnt;\n-              hiveStatement.setInPlaceUpdateStream(\n-                  new BeelineInPlaceUpdateStream(\n-                      beeLine.getErrorStream(),\n-                      eventNotifier\n-                  ));\n-            }\n-            hasResults = stmnt.execute(sql);\n-            logThread.interrupt();\n-            logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n+          InPlaceUpdateStream.EventNotifier eventNotifier =\n+              new InPlaceUpdateStream.EventNotifier();\n+          logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n+          logThread.setDaemon(true);\n+          logThread.start();\n+          if (stmnt instanceof HiveStatement) {\n+            HiveStatement hiveStatement = (HiveStatement) stmnt;\n+            hiveStatement.setInPlaceUpdateStream(\n+                new BeelineInPlaceUpdateStream(\n+                    beeLine.getErrorStream(),\n+                    eventNotifier\n+                ));\n           }\n+          hasResults = stmnt.execute(sql);\n+          logThread.interrupt();\n+          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n         }\n+      }\n \n-        beeLine.showWarnings();\n-\n-        if (hasResults) {\n-          OutputFile outputFile = beeLine.getRecordOutputFile();\n-          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-            outputFile.fetchStarted();\n-            if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n-              outputFile.foundQuery(true);\n-            } else {\n-              outputFile.foundQuery(false);\n-            }\n-          }\n-          do {\n-            ResultSet rs = stmnt.getResultSet();\n-            try {\n-              int count = beeLine.print(rs);\n-              long end = System.currentTimeMillis();\n-\n-              if (showReport()) {\n-                beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n-                    true, beeLine.getErrorStream());\n-              }\n-            } finally {\n-              if (logThread != null) {\n-                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n-                showRemainingLogsIfAny(stmnt);\n-                logThread = null;\n-              }\n-              rs.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}, "originalCommit": {"oid": "674abf18fa33d4ecd7659f06be467e377854c369"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNjgzOQ==", "bodyText": "I've just looked around...it seems like a thrift upgrade(HIVE-21000) would need an accumulo upgrade(HIVE-22220) which would need a guava upgrade(HIVE-21569) ...", "url": "https://github.com/apache/hive/pull/1029#discussion_r433706839", "createdAt": "2020-06-02T08:27:41Z", "author": {"login": "kgyrtkirk"}, "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -974,86 +974,79 @@ private boolean executeInternal(String sql, boolean call) {\n \n     ClientHook hook = ClientCommandHookFactory.get().getHook(beeLine, sql);\n \n-    try {\n-      Statement stmnt = null;\n-      boolean hasResults;\n-      Thread logThread = null;\n+    Statement stmnt = null;\n+    boolean hasResults;\n+    Thread logThread = null;\n \n-      try {\n-        long start = System.currentTimeMillis();\n+    try {\n+      long start = System.currentTimeMillis();\n \n-        if (call) {\n-          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n-          hasResults = ((CallableStatement) stmnt).execute();\n+      if (call) {\n+        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n+        hasResults = ((CallableStatement) stmnt).execute();\n+      } else {\n+        stmnt = beeLine.createStatement();\n+        // In test mode we want the operation logs regardless of the settings\n+        if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n+          hasResults = stmnt.execute(sql);\n         } else {\n-          stmnt = beeLine.createStatement();\n-          // In test mode we want the operation logs regardless of the settings\n-          if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n-            hasResults = stmnt.execute(sql);\n-          } else {\n-            InPlaceUpdateStream.EventNotifier eventNotifier =\n-                new InPlaceUpdateStream.EventNotifier();\n-            logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n-            logThread.setDaemon(true);\n-            logThread.start();\n-            if (stmnt instanceof HiveStatement) {\n-              HiveStatement hiveStatement = (HiveStatement) stmnt;\n-              hiveStatement.setInPlaceUpdateStream(\n-                  new BeelineInPlaceUpdateStream(\n-                      beeLine.getErrorStream(),\n-                      eventNotifier\n-                  ));\n-            }\n-            hasResults = stmnt.execute(sql);\n-            logThread.interrupt();\n-            logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n+          InPlaceUpdateStream.EventNotifier eventNotifier =\n+              new InPlaceUpdateStream.EventNotifier();\n+          logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n+          logThread.setDaemon(true);\n+          logThread.start();\n+          if (stmnt instanceof HiveStatement) {\n+            HiveStatement hiveStatement = (HiveStatement) stmnt;\n+            hiveStatement.setInPlaceUpdateStream(\n+                new BeelineInPlaceUpdateStream(\n+                    beeLine.getErrorStream(),\n+                    eventNotifier\n+                ));\n           }\n+          hasResults = stmnt.execute(sql);\n+          logThread.interrupt();\n+          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n         }\n+      }\n \n-        beeLine.showWarnings();\n-\n-        if (hasResults) {\n-          OutputFile outputFile = beeLine.getRecordOutputFile();\n-          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-            outputFile.fetchStarted();\n-            if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n-              outputFile.foundQuery(true);\n-            } else {\n-              outputFile.foundQuery(false);\n-            }\n-          }\n-          do {\n-            ResultSet rs = stmnt.getResultSet();\n-            try {\n-              int count = beeLine.print(rs);\n-              long end = System.currentTimeMillis();\n-\n-              if (showReport()) {\n-                beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n-                    true, beeLine.getErrorStream());\n-              }\n-            } finally {\n-              if (logThread != null) {\n-                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n-                showRemainingLogsIfAny(stmnt);\n-                logThread = null;\n-              }\n-              rs.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}, "originalCommit": {"oid": "674abf18fa33d4ecd7659f06be467e377854c369"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyNjE5NQ==", "bodyText": "I wondering if this maybe is not a thrift problem, reading out of sequence is just a consequence of the upper request unpredictably interrupts while the connection is still being alive. Fix lands in the jdbc driver maybe is not a best approach,  as user who uses jdbc driver can handle the root cause at their logic as beeline does.", "url": "https://github.com/apache/hive/pull/1029#discussion_r433726195", "createdAt": "2020-06-02T09:00:01Z", "author": {"login": "dengzhhu653"}, "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -974,86 +974,79 @@ private boolean executeInternal(String sql, boolean call) {\n \n     ClientHook hook = ClientCommandHookFactory.get().getHook(beeLine, sql);\n \n-    try {\n-      Statement stmnt = null;\n-      boolean hasResults;\n-      Thread logThread = null;\n+    Statement stmnt = null;\n+    boolean hasResults;\n+    Thread logThread = null;\n \n-      try {\n-        long start = System.currentTimeMillis();\n+    try {\n+      long start = System.currentTimeMillis();\n \n-        if (call) {\n-          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n-          hasResults = ((CallableStatement) stmnt).execute();\n+      if (call) {\n+        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n+        hasResults = ((CallableStatement) stmnt).execute();\n+      } else {\n+        stmnt = beeLine.createStatement();\n+        // In test mode we want the operation logs regardless of the settings\n+        if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n+          hasResults = stmnt.execute(sql);\n         } else {\n-          stmnt = beeLine.createStatement();\n-          // In test mode we want the operation logs regardless of the settings\n-          if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n-            hasResults = stmnt.execute(sql);\n-          } else {\n-            InPlaceUpdateStream.EventNotifier eventNotifier =\n-                new InPlaceUpdateStream.EventNotifier();\n-            logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n-            logThread.setDaemon(true);\n-            logThread.start();\n-            if (stmnt instanceof HiveStatement) {\n-              HiveStatement hiveStatement = (HiveStatement) stmnt;\n-              hiveStatement.setInPlaceUpdateStream(\n-                  new BeelineInPlaceUpdateStream(\n-                      beeLine.getErrorStream(),\n-                      eventNotifier\n-                  ));\n-            }\n-            hasResults = stmnt.execute(sql);\n-            logThread.interrupt();\n-            logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n+          InPlaceUpdateStream.EventNotifier eventNotifier =\n+              new InPlaceUpdateStream.EventNotifier();\n+          logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n+          logThread.setDaemon(true);\n+          logThread.start();\n+          if (stmnt instanceof HiveStatement) {\n+            HiveStatement hiveStatement = (HiveStatement) stmnt;\n+            hiveStatement.setInPlaceUpdateStream(\n+                new BeelineInPlaceUpdateStream(\n+                    beeLine.getErrorStream(),\n+                    eventNotifier\n+                ));\n           }\n+          hasResults = stmnt.execute(sql);\n+          logThread.interrupt();\n+          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n         }\n+      }\n \n-        beeLine.showWarnings();\n-\n-        if (hasResults) {\n-          OutputFile outputFile = beeLine.getRecordOutputFile();\n-          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-            outputFile.fetchStarted();\n-            if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n-              outputFile.foundQuery(true);\n-            } else {\n-              outputFile.foundQuery(false);\n-            }\n-          }\n-          do {\n-            ResultSet rs = stmnt.getResultSet();\n-            try {\n-              int count = beeLine.print(rs);\n-              long end = System.currentTimeMillis();\n-\n-              if (showReport()) {\n-                beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n-                    true, beeLine.getErrorStream());\n-              }\n-            } finally {\n-              if (logThread != null) {\n-                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n-                showRemainingLogsIfAny(stmnt);\n-                logThread = null;\n-              }\n-              rs.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}, "originalCommit": {"oid": "674abf18fa33d4ecd7659f06be467e377854c369"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMyNzY4OnYy", "diffSide": "RIGHT", "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNTo1OVrOGeze9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNTo1OVrOGeze9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1Mzk3NQ==", "bodyText": "Closing the result set can throw a SQLException in which case it will skip over the Statement#close() method.", "url": "https://github.com/apache/hive/pull/1029#discussion_r434953975", "createdAt": "2020-06-04T02:15:59Z", "author": {"login": "belugabehr"}, "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -1063,13 +1057,17 @@ private boolean executeInternal(String sql, boolean call) {\n             showRemainingLogsIfAny(stmnt);\n           }\n         }\n+        if (rs != null) {\n+          rs.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22be75bb11ff744c4e6b4450c9c31f928846814a"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTEzODkzOnYy", "diffSide": "RIGHT", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxNTo1MFrOGfFK4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxNTo1MFrOGfFK4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0Mzc0NQ==", "bodyText": "Please do not use instanceof here, just create a new catch block for TApplicationException types.", "url": "https://github.com/apache/hive/pull/1029#discussion_r435243745", "createdAt": "2020-06-04T13:15:50Z", "author": {"login": "belugabehr"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -197,6 +198,12 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (Exception e) {\n+      if (e instanceof TApplicationException && ((TApplicationException)e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTE0OTgyOnYy", "diffSide": "RIGHT", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxODoxN1rOGfFRrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0NjoxM1rOGfGqfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NTQ4NQ==", "bodyText": "Please do not say 'is usually caused by'.  We do not yet know what \"usual\" is.\nTry something like:\nMismatch thrift sequence id.  A previous call to the Thrift library failed and now position within the input stream is lost.  Please enable verbose error logging and check the status of previous calls.", "url": "https://github.com/apache/hive/pull/1029#discussion_r435245485", "createdAt": "2020-06-04T13:18:17Z", "author": {"login": "belugabehr"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -197,6 +198,12 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (Exception e) {\n+      if (e instanceof TApplicationException && ((TApplicationException)e)\n+          .getType() == TApplicationException.BAD_SEQUENCE_ID) {\n+        String errorMsg = \"Mismatch thrift sequence id, which usually is caused by an OutOfMemoryError \" +\n+            \"or a SocketTimeoutException, please check the memory status and previous calls.\";\n+        throw new SQLException(errorMsg, \"08S01\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2ODIyMA==", "bodyText": "Thanks @belugabehr, updated the error messages.", "url": "https://github.com/apache/hive/pull/1029#discussion_r435268220", "createdAt": "2020-06-04T13:46:13Z", "author": {"login": "dengzhhu653"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -197,6 +198,12 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (Exception e) {\n+      if (e instanceof TApplicationException && ((TApplicationException)e)\n+          .getType() == TApplicationException.BAD_SEQUENCE_ID) {\n+        String errorMsg = \"Mismatch thrift sequence id, which usually is caused by an OutOfMemoryError \" +\n+            \"or a SocketTimeoutException, please check the memory status and previous calls.\";\n+        throw new SQLException(errorMsg, \"08S01\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NTQ4NQ=="}, "originalCommit": {"oid": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM0NTYyOnYy", "diffSide": "RIGHT", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NjoxOFrOGfHOqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDoyOToyN1rOGfIy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NzQ4Mw==", "bodyText": "The default message should still be Failed to close statement.  The message of the TApplicationException will be preserved because the entire Exception is passed into the SQLException.\nWith that said, you can you please append that to the BAD_SEQUENCE_ID error as well?\n\nFailed to close statement.  Mismatch thrift sequence id. A previous ...", "url": "https://github.com/apache/hive/pull/1029#discussion_r435277483", "createdAt": "2020-06-04T13:56:18Z", "author": {"login": "belugabehr"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -196,6 +197,14 @@ private void closeStatementIfNeeded() throws SQLException {\n       }\n     } catch (SQLException e) {\n       throw e;\n+    } catch (TApplicationException tae) {\n+      String errorMsg = tae.getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f82cf0ef92a66f2128d81a02705660ee79466d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwMzEzMw==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1029#discussion_r435303133", "createdAt": "2020-06-04T14:29:27Z", "author": {"login": "dengzhhu653"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -196,6 +197,14 @@ private void closeStatementIfNeeded() throws SQLException {\n       }\n     } catch (SQLException e) {\n       throw e;\n+    } catch (TApplicationException tae) {\n+      String errorMsg = tae.getMessage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NzQ4Mw=="}, "originalCommit": {"oid": "c2f82cf0ef92a66f2128d81a02705660ee79466d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTUwNjU4OnYy", "diffSide": "RIGHT", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDozMDo0MVrOGfI2tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1MzoxMFrOGfJ5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDExOA==", "bodyText": "Lol.  I'm so sorry to do this to you, I've been in your seat quite a few times myself, but can you please do one more push?  Please do not do the string concatenation.  This could be ripe for errors if the code changes later.  Just use a single static string which includes the words \"Failed to close statement.\"", "url": "https://github.com/apache/hive/pull/1029#discussion_r435304118", "createdAt": "2020-06-04T14:30:41Z", "author": {"login": "belugabehr"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -198,9 +198,9 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (TApplicationException tae) {\n-      String errorMsg = tae.getMessage();\n+      String errorMsg = \"Failed to close statement\";\n       if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        errorMsg = \"Mismatch thrift sequence id. A previous call to the Thrift library failed\"\n+        errorMsg += \". Mismatch thrift sequence id. A previous call to the Thrift library failed\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e91c2494020c2e951dc4dc90b7b46ff7a4bb380"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNTIwNQ==", "bodyText": "errorMsg = \"Failed to close statement. Mismatch thrift sequence id. A previous call to the Thrift library failed...\";", "url": "https://github.com/apache/hive/pull/1029#discussion_r435305205", "createdAt": "2020-06-04T14:32:05Z", "author": {"login": "belugabehr"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -198,9 +198,9 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (TApplicationException tae) {\n-      String errorMsg = tae.getMessage();\n+      String errorMsg = \"Failed to close statement\";\n       if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        errorMsg = \"Mismatch thrift sequence id. A previous call to the Thrift library failed\"\n+        errorMsg += \". Mismatch thrift sequence id. A previous call to the Thrift library failed\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDExOA=="}, "originalCommit": {"oid": "6e91c2494020c2e951dc4dc90b7b46ff7a4bb380"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMTM0MA==", "bodyText": "Done. Thank you @belugabehr", "url": "https://github.com/apache/hive/pull/1029#discussion_r435321340", "createdAt": "2020-06-04T14:53:10Z", "author": {"login": "dengzhhu653"}, "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -198,9 +198,9 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (TApplicationException tae) {\n-      String errorMsg = tae.getMessage();\n+      String errorMsg = \"Failed to close statement\";\n       if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        errorMsg = \"Mismatch thrift sequence id. A previous call to the Thrift library failed\"\n+        errorMsg += \". Mismatch thrift sequence id. A previous call to the Thrift library failed\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDExOA=="}, "originalCommit": {"oid": "6e91c2494020c2e951dc4dc90b7b46ff7a4bb380"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 709, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}