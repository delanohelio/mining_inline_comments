{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTExMDY0", "number": 1726, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzozMzoyN1rOFTsYpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0Mzo1MlrOFUM0kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MTk0NDcwOnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzozMzoyN1rOIbTZfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzozMzoyN1rOIbTZfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUwMDI4Nw==", "bodyText": "unfinished sentece", "url": "https://github.com/apache/hive/pull/1726#discussion_r565500287", "createdAt": "2021-01-27T17:33:27Z", "author": {"login": "kgyrtkirk"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "diffHunk": "@@ -162,6 +162,11 @@ public boolean isNeeded() {\n    */\n   public ExpressionTree getExpression();\n \n+  /**\n+   * Get the expression tree without the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3003285f336e27ac988183ea144e042aea233198"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MTk1NzU0OnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzozNjoyNFrOIbThXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzozNjoyNFrOIbThXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUwMjMwMQ==", "bodyText": "I find unexpanded a little strange - a different keyword might fit this thing better (what do you think about compact or  original).", "url": "https://github.com/apache/hive/pull/1726#discussion_r565502301", "createdAt": "2021-01-27T17:36:24Z", "author": {"login": "kgyrtkirk"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "diffHunk": "@@ -162,6 +162,11 @@ public boolean isNeeded() {\n    */\n   public ExpressionTree getExpression();\n \n+  /**\n+   * Get the expression tree without the\n+   */\n+  public ExpressionTree getUnexpandedExpression();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3003285f336e27ac988183ea144e042aea233198"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTU4NTc4OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMjozNDo1NlrOIb1ksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMjozNDo1NlrOIb1ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA2MDIxMQ==", "bodyText": "Unused variable", "url": "https://github.com/apache/hive/pull/1726#discussion_r566060211", "createdAt": "2021-01-28T12:34:56Z", "author": {"login": "pgaref"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java", "diffHunk": "@@ -85,100 +89,101 @@ public static PredicateLeaf createPredicateLeaf(PredicateLeaf.Operator operator,\n   @Test\n   public void testNotPushdown() throws Exception {\n     assertEquals(\"leaf-1\", SearchArgumentImpl.BuilderImpl.pushDownNot(leaf(1))\n-        .toString());\n+        .toOldString());\n     assertEquals(\"(not leaf-1)\",\n-        SearchArgumentImpl.BuilderImpl.pushDownNot(not(leaf(1))).toString());\n+        SearchArgumentImpl.BuilderImpl.pushDownNot(not(leaf(1))).toOldString());\n     assertEquals(\"leaf-1\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(not(leaf(1))))\n-            .toString());\n+            .toOldString());\n     assertEquals(\"(not leaf-1)\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(not(not(leaf(1))))).\n-            toString());\n+            toOldString());\n     assertEquals(\"(or leaf-1 (not leaf-2))\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(and(not(leaf(1)),\n-            leaf(2)))).toString());\n+            leaf(2)))).toOldString());\n     assertEquals(\"(and (not leaf-1) leaf-2)\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(or(leaf(1),\n-            not(leaf(2))))).toString());\n+            not(leaf(2))))).toOldString());\n     assertEquals(\"(or (or (not leaf-1) leaf-2) leaf-3)\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(or(not(and(leaf(1),\n                 not(leaf(2)))),\n-            not(not(leaf(3))))).toString());\n+            not(not(leaf(3))))).toOldString());\n     assertEquals(\"NO\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES))).toString());\n+        not(constant(TruthValue.YES))).toOldString());\n     assertEquals(\"YES\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.NO))).toString());\n+        not(constant(TruthValue.NO))).toOldString());\n     assertEquals(\"NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.NULL))).toString());\n+        not(constant(TruthValue.NULL))).toOldString());\n     assertEquals(\"YES_NO\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES_NO))).toString());\n+        not(constant(TruthValue.YES_NO))).toOldString());\n     assertEquals(\"YES_NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.NO_NULL))).toString());\n+        not(constant(TruthValue.NO_NULL))).toOldString());\n     assertEquals(\"NO_NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES_NULL))).toString());\n+        not(constant(TruthValue.YES_NULL))).toOldString());\n     assertEquals(\"YES_NO_NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES_NO_NULL))).toString());\n+        not(constant(TruthValue.YES_NO_NULL))).toOldString());\n   }\n \n   @Test\n   public void testFlatten() throws Exception {\n-    assertEquals(\"leaf-1\", SearchArgumentImpl.BuilderImpl.flatten(leaf(1)).toString());\n+    PredicateLeafImpl leaf1 = new PredicateLeafImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTcwNzg4OnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzowNzoxMlrOIb2u4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzowNzoxMlrOIb2u4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA3OTIwMg==", "bodyText": "This could be changed to PredicateLeaf -- see below", "url": "https://github.com/apache/hive/pull/1726#discussion_r566079202", "createdAt": "2021-01-28T13:07:12Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java", "diffHunk": "@@ -31,25 +31,25 @@\n   public enum Operator {OR, AND, NOT, LEAF, CONSTANT}\n   private final Operator operator;\n   private final List<ExpressionTree> children;\n-  private int leaf;\n+  private final SearchArgumentImpl.PredicateLeafImpl leaf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTcxMjk4OnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzowODozMlrOIb2yJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzowODozMlrOIb2yJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA4MDAzNg==", "bodyText": "Nit: maybe we should also explicitly mention in getExpression doc that it normalizes the expression", "url": "https://github.com/apache/hive/pull/1726#discussion_r566080036", "createdAt": "2021-01-28T13:08:32Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "diffHunk": "@@ -162,6 +162,13 @@ public boolean isNeeded() {\n    */\n   public ExpressionTree getExpression();\n \n+  /**\n+   * Get the expression tree without the normalization to conjunctive normal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTczODU5OnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzoxNToyMlrOIb3CJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzoxNToyMlrOIb3CJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA4NDEzNQ==", "bodyText": "maybe rename vars to compact and normalized ExpressionTree to avoid confusion?", "url": "https://github.com/apache/hive/pull/1726#discussion_r566084135", "createdAt": "2021-01-28T13:15:22Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -504,28 +493,18 @@ public SearchArgument build() {\n         throw new IllegalArgumentException(\"Failed to end \" +\n             currentTree.size() + \" operations.\");\n       }\n+      ExpressionTree optimized = optimize(root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTc2ODA2OnYy", "diffSide": "RIGHT", "path": "storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzoyMjoyOFrOIb3T5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzoyMjoyOFrOIb3T5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA4ODY3Ng==", "bodyText": "Apache License?", "url": "https://github.com/apache/hive/pull/1726#discussion_r566088676", "createdAt": "2021-01-28T13:22:28Z", "author": {"login": "pgaref"}, "path": "storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentFactoryTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.apache.hadoop.hive.ql.io.sarg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTgxNDcyOnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzozMzo1N1rOIb3w7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxOToxMjo0N1rOIcG1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA5NjExMA==", "bodyText": "I believe Id setter and getter could be moved to the PredicateLeaf interface.\nIt would be cleaner and as a result addLeaf would need less modifications.", "url": "https://github.com/apache/hive/pull/1726#discussion_r566096110", "createdAt": "2021-01-28T13:33:57Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -132,6 +130,14 @@ public Object getLiteral() {\n       return literalList;\n     }\n \n+    public int getId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM0MzEwMA==", "bodyText": "I made getId more visible, but left setId as private. setId only makes sense in the context of the builder.", "url": "https://github.com/apache/hive/pull/1726#discussion_r566343100", "createdAt": "2021-01-28T19:12:47Z", "author": {"login": "omalley"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -132,6 +130,14 @@ public Object getLiteral() {\n       return literalList;\n     }\n \n+    public int getId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA5NjExMA=="}, "originalCommit": {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzI1MTUwOnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0MTozOVrOIcFs5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0MTozOVrOIcFs5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNDQ1NQ==", "bodyText": "This can now become PredicateLeaf", "url": "https://github.com/apache/hive/pull/1726#discussion_r566324455", "createdAt": "2021-01-28T18:41:39Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java", "diffHunk": "@@ -31,25 +31,25 @@\n   public enum Operator {OR, AND, NOT, LEAF, CONSTANT}\n   private final Operator operator;\n   private final List<ExpressionTree> children;\n-  private int leaf;\n+  private final PredicateLeaf leaf;\n   private final SearchArgument.TruthValue constant;\n \n   ExpressionTree() {\n     operator = null;\n     children = null;\n-    leaf = 0;\n+    leaf = null;\n     constant = null;\n   }\n \n   ExpressionTree(Operator op, ExpressionTree... kids) {\n     operator = op;\n-    children = new ArrayList<ExpressionTree>();\n-    leaf = -1;\n+    children = new ArrayList<>();\n+    leaf = null;\n     this.constant = null;\n     Collections.addAll(children, kids);\n   }\n \n-  ExpressionTree(int leaf) {\n+  ExpressionTree(SearchArgumentImpl.PredicateLeafImpl leaf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbc088530f1e80494248266ebe3e06e908403b7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzI1NTMxOnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0Mjo0NFrOIcFvaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0Mjo0NFrOIcFvaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNTA5OQ==", "bodyText": "Argument may change to PredicateLeaf?", "url": "https://github.com/apache/hive/pull/1726#discussion_r566325099", "createdAt": "2021-01-28T18:42:44Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -312,12 +338,11 @@ public Builder end() {\n       return this;\n     }\n \n-    private int addLeaf(PredicateLeaf leaf) {\n-      Integer result = leaves.get(leaf);\n+    private PredicateLeafImpl addLeaf(PredicateLeafImpl leaf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbc088530f1e80494248266ebe3e06e908403b7"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzI1NjgxOnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0MzoxMVrOIcFwaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0MzoxMVrOIcFwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNTM1NQ==", "bodyText": "same", "url": "https://github.com/apache/hive/pull/1726#discussion_r566325355", "createdAt": "2021-01-28T18:43:11Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -330,7 +355,7 @@ public Builder lessThan(String column, PredicateLeaf.Type type,\n       if (column == null || literal == null) {\n         parent.getChildren().add(new ExpressionTree(TruthValue.YES_NO_NULL));\n       } else {\n-        PredicateLeaf leaf =\n+        PredicateLeafImpl leaf =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbc088530f1e80494248266ebe3e06e908403b7"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzI1OTA2OnYy", "diffSide": "RIGHT", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0Mzo1MlrOIcFyAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo0Mzo1MlrOIcFyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNTc2Mg==", "bodyText": "same on all alterations below..", "url": "https://github.com/apache/hive/pull/1726#discussion_r566325762", "createdAt": "2021-01-28T18:43:52Z", "author": {"login": "pgaref"}, "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -345,7 +370,7 @@ public Builder lessThanEquals(String column, PredicateLeaf.Type type,\n       if (column == null || literal == null) {\n         parent.getChildren().add(new ExpressionTree(TruthValue.YES_NO_NULL));\n       } else {\n-        PredicateLeaf leaf =\n+        PredicateLeafImpl leaf =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbc088530f1e80494248266ebe3e06e908403b7"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 121, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}