{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNTcxNzgx", "number": 1527, "title": "HIVE-23695: [CachedStore] Add check/default constraints in CachedStore", "bodyText": "What changes were proposed in this pull request?\n\nAdding check and default constraints in cache store of standalone metastore\nWhy are the changes needed?\n\nAdding constraint in cachestore help in fetching complete table fast from metastore\nDoes this PR introduce any user-facing change?\n\nNo\nHow was this patch tested?\n\nUnit test cases added", "createdAt": "2020-09-26T12:36:55Z", "url": "https://github.com/apache/hive/pull/1527", "merged": true, "mergeCommit": {"oid": "2f60a9ecc826cb787027eaf7b12d9dc0ed4368ac"}, "closed": true, "closedAt": "2020-10-19T05:43:11Z", "author": {"login": "ashish-kumar-sharma"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRHyK8gBqjM4NjI1OTQ2ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdT9f_igFqTUxMTQyNDQ0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4c87c0e6c68e6b3f1f13ee7fc543203d915d223", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/a4c87c0e6c68e6b3f1f13ee7fc543203d915d223", "committedDate": "2020-08-31T13:25:15Z", "message": "HIVE-23695: first draft"}, "afterCommit": {"oid": "42449f9bcc873af1b36ceae188b8add3c769cb26", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/42449f9bcc873af1b36ceae188b8add3c769cb26", "committedDate": "2020-10-10T09:57:18Z", "message": "second draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48802682010833147ed57bff01ed9fd6dafbf9f9", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/48802682010833147ed57bff01ed9fd6dafbf9f9", "committedDate": "2020-10-10T14:17:30Z", "message": "HIVE-22395: test added"}, "afterCommit": {"oid": "861e3e7ff8b84252e1935632c9e4b2776f2dd6ae", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/861e3e7ff8b84252e1935632c9e4b2776f2dd6ae", "committedDate": "2020-10-10T18:44:51Z", "message": "HIVE-23695: [CachedStore] Add check/default constraints in CachedStore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTY2ODIx", "url": "https://github.com/apache/hive/pull/1527#pullrequestreview-506166821", "createdAt": "2020-10-11T10:44:35Z", "commit": {"oid": "861e3e7ff8b84252e1935632c9e4b2776f2dd6ae"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMDo0NDozNVrOHfmeIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMDo0NDo0M1rOHfmeNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5ODIwOQ==", "bodyText": "not required?", "url": "https://github.com/apache/hive/pull/1527#discussion_r502898209", "createdAt": "2020-10-11T10:44:35Z", "author": {"login": "adesh-rao"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/TableCacheObjects.java", "diffHunk": "@@ -3,6 +3,9 @@\n import org.apache.hadoop.hive.metastore.api.AggrStats;\n import org.apache.hadoop.hive.metastore.api.ColumnStatistics;\n import org.apache.hadoop.hive.metastore.api.Partition;\n+import org.apache.hadoop.hive.metastore.api.SQLAllTableConstraints;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861e3e7ff8b84252e1935632c9e4b2776f2dd6ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5ODIyOA==", "bodyText": "not required?", "url": "https://github.com/apache/hive/pull/1527#discussion_r502898228", "createdAt": "2020-10-11T10:44:43Z", "author": {"login": "adesh-rao"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/TableCacheObjects.java", "diffHunk": "@@ -3,6 +3,9 @@\n import org.apache.hadoop.hive.metastore.api.AggrStats;\n import org.apache.hadoop.hive.metastore.api.ColumnStatistics;\n import org.apache.hadoop.hive.metastore.api.Partition;\n+import org.apache.hadoop.hive.metastore.api.SQLAllTableConstraints;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+import org.apache.hadoop.hive.metastore.api.SQLDefaultConstraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861e3e7ff8b84252e1935632c9e4b2776f2dd6ae"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/c1af04036d35b0fa9ca828b1e529d2118a612eac", "committedDate": "2020-10-11T19:34:46Z", "message": "HIVE-23695: [CachedStore] Add check/default constraints in CachedStore"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "861e3e7ff8b84252e1935632c9e4b2776f2dd6ae", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/861e3e7ff8b84252e1935632c9e4b2776f2dd6ae", "committedDate": "2020-10-10T18:44:51Z", "message": "HIVE-23695: [CachedStore] Add check/default constraints in CachedStore"}, "afterCommit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/c1af04036d35b0fa9ca828b1e529d2118a612eac", "committedDate": "2020-10-11T19:34:46Z", "message": "HIVE-23695: [CachedStore] Add check/default constraints in CachedStore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3Mzc3Mjg1", "url": "https://github.com/apache/hive/pull/1527#pullrequestreview-507377285", "createdAt": "2020-10-13T12:27:26Z", "commit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzUzODMw", "url": "https://github.com/apache/hive/pull/1527#pullrequestreview-510353830", "createdAt": "2020-10-16T10:39:37Z", "commit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozOTozOFrOHi0yQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo1NTozMVrOHi1kjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3ODQ2Ng==", "bodyText": "nit: add space after comma.", "url": "https://github.com/apache/hive/pull/1527#discussion_r506278466", "createdAt": "2020-10-16T10:39:38Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java", "diffHunk": "@@ -314,160 +308,129 @@ public void testConstraintsForUpdateUsingEvents() throws Exception {\n     hmsHandler.create_database(db);\n     db = rawStore.getDatabase(DEFAULT_CATALOG_NAME, dbName);\n \n-    String foreignDbName = \"test_table_ops_foreign\";\n-    Database foreignDb = createTestDb(foreignDbName, dbOwner);\n-    hmsHandler.create_database(foreignDb);\n-    foreignDb = rawStore.getDatabase(DEFAULT_CATALOG_NAME, foreignDbName);\n     // Add a table via rawStore\n+    String parentTableName = \"ftbl\";\n     String tblName = \"tbl\";\n     String tblOwner = \"user1\";\n     FieldSchema col1 = new FieldSchema(\"col1\", \"int\", \"integer column\");\n     FieldSchema col2 = new FieldSchema(\"col2\", \"string\", \"string column\");\n+    FieldSchema col3 = new FieldSchema(\"col3\", \"int\", \"integer column\");\n     List<FieldSchema> cols = new ArrayList<FieldSchema>();\n     cols.add(col1);\n     cols.add(col2);\n+    cols.add(col3);\n     List<FieldSchema> ptnCols = new ArrayList<FieldSchema>();\n+    Table parentTable = createTestTbl(dbName, parentTableName, tblOwner, cols, ptnCols);\n     Table tbl = createTestTbl(dbName, tblName, tblOwner, cols, ptnCols);\n-    String foreignTblName = \"ftbl\";\n-    Table foreignTbl = createTestTbl(foreignDbName, foreignTblName, tblOwner, cols, ptnCols);\n-\n-    SQLPrimaryKey key = new SQLPrimaryKey(dbName, tblName, col1.getName(), 1, \"pk1\",\n-            false, false, false);\n-    SQLUniqueConstraint uC = new SQLUniqueConstraint(DEFAULT_CATALOG_NAME, dbName, tblName,\n-            col1.getName(), 2, \"uc1\", false, false, false);\n-    SQLNotNullConstraint nN = new SQLNotNullConstraint(DEFAULT_CATALOG_NAME, dbName, tblName,\n-            col1.getName(), \"nn1\", false, false, false);\n-    SQLForeignKey foreignKey = new SQLForeignKey(key.getTable_db(), key.getTable_name(), key.getColumn_name(),\n-            foreignDbName, foreignTblName, key.getColumn_name(), 2, 1,2,\n-            \"fk1\", key.getPk_name(), false, false, false);\n-\n-    hmsHandler.create_table_with_constraints(tbl,\n-            Arrays.asList(key), null, Arrays.asList(uC), Arrays.asList(nN), null, null);\n-    hmsHandler.create_table_with_constraints(foreignTbl, null, Arrays.asList(foreignKey),\n-            null, null, null, null);\n+\n+    // Constraints for parent Table\n+    List<SQLPrimaryKey> parentPkBase =\n+        Arrays.asList(new SQLPrimaryKey(dbName, parentTableName, col1.getName(), 1, \"parentpk1\", false, false, false));\n+\n+    // Constraints for table\n+    List<SQLPrimaryKey> pkBase =\n+        Arrays.asList(new SQLPrimaryKey(dbName, tblName, col1.getName(), 1, \"pk1\", false, false, false));\n+    List<SQLUniqueConstraint> ucBase = Arrays.asList(\n+        new SQLUniqueConstraint(DEFAULT_CATALOG_NAME, dbName, tblName, col1.getName(), 2, \"uc1\", false, false, false));\n+    List<SQLNotNullConstraint> nnBase = Arrays.asList(\n+        new SQLNotNullConstraint(DEFAULT_CATALOG_NAME, dbName, tblName, col1.getName(), \"nn1\", false, false, false));\n+    List<SQLDefaultConstraint> dcBase = Arrays.asList(\n+        new SQLDefaultConstraint(DEFAULT_CATALOG_NAME, tbl.getDbName(), tbl.getTableName(), col2.getName(), \"1\", \"dc1\",\n+            false, false, false));\n+    List<SQLCheckConstraint> ccBase = Arrays.asList(\n+        new SQLCheckConstraint(DEFAULT_CATALOG_NAME, tbl.getDbName(), tbl.getTableName(), col2.getName(), \"1\", \"cc1\",\n+            false, false, false));\n+    List<SQLForeignKey> fkBase = Arrays.asList(\n+        new SQLForeignKey(parentPkBase.get(0).getTable_db(), parentPkBase.get(0).getTable_name(),\n+            parentPkBase.get(0).getColumn_name(), dbName, tblName, col3.getName(), 2, 1, 2, \"fk1\",\n+            parentPkBase.get(0).getPk_name(), false, false, false));\n+\n+    // Create table and parent table\n+    hmsHandler.create_table_with_constraints(parentTable, parentPkBase, null, null, null, null, null);\n+    hmsHandler.create_table_with_constraints(tbl, pkBase, fkBase, ucBase, nnBase, dcBase, ccBase);\n \n     tbl = rawStore.getTable(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    foreignTbl = rawStore.getTable(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName);\n+    parentTable = rawStore.getTable(DEFAULT_CATALOG_NAME, dbName, parentTableName);\n \n     // Read database, table via CachedStore\n-    Database dbRead= sharedCache.getDatabaseFromCache(DEFAULT_CATALOG_NAME, dbName);\n+    Database dbRead = sharedCache.getDatabaseFromCache(DEFAULT_CATALOG_NAME, dbName);\n     Assert.assertEquals(db, dbRead);\n+\n+    // Read table via CachedStore\n     Table tblRead = sharedCache.getTableFromCache(DEFAULT_CATALOG_NAME, dbName, tblName);\n+    Table parentTableRead = sharedCache.getTableFromCache(DEFAULT_CATALOG_NAME, dbName, parentTableName);\n     compareTables(tblRead, tbl);\n+    compareTables(parentTableRead, parentTable);\n \n-    Table foreignTblRead = sharedCache.getTableFromCache(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName);\n-    compareTables(foreignTblRead, foreignTbl);\n-\n-    List<SQLPrimaryKey> keys = rawStore.getPrimaryKeys(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    List<SQLPrimaryKey> keysRead = sharedCache.listCachedPrimaryKeys(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    assertsForPrimarkaryKey(keysRead, 1, 0, keys.get(0));\n-\n-    List<SQLNotNullConstraint> nNs = rawStore.getNotNullConstraints(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    List<SQLNotNullConstraint> nNsRead = sharedCache.listCachedNotNullConstraints(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    assertsForNotNullConstraints(nNsRead, 1, 0, nNs.get(0));\n-\n-    List<SQLUniqueConstraint> uns = rawStore.getUniqueConstraints(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    List<SQLUniqueConstraint> unsRead = sharedCache.listCachedUniqueConstraint(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    assertsForUniqueConstraints(unsRead, 1, 0, uns.get(0));\n-\n-    List<SQLForeignKey> fks = rawStore.getForeignKeys(DEFAULT_CATALOG_NAME, dbName, tblName, foreignDbName, foreignTblName);\n-    List<SQLForeignKey> fksRead = sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, foreignDbName,\n-            foreignTblName, dbName, tblName);\n-    assertsForForeignKey(fksRead, 1, 0, fks.get(0));\n-\n-    fksRead = sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName,\n-            dbName, foreignTblName);\n-    Assert.assertEquals(fksRead.size(), 0);\n-    fksRead = sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName,\n-            foreignDbName, tblName);\n-    Assert.assertEquals(fksRead.size(), 0);\n-    fksRead = sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName,\n-            foreignDbName, foreignTblName);\n-    Assert.assertEquals(fksRead.size(), 0);\n-\n-    fksRead = sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName,\n-            null, null);\n-    Assert.assertEquals(fksRead.size(), 1);\n-\n-    // Dropping the constraint\n-    DropConstraintRequest dropConstraintRequest = new DropConstraintRequest(foreignDbName, foreignTblName, foreignKey.getFk_name());\n+    // Validating constraint values from CachedStore with rawStore for table\n+    assertRawStoreAndCachedStoreConstraint(DEFAULT_CATALOG_NAME, dbName, tblName);\n+\n+    // Validating constraint values from CachedStore with rawStore for parent table\n+    assertRawStoreAndCachedStoreConstraint(DEFAULT_CATALOG_NAME, dbName, parentTableName);\n+\n+    // Dropping all the constraint\n+    DropConstraintRequest dropConstraintRequest =\n+        new DropConstraintRequest(dbName, tblName, fkBase.get(0).getFk_name());\n+    hmsHandler.drop_constraint(dropConstraintRequest);\n+    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, pkBase.get(0).getPk_name());\n+    hmsHandler.drop_constraint(dropConstraintRequest);\n+    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, nnBase.get(0).getNn_name());\n     hmsHandler.drop_constraint(dropConstraintRequest);\n-    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, key.getPk_name());\n+    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, ucBase.get(0).getUk_name());\n     hmsHandler.drop_constraint(dropConstraintRequest);\n-    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, nN.getNn_name());\n+    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, dcBase.get(0).getDc_name());\n     hmsHandler.drop_constraint(dropConstraintRequest);\n-    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, uC.getUk_name());\n+    dropConstraintRequest = new DropConstraintRequest(dbName, tblName, ccBase.get(0).getDc_name());\n+    hmsHandler.drop_constraint(dropConstraintRequest);\n+    dropConstraintRequest = new DropConstraintRequest(dbName, parentTableName, parentPkBase.get(0).getPk_name());\n     hmsHandler.drop_constraint(dropConstraintRequest);\n \n-    keys = sharedCache.listCachedPrimaryKeys(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    nNs = sharedCache.listCachedNotNullConstraints(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    uns = sharedCache.listCachedUniqueConstraint(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    fksRead = sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName, dbName, tblName);\n-    Assert.assertEquals(keys.size(), 0);\n-    Assert.assertEquals(nNs.size(), 0);\n-    Assert.assertEquals(uns.size(), 0);\n-    Assert.assertEquals(fksRead.size(), 0);\n+    // Validate cache store constraint is dropped\n+    Assert\n+        .assertTrue(CollectionUtils.isEmpty(sharedCache.listCachedPrimaryKeys(DEFAULT_CATALOG_NAME, dbName, tblName)));\n+    Assert.assertTrue(\n+        CollectionUtils.isEmpty(sharedCache.listCachedNotNullConstraints(DEFAULT_CATALOG_NAME, dbName, tblName)));\n+    Assert.assertTrue(\n+        CollectionUtils.isEmpty(sharedCache.listCachedUniqueConstraint(DEFAULT_CATALOG_NAME, dbName, tblName)));\n+    Assert.assertTrue(\n+        CollectionUtils.isEmpty(sharedCache.listCachedDefaultConstraint(DEFAULT_CATALOG_NAME, dbName, tblName)));\n+    Assert.assertTrue(\n+        CollectionUtils.isEmpty(sharedCache.listCachedCheckConstraint(DEFAULT_CATALOG_NAME, dbName, tblName)));\n+    Assert.assertTrue(\n+        CollectionUtils.isEmpty(sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, dbName, tblName, null, null)));\n \n     // Adding keys back\n-    AddPrimaryKeyRequest req = new AddPrimaryKeyRequest(Arrays.asList(key));\n-    hmsHandler.add_primary_key(req);\n-    keys = sharedCache.listCachedPrimaryKeys(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    assertsForPrimarkaryKey(keys, 1, 0, key);\n-\n-    AddUniqueConstraintRequest uniqueConstraintRequest = new AddUniqueConstraintRequest(Arrays.asList(uC));\n-    hmsHandler.add_unique_constraint(uniqueConstraintRequest);\n-    uns = sharedCache.listCachedUniqueConstraint(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    assertsForUniqueConstraints(uns, 1, 0, uC);\n-\n-    AddNotNullConstraintRequest notNullConstraintRequest = new AddNotNullConstraintRequest(Arrays.asList(nN));\n-    hmsHandler.add_not_null_constraint(notNullConstraintRequest);\n-    nNs = sharedCache.listCachedNotNullConstraints(DEFAULT_CATALOG_NAME, dbName, tblName);\n-    assertsForNotNullConstraints(nNs, 1, 0, nN);\n-\n-    AddForeignKeyRequest foreignKeyRequest = new AddForeignKeyRequest(Arrays.asList(foreignKey));\n-    hmsHandler.add_foreign_key(foreignKeyRequest);\n-    fksRead = sharedCache.listCachedForeignKeys(DEFAULT_CATALOG_NAME, foreignDbName, foreignTblName, dbName, tblName);\n-    assertsForForeignKey(fksRead, 1, 0, foreignKey);\n+    hmsHandler.add_primary_key(new AddPrimaryKeyRequest(parentPkBase));\n+    hmsHandler.add_primary_key(new AddPrimaryKeyRequest(pkBase));\n+    hmsHandler.add_unique_constraint(new AddUniqueConstraintRequest(ucBase));\n+    hmsHandler.add_not_null_constraint(new AddNotNullConstraintRequest(nnBase));\n+    hmsHandler.add_foreign_key(new AddForeignKeyRequest(fkBase));\n+    hmsHandler.add_default_constraint(new AddDefaultConstraintRequest(dcBase));\n+    hmsHandler.add_check_constraint(new AddCheckConstraintRequest(ccBase));\n+\n+    // Validating constraint values from Cache with rawStore\n+    assertRawStoreAndCachedStoreConstraint(DEFAULT_CATALOG_NAME, dbName, tblName);\n \n     sharedCache.getDatabaseCache().clear();\n     sharedCache.clearTableCache();\n     sharedCache.getSdCache().clear();\n   }\n \n-  private void assertsForPrimarkaryKey(List<SQLPrimaryKey> keys, int size, int ele, SQLPrimaryKey key) {\n-    Assert.assertEquals(keys.size(), size);\n-    Assert.assertEquals(keys.get(ele).getPk_name(), key.getPk_name());\n-    Assert.assertEquals(keys.get(ele).getColumn_name(), key.getColumn_name());\n-    Assert.assertEquals(keys.get(ele).getTable_name(), key.getTable_name());\n-    Assert.assertEquals(keys.get(ele).getTable_db(), key.getTable_db());\n-  }\n-\n-  private void assertsForForeignKey(List<SQLForeignKey> keys, int size, int ele, SQLForeignKey key) {\n-    Assert.assertEquals(keys.size(), size);\n-    Assert.assertEquals(keys.get(ele).getPk_name(), key.getPk_name());\n-    Assert.assertEquals(keys.get(ele).getFk_name(), key.getFk_name());\n-    Assert.assertEquals(keys.get(ele).getFktable_db(), key.getFktable_db());\n-    Assert.assertEquals(keys.get(ele).getFktable_name(), key.getFktable_name());\n-    Assert.assertEquals(keys.get(ele).getPktable_db(), key.getPktable_db());\n-    Assert.assertEquals(keys.get(ele).getPktable_name(), key.getPktable_name());\n-    Assert.assertEquals(keys.get(ele).getPkcolumn_name(), key.getPkcolumn_name());\n-    Assert.assertEquals(keys.get(ele).getFkcolumn_name(), key.getFkcolumn_name());\n-  }\n-\n-  private void assertsForNotNullConstraints(List<SQLNotNullConstraint> nns, int size, int ele, SQLNotNullConstraint nN) {\n-    Assert.assertEquals(nns.size(), size);\n-    Assert.assertEquals(nns.get(ele).getNn_name(), nN.getNn_name());\n-    Assert.assertEquals(nns.get(ele).getColumn_name(), nN.getColumn_name());\n-    Assert.assertEquals(nns.get(ele).getTable_name(), nN.getTable_name());\n-    Assert.assertEquals(nns.get(ele).getTable_db(), nN.getTable_db());\n-  }\n-\n-  private void assertsForUniqueConstraints(List<SQLUniqueConstraint> uks, int size, int ele, SQLUniqueConstraint uk) {\n-    Assert.assertEquals(uks.size(), size);\n-    Assert.assertEquals(uks.get(ele).getUk_name(), uk.getUk_name());\n-    Assert.assertEquals(uks.get(ele).getColumn_name(), uk.getColumn_name());\n-    Assert.assertEquals(uks.get(ele).getTable_name(), uk.getTable_name());\n-    Assert.assertEquals(uks.get(ele).getTable_db(), uk.getTable_db());\n+  public void assertRawStoreAndCachedStoreConstraint(String catName, String dbName, String tblName)\n+      throws MetaException, NoSuchObjectException {\n+    SQLAllTableConstraints rawStoreConstraints = rawStore.getAllTableConstraints(catName, dbName, tblName);\n+    List<SQLPrimaryKey> primaryKeys = sharedCache.listCachedPrimaryKeys(catName, dbName, tblName);\n+    List<SQLNotNullConstraint> notNullConstraints = sharedCache.listCachedNotNullConstraints(catName, dbName, tblName);\n+    List<SQLUniqueConstraint> uniqueConstraints = sharedCache.listCachedUniqueConstraint(catName, dbName, tblName);\n+    List<SQLDefaultConstraint> defaultConstraints = sharedCache.listCachedDefaultConstraint(catName, dbName, tblName);\n+    List<SQLCheckConstraint> checkConstraints = sharedCache.listCachedCheckConstraint(catName, dbName, tblName);\n+    List<SQLForeignKey> foreignKeys = sharedCache.listCachedForeignKeys(catName, dbName, tblName, null, null);\n+    Assert.assertEquals(rawStoreConstraints.getPrimaryKeys(),primaryKeys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3OTg5MQ==", "bodyText": "Name can match the method name \"getCheckConstraints\"", "url": "https://github.com/apache/hive/pull/1527#discussion_r506279891", "createdAt": "2020-10-16T10:41:32Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java", "diffHunk": "@@ -909,82 +906,137 @@ private void updateTableColStats(RawStore rawStore, String catName, String dbNam\n     }\n \n     private void updateTableForeignKeys(RawStore rawStore, String catName, String dbName, String tblName) {\n+      catName = StringUtils.normalizeIdentifier(catName);\n+      dbName = StringUtils.normalizeIdentifier(dbName);\n+      tblName = StringUtils.normalizeIdentifier(tblName);\n       LOG.debug(\"CachedStore: updating cached foreign keys objects for catalog: {}, database: {}, table: {}\", catName,\n-              dbName, tblName);\n+          dbName, tblName);\n       List<SQLForeignKey> fks = null;\n       try {\n         Deadline.startTimer(\"getForeignKeys\");\n         fks = rawStore.getForeignKeys(catName, null, null, dbName, tblName);\n         Deadline.stopTimer();\n       } catch (MetaException e) {\n-        LOG.info(\"Updating CachedStore: unable to update foreign keys of catalog: \" + catName + \", database: \"\n-        + dbName + \", table: \" + tblName, e);\n+        LOG.info(\"Updating CachedStore: unable to update foreign keys of catalog: \" + catName + \", database: \" + dbName\n+            + \", table: \" + tblName, e);\n       }\n       if (fks != null) {\n-        sharedCache.refreshForeignKeysInCache(StringUtils.normalizeIdentifier(catName),\n-          StringUtils.normalizeIdentifier(dbName), StringUtils.normalizeIdentifier(tblName), fks);\n-        LOG.debug(\"CachedStore: updated cached foreign keys objects for catalog: {}, database: {}, table: {}\",\n-          catName, dbName, tblName);\n+        sharedCache.refreshForeignKeysInCache(catName, dbName, tblName, fks);\n+        LOG.debug(\"CachedStore: updated cached foreign keys objects for catalog: {}, database: {}, table: {}\", catName,\n+            dbName, tblName);\n       }\n     }\n \n     private void updateTableNotNullConstraints(RawStore rawStore, String catName, String dbName, String tblName) {\n+      catName = StringUtils.normalizeIdentifier(catName);\n+      dbName = StringUtils.normalizeIdentifier(dbName);\n+      tblName = StringUtils.normalizeIdentifier(tblName);\n       LOG.debug(\"CachedStore: updating cached not null constraints for catalog: {}, database: {}, table: {}\", catName,\n-              dbName, tblName);\n+          dbName, tblName);\n       List<SQLNotNullConstraint> nns = null;\n       try {\n         Deadline.startTimer(\"getNotNullConstraints\");\n         nns = rawStore.getNotNullConstraints(catName, dbName, tblName);\n         Deadline.stopTimer();\n       } catch (MetaException e) {\n         LOG.info(\"Updating CachedStore: unable to update not null constraints of catalog: \" + catName + \", database: \"\n-        + dbName + \", table: \" + tblName, e);\n+            + dbName + \", table: \" + tblName, e);\n       }\n       if (nns != null) {\n-        sharedCache.refreshNotNullConstraintsInCache(StringUtils.normalizeIdentifier(catName),\n-          StringUtils.normalizeIdentifier(dbName), StringUtils.normalizeIdentifier(tblName), nns);\n-        LOG.debug(\"CachedStore: updated cached not null constraints for catalog: {}, database: {}, table: {}\",\n-          catName, dbName, tblName);\n+        sharedCache.refreshNotNullConstraintsInCache(catName, dbName, tblName, nns);\n+        LOG.debug(\"CachedStore: updated cached not null constraints for catalog: {}, database: {}, table: {}\", catName,\n+            dbName, tblName);\n       }\n     }\n \n     private void updateTableUniqueConstraints(RawStore rawStore, String catName, String dbName, String tblName) {\n+      catName = StringUtils.normalizeIdentifier(catName);\n+      dbName = StringUtils.normalizeIdentifier(dbName);\n+      tblName = StringUtils.normalizeIdentifier(tblName);\n       LOG.debug(\"CachedStore: updating cached unique constraints for catalog: {}, database: {}, table: {}\", catName,\n-              dbName, tblName);\n+          dbName, tblName);\n       List<SQLUniqueConstraint> ucs = null;\n       try {\n         Deadline.startTimer(\"getUniqueConstraints\");\n         ucs = rawStore.getUniqueConstraints(catName, dbName, tblName);\n         Deadline.stopTimer();\n       } catch (MetaException e) {\n-        LOG.info(\"Updating CachedStore: unable to update unique constraints of catalog: \" + catName + \", database: \"\n-        + dbName + \", table: \" + tblName, e);\n+        LOG.info(\n+            \"Updating CachedStore: unable to update unique constraints of catalog: \" + catName + \", database: \" + dbName\n+                + \", table: \" + tblName, e);\n       }\n       if (ucs != null) {\n-        sharedCache.refreshUniqueConstraintsInCache(StringUtils.normalizeIdentifier(catName),\n-          StringUtils.normalizeIdentifier(dbName), StringUtils.normalizeIdentifier(tblName), ucs);\n-        LOG.debug(\"CachedStore: updated cached unique constraints for catalog: {}, database: {}, table: {}\",\n-          catName, dbName, tblName);\n+        sharedCache.refreshUniqueConstraintsInCache(catName, dbName, tblName, ucs);\n+        LOG.debug(\"CachedStore: updated cached unique constraints for catalog: {}, database: {}, table: {}\", catName,\n+            dbName, tblName);\n       }\n     }\n \n     private void updateTablePrimaryKeys(RawStore rawStore, String catName, String dbName, String tblName) {\n+      catName = StringUtils.normalizeIdentifier(catName);\n+      dbName = StringUtils.normalizeIdentifier(dbName);\n+      tblName = StringUtils.normalizeIdentifier(tblName);\n       LOG.debug(\"CachedStore: updating cached primary keys objects for catalog: {}, database: {}, table: {}\", catName,\n-              dbName, tblName);\n+          dbName, tblName);\n       List<SQLPrimaryKey> pks = null;\n       try {\n         Deadline.startTimer(\"getPrimaryKeys\");\n         pks = rawStore.getPrimaryKeys(catName, dbName, tblName);\n         Deadline.stopTimer();\n       } catch (MetaException e) {\n-        LOG.info(\"Updating CachedStore: unable to update primary keys of catalog: \" + catName + \", database: \"\n-        + dbName + \", table: \" + tblName, e);\n+        LOG.info(\"Updating CachedStore: unable to update primary keys of catalog: \" + catName + \", database: \" + dbName\n+            + \", table: \" + tblName, e);\n       }\n       if (pks != null) {\n-        sharedCache.refreshPrimaryKeysInCache(StringUtils.normalizeIdentifier(catName),\n-          StringUtils.normalizeIdentifier(dbName), StringUtils.normalizeIdentifier(tblName), pks);\n-        LOG.debug(\"CachedStore: updated cached primary keys objects for catalog: {}, database: {}, table: {}\",\n+        sharedCache.refreshPrimaryKeysInCache(catName, dbName, tblName, pks);\n+        LOG.debug(\"CachedStore: updated cached primary keys objects for catalog: {}, database: {}, table: {}\", catName,\n+            dbName, tblName);\n+      }\n+    }\n+\n+    private void updateTableDefaultConstraints(RawStore rawStore, String catName, String dbName, String tblName) {\n+      catName = StringUtils.normalizeIdentifier(catName);\n+      dbName = StringUtils.normalizeIdentifier(dbName);\n+      tblName = StringUtils.normalizeIdentifier(tblName);\n+      LOG.debug(\"CachedStore: updating cached default Constraint objects for catalog: {}, database: {}, table: {}\",\n           catName, dbName, tblName);\n+      List<SQLDefaultConstraint> dc = null;\n+      try {\n+        Deadline.startTimer(\"getDefaultConstraints\");\n+        dc = rawStore.getDefaultConstraints(catName, dbName, tblName);\n+        Deadline.stopTimer();\n+      } catch (MetaException e) {\n+        LOG.info(\n+            \"Updating CachedStore: unable to update default Constraint of catalog: \" + catName + \", database: \" + dbName\n+                + \", table: \" + tblName, e);\n+      }\n+      if (dc != null) {\n+        sharedCache.refreshDefaultConstraintsInCache(catName, dbName, tblName, dc);\n+        LOG.debug(\"CachedStore: updated cached default constraint objects for catalog: {}, database: {}, table: {}\",\n+            catName, dbName, tblName);\n+      }\n+    }\n+\n+    private void updateTableCheckConstraints(RawStore rawStore, String catName, String dbName, String tblName) {\n+      catName = StringUtils.normalizeIdentifier(catName);\n+      dbName = StringUtils.normalizeIdentifier(dbName);\n+      tblName = StringUtils.normalizeIdentifier(tblName);\n+      LOG.debug(\"CachedStore: updating cached check constraint objects for catalog: {}, database: {}, table: {}\",\n+          catName, dbName, tblName);\n+      List<SQLCheckConstraint> cc = null;\n+      try {\n+        Deadline.startTimer(\"getCheckConstraint\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4Mzc4Ng==", "bodyText": "Copy paste error: Should use SQLDefaultConstraint.class.", "url": "https://github.com/apache/hive/pull/1527#discussion_r506283786", "createdAt": "2020-10-16T10:46:36Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/SharedCache.java", "diffHunk": "@@ -749,6 +797,52 @@ public void refreshUniqueConstraints(List<SQLUniqueConstraint> constraints) {\n       }\n     }\n \n+    public void refreshDefaultConstraints(List<SQLDefaultConstraint> constraints) {\n+      Map<String, SQLDefaultConstraint> newConstraints = new ConcurrentHashMap<>();\n+      try {\n+        tableLock.writeLock().lock();\n+        int size = 0;\n+        for (SQLDefaultConstraint constraint : constraints) {\n+          if (compareAndSetMemberCacheUpdated(MemberName.DEFAULT_CONSTRAINT_CACHE, true, false)) {\n+            LOG.debug(\"Skipping default constraint cache update for table: \" + getTable().getTableName()\n+                + \"; the default constraint are already refreshed.\");\n+            return;\n+          }\n+          newConstraints.put(constraint.getDc_name().toLowerCase(), constraint);\n+          size += getObjectSize(SQLUniqueConstraint.class, constraint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NTEwOQ==", "bodyText": "Copy paste error: \"Check constraints ..\"", "url": "https://github.com/apache/hive/pull/1527#discussion_r506285109", "createdAt": "2020-10-16T10:48:06Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/SharedCache.java", "diffHunk": "@@ -749,6 +797,52 @@ public void refreshUniqueConstraints(List<SQLUniqueConstraint> constraints) {\n       }\n     }\n \n+    public void refreshDefaultConstraints(List<SQLDefaultConstraint> constraints) {\n+      Map<String, SQLDefaultConstraint> newConstraints = new ConcurrentHashMap<>();\n+      try {\n+        tableLock.writeLock().lock();\n+        int size = 0;\n+        for (SQLDefaultConstraint constraint : constraints) {\n+          if (compareAndSetMemberCacheUpdated(MemberName.DEFAULT_CONSTRAINT_CACHE, true, false)) {\n+            LOG.debug(\"Skipping default constraint cache update for table: \" + getTable().getTableName()\n+                + \"; the default constraint are already refreshed.\");\n+            return;\n+          }\n+          newConstraints.put(constraint.getDc_name().toLowerCase(), constraint);\n+          size += getObjectSize(SQLUniqueConstraint.class, constraint);\n+        }\n+        defaultConstraintCache = newConstraints;\n+        updateMemberSize(MemberName.DEFAULT_CONSTRAINT_CACHE, size, SizeMode.Snapshot);\n+        LOG.debug(\"Default constraints refresh in cache was successful for {}.{}.{}\", this.getTable().getCatName(),\n+            this.getTable().getDbName(), this.getTable().getTableName());\n+      } finally {\n+        tableLock.writeLock().unlock();\n+      }\n+    }\n+\n+    public void refreshCheckConstraints(List<SQLCheckConstraint> constraints) {\n+      Map<String, SQLCheckConstraint> newConstraints = new ConcurrentHashMap<>();\n+      try {\n+        tableLock.writeLock().lock();\n+        int size = 0;\n+        for (SQLCheckConstraint constraint : constraints) {\n+          if (compareAndSetMemberCacheUpdated(MemberName.CHECK_CONSTRAINT_CACHE, true, false)) {\n+            LOG.debug(\"Skipping check constraint cache update for table: \" + getTable().getTableName()\n+                + \"; the check constraint are already refreshed.\");\n+            return;\n+          }\n+          newConstraints.put(constraint.getDc_name().toLowerCase(), constraint);\n+          size += getObjectSize(SQLCheckConstraint.class, constraint);\n+        }\n+        checkConstraintCache = newConstraints;\n+        updateMemberSize(MemberName.CHECK_CONSTRAINT_CACHE, size, SizeMode.Snapshot);\n+        LOG.debug(\"Unique constraints refresh in cache was successful for {}.{}.{}\", this.getTable().getCatName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NzUwMQ==", "bodyText": "Can store cacheObjects.getTableConstraints() in local variable and use it instead of multiple calls.", "url": "https://github.com/apache/hive/pull/1527#discussion_r506287501", "createdAt": "2020-10-16T10:51:00Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/SharedCache.java", "diffHunk": "@@ -1669,33 +1763,47 @@ public boolean populateTableInCache(Table table, TableCacheObjects cacheObjects)\n     tblWrapper.setMemberCacheUpdated(MemberName.PARTITION_COL_STATS_CACHE, false);\n     tblWrapper.setMemberCacheUpdated(MemberName.AGGR_COL_STATS_CACHE, false);\n \n-    if (cacheObjects.getPrimaryKeys() != null) {\n-      if(!tblWrapper.cachePrimaryKeys(cacheObjects.getPrimaryKeys(), true)) {\n+    if (CollectionUtils.isNotEmpty(cacheObjects.getTableConstraints().getPrimaryKeys())) {\n+      if (!tblWrapper.cachePrimaryKeys(cacheObjects.getTableConstraints().getPrimaryKeys(), true)) {\n+        return false;\n+      }\n+    }\n+    tblWrapper.setMemberCacheUpdated(MemberName.PRIMARY_KEY_CACHE, false);\n+\n+    if (CollectionUtils.isNotEmpty(cacheObjects.getTableConstraints().getForeignKeys())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5MTM0MQ==", "bodyText": "What happens if constraints are partially cached due to space constraint? Will CachedStore calls rawStore or returns empty list?", "url": "https://github.com/apache/hive/pull/1527#discussion_r506291341", "createdAt": "2020-10-16T10:55:31Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/TableCacheObjects.java", "diffHunk": "@@ -3,59 +3,21 @@\n import org.apache.hadoop.hive.metastore.api.AggrStats;\n import org.apache.hadoop.hive.metastore.api.ColumnStatistics;\n import org.apache.hadoop.hive.metastore.api.Partition;\n-import org.apache.hadoop.hive.metastore.api.SQLForeignKey;\n-import org.apache.hadoop.hive.metastore.api.SQLNotNullConstraint;\n-import org.apache.hadoop.hive.metastore.api.SQLPrimaryKey;\n-import org.apache.hadoop.hive.metastore.api.SQLUniqueConstraint;\n+import org.apache.hadoop.hive.metastore.api.SQLAllTableConstraints;\n \n import java.util.List;\n \n /*\n  * Holder class for table objects like partitions, statistics, constraints etc.\n  */\n public class TableCacheObjects {\n-  private List<SQLPrimaryKey> primaryKeys;\n-  private List<SQLForeignKey> foreignKeys;\n-  private List<SQLNotNullConstraint> notNullConstraints;\n-  private List<SQLUniqueConstraint> uniqueConstraints;\n+  private SQLAllTableConstraints tableConstraints;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1af04036d35b0fa9ca828b1e529d2118a612eac"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adae25dd32a82fe357905f3aced0e4f5a722b6c3", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/adae25dd32a82fe357905f3aced0e4f5a722b6c3", "committedDate": "2020-10-16T15:44:46Z", "message": "HIVE-23695: Comment Addressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af601d86d1a04a6a5dedd6928bb27d3b79075f0b", "author": {"user": {"login": "ashish-kumar-sharma", "name": "Ashish Kumar Sharma"}}, "url": "https://github.com/apache/hive/commit/af601d86d1a04a6a5dedd6928bb27d3b79075f0b", "committedDate": "2020-10-16T15:49:20Z", "message": "HIVE-23695: Comment Addressed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDI0NDQz", "url": "https://github.com/apache/hive/pull/1527#pullrequestreview-511424443", "createdAt": "2020-10-19T05:40:57Z", "commit": {"oid": "af601d86d1a04a6a5dedd6928bb27d3b79075f0b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3102, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}