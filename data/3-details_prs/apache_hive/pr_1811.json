{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0OTQ1MTk5", "number": 1811, "title": "HIVE-24564: Extend PPD filter transitivity to be able to discover new opportunities", "bodyText": "What changes were proposed in this pull request?\nWhen transitively replicate predicate filters over equijoin conditions if the replication is failed due to referenced column in the predicate is not a key column in the ReduceSink operator\n\ntraverse the branches of the join operator to find a an equijoin having a join expression where the column referenced in the predicate\nreplace the column in the predicate with the column coming from the other side of the equijoin expression found int step 1.\ncontinue with the modified predicate.\n\nWhy are the changes needed?\nSee jira for detailes\nDoes this PR introduce any user-facing change?\nNo.\nHow was this patch tested?\nExecuting explain logical query95.q:\nmvn test -Dtest.output.overwrite -DskipSparkTests -Dtest=TestTezTPCDS30TBPerfCliDriver -Dqfile=query95.q -pl itests/qtest -Pitests\n\nCheck the difference of the output of above command when this ppd extension is turned on/off.\nOn:\n$hdt$_2:$hdt$_4:ws2 \n  TableScan (TS_35)\n    alias: ws2\n    filterExpr: ((ws_order_number) IN (RS[40]) and (ws_order_number) IN (RS[37]) and (ws_order_number) IN (RS[38]) and (ws_order_number) IN (RS[52]) and (ws_order_number) IN (RS[47]) and (ws_order_number) IN (RS[48]) and (ws_order_number) IN (RS[26]) and (ws_order_number) IN (RS[27])) (type: boolean)\n\nOff\n$hdt$_2:$hdt$_4:ws2 \n  TableScan (TS_35)\n    alias: ws2\n    filterExpr: ((ws_order_number) IN (RS[40]) and (ws_order_number) IN (RS[37]) and (ws_order_number) IN (RS[38])) (type: boolean)\n\nIf the extension is turned on TS has additional filterExprs like:\nand (ws_order_number) IN (RS[52]) and (ws_order_number) IN (RS[47]) and (ws_order_number) IN (RS[48]) and (ws_order_number) IN (RS[26]) and (ws_order_number) IN (RS[27])", "createdAt": "2020-12-23T17:13:33Z", "url": "https://github.com/apache/hive/pull/1811", "merged": true, "mergeCommit": {"oid": "edefb96228e48012ac6e4f318c2ce03e741b67a0"}, "closed": true, "closedAt": "2021-01-28T04:51:16Z", "author": {"login": "kasakrisz"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpJ5aRgFqTU1ODI5NTAxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0Y8MbAFqTU3Nzg3MDMzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjk1MDEy", "url": "https://github.com/apache/hive/pull/1811#pullrequestreview-558295012", "createdAt": "2020-12-24T01:28:44Z", "commit": {"oid": "34294e822e51c707186a8ad8d07e8dfafd77b9cf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMToyODo0NFrOIK8Jfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTo0MDoyNFrOIK8SQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MjE0Mw==", "bodyText": "Consider changing method name.", "url": "https://github.com/apache/hive/pull/1811#discussion_r548342143", "createdAt": "2020-12-24T01:28:44Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +769,134 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        result.add((ExprNodeColumnDesc) exprNodeDesc);\n+        return;\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          extractColumnExprNodes(child, result);\n+        }\n+      }\n+    }\n+\n+    private ExprNodeDesc replaceColumnExprNodes(ExprNodeDesc exprNodeDesc, Map<ExprNodeDesc, ExprNodeDesc> replaceMap) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        return replaceMap.getOrDefault(exprNodeDesc, exprNodeDesc);\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        ExprNodeGenericFuncDesc exprNodeGenericFuncDesc = (ExprNodeGenericFuncDesc) exprNodeDesc.clone();\n+        List<ExprNodeDesc> replacedChildren = new ArrayList<>(exprNodeDesc.getChildren().size());\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          replacedChildren.add(replaceColumnExprNodes(child, replaceMap));\n+        }\n+        exprNodeGenericFuncDesc.setChildren(replacedChildren);\n+        return exprNodeGenericFuncDesc;\n+      }\n+\n+      return exprNodeDesc;\n+    }\n+\n+    private Map<ExprNodeDesc, String> walk(Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34294e822e51c707186a8ad8d07e8dfafd77b9cf"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NDM4Nw==", "bodyText": "When would this be null? Can we add a comment?", "url": "https://github.com/apache/hive/pull/1811#discussion_r548344387", "createdAt": "2020-12-24T01:40:24Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +769,134 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        result.add((ExprNodeColumnDesc) exprNodeDesc);\n+        return;\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          extractColumnExprNodes(child, result);\n+        }\n+      }\n+    }\n+\n+    private ExprNodeDesc replaceColumnExprNodes(ExprNodeDesc exprNodeDesc, Map<ExprNodeDesc, ExprNodeDesc> replaceMap) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        return replaceMap.getOrDefault(exprNodeDesc, exprNodeDesc);\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        ExprNodeGenericFuncDesc exprNodeGenericFuncDesc = (ExprNodeGenericFuncDesc) exprNodeDesc.clone();\n+        List<ExprNodeDesc> replacedChildren = new ArrayList<>(exprNodeDesc.getChildren().size());\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          replacedChildren.add(replaceColumnExprNodes(child, replaceMap));\n+        }\n+        exprNodeGenericFuncDesc.setChildren(replacedChildren);\n+        return exprNodeGenericFuncDesc;\n+      }\n+\n+      return exprNodeDesc;\n+    }\n+\n+    private Map<ExprNodeDesc, String> walk(Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      Map<ExprNodeDesc, String> equalities;\n+      if (operator instanceof CommonJoinOperator) {\n+        equalities = processJoinEq((CommonJoinOperator<?>)operator, exprNodeDescList);\n+      } else {\n+        equalities = processDefaultEq(operator, exprNodeDescList);\n+      }\n+      return equalities;\n+    }\n+\n+    private Map<ExprNodeDesc, String> processJoinEq(\n+            CommonJoinOperator<?> join, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      if (exprNodeDescList.isEmpty()) {\n+        return Collections.emptyMap();\n+      }\n+      Map<ExprNodeDesc, String> equalities = new HashMap<>();\n+      for (ExprNodeColumnDesc exprNodeDesc : exprNodeDescList) {\n+        ExprNodeDesc mappedColExpr = join.getColumnExprMap().get(exprNodeDesc.getColumn());\n+        if (!(mappedColExpr instanceof ExprNodeColumnDesc)) {\n+          continue;\n+        }\n+        String mappedColName = ((ExprNodeColumnDesc)mappedColExpr).getColumn();\n+        int sideIndex = join.getConf().getReversedExprs().get(exprNodeDesc.getColumn());\n+        Operator<?> parentRSOperator = join.getParentOperators().get(sideIndex);\n+        for (int i = 0; i < join.getConf().getJoinKeys()[sideIndex].length; ++i) {\n+          ExprNodeDesc keyExpr = join.getConf().getJoinKeys()[sideIndex][i];\n+          if (!keyExpr.isSame(parentRSOperator.getColumnExprMap().get(mappedColName))) {\n+            continue;\n+          }\n+\n+          // exprNodeDesc is join key\n+          // find the other key in the join expression\n+          Operator<?> otherParentRSOperator = join.getParentOperators().get(1 - sideIndex);\n+          for (Entry<String, ExprNodeDesc> joinMapEntry : join.getColumnExprMap().entrySet()) {\n+            if (join.getConf().getReversedExprs().get(joinMapEntry.getKey()) != 1 - sideIndex) {\n+              continue;\n+            }\n+\n+            String otherColumnName = ((ExprNodeColumnDesc) joinMapEntry.getValue()).getColumn();\n+            ExprNodeDesc mappedOtherKeyExpr = otherParentRSOperator.getColumnExprMap().get(otherColumnName);\n+            ExprNodeDesc otherKeyExpr = join.getConf().getJoinKeys()[1 - sideIndex][i];\n+            if (mappedOtherKeyExpr != null && otherKeyExpr.isSame(mappedOtherKeyExpr)) {\n+              equalities.put(exprNodeDesc, joinMapEntry.getKey());\n+            }\n+          }\n+        }\n+      }\n+\n+      for (Operator<?> parent : join.getParentOperators()) {\n+        equalities.putAll(walk(parent, exprNodeDescList));\n+      }\n+\n+      return equalities;\n+    }\n+\n+    private Map<ExprNodeDesc, String> processDefaultEq(\n+            Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      if (exprNodeDescList.isEmpty()) {\n+        return Collections.emptyMap();\n+      }\n+\n+      Map<String, ExprNodeDesc> columnExprMap = operator.getColumnExprMap();\n+      if (columnExprMap == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34294e822e51c707186a8ad8d07e8dfafd77b9cf"}, "originalPosition": 177}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34294e822e51c707186a8ad8d07e8dfafd77b9cf", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/34294e822e51c707186a8ad8d07e8dfafd77b9cf", "committedDate": "2020-12-23T16:34:43Z", "message": "HIVE-24564: Extend PPD filter transitivity to be able to discover new opportunities"}, "afterCommit": {"oid": "ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "committedDate": "2021-01-06T13:11:16Z", "message": "update q test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "committedDate": "2021-01-06T13:11:16Z", "message": "update q test"}, "afterCommit": {"oid": "61df78781455935ebf692557a64626d983b90100", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/61df78781455935ebf692557a64626d983b90100", "committedDate": "2021-01-18T10:50:05Z", "message": "add feature switch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bde09ec3745779ce1b179c7921d3138224f42213", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/bde09ec3745779ce1b179c7921d3138224f42213", "committedDate": "2021-01-18T12:16:50Z", "message": "checkstyle"}, "afterCommit": {"oid": "29899642731ddf9c09e082be0728ca0810dad45d", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/29899642731ddf9c09e082be0728ca0810dad45d", "committedDate": "2021-01-19T17:17:49Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NjY3NTYz", "url": "https://github.com/apache/hive/pull/1811#pullrequestreview-575667563", "createdAt": "2021-01-25T18:02:53Z", "commit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODowMjo1M1rOIZzqgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTo1MToxM1rOIZ33lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzMTc3Nw==", "bodyText": "\"Whether we should traverse the join branches to discover transitive propagation opportunities over equijoin conditions. \\n\" +\n\"Requires hive.ppd.recognizetransivity to be set to true.\"", "url": "https://github.com/apache/hive/pull/1811#discussion_r563931777", "createdAt": "2021-01-25T18:02:53Z", "author": {"login": "jcamachor"}, "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -2461,6 +2461,10 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n         \"Whether to enable predicate pushdown through windowing\"),\n     HIVEPPDRECOGNIZETRANSITIVITY(\"hive.ppd.recognizetransivity\", true,\n         \"Whether to transitively replicate predicate filters over equijoin conditions.\"),\n+    HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES(\"hive.ppd.recognize.column.equalities\", true,\n+        \"When hive.ppd.recognizetransivity is true Whether traverse join branches to discover equal columns based\" +\n+                \" on equijoin keys and try to substitute equal columns to predicates \" +\n+                \"and push down to the other branch.\"),\n     HIVEPPDREMOVEDUPLICATEFILTERS(\"hive.ppd.remove.duplicatefilters\", true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzU1Mg==", "bodyText": "Extract the property value into a variable before entering in the loop (~L700).", "url": "https://github.com/apache/hive/pull/1811#discussion_r563973552", "createdAt": "2021-01-25T19:07:05Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzkxNQ==", "bodyText": "Extract the property value into a variable before entering in the loop (~L700).", "url": "https://github.com/apache/hive/pull/1811#discussion_r563973915", "createdAt": "2021-01-25T19:07:36Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),\n+                  HiveConf.ConfVars.HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES)) {\n+            columnsInPredicates = owi.getColumnsInPredicates().get(source);\n+            if (columnsInPredicates == null) {\n+              columnsInPredicates = collectColumnsInPredicates(entry.getValue());\n+              owi.getColumnsInPredicates().put(source, columnsInPredicates);\n+            }\n+          }\n+\n           for (ExprNodeDesc predicate : entry.getValue()) {\n             ExprNodeDesc backtrack = ExprNodeDescUtils.backtrack(predicate, join, source);\n             if (backtrack == null) {\n               continue;\n             }\n             ExprNodeDesc replaced = ExprNodeDescUtils.replace(backtrack, sourceKeys, targetKeys);\n             if (replaced == null) {\n-              continue;\n+              if (!HiveConf.getBoolVar(owi.getParseContext().getConf(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4ODQ0Mg==", "bodyText": "Can we add a few high level comments to these new private methods describing what they do?", "url": "https://github.com/apache/hive/pull/1811#discussion_r563988442", "createdAt": "2021-01-25T19:31:16Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +763,166 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private Set<ExprNodeColumnDesc> collectColumnsInPredicates(List<ExprNodeDesc> predicates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwMDY2Mg==", "bodyText": "Can we add comments about these data structures and what they will hold?", "url": "https://github.com/apache/hive/pull/1811#discussion_r564000662", "createdAt": "2021-01-25T19:51:13Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java", "diffHunk": "@@ -39,11 +43,15 @@\n     opToPushdownPredMap;\n   private final ParseContext pGraphContext;\n   private final List<FilterOperator> candidateFilterOps;\n+  private final Map<Operator<?>, Set<ExprNodeColumnDesc>> columnsInPredicates;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d73d12849a41e6f5ff38e03f34dc9016758785", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/f9d73d12849a41e6f5ff38e03f34dc9016758785", "committedDate": "2021-01-26T07:27:01Z", "message": "HIVE-24564: Extend PPD filter transitivity to be able to discover new opportunities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "213a5b8f2bc065ade4deba3991e0c82b80d705f6", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/213a5b8f2bc065ade4deba3991e0c82b80d705f6", "committedDate": "2021-01-26T07:27:01Z", "message": "rename methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c11682e9174391b1f939beb708ee154e694dff", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/77c11682e9174391b1f939beb708ee154e694dff", "committedDate": "2021-01-26T07:27:01Z", "message": "add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af55a1afb54abe4d52455153b778d3cae2e42d9b", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/af55a1afb54abe4d52455153b778d3cae2e42d9b", "committedDate": "2021-01-26T07:27:01Z", "message": "cache equalities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eadfba6aba3c1d183c226efcba436e35ed61397", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/1eadfba6aba3c1d183c226efcba436e35ed61397", "committedDate": "2021-01-26T07:27:01Z", "message": "bail out of no equalities found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64fe3d620c2152785f94762986d79f81279178ad", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/64fe3d620c2152785f94762986d79f81279178ad", "committedDate": "2021-01-26T07:27:01Z", "message": "update q test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f571f9fa1af535a2d1f7ad4a348c5b183655fc", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/30f571f9fa1af535a2d1f7ad4a348c5b183655fc", "committedDate": "2021-01-26T07:27:01Z", "message": "add feature switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b018c33629012dcc138851f275f192547d7cfd5b", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/b018c33629012dcc138851f275f192547d7cfd5b", "committedDate": "2021-01-26T07:27:01Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d1a153e5e2e63ef466dd48e33d0144fac75223", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/c9d1a153e5e2e63ef466dd48e33d0144fac75223", "committedDate": "2021-01-26T07:27:01Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c574493d526683631e688489d52b951d9338938c", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/c574493d526683631e688489d52b951d9338938c", "committedDate": "2021-01-26T07:27:01Z", "message": "rewrite description of config HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8566e8cb1c09587763f530245ae9449943fdc90", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/d8566e8cb1c09587763f530245ae9449943fdc90", "committedDate": "2021-01-26T07:35:02Z", "message": "Extract config value query to local variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7ee65753b1710c66e0a7ddf1237e821c96fef40", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/b7ee65753b1710c66e0a7ddf1237e821c96fef40", "committedDate": "2021-01-26T08:06:06Z", "message": "reuse ExprNodeDescUtils.findAllColumnDescs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adce6736391cdb28dc1f90ce43217efe0e48153b", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/adce6736391cdb28dc1f90ce43217efe0e48153b", "committedDate": "2021-01-26T10:37:54Z", "message": "add comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/02699b101543f17349dd98889018035bc21d7ac9", "committedDate": "2021-01-20T15:14:42Z", "message": "Merge remote-tracking branch 'apache/master' into PR-1811"}, "afterCommit": {"oid": "adce6736391cdb28dc1f90ce43217efe0e48153b", "author": {"user": {"login": "kasakrisz", "name": "Krisztian Kasa"}}, "url": "https://github.com/apache/hive/commit/adce6736391cdb28dc1f90ce43217efe0e48153b", "committedDate": "2021-01-26T10:37:54Z", "message": "add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3ODcwMzMy", "url": "https://github.com/apache/hive/pull/1811#pullrequestreview-577870332", "createdAt": "2021-01-27T23:44:46Z", "commit": {"oid": "adce6736391cdb28dc1f90ce43217efe0e48153b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2964, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}