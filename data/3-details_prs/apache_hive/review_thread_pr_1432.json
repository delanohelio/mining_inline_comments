{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMjk0NTIz", "number": 1432, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTozMTowOVrOEdRo5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzozNzoxN1rOEeZtRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTMzMTU4OnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTozMTowOVrOHIV1OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzo1Mjo1N1rOHO1qJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwODM0NA==", "bodyText": "@jcamachor\nI think this intersect is not needed; it cause some trouble in case\n\ngrouped by say 1,3,4\ncolumns 1,2,3 is coming from left side of join; column 2 is the join key\nthe intersect will remove column 2 ; which will induce a shift in the mapping - and will rotate in the join key into a projkect later on\n\nI think in calcite the following is true:\nfor a join betwen inputs:\n\nT1(a,b,c)\nT2(d,e,f)\nthe output is always a,b,c,d,e,f - independently the join condition\nso I see no rational need for this intersect...it was here for a few years now...and the class \"borned\" with this line in it...", "url": "https://github.com/apache/hive/pull/1432#discussion_r478508344", "createdAt": "2020-08-27T15:31:09Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -145,8 +145,7 @@ public void onMatch(RelOptRuleCall call) {\n         int fieldCount = joinInput.getRowType().getFieldCount();\n         final ImmutableBitSet fieldSet =\n             ImmutableBitSet.range(offset, offset + fieldCount);\n-        final ImmutableBitSet belowAggregateKeyNotShifted =\n-            belowAggregateColumns.intersect(fieldSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa705cb8e21b2f5f75574fd1288bf9ff0dba234c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3OTg1Mg==", "bodyText": "belowAggregateColumns includes the aggregate fields for all inputs together with the join keys (L120). Intersection is supposed to gather only those applicable to current input in the loop, it should not remove column 2 unless I am missing anything...", "url": "https://github.com/apache/hive/pull/1432#discussion_r480279852", "createdAt": "2020-08-31T17:32:03Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -145,8 +145,7 @@ public void onMatch(RelOptRuleCall call) {\n         int fieldCount = joinInput.getRowType().getFieldCount();\n         final ImmutableBitSet fieldSet =\n             ImmutableBitSet.range(offset, offset + fieldCount);\n-        final ImmutableBitSet belowAggregateKeyNotShifted =\n-            belowAggregateColumns.intersect(fieldSet);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwODM0NA=="}, "originalCommit": {"oid": "fa705cb8e21b2f5f75574fd1288bf9ff0dba234c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NTc0OA==", "bodyText": "right; the column which was causing the trouble was the preceeding join's joinkey.\nthe issue was caused by\n\nthat between the previous / and current join there were no projects - so all the join keys of the previous join were present in the input\nmeanwhile the aggregate had references to 0,2,... columns - which were unique; so the logic assumed that the joinInput could be used as is\n\nhowever..because column 1 was present in the input; but not in the output this have caused that the actual join was not in sync with the mapping being created\nI think the patch may make more sense than the above reasoning :)", "url": "https://github.com/apache/hive/pull/1432#discussion_r484385748", "createdAt": "2020-09-07T11:55:52Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -145,8 +145,7 @@ public void onMatch(RelOptRuleCall call) {\n         int fieldCount = joinInput.getRowType().getFieldCount();\n         final ImmutableBitSet fieldSet =\n             ImmutableBitSet.range(offset, offset + fieldCount);\n-        final ImmutableBitSet belowAggregateKeyNotShifted =\n-            belowAggregateColumns.intersect(fieldSet);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwODM0NA=="}, "originalCommit": {"oid": "fa705cb8e21b2f5f75574fd1288bf9ff0dba234c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMTI1Mg==", "bodyText": "Yes, this makes sense now!", "url": "https://github.com/apache/hive/pull/1432#discussion_r485321252", "createdAt": "2020-09-09T03:52:57Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -145,8 +145,7 @@ public void onMatch(RelOptRuleCall call) {\n         int fieldCount = joinInput.getRowType().getFieldCount();\n         final ImmutableBitSet fieldSet =\n             ImmutableBitSet.range(offset, offset + fieldCount);\n-        final ImmutableBitSet belowAggregateKeyNotShifted =\n-            belowAggregateColumns.intersect(fieldSet);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwODM0NA=="}, "originalCommit": {"oid": "fa705cb8e21b2f5f75574fd1288bf9ff0dba234c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzEzOTI1OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/groupby_join_pushdown.q.out", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzozNzoxN1rOHKCIIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyMzowN1rOHOBO4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MjY1Ng==", "bodyText": "The aggregate call column is also part of the group by key now.", "url": "https://github.com/apache/hive/pull/1432#discussion_r480282656", "createdAt": "2020-08-31T17:37:17Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/groupby_join_pushdown.q.out", "diffHunk": "@@ -644,29 +646,18 @@ STAGE PLANS:\n                       Statistics: Num rows: 9173 Data size: 82188 Basic stats: COMPLETE Column stats: COMPLETE\n                       Group By Operator\n                         aggregations: max(_col0)\n-                        keys: _col1 (type: bigint)\n-                        minReductionHashAggr: 0.49994552\n+                        keys: _col1 (type: bigint), _col0 (type: int)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa705cb8e21b2f5f75574fd1288bf9ff0dba234c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjMwNA==", "bodyText": "this q.out change is not there anymore", "url": "https://github.com/apache/hive/pull/1432#discussion_r484462304", "createdAt": "2020-09-07T14:23:07Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/llap/groupby_join_pushdown.q.out", "diffHunk": "@@ -644,29 +646,18 @@ STAGE PLANS:\n                       Statistics: Num rows: 9173 Data size: 82188 Basic stats: COMPLETE Column stats: COMPLETE\n                       Group By Operator\n                         aggregations: max(_col0)\n-                        keys: _col1 (type: bigint)\n-                        minReductionHashAggr: 0.49994552\n+                        keys: _col1 (type: bigint), _col0 (type: int)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MjY1Ng=="}, "originalCommit": {"oid": "fa705cb8e21b2f5f75574fd1288bf9ff0dba234c"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 382, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}