{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzU1OTcy", "number": 1724, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0MTo0MlrOFDgvqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoyNDo0MVrOFMIdxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI2NTM5OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0MTo0MlrOIDMkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyNjozN1rOIGKxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA==", "bodyText": "Would it be better to create enum instead of string literals?", "url": "https://github.com/apache/hive/pull/1724#discussion_r540222494", "createdAt": "2020-12-10T14:41:42Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -747,6 +753,92 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    // nothing needs to be done\n+    if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+\n+    if (\"none\".equalsIgnoreCase(lockFileMoveMode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxMzkxNQ==", "bodyText": "yes...in that case I would prefer to have the enum inside HiveConf - which is not how the HiveConf was designed...because that's not possible I resorted to string literals...\nI don't have a good idea how to do this in a bulletproof way...\n...or should I just declare an enum in this class - and parse the enum value into it and use that?", "url": "https://github.com/apache/hive/pull/1724#discussion_r540313915", "createdAt": "2020-12-10T16:31:36Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -747,6 +753,92 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    // nothing needs to be done\n+    if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+\n+    if (\"none\".equalsIgnoreCase(lockFileMoveMode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA=="}, "originalCommit": {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzODc2OA==", "bodyText": "Yes, I think, having enum in MoveTask should be ok.  Btw, should we allow to modify HIVE_LOCK_FILE_MOVE_MODE in runtime, if not, we can init this enum in constructor or so.", "url": "https://github.com/apache/hive/pull/1724#discussion_r542238768", "createdAt": "2020-12-14T09:36:09Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -747,6 +753,92 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    // nothing needs to be done\n+    if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+\n+    if (\"none\".equalsIgnoreCase(lockFileMoveMode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA=="}, "originalCommit": {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzODg5MQ==", "bodyText": "the MoveTask is created in the TaskFactory - and the \"work\" is only set via setWork - I choose not to override that method and parsed the enum value right when its needed", "url": "https://github.com/apache/hive/pull/1724#discussion_r543338891", "createdAt": "2020-12-15T13:26:37Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -747,6 +753,92 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    // nothing needs to be done\n+    if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+\n+    if (\"none\".equalsIgnoreCase(lockFileMoveMode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA=="}, "originalCommit": {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjQzNTg1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoxMzoyN1rOIPqNOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoxMzoyN1rOIPqNOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5MTA2Nw==", "bodyText": "I think, it would be more cleaner to have 0 and 1 argument constructors. Based on current usages of  LocalTableLock constructor you know for sure if lock if null or not.", "url": "https://github.com/apache/hive/pull/1724#discussion_r553291067", "createdAt": "2021-01-07T12:13:27Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjQ1Nzc4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoyMDoxOVrOIPqZ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMzo1ODoyM1rOITlzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDMwOQ==", "bodyText": "Favor static member classes over non static", "url": "https://github.com/apache/hive/pull/1724#discussion_r553294309", "createdAt": "2021-01-07T12:20:19Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxMzEyNA==", "bodyText": "its non-static because it needs access to the txnmanager.", "url": "https://github.com/apache/hive/pull/1724#discussion_r557413124", "createdAt": "2021-01-14T13:58:23Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDMwOQ=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjQ2MjQyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoyMTozOVrOIPqcfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoyMTozOVrOIPqcfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDk3Mw==", "bodyText": "should we lower log level to debug here to avoid extensive logging.", "url": "https://github.com/apache/hive/pull/1724#discussion_r553294973", "createdAt": "2021-01-07T12:21:39Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjQ5MTA2OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjozMDozN1rOIPqs0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjozMDozN1rOIPqs0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTE1NA==", "bodyText": "should we lower log level to debug here to avoid extensive logging", "url": "https://github.com/apache/hive/pull/1724#discussion_r553299154", "createdAt": "2021-01-07T12:30:37Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjQ5NDc0OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjozMTo1NFrOIPqu5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDowMjo0MVrOITl-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTY4Nw==", "bodyText": "please use uppercase literals", "url": "https://github.com/apache/hive/pull/1724#discussion_r553299687", "createdAt": "2021-01-07T12:31:54Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxNjA2NA==", "bodyText": "I kept it lowercase to align with the set values of the hiveconf.\nreplaced it with uppercase ones", "url": "https://github.com/apache/hive/pull/1724#discussion_r557416064", "createdAt": "2021-01-14T14:02:41Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTY4Nw=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjUyNTcwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0MjoxMFrOIPrBGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0MjoxMFrOIPrBGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNDM0NQ==", "bodyText": "'+' lock for correlation", "url": "https://github.com/apache/hive/pull/1724#discussion_r553304345", "createdAt": "2021-01-07T12:42:10Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjUzMjYwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NDozNVrOIPrFWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NDozNVrOIPrFWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNTQzMg==", "bodyText": "could you please remove unneeded nesting here", "url": "https://github.com/apache/hive/pull/1724#discussion_r553305432", "createdAt": "2021-01-07T12:44:35Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjUzNjMzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NTo0OFrOIPrHiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NTo0OFrOIPrHiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNTk5Mw==", "bodyText": "nit. space", "url": "https://github.com/apache/hive/pull/1724#discussion_r553305993", "createdAt": "2021-01-07T12:45:48Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjU1MjkxOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo1MTozMlrOIPrROw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDowNzoyMFrOITmKaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwODQ3NQ==", "bodyText": "I assume we don't have enum for this.", "url": "https://github.com/apache/hive/pull/1724#discussion_r553308475", "createdAt": "2021-01-07T12:51:32Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxOTExMg==", "bodyText": "no there isn't any - HiveLockObject has 5 string fields", "url": "https://github.com/apache/hive/pull/1724#discussion_r557419112", "createdAt": "2021-01-14T14:07:20Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwODQ3NQ=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjU4MDIzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowMDoxNFrOIPrhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoxMzowMVrOITmZLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMjU1NA==", "bodyText": "minor: i would prefer stream api here, but you can ignore it..\nif (locks.stream().filter().anyMatch()){..}", "url": "https://github.com/apache/hive/pull/1724#discussion_r553312554", "createdAt": "2021-01-07T13:00:14Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",\n+                               queryPlan.getQueryStr(),\n+                               conf);\n+\n+    HiveLockObject lock = new HiveLockObject(baseTable,lockData);\n+\n+    for (HiveLockObj hiveLockObj : lockObjects) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMjg5Mw==", "bodyText": "I tried to use stream api a few times - and I'm a bit against it because:\n\nit's somewhat unreadable\nit's harder to read them when they eventually changed in a patch\nnot really debug friendly\nthey seem to fit \"easy tasks\" nicely; but if someone extends it later - it might become a really hard to read expression...\n\ninstead of 2 complex lines; this is 7 simple - I would rather keep it", "url": "https://github.com/apache/hive/pull/1724#discussion_r557422893", "createdAt": "2021-01-14T14:13:01Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",\n+                               queryPlan.getQueryStr(),\n+                               conf);\n+\n+    HiveLockObject lock = new HiveLockObject(baseTable,lockData);\n+\n+    for (HiveLockObj hiveLockObj : lockObjects) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMjU1NA=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjU4NjMyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowMjoxNVrOIPrkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowMjoxNVrOIPrkzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMzQ4NQ==", "bodyText": "minor: tbd.getLbCtx() != null && tbd.getLbCtx().isSkewedStoredAsDir()", "url": "https://github.com/apache/hive/pull/1724#discussion_r553313485", "createdAt": "2021-01-07T13:02:15Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",\n+                               queryPlan.getQueryStr(),\n+                               conf);\n+\n+    HiveLockObject lock = new HiveLockObject(baseTable,lockData);\n+\n+    for (HiveLockObj hiveLockObj : lockObjects) {\n+      if (Arrays.equals(hiveLockObj.getObj().getPaths(), lock.getPaths())) {\n+        HiveLockMode l = hiveLockObj.getMode();\n+        if (l == HiveLockMode.EXCLUSIVE || l == HiveLockMode.SEMI_SHARED) {\n+          // no need to lock ; already owns a more powerful one\n+          return new LocalTableLock(Optional.empty());\n+        }\n+      }\n+    }\n+\n+    return new LocalTableLock(Optional.of(lock));\n+  }\n+\n   private boolean isSkewedStoredAsDirs(LoadTableDesc tbd) {\n     return (tbd.getLbCtx() == null) ? false : tbd.getLbCtx()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjU5NjU4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowNTo0NFrOIPrrEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowNTo0NFrOIPrrEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxNTA5MQ==", "bodyText": "unnecessary brackets", "url": "https://github.com/apache/hive/pull/1724#discussion_r553315091", "createdAt": "2021-01-07T13:05:44Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java", "diffHunk": "@@ -429,9 +430,12 @@ private ZooKeeperHiveLock lockPrimitive(HiveLockObject key,\n       if (child.startsWith(exLock)) {\n         childSeq = getSequenceNumber(child, exLock);\n       }\n-      if ((mode == HiveLockMode.EXCLUSIVE) && child.startsWith(shLock)) {\n+      if ((mode == HiveLockMode.EXCLUSIVE) && (child.startsWith(shLock))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjYzNzk3OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxODoxMVrOIPsC4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNzowNDoyM1rOIUkl1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTE4NQ==", "bodyText": "i think, it doesn't have to be static", "url": "https://github.com/apache/hive/pull/1724#discussion_r553321185", "createdAt": "2021-01-07T13:18:11Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -281,6 +279,7 @@ public static boolean isRenameAllowed(Database srcDB, Database destDB) {\n     static AtomicInteger databaseCount, tableCount, partCount;\n \n     private Warehouse wh; // hdfs warehouse\n+    private static Striped<Lock> tablelocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyNjMyNQ==", "bodyText": "this field must be static - if it's not; then it could not impose exclusiveness.\nnote that this field is initialized alongside with the threadPool field", "url": "https://github.com/apache/hive/pull/1724#discussion_r557426325", "createdAt": "2021-01-14T14:17:52Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -281,6 +279,7 @@ public static boolean isRenameAllowed(Database srcDB, Database destDB) {\n     static AtomicInteger databaseCount, tableCount, partCount;\n \n     private Warehouse wh; // hdfs warehouse\n+    private static Striped<Lock> tablelocks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTE4NQ=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ0MTk0MA==", "bodyText": "oh, sorry, i missed that synchronization is done on class level not instance.\nNote: there is a bug in synchronization, double checked locking should be used here or if check (threadPool == null) should be moved inside the critical section.", "url": "https://github.com/apache/hive/pull/1724#discussion_r558441940", "createdAt": "2021-01-15T17:04:23Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -281,6 +279,7 @@ public static boolean isRenameAllowed(Database srcDB, Database destDB) {\n     static AtomicInteger databaseCount, tableCount, partCount;\n \n     private Warehouse wh; // hdfs warehouse\n+    private static Striped<Lock> tablelocks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTE4NQ=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjY0MjA4OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxOTozMlrOIPsFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoxOTo0NVrOITmr3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTgyMQ==", "bodyText": "unnecessary brackets", "url": "https://github.com/apache/hive/pull/1724#discussion_r553321821", "createdAt": "2021-01-07T13:19:32Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -3461,7 +3474,7 @@ private Table getTableInternal(String catName, String dbname, String name,\n               LOG.warn(\"Unexpected resultset size:\" + ret.size());\n               throw new MetaException(\"Unexpected result from metadata transformer:return list size is \" + ret.size());\n             }\n-            t = (Table)(ret.keySet().iterator().next());\n+            t = (ret.keySet().iterator().next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyNzY3OA==", "bodyText": "yeah..someone should teach that trick to my save-action :D", "url": "https://github.com/apache/hive/pull/1724#discussion_r557427678", "createdAt": "2021-01-14T14:19:45Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -3461,7 +3474,7 @@ private Table getTableInternal(String catName, String dbname, String name,\n               LOG.warn(\"Unexpected resultset size:\" + ret.size());\n               throw new MetaException(\"Unexpected result from metadata transformer:return list size is \" + ret.size());\n             }\n-            t = (Table)(ret.keySet().iterator().next());\n+            t = (ret.keySet().iterator().next());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTgyMQ=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjY1OTI1OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoyNDo0MVrOIPsPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoyNToyNVrOITm61g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyNDQyOQ==", "bodyText": "could we call unlock here, before even propagation?", "url": "https://github.com/apache/hive/pull/1724#discussion_r553324429", "createdAt": "2021-01-07T13:24:41Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -4355,17 +4376,20 @@ private int add_partitions_pspec_core(RawStore ms, String catName, String dbName\n         success = ms.commitTransaction();\n         return addedPartitions.size();\n       } finally {\n-        if (!success) {\n-          ms.rollbackTransaction();\n-          cleanupPartitionFolders(addedPartitions, db);\n-        }\n-\n-        if (!listeners.isEmpty()) {\n-          MetaStoreListenerNotifier.notifyEvent(listeners,\n-                                                EventType.ADD_PARTITION,\n-                                                new AddPartitionEvent(tbl, partitionSpecProxy, true, this),\n-                                                null,\n-                                                transactionalListenerResponses, ms);\n+        try {\n+          if (!success) {\n+            ms.rollbackTransaction();\n+            cleanupPartitionFolders(addedPartitions, db);\n+          }\n+          if (!listeners.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQzMTUxMA==", "bodyText": "these locks will only engage in case the same table is touched; I think its safer to also keep this inside the lock", "url": "https://github.com/apache/hive/pull/1724#discussion_r557431510", "createdAt": "2021-01-14T14:25:25Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -4355,17 +4376,20 @@ private int add_partitions_pspec_core(RawStore ms, String catName, String dbName\n         success = ms.commitTransaction();\n         return addedPartitions.size();\n       } finally {\n-        if (!success) {\n-          ms.rollbackTransaction();\n-          cleanupPartitionFolders(addedPartitions, db);\n-        }\n-\n-        if (!listeners.isEmpty()) {\n-          MetaStoreListenerNotifier.notifyEvent(listeners,\n-                                                EventType.ADD_PARTITION,\n-                                                new AddPartitionEvent(tbl, partitionSpecProxy, true, this),\n-                                                null,\n-                                                transactionalListenerResponses, ms);\n+        try {\n+          if (!success) {\n+            ms.rollbackTransaction();\n+            cleanupPartitionFolders(addedPartitions, db);\n+          }\n+          if (!listeners.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyNDQyOQ=="}, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 195}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 116, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}