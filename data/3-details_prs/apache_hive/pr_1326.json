{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDQ4MTk3", "number": 1326, "title": "HIVE-23941: Refactor TypeCheckProcFactory to be database agnostic", "bodyText": "Part of the code has already been refactored to become database agnostic\n(i.e. HiveFunctionHelper).\nFurther refactoring needs to be done on TypeCheckProcFactory which also\nshould be database agnostic.\nThe most interesting part of this code change involved the addition of\nHiveFunctionInfo.  Previous to this commit, a query specific GenericUDF was\ncloned out of the FunctionRegistry every time that the FunctionInfo.getGenericUDF()\nwas called. With this commit, a new query specific FunctionInfo (HiveFunctionInfo)\nis created with the cloned GenericUDF.\nNOTICE\nPlease create an issue in ASF JIRA before opening a pull request,\nand you need to set the title of the pull request which starts with\nthe corresponding JIRA issue number. (e.g. HIVE-XXXXX: Fix a typo in YYY)\nFor more details, please see https://cwiki.apache.org/confluence/display/Hive/HowToContribute", "createdAt": "2020-07-27T23:10:17Z", "url": "https://github.com/apache/hive/pull/1326", "merged": true, "mergeCommit": {"oid": "d1e1992182d8c0f3f2f0f101087e79e1dade4843"}, "closed": true, "closedAt": "2020-08-03T19:41:08Z", "author": {"login": "scarlin-cloudera"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6Jvi3AFqTQ1ODUyMzI1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7XU7CgFqTQ2MDI5MDYxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTIzMjU4", "url": "https://github.com/apache/hive/pull/1326#pullrequestreview-458523258", "createdAt": "2020-07-30T15:38:48Z", "commit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTozODo0OFrOG5orYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMToxMDoxMlrOG543dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4ODQ4MQ==", "bodyText": "Can we remove this file? :)", "url": "https://github.com/apache/hive/pull/1326#discussion_r463088481", "createdAt": "2020-07-30T15:38:48Z", "author": {"login": "jcamachor"}, "path": "4cf072b.diff", "diffHunk": "@@ -0,0 +1,975 @@\n+From 4cf072b81a591c4ab31a11c959149edb3d82d569 Mon Sep 17 00:00:00 2001", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA5MDMzNw==", "bodyText": "FunctionInfo implementation for Hive. ?", "url": "https://github.com/apache/hive/pull/1326#discussion_r463090337", "createdAt": "2020-07-30T15:41:22Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/HiveFunctionInfo.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.exec;\n+\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDTF;\n+import org.apache.hadoop.hive.ql.udf.ptf.TableFunctionResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * HiveFunctionInfo.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MjMzMg==", "bodyText": "Would you mind to add a short comment to all these methods, even if may seem obvious for some of them?", "url": "https://github.com/apache/hive/pull/1326#discussion_r463352332", "createdAt": "2020-07-31T01:04:40Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/FunctionHelper.java", "diffHunk": "@@ -82,6 +82,20 @@ default RexNode foldExpression(RexNode expr) {\n     return expr;\n   }\n \n+  boolean isAndFunction(FunctionInfo fi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1Mjg3OA==", "bodyText": "This TODO? Is there a follow-up?", "url": "https://github.com/apache/hive/pull/1326#discussion_r463352878", "createdAt": "2020-07-31T01:06:53Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/HiveFunctionHelper.java", "diffHunk": "@@ -545,4 +551,67 @@ public RexNode foldExpression(RexNode expr) {\n     return result.get(0);\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isAndFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFOPAnd;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isOrFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFOPOr;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isInFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFIn;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isCompareFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFBaseCompare;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isEqualFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFOPEqual\n+        && !(fi.getGenericUDF() instanceof GenericUDFOPEqualNS);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isConsistentWithinQuery(FunctionInfo fi) {\n+    //TODO: don't getGenericUDF\n+    return FunctionRegistry.isConsistentWithinQuery(fi.getGenericUDF());\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isStateful(FunctionInfo fi) {\n+    //TODO: don't getGenericUDF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1Mjg5MQ==", "bodyText": "This TODO? Is there a follow-up?", "url": "https://github.com/apache/hive/pull/1326#discussion_r463352891", "createdAt": "2020-07-31T01:06:57Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/HiveFunctionHelper.java", "diffHunk": "@@ -545,4 +551,67 @@ public RexNode foldExpression(RexNode expr) {\n     return result.get(0);\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isAndFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFOPAnd;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isOrFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFOPOr;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isInFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFIn;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isCompareFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFBaseCompare;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isEqualFunction(FunctionInfo fi) {\n+    return fi.getGenericUDF() instanceof GenericUDFOPEqual\n+        && !(fi.getGenericUDF() instanceof GenericUDFOPEqualNS);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isConsistentWithinQuery(FunctionInfo fi) {\n+    //TODO: don't getGenericUDF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MzQzMg==", "bodyText": "nit. whitespace (there are a few below too)", "url": "https://github.com/apache/hive/pull/1326#discussion_r463353432", "createdAt": "2020-07-31T01:09:11Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java", "diffHunk": "@@ -868,17 +849,15 @@ protected T getXpathOrFuncExprNodeDesc(ASTNode node,\n       String funcText = getFunctionText(node, isFunction);\n       T expr;\n       if (funcText.equals(\".\")) {\n-        // \".\" : FIELD Expression\n-\n         assert (children.size() == 2);\n         // Only allow constant field name for now\n         assert (exprFactory.isConstantExpr(children.get(1)));\n         T object = children.get(0);\n-\n+       ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MzU4Mw==", "bodyText": "nit. indentation", "url": "https://github.com/apache/hive/pull/1326#discussion_r463353583", "createdAt": "2020-07-31T01:09:43Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java", "diffHunk": "@@ -1018,15 +958,19 @@ protected T getXpathOrFuncExprNodeDesc(ASTNode node,\n           if (newChild == null) {\n             // non-interpretable as target type...\n             // TODO: all comparisons with null should result in null\n-            if (genericUDF instanceof GenericUDFOPEqual\n-                && !(genericUDF instanceof GenericUDFOPEqualNS)) {\n+            if (exprFactory.isEqualFunction(fi)) {\n               return exprFactory.createBooleanConstantExpr(null);\n             }\n           } else {\n             children.set(constIdx, newChild);\n           }\n         }\n-        if (genericUDF instanceof GenericUDFIn) {\n+\t// The \"in\" function is sometimes changed to an \"or\".  Later on, the \"or\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MzcxOA==", "bodyText": "nit. indentation off here too", "url": "https://github.com/apache/hive/pull/1326#discussion_r463353718", "createdAt": "2020-07-31T01:10:12Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java", "diffHunk": "@@ -1063,19 +1007,20 @@ protected T getXpathOrFuncExprNodeDesc(ASTNode node,\n           if (numEntries == 1) {\n             children.addAll(expressions.asMap().values().iterator().next());\n             funcText = \"in\";\n-            genericUDF = new GenericUDFIn();\n+            fi = exprFactory.getFunctionInfo(\"in\");\n           } else {\n+            FunctionInfo inFunctionInfo  = exprFactory.getFunctionInfo(\"in\");\n             for (Collection<T> c : expressions.asMap().values()) {\n-              newExprs.add(\n-                  exprFactory.createFuncCallExpr(\n-                      new GenericUDFIn(), \"in\", (List<T>) c));\n+              newExprs.add(exprFactory.createFuncCallExpr(null, inFunctionInfo,\n+\t          \"in\", (List<T>) c));\n             }\n             children.addAll(newExprs);\n             funcText = \"or\";\n-            genericUDF = new GenericUDFOPOr();\n+            fi = exprFactory.getFunctionInfo(\"or\");\n+\t    functionInfoChangedFromIn = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4"}, "originalPosition": 276}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aaf931dc8e61734b6b7853f206ec432cc8989d4", "author": {"user": {"login": "scarlin-cloudera", "name": null}}, "url": "https://github.com/apache/hive/commit/7aaf931dc8e61734b6b7853f206ec432cc8989d4", "committedDate": "2020-07-27T23:04:11Z", "message": "HIVE-23941: Refactor TypeCheckProcFactory to be database agnostic\n\nPart of the code has already been refactored to become database agnostic\n(i.e. HiveFunctionHelper).\n\nFurther refactoring needs to be done on TypeCheckProcFactory which also\nshould be database agnostic.\n\nThe most interesting part of this code change involved the addition of\nHiveFunctionInfo.  Previous to this commit, a query specific GenericUDF was\ncloned out of the FunctionRegistry every time that the FunctionInfo.getGenericUDF()\nwas called. With this commit, a new query specific FunctionInfo (HiveFunctionInfo)\nis created with the cloned GenericUDF."}, "afterCommit": {"oid": "ae1c3a544093765dd0d8f5b4c4086caa9e5ccf5f", "author": {"user": {"login": "scarlin-cloudera", "name": null}}, "url": "https://github.com/apache/hive/commit/ae1c3a544093765dd0d8f5b4c4086caa9e5ccf5f", "committedDate": "2020-07-31T16:27:53Z", "message": "HIVE-23941: Refactor TypeCheckProcFactory to be database agnostic\n\nPart of the code has already been refactored to become database agnostic\n(i.e. HiveFunctionHelper).\n\nFurther refactoring needs to be done on TypeCheckProcFactory which also\nshould be database agnostic.\n\nThe most interesting part of this code change involved the addition of\nHiveFunctionInfo.  Previous to this commit, a query specific GenericUDF was\ncloned out of the FunctionRegistry every time that the FunctionInfo.getGenericUDF()\nwas called. With this commit, a new query specific FunctionInfo (HiveFunctionInfo)\nis created with the cloned GenericUDF."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b215d1f4bf38421f31da0de1bfae15239f01bb38", "author": {"user": {"login": "scarlin-cloudera", "name": null}}, "url": "https://github.com/apache/hive/commit/b215d1f4bf38421f31da0de1bfae15239f01bb38", "committedDate": "2020-08-03T14:33:36Z", "message": "HIVE-23941: Refactor TypeCheckProcFactory to be database agnostic\n\nPart of the code has already been refactored to become database agnostic\n(i.e. HiveFunctionHelper).\n\nFurther refactoring needs to be done on TypeCheckProcFactory which also\nshould be database agnostic.\n\nThe most interesting part of this code change involved the addition of\nHiveFunctionInfo.  Previous to this commit, a query specific GenericUDF was\ncloned out of the FunctionRegistry every time that the FunctionInfo.getGenericUDF()\nwas called. With this commit, a new query specific FunctionInfo (HiveFunctionInfo)\nis created with the cloned GenericUDF."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae1c3a544093765dd0d8f5b4c4086caa9e5ccf5f", "author": {"user": {"login": "scarlin-cloudera", "name": null}}, "url": "https://github.com/apache/hive/commit/ae1c3a544093765dd0d8f5b4c4086caa9e5ccf5f", "committedDate": "2020-07-31T16:27:53Z", "message": "HIVE-23941: Refactor TypeCheckProcFactory to be database agnostic\n\nPart of the code has already been refactored to become database agnostic\n(i.e. HiveFunctionHelper).\n\nFurther refactoring needs to be done on TypeCheckProcFactory which also\nshould be database agnostic.\n\nThe most interesting part of this code change involved the addition of\nHiveFunctionInfo.  Previous to this commit, a query specific GenericUDF was\ncloned out of the FunctionRegistry every time that the FunctionInfo.getGenericUDF()\nwas called. With this commit, a new query specific FunctionInfo (HiveFunctionInfo)\nis created with the cloned GenericUDF."}, "afterCommit": {"oid": "b215d1f4bf38421f31da0de1bfae15239f01bb38", "author": {"user": {"login": "scarlin-cloudera", "name": null}}, "url": "https://github.com/apache/hive/commit/b215d1f4bf38421f31da0de1bfae15239f01bb38", "committedDate": "2020-08-03T14:33:36Z", "message": "HIVE-23941: Refactor TypeCheckProcFactory to be database agnostic\n\nPart of the code has already been refactored to become database agnostic\n(i.e. HiveFunctionHelper).\n\nFurther refactoring needs to be done on TypeCheckProcFactory which also\nshould be database agnostic.\n\nThe most interesting part of this code change involved the addition of\nHiveFunctionInfo.  Previous to this commit, a query specific GenericUDF was\ncloned out of the FunctionRegistry every time that the FunctionInfo.getGenericUDF()\nwas called. With this commit, a new query specific FunctionInfo (HiveFunctionInfo)\nis created with the cloned GenericUDF."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjkwNjE3", "url": "https://github.com/apache/hive/pull/1326#pullrequestreview-460290617", "createdAt": "2020-08-03T19:38:18Z", "commit": {"oid": "b215d1f4bf38421f31da0de1bfae15239f01bb38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3361, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}