{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMTYxNjA5", "number": 1263, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyMzoyNVrOEQigWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTozMTowM1rOEQxCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzc4MDA4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyMzoyNVrOG0vnVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo1NDowNlrOG1ZK1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1OTI1Mw==", "bodyText": "nit: space", "url": "https://github.com/apache/hive/pull/1263#discussion_r457959253", "createdAt": "2020-07-21T09:23:25Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "diffHunk": "@@ -12566,38 +12565,44 @@ void analyzeInternal(ASTNode ast, Supplier<PlannerContext> pcf) throws SemanticE\n       createVwDesc.setTablesUsed(getTablesUsed(pCtx));\n     }\n \n-    // 6. Generate table access stats if required\n-    if (HiveConf.getBoolVar(this.conf, HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS)) {\n-      TableAccessAnalyzer tableAccessAnalyzer = new TableAccessAnalyzer(pCtx);\n-      setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());\n-    }\n+    //If we're creating views and ColumnAccessInfo is already created, we should not run these.\n+    if(!forViewCreation ||  getColumnAccessInfo() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f554137b9220b3943b2e7be0b975e0bf1b54a02"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0MDA4NQ==", "bodyText": "thanks @pvary", "url": "https://github.com/apache/hive/pull/1263#discussion_r458640085", "createdAt": "2020-07-22T08:54:06Z", "author": {"login": "bmaidics"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "diffHunk": "@@ -12566,38 +12565,44 @@ void analyzeInternal(ASTNode ast, Supplier<PlannerContext> pcf) throws SemanticE\n       createVwDesc.setTablesUsed(getTablesUsed(pCtx));\n     }\n \n-    // 6. Generate table access stats if required\n-    if (HiveConf.getBoolVar(this.conf, HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS)) {\n-      TableAccessAnalyzer tableAccessAnalyzer = new TableAccessAnalyzer(pCtx);\n-      setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());\n-    }\n+    //If we're creating views and ColumnAccessInfo is already created, we should not run these.\n+    if(!forViewCreation ||  getColumnAccessInfo() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1OTI1Mw=="}, "originalCommit": {"oid": "9f554137b9220b3943b2e7be0b975e0bf1b54a02"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDE0NjY5OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToyNjozM1rOG1Gldg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxNzo1M1rOG1fyKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNTYwNg==", "bodyText": "Can we add information to the comment above about why we are skipping those specific steps 6-8?", "url": "https://github.com/apache/hive/pull/1263#discussion_r458335606", "createdAt": "2020-07-21T19:26:33Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "diffHunk": "@@ -12566,38 +12565,44 @@ void analyzeInternal(ASTNode ast, Supplier<PlannerContext> pcf) throws SemanticE\n       createVwDesc.setTablesUsed(getTablesUsed(pCtx));\n     }\n \n-    // 6. Generate table access stats if required\n-    if (HiveConf.getBoolVar(this.conf, HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS)) {\n-      TableAccessAnalyzer tableAccessAnalyzer = new TableAccessAnalyzer(pCtx);\n-      setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());\n-    }\n+    //If we're creating views and ColumnAccessInfo is already created, we should not run these.\n+    if(!forViewCreation ||  getColumnAccessInfo() == null) {\n+      // 6. Generate table access stats if required\n+      if (HiveConf.getBoolVar(this.conf, HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS)) {\n+        TableAccessAnalyzer tableAccessAnalyzer = new TableAccessAnalyzer(pCtx);\n+        setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());\n+      }\n+      AuxOpTreeSignature.linkAuxSignatures(pCtx);\n+      // 7. Perform Logical optimization\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Before logical optimization\\n\" + Operator.toString(pCtx.getTopOps().values()));\n+      }\n+      Optimizer optm = new Optimizer();\n+      optm.setPctx(pCtx);\n+      optm.initialize(conf);\n+      pCtx = optm.optimize();\n+      if (pCtx.getColumnAccessInfo() != null) {\n+        // set ColumnAccessInfo for view column authorization\n+        setColumnAccessInfo(pCtx.getColumnAccessInfo());\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"After logical optimization\\n\" + Operator.toString(pCtx.getTopOps().values()));\n+      }\n \n-    AuxOpTreeSignature.linkAuxSignatures(pCtx);\n-    // 7. Perform Logical optimization\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Before logical optimization\\n\" + Operator.toString(pCtx.getTopOps().values()));\n-    }\n-    Optimizer optm = new Optimizer();\n-    optm.setPctx(pCtx);\n-    optm.initialize(conf);\n-    pCtx = optm.optimize();\n-    if (pCtx.getColumnAccessInfo() != null) {\n-      // set ColumnAccessInfo for view column authorization\n-      setColumnAccessInfo(pCtx.getColumnAccessInfo());\n+      // 8. Generate column access stats if required - wait until column pruning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f554137b9220b3943b2e7be0b975e0bf1b54a02"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0ODQ1Nw==", "bodyText": "Thanks, @jcamachor . Added a more specific comment.", "url": "https://github.com/apache/hive/pull/1263#discussion_r458748457", "createdAt": "2020-07-22T12:17:53Z", "author": {"login": "bmaidics"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "diffHunk": "@@ -12566,38 +12565,44 @@ void analyzeInternal(ASTNode ast, Supplier<PlannerContext> pcf) throws SemanticE\n       createVwDesc.setTablesUsed(getTablesUsed(pCtx));\n     }\n \n-    // 6. Generate table access stats if required\n-    if (HiveConf.getBoolVar(this.conf, HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS)) {\n-      TableAccessAnalyzer tableAccessAnalyzer = new TableAccessAnalyzer(pCtx);\n-      setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());\n-    }\n+    //If we're creating views and ColumnAccessInfo is already created, we should not run these.\n+    if(!forViewCreation ||  getColumnAccessInfo() == null) {\n+      // 6. Generate table access stats if required\n+      if (HiveConf.getBoolVar(this.conf, HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS)) {\n+        TableAccessAnalyzer tableAccessAnalyzer = new TableAccessAnalyzer(pCtx);\n+        setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());\n+      }\n+      AuxOpTreeSignature.linkAuxSignatures(pCtx);\n+      // 7. Perform Logical optimization\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Before logical optimization\\n\" + Operator.toString(pCtx.getTopOps().values()));\n+      }\n+      Optimizer optm = new Optimizer();\n+      optm.setPctx(pCtx);\n+      optm.initialize(conf);\n+      pCtx = optm.optimize();\n+      if (pCtx.getColumnAccessInfo() != null) {\n+        // set ColumnAccessInfo for view column authorization\n+        setColumnAccessInfo(pCtx.getColumnAccessInfo());\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"After logical optimization\\n\" + Operator.toString(pCtx.getTopOps().values()));\n+      }\n \n-    AuxOpTreeSignature.linkAuxSignatures(pCtx);\n-    // 7. Perform Logical optimization\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Before logical optimization\\n\" + Operator.toString(pCtx.getTopOps().values()));\n-    }\n-    Optimizer optm = new Optimizer();\n-    optm.setPctx(pCtx);\n-    optm.initialize(conf);\n-    pCtx = optm.optimize();\n-    if (pCtx.getColumnAccessInfo() != null) {\n-      // set ColumnAccessInfo for view column authorization\n-      setColumnAccessInfo(pCtx.getColumnAccessInfo());\n+      // 8. Generate column access stats if required - wait until column pruning", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNTYwNg=="}, "originalCommit": {"oid": "9f554137b9220b3943b2e7be0b975e0bf1b54a02"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDE2MDk3OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/ppd_deterministic_expr.q.out", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTozMTowM1rOG1GuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo1OTozMVrOG1ZYJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNzk1Mw==", "bodyText": "This is a CREATE VIEW. Why are partitions that are not accessed part of the entities accessed? This should not have changed? This happens in all these different tests so the root cause should be the same.", "url": "https://github.com/apache/hive/pull/1263#discussion_r458337953", "createdAt": "2020-07-21T19:31:03Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/ppd_deterministic_expr.q.out", "diffHunk": "@@ -198,6 +198,9 @@ PREHOOK: query: create view viewDeterministicUDFA partitioned on (vpart1, vpart2\n where part1 in ('US', 'CA')\n PREHOOK: type: CREATEVIEW\n PREHOOK: Input: default@testa\n+PREHOOK: Input: default@testa@part1=CA/part2=ABC/part3=300", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f554137b9220b3943b2e7be0b975e0bf1b54a02"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0MzQ5Mg==", "bodyText": "@jcamachor , I think this behavior is expected. Since in this test, CBO is disabled, ColumnAccessInfo will be null, so on view creation, we'll run step 6-8 after my change. Step 7 is the optimizer, and it runs SimpleFetchOptimizer, which will add these partitions to read from them. Is this answers your concern, or maybe I misunderstood your question?", "url": "https://github.com/apache/hive/pull/1263#discussion_r458643492", "createdAt": "2020-07-22T08:59:31Z", "author": {"login": "bmaidics"}, "path": "ql/src/test/results/clientpositive/llap/ppd_deterministic_expr.q.out", "diffHunk": "@@ -198,6 +198,9 @@ PREHOOK: query: create view viewDeterministicUDFA partitioned on (vpart1, vpart2\n where part1 in ('US', 'CA')\n PREHOOK: type: CREATEVIEW\n PREHOOK: Input: default@testa\n+PREHOOK: Input: default@testa@part1=CA/part2=ABC/part3=300", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNzk1Mw=="}, "originalCommit": {"oid": "9f554137b9220b3943b2e7be0b975e0bf1b54a02"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 587, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}