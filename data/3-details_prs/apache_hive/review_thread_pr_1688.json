{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNDQxODUw", "number": 1688, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1NDowMVrOE9Jd1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo1ODoxMlrOE9LIXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTUzNjg1OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1NDowMVrOH5rb6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDoxMjoxN1rOH-Q3VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0MjUzNg==", "bodyText": "That's not a test class. Production code becomes massive because of that.", "url": "https://github.com/apache/hive/pull/1688#discussion_r530242536", "createdAt": "2020-11-25T09:54:01Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "diffHunk": "@@ -385,6 +391,26 @@ public static String queryToString(Configuration conf, String query, boolean inc\n     return sb.toString();\n   }\n \n+  /**\n+   * This is only for testing, it does not use the connectionPool from TxnHandler!\n+   * @param conf\n+   * @param query\n+   * @throws Exception\n+   */\n+  @VisibleForTesting\n+  public static void executeUpdate(Configuration conf, String query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NzE1MA==", "bodyText": "Well, this class is a test utility.\n/**\n\nUtility methods for creating and destroying txn database/schema, plus methods for\nquerying against metastore tables.\nPlaced here in a separate class so it can be shared across unit tests.\n*/\npublic final class TxnDbUtil\n\nThe problem is more like getEpochFn and executeQueriesInBatchNoCount was added to this class, those are production code. I know it would be nicer if it would be in a test package, but then it would be harder to use in 5 different projects", "url": "https://github.com/apache/hive/pull/1688#discussion_r534357150", "createdAt": "2020-12-02T17:39:18Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "diffHunk": "@@ -385,6 +391,26 @@ public static String queryToString(Configuration conf, String query, boolean inc\n     return sb.toString();\n   }\n \n+  /**\n+   * This is only for testing, it does not use the connectionPool from TxnHandler!\n+   * @param conf\n+   * @param query\n+   * @throws Exception\n+   */\n+  @VisibleForTesting\n+  public static void executeUpdate(Configuration conf, String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0MjUzNg=="}, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM2NjU0MQ==", "bodyText": "in this case we should consider refactoring this class", "url": "https://github.com/apache/hive/pull/1688#discussion_r534366541", "createdAt": "2020-12-02T17:53:20Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "diffHunk": "@@ -385,6 +391,26 @@ public static String queryToString(Configuration conf, String query, boolean inc\n     return sb.toString();\n   }\n \n+  /**\n+   * This is only for testing, it does not use the connectionPool from TxnHandler!\n+   * @param conf\n+   * @param query\n+   * @throws Exception\n+   */\n+  @VisibleForTesting\n+  public static void executeUpdate(Configuration conf, String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0MjUzNg=="}, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA1MDA2OA==", "bodyText": "Created a Jira for that: https://issues.apache.org/jira/browse/HIVE-24477", "url": "https://github.com/apache/hive/pull/1688#discussion_r535050068", "createdAt": "2020-12-03T10:12:17Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "diffHunk": "@@ -385,6 +391,26 @@ public static String queryToString(Configuration conf, String query, boolean inc\n     return sb.toString();\n   }\n \n+  /**\n+   * This is only for testing, it does not use the connectionPool from TxnHandler!\n+   * @param conf\n+   * @param query\n+   * @throws Exception\n+   */\n+  @VisibleForTesting\n+  public static void executeUpdate(Configuration conf, String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0MjUzNg=="}, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU2ODczOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowMDo1NVrOH5rvPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozOTo1NVrOH9mmPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NzQ4NA==", "bodyText": "you can just select 1", "url": "https://github.com/apache/hive/pull/1688#discussion_r530247484", "createdAt": "2020-11-25T10:00:55Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -390,6 +404,42 @@ public void setConf(Configuration conf){\n     }\n   }\n \n+  /**\n+   * Check if min_history_level table is usable\n+   * @return\n+   * @throws MetaException\n+   */\n+  private boolean checkMinHistoryLevelTable(boolean configValue) throws MetaException {\n+    if (!configValue) {\n+      // don't check it if disabled\n+      return false;\n+    }\n+    Connection dbConn = null;\n+    boolean tableExists = true;\n+    try {\n+      dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+      try (Statement stmt = dbConn.createStatement()) {\n+        // Dummy query to see if table exists\n+        try (ResultSet rs = stmt.executeQuery(\"SELECT MIN(\\\"MHL_MIN_OPEN_TXNID\\\") FROM \\\"MIN_HISTORY_LEVEL\\\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NzU2Nw==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1688#discussion_r534357567", "createdAt": "2020-12-02T17:39:55Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -390,6 +404,42 @@ public void setConf(Configuration conf){\n     }\n   }\n \n+  /**\n+   * Check if min_history_level table is usable\n+   * @return\n+   * @throws MetaException\n+   */\n+  private boolean checkMinHistoryLevelTable(boolean configValue) throws MetaException {\n+    if (!configValue) {\n+      // don't check it if disabled\n+      return false;\n+    }\n+    Connection dbConn = null;\n+    boolean tableExists = true;\n+    try {\n+      dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+      try (Statement stmt = dbConn.createStatement()) {\n+        // Dummy query to see if table exists\n+        try (ResultSet rs = stmt.executeQuery(\"SELECT MIN(\\\"MHL_MIN_OPEN_TXNID\\\") FROM \\\"MIN_HISTORY_LEVEL\\\"\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NzQ4NA=="}, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU4ODM0OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNTozMFrOH5r7Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo1MTo1OVrOH9nGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MDU5NA==", "bodyText": "why not to embed getMinOpenTxnIdWaterMark(dbConn) inside of addTxnToMinHistoryLevel and remove above minOpenTxnId block?", "url": "https://github.com/apache/hive/pull/1688#discussion_r530250594", "createdAt": "2020-11-25T10:05:30Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -670,6 +725,8 @@ public OpenTxnsResponse openTxns(OpenTxnRequest rqst) throws MetaException {\n \n       assert txnIds.size() == numTxns;\n \n+      addTxnToMinHistoryLevel(dbConn, txnIds, minOpenTxnId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM2NTcxNA==", "bodyText": "That was my first intent, but it resulted in lock timeout, after inserting the new records in the txns table, the min open select was not running", "url": "https://github.com/apache/hive/pull/1688#discussion_r534365714", "createdAt": "2020-12-02T17:51:59Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -670,6 +725,8 @@ public OpenTxnsResponse openTxns(OpenTxnRequest rqst) throws MetaException {\n \n       assert txnIds.size() == numTxns;\n \n+      addTxnToMinHistoryLevel(dbConn, txnIds, minOpenTxnId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MDU5NA=="}, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTYwODYxOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxMDoxN1rOH5sHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxOToyNFrOH9oLGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MzcwOA==", "bodyText": "Are you covering the case that schema change doesn't force any restart? Lot's of code duplication, can you wrap needed methods with aspect?", "url": "https://github.com/apache/hive/pull/1688#discussion_r530253708", "createdAt": "2020-11-25T10:10:17Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5094,6 +5153,99 @@ public void countOpenTxns() throws MetaException {\n     }\n   }\n \n+  /**\n+   * Add min history level entry for each generated txn record\n+   * @param dbConn Connection\n+   * @param txnIds new transaction ids\n+   * @deprecated Remove this method when min_history_level table is dropped\n+   * @throws SQLException ex\n+   */\n+  @Deprecated\n+  private void addTxnToMinHistoryLevel(Connection dbConn, List<Long> txnIds, long minOpenTxnId) throws SQLException {\n+    if (!useMinHistoryLevel) {\n+      return;\n+    }\n+    // Need to register minimum open txnid for current transactions into MIN_HISTORY table.\n+    try (Statement stmt = dbConn.createStatement()) {\n+\n+      List<String> rows = txnIds.stream().map(txnId -> txnId + \", \" + minOpenTxnId).collect(Collectors.toList());\n+\n+      // Insert transaction entries into MIN_HISTORY_LEVEL.\n+      List<String> inserts =\n+          sqlGenerator.createInsertValuesStmt(\"\\\"MIN_HISTORY_LEVEL\\\" (\\\"MHL_TXNID\\\", \\\"MHL_MIN_OPEN_TXNID\\\")\", rows);\n+      for (String insert : inserts) {\n+        LOG.debug(\"Going to execute insert <\" + insert + \">\");\n+        stmt.execute(insert);\n+      }\n+      LOG.info(\"Added entries to MIN_HISTORY_LEVEL for current txns: (\" + txnIds + \") with min_open_txn: \" + minOpenTxnId);\n+    } catch (SQLException e) {\n+      if (dbProduct.isTableNotExists(e)) {\n+        // If the table does not exists anymore, we disable the flag and start to work the new way\n+        // This enables to switch to the new functionality without a restart\n+        useMinHistoryLevel = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4MzM4NA==", "bodyText": "The idea is multiple HMS is using the same backend db, you upgrade them one by one, the last one changes the schema, all the others change to the new functionality, after the first call to min_history table. Do you have any practical example of wrapping them in aspect, I do not want to much more code complexity just to avoid checking an exception in four places.", "url": "https://github.com/apache/hive/pull/1688#discussion_r534383384", "createdAt": "2020-12-02T18:19:24Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5094,6 +5153,99 @@ public void countOpenTxns() throws MetaException {\n     }\n   }\n \n+  /**\n+   * Add min history level entry for each generated txn record\n+   * @param dbConn Connection\n+   * @param txnIds new transaction ids\n+   * @deprecated Remove this method when min_history_level table is dropped\n+   * @throws SQLException ex\n+   */\n+  @Deprecated\n+  private void addTxnToMinHistoryLevel(Connection dbConn, List<Long> txnIds, long minOpenTxnId) throws SQLException {\n+    if (!useMinHistoryLevel) {\n+      return;\n+    }\n+    // Need to register minimum open txnid for current transactions into MIN_HISTORY table.\n+    try (Statement stmt = dbConn.createStatement()) {\n+\n+      List<String> rows = txnIds.stream().map(txnId -> txnId + \", \" + minOpenTxnId).collect(Collectors.toList());\n+\n+      // Insert transaction entries into MIN_HISTORY_LEVEL.\n+      List<String> inserts =\n+          sqlGenerator.createInsertValuesStmt(\"\\\"MIN_HISTORY_LEVEL\\\" (\\\"MHL_TXNID\\\", \\\"MHL_MIN_OPEN_TXNID\\\")\", rows);\n+      for (String insert : inserts) {\n+        LOG.debug(\"Going to execute insert <\" + insert + \">\");\n+        stmt.execute(insert);\n+      }\n+      LOG.info(\"Added entries to MIN_HISTORY_LEVEL for current txns: (\" + txnIds + \") with min_open_txn: \" + minOpenTxnId);\n+    } catch (SQLException e) {\n+      if (dbProduct.isTableNotExists(e)) {\n+        // If the table does not exists anymore, we disable the flag and start to work the new way\n+        // This enables to switch to the new functionality without a restart\n+        useMinHistoryLevel = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MzcwOA=="}, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTgwOTU4OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/DatabaseProduct.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo1ODoxMlrOH5t_zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyMjowMlrOH9oR0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NDQ5NQ==", "bodyText": "maybe rename to isTableNotExistsError", "url": "https://github.com/apache/hive/pull/1688#discussion_r530284495", "createdAt": "2020-11-25T10:58:12Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/DatabaseProduct.java", "diffHunk": "@@ -186,6 +186,19 @@ public boolean isDeadlock(SQLException e) {\n             || e.getMessage().contains(\"can't serialize access for this transaction\"))));\n   }\n \n+  /**\n+   * Is the given exception a table not found exception\n+   * @param e Exception\n+   * @return\n+   */\n+  public boolean isTableNotExists(SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NTEwNA==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1688#discussion_r534385104", "createdAt": "2020-12-02T18:22:02Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/DatabaseProduct.java", "diffHunk": "@@ -186,6 +186,19 @@ public boolean isDeadlock(SQLException e) {\n             || e.getMessage().contains(\"can't serialize access for this transaction\"))));\n   }\n \n+  /**\n+   * Is the given exception a table not found exception\n+   * @param e Exception\n+   * @return\n+   */\n+  public boolean isTableNotExists(SQLException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NDQ5NQ=="}, "originalCommit": {"oid": "1220f0210ee0b669728e8976b8e2f8293463b5ea"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 256, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}