{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjE5NjEz", "number": 1391, "title": "Spark client can create/alter/drop a view", "bodyText": "What changes were proposed in this pull request?\nApart from super users, normal users can create/alter/drop views via HMS\n\nWhy are the changes needed?\nEven normal users can create/alter/drop views\n\nDoes this PR introduce any user-facing change?\nNo\n\nHow was this patch tested?\nOn local cluster and Unit tests. New unit tests are added.", "createdAt": "2020-08-11T16:33:07Z", "url": "https://github.com/apache/hive/pull/1391", "merged": true, "mergeCommit": {"oid": "7c19fc8fb12a1ff4afe9fe7cdadc0988fc0bc1f7"}, "closed": true, "closedAt": "2020-09-02T21:05:02Z", "author": {"login": "saihemanth-cloudera"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc95bZ1gH2gAyNDY2MjE5NjEzOjQwMTA5NTgzYWY0ZDE4NzFmZjI3MDY5Y2VlYTczNDNkZTcxNjQ2OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE_drVAFqTQ4MTAzODgxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "40109583af4d1871ff27069ceea7343de7164693", "author": {"user": {"login": "saihemanth-cloudera", "name": "Sai Hemanth Gantasala"}}, "url": "https://github.com/apache/hive/commit/40109583af4d1871ff27069ceea7343de7164693", "committedDate": "2020-08-11T16:29:59Z", "message": "Spark client can create/alter/drop a view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcc17a0227379ebf66e6ad5159392a3425850180", "author": {"user": {"login": "saihemanth-cloudera", "name": "Sai Hemanth Gantasala"}}, "url": "https://github.com/apache/hive/commit/bcc17a0227379ebf66e6ad5159392a3425850180", "committedDate": "2020-08-12T15:23:10Z", "message": "Size of input hive privilege objects changed from 1 to 2 in checkSingleViewInput()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76490a4e3c350ff1b4186d1ad0a2e1b30a6fa3e5", "author": {"user": {"login": "saihemanth-cloudera", "name": "Sai Hemanth Gantasala"}}, "url": "https://github.com/apache/hive/commit/76490a4e3c350ff1b4186d1ad0a2e1b30a6fa3e5", "committedDate": "2020-08-14T00:55:02Z", "message": "Non deferred views don't have to go through ranger authorization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTE1MjMw", "url": "https://github.com/apache/hive/pull/1391#pullrequestreview-477115230", "createdAt": "2020-08-27T22:02:42Z", "commit": {"oid": "76490a4e3c350ff1b4186d1ad0a2e1b30a6fa3e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowMjo0M1rOHIizEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowMjo0M1rOHIizEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDc4Ng==", "bodyText": "Can you add a java doc of this method. May be I am missing the context here. What does deferred authorization mean?", "url": "https://github.com/apache/hive/pull/1391#discussion_r478720786", "createdAt": "2020-08-27T22:02:43Z", "author": {"login": "vihangk1"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/command/CommandAuthorizerV2.java", "diffHunk": "@@ -121,6 +142,24 @@ private static void addPermanentFunctionEntities(SessionState ss, List<ReadEntit\n     return hivePrivobjs;\n   }\n \n+  private static boolean isDeferredAuthView(Table t){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76490a4e3c350ff1b4186d1ad0a2e1b30a6fa3e5"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTE1NjM3", "url": "https://github.com/apache/hive/pull/1391#pullrequestreview-477115637", "createdAt": "2020-08-27T22:03:30Z", "commit": {"oid": "76490a4e3c350ff1b4186d1ad0a2e1b30a6fa3e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowMzozMFrOHIi0Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowMzozMFrOHIi0Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMTEwMg==", "bodyText": "Instead of using a \"Authorized\" keyword, it is less error prone to create a constant and reuse it at all the places.", "url": "https://github.com/apache/hive/pull/1391#discussion_r478721102", "createdAt": "2020-08-27T22:03:30Z", "author": {"login": "vihangk1"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/command/CommandAuthorizerV2.java", "diffHunk": "@@ -121,6 +142,24 @@ private static void addPermanentFunctionEntities(SessionState ss, List<ReadEntit\n     return hivePrivobjs;\n   }\n \n+  private static boolean isDeferredAuthView(Table t){\n+    String tableType = t.getTTable().getTableType();\n+    boolean isView = false;\n+    if (TableType.MATERIALIZED_VIEW.name().equals(tableType) || TableType.VIRTUAL_VIEW.name().equals(tableType)) {\n+      isView = true;\n+    }\n+    if(isView){\n+      Map<String, String> params = t.getParameters();\n+      if (params != null && params.containsKey(\"Authorized\")) {\n+        String authorized = params.get(\"Authorized\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76490a4e3c350ff1b4186d1ad0a2e1b30a6fa3e5"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb79970920f2c814c3577366042df4d6226236a3", "author": {"user": {"login": "saihemanth-cloudera", "name": "Sai Hemanth Gantasala"}}, "url": "https://github.com/apache/hive/commit/eb79970920f2c814c3577366042df4d6226236a3", "committedDate": "2020-08-31T17:08:34Z", "message": "Added javadoc for deferred view. Constant value for string 'Authorized'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b971f7349eee65220361c78a615ec8db20e3e02", "author": {"user": {"login": "saihemanth-cloudera", "name": "Sai Hemanth Gantasala"}}, "url": "https://github.com/apache/hive/commit/1b971f7349eee65220361c78a615ec8db20e3e02", "committedDate": "2020-08-31T17:25:57Z", "message": "Rerun CI checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDM4ODE4", "url": "https://github.com/apache/hive/pull/1391#pullrequestreview-481038818", "createdAt": "2020-09-02T17:20:23Z", "commit": {"oid": "1b971f7349eee65220361c78a615ec8db20e3e02"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoyMDoyM1rOHL5jGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoyMjoxOVrOHL5nYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzOTI1Nw==", "bodyText": "What I meant was having a constant defined in HiveMetastoreAuthorizer.java like below.\npublic static final String DEFERRED_AUTHORIZED_KEY = \"Authorized\";\nOnce you do that you can use the key DEFERRED_AUTHORIZED_KEY everywhere whereever you are directly looking for \"Authorized\" key. The advantage of doing this way is that code is less error-prone and maintainable.\n\nFuture code modifications do introduce uppercase or lower case issues. (e.g. using \"authorized\" v/s \"Authorized\")\nIts easy to look for all the places where deferred authorized key is being used in the IDE by looking for the usages of the constant. Currently, we will have to do a git grep \"Authorized\" which is inconvenient.", "url": "https://github.com/apache/hive/pull/1391#discussion_r482239257", "createdAt": "2020-09-02T17:20:23Z", "author": {"login": "vihangk1"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/command/CommandAuthorizerV2.java", "diffHunk": "@@ -121,6 +142,32 @@ private static void addPermanentFunctionEntities(SessionState ss, List<ReadEntit\n     return hivePrivobjs;\n   }\n \n+  /**\n+   * A deferred authorization view is view created by non-super user like spark-user. This view contains a parameter \"Authorized\"\n+   * set to false, so ranger will not authorize it during view creation. When a select statement is issued, then the ranger authorizes\n+   * the under lying tables.\n+   * @param Table t\n+   * @return boolean value\n+   */\n+  private static boolean isDeferredAuthView(Table t){\n+    String tableType = t.getTTable().getTableType();\n+    String authorizedKeyword = \"Authorized\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b971f7349eee65220361c78a615ec8db20e3e02"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MDE0OA==", "bodyText": "The catch all exception here is not good, since the test will pass in case there is a MetaException thrown on line 142. The test added will pass without code modifications in the HiveMetastoreAuthorizer as well and hence I feel is not really a good regression test.\nAlso, looks like there are other tests in this class which do a catch all exception blocks which can give false positive (eg. testD_CreateView_SuperUser). Would be good to fix them up as well.", "url": "https://github.com/apache/hive/pull/1391#discussion_r482240148", "createdAt": "2020-09-02T17:21:56Z", "author": {"login": "vihangk1"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/metastore/TestHiveMetaStoreAuthorizer.java", "diffHunk": "@@ -138,10 +140,37 @@ public void testC_CreateView_anyUser() throws Exception {\n               .setOwner(authorizedUser)\n               .build(conf);\n       hmsHandler.create_table(viewObj);\n+      Map<String, String> params = viewObj.getParameters();\n+      assertTrue(params.containsKey(\"Authorized\"));\n+      assertTrue(\"false\".equalsIgnoreCase(params.get(\"Authorized\")));\n     } catch (Exception e) {\n-      String err = e.getMessage();\n-      String expected = \"Operation type CREATE_VIEW not allowed for user:\" + authorizedUser;\n-      assertEquals(expected, err);\n+      // no Exceptions for user same as normal user is now allowed CREATE_VIEW operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b971f7349eee65220361c78a615ec8db20e3e02"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MDM1NA==", "bodyText": "same comment as above related to exception handling.", "url": "https://github.com/apache/hive/pull/1391#discussion_r482240354", "createdAt": "2020-09-02T17:22:19Z", "author": {"login": "vihangk1"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/metastore/TestHiveMetaStoreAuthorizer.java", "diffHunk": "@@ -138,10 +140,37 @@ public void testC_CreateView_anyUser() throws Exception {\n               .setOwner(authorizedUser)\n               .build(conf);\n       hmsHandler.create_table(viewObj);\n+      Map<String, String> params = viewObj.getParameters();\n+      assertTrue(params.containsKey(\"Authorized\"));\n+      assertTrue(\"false\".equalsIgnoreCase(params.get(\"Authorized\")));\n     } catch (Exception e) {\n-      String err = e.getMessage();\n-      String expected = \"Operation type CREATE_VIEW not allowed for user:\" + authorizedUser;\n-      assertEquals(expected, err);\n+      // no Exceptions for user same as normal user is now allowed CREATE_VIEW operation\n+    }\n+  }\n+\n+  @Test\n+  public void testC2_AlterView_anyUser() throws Exception{\n+    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(authorizedUser));\n+    try {\n+      Table viewObj = new TableBuilder()\n+              .setTableName(viewName)\n+              .setType(TableType.VIRTUAL_VIEW.name())\n+              .addCol(\"name\", ColumnType.STRING_TYPE_NAME)\n+              .setOwner(authorizedUser)\n+              .build(conf);\n+      hmsHandler.create_table(viewObj);\n+      viewObj = new TableBuilder()\n+              .setTableName(viewName)\n+              .setType(TableType.VIRTUAL_VIEW.name())\n+              .addCol(\"dep\", ColumnType.STRING_TYPE_NAME)\n+              .setOwner(authorizedUser)\n+              .build(conf);\n+      hmsHandler.alter_table(\"default\", viewName, viewObj);\n+      Map<String, String> params = viewObj.getParameters();\n+      assertTrue(params.containsKey(\"Authorized\"));\n+      assertTrue(\"false\".equalsIgnoreCase(params.get(\"Authorized\")));\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b971f7349eee65220361c78a615ec8db20e3e02"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3446, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}