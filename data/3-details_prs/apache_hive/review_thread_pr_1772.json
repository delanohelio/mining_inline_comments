{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzQ5NDk1", "number": 1772, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToxNzo0MFrOFFCNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozODo1NFrOFLWk7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODIzNTAyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/materialized/alter/rebuild/AlterMaterializedViewRebuildAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToxNzo0MFrOIFVbUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzowNjowN1rOIHEX9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDg1MA==", "bodyText": "Is there any reason not to do this check right after tableName is parsed from the tree? Probably I'm missing something, but I believe that right after  line 62 this could be checked - no need to create the rootTasks then clear them. Also it would be nice to move this logic into a separate function, returning. boolean if it is outdated or not.", "url": "https://github.com/apache/hive/pull/1772#discussion_r542464850", "createdAt": "2020-12-14T15:17:40Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/materialized/alter/rebuild/AlterMaterializedViewRebuildAnalyzer.java", "diffHunk": "@@ -69,6 +72,23 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n \n     LOG.debug(\"Rebuilding materialized view \" + tableName.getNotEmptyDbTable());\n     super.analyzeInternal(rewrittenAST);\n+\n+    try {\n+      Table table = db.getTable(tableName.getDb(), tableName.getTable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97f4087c468dcc62dc69ea7df70e3d5b8480c1b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI4MjYxMw==", "bodyText": "Thanks for highlighting that we have all necessary info before calling super.analyzeInternal().\nCreating HiveOperation.ALTER_MATERIALIZED_VIEW_REBUILD was necessary to get this work but no need to modify the rootTasks.", "url": "https://github.com/apache/hive/pull/1772#discussion_r544282613", "createdAt": "2020-12-16T13:06:07Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/materialized/alter/rebuild/AlterMaterializedViewRebuildAnalyzer.java", "diffHunk": "@@ -69,6 +72,23 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n \n     LOG.debug(\"Rebuilding materialized view \" + tableName.getNotEmptyDbTable());\n     super.analyzeInternal(rewrittenAST);\n+\n+    try {\n+      Table table = db.getTable(tableName.getDb(), tableName.getTable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDg1MA=="}, "originalCommit": {"oid": "a97f4087c468dcc62dc69ea7df70e3d5b8480c1b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzY3NTU0OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDowNDoxNlrOIK7Jcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNjo1NjoxN1rOINnH6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNTc0Ng==", "bodyText": "This should not be printed since this is a CREATE MV statement. Please review the code, we may miss a check to avoid printing a message.", "url": "https://github.com/apache/hive/pull/1772#discussion_r548325746", "createdAt": "2020-12-24T00:04:16Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "diffHunk": "@@ -0,0 +1,171 @@\n+PREHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@t1\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@mat1\n+Materialized view default.mat1 is up to date. Cancelling rebuild.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE0MzQwMQ==", "bodyText": "This message belongs to the next command output:\nexplain\nalter materialized view mat1 rebuild;", "url": "https://github.com/apache/hive/pull/1772#discussion_r551143401", "createdAt": "2021-01-04T06:56:17Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "diffHunk": "@@ -0,0 +1,171 @@\n+PREHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@t1\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@mat1\n+Materialized view default.mat1 is up to date. Cancelling rebuild.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNTc0Ng=="}, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzY5MDI4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/materialized/alter/rebuild/AlterMaterializedViewRebuildAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDoxNDo1MFrOIK7RRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNzowMDozNlrOINnMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNzc1MA==", "bodyText": "nit. Materialized view %s.%s is up to date. Cancelling rebuild. -> Materialized view %s.%s is up to date. Skipping rebuild. ?", "url": "https://github.com/apache/hive/pull/1772#discussion_r548327750", "createdAt": "2020-12-24T00:14:50Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/materialized/alter/rebuild/AlterMaterializedViewRebuildAnalyzer.java", "diffHunk": "@@ -63,6 +66,20 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n       unparseTranslator.addTableNameTranslation(tableTree, SessionState.get().getCurrentDatabase());\n       return;\n     }\n+\n+    try {\n+      Boolean outdated = db.isOutdatedMaterializedView(getTxnMgr(), tableName);\n+      if (outdated != null && !outdated) {\n+        String msg = String.format(\"Materialized view %s.%s is up to date. Cancelling rebuild.\",\n+                tableName.getDb(), tableName.getTable());\n+        LOG.info(msg);\n+        console.printInfo(msg, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE0NDU1Mw==", "bodyText": "Changed.", "url": "https://github.com/apache/hive/pull/1772#discussion_r551144553", "createdAt": "2021-01-04T07:00:36Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/materialized/alter/rebuild/AlterMaterializedViewRebuildAnalyzer.java", "diffHunk": "@@ -63,6 +66,20 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n       unparseTranslator.addTableNameTranslation(tableTree, SessionState.get().getCurrentDatabase());\n       return;\n     }\n+\n+    try {\n+      Boolean outdated = db.isOutdatedMaterializedView(getTxnMgr(), tableName);\n+      if (outdated != null && !outdated) {\n+        String msg = String.format(\"Materialized view %s.%s is up to date. Cancelling rebuild.\",\n+                tableName.getDb(), tableName.getTable());\n+        LOG.info(msg);\n+        console.printInfo(msg, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNzc1MA=="}, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzY5NjAxOnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDoxODoxNVrOIK7UHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzoxMTo0OVrOIOMVCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyODQ3Nw==", "bodyText": "If it is easy to do, can STAGE DEPENDENCIES and STAGE PLANS not be printed, e.g., it could be that if they are made null instead of empty, they are skipped in the EXPLAIN?", "url": "https://github.com/apache/hive/pull/1772#discussion_r548328477", "createdAt": "2020-12-24T00:18:15Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "diffHunk": "@@ -0,0 +1,171 @@\n+PREHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@t1\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@mat1\n+Materialized view default.mat1 is up to date. Cancelling rebuild.\n+PREHOOK: query: explain\n+alter materialized view mat1 rebuild\n+PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+POSTHOOK: query: explain\n+alter materialized view mat1 rebuild\n+POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+STAGE DEPENDENCIES:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE3MDU4Mg==", "bodyText": "Moved STAGE DEPENDENCIES and STAGE PLANS constants to DagJsonParser so these can be accessed from both DagJsonParser and ExplainTask\nIn formatted mode If dependencies and plans are empty json objects do not add them to the final json.\nIn normal mode added check if task is empty do not print these to output", "url": "https://github.com/apache/hive/pull/1772#discussion_r551170582", "createdAt": "2021-01-04T08:20:50Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "diffHunk": "@@ -0,0 +1,171 @@\n+PREHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@t1\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@mat1\n+Materialized view default.mat1 is up to date. Cancelling rebuild.\n+PREHOOK: query: explain\n+alter materialized view mat1 rebuild\n+PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+POSTHOOK: query: explain\n+alter materialized view mat1 rebuild\n+POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+STAGE DEPENDENCIES:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyODQ3Nw=="}, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1Mjk3MA==", "bodyText": "Reverted the part related to formatted mode since that could be a breaking change if some 3rd party app relies on the existing json schema.", "url": "https://github.com/apache/hive/pull/1772#discussion_r551752970", "createdAt": "2021-01-05T07:11:49Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "diffHunk": "@@ -0,0 +1,171 @@\n+PREHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@t1\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@mat1\n+Materialized view default.mat1 is up to date. Cancelling rebuild.\n+PREHOOK: query: explain\n+alter materialized view mat1 rebuild\n+PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+POSTHOOK: query: explain\n+alter materialized view mat1 rebuild\n+POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+STAGE DEPENDENCIES:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyODQ3Nw=="}, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzcwNTgzOnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDoyNToyNFrOIK7ZTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNzo0MDo1M1rOINn6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyOTgwNg==", "bodyText": "Can we add a similar test with an aggregate MV too (incremental rebuild with merge)?", "url": "https://github.com/apache/hive/pull/1772#discussion_r548329806", "createdAt": "2020-12-24T00:25:24Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "diffHunk": "@@ -0,0 +1,171 @@\n+PREHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@t1\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@mat1\n+Materialized view default.mat1 is up to date. Cancelling rebuild.\n+PREHOOK: query: explain\n+alter materialized view mat1 rebuild\n+PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+POSTHOOK: query: explain\n+alter materialized view mat1 rebuild\n+POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+STAGE DEPENDENCIES:\n+\n+STAGE PLANS:\n+Materialized view default.mat1 is up to date. Cancelling rebuild.\n+PREHOOK: query: alter materialized view mat1 rebuild\n+PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+POSTHOOK: query: alter materialized view mat1 rebuild\n+POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: explain\n+alter materialized view mat1 rebuild\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: explain\n+alter materialized view mat1 rebuild\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: default@mat1\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-2 depends on stages: Stage-1\n+  Stage-0 depends on stages: Stage-2\n+  Stage-3 depends on stages: Stage-0\n+  Stage-4 depends on stages: Stage-3\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+#### A masked pattern was here ####\n+      Edges:\n+        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: t1\n+                  filterExpr: ((ROW__ID.writeid > 1L) and (col0 = 1)) (type: boolean)\n+                  Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n+                  Filter Operator\n+                    predicate: ((ROW__ID.writeid > 1L) and (col0 = 1)) (type: boolean)\n+                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                    Select Operator\n+                      expressions: 1 (type: int)\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                      File Output Operator\n+                        compressed: false\n+                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                        table:\n+                            input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\n+                            output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\n+                            serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde\n+                            name: default.mat1\n+                      Select Operator\n+                        expressions: _col0 (type: int)\n+                        outputColumnNames: col0\n+                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                        Group By Operator\n+                          aggregations: min(col0), max(col0), count(1), count(col0), compute_bit_vector(col0, 'hll')\n+                          minReductionHashAggr: 0.4\n+                          mode: hash\n+                          outputColumnNames: _col0, _col1, _col2, _col3, _col4\n+                          Statistics: Num rows: 1 Data size: 168 Basic stats: COMPLETE Column stats: COMPLETE\n+                          Reduce Output Operator\n+                            null sort order: \n+                            sort order: \n+                            Statistics: Num rows: 1 Data size: 168 Basic stats: COMPLETE Column stats: COMPLETE\n+                            value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary)\n+            Execution mode: llap\n+            LLAP IO: may be used (ACID table)\n+        Reducer 2 \n+            Execution mode: llap\n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector(VALUE._col4)\n+                mode: mergepartial\n+                outputColumnNames: _col0, _col1, _col2, _col3, _col4\n+                Statistics: Num rows: 1 Data size: 168 Basic stats: COMPLETE Column stats: COMPLETE\n+                Select Operator\n+                  expressions: 'LONG' (type: string), UDFToLong(_col0) (type: bigint), UDFToLong(_col1) (type: bigint), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary)\n+                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5\n+                  Statistics: Num rows: 1 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE\n+                  File Output Operator\n+                    compressed: false\n+                    Statistics: Num rows: 1 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE\n+                    table:\n+                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-2\n+    Dependency Collection\n+\n+  Stage: Stage-0\n+    Move Operator\n+      tables:\n+          replace: false\n+          table:\n+              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\n+              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\n+              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde\n+              name: default.mat1\n+\n+  Stage: Stage-3\n+    Stats Work\n+      Basic Stats Work:\n+      Column Stats Desc:\n+          Columns: col0\n+          Column Types: int\n+          Table: default.mat1\n+\n+  Stage: Stage-4\n+    Materialized View Update\n+      name: default.mat1\n+      update creation metadata: true\n+\n+PREHOOK: query: alter materialized view mat1 rebuild\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: alter materialized view mat1 rebuild\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: default@mat1\n+POSTHOOK: Lineage: mat1.col0 SIMPLE []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE1NjMxOA==", "bodyText": "Added.", "url": "https://github.com/apache/hive/pull/1772#discussion_r551156318", "createdAt": "2021-01-04T07:40:53Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rebuild_2.q.out", "diffHunk": "@@ -0,0 +1,171 @@\n+PREHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: create table t1(col0 int) stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@t1\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: create materialized view mat1 as\n+select col0 from t1 where col0 = 1\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@mat1\n+Materialized view default.mat1 is up to date. Cancelling rebuild.\n+PREHOOK: query: explain\n+alter materialized view mat1 rebuild\n+PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+POSTHOOK: query: explain\n+alter materialized view mat1 rebuild\n+POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+STAGE DEPENDENCIES:\n+\n+STAGE PLANS:\n+Materialized view default.mat1 is up to date. Cancelling rebuild.\n+PREHOOK: query: alter materialized view mat1 rebuild\n+PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+POSTHOOK: query: alter materialized view mat1 rebuild\n+POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD\n+PREHOOK: query: insert into t1(col0) values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@t1\n+POSTHOOK: query: insert into t1(col0) values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@t1\n+POSTHOOK: Lineage: t1.col0 SCRIPT []\n+PREHOOK: query: explain\n+alter materialized view mat1 rebuild\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: explain\n+alter materialized view mat1 rebuild\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: default@mat1\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-2 depends on stages: Stage-1\n+  Stage-0 depends on stages: Stage-2\n+  Stage-3 depends on stages: Stage-0\n+  Stage-4 depends on stages: Stage-3\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+#### A masked pattern was here ####\n+      Edges:\n+        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: t1\n+                  filterExpr: ((ROW__ID.writeid > 1L) and (col0 = 1)) (type: boolean)\n+                  Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n+                  Filter Operator\n+                    predicate: ((ROW__ID.writeid > 1L) and (col0 = 1)) (type: boolean)\n+                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                    Select Operator\n+                      expressions: 1 (type: int)\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                      File Output Operator\n+                        compressed: false\n+                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                        table:\n+                            input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\n+                            output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\n+                            serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde\n+                            name: default.mat1\n+                      Select Operator\n+                        expressions: _col0 (type: int)\n+                        outputColumnNames: col0\n+                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                        Group By Operator\n+                          aggregations: min(col0), max(col0), count(1), count(col0), compute_bit_vector(col0, 'hll')\n+                          minReductionHashAggr: 0.4\n+                          mode: hash\n+                          outputColumnNames: _col0, _col1, _col2, _col3, _col4\n+                          Statistics: Num rows: 1 Data size: 168 Basic stats: COMPLETE Column stats: COMPLETE\n+                          Reduce Output Operator\n+                            null sort order: \n+                            sort order: \n+                            Statistics: Num rows: 1 Data size: 168 Basic stats: COMPLETE Column stats: COMPLETE\n+                            value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary)\n+            Execution mode: llap\n+            LLAP IO: may be used (ACID table)\n+        Reducer 2 \n+            Execution mode: llap\n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector(VALUE._col4)\n+                mode: mergepartial\n+                outputColumnNames: _col0, _col1, _col2, _col3, _col4\n+                Statistics: Num rows: 1 Data size: 168 Basic stats: COMPLETE Column stats: COMPLETE\n+                Select Operator\n+                  expressions: 'LONG' (type: string), UDFToLong(_col0) (type: bigint), UDFToLong(_col1) (type: bigint), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary)\n+                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5\n+                  Statistics: Num rows: 1 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE\n+                  File Output Operator\n+                    compressed: false\n+                    Statistics: Num rows: 1 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE\n+                    table:\n+                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-2\n+    Dependency Collection\n+\n+  Stage: Stage-0\n+    Move Operator\n+      tables:\n+          replace: false\n+          table:\n+              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\n+              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\n+              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde\n+              name: default.mat1\n+\n+  Stage: Stage-3\n+    Stats Work\n+      Basic Stats Work:\n+      Column Stats Desc:\n+          Columns: col0\n+          Column Types: int\n+          Table: default.mat1\n+\n+  Stage: Stage-4\n+    Materialized View Update\n+      name: default.mat1\n+      update creation metadata: true\n+\n+PREHOOK: query: alter materialized view mat1 rebuild\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@t1\n+PREHOOK: Output: default@mat1\n+POSTHOOK: query: alter materialized view mat1 rebuild\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@t1\n+POSTHOOK: Output: default@mat1\n+POSTHOOK: Lineage: mat1.col0 SIMPLE []", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyOTgwNg=="}, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzcxODM3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/plan/HiveOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDozNDo1N1rOIK7gLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDowNjoyNFrOINr1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzMTU2Ng==", "bodyText": "Why do we need to add this operation? I saw a comment about it in another conversation but it was not clear over there.\nIn the q file below, I see that that this change is leading to inconsistent operation type when rebuild is executed (QUERY) vs skipped (ALTER_MATERIALIZED_VIEW_REBUILD). This should not happen: The operation type should be the same in both cases.", "url": "https://github.com/apache/hive/pull/1772#discussion_r548331566", "createdAt": "2020-12-24T00:34:57Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/plan/HiveOperation.java", "diffHunk": "@@ -120,6 +120,8 @@\n       new Privilege[]{Privilege.DROP}),\n   ALTER_MATERIALIZED_VIEW_REWRITE(\"ALTER_MATERIALIZED_VIEW_REWRITE\", HiveParser.TOK_ALTER_MATERIALIZED_VIEW_REWRITE,\n       new Privilege[]{Privilege.ALTER_METADATA}, null),\n+  ALTER_MATERIALIZED_VIEW_REBUILD(\"ALTER_MATERIALIZED_VIEW_REBUILD\", HiveParser.TOK_ALTER_MATERIALIZED_VIEW_REBUILD,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMDYyOA==", "bodyText": "Without this an exception is thrown at execution time.\njava.lang.IllegalStateException: Unknown HiveOperation(null) for queryId=krisz_20210104002338_38173ed5-af09-4e65-af17-8be1dc49e62e\n\tat org.apache.hadoop.hive.ql.lockmgr.DbTxnManager.verifyState(DbTxnManager.java:315)\n\tat org.apache.hadoop.hive.ql.lockmgr.DbTxnManager.acquireLocks(DbTxnManager.java:389)\n...\n\tat org.apache.hadoop.hive.ql.Driver.lockAndRespond(Driver.java:329)\n\tat org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:193)\n...\n\nFixed the inconsistency by setting back the operation type to ALTER_MATERIALIZED_VIEW_REBUILD after analyzing the query like in the case of CREATE_MATERIALIZED_VIEW", "url": "https://github.com/apache/hive/pull/1772#discussion_r551220628", "createdAt": "2021-01-04T10:06:24Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/plan/HiveOperation.java", "diffHunk": "@@ -120,6 +120,8 @@\n       new Privilege[]{Privilege.DROP}),\n   ALTER_MATERIALIZED_VIEW_REWRITE(\"ALTER_MATERIALIZED_VIEW_REWRITE\", HiveParser.TOK_ALTER_MATERIALIZED_VIEW_REWRITE,\n       new Privilege[]{Privilege.ALTER_METADATA}, null),\n+  ALTER_MATERIALIZED_VIEW_REBUILD(\"ALTER_MATERIALIZED_VIEW_REBUILD\", HiveParser.TOK_ALTER_MATERIALIZED_VIEW_REBUILD,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzMTU2Ng=="}, "originalCommit": {"oid": "e1c365cf87dd3672506bd35a5eac72dc72816e1e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQ1MDE2OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientnegative/materialized_view_authorization_rebuild_no_grant.q.out", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozMDoyNlrOIOeKCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDoxNTo1MlrOIO5HAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NTA2NQ==", "bodyText": "It seems we need object ownership for rebuild now (this is probably because of the changes in Operation2Privilege.java). We should mimic HiveOperationType.QUERY privileges instead of other ALTER statements (we probably need SELECT, INSERT, and DELETE on the MV).", "url": "https://github.com/apache/hive/pull/1772#discussion_r552045065", "createdAt": "2021-01-05T16:30:26Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientnegative/materialized_view_authorization_rebuild_no_grant.q.out", "diffHunk": "@@ -33,4 +33,4 @@ POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n POSTHOOK: Input: default@amvrng_table\n POSTHOOK: Output: database:default\n POSTHOOK: Output: default@amvrng_mat_view\n-FAILED: HiveAccessControlException Permission denied: Principal [name=user1, type=USER] does not have following privileges for operation QUERY [[INSERT, DELETE] on Object [type=TABLE_OR_VIEW, name=default.amvrng_mat_view, action=INSERT_OVERWRITE]]\n+FAILED: HiveAccessControlException Permission denied: Principal [name=user1, type=USER] does not have following privileges for operation ALTER_MATERIALIZED_VIEW_REBUILD [[OBJECT OWNERSHIP] on Object [type=TABLE_OR_VIEW, name=default.amvrng_mat_view, action=INSERT_OVERWRITE]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8263cc5a6e5b9474a1442124f818d0e1f78476"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ4NjY1Ng==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1772#discussion_r552486656", "createdAt": "2021-01-06T10:15:52Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientnegative/materialized_view_authorization_rebuild_no_grant.q.out", "diffHunk": "@@ -33,4 +33,4 @@ POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n POSTHOOK: Input: default@amvrng_table\n POSTHOOK: Output: database:default\n POSTHOOK: Output: default@amvrng_mat_view\n-FAILED: HiveAccessControlException Permission denied: Principal [name=user1, type=USER] does not have following privileges for operation QUERY [[INSERT, DELETE] on Object [type=TABLE_OR_VIEW, name=default.amvrng_mat_view, action=INSERT_OVERWRITE]]\n+FAILED: HiveAccessControlException Permission denied: Principal [name=user1, type=USER] does not have following privileges for operation ALTER_MATERIALIZED_VIEW_REBUILD [[OBJECT OWNERSHIP] on Object [type=TABLE_OR_VIEW, name=default.amvrng_mat_view, action=INSERT_OVERWRITE]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NTA2NQ=="}, "originalCommit": {"oid": "2a8263cc5a6e5b9474a1442124f818d0e1f78476"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQ2NTA3OnYy", "diffSide": "LEFT", "path": "ql/src/test/results/clientpositive/llap/insert1_overwrite_partitions.q.out", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozMzo0N1rOIOeTEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1MjoxMFrOIO2eZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NzM3OA==", "bodyText": "I'm going to back down from this change. It seems there were occasions where this was empty. Let's just keep it as it was for backwards compatibility. If we want to remove them, we can do it in a separate JIRA. Sorry about the confusion.", "url": "https://github.com/apache/hive/pull/1772#discussion_r552047378", "createdAt": "2021-01-05T16:33:47Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/insert1_overwrite_partitions.q.out", "diffHunk": "@@ -198,9 +198,7 @@ PREHOOK: type: QUERY\n POSTHOOK: query: EXPLAIN INSERT OVERWRITE TABLE destinTable PARTITION (ds='2011-11-11', hr='11') if not exists\n SELECT one,two FROM sourceTable WHERE ds='2011-11-11' AND hr='12' order by one desc, two desc limit 5\n POSTHOOK: type: QUERY\n-STAGE DEPENDENCIES:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8263cc5a6e5b9474a1442124f818d0e1f78476"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzQ5NA==", "bodyText": "Reverted.", "url": "https://github.com/apache/hive/pull/1772#discussion_r552443494", "createdAt": "2021-01-06T08:52:10Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientpositive/llap/insert1_overwrite_partitions.q.out", "diffHunk": "@@ -198,9 +198,7 @@ PREHOOK: type: QUERY\n POSTHOOK: query: EXPLAIN INSERT OVERWRITE TABLE destinTable PARTITION (ds='2011-11-11', hr='11') if not exists\n SELECT one,two FROM sourceTable WHERE ds='2011-11-11' AND hr='12' order by one desc, two desc limit 5\n POSTHOOK: type: QUERY\n-STAGE DEPENDENCIES:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NzM3OA=="}, "originalCommit": {"oid": "2a8263cc5a6e5b9474a1442124f818d0e1f78476"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQ4NTU2OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozODo1NVrOIOefuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1MTo0OFrOIO2dwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA1MDYxOQ==", "bodyText": "nit. repeated import", "url": "https://github.com/apache/hive/pull/1772#discussion_r552050619", "createdAt": "2021-01-05T16:38:55Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -28,11 +28,14 @@\n import com.google.common.util.concurrent.MoreExecutors;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n+import static org.apache.hadoop.hive.conf.Constants.MATERIALIZED_VIEW_REWRITING_TIME_WINDOW;\n import static org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_STORAGE;\n import static org.apache.hadoop.hive.metastore.utils.MetaStoreUtils.getDefaultCatalog;\n import static org.apache.hadoop.hive.ql.io.AcidUtils.getFullTableName;\n import static org.apache.hadoop.hive.ql.metadata.HiveRelOptMaterialization.RewriteAlgorithm.CALCITE;\n import static org.apache.hadoop.hive.ql.metadata.HiveRelOptMaterialization.RewriteAlgorithm.ALL;\n+import static org.apache.hadoop.hive.ql.metadata.HiveRelOptMaterialization.RewriteAlgorithm.CALCITE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8263cc5a6e5b9474a1442124f818d0e1f78476"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzMyOA==", "bodyText": "removed duplicates", "url": "https://github.com/apache/hive/pull/1772#discussion_r552443328", "createdAt": "2021-01-06T08:51:48Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -28,11 +28,14 @@\n import com.google.common.util.concurrent.MoreExecutors;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n+import static org.apache.hadoop.hive.conf.Constants.MATERIALIZED_VIEW_REWRITING_TIME_WINDOW;\n import static org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_STORAGE;\n import static org.apache.hadoop.hive.metastore.utils.MetaStoreUtils.getDefaultCatalog;\n import static org.apache.hadoop.hive.ql.io.AcidUtils.getFullTableName;\n import static org.apache.hadoop.hive.ql.metadata.HiveRelOptMaterialization.RewriteAlgorithm.CALCITE;\n import static org.apache.hadoop.hive.ql.metadata.HiveRelOptMaterialization.RewriteAlgorithm.ALL;\n+import static org.apache.hadoop.hive.ql.metadata.HiveRelOptMaterialization.RewriteAlgorithm.CALCITE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA1MDYxOQ=="}, "originalCommit": {"oid": "2a8263cc5a6e5b9474a1442124f818d0e1f78476"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 150, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}