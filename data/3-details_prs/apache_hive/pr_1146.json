{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MjUxNjc3", "number": 1146, "title": "HIVE-23619: Add new reexecute plugin to rerun queries in case AM is down due to lost node", "bodyText": "If the AM running the query is killed due to node going down, the query is killed. This plugin checks the error message received and matches with lost node exception. If yes, the query is re-run.", "createdAt": "2020-06-18T06:11:17Z", "url": "https://github.com/apache/hive/pull/1146", "merged": true, "mergeCommit": {"oid": "a14111ae8dea5aa28128a5f89146b8ce23230fac"}, "closed": true, "closedAt": "2020-06-25T16:43:49Z", "author": {"login": "adesh-rao"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcscS1kAFqTQzMzE2ODg1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuvI5JgBqjM0ODI1NDI5ODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMTY4ODUz", "url": "https://github.com/apache/hive/pull/1146#pullrequestreview-433168853", "createdAt": "2020-06-18T10:56:39Z", "commit": {"oid": "5296258efd04ce3852d48fc95b542777892c675a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDo1NjozOVrOGlqNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDo1NjozOVrOGlqNVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE0MjAzNg==", "bodyText": "Could you please describe it briefly this in ConfVars.HIVE_QUERY_REEXECUTION_STRATEGIES?\n...and I think you may enable this plugin by default", "url": "https://github.com/apache/hive/pull/1146#discussion_r442142036", "createdAt": "2020-06-18T10:56:39Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/DriverFactory.java", "diffHunk": "@@ -64,6 +65,9 @@ private static IReExecutionPlugin buildReExecPlugin(String name) throws RuntimeE\n     if (name.equals(\"reoptimize\")) {\n       return new ReOptimizePlugin();\n     }\n+    if(name.equals(\"reexecutelostam\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5296258efd04ce3852d48fc95b542777892c675a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTY3NTU5", "url": "https://github.com/apache/hive/pull/1146#pullrequestreview-433967559", "createdAt": "2020-06-19T10:23:40Z", "commit": {"oid": "878d4b4b4c891d903f4a38cae79b1d29c27b0e60"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "878d4b4b4c891d903f4a38cae79b1d29c27b0e60", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/878d4b4b4c891d903f4a38cae79b1d29c27b0e60", "committedDate": "2020-06-18T17:00:02Z", "message": "enable by default"}, "afterCommit": {"oid": "0bb67d80be0ebb0779bfb3fd77a73068d56e345a", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/0bb67d80be0ebb0779bfb3fd77a73068d56e345a", "committedDate": "2020-06-19T12:44:41Z", "message": "Refactor test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDEzNDE2", "url": "https://github.com/apache/hive/pull/1146#pullrequestreview-436013416", "createdAt": "2020-06-23T17:42:32Z", "commit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzo0MjozM1rOGnz6Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxNTo1MlrOGn1FQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5ODEzOQ==", "bodyText": "In Hive code, we follow 2 spaced tabs. Pls update it in newly created files in this patch.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444398139", "createdAt": "2020-06-23T17:42:33Z", "author": {"login": "sankarh"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/reexec/ReExecuteLostAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.hive.ql.Driver;\n+import org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;\n+import org.apache.hadoop.hive.ql.hooks.HookContext;\n+import org.apache.hadoop.hive.ql.plan.mapper.PlanMapper;\n+\n+import java.util.regex.Pattern;\n+\n+public class ReExecuteLostAMQueryPlugin implements IReExecutionPlugin {\n+    private boolean retryPossible;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQwNDI1NQ==", "bodyText": "Too many blank lines.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444404255", "createdAt": "2020-06-23T17:52:47Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.llap.LlapBaseInputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.BaseJdbcWithMiniLlap;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+    protected static final Logger LOG = LoggerFactory.getLogger(TestJdbcWithMiniLlapArrow.class);\n+\n+    private static MiniHS2 miniHS2 = null;\n+    private static final String tableName = \"testKillTezAmTbl\";\n+    private static String dataFileDir;\n+    private static final String testDbName = \"testKillTezAmDb\";\n+    protected static Connection hs2Conn = null;\n+    private static HiveConf conf;\n+\n+    private static class ExceptionHolder {\n+        Throwable throwable;\n+    }\n+\n+    static HiveConf defaultConf() throws Exception {\n+        String confDir = \"../../data/conf/llap/\";\n+        if (confDir != null && !confDir.isEmpty()) {\n+            HiveConf.setHiveSiteLocation(new URL(\"file://\"+ new File(confDir).toURI().getPath() + \"/hive-site.xml\"));\n+            System.out.println(\"Setting hive-site: \" + HiveConf.getHiveSiteLocation());\n+        }\n+        HiveConf defaultConf = new HiveConf();\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS, false);\n+        defaultConf.addResource(new URL(\"file://\" + new File(confDir).toURI().getPath() + \"/tez-site.xml\"));\n+        return defaultConf;\n+    }\n+\n+    @BeforeClass\n+    public static void beforeTest() throws Exception {\n+        conf = defaultConf();\n+        conf.setVar(HiveConf.ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(\"user.name\"));\n+        conf.set(HiveConf.ConfVars.HIVE_QUERY_REEXECUTION_STRATEGIES.varname, \"reexecute_lost_am\");\n+        MiniHS2.cleanupLocalDir();\n+        Class.forName(MiniHS2.getJdbcDriverName());\n+        miniHS2 = new MiniHS2(conf, MiniHS2.MiniClusterType.LLAP);\n+        dataFileDir = conf.get(\"test.data.files\").replace('\\\\', '/').replace(\"c:\", \"\");\n+        Map<String, String> confOverlay = new HashMap<String, String>();\n+        miniHS2.start(confOverlay);\n+        miniHS2.getDFS().getFileSystem().mkdirs(new Path(\"/apps_staging_dir/anonymous\"));\n+\n+        Connection conDefault = getConnection(miniHS2.getJdbcURL(),\n+                System.getProperty(\"user.name\"), \"bar\");\n+        Statement stmt = conDefault.createStatement();\n+        String tblName = testDbName + \".\" + tableName;\n+        Path dataFilePath = new Path(dataFileDir, \"kv1.txt\");\n+        String udfName = TestJdbcWithMiniLlapArrow.SleepMsUDF.class.getName();\n+        stmt.execute(\"drop database if exists \" + testDbName + \" cascade\");\n+        stmt.execute(\"create database \" + testDbName);\n+        stmt.execute(\"set role admin\");\n+        stmt.execute(\"dfs -put \" + dataFilePath.toString() + \" \" + \"kv1.txt\");\n+        stmt.execute(\"use \" + testDbName);\n+        stmt.execute(\"create table \" + tblName + \" (int_col int, value string) \");\n+        stmt.execute(\"load data inpath 'kv1.txt' into table \" + tblName);\n+        stmt.execute(\"create function sleepMsUDF as '\" + udfName + \"'\");\n+        stmt.execute(\"grant select on table \" + tblName + \" to role public\");\n+\n+        stmt.close();\n+        conDefault.close();\n+    }\n+\n+    @AfterClass\n+    public static void afterTest() {\n+        if (miniHS2 != null && miniHS2.isStarted()) {\n+            miniHS2.stop();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        hs2Conn = getConnection(miniHS2.getJdbcURL(), System.getProperty(\"user.name\"), \"bar\");\n+    }\n+\n+    public static Connection getConnection(String jdbcURL, String user, String pwd) throws SQLException {\n+        Connection conn = DriverManager.getConnection(jdbcURL, user, pwd);\n+        conn.createStatement().execute(\"set hive.support.concurrency = false\");\n+        return conn;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        LlapBaseInputFormat.closeAll();\n+        hs2Conn.close();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQwNjAyMQ==", "bodyText": "Do you mean 500*100ms?", "url": "https://github.com/apache/hive/pull/1146#discussion_r444406021", "createdAt": "2020-06-23T17:55:47Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.llap.LlapBaseInputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.BaseJdbcWithMiniLlap;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+    protected static final Logger LOG = LoggerFactory.getLogger(TestJdbcWithMiniLlapArrow.class);\n+\n+    private static MiniHS2 miniHS2 = null;\n+    private static final String tableName = \"testKillTezAmTbl\";\n+    private static String dataFileDir;\n+    private static final String testDbName = \"testKillTezAmDb\";\n+    protected static Connection hs2Conn = null;\n+    private static HiveConf conf;\n+\n+    private static class ExceptionHolder {\n+        Throwable throwable;\n+    }\n+\n+    static HiveConf defaultConf() throws Exception {\n+        String confDir = \"../../data/conf/llap/\";\n+        if (confDir != null && !confDir.isEmpty()) {\n+            HiveConf.setHiveSiteLocation(new URL(\"file://\"+ new File(confDir).toURI().getPath() + \"/hive-site.xml\"));\n+            System.out.println(\"Setting hive-site: \" + HiveConf.getHiveSiteLocation());\n+        }\n+        HiveConf defaultConf = new HiveConf();\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS, false);\n+        defaultConf.addResource(new URL(\"file://\" + new File(confDir).toURI().getPath() + \"/tez-site.xml\"));\n+        return defaultConf;\n+    }\n+\n+    @BeforeClass\n+    public static void beforeTest() throws Exception {\n+        conf = defaultConf();\n+        conf.setVar(HiveConf.ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(\"user.name\"));\n+        conf.set(HiveConf.ConfVars.HIVE_QUERY_REEXECUTION_STRATEGIES.varname, \"reexecute_lost_am\");\n+        MiniHS2.cleanupLocalDir();\n+        Class.forName(MiniHS2.getJdbcDriverName());\n+        miniHS2 = new MiniHS2(conf, MiniHS2.MiniClusterType.LLAP);\n+        dataFileDir = conf.get(\"test.data.files\").replace('\\\\', '/').replace(\"c:\", \"\");\n+        Map<String, String> confOverlay = new HashMap<String, String>();\n+        miniHS2.start(confOverlay);\n+        miniHS2.getDFS().getFileSystem().mkdirs(new Path(\"/apps_staging_dir/anonymous\"));\n+\n+        Connection conDefault = getConnection(miniHS2.getJdbcURL(),\n+                System.getProperty(\"user.name\"), \"bar\");\n+        Statement stmt = conDefault.createStatement();\n+        String tblName = testDbName + \".\" + tableName;\n+        Path dataFilePath = new Path(dataFileDir, \"kv1.txt\");\n+        String udfName = TestJdbcWithMiniLlapArrow.SleepMsUDF.class.getName();\n+        stmt.execute(\"drop database if exists \" + testDbName + \" cascade\");\n+        stmt.execute(\"create database \" + testDbName);\n+        stmt.execute(\"set role admin\");\n+        stmt.execute(\"dfs -put \" + dataFilePath.toString() + \" \" + \"kv1.txt\");\n+        stmt.execute(\"use \" + testDbName);\n+        stmt.execute(\"create table \" + tblName + \" (int_col int, value string) \");\n+        stmt.execute(\"load data inpath 'kv1.txt' into table \" + tblName);\n+        stmt.execute(\"create function sleepMsUDF as '\" + udfName + \"'\");\n+        stmt.execute(\"grant select on table \" + tblName + \" to role public\");\n+\n+        stmt.close();\n+        conDefault.close();\n+    }\n+\n+    @AfterClass\n+    public static void afterTest() {\n+        if (miniHS2 != null && miniHS2.isStarted()) {\n+            miniHS2.stop();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        hs2Conn = getConnection(miniHS2.getJdbcURL(), System.getProperty(\"user.name\"), \"bar\");\n+    }\n+\n+    public static Connection getConnection(String jdbcURL, String user, String pwd) throws SQLException {\n+        Connection conn = DriverManager.getConnection(jdbcURL, user, pwd);\n+        conn.createStatement().execute(\"set hive.support.concurrency = false\");\n+        return conn;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        LlapBaseInputFormat.closeAll();\n+        hs2Conn.close();\n+    }\n+\n+\n+\n+    @Test\n+    public void testKillQueryById() throws Exception {\n+        String user = System.getProperty(\"user.name\");\n+        Connection con1 = getConnection(miniHS2.getJdbcURL(testDbName),\n+                user, \"bar\");\n+\n+        final HiveStatement stmt = (HiveStatement)con1.createStatement();\n+        final StringBuffer stmtQueryId = new StringBuffer();\n+        ExceptionHolder originalQExHolder = new ExceptionHolder();\n+        originalQExHolder.throwable = null;\n+\n+        // Thread executing the query\n+        Thread tExecute = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    System.out.println(\"Executing query: \");\n+                    stmt.execute(\"set hive.llap.execution.mode = none\");\n+\n+                    // The test table has 500 rows, so total query time should be ~ 500*500ms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQwODk4Nw==", "bodyText": "Shall remove else part if we move rest of the code with break inside \"if\" block.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444408987", "createdAt": "2020-06-23T18:00:36Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.llap.LlapBaseInputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.BaseJdbcWithMiniLlap;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+    protected static final Logger LOG = LoggerFactory.getLogger(TestJdbcWithMiniLlapArrow.class);\n+\n+    private static MiniHS2 miniHS2 = null;\n+    private static final String tableName = \"testKillTezAmTbl\";\n+    private static String dataFileDir;\n+    private static final String testDbName = \"testKillTezAmDb\";\n+    protected static Connection hs2Conn = null;\n+    private static HiveConf conf;\n+\n+    private static class ExceptionHolder {\n+        Throwable throwable;\n+    }\n+\n+    static HiveConf defaultConf() throws Exception {\n+        String confDir = \"../../data/conf/llap/\";\n+        if (confDir != null && !confDir.isEmpty()) {\n+            HiveConf.setHiveSiteLocation(new URL(\"file://\"+ new File(confDir).toURI().getPath() + \"/hive-site.xml\"));\n+            System.out.println(\"Setting hive-site: \" + HiveConf.getHiveSiteLocation());\n+        }\n+        HiveConf defaultConf = new HiveConf();\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS, false);\n+        defaultConf.addResource(new URL(\"file://\" + new File(confDir).toURI().getPath() + \"/tez-site.xml\"));\n+        return defaultConf;\n+    }\n+\n+    @BeforeClass\n+    public static void beforeTest() throws Exception {\n+        conf = defaultConf();\n+        conf.setVar(HiveConf.ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(\"user.name\"));\n+        conf.set(HiveConf.ConfVars.HIVE_QUERY_REEXECUTION_STRATEGIES.varname, \"reexecute_lost_am\");\n+        MiniHS2.cleanupLocalDir();\n+        Class.forName(MiniHS2.getJdbcDriverName());\n+        miniHS2 = new MiniHS2(conf, MiniHS2.MiniClusterType.LLAP);\n+        dataFileDir = conf.get(\"test.data.files\").replace('\\\\', '/').replace(\"c:\", \"\");\n+        Map<String, String> confOverlay = new HashMap<String, String>();\n+        miniHS2.start(confOverlay);\n+        miniHS2.getDFS().getFileSystem().mkdirs(new Path(\"/apps_staging_dir/anonymous\"));\n+\n+        Connection conDefault = getConnection(miniHS2.getJdbcURL(),\n+                System.getProperty(\"user.name\"), \"bar\");\n+        Statement stmt = conDefault.createStatement();\n+        String tblName = testDbName + \".\" + tableName;\n+        Path dataFilePath = new Path(dataFileDir, \"kv1.txt\");\n+        String udfName = TestJdbcWithMiniLlapArrow.SleepMsUDF.class.getName();\n+        stmt.execute(\"drop database if exists \" + testDbName + \" cascade\");\n+        stmt.execute(\"create database \" + testDbName);\n+        stmt.execute(\"set role admin\");\n+        stmt.execute(\"dfs -put \" + dataFilePath.toString() + \" \" + \"kv1.txt\");\n+        stmt.execute(\"use \" + testDbName);\n+        stmt.execute(\"create table \" + tblName + \" (int_col int, value string) \");\n+        stmt.execute(\"load data inpath 'kv1.txt' into table \" + tblName);\n+        stmt.execute(\"create function sleepMsUDF as '\" + udfName + \"'\");\n+        stmt.execute(\"grant select on table \" + tblName + \" to role public\");\n+\n+        stmt.close();\n+        conDefault.close();\n+    }\n+\n+    @AfterClass\n+    public static void afterTest() {\n+        if (miniHS2 != null && miniHS2.isStarted()) {\n+            miniHS2.stop();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        hs2Conn = getConnection(miniHS2.getJdbcURL(), System.getProperty(\"user.name\"), \"bar\");\n+    }\n+\n+    public static Connection getConnection(String jdbcURL, String user, String pwd) throws SQLException {\n+        Connection conn = DriverManager.getConnection(jdbcURL, user, pwd);\n+        conn.createStatement().execute(\"set hive.support.concurrency = false\");\n+        return conn;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        LlapBaseInputFormat.closeAll();\n+        hs2Conn.close();\n+    }\n+\n+\n+\n+    @Test\n+    public void testKillQueryById() throws Exception {\n+        String user = System.getProperty(\"user.name\");\n+        Connection con1 = getConnection(miniHS2.getJdbcURL(testDbName),\n+                user, \"bar\");\n+\n+        final HiveStatement stmt = (HiveStatement)con1.createStatement();\n+        final StringBuffer stmtQueryId = new StringBuffer();\n+        ExceptionHolder originalQExHolder = new ExceptionHolder();\n+        originalQExHolder.throwable = null;\n+\n+        // Thread executing the query\n+        Thread tExecute = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    System.out.println(\"Executing query: \");\n+                    stmt.execute(\"set hive.llap.execution.mode = none\");\n+\n+                    // The test table has 500 rows, so total query time should be ~ 500*500ms\n+                    stmt.executeAsync(\"select sleepMsUDF(t1.int_col, 100), t1.int_col, t2.int_col \" +\n+                            \"from \" + tableName + \" t1 join \" + tableName + \" t2 on t1.int_col = t2.int_col\");\n+                    stmtQueryId.append(stmt.getQueryId());\n+                    stmt.getUpdateCount();\n+                } catch (SQLException e) {\n+                    originalQExHolder.throwable = e;\n+                }\n+            }\n+        });\n+\n+        tExecute.start();\n+\n+        // wait for other thread to create the stmt handle\n+        int count = 0;\n+        while (++count <= 10) {\n+                Thread.sleep(2000);\n+                String queryId;\n+                if (stmtQueryId.length() != 0) {\n+                    queryId = stmtQueryId.toString();\n+                } else {\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQwOTk2Mg==", "bodyText": "We shall move cleanup code before Assert as it may not execute if Assert throws exception.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444409962", "createdAt": "2020-06-23T18:02:26Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.llap.LlapBaseInputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.BaseJdbcWithMiniLlap;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+    protected static final Logger LOG = LoggerFactory.getLogger(TestJdbcWithMiniLlapArrow.class);\n+\n+    private static MiniHS2 miniHS2 = null;\n+    private static final String tableName = \"testKillTezAmTbl\";\n+    private static String dataFileDir;\n+    private static final String testDbName = \"testKillTezAmDb\";\n+    protected static Connection hs2Conn = null;\n+    private static HiveConf conf;\n+\n+    private static class ExceptionHolder {\n+        Throwable throwable;\n+    }\n+\n+    static HiveConf defaultConf() throws Exception {\n+        String confDir = \"../../data/conf/llap/\";\n+        if (confDir != null && !confDir.isEmpty()) {\n+            HiveConf.setHiveSiteLocation(new URL(\"file://\"+ new File(confDir).toURI().getPath() + \"/hive-site.xml\"));\n+            System.out.println(\"Setting hive-site: \" + HiveConf.getHiveSiteLocation());\n+        }\n+        HiveConf defaultConf = new HiveConf();\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS, false);\n+        defaultConf.addResource(new URL(\"file://\" + new File(confDir).toURI().getPath() + \"/tez-site.xml\"));\n+        return defaultConf;\n+    }\n+\n+    @BeforeClass\n+    public static void beforeTest() throws Exception {\n+        conf = defaultConf();\n+        conf.setVar(HiveConf.ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(\"user.name\"));\n+        conf.set(HiveConf.ConfVars.HIVE_QUERY_REEXECUTION_STRATEGIES.varname, \"reexecute_lost_am\");\n+        MiniHS2.cleanupLocalDir();\n+        Class.forName(MiniHS2.getJdbcDriverName());\n+        miniHS2 = new MiniHS2(conf, MiniHS2.MiniClusterType.LLAP);\n+        dataFileDir = conf.get(\"test.data.files\").replace('\\\\', '/').replace(\"c:\", \"\");\n+        Map<String, String> confOverlay = new HashMap<String, String>();\n+        miniHS2.start(confOverlay);\n+        miniHS2.getDFS().getFileSystem().mkdirs(new Path(\"/apps_staging_dir/anonymous\"));\n+\n+        Connection conDefault = getConnection(miniHS2.getJdbcURL(),\n+                System.getProperty(\"user.name\"), \"bar\");\n+        Statement stmt = conDefault.createStatement();\n+        String tblName = testDbName + \".\" + tableName;\n+        Path dataFilePath = new Path(dataFileDir, \"kv1.txt\");\n+        String udfName = TestJdbcWithMiniLlapArrow.SleepMsUDF.class.getName();\n+        stmt.execute(\"drop database if exists \" + testDbName + \" cascade\");\n+        stmt.execute(\"create database \" + testDbName);\n+        stmt.execute(\"set role admin\");\n+        stmt.execute(\"dfs -put \" + dataFilePath.toString() + \" \" + \"kv1.txt\");\n+        stmt.execute(\"use \" + testDbName);\n+        stmt.execute(\"create table \" + tblName + \" (int_col int, value string) \");\n+        stmt.execute(\"load data inpath 'kv1.txt' into table \" + tblName);\n+        stmt.execute(\"create function sleepMsUDF as '\" + udfName + \"'\");\n+        stmt.execute(\"grant select on table \" + tblName + \" to role public\");\n+\n+        stmt.close();\n+        conDefault.close();\n+    }\n+\n+    @AfterClass\n+    public static void afterTest() {\n+        if (miniHS2 != null && miniHS2.isStarted()) {\n+            miniHS2.stop();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        hs2Conn = getConnection(miniHS2.getJdbcURL(), System.getProperty(\"user.name\"), \"bar\");\n+    }\n+\n+    public static Connection getConnection(String jdbcURL, String user, String pwd) throws SQLException {\n+        Connection conn = DriverManager.getConnection(jdbcURL, user, pwd);\n+        conn.createStatement().execute(\"set hive.support.concurrency = false\");\n+        return conn;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        LlapBaseInputFormat.closeAll();\n+        hs2Conn.close();\n+    }\n+\n+\n+\n+    @Test\n+    public void testKillQueryById() throws Exception {\n+        String user = System.getProperty(\"user.name\");\n+        Connection con1 = getConnection(miniHS2.getJdbcURL(testDbName),\n+                user, \"bar\");\n+\n+        final HiveStatement stmt = (HiveStatement)con1.createStatement();\n+        final StringBuffer stmtQueryId = new StringBuffer();\n+        ExceptionHolder originalQExHolder = new ExceptionHolder();\n+        originalQExHolder.throwable = null;\n+\n+        // Thread executing the query\n+        Thread tExecute = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    System.out.println(\"Executing query: \");\n+                    stmt.execute(\"set hive.llap.execution.mode = none\");\n+\n+                    // The test table has 500 rows, so total query time should be ~ 500*500ms\n+                    stmt.executeAsync(\"select sleepMsUDF(t1.int_col, 100), t1.int_col, t2.int_col \" +\n+                            \"from \" + tableName + \" t1 join \" + tableName + \" t2 on t1.int_col = t2.int_col\");\n+                    stmtQueryId.append(stmt.getQueryId());\n+                    stmt.getUpdateCount();\n+                } catch (SQLException e) {\n+                    originalQExHolder.throwable = e;\n+                }\n+            }\n+        });\n+\n+        tExecute.start();\n+\n+        // wait for other thread to create the stmt handle\n+        int count = 0;\n+        while (++count <= 10) {\n+                Thread.sleep(2000);\n+                String queryId;\n+                if (stmtQueryId.length() != 0) {\n+                    queryId = stmtQueryId.toString();\n+                } else {\n+                    continue;\n+                }\n+                System.out.println(\"Killing query: \" + queryId);\n+                killAMForQueryId(queryId);\n+                break;\n+        }\n+\n+        tExecute.join();\n+        Assert.assertEquals(originalQExHolder.throwable, null);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxMzAyNg==", "bodyText": "Not just decommissioned case. We retry, even if AM is killed manually. So, let's keep it \"...due to tez AM being killed.\"", "url": "https://github.com/apache/hive/pull/1146#discussion_r444413026", "createdAt": "2020-06-23T18:08:09Z", "author": {"login": "sankarh"}, "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -4979,10 +4979,11 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n \n     HIVE_QUERY_REEXECUTION_ENABLED(\"hive.query.reexecution.enabled\", true,\n         \"Enable query reexecutions\"),\n-    HIVE_QUERY_REEXECUTION_STRATEGIES(\"hive.query.reexecution.strategies\", \"overlay,reoptimize\",\n+    HIVE_QUERY_REEXECUTION_STRATEGIES(\"hive.query.reexecution.strategies\", \"overlay,reoptimize,reexecute_lost_am\",\n         \"comma separated list of plugin can be used:\\n\"\n             + \"  overlay: hiveconf subtree 'reexec.overlay' is used as an overlay in case of an execution errors out\\n\"\n-            + \"  reoptimize: collects operator statistics during execution and recompile the query after a failure\"),\n+            + \"  reoptimize: collects operator statistics during execution and recompile the query after a failure\\n\"\n+            + \"  reexecute_lost_am: reexecutes query if it failed due to tez am node gets decommissioned\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNDA4NA==", "bodyText": "Based on -100 exitcode, can we differentiate if the query was killed by \"KILL QUERY\" command or just Tez AM got killed? If killed by KILL QUERY, then we shouldn't retry.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444414084", "createdAt": "2020-06-23T18:09:58Z", "author": {"login": "sankarh"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/reexec/ReExecuteLostAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.hive.ql.Driver;\n+import org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;\n+import org.apache.hadoop.hive.ql.hooks.HookContext;\n+import org.apache.hadoop.hive.ql.plan.mapper.PlanMapper;\n+\n+import java.util.regex.Pattern;\n+\n+public class ReExecuteLostAMQueryPlugin implements IReExecutionPlugin {\n+    private boolean retryPossible;\n+\n+    // Lost am container have exit code -100, due to node failures.\n+    private Pattern lostAMContainerErrorPattern = Pattern.compile(\".*AM Container for .* exited .* exitCode: -100.*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNTExOQ==", "bodyText": "TestReExecuteKilledTezAMQueryPlugin.class can be used as logger argument.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444415119", "createdAt": "2020-06-23T18:11:57Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.llap.LlapBaseInputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.BaseJdbcWithMiniLlap;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+    protected static final Logger LOG = LoggerFactory.getLogger(TestJdbcWithMiniLlapArrow.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNjkwMw==", "bodyText": "Can see unused imports. Pls remove them.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444416903", "createdAt": "2020-06-23T18:15:03Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.llap.LlapBaseInputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.BaseJdbcWithMiniLlap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNzM0Ng==", "bodyText": "Why need LlapBaseInputFormat.closeAll?", "url": "https://github.com/apache/hive/pull/1146#discussion_r444417346", "createdAt": "2020-06-23T18:15:52Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.llap.LlapBaseInputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.BaseJdbcWithMiniLlap;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+    protected static final Logger LOG = LoggerFactory.getLogger(TestJdbcWithMiniLlapArrow.class);\n+\n+    private static MiniHS2 miniHS2 = null;\n+    private static final String tableName = \"testKillTezAmTbl\";\n+    private static String dataFileDir;\n+    private static final String testDbName = \"testKillTezAmDb\";\n+    protected static Connection hs2Conn = null;\n+    private static HiveConf conf;\n+\n+    private static class ExceptionHolder {\n+        Throwable throwable;\n+    }\n+\n+    static HiveConf defaultConf() throws Exception {\n+        String confDir = \"../../data/conf/llap/\";\n+        if (confDir != null && !confDir.isEmpty()) {\n+            HiveConf.setHiveSiteLocation(new URL(\"file://\"+ new File(confDir).toURI().getPath() + \"/hive-site.xml\"));\n+            System.out.println(\"Setting hive-site: \" + HiveConf.getHiveSiteLocation());\n+        }\n+        HiveConf defaultConf = new HiveConf();\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+        defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS, false);\n+        defaultConf.addResource(new URL(\"file://\" + new File(confDir).toURI().getPath() + \"/tez-site.xml\"));\n+        return defaultConf;\n+    }\n+\n+    @BeforeClass\n+    public static void beforeTest() throws Exception {\n+        conf = defaultConf();\n+        conf.setVar(HiveConf.ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(\"user.name\"));\n+        conf.set(HiveConf.ConfVars.HIVE_QUERY_REEXECUTION_STRATEGIES.varname, \"reexecute_lost_am\");\n+        MiniHS2.cleanupLocalDir();\n+        Class.forName(MiniHS2.getJdbcDriverName());\n+        miniHS2 = new MiniHS2(conf, MiniHS2.MiniClusterType.LLAP);\n+        dataFileDir = conf.get(\"test.data.files\").replace('\\\\', '/').replace(\"c:\", \"\");\n+        Map<String, String> confOverlay = new HashMap<String, String>();\n+        miniHS2.start(confOverlay);\n+        miniHS2.getDFS().getFileSystem().mkdirs(new Path(\"/apps_staging_dir/anonymous\"));\n+\n+        Connection conDefault = getConnection(miniHS2.getJdbcURL(),\n+                System.getProperty(\"user.name\"), \"bar\");\n+        Statement stmt = conDefault.createStatement();\n+        String tblName = testDbName + \".\" + tableName;\n+        Path dataFilePath = new Path(dataFileDir, \"kv1.txt\");\n+        String udfName = TestJdbcWithMiniLlapArrow.SleepMsUDF.class.getName();\n+        stmt.execute(\"drop database if exists \" + testDbName + \" cascade\");\n+        stmt.execute(\"create database \" + testDbName);\n+        stmt.execute(\"set role admin\");\n+        stmt.execute(\"dfs -put \" + dataFilePath.toString() + \" \" + \"kv1.txt\");\n+        stmt.execute(\"use \" + testDbName);\n+        stmt.execute(\"create table \" + tblName + \" (int_col int, value string) \");\n+        stmt.execute(\"load data inpath 'kv1.txt' into table \" + tblName);\n+        stmt.execute(\"create function sleepMsUDF as '\" + udfName + \"'\");\n+        stmt.execute(\"grant select on table \" + tblName + \" to role public\");\n+\n+        stmt.close();\n+        conDefault.close();\n+    }\n+\n+    @AfterClass\n+    public static void afterTest() {\n+        if (miniHS2 != null && miniHS2.isStarted()) {\n+            miniHS2.stop();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        hs2Conn = getConnection(miniHS2.getJdbcURL(), System.getProperty(\"user.name\"), \"bar\");\n+    }\n+\n+    public static Connection getConnection(String jdbcURL, String user, String pwd) throws SQLException {\n+        Connection conn = DriverManager.getConnection(jdbcURL, user, pwd);\n+        conn.createStatement().execute(\"set hive.support.concurrency = false\");\n+        return conn;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        LlapBaseInputFormat.closeAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7d1f554c5ed0970e00b2f6d5e5537dcc46bcaf"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzQzMDgw", "url": "https://github.com/apache/hive/pull/1146#pullrequestreview-436343080", "createdAt": "2020-06-24T05:54:35Z", "commit": {"oid": "9d0fad3089ca949df319b827cc6d76b348a5347d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1NDozNVrOGoD5zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1NDozNVrOGoD5zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDE3Mw==", "bodyText": "Unaligned to 2 spaces tab. Check other methods too. It seems only annotation is corrected.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444660173", "createdAt": "2020-06-24T05:54:35Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+  protected static final Logger LOG = LoggerFactory.getLogger(TestReExecuteKilledTezAMQueryPlugin.class);\n+\n+  private static MiniHS2 miniHS2 = null;\n+  private static final String tableName = \"testKillTezAmTbl\";\n+  private static String dataFileDir;\n+  private static final String testDbName = \"testKillTezAmDb\";\n+  protected static Connection hs2Conn = null;\n+  private static HiveConf conf;\n+\n+  private static class ExceptionHolder {\n+    Throwable throwable;\n+  }\n+\n+  static HiveConf defaultConf() throws Exception {\n+    String confDir = \"../../data/conf/llap/\";\n+    if (confDir != null && !confDir.isEmpty()) {\n+      HiveConf.setHiveSiteLocation(new URL(\"file://\"+ new File(confDir).toURI().getPath() + \"/hive-site.xml\"));\n+      System.out.println(\"Setting hive-site: \" + HiveConf.getHiveSiteLocation());\n+    }\n+    HiveConf defaultConf = new HiveConf();\n+    defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+    defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS, false);\n+    defaultConf.addResource(new URL(\"file://\" + new File(confDir).toURI().getPath() + \"/tez-site.xml\"));\n+    return defaultConf;\n+  }\n+\n+  @BeforeClass\n+    public static void beforeTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d0fad3089ca949df319b827cc6d76b348a5347d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzQzNjA2", "url": "https://github.com/apache/hive/pull/1146#pullrequestreview-436343606", "createdAt": "2020-06-24T05:55:53Z", "commit": {"oid": "9d0fad3089ca949df319b827cc6d76b348a5347d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1NTo1M1rOGoD7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1NTo1M1rOGoD7WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDU2OA==", "bodyText": "hs2Conn is unused. Shall remove it.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444660568", "createdAt": "2020-06-24T05:55:53Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+  protected static final Logger LOG = LoggerFactory.getLogger(TestReExecuteKilledTezAMQueryPlugin.class);\n+\n+  private static MiniHS2 miniHS2 = null;\n+  private static final String tableName = \"testKillTezAmTbl\";\n+  private static String dataFileDir;\n+  private static final String testDbName = \"testKillTezAmDb\";\n+  protected static Connection hs2Conn = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d0fad3089ca949df319b827cc6d76b348a5347d"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzQ0MDM3", "url": "https://github.com/apache/hive/pull/1146#pullrequestreview-436344037", "createdAt": "2020-06-24T05:56:54Z", "commit": {"oid": "9d0fad3089ca949df319b827cc6d76b348a5347d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1Njo1NFrOGoD8oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1Njo1NFrOGoD8oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDg5Ng==", "bodyText": "Shall move try { to next line.", "url": "https://github.com/apache/hive/pull/1146#discussion_r444660896", "createdAt": "2020-06-24T05:56:54Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/reexec/TestReExecuteKilledTezAMQueryPlugin.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.reexec;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.yarn.api.records.ApplicationReport;\n+import org.apache.hadoop.yarn.api.records.YarnApplicationState;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hive.jdbc.HiveStatement;\n+import org.apache.hive.jdbc.TestJdbcWithMiniLlapArrow;\n+import org.apache.hive.jdbc.miniHS2.MiniHS2;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TestReExecuteKilledTezAMQueryPlugin {\n+  protected static final Logger LOG = LoggerFactory.getLogger(TestReExecuteKilledTezAMQueryPlugin.class);\n+\n+  private static MiniHS2 miniHS2 = null;\n+  private static final String tableName = \"testKillTezAmTbl\";\n+  private static String dataFileDir;\n+  private static final String testDbName = \"testKillTezAmDb\";\n+  protected static Connection hs2Conn = null;\n+  private static HiveConf conf;\n+\n+  private static class ExceptionHolder {\n+    Throwable throwable;\n+  }\n+\n+  static HiveConf defaultConf() throws Exception {\n+    String confDir = \"../../data/conf/llap/\";\n+    if (confDir != null && !confDir.isEmpty()) {\n+      HiveConf.setHiveSiteLocation(new URL(\"file://\"+ new File(confDir).toURI().getPath() + \"/hive-site.xml\"));\n+      System.out.println(\"Setting hive-site: \" + HiveConf.getHiveSiteLocation());\n+    }\n+    HiveConf defaultConf = new HiveConf();\n+    defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+    defaultConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS, false);\n+    defaultConf.addResource(new URL(\"file://\" + new File(confDir).toURI().getPath() + \"/tez-site.xml\"));\n+    return defaultConf;\n+  }\n+\n+  @BeforeClass\n+    public static void beforeTest() throws Exception {\n+      conf = defaultConf();\n+      conf.setVar(HiveConf.ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(\"user.name\"));\n+      conf.set(HiveConf.ConfVars.HIVE_QUERY_REEXECUTION_STRATEGIES.varname, \"reexecute_lost_am\");\n+      MiniHS2.cleanupLocalDir();\n+      Class.forName(MiniHS2.getJdbcDriverName());\n+      miniHS2 = new MiniHS2(conf, MiniHS2.MiniClusterType.LLAP);\n+      dataFileDir = conf.get(\"test.data.files\").replace('\\\\', '/').replace(\"c:\", \"\");\n+      Map<String, String> confOverlay = new HashMap<String, String>();\n+      miniHS2.start(confOverlay);\n+      miniHS2.getDFS().getFileSystem().mkdirs(new Path(\"/apps_staging_dir/anonymous\"));\n+\n+      Connection conDefault = getConnection(miniHS2.getJdbcURL(),\n+      System.getProperty(\"user.name\"), \"bar\");\n+      Statement stmt = conDefault.createStatement();\n+      String tblName = testDbName + \".\" + tableName;\n+      Path dataFilePath = new Path(dataFileDir, \"kv1.txt\");\n+      String udfName = TestJdbcWithMiniLlapArrow.SleepMsUDF.class.getName();\n+      stmt.execute(\"drop database if exists \" + testDbName + \" cascade\");\n+      stmt.execute(\"create database \" + testDbName);\n+      stmt.execute(\"set role admin\");\n+      stmt.execute(\"dfs -put \" + dataFilePath.toString() + \" \" + \"kv1.txt\");\n+      stmt.execute(\"use \" + testDbName);\n+      stmt.execute(\"create table \" + tblName + \" (int_col int, value string) \");\n+      stmt.execute(\"load data inpath 'kv1.txt' into table \" + tblName);\n+      stmt.execute(\"create function sleepMsUDF as '\" + udfName + \"'\");\n+      stmt.execute(\"grant select on table \" + tblName + \" to role public\");\n+\n+      stmt.close();\n+      conDefault.close();\n+    }\n+\n+  @AfterClass\n+    public static void afterTest() {\n+      if (miniHS2 != null && miniHS2.isStarted()) {\n+        miniHS2.stop();\n+      }\n+    }\n+\n+  @Before\n+    public void setUp() throws Exception {\n+      hs2Conn = getConnection(miniHS2.getJdbcURL(), System.getProperty(\"user.name\"), \"bar\");\n+    }\n+\n+  public static Connection getConnection(String jdbcURL, String user, String pwd) throws SQLException {\n+    Connection conn = DriverManager.getConnection(jdbcURL, user, pwd);\n+    conn.createStatement().execute(\"set hive.support.concurrency = false\");\n+    return conn;\n+  }\n+\n+  @After\n+    public void tearDown() throws Exception {\n+      hs2Conn.close();\n+    }\n+\n+    @Test\n+    public void testKillQueryById() throws Exception {\n+      String user = System.getProperty(\"user.name\");\n+      Connection con1 = getConnection(miniHS2.getJdbcURL(testDbName), user, \"bar\");\n+\n+      final HiveStatement stmt = (HiveStatement)con1.createStatement();\n+      final StringBuffer stmtQueryId = new StringBuffer();\n+      ExceptionHolder originalQExHolder = new ExceptionHolder();\n+      originalQExHolder.throwable = null;\n+\n+      // Thread executing the query\n+      Thread tExecute = new Thread(new Runnable() {\n+        @Override\n+        public void run() {\n+          try {\n+            System.out.println(\"Executing query: \");\n+            stmt.execute(\"set hive.llap.execution.mode = none\");\n+\n+            // The test table has 500 rows, so total query time should be ~ 500*100ms\n+            stmt.executeAsync(\"select sleepMsUDF(t1.int_col, 100), t1.int_col, t2.int_col \" +\n+            \"from \" + tableName + \" t1 join \" + tableName + \" t2 on t1.int_col = t2.int_col\");\n+            stmtQueryId.append(stmt.getQueryId());\n+            stmt.getUpdateCount();\n+          } catch (SQLException e) {\n+            originalQExHolder.throwable = e;\n+          }\n+        }\n+      });\n+\n+      tExecute.start();\n+\n+      // wait for other thread to create the stmt handle\n+      int count = 0;\n+      while (++count <= 10) {\n+        Thread.sleep(2000);\n+        if (stmtQueryId.length() != 0) {\n+          String queryId = stmtQueryId.toString();\n+          System.out.println(\"Killing query: \" + queryId);\n+          killAMForQueryId(queryId);\n+          break;\n+        }\n+      }\n+\n+      tExecute.join();try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d0fad3089ca949df319b827cc6d76b348a5347d"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDk2NjI1", "url": "https://github.com/apache/hive/pull/1146#pullrequestreview-436496625", "createdAt": "2020-06-24T09:52:59Z", "commit": {"oid": "df6e2f2c1161acd8729a817d1750a569917d96e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df6e2f2c1161acd8729a817d1750a569917d96e5", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/df6e2f2c1161acd8729a817d1750a569917d96e5", "committedDate": "2020-06-24T06:14:07Z", "message": "fix indentation p2"}, "afterCommit": {"oid": "832fe3aff75d08614cae0402cedf01e8138503b3", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/832fe3aff75d08614cae0402cedf01e8138503b3", "committedDate": "2020-06-24T13:39:48Z", "message": "fix indentation p2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "832fe3aff75d08614cae0402cedf01e8138503b3", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/832fe3aff75d08614cae0402cedf01e8138503b3", "committedDate": "2020-06-24T13:39:48Z", "message": "fix indentation p2"}, "afterCommit": {"oid": "443330e39a216a21c200ccae41873978a32d40fa", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/443330e39a216a21c200ccae41873978a32d40fa", "committedDate": "2020-06-25T05:47:52Z", "message": "Fix indentation\n\nfix indentation p2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d92d609bababf6e9f856485def76c6b356c2402", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/0d92d609bababf6e9f856485def76c6b356c2402", "committedDate": "2020-06-25T12:39:21Z", "message": "Add new reexecute plugin to rerun queries in case AM is down due to lost\nnode\n\n(cherry picked from commit 362321f7cc88491547d136c0a7c59f63bcbab896)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304afb42d72716aba8138591d382c4d15ef568ce", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/304afb42d72716aba8138591d382c4d15ef568ce", "committedDate": "2020-06-25T12:39:21Z", "message": "Add license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af0502b9fef6d63a3dbd3c2b07ab6d974c7c6d62", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/af0502b9fef6d63a3dbd3c2b07ab6d974c7c6d62", "committedDate": "2020-06-25T12:39:21Z", "message": "Dummy commit to re-run tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49aff82d2baccb5ed5e48f6f9b86ba45f3f3d61b", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/49aff82d2baccb5ed5e48f6f9b86ba45f3f3d61b", "committedDate": "2020-06-25T12:39:21Z", "message": "enable by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8635e52b331c0b66c43cb5eb22101ffc7273844", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/c8635e52b331c0b66c43cb5eb22101ffc7273844", "committedDate": "2020-06-25T12:39:21Z", "message": "Add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4efdf893fc55f68f33860e3e2747e92d0c5a04", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/ff4efdf893fc55f68f33860e3e2747e92d0c5a04", "committedDate": "2020-06-25T12:39:21Z", "message": "Refactor test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e77df93d590a8afdb52ea51bdff87dad3758cf0d", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/e77df93d590a8afdb52ea51bdff87dad3758cf0d", "committedDate": "2020-06-25T12:39:21Z", "message": "Remove old references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a6975f5ee176b6b9952f7eeaf7cb1be9e504036", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/8a6975f5ee176b6b9952f7eeaf7cb1be9e504036", "committedDate": "2020-06-25T12:39:21Z", "message": "Fix asserts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba318e93b33339b32f0626118b456876f130b2f9", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/ba318e93b33339b32f0626118b456876f130b2f9", "committedDate": "2020-06-25T12:39:21Z", "message": "Rename variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d842d9fda11ae2a33bf906dcb617e1ac0db47576", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/d842d9fda11ae2a33bf906dcb617e1ac0db47576", "committedDate": "2020-06-25T12:39:21Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e59dc88e99d6d66a47ec313be64d7eb027d0d07", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/2e59dc88e99d6d66a47ec313be64d7eb027d0d07", "committedDate": "2020-06-25T12:39:21Z", "message": "Fix indentation\n\nfix indentation p2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "443330e39a216a21c200ccae41873978a32d40fa", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/443330e39a216a21c200ccae41873978a32d40fa", "committedDate": "2020-06-25T05:47:52Z", "message": "Fix indentation\n\nfix indentation p2"}, "afterCommit": {"oid": "2e59dc88e99d6d66a47ec313be64d7eb027d0d07", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/2e59dc88e99d6d66a47ec313be64d7eb027d0d07", "committedDate": "2020-06-25T12:39:21Z", "message": "Fix indentation\n\nfix indentation p2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3668, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}