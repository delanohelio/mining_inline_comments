{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjU0Njg5", "number": 1405, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo0NTo1M1rOEb5c6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNToyMDowNlrOEb5_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njg4Mjk2OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo0NTo1M1rOHGHD8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyNjozMFrOHGaveA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2OTIwMQ==", "bodyText": "nit.: Is the parameter value always HiveRelFactories.HIVE_BUILDER ? It can be moved to the base class as a constant.", "url": "https://github.com/apache/hive/pull/1405#discussion_r476169201", "createdAt": "2020-08-25T04:45:53Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java", "diffHunk": "@@ -33,194 +37,263 @@\n import org.apache.calcite.rex.RexBuilder;\n import org.apache.calcite.rex.RexNode;\n import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilder.GroupKey;\n import org.apache.calcite.tools.RelBuilderFactory;\n import org.apache.calcite.util.ImmutableBitSet;\n+import org.apache.calcite.util.ImmutableIntList;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.HiveCalciteUtil;\n import org.apache.hadoop.hive.ql.optimizer.calcite.HiveRelFactories;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Planner rule that creates a {@code SemiJoinRule} from a\n- * {@link org.apache.calcite.rel.core.Join} on top of a\n- * {@link org.apache.calcite.rel.logical.LogicalAggregate}.\n- *\n- * TODO Remove this rule and use Calcite's SemiJoinRule. Not possible currently\n- * since Calcite doesnt use RelBuilder for this rule and we want to generate HiveSemiJoin rel here.\n+ * Class that gathers SemiJoin conversion rules.\n  */\n-public abstract class HiveSemiJoinRule extends RelOptRule {\n+public class HiveSemiJoinRule {\n \n-  protected static final Logger LOG = LoggerFactory.getLogger(HiveSemiJoinRule.class);\n+  public static final HiveProjectJoinToSemiJoinRule INSTANCE_PROJECT =\n+      new HiveProjectJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveProjectToSemiJoinRule INSTANCE_PROJECT =\n-      new HiveProjectToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveAggregateJoinToSemiJoinRule INSTANCE_AGGREGATE =\n+      new HiveAggregateJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveProjectToSemiJoinRuleSwapInputs INSTANCE_PROJECT_SWAPPED =\n-      new HiveProjectToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveProjectJoinToSemiJoinRuleSwapInputs INSTANCE_PROJECT_SWAPPED =\n+      new HiveProjectJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveAggregateToSemiJoinRule INSTANCE_AGGREGATE =\n-      new HiveAggregateToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveAggregateJoinToSemiJoinRuleSwapInputs INSTANCE_AGGREGATE_SWAPPED =\n+      new HiveAggregateJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4abe7aae82b33d877cea7c04e1ea54534ac08844"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MTY0MA==", "bodyText": "done.", "url": "https://github.com/apache/hive/pull/1405#discussion_r476491640", "createdAt": "2020-08-25T14:26:30Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java", "diffHunk": "@@ -33,194 +37,263 @@\n import org.apache.calcite.rex.RexBuilder;\n import org.apache.calcite.rex.RexNode;\n import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilder.GroupKey;\n import org.apache.calcite.tools.RelBuilderFactory;\n import org.apache.calcite.util.ImmutableBitSet;\n+import org.apache.calcite.util.ImmutableIntList;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.HiveCalciteUtil;\n import org.apache.hadoop.hive.ql.optimizer.calcite.HiveRelFactories;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Planner rule that creates a {@code SemiJoinRule} from a\n- * {@link org.apache.calcite.rel.core.Join} on top of a\n- * {@link org.apache.calcite.rel.logical.LogicalAggregate}.\n- *\n- * TODO Remove this rule and use Calcite's SemiJoinRule. Not possible currently\n- * since Calcite doesnt use RelBuilder for this rule and we want to generate HiveSemiJoin rel here.\n+ * Class that gathers SemiJoin conversion rules.\n  */\n-public abstract class HiveSemiJoinRule extends RelOptRule {\n+public class HiveSemiJoinRule {\n \n-  protected static final Logger LOG = LoggerFactory.getLogger(HiveSemiJoinRule.class);\n+  public static final HiveProjectJoinToSemiJoinRule INSTANCE_PROJECT =\n+      new HiveProjectJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveProjectToSemiJoinRule INSTANCE_PROJECT =\n-      new HiveProjectToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveAggregateJoinToSemiJoinRule INSTANCE_AGGREGATE =\n+      new HiveAggregateJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveProjectToSemiJoinRuleSwapInputs INSTANCE_PROJECT_SWAPPED =\n-      new HiveProjectToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveProjectJoinToSemiJoinRuleSwapInputs INSTANCE_PROJECT_SWAPPED =\n+      new HiveProjectJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveAggregateToSemiJoinRule INSTANCE_AGGREGATE =\n-      new HiveAggregateToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveAggregateJoinToSemiJoinRuleSwapInputs INSTANCE_AGGREGATE_SWAPPED =\n+      new HiveAggregateJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2OTIwMQ=="}, "originalCommit": {"oid": "4abe7aae82b33d877cea7c04e1ea54534ac08844"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njk3MTgxOnYy", "diffSide": "RIGHT", "path": "ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNToyMDowNlrOHGH8kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyMzozNlrOHGamfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MzY5Nw==", "bodyText": "Based on the test filename this test intend to test automatic conversion to a sort-merge join but it is not tested anymore if the feature is turned off.", "url": "https://github.com/apache/hive/pull/1405#discussion_r476183697", "createdAt": "2020-08-25T05:20:06Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q", "diffHunk": "@@ -48,6 +48,8 @@ select count(*) from\n   (select a.key as key, a.value as value from tbl2_n4 a where key < 6) subq2\n   on subq1.key = subq2.key;\n \n+set hive.auto.convert.sortmerge.join=false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4abe7aae82b33d877cea7c04e1ea54534ac08844"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4OTM0Mg==", "bodyText": "Yes, this will be tackled in follow-up by @maheshk114 , there is a problem with execution of semijoin. I will reference the JIRA.", "url": "https://github.com/apache/hive/pull/1405#discussion_r476489342", "createdAt": "2020-08-25T14:23:36Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q", "diffHunk": "@@ -48,6 +48,8 @@ select count(*) from\n   (select a.key as key, a.value as value from tbl2_n4 a where key < 6) subq2\n   on subq1.key = subq2.key;\n \n+set hive.auto.convert.sortmerge.join=false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MzY5Nw=="}, "originalCommit": {"oid": "4abe7aae82b33d877cea7c04e1ea54534ac08844"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 525, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}