{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTI3OTY3", "number": 1440, "title": "HIVE-24087 FK side join elimination in presence of PK-FK constraint", "bodyText": "What changes were proposed in this pull request?\n\nWhy are the changes needed?\n\nDoes this PR introduce any user-facing change?\n\nHow was this patch tested?", "createdAt": "2020-08-27T20:19:52Z", "url": "https://github.com/apache/hive/pull/1440", "merged": true, "mergeCommit": {"oid": "13ccaaf6845422286001fa97eb99370de3f5ca42"}, "closed": true, "closedAt": "2020-09-01T15:15:26Z", "author": {"login": "vineetgarg02"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDM3Q_AFqTQ3NzIyNDkzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEbFN2ABqjM3MTIwMDgyMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjI0OTM2", "url": "https://github.com/apache/hive/pull/1440#pullrequestreview-477224936", "createdAt": "2020-08-28T03:58:14Z", "commit": {"oid": "89377e579f398816ea23f914d55a76feede36929"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3Nzc2NDUw", "url": "https://github.com/apache/hive/pull/1440#pullrequestreview-477776450", "createdAt": "2020-08-28T14:29:26Z", "commit": {"oid": "89377e579f398816ea23f914d55a76feede36929"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDoyOToyNlrOHJIw8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDoyOToyNlrOHJIw8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MjgzNQ==", "bodyText": "why do we skip all other kinds which are not EQUALS?\nI think instead there should be a return here instead of a continue", "url": "https://github.com/apache/hive/pull/1440#discussion_r479342835", "createdAt": "2020-08-28T14:29:26Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveJoinConstraintsRule.java", "diffHunk": "@@ -213,61 +218,137 @@ public void onMatch(RelOptRuleCall call) {\n \n     // 2) Check whether this join can be rewritten or removed\n     RewritablePKFKJoinInfo r = HiveRelOptUtil.isRewritablePKFKJoin(\n-        join, leftInput == fkInput, call.getMetadataQuery());\n+        join, fkInput,  nonFkInput, call.getMetadataQuery());\n \n     // 3) If it is the only condition, we can trigger the rewriting\n     if (r.rewritable) {\n-      List<RexNode> nullableNodes = r.nullableNodes;\n-      // If we reach here, we trigger the transform\n-      if (mode == Mode.REMOVE) {\n-        if (rightInputPotentialFK) {\n-          // First, if FK is the right input, we need to shift\n-          nullableNodes = nullableNodes.stream()\n-              .map(node -> RexUtil.shift(node, 0, -leftInput.getRowType().getFieldCount()))\n-              .collect(Collectors.toList());\n-          topProjExprs = topProjExprs.stream()\n-              .map(node -> RexUtil.shift(node, 0, -leftInput.getRowType().getFieldCount()))\n-              .collect(Collectors.toList());\n-        }\n-        // Fix nullability in references to the input node\n-        topProjExprs = HiveCalciteUtil.fixNullability(rexBuilder, topProjExprs, RelOptUtil.getFieldTypeList(fkInput.getRowType()));\n-        // Trigger transformation\n-        if (nullableNodes.isEmpty()) {\n-          call.transformTo(call.builder()\n-              .push(fkInput)\n-              .project(topProjExprs)\n-              .convert(project.getRowType(), false)\n-              .build());\n+      rewrite(mode, fkInput, nonFkInput, join, topProjExprs, call, project, r.nullableNodes);\n+    } else {\n+      // check if FK side could be removed instead\n+\n+      // Possibly this could be enhanced to take other join type into consideration.\n+      if (joinType != JoinRelType.INNER) {\n+        return;\n+      }\n+\n+      //first swap fk and non-fk input and see if we can rewrite them\n+      RewritablePKFKJoinInfo fkRemoval = HiveRelOptUtil.isRewritablePKFKJoin(\n+          join, nonFkInput, fkInput, call.getMetadataQuery());\n+\n+      if (fkRemoval.rewritable) {\n+        // we have established that nonFkInput is FK, and fkInput is PK\n+        // and there is no row filtering on FK side\n+\n+        // check that FK side join column is distinct (i.e. have a group by)\n+        ImmutableBitSet fkSideBitSet;\n+        if (nonFkInput == leftInput) {\n+          fkSideBitSet = leftBits;\n         } else {\n-          RexNode newFilterCond;\n-          if (nullableNodes.size() == 1) {\n-            newFilterCond = rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, nullableNodes.get(0));\n-          } else {\n-            List<RexNode> isNotNullConds = new ArrayList<>();\n-            for (RexNode nullableNode : nullableNodes) {\n-              isNotNullConds.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, nullableNode));\n+          fkSideBitSet = rightBits;\n+        }\n+\n+        ImmutableBitSet.Builder fkJoinColBuilder = ImmutableBitSet.builder();\n+        for (RexNode conj : RelOptUtil.conjunctions(cond)) {\n+          if (!conj.isA(SqlKind.EQUALS)) {\n+            continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89377e579f398816ea23f914d55a76feede36929"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTE5MDU4", "url": "https://github.com/apache/hive/pull/1440#pullrequestreview-477919058", "createdAt": "2020-08-28T17:49:38Z", "commit": {"oid": "0befb9f4ee0691adc87850ff7ae9bddddf2904cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo0OTozOFrOHJPZKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo0OTozOFrOHJPZKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MTQzMg==", "bodyText": "nit. Use guava preconditions instead of Parquet.", "url": "https://github.com/apache/hive/pull/1440#discussion_r479451432", "createdAt": "2020-08-28T17:49:38Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/HiveRelOptUtil.java", "diffHunk": "@@ -75,6 +75,7 @@\n import org.apache.hadoop.hive.ql.optimizer.calcite.translator.TypeConverter;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.apache.parquet.Preconditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0befb9f4ee0691adc87850ff7ae9bddddf2904cc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTE5NDQx", "url": "https://github.com/apache/hive/pull/1440#pullrequestreview-477919441", "createdAt": "2020-08-28T17:50:15Z", "commit": {"oid": "0befb9f4ee0691adc87850ff7ae9bddddf2904cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9f412aed58c7660e171e298f513ccbf67f9b6bc", "author": {"user": {"login": "vineetgarg02", "name": "Vineet G"}}, "url": "https://github.com/apache/hive/commit/d9f412aed58c7660e171e298f513ccbf67f9b6bc", "committedDate": "2020-08-31T16:00:05Z", "message": "FK-PK join elimiation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a5f1b7889fbe7130851a1ea456f2f3cf12f92d7", "author": {"user": {"login": "vineetgarg02", "name": "Vineet G"}}, "url": "https://github.com/apache/hive/commit/4a5f1b7889fbe7130851a1ea456f2f3cf12f92d7", "committedDate": "2020-08-31T16:00:06Z", "message": "Addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59c746e3083d94e9097890b9130367fe311e5c6e", "author": {"user": {"login": "vineetgarg02", "name": "Vineet G"}}, "url": "https://github.com/apache/hive/commit/59c746e3083d94e9097890b9130367fe311e5c6e", "committedDate": "2020-08-28T18:27:29Z", "message": "fixing import"}, "afterCommit": {"oid": "1424bdf8a78ecb3a631bae295b14861007b89c78", "author": {"user": {"login": "vineetgarg02", "name": "Vineet G"}}, "url": "https://github.com/apache/hive/commit/1424bdf8a78ecb3a631bae295b14861007b89c78", "committedDate": "2020-08-31T16:00:06Z", "message": "fixing import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d892925c5b294ddf31730f2d7ca8030be598a18f", "author": {"user": {"login": "vineetgarg02", "name": "Vineet G"}}, "url": "https://github.com/apache/hive/commit/d892925c5b294ddf31730f2d7ca8030be598a18f", "committedDate": "2020-08-31T23:05:46Z", "message": "fixing imports"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1424bdf8a78ecb3a631bae295b14861007b89c78", "author": {"user": {"login": "vineetgarg02", "name": "Vineet G"}}, "url": "https://github.com/apache/hive/commit/1424bdf8a78ecb3a631bae295b14861007b89c78", "committedDate": "2020-08-31T16:00:06Z", "message": "fixing import"}, "afterCommit": {"oid": "d892925c5b294ddf31730f2d7ca8030be598a18f", "author": {"user": {"login": "vineetgarg02", "name": "Vineet G"}}, "url": "https://github.com/apache/hive/commit/d892925c5b294ddf31730f2d7ca8030be598a18f", "committedDate": "2020-08-31T23:05:46Z", "message": "fixing imports"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3261, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}