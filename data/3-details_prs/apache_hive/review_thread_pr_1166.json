{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MzgxOTUz", "number": 1166, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0NTo1NVrOEIRm1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0NzowOFrOEIRoqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTEyNTM1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0NTo1NVrOGoIzMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjowMVrOGoMkTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MDQwMA==", "bodyText": "Is the table.equals will work correctly here, as expected? I have seen another PR where we started to create special equals method for table comparison: #1095 - might be conflicting later", "url": "https://github.com/apache/hive/pull/1166#discussion_r444740400", "createdAt": "2020-06-24T08:45:55Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2863,6 +2868,9 @@ private static boolean isLockableTable(Table t) {\n \n         case TABLE:\n           t = input.getTable();\n+          if (!fullTableLock.contains(t)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47efb25d7a915254a01b150a836f72a7f5583d6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMjEyNA==", "bodyText": "table equals compares table names, so should be Ok", "url": "https://github.com/apache/hive/pull/1166#discussion_r444802124", "createdAt": "2020-06-24T10:36:01Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2863,6 +2868,9 @@ private static boolean isLockableTable(Table t) {\n \n         case TABLE:\n           t = input.getTable();\n+          if (!fullTableLock.contains(t)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MDQwMA=="}, "originalCommit": {"oid": "f47efb25d7a915254a01b150a836f72a7f5583d6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTEzMDAzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0NzowOFrOGoI2Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0NTo1NVrOGoM2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MTE1OQ==", "bodyText": "With using 'continue' we do not execute the code after the case statement. Is this intentional?", "url": "https://github.com/apache/hive/pull/1166#discussion_r444741159", "createdAt": "2020-06-24T08:47:08Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2994,12 +3005,13 @@ Seems much cleaner if each stmt is identified as a particular HiveOperation (whi\n         break;\n       case DDL_SHARED:\n         compBuilder.setSharedRead();\n-        if (!output.isTxnAnalyze()) {\n+        if (output.isTxnAnalyze()) {\n           // Analyze needs txn components to be present, otherwise an aborted analyze write ID\n           // might be rolled under the watermark by compactor while stats written by it are\n           // still present.\n-          compBuilder.setOperationType(DataOperationType.NO_TXN);\n+          continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47efb25d7a915254a01b150a836f72a7f5583d6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNjc4MA==", "bodyText": "analyze wasn't adding new locks even before, it tried to add duplicate on table level and failed as there was already one. when i removed table level lock addition, analyze started to fail as it doesn't even populate operation type.", "url": "https://github.com/apache/hive/pull/1166#discussion_r444806780", "createdAt": "2020-06-24T10:45:55Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2994,12 +3005,13 @@ Seems much cleaner if each stmt is identified as a particular HiveOperation (whi\n         break;\n       case DDL_SHARED:\n         compBuilder.setSharedRead();\n-        if (!output.isTxnAnalyze()) {\n+        if (output.isTxnAnalyze()) {\n           // Analyze needs txn components to be present, otherwise an aborted analyze write ID\n           // might be rolled under the watermark by compactor while stats written by it are\n           // still present.\n-          compBuilder.setOperationType(DataOperationType.NO_TXN);\n+          continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MTE1OQ=="}, "originalCommit": {"oid": "f47efb25d7a915254a01b150a836f72a7f5583d6"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 678, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}