{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzE0NTkx", "number": 1126, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMzowMFrOEGw-Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyNToxOFrOEGxluA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI5MjYzOnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/sketches_rewrite_cume_dist_partition_by.q.out", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMzowMFrOGlw1ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMjowN1rOGl4r6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MDU5Ng==", "bodyText": "Results are not the same and there seems to be incorrect?", "url": "https://github.com/apache/hive/pull/1126#discussion_r442250596", "createdAt": "2020-06-18T14:03:00Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/sketches_rewrite_cume_dist_partition_by.q.out", "diffHunk": "@@ -26,76 +26,42 @@ POSTHOOK: Input: _dummy_database@_dummy_table\n POSTHOOK: Output: default@sketch_input\n POSTHOOK: Lineage: sketch_input.category SCRIPT []\n POSTHOOK: Lineage: sketch_input.id SCRIPT []\n-PREHOOK: query: select id,category,cume_dist() over (partition by category order by id) from sketch_input order by category,id\n-PREHOOK: type: QUERY\n-PREHOOK: Input: default@sketch_input\n-#### A masked pattern was here ####\n-POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id) from sketch_input order by category,id\n-POSTHOOK: type: QUERY\n-POSTHOOK: Input: default@sketch_input\n-#### A masked pattern was here ####\n-1\ta\t0.18181818181818182\n-1\ta\t0.18181818181818182\n-2\ta\t0.2727272727272727\n-3\ta\t0.36363636363636365\n-4\ta\t0.45454545454545453\n-5\ta\t0.5454545454545454\n-6\ta\t0.6363636363636364\n-7\ta\t0.7272727272727273\n-8\ta\t0.8181818181818182\n-9\ta\t0.9090909090909091\n-10\ta\t1.0\n-6\tb\t0.18181818181818182\n-6\tb\t0.18181818181818182\n-7\tb\t0.2727272727272727\n-8\tb\t0.36363636363636365\n-9\tb\t0.45454545454545453\n-10\tb\t0.5454545454545454\n-11\tb\t0.6363636363636364\n-12\tb\t0.7272727272727273\n-13\tb\t0.8181818181818182\n-14\tb\t0.9090909090909091\n-15\tb\t1.0\n-1\tNULL\t0.25\n-2\tNULL\t0.5\n-10\tNULL\t0.75\n-13\tNULL\t1.0\n-PREHOOK: query: select id,category,cume_dist() over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]\n+PREHOOK: query: select id,category,cume_dist() over (partition by category order by id),ds_kll_cdf(ds, CAST(id AS FLOAT))[0]\n from sketch_input\n-join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)\n+join ( select category as c,ds_kll_sketch(cast(id as float)) as ds from sketch_input group by category) q on (q.c=category)\n order by category,id\n PREHOOK: type: QUERY\n PREHOOK: Input: default@sketch_input\n #### A masked pattern was here ####\n-POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]\n+POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id),ds_kll_cdf(ds, CAST(id AS FLOAT))[0]\n from sketch_input\n-join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)\n+join ( select category as c,ds_kll_sketch(cast(id as float)) as ds from sketch_input group by category) q on (q.c=category)\n order by category,id\n POSTHOOK: type: QUERY\n POSTHOOK: Input: default@sketch_input\n #### A masked pattern was here ####\n-1\ta\t0.18181818181818182\t0.18181818181818177\n-1\ta\t0.18181818181818182\t0.18181818181818177\n-2\ta\t0.2727272727272727\t0.2727272727272727\n-3\ta\t0.36363636363636365\t0.36363636363636365\n-4\ta\t0.45454545454545453\t0.4545454545454546\n-5\ta\t0.5454545454545454\t0.5454545454545454\n-6\ta\t0.6363636363636364\t0.6363636363636364\n-7\ta\t0.7272727272727273\t0.7272727272727273\n-8\ta\t0.8181818181818182\t0.8181818181818181\n-9\ta\t0.9090909090909091\t0.9090909090909091\n-10\ta\t1.0\t1.0\n-6\tb\t0.18181818181818182\t0.18181818181818177\n-6\tb\t0.18181818181818182\t0.18181818181818177\n-7\tb\t0.2727272727272727\t0.2727272727272727\n-8\tb\t0.36363636363636365\t0.36363636363636365\n-9\tb\t0.45454545454545453\t0.4545454545454546\n-10\tb\t0.5454545454545454\t0.5454545454545454\n-11\tb\t0.6363636363636364\t0.6363636363636364\n-12\tb\t0.7272727272727273\t0.7272727272727273\n-13\tb\t0.8181818181818182\t0.8181818181818181\n-14\tb\t0.9090909090909091\t0.9090909090909091\n-15\tb\t1.0\t1.0\n+1\ta\t0.18181818181818182\t0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c74d4bf4b8117808a23f38ce2ee01437b709b92"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MDI1Mg==", "bodyText": "I've bartered the almost 100% correct cume_dist rewrite to a mostly correct one - for which the same materialized view could be used underneath as for rank and ntile.\nAs a matter of fact; I think after submitting a patch to alter the udf a bit it could get back to the more accurate results again.", "url": "https://github.com/apache/hive/pull/1126#discussion_r442360252", "createdAt": "2020-06-18T16:40:03Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/llap/sketches_rewrite_cume_dist_partition_by.q.out", "diffHunk": "@@ -26,76 +26,42 @@ POSTHOOK: Input: _dummy_database@_dummy_table\n POSTHOOK: Output: default@sketch_input\n POSTHOOK: Lineage: sketch_input.category SCRIPT []\n POSTHOOK: Lineage: sketch_input.id SCRIPT []\n-PREHOOK: query: select id,category,cume_dist() over (partition by category order by id) from sketch_input order by category,id\n-PREHOOK: type: QUERY\n-PREHOOK: Input: default@sketch_input\n-#### A masked pattern was here ####\n-POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id) from sketch_input order by category,id\n-POSTHOOK: type: QUERY\n-POSTHOOK: Input: default@sketch_input\n-#### A masked pattern was here ####\n-1\ta\t0.18181818181818182\n-1\ta\t0.18181818181818182\n-2\ta\t0.2727272727272727\n-3\ta\t0.36363636363636365\n-4\ta\t0.45454545454545453\n-5\ta\t0.5454545454545454\n-6\ta\t0.6363636363636364\n-7\ta\t0.7272727272727273\n-8\ta\t0.8181818181818182\n-9\ta\t0.9090909090909091\n-10\ta\t1.0\n-6\tb\t0.18181818181818182\n-6\tb\t0.18181818181818182\n-7\tb\t0.2727272727272727\n-8\tb\t0.36363636363636365\n-9\tb\t0.45454545454545453\n-10\tb\t0.5454545454545454\n-11\tb\t0.6363636363636364\n-12\tb\t0.7272727272727273\n-13\tb\t0.8181818181818182\n-14\tb\t0.9090909090909091\n-15\tb\t1.0\n-1\tNULL\t0.25\n-2\tNULL\t0.5\n-10\tNULL\t0.75\n-13\tNULL\t1.0\n-PREHOOK: query: select id,category,cume_dist() over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]\n+PREHOOK: query: select id,category,cume_dist() over (partition by category order by id),ds_kll_cdf(ds, CAST(id AS FLOAT))[0]\n from sketch_input\n-join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)\n+join ( select category as c,ds_kll_sketch(cast(id as float)) as ds from sketch_input group by category) q on (q.c=category)\n order by category,id\n PREHOOK: type: QUERY\n PREHOOK: Input: default@sketch_input\n #### A masked pattern was here ####\n-POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]\n+POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id),ds_kll_cdf(ds, CAST(id AS FLOAT))[0]\n from sketch_input\n-join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)\n+join ( select category as c,ds_kll_sketch(cast(id as float)) as ds from sketch_input group by category) q on (q.c=category)\n order by category,id\n POSTHOOK: type: QUERY\n POSTHOOK: Input: default@sketch_input\n #### A masked pattern was here ####\n-1\ta\t0.18181818181818182\t0.18181818181818177\n-1\ta\t0.18181818181818182\t0.18181818181818177\n-2\ta\t0.2727272727272727\t0.2727272727272727\n-3\ta\t0.36363636363636365\t0.36363636363636365\n-4\ta\t0.45454545454545453\t0.4545454545454546\n-5\ta\t0.5454545454545454\t0.5454545454545454\n-6\ta\t0.6363636363636364\t0.6363636363636364\n-7\ta\t0.7272727272727273\t0.7272727272727273\n-8\ta\t0.8181818181818182\t0.8181818181818181\n-9\ta\t0.9090909090909091\t0.9090909090909091\n-10\ta\t1.0\t1.0\n-6\tb\t0.18181818181818182\t0.18181818181818177\n-6\tb\t0.18181818181818182\t0.18181818181818177\n-7\tb\t0.2727272727272727\t0.2727272727272727\n-8\tb\t0.36363636363636365\t0.36363636363636365\n-9\tb\t0.45454545454545453\t0.4545454545454546\n-10\tb\t0.5454545454545454\t0.5454545454545454\n-11\tb\t0.6363636363636364\t0.6363636363636364\n-12\tb\t0.7272727272727273\t0.7272727272727273\n-13\tb\t0.8181818181818182\t0.8181818181818181\n-14\tb\t0.9090909090909091\t0.9090909090909091\n-15\tb\t1.0\t1.0\n+1\ta\t0.18181818181818182\t0.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MDU5Ng=="}, "originalCommit": {"oid": "3c74d4bf4b8117808a23f38ce2ee01437b709b92"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3OTI0MA==", "bodyText": "{quote}\nAs a matter of fact; I think after submitting a patch to alter the udf a bit it could get back to the more accurate results again.\n{quote}\nYes, I think we should do that. Thanks", "url": "https://github.com/apache/hive/pull/1126#discussion_r442379240", "createdAt": "2020-06-18T17:12:07Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/sketches_rewrite_cume_dist_partition_by.q.out", "diffHunk": "@@ -26,76 +26,42 @@ POSTHOOK: Input: _dummy_database@_dummy_table\n POSTHOOK: Output: default@sketch_input\n POSTHOOK: Lineage: sketch_input.category SCRIPT []\n POSTHOOK: Lineage: sketch_input.id SCRIPT []\n-PREHOOK: query: select id,category,cume_dist() over (partition by category order by id) from sketch_input order by category,id\n-PREHOOK: type: QUERY\n-PREHOOK: Input: default@sketch_input\n-#### A masked pattern was here ####\n-POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id) from sketch_input order by category,id\n-POSTHOOK: type: QUERY\n-POSTHOOK: Input: default@sketch_input\n-#### A masked pattern was here ####\n-1\ta\t0.18181818181818182\n-1\ta\t0.18181818181818182\n-2\ta\t0.2727272727272727\n-3\ta\t0.36363636363636365\n-4\ta\t0.45454545454545453\n-5\ta\t0.5454545454545454\n-6\ta\t0.6363636363636364\n-7\ta\t0.7272727272727273\n-8\ta\t0.8181818181818182\n-9\ta\t0.9090909090909091\n-10\ta\t1.0\n-6\tb\t0.18181818181818182\n-6\tb\t0.18181818181818182\n-7\tb\t0.2727272727272727\n-8\tb\t0.36363636363636365\n-9\tb\t0.45454545454545453\n-10\tb\t0.5454545454545454\n-11\tb\t0.6363636363636364\n-12\tb\t0.7272727272727273\n-13\tb\t0.8181818181818182\n-14\tb\t0.9090909090909091\n-15\tb\t1.0\n-1\tNULL\t0.25\n-2\tNULL\t0.5\n-10\tNULL\t0.75\n-13\tNULL\t1.0\n-PREHOOK: query: select id,category,cume_dist() over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]\n+PREHOOK: query: select id,category,cume_dist() over (partition by category order by id),ds_kll_cdf(ds, CAST(id AS FLOAT))[0]\n from sketch_input\n-join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)\n+join ( select category as c,ds_kll_sketch(cast(id as float)) as ds from sketch_input group by category) q on (q.c=category)\n order by category,id\n PREHOOK: type: QUERY\n PREHOOK: Input: default@sketch_input\n #### A masked pattern was here ####\n-POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]\n+POSTHOOK: query: select id,category,cume_dist() over (partition by category order by id),ds_kll_cdf(ds, CAST(id AS FLOAT))[0]\n from sketch_input\n-join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)\n+join ( select category as c,ds_kll_sketch(cast(id as float)) as ds from sketch_input group by category) q on (q.c=category)\n order by category,id\n POSTHOOK: type: QUERY\n POSTHOOK: Input: default@sketch_input\n #### A masked pattern was here ####\n-1\ta\t0.18181818181818182\t0.18181818181818177\n-1\ta\t0.18181818181818182\t0.18181818181818177\n-2\ta\t0.2727272727272727\t0.2727272727272727\n-3\ta\t0.36363636363636365\t0.36363636363636365\n-4\ta\t0.45454545454545453\t0.4545454545454546\n-5\ta\t0.5454545454545454\t0.5454545454545454\n-6\ta\t0.6363636363636364\t0.6363636363636364\n-7\ta\t0.7272727272727273\t0.7272727272727273\n-8\ta\t0.8181818181818182\t0.8181818181818181\n-9\ta\t0.9090909090909091\t0.9090909090909091\n-10\ta\t1.0\t1.0\n-6\tb\t0.18181818181818182\t0.18181818181818177\n-6\tb\t0.18181818181818182\t0.18181818181818177\n-7\tb\t0.2727272727272727\t0.2727272727272727\n-8\tb\t0.36363636363636365\t0.36363636363636365\n-9\tb\t0.45454545454545453\t0.4545454545454546\n-10\tb\t0.5454545454545454\t0.5454545454545454\n-11\tb\t0.6363636363636364\t0.6363636363636364\n-12\tb\t0.7272727272727273\t0.7272727272727273\n-13\tb\t0.8181818181818182\t0.8181818181818181\n-14\tb\t0.9090909090909091\t0.9090909090909091\n-15\tb\t1.0\t1.0\n+1\ta\t0.18181818181818182\t0.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MDU5Ng=="}, "originalCommit": {"oid": "3c74d4bf4b8117808a23f38ce2ee01437b709b92"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTM5Mzg0OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveRewriteToDataSketchesRules.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyNToxOFrOGlx1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyNToxNVrOGqYqWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2Njk3OA==", "bodyText": "Fwiw, Hive does a complete mess about this. If there is no window frame, following the SQL standard:\n\nNo order by spec -> rows, unbounded preceding, unbounded following\nOrder by spec -> range, unbounded preceding, current row\nThis also aligns with most RDBMSs implementation.\n\nWe may need to revisit the logic in this WindowingSpec block at some point:\nhttps://github.com/apache/hive/blob/master/ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingSpec.java#L214\nBut I suspect there is compensation logic for that in execution code path and it may require some work.", "url": "https://github.com/apache/hive/pull/1126#discussion_r442266978", "createdAt": "2020-06-18T14:25:18Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveRewriteToDataSketchesRules.java", "diffHunk": "@@ -483,46 +489,44 @@ protected final SqlOperator getSqlOperator(String fnName) {\n   }\n \n   /**\n-   * Rewrites {@code cume_dist() over (order by id)}.\n+   * Provides a generic way to rewrite function into using an estimation based on CDF.\n+   *\n+   *  There are a few methods which could be supported this way: NTILE, CUME_DIST, RANK\n    *\n+   *  For example:\n    *  <pre>\n    *   SELECT id, CUME_DIST() OVER (ORDER BY id) FROM sketch_input;\n-   *     \u21d2 SELECT id, 1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT) )[0]\n+   *     \u21d2 SELECT id, ds_kll_cdf(ds, CAST(id AS FLOAT) )[0]\n    *       FROM sketch_input JOIN (\n-   *         SELECT ds_kll_sketch(CAST(-id AS FLOAT)) AS ds FROM sketch_input\n+   *         SELECT ds_kll_sketch(CAST(id AS FLOAT)) AS ds FROM sketch_input\n    *       ) q;\n    *  </pre>\n    */\n-  public static class CumeDistRewrite extends WindowingToProjectAggregateJoinProject {\n+  public static abstract class AbstractRankBasedRewriteRule extends WindowingToProjectAggregateJoinProject {\n \n-    public CumeDistRewrite(String sketchType) {\n+    public AbstractRankBasedRewriteRule(String sketchType) {\n       super(sketchType);\n     }\n \n-    @Override\n-    protected VbuilderPAP buildProcessor(RelOptRuleCall call) {\n-      return new VB(sketchType, call.builder());\n-    }\n+    protected static abstract class AbstractRankBasedRewriteBuilder extends VbuilderPAP {\n \n-    private static class VB extends VbuilderPAP {\n-\n-      protected VB(String sketchClass, RelBuilder relBuilder) {\n+      protected AbstractRankBasedRewriteBuilder(String sketchClass, RelBuilder relBuilder) {\n         super(sketchClass, relBuilder);\n       }\n \n       @Override\n-      boolean isApplicable(RexOver over) {\n-        SqlAggFunction aggOp = over.getAggOperator();\n+      final boolean isApplicable(RexOver over) {\n         RexWindow window = over.getWindow();\n-        if (aggOp.getName().equalsIgnoreCase(\"cume_dist\") && window.orderKeys.size() == 1\n-            && window.getLowerBound().isUnbounded() && window.getUpperBound().isUnbounded()) {\n+        if (window.orderKeys.size() == 1\n+            && window.getLowerBound().isUnbounded() && window.getUpperBound().isUnbounded()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c74d4bf4b8117808a23f38ce2ee01437b709b92"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MTExNQ==", "bodyText": "interesting; mostly the second :D\nfor the current functions (ntile,cume_dist) doesn't really make sense to set the window anything than unbounded (or at least I don't see a usecase for it)\nI've tried this out for the below query:\nselect id,ntile(id) over (order by id rows between 1 preceding and 1 following) from sketch_input order by id nulls last;\n\n\nmysql: rejects it with an error that ntile doesn't support it\npsql: accepts and executes it without interpreting the preceding/following stuff correctly\nhive: stops with a semanticexception", "url": "https://github.com/apache/hive/pull/1126#discussion_r447081115", "createdAt": "2020-06-29T16:00:28Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveRewriteToDataSketchesRules.java", "diffHunk": "@@ -483,46 +489,44 @@ protected final SqlOperator getSqlOperator(String fnName) {\n   }\n \n   /**\n-   * Rewrites {@code cume_dist() over (order by id)}.\n+   * Provides a generic way to rewrite function into using an estimation based on CDF.\n+   *\n+   *  There are a few methods which could be supported this way: NTILE, CUME_DIST, RANK\n    *\n+   *  For example:\n    *  <pre>\n    *   SELECT id, CUME_DIST() OVER (ORDER BY id) FROM sketch_input;\n-   *     \u21d2 SELECT id, 1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT) )[0]\n+   *     \u21d2 SELECT id, ds_kll_cdf(ds, CAST(id AS FLOAT) )[0]\n    *       FROM sketch_input JOIN (\n-   *         SELECT ds_kll_sketch(CAST(-id AS FLOAT)) AS ds FROM sketch_input\n+   *         SELECT ds_kll_sketch(CAST(id AS FLOAT)) AS ds FROM sketch_input\n    *       ) q;\n    *  </pre>\n    */\n-  public static class CumeDistRewrite extends WindowingToProjectAggregateJoinProject {\n+  public static abstract class AbstractRankBasedRewriteRule extends WindowingToProjectAggregateJoinProject {\n \n-    public CumeDistRewrite(String sketchType) {\n+    public AbstractRankBasedRewriteRule(String sketchType) {\n       super(sketchType);\n     }\n \n-    @Override\n-    protected VbuilderPAP buildProcessor(RelOptRuleCall call) {\n-      return new VB(sketchType, call.builder());\n-    }\n+    protected static abstract class AbstractRankBasedRewriteBuilder extends VbuilderPAP {\n \n-    private static class VB extends VbuilderPAP {\n-\n-      protected VB(String sketchClass, RelBuilder relBuilder) {\n+      protected AbstractRankBasedRewriteBuilder(String sketchClass, RelBuilder relBuilder) {\n         super(sketchClass, relBuilder);\n       }\n \n       @Override\n-      boolean isApplicable(RexOver over) {\n-        SqlAggFunction aggOp = over.getAggOperator();\n+      final boolean isApplicable(RexOver over) {\n         RexWindow window = over.getWindow();\n-        if (aggOp.getName().equalsIgnoreCase(\"cume_dist\") && window.orderKeys.size() == 1\n-            && window.getLowerBound().isUnbounded() && window.getUpperBound().isUnbounded()) {\n+        if (window.orderKeys.size() == 1\n+            && window.getLowerBound().isUnbounded() && window.getUpperBound().isUnbounded()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2Njk3OA=="}, "originalCommit": {"oid": "3c74d4bf4b8117808a23f38ce2ee01437b709b92"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NzQzNA==", "bodyText": "the logic to handle\nOrder by spec -> range, unbounded preceding, current row\nThis also aligns with most RDBMSs implementation\n\nI think at the time this rule fires it will see unbounded/unbounded...but it's very weird I'll open a separate ticket to invetigate that\nopened: HIVE-23775", "url": "https://github.com/apache/hive/pull/1126#discussion_r447097434", "createdAt": "2020-06-29T16:25:15Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveRewriteToDataSketchesRules.java", "diffHunk": "@@ -483,46 +489,44 @@ protected final SqlOperator getSqlOperator(String fnName) {\n   }\n \n   /**\n-   * Rewrites {@code cume_dist() over (order by id)}.\n+   * Provides a generic way to rewrite function into using an estimation based on CDF.\n+   *\n+   *  There are a few methods which could be supported this way: NTILE, CUME_DIST, RANK\n    *\n+   *  For example:\n    *  <pre>\n    *   SELECT id, CUME_DIST() OVER (ORDER BY id) FROM sketch_input;\n-   *     \u21d2 SELECT id, 1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT) )[0]\n+   *     \u21d2 SELECT id, ds_kll_cdf(ds, CAST(id AS FLOAT) )[0]\n    *       FROM sketch_input JOIN (\n-   *         SELECT ds_kll_sketch(CAST(-id AS FLOAT)) AS ds FROM sketch_input\n+   *         SELECT ds_kll_sketch(CAST(id AS FLOAT)) AS ds FROM sketch_input\n    *       ) q;\n    *  </pre>\n    */\n-  public static class CumeDistRewrite extends WindowingToProjectAggregateJoinProject {\n+  public static abstract class AbstractRankBasedRewriteRule extends WindowingToProjectAggregateJoinProject {\n \n-    public CumeDistRewrite(String sketchType) {\n+    public AbstractRankBasedRewriteRule(String sketchType) {\n       super(sketchType);\n     }\n \n-    @Override\n-    protected VbuilderPAP buildProcessor(RelOptRuleCall call) {\n-      return new VB(sketchType, call.builder());\n-    }\n+    protected static abstract class AbstractRankBasedRewriteBuilder extends VbuilderPAP {\n \n-    private static class VB extends VbuilderPAP {\n-\n-      protected VB(String sketchClass, RelBuilder relBuilder) {\n+      protected AbstractRankBasedRewriteBuilder(String sketchClass, RelBuilder relBuilder) {\n         super(sketchClass, relBuilder);\n       }\n \n       @Override\n-      boolean isApplicable(RexOver over) {\n-        SqlAggFunction aggOp = over.getAggOperator();\n+      final boolean isApplicable(RexOver over) {\n         RexWindow window = over.getWindow();\n-        if (aggOp.getName().equalsIgnoreCase(\"cume_dist\") && window.orderKeys.size() == 1\n-            && window.getLowerBound().isUnbounded() && window.getUpperBound().isUnbounded()) {\n+        if (window.orderKeys.size() == 1\n+            && window.getLowerBound().isUnbounded() && window.getUpperBound().isUnbounded()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2Njk3OA=="}, "originalCommit": {"oid": "3c74d4bf4b8117808a23f38ce2ee01437b709b92"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 629, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}