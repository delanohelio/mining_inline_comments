{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0Nzk4Nzkx", "number": 1439, "title": "HIVE-24084 Push Aggregates thru joins in case it re-groups previously unique columns\t", "bodyText": "What changes were proposed in this pull request?\n\nchanges to cost estimations - fixed a few bugs\nchanged Aggregate estimation to a different on HiveOnTezCostmodel\nin HiveAggregateJoinTransposeRule relaxed the comparision with the new plan to use <= instead <\n\n\nWhy are the changes needed?\n\nDoes this PR introduce any user-facing change?\n\nHow was this patch tested?", "createdAt": "2020-08-27T15:58:20Z", "url": "https://github.com/apache/hive/pull/1439", "merged": true, "mergeCommit": {"oid": "d69aa36c131f50044dc43cdc09a30a7b32e3496a"}, "closed": true, "closedAt": "2020-09-16T07:51:30Z", "author": {"login": "kgyrtkirk"}, "timelineItems": {"totalCount": 73, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7UJAQgH2gAyNDc0Nzk4NzkxOjQ2OWM4ZmVjNDFlMTU5MTY3NThmYTAyMzMwYTQ1YWRmODk4MGY1MWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJG6WVgH2gAyNDc0Nzk4NzkxOmQzZjdjNjU5MDkxMGZmZDYyMDVhNjQxMWVjYjk3NWFiNmYyNTUzYjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "469c8fec41e15916758fa02330a45adf8980f51f", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/469c8fec41e15916758fa02330a45adf8980f51f", "committedDate": "2020-08-03T15:55:33Z", "message": "a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43701563c5f69780899a00ab125872094cf63d4b", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/43701563c5f69780899a00ab125872094cf63d4b", "committedDate": "2020-08-04T09:56:40Z", "message": "disable unstable tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4560fc77d479a3d14492fc1957804dd5eaa62940", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/4560fc77d479a3d14492fc1957804dd5eaa62940", "committedDate": "2020-08-11T08:26:50Z", "message": "some changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eab19dbf84d05d030ecda567596008e1d7a07f6", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/5eab19dbf84d05d030ecda567596008e1d7a07f6", "committedDate": "2020-08-11T08:27:21Z", "message": "git staMerge remote-tracking branch 'apache/master' into DWX-4878-aggpush"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92e2ef6d034cfeb6795daf386e8fd4e78f8f04ed", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/92e2ef6d034cfeb6795daf386e8fd4e78f8f04ed", "committedDate": "2020-08-11T08:29:50Z", "message": "use tpch .001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "159bbc5e4a4acdae18c4e19b437768934c75e3a8", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/159bbc5e4a4acdae18c4e19b437768934c75e3a8", "committedDate": "2020-08-11T09:05:04Z", "message": "update q.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9fbd6a9dd869016240ee397748af94d9e0628ad", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/b9fbd6a9dd869016240ee397748af94d9e0628ad", "committedDate": "2020-08-25T08:33:44Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b761df6b287f7fe0e32f3965d2b7236b1b168bc", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/6b761df6b287f7fe0e32f3965d2b7236b1b168bc", "committedDate": "2020-08-25T09:29:42Z", "message": "add a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2775462c430b24f6087af675b42f58964d4d9889", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/2775462c430b24f6087af675b42f58964d4d9889", "committedDate": "2020-08-25T13:53:01Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60a56c9a79e4bde40f58e84e44bda8fa4d098a3", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/e60a56c9a79e4bde40f58e84e44bda8fa4d098a3", "committedDate": "2020-08-25T14:28:01Z", "message": "why intersect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98cb30e6640c32cedca0cd39befa3017d94f09b0", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/98cb30e6640c32cedca0cd39befa3017d94f09b0", "committedDate": "2020-08-25T15:41:04Z", "message": "add"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36816a9bccb358cd4483f9d8dbe56dac3463cd9d", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/36816a9bccb358cd4483f9d8dbe56dac3463cd9d", "committedDate": "2020-08-26T12:44:25Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a607be84e14d6ac111b5467f7140e221ed96ae09", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/a607be84e14d6ac111b5467f7140e221ed96ae09", "committedDate": "2020-08-26T13:06:18Z", "message": "usee AggP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4181007882f467cd1ff6b61811522e400d2cee", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/8b4181007882f467cd1ff6b61811522e400d2cee", "committedDate": "2020-08-26T13:24:15Z", "message": "up[dates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e38f82bd35f2567cd810b6e2f56b8497953000c3", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/e38f82bd35f2567cd810b6e2f56b8497953000c3", "committedDate": "2020-08-26T14:14:07Z", "message": "changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9e0ded691bf131b7e79a2a8f46c928e85ad299", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/ee9e0ded691bf131b7e79a2a8f46c928e85ad299", "committedDate": "2020-08-26T14:15:24Z", "message": "unde LE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924008b021a0c3bf3e593ddfa8c1056cfb83cf61", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/924008b021a0c3bf3e593ddfa8c1056cfb83cf61", "committedDate": "2020-08-27T12:14:08Z", "message": "aa"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22eb5bec3803c30a0b50b516c21e756e41d267db", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/22eb5bec3803c30a0b50b516c21e756e41d267db", "committedDate": "2020-08-27T14:04:00Z", "message": "changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2291f4c05307fc53459c603a20ea9f5ae946c9b6", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/2291f4c05307fc53459c603a20ea9f5ae946c9b6", "committedDate": "2020-08-27T14:05:25Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a896e448360c7ecd5009ccdad34018279f109b", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/d8a896e448360c7ecd5009ccdad34018279f109b", "committedDate": "2020-08-27T14:50:33Z", "message": "add more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52fdee701d44a2183df4cefc26592e38c2c84540", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/52fdee701d44a2183df4cefc26592e38c2c84540", "committedDate": "2020-08-27T14:52:42Z", "message": "remove stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a851713a8aea523062bd1207a53019cae8328d69", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/a851713a8aea523062bd1207a53019cae8328d69", "committedDate": "2020-08-27T14:56:36Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18b179a3598e40532b51e37235d3b9e4bd21c527", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/18b179a3598e40532b51e37235d3b9e4bd21c527", "committedDate": "2020-08-27T14:57:13Z", "message": "remove comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ea2b79e007434cdf836ec2c3643278bf1f6d95", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/62ea2b79e007434cdf836ec2c3643278bf1f6d95", "committedDate": "2020-08-27T14:58:14Z", "message": "def"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3fb9d79a22c455b688cfa3a3f6fab286ba6fe3", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/ca3fb9d79a22c455b688cfa3a3f6fab286ba6fe3", "committedDate": "2020-08-27T15:03:34Z", "message": "f1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57750a44529fcf9e779241c4466c03d34202e338", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/57750a44529fcf9e779241c4466c03d34202e338", "committedDate": "2020-08-27T15:12:11Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b84a24fc41d81dc936927ff239ab0e17f25a6c30", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/b84a24fc41d81dc936927ff239ab0e17f25a6c30", "committedDate": "2020-08-27T15:18:29Z", "message": "update q.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74520518ba7afd974f4aae069286661768303651", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/74520518ba7afd974f4aae069286661768303651", "committedDate": "2020-08-27T15:21:34Z", "message": "remove EXPLAIN; update q.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b915d5a01c5d5d73d4428074175c1ebe279139b", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/0b915d5a01c5d5d73d4428074175c1ebe279139b", "committedDate": "2020-08-27T15:25:13Z", "message": "resultset diffs against old"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa705cb8e21b2f5f75574fd1288bf9ff0dba234c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/fa705cb8e21b2f5f75574fd1288bf9ff0dba234c", "committedDate": "2020-08-27T15:25:38Z", "message": "restore patch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71b25cb7291e788d90e6ef6a0560d5b7ca7c520f", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/71b25cb7291e788d90e6ef6a0560d5b7ca7c520f", "committedDate": "2020-08-28T13:36:48Z", "message": "it works..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad13df1838500f08da56278ed2e82e18a2529a2f", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/ad13df1838500f08da56278ed2e82e18a2529a2f", "committedDate": "2020-08-28T13:46:39Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b8e6a7f5ed50ea6152a4577450813bf4e4acf7", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/80b8e6a7f5ed50ea6152a4577450813bf4e4acf7", "committedDate": "2020-08-28T13:47:54Z", "message": "go back to old"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3bf261b880716e44e346d020162bd5fe3a8d37c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/d3bf261b880716e44e346d020162bd5fe3a8d37c", "committedDate": "2020-08-28T13:56:05Z", "message": "undo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36525d2e7c2f359c8c0f380ec7ac838db080046b", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/36525d2e7c2f359c8c0f380ec7ac838db080046b", "committedDate": "2020-08-28T13:57:07Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/e72417eee27e091c5a3e8ce4367bd8497f1c6d08", "committedDate": "2020-08-28T14:34:11Z", "message": "remove"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTQ4ODEy", "url": "https://github.com/apache/hive/pull/1439#pullrequestreview-477948812", "createdAt": "2020-08-28T18:40:12Z", "commit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo0MDoxMlrOHJQzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOToxMzoyMlrOHJRrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NDUyMA==", "bodyText": "Not sure about this change. If the algorithm is sort-based, you will still sort the complete input, right?", "url": "https://github.com/apache/hive/pull/1439#discussion_r479474520", "createdAt": "2020-08-28T18:40:12Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/cost/HiveOnTezCostModel.java", "diffHunk": "@@ -89,22 +89,23 @@ public RelOptCost getAggregateCost(HiveAggregate aggregate) {\n     } else {\n       final RelMetadataQuery mq = aggregate.getCluster().getMetadataQuery();\n       // 1. Sum of input cardinalities\n-      final Double rCount = mq.getRowCount(aggregate.getInput());\n-      if (rCount == null) {\n+      final Double inputRowCount = mq.getRowCount(aggregate.getInput());\n+      final Double rowCount = mq.getRowCount(aggregate);\n+      if (inputRowCount == null || rowCount == null) {\n         return null;\n       }\n       // 2. CPU cost = sorting cost\n-      final double cpuCost = algoUtils.computeSortCPUCost(rCount);\n+      final double cpuCost = algoUtils.computeSortCPUCost(rowCount) + inputRowCount * algoUtils.getCpuUnitCost();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NDk1OQ==", "bodyText": "We could rely on mq.areColumnsUnique.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479474959", "createdAt": "2020-08-28T18:41:14Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -303,6 +305,90 @@ public void onMatch(RelOptRuleCall call) {\n     }\n   }\n \n+  /**\n+   * Determines weather the give grouping is unique.\n+   *\n+   * Consider a join which might produce non-unique rows; but later the results are aggregated again.\n+   * This method determines if there are sufficient columns in the grouping which have been present previously as unique column(s).\n+   */\n+  private boolean isGroupingUnique(RelNode input, ImmutableBitSet groups) {\n+    if (groups.isEmpty()) {\n+      return false;\n+    }\n+    RelMetadataQuery mq = input.getCluster().getMetadataQuery();\n+    Set<ImmutableBitSet> uKeys = mq.getUniqueKeys(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NzczMQ==", "bodyText": "The rule is enabled via config so we will only reach here if it is enabled.\nWe should be able to force the transform even if cost-based variant is disabled.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479477731", "createdAt": "2020-08-28T18:47:11Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -290,7 +291,8 @@ public void onMatch(RelOptRuleCall call) {\n       RelNode r = relBuilder.build();\n       RelOptCost afterCost = mq.getCumulativeCost(r);\n       RelOptCost beforeCost = mq.getCumulativeCost(aggregate);\n-      if (afterCost.isLt(beforeCost)) {\n+      boolean shouldForceTransform = isGroupingUnique(join, aggregate.getGroupSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTExMA==", "bodyText": "This could call mq.areColumnsUnique instead of making the recursive call.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479479110", "createdAt": "2020-08-28T18:50:30Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -303,6 +305,90 @@ public void onMatch(RelOptRuleCall call) {\n     }\n   }\n \n+  /**\n+   * Determines weather the give grouping is unique.\n+   *\n+   * Consider a join which might produce non-unique rows; but later the results are aggregated again.\n+   * This method determines if there are sufficient columns in the grouping which have been present previously as unique column(s).\n+   */\n+  private boolean isGroupingUnique(RelNode input, ImmutableBitSet groups) {\n+    if (groups.isEmpty()) {\n+      return false;\n+    }\n+    RelMetadataQuery mq = input.getCluster().getMetadataQuery();\n+    Set<ImmutableBitSet> uKeys = mq.getUniqueKeys(input);\n+    for (ImmutableBitSet u : uKeys) {\n+      if (groups.contains(u)) {\n+        return true;\n+      }\n+    }\n+    if (input instanceof Join) {\n+      Join join = (Join) input;\n+      RexBuilder rexBuilder = input.getCluster().getRexBuilder();\n+      SimpleConditionInfo cond = new SimpleConditionInfo(join.getCondition(), rexBuilder);\n+\n+      if (cond.valid) {\n+        ImmutableBitSet newGroup = groups.intersect(ImmutableBitSet.fromBitSet(cond.fields));\n+        RelNode l = join.getLeft();\n+        RelNode r = join.getRight();\n+\n+        int joinFieldCount = join.getRowType().getFieldCount();\n+        int lFieldCount = l.getRowType().getFieldCount();\n+\n+        ImmutableBitSet groupL = newGroup.get(0, lFieldCount);\n+        ImmutableBitSet groupR = newGroup.get(lFieldCount, joinFieldCount).shift(-lFieldCount);\n+\n+        if (isGroupingUnique(l, groupL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTE1Mw==", "bodyText": "Same as above.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479479153", "createdAt": "2020-08-28T18:50:38Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -303,6 +305,90 @@ public void onMatch(RelOptRuleCall call) {\n     }\n   }\n \n+  /**\n+   * Determines weather the give grouping is unique.\n+   *\n+   * Consider a join which might produce non-unique rows; but later the results are aggregated again.\n+   * This method determines if there are sufficient columns in the grouping which have been present previously as unique column(s).\n+   */\n+  private boolean isGroupingUnique(RelNode input, ImmutableBitSet groups) {\n+    if (groups.isEmpty()) {\n+      return false;\n+    }\n+    RelMetadataQuery mq = input.getCluster().getMetadataQuery();\n+    Set<ImmutableBitSet> uKeys = mq.getUniqueKeys(input);\n+    for (ImmutableBitSet u : uKeys) {\n+      if (groups.contains(u)) {\n+        return true;\n+      }\n+    }\n+    if (input instanceof Join) {\n+      Join join = (Join) input;\n+      RexBuilder rexBuilder = input.getCluster().getRexBuilder();\n+      SimpleConditionInfo cond = new SimpleConditionInfo(join.getCondition(), rexBuilder);\n+\n+      if (cond.valid) {\n+        ImmutableBitSet newGroup = groups.intersect(ImmutableBitSet.fromBitSet(cond.fields));\n+        RelNode l = join.getLeft();\n+        RelNode r = join.getRight();\n+\n+        int joinFieldCount = join.getRowType().getFieldCount();\n+        int lFieldCount = l.getRowType().getFieldCount();\n+\n+        ImmutableBitSet groupL = newGroup.get(0, lFieldCount);\n+        ImmutableBitSet groupR = newGroup.get(lFieldCount, joinFieldCount).shift(-lFieldCount);\n+\n+        if (isGroupingUnique(l, groupL)) {\n+          return true;\n+        }\n+        if (isGroupingUnique(r, groupR)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4NDkxOA==", "bodyText": "I think you suggested changing this... Maybe isLe if we do not introduce an additional aggregate on top?", "url": "https://github.com/apache/hive/pull/1439#discussion_r479484918", "createdAt": "2020-08-28T19:04:16Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -290,7 +291,8 @@ public void onMatch(RelOptRuleCall call) {\n       RelNode r = relBuilder.build();\n       RelOptCost afterCost = mq.getCumulativeCost(r);\n       RelOptCost beforeCost = mq.getCumulativeCost(aggregate);\n-      if (afterCost.isLt(beforeCost)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4ODU1Ng==", "bodyText": "Additionally, when we force triggering the transform, does it make sense to verify that we are not creating an aggregate on top (i.e., we end up with agg before join and after join?\nThat may narrow it down even further to a case when the pushdown should always be beneficial.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479488556", "createdAt": "2020-08-28T19:12:25Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -290,7 +291,8 @@ public void onMatch(RelOptRuleCall call) {\n       RelNode r = relBuilder.build();\n       RelOptCost afterCost = mq.getCumulativeCost(r);\n       RelOptCost beforeCost = mq.getCumulativeCost(aggregate);\n-      if (afterCost.isLt(beforeCost)) {\n+      boolean shouldForceTransform = isGroupingUnique(join, aggregate.getGroupSet());\n+      if (shouldForceTransform || afterCost.isLt(beforeCost)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4ODk1OQ==", "bodyText": "Can you use JoinInfo.of for this? It seems it does something very similar.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479488959", "createdAt": "2020-08-28T19:13:22Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -303,6 +305,90 @@ public void onMatch(RelOptRuleCall call) {\n     }\n   }\n \n+  /**\n+   * Determines weather the give grouping is unique.\n+   *\n+   * Consider a join which might produce non-unique rows; but later the results are aggregated again.\n+   * This method determines if there are sufficient columns in the grouping which have been present previously as unique column(s).\n+   */\n+  private boolean isGroupingUnique(RelNode input, ImmutableBitSet groups) {\n+    if (groups.isEmpty()) {\n+      return false;\n+    }\n+    RelMetadataQuery mq = input.getCluster().getMetadataQuery();\n+    Set<ImmutableBitSet> uKeys = mq.getUniqueKeys(input);\n+    for (ImmutableBitSet u : uKeys) {\n+      if (groups.contains(u)) {\n+        return true;\n+      }\n+    }\n+    if (input instanceof Join) {\n+      Join join = (Join) input;\n+      RexBuilder rexBuilder = input.getCluster().getRexBuilder();\n+      SimpleConditionInfo cond = new SimpleConditionInfo(join.getCondition(), rexBuilder);\n+\n+      if (cond.valid) {\n+        ImmutableBitSet newGroup = groups.intersect(ImmutableBitSet.fromBitSet(cond.fields));\n+        RelNode l = join.getLeft();\n+        RelNode r = join.getRight();\n+\n+        int joinFieldCount = join.getRowType().getFieldCount();\n+        int lFieldCount = l.getRowType().getFieldCount();\n+\n+        ImmutableBitSet groupL = newGroup.get(0, lFieldCount);\n+        ImmutableBitSet groupR = newGroup.get(lFieldCount, joinFieldCount).shift(-lFieldCount);\n+\n+        if (isGroupingUnique(l, groupL)) {\n+          return true;\n+        }\n+        if (isGroupingUnique(r, groupR)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  static class SimpleConditionInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTkyNzAz", "url": "https://github.com/apache/hive/pull/1439#pullrequestreview-477992703", "createdAt": "2020-08-28T19:59:45Z", "commit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1OTo0NVrOHJS4ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDoxMjoxNVrOHJTMNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwODYxOA==", "bodyText": "Can we change rowCount to outputRowCount? This will make the change more readable.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479508618", "createdAt": "2020-08-28T19:59:45Z", "author": {"login": "vineetgarg02"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/cost/HiveOnTezCostModel.java", "diffHunk": "@@ -89,22 +89,23 @@ public RelOptCost getAggregateCost(HiveAggregate aggregate) {\n     } else {\n       final RelMetadataQuery mq = aggregate.getCluster().getMetadataQuery();\n       // 1. Sum of input cardinalities\n-      final Double rCount = mq.getRowCount(aggregate.getInput());\n-      if (rCount == null) {\n+      final Double inputRowCount = mq.getRowCount(aggregate.getInput());\n+      final Double rowCount = mq.getRowCount(aggregate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwOTA2NA==", "bodyText": "rAverageSize is based on input row count but rowCount is output row count. Is this intended or should average row size be computed based on output row count?", "url": "https://github.com/apache/hive/pull/1439#discussion_r479509064", "createdAt": "2020-08-28T20:00:50Z", "author": {"login": "vineetgarg02"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/cost/HiveOnTezCostModel.java", "diffHunk": "@@ -89,22 +89,23 @@ public RelOptCost getAggregateCost(HiveAggregate aggregate) {\n     } else {\n       final RelMetadataQuery mq = aggregate.getCluster().getMetadataQuery();\n       // 1. Sum of input cardinalities\n-      final Double rCount = mq.getRowCount(aggregate.getInput());\n-      if (rCount == null) {\n+      final Double inputRowCount = mq.getRowCount(aggregate.getInput());\n+      final Double rowCount = mq.getRowCount(aggregate);\n+      if (inputRowCount == null || rowCount == null) {\n         return null;\n       }\n       // 2. CPU cost = sorting cost\n-      final double cpuCost = algoUtils.computeSortCPUCost(rCount);\n+      final double cpuCost = algoUtils.computeSortCPUCost(rowCount) + inputRowCount * algoUtils.getCpuUnitCost();\n       // 3. IO cost = cost of writing intermediary results to local FS +\n       //              cost of reading from local FS for transferring to GBy +\n       //              cost of transferring map outputs to GBy operator\n       final Double rAverageSize = mq.getAverageRowSize(aggregate.getInput());\n       if (rAverageSize == null) {\n         return null;\n       }\n-      final double ioCost = algoUtils.computeSortIOCost(new Pair<Double,Double>(rCount,rAverageSize));\n+      final double ioCost = algoUtils.computeSortIOCost(new Pair<Double, Double>(rowCount, rAverageSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMzY1NA==", "bodyText": "If the purpose of this method is to determine that given a set of columns are unique or not you can use areColumnsUnique as @jcamachor  suggested.", "url": "https://github.com/apache/hive/pull/1439#discussion_r479513654", "createdAt": "2020-08-28T20:12:15Z", "author": {"login": "vineetgarg02"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -303,6 +305,90 @@ public void onMatch(RelOptRuleCall call) {\n     }\n   }\n \n+  /**\n+   * Determines weather the give grouping is unique.\n+   *\n+   * Consider a join which might produce non-unique rows; but later the results are aggregated again.\n+   * This method determines if there are sufficient columns in the grouping which have been present previously as unique column(s).\n+   */\n+  private boolean isGroupingUnique(RelNode input, ImmutableBitSet groups) {\n+    if (groups.isEmpty()) {\n+      return false;\n+    }\n+    RelMetadataQuery mq = input.getCluster().getMetadataQuery();\n+    Set<ImmutableBitSet> uKeys = mq.getUniqueKeys(input);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NDk1OQ=="}, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adbd393aed0183c55b608aecfebcd147aeb4d1c1", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/adbd393aed0183c55b608aecfebcd147aeb4d1c1", "committedDate": "2020-09-02T13:43:36Z", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24084-cost-aggr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "683b63cf161128dbea670b606db849833388306c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/683b63cf161128dbea670b606db849833388306c", "committedDate": "2020-09-02T14:03:35Z", "message": "git stMerge remote-tracking branch 'apache/master' into HIVE-24072-aggjoin-mapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60359407d9a20a364bff92c6d0417f5f3995032c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/60359407d9a20a364bff92c6d0417f5f3995032c", "committedDate": "2020-09-03T14:49:58Z", "message": "remove duplicate semicolon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19549a7768c3a00b11e7093e167d47666c3c4d1", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/f19549a7768c3a00b11e7093e167d47666c3c4d1", "committedDate": "2020-09-03T14:52:15Z", "message": "add tpch18"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6c9cda7c1ff8ed49ac61c2e417d1a2e724315c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/cd6c9cda7c1ff8ed49ac61c2e417d1a2e724315c", "committedDate": "2020-09-07T04:51:05Z", "message": "put back intersect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee00ba27aaea73461553143147c43be29b6e09ac", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/ee00ba27aaea73461553143147c43be29b6e09ac", "committedDate": "2020-09-07T11:47:53Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aef16e6b5bba03057ce03122506bbf87715561bb", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/aef16e6b5bba03057ce03122506bbf87715561bb", "committedDate": "2020-09-07T11:49:37Z", "message": "redo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "845b86e3d3eaaa7f2169ad56432cd1918a1d571f", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/845b86e3d3eaaa7f2169ad56432cd1918a1d571f", "committedDate": "2020-09-07T11:57:46Z", "message": "x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e415e474b48216d56bc6c29c1d1e21ef2222c8a6", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/e415e474b48216d56bc6c29c1d1e21ef2222c8a6", "committedDate": "2020-09-07T12:04:56Z", "message": "mx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628f5a3989befbb69c843a958a7b0dd5add05484", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/628f5a3989befbb69c843a958a7b0dd5add05484", "committedDate": "2020-09-07T12:06:58Z", "message": "PP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bdca364ac03473b967881f1d02fe54b454c2974", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/3bdca364ac03473b967881f1d02fe54b454c2974", "committedDate": "2020-09-07T12:09:11Z", "message": "more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7198ac40e4f49ea7d14f40980b38d6bed9888a64", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/7198ac40e4f49ea7d14f40980b38d6bed9888a64", "committedDate": "2020-09-07T12:35:39Z", "message": "more wood"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d74b3602bfe5c435f57185d3ce44c00072413db7", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/d74b3602bfe5c435f57185d3ce44c00072413db7", "committedDate": "2020-09-07T12:56:36Z", "message": "remove conditional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0580687d53ce342e57e54a1daac2d171f17f33b4", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/0580687d53ce342e57e54a1daac2d171f17f33b4", "committedDate": "2020-09-07T13:11:34Z", "message": "use JoinInfo instead of custom class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd77ca70c035ab4f6d1ce51c96883210cefc6b90", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/fd77ca70c035ab4f6d1ce51c96883210cefc6b90", "committedDate": "2020-09-07T13:12:46Z", "message": "rename variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42d36cb4eb0a897f219f7457dffdc28e6adba439", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/42d36cb4eb0a897f219f7457dffdc28e6adba439", "committedDate": "2020-09-07T13:14:49Z", "message": "undo model changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc8bacccaaf2a8afdcd8f6139ec70b461b200972", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/fc8bacccaaf2a8afdcd8f6139ec70b461b200972", "committedDate": "2020-09-07T13:16:45Z", "message": "update q.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07ca9037848c445fa37f06b58789edf4a7d1384a", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/07ca9037848c445fa37f06b58789edf4a7d1384a", "committedDate": "2020-09-07T13:21:55Z", "message": "updates to q.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca9a95aabf555bbe88a4d462289e6adfe158bed", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/fca9a95aabf555bbe88a4d462289e6adfe158bed", "committedDate": "2020-09-07T13:31:55Z", "message": "use areColumnsUnique"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4679f91d44d69525a4a745f09297748c875c440b", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/4679f91d44d69525a4a745f09297748c875c440b", "committedDate": "2020-09-07T13:47:39Z", "message": "add knob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29ff2301f5f9b4f47e4a3851541184a9c66a1004", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/29ff2301f5f9b4f47e4a3851541184a9c66a1004", "committedDate": "2020-09-07T13:54:26Z", "message": "restrict uniqueness based by aggconvertedtoprojects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae39544ff27c7ed3ce631e739fe4efa8dbc62af6", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/ae39544ff27c7ed3ce631e739fe4efa8dbc62af6", "committedDate": "2020-09-08T13:40:02Z", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24084-cost-aggr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37fbbfbf3e7a7e50e23097ff2ee4dbc338f7d960", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/37fbbfbf3e7a7e50e23097ff2ee4dbc338f7d960", "committedDate": "2020-09-08T14:23:23Z", "message": "add nullcheck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7042d5ddeafeee18ed545c1addd71adf645ced85", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/7042d5ddeafeee18ed545c1addd71adf645ced85", "committedDate": "2020-09-08T14:53:37Z", "message": "accept q.out changes: removed aggregates(and transform to semijoin) - or better placed aggregates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95dfa8a1616a29c55ac779aad00975fb4cf96f58", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/95dfa8a1616a29c55ac779aad00975fb4cf96f58", "committedDate": "2020-09-08T15:14:53Z", "message": "back to getUniqueKeys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62480d110acb48fdc98c08a43dc3166d3df457c5", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/62480d110acb48fdc98c08a43dc3166d3df457c5", "committedDate": "2020-09-08T15:25:26Z", "message": "temporary fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NjQ3MDcw", "url": "https://github.com/apache/hive/pull/1439#pullrequestreview-484647070", "createdAt": "2020-09-09T04:09:13Z", "commit": {"oid": "62480d110acb48fdc98c08a43dc3166d3df457c5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNDowOToxM1rOHO16Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNDo0NzowMlrOHO2gGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyNTMzOA==", "bodyText": "This is quite neat.", "url": "https://github.com/apache/hive/pull/1439#discussion_r485325338", "createdAt": "2020-09-09T04:09:13Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/constraints_optimization.q.out", "diffHunk": "@@ -2631,13 +2631,12 @@ POSTHOOK: Input: default@customer\n POSTHOOK: Input: default@store_sales\n #### A masked pattern was here ####\n CBO PLAN:\n-HiveAggregate(group=[{0}])\n-  HiveJoin(condition=[=($0, $8)], joinType=[inner], algorithm=[none], cost=[not available])\n-    HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])\n-      HiveTableScan(table=[[default, customer]], table:alias=[customer])\n-    HiveProject(ss_customer_sk=[$3])\n-      HiveFilter(condition=[IS NOT NULL($3)])\n-        HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])\n+HiveSemiJoin(condition=[=($0, $1)], joinType=[semi])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62480d110acb48fdc98c08a43dc3166d3df457c5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyNTY2Ng==", "bodyText": "Cool!", "url": "https://github.com/apache/hive/pull/1439#discussion_r485325666", "createdAt": "2020-09-09T04:10:24Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/perf/tez/constraints/cbo_query23.q.out", "diffHunk": "@@ -155,18 +155,19 @@ HiveAggregate(group=[{}], agg#0=[sum($0)])\n                                     HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])\n           HiveProject($f1=[$0])\n             HiveFilter(condition=[>($2, 4)])\n-              HiveProject(i_item_sk=[$1], d_date=[$0], $f2=[$2])\n-                HiveAggregate(group=[{3, 4}], agg#0=[count()])\n-                  HiveJoin(condition=[=($1, $4)], joinType=[inner], algorithm=[none], cost=[not available])\n-                    HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])\n-                      HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])\n-                        HiveFilter(condition=[IS NOT NULL($0)])\n-                          HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])\n-                      HiveProject(d_date_sk=[$0], d_date=[$2])\n-                        HiveFilter(condition=[IN($6, 1999, 2000, 2001, 2002)])\n-                          HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])\n-                    HiveProject(i_item_sk=[$0], substr=[substr($4, 1, 30)])\n-                      HiveTableScan(table=[[default, item]], table:alias=[item])\n+              HiveProject(i_item_sk=[$3], d_date=[$1], $f2=[$2])\n+                HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])\n+                  HiveProject(ss_item_sk=[$0], d_date=[$1], $f2=[$2])\n+                    HiveAggregate(group=[{1, 3}], agg#0=[count()])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62480d110acb48fdc98c08a43dc3166d3df457c5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMDc2Ng==", "bodyText": "Can we declare {{(L_ORDERKEY, L_LINENUMBER)}} as primary key? That way we will be able to verify whether HIVE-24087 is kicking in and removing the unnecessary join.\nWe can also try the variant with {{L_ORDERKEY NOT NULL}} constraint.", "url": "https://github.com/apache/hive/pull/1439#discussion_r485330766", "createdAt": "2020-09-09T04:30:51Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/queries/clientpositive/tpch18.q", "diffHunk": "@@ -0,0 +1,133 @@\n+--! qt:dataset:tpch_0_001.customer\n+--! qt:dataset:tpch_0_001.lineitem\n+--! qt:dataset:tpch_0_001.nation\n+--! qt:dataset:tpch_0_001.orders\n+--! qt:dataset:tpch_0_001.part\n+--! qt:dataset:tpch_0_001.partsupp\n+--! qt:dataset:tpch_0_001.region\n+--! qt:dataset:tpch_0_001.supplier\n+\n+\n+use tpch_0_001;\n+\n+set hive.transpose.aggr.join=true;\n+set hive.transpose.aggr.join.unique=true;\n+set hive.mapred.mode=nonstrict;\n+\n+create view q18_tmp_cached as\n+select\n+\tl_orderkey,\n+\tsum(l_quantity) as t_sum_quantity\n+from\n+\tlineitem\n+where\n+\tl_orderkey is not null\n+group by\n+\tl_orderkey;\n+\n+\n+\n+explain cbo select\n+c_name,\n+c_custkey,\n+o_orderkey,\n+o_orderdate,\n+o_totalprice,\n+sum(l_quantity)\n+from\n+\tcustomer,\n+\torders,\n+\tq18_tmp_cached t,\n+\tlineitem l\n+where\n+c_custkey = o_custkey\n+and o_orderkey = t.l_orderkey\n+and o_orderkey is not null\n+and t.t_sum_quantity > 300\n+and o_orderkey = l.l_orderkey\n+and l.l_orderkey is not null\n+group by\n+c_name,\n+c_custkey,\n+o_orderkey,\n+o_orderdate,\n+o_totalprice\n+order by\n+o_totalprice desc,\n+o_orderdate\n+limit 100;\n+\n+\n+\n+select 'add constraints';\n+\n+alter table orders add constraint pk_o primary key (o_orderkey) disable novalidate rely;\n+alter table customer add constraint pk_c primary key (c_custkey) disable novalidate rely;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62480d110acb48fdc98c08a43dc3166d3df457c5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzNTA2NQ==", "bodyText": "As you go down recursively, you may start finding HepRelVertex as the rel node. I think you hit the instanceof Project below only for the first project because you create it using the builder.\nThat is why I think once you have gone through the first join, you will not hit another join; you could simply call areColumnsUnique in these if clauses, which could potentially uncover new cases.\nI may be wrong though, I just wanted to leave you a final note to make sure it was clear what I meant.", "url": "https://github.com/apache/hive/pull/1439#discussion_r485335065", "createdAt": "2020-09-09T04:47:02Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveAggregateJoinTransposeRule.java", "diffHunk": "@@ -303,6 +305,90 @@ public void onMatch(RelOptRuleCall call) {\n     }\n   }\n \n+  /**\n+   * Determines weather the give grouping is unique.\n+   *\n+   * Consider a join which might produce non-unique rows; but later the results are aggregated again.\n+   * This method determines if there are sufficient columns in the grouping which have been present previously as unique column(s).\n+   */\n+  private boolean isGroupingUnique(RelNode input, ImmutableBitSet groups) {\n+    if (groups.isEmpty()) {\n+      return false;\n+    }\n+    RelMetadataQuery mq = input.getCluster().getMetadataQuery();\n+    Set<ImmutableBitSet> uKeys = mq.getUniqueKeys(input);\n+    for (ImmutableBitSet u : uKeys) {\n+      if (groups.contains(u)) {\n+        return true;\n+      }\n+    }\n+    if (input instanceof Join) {\n+      Join join = (Join) input;\n+      RexBuilder rexBuilder = input.getCluster().getRexBuilder();\n+      SimpleConditionInfo cond = new SimpleConditionInfo(join.getCondition(), rexBuilder);\n+\n+      if (cond.valid) {\n+        ImmutableBitSet newGroup = groups.intersect(ImmutableBitSet.fromBitSet(cond.fields));\n+        RelNode l = join.getLeft();\n+        RelNode r = join.getRight();\n+\n+        int joinFieldCount = join.getRowType().getFieldCount();\n+        int lFieldCount = l.getRowType().getFieldCount();\n+\n+        ImmutableBitSet groupL = newGroup.get(0, lFieldCount);\n+        ImmutableBitSet groupR = newGroup.get(lFieldCount, joinFieldCount).shift(-lFieldCount);\n+\n+        if (isGroupingUnique(l, groupL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTExMA=="}, "originalCommit": {"oid": "e72417eee27e091c5a3e8ce4367bd8497f1c6d08"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a84c7513bfd9e8a72c9d19f2f69a92293ab2cc0", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/8a84c7513bfd9e8a72c9d19f2f69a92293ab2cc0", "committedDate": "2020-09-09T08:53:16Z", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24084-cost-aggr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d823db8a3e45e694431f41626d3de6d6f1af8913", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/d823db8a3e45e694431f41626d3de6d6f1af8913", "committedDate": "2020-09-11T14:45:26Z", "message": "add constraints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76e27380f7df60bd54039dcf0065f3d64f7279d8", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/76e27380f7df60bd54039dcf0065f3d64f7279d8", "committedDate": "2020-09-11T14:57:55Z", "message": "process HepVertex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde4c25b8b3a8621de3eef1d50ae89a129ec9a3e", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/bde4c25b8b3a8621de3eef1d50ae89a129ec9a3e", "committedDate": "2020-09-11T15:16:00Z", "message": "early exit rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18df6b7dc1de8987bb4898c9cfc73d753d6a6ed7", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/18df6b7dc1de8987bb4898c9cfc73d753d6a6ed7", "committedDate": "2020-09-11T15:18:55Z", "message": "q.out change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTE4Mjgx", "url": "https://github.com/apache/hive/pull/1439#pullrequestreview-486918281", "createdAt": "2020-09-11T15:41:19Z", "commit": {"oid": "18df6b7dc1de8987bb4898c9cfc73d753d6a6ed7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd7e39d246b5f844038d58e6a3572c8f7c7a6c6", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/2fd7e39d246b5f844038d58e6a3572c8f7c7a6c6", "committedDate": "2020-09-15T12:09:12Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f7c6590910ffd6205a6411ecb975ab6f2553b5", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/d3f7c6590910ffd6205a6411ecb975ab6f2553b5", "committedDate": "2020-09-15T12:25:43Z", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24084-cost-aggr"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3258, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}