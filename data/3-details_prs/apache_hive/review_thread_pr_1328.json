{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NjQ0Nzg0", "number": 1328, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1Mzo0M1rOES2iTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMzoyMlrOEUe1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjAzMzQzOnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1Mzo0M1rOG4QpoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo0MTowNVrOG4eAsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA==", "bodyText": "Missing { &  } for this else", "url": "https://github.com/apache/hive/pull/1328#discussion_r461646240", "createdAt": "2020-07-28T14:53:43Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMzYzNw==", "bodyText": "{ & }. are required? I was assuming since we have single statement within conditional block, it should be fine.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461803637", "createdAt": "2020-07-28T18:59:15Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzNDYzMw==", "bodyText": "This is by convention, we use { & } even for single line statements.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461834633", "createdAt": "2020-07-28T19:48:57Z", "author": {"login": "jcamachor"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NTEzNg==", "bodyText": "Ah, Updated the code with  { & }\n:)", "url": "https://github.com/apache/hive/pull/1328#discussion_r461865136", "createdAt": "2020-07-28T20:41:05Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA0MTM1OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1NTowOVrOG4QuYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMTo0MFrOG4aWBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQ1OQ==", "bodyText": "Small white space nitpick here, should be if (conf.get(Constants.JDBC_QUERY) == null) {", "url": "https://github.com/apache/hive/pull/1328#discussion_r461647459", "createdAt": "2020-07-28T14:55:09Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNTA2MA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461805060", "createdAt": "2020-07-28T19:01:40Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQ1OQ=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA4NjM3OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMzozN1rOG4RJUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMTo1OVrOG4aWqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA==", "bodyText": "Small whitespace nitpick here LOGGER.debug(\"Iterator ColumnNames = \" + fieldNamesProperty);", "url": "https://github.com/apache/hive/pull/1328#discussion_r461654354", "createdAt": "2020-07-28T15:03:37Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else\n+            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+        }\n+        catch (Exception e) {\n+          LOGGER.error(\"Error while trying to get column names.\", e);\n+          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+        }\n+        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n+    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjM2NA==", "bodyText": "LOGGER.debug(\"Iterator ColumnNames = {}\", fieldNamesProperty);", "url": "https://github.com/apache/hive/pull/1328#discussion_r461672364", "createdAt": "2020-07-28T15:28:20Z", "author": {"login": "jcamachor"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else\n+            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+        }\n+        catch (Exception e) {\n+          LOGGER.error(\"Error while trying to get column names.\", e);\n+          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+        }\n+        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n+    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNTIyNA==", "bodyText": "fixed.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461805224", "createdAt": "2020-07-28T19:01:59Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else\n+            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+        }\n+        catch (Exception e) {\n+          LOGGER.error(\"Error while trying to get column names.\", e);\n+          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+        }\n+        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n+    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjE5OTg2OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToyODozOVrOG4SQcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMzo0OFrOG4aaZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjU2Mw==", "bodyText": "nit. Indentation seems off.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461672563", "createdAt": "2020-07-28T15:28:39Z", "author": {"login": "jcamachor"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNjE4Mw==", "bodyText": "fixed :)", "url": "https://github.com/apache/hive/pull/1328#discussion_r461806183", "createdAt": "2020-07-28T19:03:48Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjU2Mw=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjcxNzA0OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowNzo0NVrOG49BLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0OToxM1rOG4-2lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzE2NQ==", "bodyText": "I don't believe this import is used", "url": "https://github.com/apache/hive/pull/1328#discussion_r462373165", "createdAt": "2020-07-29T15:07:45Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -22,15 +22,19 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.apache.hive.storage.jdbc.exception.HiveJdbcDatabaseAccessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n import java.sql.SQLDataException;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMzIyMw==", "bodyText": "fixed.", "url": "https://github.com/apache/hive/pull/1328#discussion_r462403223", "createdAt": "2020-07-29T15:49:13Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -22,15 +22,19 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.apache.hive.storage.jdbc.exception.HiveJdbcDatabaseAccessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n import java.sql.SQLDataException;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzE2NQ=="}, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjcxODU4OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowODowOVrOG49CLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowODowOVrOG49CLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzQyMg==", "bodyText": "Whitespace at the end of this if is still off a bit, should be just one space after )", "url": "https://github.com/apache/hive/pull/1328#discussion_r462373422", "createdAt": "2020-07-29T15:08:09Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjczOTQ1OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxMjozOVrOG49Pcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0OToyNVrOG4-3Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjgxOQ==", "bodyText": "Nitpicking here again sorry, lets move the else a line up } else {\nAlso regarding else without the { ... } being valid, you are correct it is valid java. Stylistically however using the brackets tends to be more readable and seems to be the dominant style in this project. \ud83d\udc4d", "url": "https://github.com/apache/hive/pull/1328#discussion_r462376819", "createdAt": "2020-07-29T15:12:39Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMzM1OQ==", "bodyText": "fixed.", "url": "https://github.com/apache/hive/pull/1328#discussion_r462403359", "createdAt": "2020-07-29T15:49:25Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjgxOQ=="}, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njc0MTc5OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxMzoxMVrOG49Q5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxMzoxMVrOG49Q5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NzE4OQ==", "bodyText": "Here as well lets move the else up to line 76, } else {", "url": "https://github.com/apache/hive/pull/1328#discussion_r462377189", "createdAt": "2020-07-29T15:13:11Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n+          }\n+          fieldNamesProperty = String.join(\",\",columnNames);\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTEyMTE4OnYy", "diffSide": "RIGHT", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMzoyMlrOG6tdfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMzoyMlrOG6tdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNTQyMg==", "bodyText": "nit: space missing:  String.join(\",\", columnNames);", "url": "https://github.com/apache/hive/pull/1328#discussion_r464215422", "createdAt": "2020-08-03T06:23:22Z", "author": {"login": "shameersss1"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +62,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null) {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n+          }\n+          fieldNamesProperty = String.join(\",\",columnNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 468, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}