{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNjM4NTAx", "number": 1349, "title": "HIVE-23973: Use SQL constraints to improve join reordering algorithm \u2026", "bodyText": "\u2026(III)\n\nWhat changes were proposed in this pull request?\n\nThis issue focuses on pulling non-filtering column appending FK-PK joins to the top of the plan.\nWhy are the changes needed?\n\nAmong other improvements, this will avoid unnecessary shuffling of data in intermediate stages.\nDoes this PR introduce any user-facing change?\n\nNo.\nHow was this patch tested?\n\nIncluded tests.", "createdAt": "2020-08-01T00:16:43Z", "url": "https://github.com/apache/hive/pull/1349", "merged": true, "mergeCommit": {"oid": "874741cac52d9d719185fd3b4deb7f52f156f94d"}, "closed": true, "closedAt": "2020-08-03T14:13:10Z", "author": {"login": "jcamachor"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7BW5sAH2gAyNDYwNjM4NTAxOjI5OGQyOWEzNTkyYWJjYWE3YjljODY1ODM2OWI3NzFhYjE2NDAxOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7SjNnAFqTQ1OTg5Mzg0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "298d29a3592abcaa7b9c8658369b771ab164019e", "author": {"user": {"login": "jcamachor", "name": "Jes\u00fas Camacho Rodr\u00edguez"}}, "url": "https://github.com/apache/hive/commit/298d29a3592abcaa7b9c8658369b771ab164019e", "committedDate": "2020-08-02T18:02:32Z", "message": "HIVE-23973: Use SQL constraints to improve join reordering algorithm (III)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5c9a6003b9f1d71a28d76708073655200b9b6ae", "author": {"user": {"login": "jcamachor", "name": "Jes\u00fas Camacho Rodr\u00edguez"}}, "url": "https://github.com/apache/hive/commit/f5c9a6003b9f1d71a28d76708073655200b9b6ae", "committedDate": "2020-08-02T17:41:26Z", "message": "constrain rule application"}, "afterCommit": {"oid": "298d29a3592abcaa7b9c8658369b771ab164019e", "author": {"user": {"login": "jcamachor", "name": "Jes\u00fas Camacho Rodr\u00edguez"}}, "url": "https://github.com/apache/hive/commit/298d29a3592abcaa7b9c8658369b771ab164019e", "committedDate": "2020-08-02T18:02:32Z", "message": "HIVE-23973: Use SQL constraints to improve join reordering algorithm (III)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2b6f8c344ff30d0a389272bb88fe878f73ea03", "author": {"user": {"login": "jcamachor", "name": "Jes\u00fas Camacho Rodr\u00edguez"}}, "url": "https://github.com/apache/hive/commit/5b2b6f8c344ff30d0a389272bb88fe878f73ea03", "committedDate": "2020-08-03T04:07:41Z", "message": "constrain rule application, regenerate q files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODkzODQ2", "url": "https://github.com/apache/hive/pull/1349#pullrequestreview-459893846", "createdAt": "2020-08-03T09:47:03Z", "commit": {"oid": "5b2b6f8c344ff30d0a389272bb88fe878f73ea03"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo0NzowM1rOG6zLpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo0NzowM1rOG6zLpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwOTE1Ng==", "bodyText": "nit: you can expose the id parameter to the constructor of HiveFilterJoinMergeRule", "url": "https://github.com/apache/hive/pull/1349#discussion_r464309156", "createdAt": "2020-08-03T09:47:03Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveFilterJoinRule.java", "diffHunk": "@@ -52,14 +55,34 @@ protected HiveFilterJoinRule(RelOptRuleOperand operand, String id, boolean smart\n     super(operand, id, smart, relBuilderFactory, TRUE_PREDICATE);\n   }\n \n+  /**\n+   * Rule that tries to push filter expressions into a join condition and into\n+   * the inputs of the join, iff the join is a column appending\n+   * non-filtering join.\n+   */\n+  public static class HiveFilterNonFilteringJoinMergeRule extends HiveFilterJoinMergeRule {\n+\n+    @Override\n+    public boolean matches(RelOptRuleCall call) {\n+      Join join = call.rel(1);\n+      RewritablePKFKJoinInfo joinInfo = HiveRelOptUtil.isRewritablePKFKJoin(\n+          join, true, call.getMetadataQuery());\n+      if (!joinInfo.rewritable) {\n+        return false;\n+      }\n+      return super.matches(call);\n+    }\n+\n+  }\n+\n   /**\n    * Rule that tries to push filter expressions into a join condition and into\n    * the inputs of the join.\n    */\n   public static class HiveFilterJoinMergeRule extends HiveFilterJoinRule {\n     public HiveFilterJoinMergeRule() {\n-      super(RelOptRule.operand(Filter.class, RelOptRule.operand(Join.class, RelOptRule.any())),\n-          \"HiveFilterJoinRule:filter\", true, HiveRelFactories.HIVE_BUILDER);\n+      super(operand(Filter.class, operand(Join.class, any())),\n+          null, true, HiveRelFactories.HIVE_BUILDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2b6f8c344ff30d0a389272bb88fe878f73ea03"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3404, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}