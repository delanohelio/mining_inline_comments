{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MTA4NzI3", "number": 1758, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToyOTo1N1rOFC3_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTozNToyOVrOFC4I8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTU4OTEzOnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToyOTo1N1rOICP7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDoyMjo1MFrOICXHxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODkzMw==", "bodyText": "Nit: Would probably name it testEmptyList for consistency with the Serializer", "url": "https://github.com/apache/hive/pull/1758#discussion_r539228933", "createdAt": "2020-12-09T11:29:57Z", "author": {"login": "pgaref"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.io.arrow;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestSerializer {\n+  @Test\n+  public void testEmptyArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzNjE0NA==", "bodyText": "The name was based on the Hive type,  but I think both makes sense so renamed \ud83d\ude04", "url": "https://github.com/apache/hive/pull/1758#discussion_r539336144", "createdAt": "2020-12-09T14:09:34Z", "author": {"login": "pvary"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.io.arrow;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestSerializer {\n+  @Test\n+  public void testEmptyArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODkzMw=="}, "originalCommit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0Njg4Ng==", "bodyText": "The name was based on the Hive type, but I think both makes sense so renamed \ud83d\ude04\n\nCant disagree with that :D", "url": "https://github.com/apache/hive/pull/1758#discussion_r539346886", "createdAt": "2020-12-09T14:22:50Z", "author": {"login": "pgaref"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.io.arrow;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestSerializer {\n+  @Test\n+  public void testEmptyArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODkzMw=="}, "originalCommit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTYxMjY0OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTozNToyOVrOICQIXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDoxMDoyMVrOICWf-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzMjM0OQ==", "bodyText": "Would it make sense to test nested types here as well? like list ?", "url": "https://github.com/apache/hive/pull/1758#discussion_r539232349", "createdAt": "2020-12-09T11:35:29Z", "author": {"login": "pgaref"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.io.arrow;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestSerializer {\n+  @Test\n+  public void testEmptyArray() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"array<tinyint>\");\n+    List<String> fieldNames = Arrays.asList(new String[]{\"a\"});\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: List<$data$: Int(8, true)>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyStruct() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"struct<b:int,c:string>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: Struct<b: Int(32, true), c: Utf8>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyMap() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"map<string,string>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: List<$data$: Struct<keys: Utf8, values: Utf8>>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyComplexStruct() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\n+        \"struct<b:array<tinyint>,c:map<string,string>,d:struct<e:array<tinyint>,f:map<string,string>>>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\n+        \"Schema<a: Struct<b: List<$data$: Int(8, true)>, c: List<$data$: Struct<keys: Utf8, values: Utf8>>, \" +\n+            \"d: Struct<e: List<$data$: Int(8, true)>, f: List<$data$: Struct<keys: Utf8, values: Utf8>>>>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzNjY5OQ==", "bodyText": "Addes some more tests to cover every nested type at least once", "url": "https://github.com/apache/hive/pull/1758#discussion_r539336699", "createdAt": "2020-12-09T14:10:21Z", "author": {"login": "pvary"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.io.arrow;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestSerializer {\n+  @Test\n+  public void testEmptyArray() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"array<tinyint>\");\n+    List<String> fieldNames = Arrays.asList(new String[]{\"a\"});\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: List<$data$: Int(8, true)>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyStruct() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"struct<b:int,c:string>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: Struct<b: Int(32, true), c: Utf8>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyMap() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\"map<string,string>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\"Schema<a: List<$data$: Struct<keys: Utf8, values: Utf8>>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }\n+\n+  @Test\n+  public void testEmptyComplexStruct() {\n+    List<TypeInfo> typeInfos = TypeInfoUtils.getTypeInfosFromTypeString(\n+        \"struct<b:array<tinyint>,c:map<string,string>,d:struct<e:array<tinyint>,f:map<string,string>>>\");\n+    List<String> fieldNames = Arrays.asList(new String[] { \"a\" });\n+    Serializer converter = new Serializer(new HiveConf(), \"attemptId\", typeInfos, fieldNames);\n+    ArrowWrapperWritable writable = converter.emptyBatch();\n+    Assert.assertEquals(\n+        \"Schema<a: Struct<b: List<$data$: Int(8, true)>, c: List<$data$: Struct<keys: Utf8, values: Utf8>>, \" +\n+            \"d: Struct<e: List<$data$: Int(8, true)>, f: List<$data$: Struct<keys: Utf8, values: Utf8>>>>>\",\n+        writable.getVectorSchemaRoot().getSchema().toString());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzMjM0OQ=="}, "originalCommit": {"oid": "9c96e6cef845fa23049be2f4d635f7b9d6d73c83"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 147, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}