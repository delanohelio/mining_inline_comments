{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NzkwODY2", "number": 1756, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODowOTowMlrOFKfnfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozNTo0MlrOFL2-HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4MDkyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODowOTowMlrOINRqEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDozMTo1N1rOINSaVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTY5Ng==", "bodyText": "No need to define this here.  Just use JDK StandardCharsets.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550791696", "createdAt": "2021-01-01T18:09:02Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNDA1NA==", "bodyText": "Fixed, didn't know about that.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550804054", "createdAt": "2021-01-01T20:31:57Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTY5Ng=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4MTgzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoxMTowMVrOINRqiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDo1MTozNlrOINSgCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTgxNw==", "bodyText": "I personally hate NULL values.  Can you get rid of this check (exclude == null) and simply call this method with Collections.emptySet() ?", "url": "https://github.com/apache/hive/pull/1756#discussion_r550791817", "createdAt": "2021-01-01T18:11:01Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNTUxMw==", "bodyText": "Totally agree, fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550805513", "createdAt": "2021-01-01T20:51:36Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTgxNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4MjU1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoxMjoxMFrOINRq2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDo1MDo1OFrOINSf0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTg5Ng==", "bodyText": "Please add JavaDoc here and also use JDK7+ ability of not needing to explicitly define the Type on the right hand side in several places, for example:\nList<String> realProps = new ArrayList<>();", "url": "https://github.com/apache/hive/pull/1756#discussion_r550791896", "createdAt": "2021-01-01T18:12:10Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNTQ1OQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550805459", "createdAt": "2021-01-01T20:50:58Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTg5Ng=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4Mjk3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoxMjo1NlrOINRrCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDozOTowNFrOINScrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTk0NQ==", "bodyText": "Can now just use Java String#join method instead of something third party.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550791945", "createdAt": "2021-01-01T18:12:56Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNDY1Mg==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1756#discussion_r550804652", "createdAt": "2021-01-01T20:39:04Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTk0NQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4MzYyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoxMzozM1rOINRrUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDozMToyOVrOINSaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjAxNg==", "bodyText": "Use StandardCharsets.UTF_8", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792016", "createdAt": "2021-01-01T18:13:33Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNDAyNg==", "bodyText": "Fixed, thanks.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550804026", "createdAt": "2021-01-01T20:31:29Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjAxNg=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4Nzg3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoxODoxN1rOINRtGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozODoyMlrOINZugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjQ3Mg==", "bodyText": "new String[0]\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#toArray-T:A-", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792472", "createdAt": "2021-01-01T18:18:17Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzkwNQ==", "bodyText": "Fixed", "url": "https://github.com/apache/hive/pull/1756#discussion_r550923905", "createdAt": "2021-01-02T21:38:22Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjQ3Mg=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4ODgwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoxOTo1OVrOINRthQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0ODozN1rOINZxuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjU4MQ==", "bodyText": "Math#min", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792581", "createdAt": "2021-01-01T18:19:59Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDcyOQ==", "bodyText": "Math#max - fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924729", "createdAt": "2021-01-02T21:48:37Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjU4MQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4OTA5OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyMDozMVrOINRtqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0OTo1MlrOINZyLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjYxNw==", "bodyText": "Arrays.asList", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792617", "createdAt": "2021-01-01T18:20:31Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();\n+    indentMultilineValue(value, tableInfo, new int[] {0, colNameLength}, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair\n+   * If the output is padded then unescape the value, so it could be printed in multiple lines.\n+   * In this case it assumes the pair is already indented with a field delimiter\n+   * \n+   * @param name The field name to print\n+   * @param value The value t print\n+   * @param tableInfo The target builder\n+   * @param isOutputPadded Should the value printed as a padded string?\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo, boolean isOutputPadded) {\n+    String unescapedValue = (isOutputPadded && value != null) ?\n+        value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+    formatOutput(name, unescapedValue, tableInfo);\n+  }\n+\n+  /**\n+   * Indent processing for multi-line values.\n+   * Values should be indented the same amount on each line.\n+   * If the first line comment starts indented by k, the following line comments should also be indented by k.\n+   * \n+   * @param value the value to write\n+   * @param tableInfo the buffer to write to\n+   * @param columnWidths the widths of the previous columns\n+   * @param printNull print null as a string, or do not print anything\n+   */\n+  private static void indentMultilineValue(String value, StringBuilder tableInfo, int[] columnWidths,\n+      boolean printNull) {\n+    if (value == null) {\n+      if (printNull) {\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", value));\n+      }\n+      tableInfo.append(LINE_DELIM);\n+    } else {\n+      String[] valueSegments = value.split(\"\\n|\\r|\\r\\n\");\n+      tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[0])).append(LINE_DELIM);\n+      for (int i = 1; i < valueSegments.length; i++) {\n+        printPadding(tableInfo, columnWidths);\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[i])).append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Print the rigth padding, with the given column widths.\n+   * \n+   * @param tableInfo The buffer to write to\n+   * @param columnWidths The column widths\n+   */\n+  private static void printPadding(StringBuilder tableInfo, int[] columnWidths) {\n+    for (int columnWidth : columnWidths) {\n+      if (columnWidth == 0) {\n+        tableInfo.append(FIELD_DELIM);\n+      } else {\n+        tableInfo.append(String.format(\"%\" + columnWidth + \"s\" + FIELD_DELIM, \"\"));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Helps to format tables in SHOW ... command outputs.\n+   */\n+  public static class TextMetaDataTable {\n+    private List<List<String>> table = new ArrayList<>();\n+\n+    public void addRow(String... values) {\n+      table.add(Lists.<String> newArrayList(values));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDg0Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924846", "createdAt": "2021-01-02T21:49:52Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();\n+    indentMultilineValue(value, tableInfo, new int[] {0, colNameLength}, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair\n+   * If the output is padded then unescape the value, so it could be printed in multiple lines.\n+   * In this case it assumes the pair is already indented with a field delimiter\n+   * \n+   * @param name The field name to print\n+   * @param value The value t print\n+   * @param tableInfo The target builder\n+   * @param isOutputPadded Should the value printed as a padded string?\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo, boolean isOutputPadded) {\n+    String unescapedValue = (isOutputPadded && value != null) ?\n+        value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+    formatOutput(name, unescapedValue, tableInfo);\n+  }\n+\n+  /**\n+   * Indent processing for multi-line values.\n+   * Values should be indented the same amount on each line.\n+   * If the first line comment starts indented by k, the following line comments should also be indented by k.\n+   * \n+   * @param value the value to write\n+   * @param tableInfo the buffer to write to\n+   * @param columnWidths the widths of the previous columns\n+   * @param printNull print null as a string, or do not print anything\n+   */\n+  private static void indentMultilineValue(String value, StringBuilder tableInfo, int[] columnWidths,\n+      boolean printNull) {\n+    if (value == null) {\n+      if (printNull) {\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", value));\n+      }\n+      tableInfo.append(LINE_DELIM);\n+    } else {\n+      String[] valueSegments = value.split(\"\\n|\\r|\\r\\n\");\n+      tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[0])).append(LINE_DELIM);\n+      for (int i = 1; i < valueSegments.length; i++) {\n+        printPadding(tableInfo, columnWidths);\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[i])).append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Print the rigth padding, with the given column widths.\n+   * \n+   * @param tableInfo The buffer to write to\n+   * @param columnWidths The column widths\n+   */\n+  private static void printPadding(StringBuilder tableInfo, int[] columnWidths) {\n+    for (int columnWidth : columnWidths) {\n+      if (columnWidth == 0) {\n+        tableInfo.append(FIELD_DELIM);\n+      } else {\n+        tableInfo.append(String.format(\"%\" + columnWidth + \"s\" + FIELD_DELIM, \"\"));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Helps to format tables in SHOW ... command outputs.\n+   */\n+  public static class TextMetaDataTable {\n+    private List<List<String>> table = new ArrayList<>();\n+\n+    public void addRow(String... values) {\n+      table.add(Lists.<String> newArrayList(values));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjYxNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 367}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ4OTE5OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyMDo1OVrOINRtuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0Njo0NFrOINZxIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjYzMw==", "bodyText": "new String[0]", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792633", "createdAt": "2021-01-01T18:20:59Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();\n+    indentMultilineValue(value, tableInfo, new int[] {0, colNameLength}, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair\n+   * If the output is padded then unescape the value, so it could be printed in multiple lines.\n+   * In this case it assumes the pair is already indented with a field delimiter\n+   * \n+   * @param name The field name to print\n+   * @param value The value t print\n+   * @param tableInfo The target builder\n+   * @param isOutputPadded Should the value printed as a padded string?\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo, boolean isOutputPadded) {\n+    String unescapedValue = (isOutputPadded && value != null) ?\n+        value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+    formatOutput(name, unescapedValue, tableInfo);\n+  }\n+\n+  /**\n+   * Indent processing for multi-line values.\n+   * Values should be indented the same amount on each line.\n+   * If the first line comment starts indented by k, the following line comments should also be indented by k.\n+   * \n+   * @param value the value to write\n+   * @param tableInfo the buffer to write to\n+   * @param columnWidths the widths of the previous columns\n+   * @param printNull print null as a string, or do not print anything\n+   */\n+  private static void indentMultilineValue(String value, StringBuilder tableInfo, int[] columnWidths,\n+      boolean printNull) {\n+    if (value == null) {\n+      if (printNull) {\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", value));\n+      }\n+      tableInfo.append(LINE_DELIM);\n+    } else {\n+      String[] valueSegments = value.split(\"\\n|\\r|\\r\\n\");\n+      tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[0])).append(LINE_DELIM);\n+      for (int i = 1; i < valueSegments.length; i++) {\n+        printPadding(tableInfo, columnWidths);\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[i])).append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Print the rigth padding, with the given column widths.\n+   * \n+   * @param tableInfo The buffer to write to\n+   * @param columnWidths The column widths\n+   */\n+  private static void printPadding(StringBuilder tableInfo, int[] columnWidths) {\n+    for (int columnWidth : columnWidths) {\n+      if (columnWidth == 0) {\n+        tableInfo.append(FIELD_DELIM);\n+      } else {\n+        tableInfo.append(String.format(\"%\" + columnWidth + \"s\" + FIELD_DELIM, \"\"));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Helps to format tables in SHOW ... command outputs.\n+   */\n+  public static class TextMetaDataTable {\n+    private List<List<String>> table = new ArrayList<>();\n+\n+    public void addRow(String... values) {\n+      table.add(Lists.<String> newArrayList(values));\n+    }\n+\n+    public String renderTable(boolean isOutputPadded) {\n+      StringBuilder stringBuilder = new StringBuilder();\n+      for (List<String> row : table) {\n+        formatOutput(row.toArray(new String[] {}), stringBuilder, isOutputPadded, isOutputPadded);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDU3Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924576", "createdAt": "2021-01-02T21:46:44Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();\n+    indentMultilineValue(value, tableInfo, new int[] {0, colNameLength}, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair\n+   * If the output is padded then unescape the value, so it could be printed in multiple lines.\n+   * In this case it assumes the pair is already indented with a field delimiter\n+   * \n+   * @param name The field name to print\n+   * @param value The value t print\n+   * @param tableInfo The target builder\n+   * @param isOutputPadded Should the value printed as a padded string?\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo, boolean isOutputPadded) {\n+    String unescapedValue = (isOutputPadded && value != null) ?\n+        value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+    formatOutput(name, unescapedValue, tableInfo);\n+  }\n+\n+  /**\n+   * Indent processing for multi-line values.\n+   * Values should be indented the same amount on each line.\n+   * If the first line comment starts indented by k, the following line comments should also be indented by k.\n+   * \n+   * @param value the value to write\n+   * @param tableInfo the buffer to write to\n+   * @param columnWidths the widths of the previous columns\n+   * @param printNull print null as a string, or do not print anything\n+   */\n+  private static void indentMultilineValue(String value, StringBuilder tableInfo, int[] columnWidths,\n+      boolean printNull) {\n+    if (value == null) {\n+      if (printNull) {\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", value));\n+      }\n+      tableInfo.append(LINE_DELIM);\n+    } else {\n+      String[] valueSegments = value.split(\"\\n|\\r|\\r\\n\");\n+      tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[0])).append(LINE_DELIM);\n+      for (int i = 1; i < valueSegments.length; i++) {\n+        printPadding(tableInfo, columnWidths);\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[i])).append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Print the rigth padding, with the given column widths.\n+   * \n+   * @param tableInfo The buffer to write to\n+   * @param columnWidths The column widths\n+   */\n+  private static void printPadding(StringBuilder tableInfo, int[] columnWidths) {\n+    for (int columnWidth : columnWidths) {\n+      if (columnWidth == 0) {\n+        tableInfo.append(FIELD_DELIM);\n+      } else {\n+        tableInfo.append(String.format(\"%\" + columnWidth + \"s\" + FIELD_DELIM, \"\"));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Helps to format tables in SHOW ... command outputs.\n+   */\n+  public static class TextMetaDataTable {\n+    private List<List<String>> table = new ArrayList<>();\n+\n+    public void addRow(String... values) {\n+      table.add(Lists.<String> newArrayList(values));\n+    }\n+\n+    public String renderTable(boolean isOutputPadded) {\n+      StringBuilder stringBuilder = new StringBuilder();\n+      for (List<String> row : table) {\n+        formatOutput(row.toArray(new String[] {}), stringBuilder, isOutputPadded, isOutputPadded);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MjYzMw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 373}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5MTQ1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyNDowN1rOINRuuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjozNzozNVrOINaBYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mjg5MQ==", "bodyText": "There's got to be a better way of doing this...\nList#addAll or something other than 1-by-1 iteration.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792891", "createdAt": "2021-01-01T18:24:07Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();\n+    indentMultilineValue(value, tableInfo, new int[] {0, colNameLength}, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair\n+   * If the output is padded then unescape the value, so it could be printed in multiple lines.\n+   * In this case it assumes the pair is already indented with a field delimiter\n+   * \n+   * @param name The field name to print\n+   * @param value The value t print\n+   * @param tableInfo The target builder\n+   * @param isOutputPadded Should the value printed as a padded string?\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo, boolean isOutputPadded) {\n+    String unescapedValue = (isOutputPadded && value != null) ?\n+        value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+    formatOutput(name, unescapedValue, tableInfo);\n+  }\n+\n+  /**\n+   * Indent processing for multi-line values.\n+   * Values should be indented the same amount on each line.\n+   * If the first line comment starts indented by k, the following line comments should also be indented by k.\n+   * \n+   * @param value the value to write\n+   * @param tableInfo the buffer to write to\n+   * @param columnWidths the widths of the previous columns\n+   * @param printNull print null as a string, or do not print anything\n+   */\n+  private static void indentMultilineValue(String value, StringBuilder tableInfo, int[] columnWidths,\n+      boolean printNull) {\n+    if (value == null) {\n+      if (printNull) {\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", value));\n+      }\n+      tableInfo.append(LINE_DELIM);\n+    } else {\n+      String[] valueSegments = value.split(\"\\n|\\r|\\r\\n\");\n+      tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[0])).append(LINE_DELIM);\n+      for (int i = 1; i < valueSegments.length; i++) {\n+        printPadding(tableInfo, columnWidths);\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[i])).append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Print the rigth padding, with the given column widths.\n+   * \n+   * @param tableInfo The buffer to write to\n+   * @param columnWidths The column widths\n+   */\n+  private static void printPadding(StringBuilder tableInfo, int[] columnWidths) {\n+    for (int columnWidth : columnWidths) {\n+      if (columnWidth == 0) {\n+        tableInfo.append(FIELD_DELIM);\n+      } else {\n+        tableInfo.append(String.format(\"%\" + columnWidth + \"s\" + FIELD_DELIM, \"\"));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Helps to format tables in SHOW ... command outputs.\n+   */\n+  public static class TextMetaDataTable {\n+    private List<List<String>> table = new ArrayList<>();\n+\n+    public void addRow(String... values) {\n+      table.add(Lists.<String> newArrayList(values));\n+    }\n+\n+    public String renderTable(boolean isOutputPadded) {\n+      StringBuilder stringBuilder = new StringBuilder();\n+      for (List<String> row : table) {\n+        formatOutput(row.toArray(new String[] {}), stringBuilder, isOutputPadded, isOutputPadded);\n+      }\n+      return stringBuilder.toString();\n+    }\n+\n+    public void transpose() {\n+      if (table.size() == 0) {\n+        return;\n+      }\n+      List<List<String>> newTable = new ArrayList<List<String>>();\n+      for (int i = 0; i < table.get(0).size(); i++) {\n+        newTable.add(new ArrayList<>());\n+      }\n+      for (List<String> sourceRow : table) {\n+        if (newTable.size() != sourceRow.size()) {\n+          throw new RuntimeException(\"invalid table size\");\n+        }\n+        for (int i = 0; i < sourceRow.size(); i++) {\n+          newTable.get(i).add(sourceRow.get(i));\n+        }\n+      }\n+      table = newTable;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 395}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyODczNw==", "bodyText": "I don't think it is possible in any other way. Transposing a table must be done like this in essence.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550928737", "createdAt": "2021-01-02T22:37:35Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.metastore.api.BinaryColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.BooleanColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.DateColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.api.DecimalColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.DoubleColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.LongColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.StringColumnStatsData;\n+import org.apache.hadoop.hive.metastore.api.TimestampColumnStatsData;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.math.BigInteger;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Utilities for SHOW ... commands.\n+ */\n+public final class ShowUtils {\n+  private ShowUtils() {\n+    throw new UnsupportedOperationException(\"ShowUtils should not be instantiated\");\n+  }\n+\n+  public static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  public static DataOutputStream getOutputStream(Path outputFile, DDLOperationContext context) throws HiveException {\n+    try {\n+      FileSystem fs = outputFile.getFileSystem(context.getConf());\n+      return fs.create(outputFile);\n+    } catch (Exception e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  public static String propertiesToString(Map<String, String> props, Set<String> exclude) {\n+    if (props.isEmpty()) {\n+      return \"\";\n+    }\n+  \n+    SortedMap<String, String> sortedProperties = new TreeMap<String, String>(props);\n+    List<String> realProps = new ArrayList<String>();\n+    for (Map.Entry<String, String> e : sortedProperties.entrySet()) {\n+      if (e.getValue() != null && (exclude == null || !exclude.contains(e.getKey()))) {\n+        realProps.add(\"  '\" + e.getKey() + \"'='\" + HiveStringUtils.escapeHiveCommand(e.getValue()) + \"'\");\n+      }\n+    }\n+    return StringUtils.join(realProps, \", \\n\");\n+  }\n+\n+  public static void writeToFile(String data, String file, DDLOperationContext context) throws IOException {\n+    if (StringUtils.isEmpty(data)) {\n+      return;\n+    }\n+  \n+    Path resFile = new Path(file);\n+    FileSystem fs = resFile.getFileSystem(context.getConf());\n+    try (FSDataOutputStream out = fs.create(resFile);\n+         OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\")) {\n+      writer.write(data);\n+      writer.write((char) Utilities.newLineCode);\n+      writer.flush();\n+    }\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value) {\n+    appendNonNull(builder, value, false);\n+  }\n+\n+  public static void appendNonNull(StringBuilder builder, Object value, boolean firstColumn) {\n+    if (!firstColumn) {\n+      builder.append((char)Utilities.tabCode);\n+    } else if (builder.length() > 0) {\n+      builder.append((char)Utilities.newLineCode);\n+    }\n+    if (value != null) {\n+      builder.append(value);\n+    }\n+  }\n+\n+\n+  public static String[] extractColumnValues(FieldSchema column, boolean isColumnStatsAvailable,\n+      ColumnStatisticsObj columnStatisticsObj) {\n+    List<String> values = new ArrayList<>();\n+    values.add(column.getName());\n+    values.add(column.getType());\n+\n+    if (isColumnStatsAvailable) {\n+      if (columnStatisticsObj != null) {\n+        ColumnStatisticsData statsData = columnStatisticsObj.getStatsData();\n+        if (statsData.isSetBinaryStats()) {\n+          BinaryColumnStatsData binaryStats = statsData.getBinaryStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + binaryStats.getNumNulls(), \"\",\n+              \"\" + binaryStats.getAvgColLen(), \"\" + binaryStats.getMaxColLen(), \"\", \"\",\n+              convertToString(binaryStats.getBitVectors())));\n+        } else if (statsData.isSetStringStats()) {\n+          StringColumnStatsData stringStats = statsData.getStringStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + stringStats.getNumNulls(), \"\" + stringStats.getNumDVs(),\n+              \"\" + stringStats.getAvgColLen(), \"\" + stringStats.getMaxColLen(), \"\", \"\",\n+              convertToString(stringStats.getBitVectors())));\n+        } else if (statsData.isSetBooleanStats()) {\n+          BooleanColumnStatsData booleanStats = statsData.getBooleanStats();\n+          values.addAll(Lists.newArrayList(\"\", \"\", \"\" + booleanStats.getNumNulls(), \"\", \"\", \"\",\n+              \"\" + booleanStats.getNumTrues(), \"\" + booleanStats.getNumFalses(),\n+              convertToString(booleanStats.getBitVectors())));\n+        } else if (statsData.isSetDecimalStats()) {\n+          DecimalColumnStatsData decimalStats = statsData.getDecimalStats();\n+          values.addAll(Lists.newArrayList(convertToString(decimalStats.getLowValue()),\n+              convertToString(decimalStats.getHighValue()), \"\" + decimalStats.getNumNulls(),\n+              \"\" + decimalStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(decimalStats.getBitVectors())));\n+        } else if (statsData.isSetDoubleStats()) {\n+          DoubleColumnStatsData doubleStats = statsData.getDoubleStats();\n+          values.addAll(Lists.newArrayList(\"\" + doubleStats.getLowValue(), \"\" + doubleStats.getHighValue(),\n+              \"\" + doubleStats.getNumNulls(), \"\" + doubleStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(doubleStats.getBitVectors())));\n+        } else if (statsData.isSetLongStats()) {\n+          LongColumnStatsData longStats = statsData.getLongStats();\n+          values.addAll(Lists.newArrayList(\"\" + longStats.getLowValue(), \"\" + longStats.getHighValue(),\n+              \"\" + longStats.getNumNulls(), \"\" + longStats.getNumDVs(), \"\", \"\", \"\", \"\",\n+              convertToString(longStats.getBitVectors())));\n+        } else if (statsData.isSetDateStats()) {\n+          DateColumnStatsData dateStats = statsData.getDateStats();\n+          values.addAll(Lists.newArrayList(convertToString(dateStats.getLowValue()),\n+              convertToString(dateStats.getHighValue()), \"\" + dateStats.getNumNulls(), \"\" + dateStats.getNumDVs(),\n+              \"\", \"\", \"\", \"\", convertToString(dateStats.getBitVectors())));\n+        } else if (statsData.isSetTimestampStats()) {\n+          TimestampColumnStatsData timestampStats = statsData.getTimestampStats();\n+          values.addAll(Lists.newArrayList(convertToString(timestampStats.getLowValue()),\n+              convertToString(timestampStats.getHighValue()), \"\" + timestampStats.getNumNulls(),\n+              \"\" + timestampStats.getNumDVs(), \"\", \"\", \"\", \"\", convertToString(timestampStats.getBitVectors())));\n+        }\n+      } else {\n+        values.addAll(Lists.newArrayList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n+      }\n+    }\n+\n+    values.add(column.getComment() != null ? column.getComment() : \"\");\n+    return values.toArray(new String[] {});\n+  }\n+\n+  public static String convertToString(Decimal val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    HiveDecimal result = HiveDecimal.create(new BigInteger(val.getUnscaled()), val.getScale());\n+    return (result != null) ? result.toString() : \"\";\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Date val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    DateWritableV2 writableValue = new DateWritableV2((int) val.getDaysSinceEpoch());\n+    return writableValue.toString();\n+  }\n+\n+  private static String convertToString(byte[] buffer) {\n+    if (buffer == null || buffer.length == 0) {\n+      return \"\";\n+    }\n+    return new String(Arrays.copyOfRange(buffer, 0, 2));\n+  }\n+\n+  public static String convertToString(org.apache.hadoop.hive.metastore.api.Timestamp val) {\n+    if (val == null) {\n+      return \"\";\n+    }\n+\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    return writableValue.toString();\n+  }\n+\n+  /**\n+   * Convert the map to a JSON string.\n+   */\n+  public static void asJson(OutputStream out, Map<String, Object> data) throws HiveException {\n+    try {\n+      new ObjectMapper().writeValue(out, data);\n+    } catch (IOException e) {\n+      throw new HiveException(\"Unable to convert to json\", e);\n+    }\n+  }\n+\n+  public static final String FIELD_DELIM = \"\\t\";\n+  public static final String LINE_DELIM = \"\\n\";\n+\n+  public static final int DEFAULT_STRINGBUILDER_SIZE = 2048;\n+  public static final int ALIGNMENT = 20;\n+\n+  /**\n+   * Prints a row with the given fields into the builder.\n+   * The last field could be a multiline field, and the extra lines should be padded.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains newlines?\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo, boolean isLastLinePadded,\n+      boolean isFormatted) {\n+    if (!isFormatted) {\n+      for (int i = 0; i < fields.length; i++) {\n+        Object value = HiveStringUtils.escapeJava(fields[i]);\n+        if (value != null) {\n+          tableInfo.append(value);\n+        }\n+        tableInfo.append((i == fields.length - 1) ? LINE_DELIM : FIELD_DELIM);\n+      }\n+    } else {\n+      int[] paddings = new int[fields.length - 1];\n+      if (fields.length > 1) {\n+        for (int i = 0; i < fields.length - 1; i++) {\n+          if (fields[i] == null) {\n+            tableInfo.append(FIELD_DELIM);\n+            continue;\n+          }\n+          tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", fields[i])).append(FIELD_DELIM);\n+          paddings[i] = ALIGNMENT > fields[i].length() ? ALIGNMENT : fields[i].length();\n+        }\n+      }\n+      if (fields.length > 0) {\n+        String value = fields[fields.length - 1];\n+        String unescapedValue = (isLastLinePadded && value != null) ?\n+            value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+        indentMultilineValue(unescapedValue, tableInfo, paddings, false);\n+      } else {\n+        tableInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Prints a row the given fields to a formatted line.\n+   * \n+   * @param fields The fields to print\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String[] fields, StringBuilder tableInfo) {\n+    formatOutput(fields, tableInfo, false, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair, and if the value contains newlines, it adds one more empty field\n+   * before the two values (Assumes, the name value pair is already indented with it).\n+   * \n+   * @param name The field name to print\n+   * @param value The value to print - might contain newlines\n+   * @param tableInfo The target builder\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo) {\n+    tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", name)).append(FIELD_DELIM);\n+    int colNameLength = ALIGNMENT > name.length() ? ALIGNMENT : name.length();\n+    indentMultilineValue(value, tableInfo, new int[] {0, colNameLength}, true);\n+  }\n+\n+  /**\n+   * Prints the name value pair\n+   * If the output is padded then unescape the value, so it could be printed in multiple lines.\n+   * In this case it assumes the pair is already indented with a field delimiter\n+   * \n+   * @param name The field name to print\n+   * @param value The value t print\n+   * @param tableInfo The target builder\n+   * @param isOutputPadded Should the value printed as a padded string?\n+   */\n+  public static void formatOutput(String name, String value, StringBuilder tableInfo, boolean isOutputPadded) {\n+    String unescapedValue = (isOutputPadded && value != null) ?\n+        value.replaceAll(\"\\\\\\\\n|\\\\\\\\r|\\\\\\\\r\\\\\\\\n\", \"\\n\") : value;\n+    formatOutput(name, unescapedValue, tableInfo);\n+  }\n+\n+  /**\n+   * Indent processing for multi-line values.\n+   * Values should be indented the same amount on each line.\n+   * If the first line comment starts indented by k, the following line comments should also be indented by k.\n+   * \n+   * @param value the value to write\n+   * @param tableInfo the buffer to write to\n+   * @param columnWidths the widths of the previous columns\n+   * @param printNull print null as a string, or do not print anything\n+   */\n+  private static void indentMultilineValue(String value, StringBuilder tableInfo, int[] columnWidths,\n+      boolean printNull) {\n+    if (value == null) {\n+      if (printNull) {\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", value));\n+      }\n+      tableInfo.append(LINE_DELIM);\n+    } else {\n+      String[] valueSegments = value.split(\"\\n|\\r|\\r\\n\");\n+      tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[0])).append(LINE_DELIM);\n+      for (int i = 1; i < valueSegments.length; i++) {\n+        printPadding(tableInfo, columnWidths);\n+        tableInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", valueSegments[i])).append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Print the rigth padding, with the given column widths.\n+   * \n+   * @param tableInfo The buffer to write to\n+   * @param columnWidths The column widths\n+   */\n+  private static void printPadding(StringBuilder tableInfo, int[] columnWidths) {\n+    for (int columnWidth : columnWidths) {\n+      if (columnWidth == 0) {\n+        tableInfo.append(FIELD_DELIM);\n+      } else {\n+        tableInfo.append(String.format(\"%\" + columnWidth + \"s\" + FIELD_DELIM, \"\"));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Helps to format tables in SHOW ... command outputs.\n+   */\n+  public static class TextMetaDataTable {\n+    private List<List<String>> table = new ArrayList<>();\n+\n+    public void addRow(String... values) {\n+      table.add(Lists.<String> newArrayList(values));\n+    }\n+\n+    public String renderTable(boolean isOutputPadded) {\n+      StringBuilder stringBuilder = new StringBuilder();\n+      for (List<String> row : table) {\n+        formatOutput(row.toArray(new String[] {}), stringBuilder, isOutputPadded, isOutputPadded);\n+      }\n+      return stringBuilder.toString();\n+    }\n+\n+    public void transpose() {\n+      if (table.size() == 0) {\n+        return;\n+      }\n+      List<List<String>> newTable = new ArrayList<List<String>>();\n+      for (int i = 0; i < table.get(0).size(); i++) {\n+        newTable.add(new ArrayList<>());\n+      }\n+      for (List<String> sourceRow : table) {\n+        if (newTable.size() != sourceRow.size()) {\n+          throw new RuntimeException(\"invalid table size\");\n+        }\n+        for (int i = 0; i < sourceRow.size(); i++) {\n+          newTable.get(i).add(sourceRow.get(i));\n+        }\n+      }\n+      table = newTable;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mjg5MQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 395}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5MTk2OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/database/desc/DescDatabaseFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyNDo1MVrOINRu8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozNjozNFrOINZt2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mjk0Ng==", "bodyText": "StandardCharsets.UTF_8", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792946", "createdAt": "2021-01-01T18:24:51Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/database/desc/DescDatabaseFormatter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.database.desc;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.PrincipalType;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * Formats DESC DATABASES results.\n+ */\n+abstract class DescDatabaseFormatter {\n+  static DescDatabaseFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonDescDatabaseFormatter();\n+    } else {\n+      return new TextDescDatabaseFormatter();\n+    }\n+  }\n+\n+  abstract void showDatabaseDescription(DataOutputStream out, String database, String comment, String location,\n+      String managedLocation, String ownerName, PrincipalType ownerType, Map<String, String> params)\n+      throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonDescDatabaseFormatter extends DescDatabaseFormatter {\n+    @Override\n+    void showDatabaseDescription(DataOutputStream out, String database, String comment, String location,\n+        String managedLocation, String ownerName, PrincipalType ownerType, Map<String, String> params)\n+        throws HiveException {\n+      MapBuilder builder = MapBuilder.create()\n+          .put(\"database\", database)\n+          .put(\"comment\", comment)\n+          .put(\"location\", location);\n+      if (managedLocation != null) {\n+        builder.put(\"managedLocation\", managedLocation);\n+      }\n+      if (ownerName != null) {\n+        builder.put(\"owner\", ownerName);\n+      }\n+      if (ownerType != null) {\n+        builder.put(\"ownerType\", ownerType.name());\n+      }\n+      if (MapUtils.isNotEmpty(params)) {\n+        builder.put(\"params\", params);\n+      }\n+      ShowUtils.asJson(out, builder.build());\n+    }\n+  }\n+\n+  static class TextDescDatabaseFormatter extends DescDatabaseFormatter {\n+    @Override\n+    void showDatabaseDescription(DataOutputStream out, String database, String comment, String location,\n+        String managedLocation, String ownerName, PrincipalType ownerType, Map<String, String> params)\n+        throws HiveException {\n+      try {\n+        out.write(database.getBytes(\"UTF-8\"));\n+        out.write(Utilities.tabCode);\n+        if (comment != null) {\n+          out.write(HiveStringUtils.escapeJava(comment).getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (location != null) {\n+          out.write(location.getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (managedLocation != null) {\n+          out.write(managedLocation.getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (ownerName != null) {\n+          out.write(ownerName.getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (ownerType != null) {\n+          out.write(ownerType.name().getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (MapUtils.isNotEmpty(params)) {\n+          out.write(params.toString().getBytes(\"UTF-8\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzczOA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550923738", "createdAt": "2021-01-02T21:36:34Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/database/desc/DescDatabaseFormatter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.database.desc;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.PrincipalType;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * Formats DESC DATABASES results.\n+ */\n+abstract class DescDatabaseFormatter {\n+  static DescDatabaseFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonDescDatabaseFormatter();\n+    } else {\n+      return new TextDescDatabaseFormatter();\n+    }\n+  }\n+\n+  abstract void showDatabaseDescription(DataOutputStream out, String database, String comment, String location,\n+      String managedLocation, String ownerName, PrincipalType ownerType, Map<String, String> params)\n+      throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonDescDatabaseFormatter extends DescDatabaseFormatter {\n+    @Override\n+    void showDatabaseDescription(DataOutputStream out, String database, String comment, String location,\n+        String managedLocation, String ownerName, PrincipalType ownerType, Map<String, String> params)\n+        throws HiveException {\n+      MapBuilder builder = MapBuilder.create()\n+          .put(\"database\", database)\n+          .put(\"comment\", comment)\n+          .put(\"location\", location);\n+      if (managedLocation != null) {\n+        builder.put(\"managedLocation\", managedLocation);\n+      }\n+      if (ownerName != null) {\n+        builder.put(\"owner\", ownerName);\n+      }\n+      if (ownerType != null) {\n+        builder.put(\"ownerType\", ownerType.name());\n+      }\n+      if (MapUtils.isNotEmpty(params)) {\n+        builder.put(\"params\", params);\n+      }\n+      ShowUtils.asJson(out, builder.build());\n+    }\n+  }\n+\n+  static class TextDescDatabaseFormatter extends DescDatabaseFormatter {\n+    @Override\n+    void showDatabaseDescription(DataOutputStream out, String database, String comment, String location,\n+        String managedLocation, String ownerName, PrincipalType ownerType, Map<String, String> params)\n+        throws HiveException {\n+      try {\n+        out.write(database.getBytes(\"UTF-8\"));\n+        out.write(Utilities.tabCode);\n+        if (comment != null) {\n+          out.write(HiveStringUtils.escapeJava(comment).getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (location != null) {\n+          out.write(location.getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (managedLocation != null) {\n+          out.write(managedLocation.getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (ownerName != null) {\n+          out.write(ownerName.getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (ownerType != null) {\n+          out.write(ownerType.name().getBytes(\"UTF-8\"));\n+        }\n+        out.write(Utilities.tabCode);\n+        if (MapUtils.isNotEmpty(params)) {\n+          out.write(params.toString().getBytes(\"UTF-8\"));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mjk0Ng=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5MjEyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/database/show/ShowDatabasesFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyNTowMlrOINRvBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozNjoyM1rOINZtyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mjk2NQ==", "bodyText": "StandardCharsets.UTF_8", "url": "https://github.com/apache/hive/pull/1756#discussion_r550792965", "createdAt": "2021-01-01T18:25:02Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/database/show/ShowDatabasesFormatter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.database.show;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW DATABASES results.\n+ */\n+abstract class ShowDatabasesFormatter {\n+  static ShowDatabasesFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowDatabasesFormatter();\n+    } else {\n+      return new TextShowDatabasesFormatter();\n+    }\n+  }\n+\n+  abstract void showDatabases(DataOutputStream out, List<String> databases) throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonShowDatabasesFormatter extends ShowDatabasesFormatter {\n+    @Override\n+    void showDatabases(DataOutputStream out, List<String> databases) throws HiveException {\n+      ShowUtils.asJson(out, MapBuilder.create().put(\"databases\", databases).build());\n+    }\n+  }\n+\n+  static class TextShowDatabasesFormatter extends ShowDatabasesFormatter {\n+    @Override\n+    void showDatabases(DataOutputStream out, List<String> databases) throws HiveException {\n+      try {\n+        for (String database : databases) {\n+          out.write(database.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzcyMg==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550923722", "createdAt": "2021-01-02T21:36:23Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/database/show/ShowDatabasesFormatter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.database.show;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW DATABASES results.\n+ */\n+abstract class ShowDatabasesFormatter {\n+  static ShowDatabasesFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowDatabasesFormatter();\n+    } else {\n+      return new TextShowDatabasesFormatter();\n+    }\n+  }\n+\n+  abstract void showDatabases(DataOutputStream out, List<String> databases) throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonShowDatabasesFormatter extends ShowDatabasesFormatter {\n+    @Override\n+    void showDatabases(DataOutputStream out, List<String> databases) throws HiveException {\n+      ShowUtils.asJson(out, MapBuilder.create().put(\"databases\", databases).build());\n+    }\n+  }\n+\n+  static class TextShowDatabasesFormatter extends ShowDatabasesFormatter {\n+    @Override\n+    void showDatabases(DataOutputStream out, List<String> databases) throws HiveException {\n+      try {\n+        for (String database : databases) {\n+          out.write(database.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mjk2NQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5MzEzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/process/show/compactions/ShowCompactionsDesc.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyNjowMVrOINRvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMzowMTo0N1rOINaIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzA3Mg==", "bodyText": "Remove this formatting change.  Little value and adds to this already large review.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793072", "createdAt": "2021-01-01T18:26:01Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/process/show/compactions/ShowCompactionsDesc.java", "diffHunk": "@@ -32,7 +32,8 @@\n   private static final long serialVersionUID = 1L;\n \n   public static final String SCHEMA =\n-      \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,errormessage#\" +\n+      \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,\" +\n+      \"errormessage#\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNTU1OQ==", "bodyText": "There is a 120 limit in the Hive checkstyle, and I'm trying to make all DDL codes checkstyle violation free. This patch is about making Show kind commands cleaner, that is why it is here.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550925559", "createdAt": "2021-01-02T21:58:58Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/process/show/compactions/ShowCompactionsDesc.java", "diffHunk": "@@ -32,7 +32,8 @@\n   private static final long serialVersionUID = 1L;\n \n   public static final String SCHEMA =\n-      \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,errormessage#\" +\n+      \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,\" +\n+      \"errormessage#\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzA3Mg=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzMDYyNg==", "bodyText": "Added @Formatter:off - @Formatter:on instead", "url": "https://github.com/apache/hive/pull/1756#discussion_r550930626", "createdAt": "2021-01-02T23:01:47Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/process/show/compactions/ShowCompactionsDesc.java", "diffHunk": "@@ -32,7 +32,8 @@\n   private static final long serialVersionUID = 1L;\n \n   public static final String SCHEMA =\n-      \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,errormessage#\" +\n+      \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,\" +\n+      \"errormessage#\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzA3Mg=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5NDQ0OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/JsonDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyNzoyOVrOINRwAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0NjoyNFrOINZw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzIxNw==", "bodyText": "... =new ArrayList<>(columns.size());", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793217", "createdAt": "2021-01-01T18:27:29Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/JsonDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+\n+import java.io.DataOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats DESC TABLE results to json format.\n+ */\n+public class JsonDescTableFormatter extends DescTableFormatter {\n+  private static final String COLUMN_NAME = \"name\";\n+  private static final String COLUMN_TYPE = \"type\";\n+  private static final String COLUMN_COMMENT = \"comment\";\n+  private static final String COLUMN_MIN = \"min\";\n+  private static final String COLUMN_MAX = \"max\";\n+  private static final String COLUMN_NUM_NULLS = \"numNulls\";\n+  private static final String COLUMN_NUM_TRUES = \"numTrues\";\n+  private static final String COLUMN_NUM_FALSES = \"numFalses\";\n+  private static final String COLUMN_DISTINCT_COUNT = \"distinctCount\";\n+  private static final String COLUMN_AVG_LENGTH = \"avgColLen\";\n+  private static final String COLUMN_MAX_LENGTH = \"maxColLen\";\n+\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    MapBuilder builder = MapBuilder.create();\n+    builder.put(\"columns\", createColumnsInfo(columns, columnStats));\n+\n+    if (isExtended) {\n+      addExtendedInfo(table, partition, builder);\n+    }\n+\n+    ShowUtils.asJson(out, builder.build());\n+  }\n+\n+  public static List<Map<String, Object>> createColumnsInfo(List<FieldSchema> columns,\n+      List<ColumnStatisticsObj> columnStatisticsList) {\n+    List<Map<String, Object>> columnsInfo = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDUyMg==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924522", "createdAt": "2021-01-02T21:46:24Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/JsonDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+\n+import java.io.DataOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats DESC TABLE results to json format.\n+ */\n+public class JsonDescTableFormatter extends DescTableFormatter {\n+  private static final String COLUMN_NAME = \"name\";\n+  private static final String COLUMN_TYPE = \"type\";\n+  private static final String COLUMN_COMMENT = \"comment\";\n+  private static final String COLUMN_MIN = \"min\";\n+  private static final String COLUMN_MAX = \"max\";\n+  private static final String COLUMN_NUM_NULLS = \"numNulls\";\n+  private static final String COLUMN_NUM_TRUES = \"numTrues\";\n+  private static final String COLUMN_NUM_FALSES = \"numFalses\";\n+  private static final String COLUMN_DISTINCT_COUNT = \"distinctCount\";\n+  private static final String COLUMN_AVG_LENGTH = \"avgColLen\";\n+  private static final String COLUMN_MAX_LENGTH = \"maxColLen\";\n+\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    MapBuilder builder = MapBuilder.create();\n+    builder.put(\"columns\", createColumnsInfo(columns, columnStats));\n+\n+    if (isExtended) {\n+      addExtendedInfo(table, partition, builder);\n+    }\n+\n+    ShowUtils.asJson(out, builder.build());\n+  }\n+\n+  public static List<Map<String, Object>> createColumnsInfo(List<FieldSchema> columns,\n+      List<ColumnStatisticsObj> columnStatisticsList) {\n+    List<Map<String, Object>> columnsInfo = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzIxNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5NTkyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyOToxNFrOINRwng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozOTowOVrOINZuxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzM3NA==", "bodyText": "new String[0]", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793374", "createdAt": "2021-01-01T18:29:14Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzk3Mg==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550923972", "createdAt": "2021-01-02T21:39:09Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzM3NA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5NTk1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODoyOTozNFrOINRwog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozNTo1NFrOINZtjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzM3OA==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793378", "createdAt": "2021-01-01T18:29:34Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzY2MQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550923661", "createdAt": "2021-01-02T21:35:54Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzM3OA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5Njc1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozMDo1N1rOINRw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozNTo0MlrOINZteA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzQ2OA==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793468", "createdAt": "2021-01-01T18:30:57Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzY0MA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550923640", "createdAt": "2021-01-02T21:35:42Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzQ2OA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5NzI5OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozMTozOFrOINRxOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozNTozNVrOINZtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzUyOA==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793528", "createdAt": "2021-01-01T18:31:38Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzYyNQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550923625", "createdAt": "2021-01-02T21:35:35Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzUyOA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5ODEwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozMzoxOVrOINRxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjo0NjowOFrOINaD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzYxNw==", "bodyText": "tableInfo.append(LINE_DELIM).apppend('#').......append(LINE_DELIM);", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793617", "createdAt": "2021-01-01T18:33:19Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyOTQwNQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550929405", "createdAt": "2021-01-02T22:46:08Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzYxNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5ODk4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozMzo0NlrOINRx6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjo0NzowNFrOINaEaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzcwNw==", "bodyText": ".append().append().append()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793707", "createdAt": "2021-01-01T18:33:46Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyOTUxNQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550929515", "createdAt": "2021-01-02T22:47:04Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzcwNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5OTEyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozMzo1MlrOINRx-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjo0NzoxOFrOINaEdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzcyMQ==", "bodyText": ".append().append().append()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793721", "createdAt": "2021-01-01T18:33:52Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyOTUyNA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550929524", "createdAt": "2021-01-02T22:47:18Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzcyMQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQ5OTQwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozNDoyM1rOINRyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MDowOFrOINZu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mzc1MQ==", "bodyText": "(CollectionUtils.isNotEmpty(skewedColValues) (just like immediately below)", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793751", "createdAt": "2021-01-01T18:34:23Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDAyOQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924029", "createdAt": "2021-01-02T21:40:08Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mzc1MQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwMDQwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozNTozN1rOINRyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjo0Nzo0M1rOINaEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mzg2MQ==", "bodyText": ".append().append()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793861", "createdAt": "2021-01-01T18:35:37Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyOTU0Mw==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550929543", "createdAt": "2021-01-02T22:47:43Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5Mzg2MQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwMDk1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozNjowM1rOINRyvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjo0ODowNlrOINaEsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzkxOA==", "bodyText": ".append().append()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793918", "createdAt": "2021-01-01T18:36:03Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyOTU4NQ==", "bodyText": "Fixed..", "url": "https://github.com/apache/hive/pull/1756#discussion_r550929585", "createdAt": "2021-01-02T22:48:06Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzkxOA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwMTA5OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODozNjoxNlrOINRyzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjo0ODoxMlrOINaEzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzkzMw==", "bodyText": ".append().append()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550793933", "createdAt": "2021-01-01T18:36:16Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyOTYxMg==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550929612", "createdAt": "2021-01-02T22:48:12Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzkzMw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwNDkzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0MDowMlrOINR0cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo1NjozNFrOINZ0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDM1Mg==", "bodyText": "Should be able to replace these methods easily with Lambdas...\nlist.stream().sorted(...).collect(Collectors.toList());", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794352", "createdAt": "2021-01-01T18:40:02Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNTMzOQ==", "bodyText": "Fixed, nice catch!", "url": "https://github.com/apache/hive/pull/1756#discussion_r550925339", "createdAt": "2021-01-02T21:56:34Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDM1Mg=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwNjI4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0MTo1N1rOINR1AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo1NzoyMlrOINZ0bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDQ5Nw==", "bodyText": "intern of a constant values is probably useless.  Please remove.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794497", "createdAt": "2021-01-01T18:41:57Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 400}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNTQyMA==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550925420", "createdAt": "2021-01-02T21:57:22Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDQ5Nw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 400}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwNjcwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0MjoyNlrOINR1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMjo1MDoxN1rOINaFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDU0NQ==", "bodyText": ".append().append()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794545", "createdAt": "2021-01-01T18:42:26Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 402}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyOTcyOA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550929728", "createdAt": "2021-01-02T22:50:17Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDU0NQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 402}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwNzI3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0MzoyMVrOINR1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MDozNFrOINZvGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDYxMA==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794610", "createdAt": "2021-01-01T18:43:21Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);\n+      formatOutput(new String[] {columnName}, constraintsInfo);\n+    }\n+  }\n+\n+  private void getForeignKeysInformation(StringBuilder constraintsInfo, ForeignKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getChildDatabaseName() + \".\" + constraint.getChildTableName(), constraintsInfo);\n+    Map<String, List<ForeignKeyCol>> foreignKeys = constraint.getForeignKeys();\n+    if (MapUtils.isNotEmpty(foreignKeys)) {\n+      for (Map.Entry<String, List<ForeignKeyCol>> entry : foreignKeys.entrySet()) {\n+        getForeignKeyRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getForeignKeyRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<ForeignKeyCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (ForeignKeyCol column : columns) {\n+        String[] fields = new String[3];\n+        fields[0] = \"Parent Column Name:\" +\n+            column.parentDatabaseName + \".\"+ column.parentTableName + \".\" + column.parentColName;\n+        fields[1] = \"Column Name:\" + column.childColName;\n+        fields[2] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getUniqueConstraintsInformation(StringBuilder constraintsInfo, UniqueConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<UniqueConstraintCol>> uniqueConstraints = constraint.getUniqueConstraints();\n+    if (MapUtils.isNotEmpty(uniqueConstraints)) {\n+      for (Map.Entry<String, List<UniqueConstraintCol>> entry : uniqueConstraints.entrySet()) {\n+        getUniqueConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getUniqueConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<UniqueConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (UniqueConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getNotNullConstraintsInformation(StringBuilder constraintsInfo, NotNullConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, String> notNullConstraints = constraint.getNotNullConstraints();\n+    if (MapUtils.isNotEmpty(notNullConstraints)) {\n+      for (Map.Entry<String, String> entry : notNullConstraints.entrySet()) {\n+        formatOutput(\"Constraint Name:\", entry.getKey(), constraintsInfo);\n+        formatOutput(\"Column Name:\", entry.getValue(), constraintsInfo);\n+        constraintsInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintsInformation(StringBuilder constraintsInfo, DefaultConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<DefaultConstraintCol>> defaultConstraints = constraint.getDefaultConstraints();\n+    if (MapUtils.isNotEmpty(defaultConstraints)) {\n+      for (Map.Entry<String, List<DefaultConstraintCol>> entry : defaultConstraints.entrySet()) {\n+        getDefaultConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<DefaultConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (DefaultConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Default Value:\" + column.defaultVal;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getCheckConstraintsInformation(StringBuilder constraintsInfo, CheckConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<CheckConstraintCol>> checkConstraints = constraint.getCheckConstraints();\n+    if (MapUtils.isNotEmpty(checkConstraints)) {\n+      for (Map.Entry<String, List<CheckConstraintCol>> entry : checkConstraints.entrySet()) {\n+        getCheckConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getCheckConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<CheckConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (CheckConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Check Value:\" + column.checkExpression;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void addExtendedTableData(DataOutputStream out, Table table, Partition partition) throws IOException {\n+    if (partition != null) {\n+      out.write((\"Detailed Partition Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(partition.getTPartition().toString().getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    } else {\n+      out.write((\"Detailed Table Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      String tableDesc = HiveStringUtils.escapeJava(table.getTTable().toString());\n+      out.write(tableDesc.getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 530}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDA1Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924057", "createdAt": "2021-01-02T21:40:34Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);\n+      formatOutput(new String[] {columnName}, constraintsInfo);\n+    }\n+  }\n+\n+  private void getForeignKeysInformation(StringBuilder constraintsInfo, ForeignKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getChildDatabaseName() + \".\" + constraint.getChildTableName(), constraintsInfo);\n+    Map<String, List<ForeignKeyCol>> foreignKeys = constraint.getForeignKeys();\n+    if (MapUtils.isNotEmpty(foreignKeys)) {\n+      for (Map.Entry<String, List<ForeignKeyCol>> entry : foreignKeys.entrySet()) {\n+        getForeignKeyRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getForeignKeyRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<ForeignKeyCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (ForeignKeyCol column : columns) {\n+        String[] fields = new String[3];\n+        fields[0] = \"Parent Column Name:\" +\n+            column.parentDatabaseName + \".\"+ column.parentTableName + \".\" + column.parentColName;\n+        fields[1] = \"Column Name:\" + column.childColName;\n+        fields[2] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getUniqueConstraintsInformation(StringBuilder constraintsInfo, UniqueConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<UniqueConstraintCol>> uniqueConstraints = constraint.getUniqueConstraints();\n+    if (MapUtils.isNotEmpty(uniqueConstraints)) {\n+      for (Map.Entry<String, List<UniqueConstraintCol>> entry : uniqueConstraints.entrySet()) {\n+        getUniqueConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getUniqueConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<UniqueConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (UniqueConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getNotNullConstraintsInformation(StringBuilder constraintsInfo, NotNullConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, String> notNullConstraints = constraint.getNotNullConstraints();\n+    if (MapUtils.isNotEmpty(notNullConstraints)) {\n+      for (Map.Entry<String, String> entry : notNullConstraints.entrySet()) {\n+        formatOutput(\"Constraint Name:\", entry.getKey(), constraintsInfo);\n+        formatOutput(\"Column Name:\", entry.getValue(), constraintsInfo);\n+        constraintsInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintsInformation(StringBuilder constraintsInfo, DefaultConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<DefaultConstraintCol>> defaultConstraints = constraint.getDefaultConstraints();\n+    if (MapUtils.isNotEmpty(defaultConstraints)) {\n+      for (Map.Entry<String, List<DefaultConstraintCol>> entry : defaultConstraints.entrySet()) {\n+        getDefaultConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<DefaultConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (DefaultConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Default Value:\" + column.defaultVal;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getCheckConstraintsInformation(StringBuilder constraintsInfo, CheckConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<CheckConstraintCol>> checkConstraints = constraint.getCheckConstraints();\n+    if (MapUtils.isNotEmpty(checkConstraints)) {\n+      for (Map.Entry<String, List<CheckConstraintCol>> entry : checkConstraints.entrySet()) {\n+        getCheckConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getCheckConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<CheckConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (CheckConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Check Value:\" + column.checkExpression;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void addExtendedTableData(DataOutputStream out, Table table, Partition partition) throws IOException {\n+    if (partition != null) {\n+      out.write((\"Detailed Partition Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(partition.getTPartition().toString().getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    } else {\n+      out.write((\"Detailed Table Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      String tableDesc = HiveStringUtils.escapeJava(table.getTTable().toString());\n+      out.write(tableDesc.getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDYxMA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 530}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwNzQ3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0MzozNFrOINR1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MDo0M1rOINZvHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDYzMw==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794633", "createdAt": "2021-01-01T18:43:34Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);\n+      formatOutput(new String[] {columnName}, constraintsInfo);\n+    }\n+  }\n+\n+  private void getForeignKeysInformation(StringBuilder constraintsInfo, ForeignKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getChildDatabaseName() + \".\" + constraint.getChildTableName(), constraintsInfo);\n+    Map<String, List<ForeignKeyCol>> foreignKeys = constraint.getForeignKeys();\n+    if (MapUtils.isNotEmpty(foreignKeys)) {\n+      for (Map.Entry<String, List<ForeignKeyCol>> entry : foreignKeys.entrySet()) {\n+        getForeignKeyRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getForeignKeyRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<ForeignKeyCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (ForeignKeyCol column : columns) {\n+        String[] fields = new String[3];\n+        fields[0] = \"Parent Column Name:\" +\n+            column.parentDatabaseName + \".\"+ column.parentTableName + \".\" + column.parentColName;\n+        fields[1] = \"Column Name:\" + column.childColName;\n+        fields[2] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getUniqueConstraintsInformation(StringBuilder constraintsInfo, UniqueConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<UniqueConstraintCol>> uniqueConstraints = constraint.getUniqueConstraints();\n+    if (MapUtils.isNotEmpty(uniqueConstraints)) {\n+      for (Map.Entry<String, List<UniqueConstraintCol>> entry : uniqueConstraints.entrySet()) {\n+        getUniqueConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getUniqueConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<UniqueConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (UniqueConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getNotNullConstraintsInformation(StringBuilder constraintsInfo, NotNullConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, String> notNullConstraints = constraint.getNotNullConstraints();\n+    if (MapUtils.isNotEmpty(notNullConstraints)) {\n+      for (Map.Entry<String, String> entry : notNullConstraints.entrySet()) {\n+        formatOutput(\"Constraint Name:\", entry.getKey(), constraintsInfo);\n+        formatOutput(\"Column Name:\", entry.getValue(), constraintsInfo);\n+        constraintsInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintsInformation(StringBuilder constraintsInfo, DefaultConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<DefaultConstraintCol>> defaultConstraints = constraint.getDefaultConstraints();\n+    if (MapUtils.isNotEmpty(defaultConstraints)) {\n+      for (Map.Entry<String, List<DefaultConstraintCol>> entry : defaultConstraints.entrySet()) {\n+        getDefaultConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<DefaultConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (DefaultConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Default Value:\" + column.defaultVal;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getCheckConstraintsInformation(StringBuilder constraintsInfo, CheckConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<CheckConstraintCol>> checkConstraints = constraint.getCheckConstraints();\n+    if (MapUtils.isNotEmpty(checkConstraints)) {\n+      for (Map.Entry<String, List<CheckConstraintCol>> entry : checkConstraints.entrySet()) {\n+        getCheckConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getCheckConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<CheckConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (CheckConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Check Value:\" + column.checkExpression;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void addExtendedTableData(DataOutputStream out, Table table, Partition partition) throws IOException {\n+    if (partition != null) {\n+      out.write((\"Detailed Partition Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(partition.getTPartition().toString().getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    } else {\n+      out.write((\"Detailed Table Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      String tableDesc = HiveStringUtils.escapeJava(table.getTTable().toString());\n+      out.write(tableDesc.getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    }\n+  }\n+\n+  private void addExtendedConstraintData(DataOutputStream out, Table table)\n+      throws IOException, UnsupportedEncodingException {\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      out.write((\"Constraints\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+        out.write(table.getPrimaryKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+        out.write(table.getForeignKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+        out.write(table.getUniqueKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+        out.write(table.getNotNullConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+        out.write(table.getDefaultConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+        out.write(table.getCheckConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 563}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDA2MA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924060", "createdAt": "2021-01-02T21:40:43Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);\n+      formatOutput(new String[] {columnName}, constraintsInfo);\n+    }\n+  }\n+\n+  private void getForeignKeysInformation(StringBuilder constraintsInfo, ForeignKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getChildDatabaseName() + \".\" + constraint.getChildTableName(), constraintsInfo);\n+    Map<String, List<ForeignKeyCol>> foreignKeys = constraint.getForeignKeys();\n+    if (MapUtils.isNotEmpty(foreignKeys)) {\n+      for (Map.Entry<String, List<ForeignKeyCol>> entry : foreignKeys.entrySet()) {\n+        getForeignKeyRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getForeignKeyRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<ForeignKeyCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (ForeignKeyCol column : columns) {\n+        String[] fields = new String[3];\n+        fields[0] = \"Parent Column Name:\" +\n+            column.parentDatabaseName + \".\"+ column.parentTableName + \".\" + column.parentColName;\n+        fields[1] = \"Column Name:\" + column.childColName;\n+        fields[2] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getUniqueConstraintsInformation(StringBuilder constraintsInfo, UniqueConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<UniqueConstraintCol>> uniqueConstraints = constraint.getUniqueConstraints();\n+    if (MapUtils.isNotEmpty(uniqueConstraints)) {\n+      for (Map.Entry<String, List<UniqueConstraintCol>> entry : uniqueConstraints.entrySet()) {\n+        getUniqueConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getUniqueConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<UniqueConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (UniqueConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getNotNullConstraintsInformation(StringBuilder constraintsInfo, NotNullConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, String> notNullConstraints = constraint.getNotNullConstraints();\n+    if (MapUtils.isNotEmpty(notNullConstraints)) {\n+      for (Map.Entry<String, String> entry : notNullConstraints.entrySet()) {\n+        formatOutput(\"Constraint Name:\", entry.getKey(), constraintsInfo);\n+        formatOutput(\"Column Name:\", entry.getValue(), constraintsInfo);\n+        constraintsInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintsInformation(StringBuilder constraintsInfo, DefaultConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<DefaultConstraintCol>> defaultConstraints = constraint.getDefaultConstraints();\n+    if (MapUtils.isNotEmpty(defaultConstraints)) {\n+      for (Map.Entry<String, List<DefaultConstraintCol>> entry : defaultConstraints.entrySet()) {\n+        getDefaultConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<DefaultConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (DefaultConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Default Value:\" + column.defaultVal;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getCheckConstraintsInformation(StringBuilder constraintsInfo, CheckConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<CheckConstraintCol>> checkConstraints = constraint.getCheckConstraints();\n+    if (MapUtils.isNotEmpty(checkConstraints)) {\n+      for (Map.Entry<String, List<CheckConstraintCol>> entry : checkConstraints.entrySet()) {\n+        getCheckConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getCheckConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<CheckConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (CheckConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Check Value:\" + column.checkExpression;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void addExtendedTableData(DataOutputStream out, Table table, Partition partition) throws IOException {\n+    if (partition != null) {\n+      out.write((\"Detailed Partition Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(partition.getTPartition().toString().getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    } else {\n+      out.write((\"Detailed Table Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      String tableDesc = HiveStringUtils.escapeJava(table.getTTable().toString());\n+      out.write(tableDesc.getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    }\n+  }\n+\n+  private void addExtendedConstraintData(DataOutputStream out, Table table)\n+      throws IOException, UnsupportedEncodingException {\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      out.write((\"Constraints\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+        out.write(table.getPrimaryKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+        out.write(table.getForeignKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+        out.write(table.getUniqueKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+        out.write(table.getNotNullConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+        out.write(table.getDefaultConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+        out.write(table.getCheckConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDYzMw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 563}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwNzc1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0Mzo0OVrOINR1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MDo1M1rOINZvJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDY2MQ==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794661", "createdAt": "2021-01-01T18:43:49Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);\n+      formatOutput(new String[] {columnName}, constraintsInfo);\n+    }\n+  }\n+\n+  private void getForeignKeysInformation(StringBuilder constraintsInfo, ForeignKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getChildDatabaseName() + \".\" + constraint.getChildTableName(), constraintsInfo);\n+    Map<String, List<ForeignKeyCol>> foreignKeys = constraint.getForeignKeys();\n+    if (MapUtils.isNotEmpty(foreignKeys)) {\n+      for (Map.Entry<String, List<ForeignKeyCol>> entry : foreignKeys.entrySet()) {\n+        getForeignKeyRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getForeignKeyRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<ForeignKeyCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (ForeignKeyCol column : columns) {\n+        String[] fields = new String[3];\n+        fields[0] = \"Parent Column Name:\" +\n+            column.parentDatabaseName + \".\"+ column.parentTableName + \".\" + column.parentColName;\n+        fields[1] = \"Column Name:\" + column.childColName;\n+        fields[2] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getUniqueConstraintsInformation(StringBuilder constraintsInfo, UniqueConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<UniqueConstraintCol>> uniqueConstraints = constraint.getUniqueConstraints();\n+    if (MapUtils.isNotEmpty(uniqueConstraints)) {\n+      for (Map.Entry<String, List<UniqueConstraintCol>> entry : uniqueConstraints.entrySet()) {\n+        getUniqueConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getUniqueConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<UniqueConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (UniqueConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getNotNullConstraintsInformation(StringBuilder constraintsInfo, NotNullConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, String> notNullConstraints = constraint.getNotNullConstraints();\n+    if (MapUtils.isNotEmpty(notNullConstraints)) {\n+      for (Map.Entry<String, String> entry : notNullConstraints.entrySet()) {\n+        formatOutput(\"Constraint Name:\", entry.getKey(), constraintsInfo);\n+        formatOutput(\"Column Name:\", entry.getValue(), constraintsInfo);\n+        constraintsInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintsInformation(StringBuilder constraintsInfo, DefaultConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<DefaultConstraintCol>> defaultConstraints = constraint.getDefaultConstraints();\n+    if (MapUtils.isNotEmpty(defaultConstraints)) {\n+      for (Map.Entry<String, List<DefaultConstraintCol>> entry : defaultConstraints.entrySet()) {\n+        getDefaultConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<DefaultConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (DefaultConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Default Value:\" + column.defaultVal;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getCheckConstraintsInformation(StringBuilder constraintsInfo, CheckConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<CheckConstraintCol>> checkConstraints = constraint.getCheckConstraints();\n+    if (MapUtils.isNotEmpty(checkConstraints)) {\n+      for (Map.Entry<String, List<CheckConstraintCol>> entry : checkConstraints.entrySet()) {\n+        getCheckConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getCheckConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<CheckConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (CheckConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Check Value:\" + column.checkExpression;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void addExtendedTableData(DataOutputStream out, Table table, Partition partition) throws IOException {\n+    if (partition != null) {\n+      out.write((\"Detailed Partition Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(partition.getTPartition().toString().getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    } else {\n+      out.write((\"Detailed Table Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      String tableDesc = HiveStringUtils.escapeJava(table.getTTable().toString());\n+      out.write(tableDesc.getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    }\n+  }\n+\n+  private void addExtendedConstraintData(DataOutputStream out, Table table)\n+      throws IOException, UnsupportedEncodingException {\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      out.write((\"Constraints\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+        out.write(table.getPrimaryKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+        out.write(table.getForeignKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+        out.write(table.getUniqueKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+        out.write(table.getNotNullConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+        out.write(table.getDefaultConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+        out.write(table.getCheckConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+    }\n+  }\n+\n+  private void addExtendedStorageData(DataOutputStream out, Table table)\n+      throws IOException, UnsupportedEncodingException {\n+    if (table.getStorageHandlerInfo() != null) {\n+      out.write((\"StorageHandlerInfo\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.newLineCode);\n+      out.write(table.getStorageHandlerInfo().formatAsText().getBytes(\"UTF-8\"));\n+      out.write(Utilities.newLineCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 572}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDA2OA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924068", "createdAt": "2021-01-02T21:40:53Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java", "diffHunk": "@@ -0,0 +1,575 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.hadoop.hive.common.StatsSetupConst;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.DescTableDesc;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint;\n+import org.apache.hadoop.hive.ql.metadata.CheckConstraint.CheckConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint;\n+import org.apache.hadoop.hive.ql.metadata.DefaultConstraint.DefaultConstraintCol;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.NotNullConstraint;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.PrimaryKeyInfo;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint;\n+import org.apache.hadoop.hive.ql.metadata.ForeignKeyInfo.ForeignKeyCol;\n+import org.apache.hadoop.hive.ql.metadata.UniqueConstraint.UniqueConstraintCol;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.Map.Entry;\n+\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.ALIGNMENT;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.DEFAULT_STRINGBUILDER_SIZE;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.FIELD_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.LINE_DELIM;\n+import static org.apache.hadoop.hive.ql.ddl.ShowUtils.formatOutput;\n+\n+/**\n+ * Formats DESC TABLE results to text format.\n+ */\n+class TextDescTableFormatter extends DescTableFormatter {\n+  @Override\n+  public void describeTable(HiveConf conf, DataOutputStream out, String columnPath, String tableName, Table table,\n+      Partition partition, List<FieldSchema> columns, boolean isFormatted, boolean isExtended, boolean isOutputPadded,\n+      List<ColumnStatisticsObj> columnStats) throws HiveException {\n+    try {\n+      addStatsData(out, columnPath, columns, isFormatted, columnStats, isOutputPadded);\n+      addPartitionData(out, conf, columnPath, table, isFormatted, isOutputPadded);\n+\n+      if (columnPath == null) {\n+        if (isFormatted) {\n+          addFormattedTableData(out, table, partition, isOutputPadded);\n+        }\n+\n+        if (isExtended) {\n+          out.write(Utilities.newLineCode);\n+          addExtendedTableData(out, table, partition);\n+          addExtendedConstraintData(out, table);\n+          addExtendedStorageData(out, table);\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void addStatsData(DataOutputStream out, String columnPath, List<FieldSchema> columns, boolean isFormatted,\n+      List<ColumnStatisticsObj> columnStats, boolean isOutputPadded) throws IOException {\n+    String statsData = \"\";\n+    \n+    TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+    boolean needColStats = isFormatted && columnPath != null;\n+    if (needColStats) {\n+      metaDataTable.addRow(DescTableDesc.COLUMN_STATISTICS_HEADERS.toArray(new String[]{}));\n+    } else if (isFormatted && !SessionState.get().isHiveServerQuery()) {\n+      statsData += \"# \";\n+      metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+    }\n+    for (FieldSchema column : columns) {\n+      metaDataTable.addRow(ShowUtils.extractColumnValues(column, needColStats,\n+          getColumnStatisticsObject(column.getName(), column.getType(), columnStats)));\n+    }\n+    if (needColStats) {\n+      metaDataTable.transpose();\n+    }\n+    statsData += metaDataTable.renderTable(isOutputPadded);\n+    out.write(statsData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private ColumnStatisticsObj getColumnStatisticsObject(String columnName, String columnType,\n+      List<ColumnStatisticsObj> columnStats) {\n+    if (CollectionUtils.isNotEmpty(columnStats)) {\n+      for (ColumnStatisticsObj columnStat : columnStats) {\n+        if (columnStat.getColName().equalsIgnoreCase(columnName) &&\n+            columnStat.getColType().equalsIgnoreCase(columnType)) {\n+          return columnStat;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private void addPartitionData(DataOutputStream out, HiveConf conf, String columnPath, Table table,\n+      boolean isFormatted, boolean isOutputPadded) throws IOException {\n+    String partitionData = \"\";\n+    if (columnPath == null) {\n+      List<FieldSchema> partitionColumns = table.isPartitioned() ? table.getPartCols() : null;\n+      if (CollectionUtils.isNotEmpty(partitionColumns) &&\n+          conf.getBoolVar(ConfVars.HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY)) {\n+        TextMetaDataTable metaDataTable = new TextMetaDataTable();\n+        partitionData += LINE_DELIM + \"# Partition Information\" + LINE_DELIM + \"# \";\n+        metaDataTable.addRow(DescTableDesc.SCHEMA.split(\"#\")[0].split(\",\"));\n+        for (FieldSchema partitionColumn : partitionColumns) {\n+          metaDataTable.addRow(ShowUtils.extractColumnValues(partitionColumn, false, null));\n+        }\n+        partitionData += metaDataTable.renderTable(isOutputPadded);\n+      }\n+    } else {\n+      String statsState = table.getParameters().get(StatsSetupConst.COLUMN_STATS_ACCURATE);\n+      if (table.getParameters() != null && statsState != null) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        formatOutput(StatsSetupConst.COLUMN_STATS_ACCURATE,\n+            isFormatted ? StringEscapeUtils.escapeJava(statsState) : HiveStringUtils.escapeJava(statsState),\n+            stringBuilder, isOutputPadded);\n+        partitionData += stringBuilder.toString();\n+      }\n+    }\n+    out.write(partitionData.getBytes(\"UTF-8\"));\n+  }\n+\n+  private void addFormattedTableData(DataOutputStream out, Table table, Partition partition, boolean isOutputPadded)\n+      throws IOException, UnsupportedEncodingException {\n+    String formattedTableInfo = null;\n+    if (partition != null) {\n+      formattedTableInfo = getPartitionInformation(partition);\n+    } else {\n+      formattedTableInfo = getTableInformation(table, isOutputPadded);\n+    }\n+\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      formattedTableInfo += getConstraintsInformation(table);\n+    }\n+    out.write(formattedTableInfo.getBytes(\"UTF-8\"));\n+  }\n+\n+  private String getTableInformation(Table table, boolean isOutputPadded) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM).append(\"# Detailed Table Information\").append(LINE_DELIM);\n+    getTableMetaDataInformation(tableInfo, table, isOutputPadded);\n+\n+    tableInfo.append(LINE_DELIM).append(\"# Storage Information\").append(LINE_DELIM);\n+    getStorageDescriptorInfo(tableInfo, table.getTTable().getSd());\n+\n+    if (table.isView() || table.isMaterializedView()) {\n+      tableInfo.append(LINE_DELIM + \"# \" + (table.isView() ? \"\" : \"Materialized \") + \"View Information\" + LINE_DELIM);\n+      getViewInfo(tableInfo, table);\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private String getPartitionInformation(Partition partition) {\n+    StringBuilder tableInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+    tableInfo.append(LINE_DELIM + \"# Detailed Partition Information\" + LINE_DELIM);\n+    getPartitionMetaDataInformation(tableInfo, partition);\n+\n+    if (partition.getTable().getTableType() != TableType.VIRTUAL_VIEW) {\n+      tableInfo.append(LINE_DELIM + \"# Storage Information\" + LINE_DELIM);\n+      getStorageDescriptorInfo(tableInfo, partition.getTPartition().getSd());\n+    }\n+\n+    return tableInfo.toString();\n+  }\n+\n+  private void getViewInfo(StringBuilder tableInfo, Table table) {\n+    formatOutput(\"Original Query:\", table.getViewOriginalText(), tableInfo);\n+    formatOutput(\"Expanded Query:\", table.getViewExpandedText(), tableInfo);\n+    if (table.isMaterializedView()) {\n+      formatOutput(\"Rewrite Enabled:\", table.isRewriteEnabled() ? \"Yes\" : \"No\", tableInfo);\n+      formatOutput(\"Outdated for Rewriting:\", table.isOutdatedForRewriting() == null ? \"Unknown\"\n+          : table.isOutdatedForRewriting() ? \"Yes\" : \"No\", tableInfo);\n+    }\n+  }\n+\n+  private void getStorageDescriptorInfo(StringBuilder tableInfo, StorageDescriptor storageDesc) {\n+    formatOutput(\"SerDe Library:\", storageDesc.getSerdeInfo().getSerializationLib(), tableInfo);\n+    formatOutput(\"InputFormat:\", storageDesc.getInputFormat(), tableInfo);\n+    formatOutput(\"OutputFormat:\", storageDesc.getOutputFormat(), tableInfo);\n+    formatOutput(\"Compressed:\", storageDesc.isCompressed() ? \"Yes\" : \"No\", tableInfo);\n+    formatOutput(\"Num Buckets:\", String.valueOf(storageDesc.getNumBuckets()), tableInfo);\n+    formatOutput(\"Bucket Columns:\", storageDesc.getBucketCols().toString(), tableInfo);\n+    formatOutput(\"Sort Columns:\", storageDesc.getSortCols().toString(), tableInfo);\n+\n+    if (storageDesc.isStoredAsSubDirectories()) {\n+      formatOutput(\"Stored As SubDirectories:\", \"Yes\", tableInfo);\n+    }\n+\n+    if (storageDesc.getSkewedInfo() != null) {\n+      List<String> skewedColNames = sortList(storageDesc.getSkewedInfo().getSkewedColNames());\n+      if ((skewedColNames != null) && (skewedColNames.size() > 0)) {\n+        formatOutput(\"Skewed Columns:\", skewedColNames.toString(), tableInfo);\n+      }\n+\n+      List<List<String>> skewedColValues = sortList(\n+          storageDesc.getSkewedInfo().getSkewedColValues(), new VectorComparator<String>());\n+      if (CollectionUtils.isNotEmpty(skewedColValues)) {\n+        formatOutput(\"Skewed Values:\", skewedColValues.toString(), tableInfo);\n+      }\n+\n+      Map<List<String>, String> skewedColMap = new TreeMap<>(new VectorComparator<String>());\n+      skewedColMap.putAll(storageDesc.getSkewedInfo().getSkewedColValueLocationMaps());\n+      if (MapUtils.isNotEmpty(skewedColMap)) {\n+        formatOutput(\"Skewed Value to Path:\", skewedColMap.toString(), tableInfo);\n+        Map<List<String>, String> truncatedSkewedColMap =\n+            new TreeMap<List<String>, String>(new VectorComparator<String>());\n+        // walk through existing map to truncate path so that test won't mask it then we can verify location is right\n+        Set<Entry<List<String>, String>> entries = skewedColMap.entrySet();\n+        for (Entry<List<String>, String> entry : entries) {\n+          truncatedSkewedColMap.put(entry.getKey(), PlanUtils.removePrefixFromWarehouseConfig(entry.getValue()));\n+        }\n+        formatOutput(\"Skewed Value to Truncated Path:\", truncatedSkewedColMap.toString(), tableInfo);\n+      }\n+    }\n+\n+    if (storageDesc.getSerdeInfo().getParametersSize() > 0) {\n+      tableInfo.append(\"Storage Desc Params:\" + LINE_DELIM);\n+      displayAllParameters(storageDesc.getSerdeInfo().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private void getTableMetaDataInformation(StringBuilder tableInfo, Table table, boolean isOutputPadded) {\n+    formatOutput(\"Database:\", table.getDbName(), tableInfo);\n+    formatOutput(\"OwnerType:\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\", tableInfo);\n+    formatOutput(\"Owner:\", table.getOwner(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(table.getTTable().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(table.getTTable().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Retention:\", Integer.toString(table.getRetention()), tableInfo);\n+    \n+    if (!table.isView()) {\n+      formatOutput(\"Location:\", table.getDataLocation().toString(), tableInfo);\n+    }\n+    formatOutput(\"Table Type:\", table.getTableType().name(), tableInfo);\n+\n+    if (table.getParameters().size() > 0) {\n+      tableInfo.append(\"Table Parameters:\" + LINE_DELIM);\n+      displayAllParameters(table.getParameters(), tableInfo, false, isOutputPadded);\n+    }\n+  }\n+\n+  private void getPartitionMetaDataInformation(StringBuilder tableInfo, Partition partition) {\n+    formatOutput(\"Partition Value:\", partition.getValues().toString(), tableInfo);\n+    formatOutput(\"Database:\", partition.getTPartition().getDbName(), tableInfo);\n+    formatOutput(\"Table:\", partition.getTable().getTableName(), tableInfo);\n+    formatOutput(\"CreateTime:\", formatDate(partition.getTPartition().getCreateTime()), tableInfo);\n+    formatOutput(\"LastAccessTime:\", formatDate(partition.getTPartition().getLastAccessTime()), tableInfo);\n+    formatOutput(\"Location:\", partition.getLocation(), tableInfo);\n+\n+    if (partition.getTPartition().getParameters().size() > 0) {\n+      tableInfo.append(\"Partition Parameters:\" + LINE_DELIM);\n+      displayAllParameters(partition.getTPartition().getParameters(), tableInfo);\n+    }\n+  }\n+\n+  private class VectorComparator<T extends Comparable<T>>  implements Comparator<List<T>>{\n+    @Override\n+    public int compare(List<T> listA, List<T> listB) {\n+      for (int i = 0; i < listA.size() && i < listB.size(); i++) {\n+        T valA = listA.get(i);\n+        T valB = listB.get(i);\n+        if (valA != null) {\n+          int ret = valA.compareTo(valB);\n+          if (ret != 0) {\n+            return ret;\n+          }\n+        } else {\n+          if (valB != null) {\n+            return -1;\n+          }\n+        }\n+      }\n+      return Integer.compare(listA.size(), listB.size());\n+    }\n+  }\n+\n+  private <T extends Comparable<T>> List<T> sortList(List<T> list){\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret);\n+    return ret;\n+  }\n+\n+  private <T> List<T> sortList(List<T> list, Comparator<T> comparator) {\n+    if (list == null || list.size() <= 1) {\n+      return list;\n+    }\n+    List<T> ret = new ArrayList<>(list);\n+    Collections.sort(ret, comparator);\n+    return ret;\n+  }\n+\n+  private String formatDate(long timeInSeconds) {\n+    if (timeInSeconds != 0) {\n+      Date date = new Date(timeInSeconds * 1000);\n+      return date.toString();\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo) {\n+    displayAllParameters(params, tableInfo, true, false);\n+  }\n+\n+  private void displayAllParameters(Map<String, String> params, StringBuilder tableInfo, boolean escapeUnicode,\n+      boolean isOutputPadded) {\n+    List<String> keys = new ArrayList<String>(params.keySet());\n+    Collections.sort(keys);\n+    for (String key : keys) {\n+      String value = params.get(key);\n+      if (key.equals(StatsSetupConst.NUM_ERASURE_CODED_FILES)) {\n+        if (\"0\".equals(value)) {\n+          continue;\n+        }\n+      }\n+      tableInfo.append(FIELD_DELIM); // Ensures all params are indented.\n+      formatOutput(key, escapeUnicode ? StringEscapeUtils.escapeJava(value) : HiveStringUtils.escapeJava(value),\n+          tableInfo, isOutputPadded);\n+    }\n+  }\n+\n+  private String getConstraintsInformation(Table table) {\n+    StringBuilder constraintsInfo = new StringBuilder(DEFAULT_STRINGBUILDER_SIZE);\n+\n+    constraintsInfo.append(LINE_DELIM + \"# Constraints\" + LINE_DELIM);\n+    if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Primary Key\" + LINE_DELIM);\n+      getPrimaryKeyInformation(constraintsInfo, table.getPrimaryKeyInfo());\n+    }\n+    if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Foreign Keys\" + LINE_DELIM);\n+      getForeignKeysInformation(constraintsInfo, table.getForeignKeyInfo());\n+    }\n+    if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Unique Constraints\" + LINE_DELIM);\n+      getUniqueConstraintsInformation(constraintsInfo, table.getUniqueKeyInfo());\n+    }\n+    if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Not Null Constraints\" + LINE_DELIM);\n+      getNotNullConstraintsInformation(constraintsInfo, table.getNotNullConstraint());\n+    }\n+    if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Default Constraints\" + LINE_DELIM);\n+      getDefaultConstraintsInformation(constraintsInfo, table.getDefaultConstraint());\n+    }\n+    if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+      constraintsInfo.append(LINE_DELIM + \"# Check Constraints\" + LINE_DELIM);\n+      getCheckConstraintsInformation(constraintsInfo, table.getCheckConstraint());\n+    }\n+    return constraintsInfo.toString();\n+  }\n+\n+  private void getPrimaryKeyInformation(StringBuilder constraintsInfo, PrimaryKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    formatOutput(\"Constraint Name:\", constraint.getConstraintName(), constraintsInfo);\n+    Map<Integer, String> columnNames = constraint.getColNames();\n+    String title = \"Column Name:\".intern();\n+    for (String columnName : columnNames.values()) {\n+      constraintsInfo.append(String.format(\"%-\" + ALIGNMENT + \"s\", title) + FIELD_DELIM);\n+      formatOutput(new String[] {columnName}, constraintsInfo);\n+    }\n+  }\n+\n+  private void getForeignKeysInformation(StringBuilder constraintsInfo, ForeignKeyInfo constraint) {\n+    formatOutput(\"Table:\", constraint.getChildDatabaseName() + \".\" + constraint.getChildTableName(), constraintsInfo);\n+    Map<String, List<ForeignKeyCol>> foreignKeys = constraint.getForeignKeys();\n+    if (MapUtils.isNotEmpty(foreignKeys)) {\n+      for (Map.Entry<String, List<ForeignKeyCol>> entry : foreignKeys.entrySet()) {\n+        getForeignKeyRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getForeignKeyRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<ForeignKeyCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (ForeignKeyCol column : columns) {\n+        String[] fields = new String[3];\n+        fields[0] = \"Parent Column Name:\" +\n+            column.parentDatabaseName + \".\"+ column.parentTableName + \".\" + column.parentColName;\n+        fields[1] = \"Column Name:\" + column.childColName;\n+        fields[2] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getUniqueConstraintsInformation(StringBuilder constraintsInfo, UniqueConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<UniqueConstraintCol>> uniqueConstraints = constraint.getUniqueConstraints();\n+    if (MapUtils.isNotEmpty(uniqueConstraints)) {\n+      for (Map.Entry<String, List<UniqueConstraintCol>> entry : uniqueConstraints.entrySet()) {\n+        getUniqueConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getUniqueConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<UniqueConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (UniqueConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Key Sequence:\" + column.position;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getNotNullConstraintsInformation(StringBuilder constraintsInfo, NotNullConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, String> notNullConstraints = constraint.getNotNullConstraints();\n+    if (MapUtils.isNotEmpty(notNullConstraints)) {\n+      for (Map.Entry<String, String> entry : notNullConstraints.entrySet()) {\n+        formatOutput(\"Constraint Name:\", entry.getKey(), constraintsInfo);\n+        formatOutput(\"Column Name:\", entry.getValue(), constraintsInfo);\n+        constraintsInfo.append(LINE_DELIM);\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintsInformation(StringBuilder constraintsInfo, DefaultConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<DefaultConstraintCol>> defaultConstraints = constraint.getDefaultConstraints();\n+    if (MapUtils.isNotEmpty(defaultConstraints)) {\n+      for (Map.Entry<String, List<DefaultConstraintCol>> entry : defaultConstraints.entrySet()) {\n+        getDefaultConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getDefaultConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<DefaultConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (DefaultConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Default Value:\" + column.defaultVal;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void getCheckConstraintsInformation(StringBuilder constraintsInfo, CheckConstraint constraint) {\n+    formatOutput(\"Table:\", constraint.getDatabaseName() + \".\" + constraint.getTableName(), constraintsInfo);\n+    Map<String, List<CheckConstraintCol>> checkConstraints = constraint.getCheckConstraints();\n+    if (MapUtils.isNotEmpty(checkConstraints)) {\n+      for (Map.Entry<String, List<CheckConstraintCol>> entry : checkConstraints.entrySet()) {\n+        getCheckConstraintRelInformation(constraintsInfo, entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  private void getCheckConstraintRelInformation(StringBuilder constraintsInfo, String constraintName,\n+      List<CheckConstraintCol> columns) {\n+    formatOutput(\"Constraint Name:\", constraintName, constraintsInfo);\n+    if (CollectionUtils.isNotEmpty(columns)) {\n+      for (CheckConstraintCol column : columns) {\n+        String[] fields = new String[2];\n+        fields[0] = \"Column Name:\" + column.colName;\n+        fields[1] = \"Check Value:\" + column.checkExpression;\n+        formatOutput(fields, constraintsInfo);\n+      }\n+    }\n+    constraintsInfo.append(LINE_DELIM);\n+  }\n+\n+  private void addExtendedTableData(DataOutputStream out, Table table, Partition partition) throws IOException {\n+    if (partition != null) {\n+      out.write((\"Detailed Partition Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(partition.getTPartition().toString().getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    } else {\n+      out.write((\"Detailed Table Information\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      String tableDesc = HiveStringUtils.escapeJava(table.getTTable().toString());\n+      out.write(tableDesc.getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      out.write(Utilities.newLineCode); // comment column is empty\n+    }\n+  }\n+\n+  private void addExtendedConstraintData(DataOutputStream out, Table table)\n+      throws IOException, UnsupportedEncodingException {\n+    if (table.getTableConstraintsInfo().isTableConstraintsInfoNotEmpty()) {\n+      out.write((\"Constraints\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.tabCode);\n+      if (PrimaryKeyInfo.isPrimaryKeyInfoNotEmpty(table.getPrimaryKeyInfo())) {\n+        out.write(table.getPrimaryKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (ForeignKeyInfo.isForeignKeyInfoNotEmpty(table.getForeignKeyInfo())) {\n+        out.write(table.getForeignKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (UniqueConstraint.isUniqueConstraintNotEmpty(table.getUniqueKeyInfo())) {\n+        out.write(table.getUniqueKeyInfo().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (NotNullConstraint.isNotNullConstraintNotEmpty(table.getNotNullConstraint())) {\n+        out.write(table.getNotNullConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (DefaultConstraint.isCheckConstraintNotEmpty(table.getDefaultConstraint())) {\n+        out.write(table.getDefaultConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+      if (CheckConstraint.isCheckConstraintNotEmpty(table.getCheckConstraint())) {\n+        out.write(table.getCheckConstraint().toString().getBytes(\"UTF-8\"));\n+        out.write(Utilities.newLineCode);\n+      }\n+    }\n+  }\n+\n+  private void addExtendedStorageData(DataOutputStream out, Table table)\n+      throws IOException, UnsupportedEncodingException {\n+    if (table.getStorageHandlerInfo() != null) {\n+      out.write((\"StorageHandlerInfo\").getBytes(\"UTF-8\"));\n+      out.write(Utilities.newLineCode);\n+      out.write(table.getStorageHandlerInfo().formatAsText().getBytes(\"UTF-8\"));\n+      out.write(Utilities.newLineCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDY2MQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 572}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwODM5OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/JsonShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0NDo1NlrOINR18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0NToyNVrOINZwlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDczOQ==", "bodyText": "Collections.emptyList()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794739", "createdAt": "2021-01-01T18:44:56Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/JsonShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter.JsonDescTableFormatter;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW TABLE STATUS commands to json format.\n+ */\n+public class JsonShowTableStatusFormatter extends ShowTableStatusFormatter {\n+  @Override\n+  public void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition partition)\n+      throws HiveException {\n+    List<Map<String, Object>> tableData = new ArrayList<>();\n+    try {\n+      for (Table table : tables) {\n+        tableData.add(makeOneTableStatus(table, db, conf, partition));\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+    ShowUtils.asJson(out, MapBuilder.create().put(\"tables\", tableData).build());\n+  }\n+\n+  private Map<String, Object> makeOneTableStatus(Table table, Hive db, HiveConf conf, Partition partition)\n+      throws HiveException, IOException {\n+    StorageInfo storageInfo = getStorageInfo(table, partition);\n+\n+    MapBuilder builder = MapBuilder.create();\n+    builder.put(\"tableName\", table.getTableName());\n+    builder.put(\"ownerType\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\");\n+    builder.put(\"owner\", table.getOwner());\n+    builder.put(\"location\", storageInfo.location);\n+    builder.put(\"inputFormat\", storageInfo.inputFormatClass);\n+    builder.put(\"outputFormat\", storageInfo.outputFormatClass);\n+    builder.put(\"columns\", JsonDescTableFormatter.createColumnsInfo(table.getCols(), new ArrayList<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDQzNg==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924436", "createdAt": "2021-01-02T21:45:25Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/JsonShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter.JsonDescTableFormatter;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW TABLE STATUS commands to json format.\n+ */\n+public class JsonShowTableStatusFormatter extends ShowTableStatusFormatter {\n+  @Override\n+  public void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition partition)\n+      throws HiveException {\n+    List<Map<String, Object>> tableData = new ArrayList<>();\n+    try {\n+      for (Table table : tables) {\n+        tableData.add(makeOneTableStatus(table, db, conf, partition));\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+    ShowUtils.asJson(out, MapBuilder.create().put(\"tables\", tableData).build());\n+  }\n+\n+  private Map<String, Object> makeOneTableStatus(Table table, Hive db, HiveConf conf, Partition partition)\n+      throws HiveException, IOException {\n+    StorageInfo storageInfo = getStorageInfo(table, partition);\n+\n+    MapBuilder builder = MapBuilder.create();\n+    builder.put(\"tableName\", table.getTableName());\n+    builder.put(\"ownerType\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\");\n+    builder.put(\"owner\", table.getOwner());\n+    builder.put(\"location\", storageInfo.location);\n+    builder.put(\"inputFormat\", storageInfo.inputFormatClass);\n+    builder.put(\"outputFormat\", storageInfo.outputFormatClass);\n+    builder.put(\"columns\", JsonDescTableFormatter.createColumnsInfo(table.getCols(), new ArrayList<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDczOQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwODQzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/JsonShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0NTowMVrOINR1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0NDoyN1rOINZwKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDc0NQ==", "bodyText": "Collections.emptyList()", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794745", "createdAt": "2021-01-01T18:45:01Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/JsonShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter.JsonDescTableFormatter;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW TABLE STATUS commands to json format.\n+ */\n+public class JsonShowTableStatusFormatter extends ShowTableStatusFormatter {\n+  @Override\n+  public void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition partition)\n+      throws HiveException {\n+    List<Map<String, Object>> tableData = new ArrayList<>();\n+    try {\n+      for (Table table : tables) {\n+        tableData.add(makeOneTableStatus(table, db, conf, partition));\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+    ShowUtils.asJson(out, MapBuilder.create().put(\"tables\", tableData).build());\n+  }\n+\n+  private Map<String, Object> makeOneTableStatus(Table table, Hive db, HiveConf conf, Partition partition)\n+      throws HiveException, IOException {\n+    StorageInfo storageInfo = getStorageInfo(table, partition);\n+\n+    MapBuilder builder = MapBuilder.create();\n+    builder.put(\"tableName\", table.getTableName());\n+    builder.put(\"ownerType\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\");\n+    builder.put(\"owner\", table.getOwner());\n+    builder.put(\"location\", storageInfo.location);\n+    builder.put(\"inputFormat\", storageInfo.inputFormatClass);\n+    builder.put(\"outputFormat\", storageInfo.outputFormatClass);\n+    builder.put(\"columns\", JsonDescTableFormatter.createColumnsInfo(table.getCols(), new ArrayList<>()));\n+\n+    builder.put(\"partitioned\", table.isPartitioned());\n+    if (table.isPartitioned()) {\n+      builder.put(\"partitionColumns\", JsonDescTableFormatter.createColumnsInfo(table.getPartCols(), new ArrayList<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDMzMA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924330", "createdAt": "2021-01-02T21:44:27Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/JsonShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.table.info.desc.formatter.JsonDescTableFormatter;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW TABLE STATUS commands to json format.\n+ */\n+public class JsonShowTableStatusFormatter extends ShowTableStatusFormatter {\n+  @Override\n+  public void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition partition)\n+      throws HiveException {\n+    List<Map<String, Object>> tableData = new ArrayList<>();\n+    try {\n+      for (Table table : tables) {\n+        tableData.add(makeOneTableStatus(table, db, conf, partition));\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+    ShowUtils.asJson(out, MapBuilder.create().put(\"tables\", tableData).build());\n+  }\n+\n+  private Map<String, Object> makeOneTableStatus(Table table, Hive db, HiveConf conf, Partition partition)\n+      throws HiveException, IOException {\n+    StorageInfo storageInfo = getStorageInfo(table, partition);\n+\n+    MapBuilder builder = MapBuilder.create();\n+    builder.put(\"tableName\", table.getTableName());\n+    builder.put(\"ownerType\", (table.getOwnerType() != null) ? table.getOwnerType().name() : \"null\");\n+    builder.put(\"owner\", table.getOwner());\n+    builder.put(\"location\", storageInfo.location);\n+    builder.put(\"inputFormat\", storageInfo.inputFormatClass);\n+    builder.put(\"outputFormat\", storageInfo.outputFormatClass);\n+    builder.put(\"columns\", JsonDescTableFormatter.createColumnsInfo(table.getCols(), new ArrayList<>()));\n+\n+    builder.put(\"partitioned\", table.isPartitioned());\n+    if (table.isPartitioned()) {\n+      builder.put(\"partitionColumns\", JsonDescTableFormatter.createColumnsInfo(table.getPartCols(), new ArrayList<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDc0NQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUwOTQ3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0NjowMFrOINR2ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0NTowMlrOINZwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDg1OA==", "bodyText": "\"Cannot access File System. File System status will be unknown.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794858", "createdAt": "2021-01-01T18:46:00Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDM3OQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924379", "createdAt": "2021-01-02T21:45:02Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDg1OA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMDE1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0Njo0M1rOINR2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MzowM1rOINZvsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDkzNw==", "bodyText": "Math.max", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794937", "createdAt": "2021-01-01T18:46:43Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDIwOQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924209", "createdAt": "2021-01-02T21:43:03Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDkzNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMDI4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0Njo0OFrOINR2xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MTozMFrOINZvTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDk1MQ==", "bodyText": "Math.max", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794951", "createdAt": "2021-01-01T18:46:48Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDEwOQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924109", "createdAt": "2021-01-02T21:41:30Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDk1MQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMDcwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0NzoxMVrOINR29g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MTozOFrOINZvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDk5OA==", "bodyText": "Math.max", "url": "https://github.com/apache/hive/pull/1756#discussion_r550794998", "createdAt": "2021-01-01T18:47:11Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDEyMw==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924123", "createdAt": "2021-01-02T21:41:38Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NDk5OA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMDgwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0NzoxNlrOINR3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MTo0NFrOINZvag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTAwOQ==", "bodyText": "Math.max", "url": "https://github.com/apache/hive/pull/1756#discussion_r550795009", "createdAt": "2021-01-01T18:47:16Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {\n+        fileData.maxFileSize = fileLength;\n+      }\n+      if (fileLength < fileData.minFileSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDEzOA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924138", "createdAt": "2021-01-02T21:41:44Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {\n+        fileData.maxFileSize = fileLength;\n+      }\n+      if (fileLength < fileData.minFileSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTAwOQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMDk3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0NzoyMlrOINR3Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTo0MTo1MVrOINZvbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTAyNw==", "bodyText": "Math.max", "url": "https://github.com/apache/hive/pull/1756#discussion_r550795027", "createdAt": "2021-01-01T18:47:22Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {\n+        fileData.maxFileSize = fileLength;\n+      }\n+      if (fileLength < fileData.minFileSize) {\n+        fileData.minFileSize = fileLength;\n+      }\n+\n+      if (entryStatus.getAccessTime() > fileData.lastAccessTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyNDE0Mg==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550924142", "createdAt": "2021-01-02T21:41:51Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {\n+        fileData.maxFileSize = fileLength;\n+      }\n+      if (fileLength < fileData.minFileSize) {\n+        fileData.minFileSize = fileLength;\n+      }\n+\n+      if (entryStatus.getAccessTime() > fileData.lastAccessTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTAyNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMTAxOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0NzoyN1rOINR3Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDo1NDoxOFrOINSgvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTAzNQ==", "bodyText": "Math.max", "url": "https://github.com/apache/hive/pull/1756#discussion_r550795035", "createdAt": "2021-01-01T18:47:27Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {\n+        fileData.maxFileSize = fileLength;\n+      }\n+      if (fileLength < fileData.minFileSize) {\n+        fileData.minFileSize = fileLength;\n+      }\n+\n+      if (entryStatus.getAccessTime() > fileData.lastAccessTime) {\n+        fileData.lastAccessTime = entryStatus.getAccessTime();\n+      }\n+      if (entryStatus.getModificationTime() > fileData.lastUpdateTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNTY5NA==", "bodyText": "Nice catch, fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550805694", "createdAt": "2021-01-01T20:54:18Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/ShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS results.\n+ */\n+public abstract class ShowTableStatusFormatter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ShowTableStatusFormatter.class);\n+\n+  public static ShowTableStatusFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTableStatusFormatter();\n+    } else {\n+      return new TextShowTableStatusFormatter();\n+    }\n+  }\n+\n+  public abstract void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition par)\n+      throws HiveException;\n+\n+  StorageInfo getStorageInfo(Table table, Partition partition) throws HiveException {\n+    String location = null;\n+    String inputFormatClass = null;\n+    String outputFormatClass = null;\n+    if (partition != null) {\n+      if (partition.getLocation() != null) {\n+        location = partition.getDataLocation().toString();\n+      }\n+      inputFormatClass = partition.getInputFormatClass() == null ? null : partition.getInputFormatClass().getName();\n+      outputFormatClass = partition.getOutputFormatClass() == null ? null : partition.getOutputFormatClass().getName();\n+    } else {\n+      if (table.getPath() != null) {\n+        location = table.getDataLocation().toString();\n+      }\n+      inputFormatClass = table.getInputFormatClass() == null ? null : table.getInputFormatClass().getName();\n+      outputFormatClass = table.getOutputFormatClass() == null ? null : table.getOutputFormatClass().getName();\n+    }\n+\n+    return new StorageInfo(location, inputFormatClass, outputFormatClass);\n+  }\n+\n+  final static class StorageInfo {\n+    final String location;\n+    final String inputFormatClass;\n+    final String outputFormatClass;\n+\n+    private StorageInfo(String location, String inputFormatClass, String outputFormatClass) {\n+      this.location = location;\n+      this.inputFormatClass = inputFormatClass;\n+      this.outputFormatClass = outputFormatClass;\n+    }\n+  }\n+\n+  List<Path> getLocations(Hive db, Partition partition, Table table) throws HiveException {\n+    List<Path> locations = new ArrayList<Path>();\n+    if (table.isPartitioned()) {\n+      if (partition == null) {\n+        for (Partition currPartition : db.getPartitions(table)) {\n+          if (currPartition.getLocation() != null) {\n+            locations.add(new Path(currPartition.getLocation()));\n+          }\n+        }\n+      } else {\n+        if (partition.getLocation() != null) {\n+          locations.add(new Path(partition.getLocation()));\n+        }\n+      }\n+    } else {\n+      if (table.getPath() != null) {\n+        locations.add(table.getPath());\n+      }\n+    }\n+    return locations;\n+  }\n+\n+  FileData getFileData(HiveConf conf, List<Path> locations, Path tablePath) throws IOException {\n+    FileData fileData = new FileData();\n+    FileSystem fileSystem = tablePath.getFileSystem(conf);\n+    // in case all files in locations do not exist\n+    try {\n+      FileStatus tmpStatus = fileSystem.getFileStatus(tablePath);\n+      fileData.lastAccessTime = tmpStatus.getAccessTime();\n+      fileData.lastUpdateTime = tmpStatus.getModificationTime();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot access File System. File System status will be unknown: \", e);\n+      fileData.unknown = true;\n+    }\n+\n+    if (!fileData.unknown) {\n+      for (Path location : locations) {\n+        try {\n+          FileStatus status = fileSystem.getFileStatus(location);\n+          // no matter loc is the table location or part location, it must be a\n+          // directory.\n+          if (!status.isDirectory()) {\n+            continue;\n+          }\n+          processDir(status, fileSystem, fileData);\n+        } catch (IOException e) {\n+          // ignore\n+        }\n+      }\n+    }\n+    return fileData;\n+  }\n+\n+  private void processDir(FileStatus status, FileSystem fileSystem, FileData fileData) throws IOException {\n+    if (status.getAccessTime() > fileData.lastAccessTime) {\n+      fileData.lastAccessTime = status.getAccessTime();\n+    }\n+    if (status.getModificationTime() > fileData.lastUpdateTime) {\n+      fileData.lastUpdateTime = status.getModificationTime();\n+    }\n+\n+    FileStatus[] entryStatuses = fileSystem.listStatus(status.getPath());\n+    for (FileStatus entryStatus : entryStatuses) {\n+      if (entryStatus.isDirectory()) {\n+        processDir(entryStatus, fileSystem, fileData);\n+        continue;\n+      }\n+\n+      fileData.numOfFiles++;\n+      if (entryStatus.isErasureCoded()) {\n+        fileData.numOfErasureCodedFiles++;\n+      }\n+\n+      long fileLength = entryStatus.getLen();\n+      fileData.totalFileSize += fileLength;\n+      if (fileLength > fileData.maxFileSize) {\n+        fileData.maxFileSize = fileLength;\n+      }\n+      if (fileLength < fileData.minFileSize) {\n+        fileData.minFileSize = fileLength;\n+      }\n+\n+      if (entryStatus.getAccessTime() > fileData.lastAccessTime) {\n+        fileData.lastAccessTime = entryStatus.getAccessTime();\n+      }\n+      if (entryStatus.getModificationTime() > fileData.lastUpdateTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTAzNQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMTM4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/TextShowTableStatusFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0ODoxMlrOINR3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDozNDo0N1rOINSbFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTA3OA==", "bodyText": "StandardCharsets\nAlso,...\nout.write(\"owner:\");\nout.write(tabler.getOwner());\n```\n\nNo need to concat strings here.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550795078", "createdAt": "2021-01-01T18:48:12Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/TextShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.utils.MetaStoreUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS commands to text format.\n+ */\n+public class TextShowTableStatusFormatter extends ShowTableStatusFormatter {\n+  @Override\n+  public void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition partition)\n+      throws HiveException {\n+    try {\n+      for (Table table : tables) {\n+        writeBasicInfo(out, table);\n+        writeStorageInfo(out, partition, table);\n+        writeColumnsInfo(out, table);\n+        writeFileSystemInfo(out, db, conf, partition, table);\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void writeBasicInfo(DataOutputStream out, Table table) throws IOException, UnsupportedEncodingException {\n+    out.write((\"tableName:\" + table.getTableName()).getBytes(\"UTF-8\"));\n+    out.write(Utilities.newLineCode);\n+    out.write((\"owner:\" + table.getOwner()).getBytes(\"UTF-8\"));\n+    out.write(Utilities.newLineCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNDI0Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r550804246", "createdAt": "2021-01-01T20:34:47Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/status/formatter/TextShowTableStatusFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.status.formatter;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.utils.MetaStoreUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW TABLE STATUS commands to text format.\n+ */\n+public class TextShowTableStatusFormatter extends ShowTableStatusFormatter {\n+  @Override\n+  public void showTableStatus(DataOutputStream out, Hive db, HiveConf conf, List<Table> tables, Partition partition)\n+      throws HiveException {\n+    try {\n+      for (Table table : tables) {\n+        writeBasicInfo(out, table);\n+        writeStorageInfo(out, partition, table);\n+        writeColumnsInfo(out, table);\n+        writeFileSystemInfo(out, db, conf, partition, table);\n+      }\n+    } catch (IOException e) {\n+      throw new HiveException(e);\n+    }\n+  }\n+\n+  private void writeBasicInfo(DataOutputStream out, Table table) throws IOException, UnsupportedEncodingException {\n+    out.write((\"tableName:\" + table.getTableName()).getBytes(\"UTF-8\"));\n+    out.write(Utilities.newLineCode);\n+    out.write((\"owner:\" + table.getOwner()).getBytes(\"UTF-8\"));\n+    out.write(Utilities.newLineCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTA3OA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMjUyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/tables/ShowTablesFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo0OToyOVrOINR3xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDozNjozNlrOINSb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTIwNw==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550795207", "createdAt": "2021-01-01T18:49:29Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/tables/ShowTablesFormatter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.tables;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW TABLES results.\n+ */\n+public abstract class ShowTablesFormatter {\n+  public static ShowTablesFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTablesFormatter();\n+    } else {\n+      return new TextShowTablesFormatter();\n+    }\n+  }\n+\n+  public abstract void showTables(DataOutputStream out, List<String> tables) throws HiveException;\n+\n+  abstract void showTablesExtended(DataOutputStream out, List<Table> tables) throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonShowTablesFormatter extends ShowTablesFormatter {\n+    @Override\n+    public void showTables(DataOutputStream out, List<String> tables) throws HiveException {\n+      ShowUtils.asJson(out, MapBuilder.create().put(\"tables\", tables).build());\n+    }\n+\n+    @Override\n+    void showTablesExtended(DataOutputStream out, List<Table> tables) throws HiveException {\n+      if (tables.isEmpty()) {\n+        return;\n+      }\n+\n+      List<Map<String, Object>> tableDataList = new ArrayList<>();\n+      for (Table table : tables) {\n+        Map<String, Object> tableData = ImmutableMap.of(\n+            \"Table Name\", table.getTableName(),\n+            \"Table Type\", table.getTableType().toString());\n+        tableDataList.add(tableData);\n+      }\n+\n+      ShowUtils.asJson(out, ImmutableMap.of(\"tables\", tableDataList));\n+    }\n+  }\n+\n+  static class TextShowTablesFormatter extends ShowTablesFormatter {\n+    @Override\n+    public void showTables(DataOutputStream out, List<String> tables) throws HiveException {\n+      Iterator<String> iterTbls = tables.iterator();\n+\n+      try {\n+        while (iterTbls.hasNext()) {\n+          // create a row per table name\n+          out.write(iterTbls.next().getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNDQ0MQ==", "bodyText": "Fixed", "url": "https://github.com/apache/hive/pull/1756#discussion_r550804441", "createdAt": "2021-01-01T20:36:36Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/show/tables/ShowTablesFormatter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.info.show.tables;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils.TextMetaDataTable;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW TABLES results.\n+ */\n+public abstract class ShowTablesFormatter {\n+  public static ShowTablesFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowTablesFormatter();\n+    } else {\n+      return new TextShowTablesFormatter();\n+    }\n+  }\n+\n+  public abstract void showTables(DataOutputStream out, List<String> tables) throws HiveException;\n+\n+  abstract void showTablesExtended(DataOutputStream out, List<Table> tables) throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonShowTablesFormatter extends ShowTablesFormatter {\n+    @Override\n+    public void showTables(DataOutputStream out, List<String> tables) throws HiveException {\n+      ShowUtils.asJson(out, MapBuilder.create().put(\"tables\", tables).build());\n+    }\n+\n+    @Override\n+    void showTablesExtended(DataOutputStream out, List<Table> tables) throws HiveException {\n+      if (tables.isEmpty()) {\n+        return;\n+      }\n+\n+      List<Map<String, Object>> tableDataList = new ArrayList<>();\n+      for (Table table : tables) {\n+        Map<String, Object> tableData = ImmutableMap.of(\n+            \"Table Name\", table.getTableName(),\n+            \"Table Type\", table.getTableType().toString());\n+        tableDataList.add(tableData);\n+      }\n+\n+      ShowUtils.asJson(out, ImmutableMap.of(\"tables\", tableDataList));\n+    }\n+  }\n+\n+  static class TextShowTablesFormatter extends ShowTablesFormatter {\n+    @Override\n+    public void showTables(DataOutputStream out, List<String> tables) throws HiveException {\n+      Iterator<String> iterTbls = tables.iterator();\n+\n+      try {\n+        while (iterTbls.hasNext()) {\n+          // create a row per table name\n+          out.write(iterTbls.next().getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTIwNw=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMjgyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/show/ShowPartitionsFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo1MDowM1rOINR36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDozNTo0NVrOINSbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTI0MQ==", "bodyText": "JDK String.split", "url": "https://github.com/apache/hive/pull/1756#discussion_r550795241", "createdAt": "2021-01-01T18:50:03Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/show/ShowPartitionsFormatter.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.partition.show;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.FileUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW PARTITIONS results.\n+ */\n+abstract class ShowPartitionsFormatter {\n+  static ShowPartitionsFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowPartitionsFormatter();\n+    } else {\n+      return new TextShowPartitionsFormatter();\n+    }\n+  }\n+\n+  abstract void showTablePartitions(DataOutputStream out, List<String> partitions) throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonShowPartitionsFormatter extends ShowPartitionsFormatter {\n+    @Override\n+    void showTablePartitions(DataOutputStream out, List<String> partitions) throws HiveException {\n+      List<Map<String, Object>> partitionData = new ArrayList<>(partitions.size());\n+      for (String partition : partitions) {\n+        partitionData.add(makeOneTablePartition(partition));\n+      }\n+      ShowUtils.asJson(out, MapBuilder.create().put(\"partitions\", partitionData).build());\n+    }\n+\n+    // TODO: This seems like a very wrong implementation.\n+    private Map<String, Object> makeOneTablePartition(String partition) {\n+      List<Map<String, Object>> result = new ArrayList<>();\n+\n+      List<String> names = new ArrayList<String>();\n+      for (String part : StringUtils.split(partition, \"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNDM1Mg==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1756#discussion_r550804352", "createdAt": "2021-01-01T20:35:45Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/show/ShowPartitionsFormatter.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.table.partition.show;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.FileUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MapBuilder;\n+import org.apache.hadoop.hive.ql.metadata.formatting.MetaDataFormatUtils;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Formats SHOW PARTITIONS results.\n+ */\n+abstract class ShowPartitionsFormatter {\n+  static ShowPartitionsFormatter getFormatter(HiveConf conf) {\n+    if (MetaDataFormatUtils.isJson(conf)) {\n+      return new JsonShowPartitionsFormatter();\n+    } else {\n+      return new TextShowPartitionsFormatter();\n+    }\n+  }\n+\n+  abstract void showTablePartitions(DataOutputStream out, List<String> partitions) throws HiveException;\n+\n+  // ------ Implementations ------\n+\n+  static class JsonShowPartitionsFormatter extends ShowPartitionsFormatter {\n+    @Override\n+    void showTablePartitions(DataOutputStream out, List<String> partitions) throws HiveException {\n+      List<Map<String, Object>> partitionData = new ArrayList<>(partitions.size());\n+      for (String partition : partitions) {\n+        partitionData.add(makeOneTablePartition(partition));\n+      }\n+      ShowUtils.asJson(out, MapBuilder.create().put(\"partitions\", partitionData).build());\n+    }\n+\n+    // TODO: This seems like a very wrong implementation.\n+    private Map<String, Object> makeOneTablePartition(String partition) {\n+      List<Map<String, Object>> result = new ArrayList<>();\n+\n+      List<String> names = new ArrayList<String>();\n+      for (String part : StringUtils.split(partition, \"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTI0MQ=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTUxMzgxOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/workloadmanagement/resourceplan/show/formatter/TextShowResourcePlanFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODo1MjoxMFrOINR4YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDozNzoyMlrOINScKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTM2MA==", "bodyText": "StandardCharsets", "url": "https://github.com/apache/hive/pull/1756#discussion_r550795360", "createdAt": "2021-01-01T18:52:10Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/workloadmanagement/resourceplan/show/formatter/TextShowResourcePlanFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.workloadmanagement.resourceplan.show.formatter;\n+\n+import org.apache.hadoop.hive.metastore.api.WMFullResourcePlan;\n+import org.apache.hadoop.hive.metastore.api.WMResourcePlan;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW RESOURCE PLAN(S) results to text format.\n+ */\n+class TextShowResourcePlanFormatter extends ShowResourcePlanFormatter {\n+  @Override\n+  public void showResourcePlans(DataOutputStream out, List<WMResourcePlan> resourcePlans) throws HiveException {\n+    try {\n+      for (WMResourcePlan plan : resourcePlans) {\n+        out.write(plan.getName().getBytes(ShowUtils.UTF_8));\n+        out.write(Utilities.tabCode);\n+        out.write(plan.getStatus().name().getBytes(ShowUtils.UTF_8));\n+        out.write(Utilities.tabCode);\n+        String queryParallelism = plan.isSetQueryParallelism() ? Integer.toString(plan.getQueryParallelism()) : \"null\";\n+        out.write(queryParallelism.getBytes(ShowUtils.UTF_8));\n+        out.write(Utilities.tabCode);\n+        String defaultPoolPath = plan.isSetDefaultPoolPath() ? plan.getDefaultPoolPath() : \"null\";\n+        out.write(defaultPoolPath.getBytes(ShowUtils.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNDUyMA==", "bodyText": "Fixed", "url": "https://github.com/apache/hive/pull/1756#discussion_r550804520", "createdAt": "2021-01-01T20:37:22Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/workloadmanagement/resourceplan/show/formatter/TextShowResourcePlanFormatter.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.workloadmanagement.resourceplan.show.formatter;\n+\n+import org.apache.hadoop.hive.metastore.api.WMFullResourcePlan;\n+import org.apache.hadoop.hive.metastore.api.WMResourcePlan;\n+import org.apache.hadoop.hive.ql.ddl.ShowUtils;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Formats SHOW RESOURCE PLAN(S) results to text format.\n+ */\n+class TextShowResourcePlanFormatter extends ShowResourcePlanFormatter {\n+  @Override\n+  public void showResourcePlans(DataOutputStream out, List<WMResourcePlan> resourcePlans) throws HiveException {\n+    try {\n+      for (WMResourcePlan plan : resourcePlans) {\n+        out.write(plan.getName().getBytes(ShowUtils.UTF_8));\n+        out.write(Utilities.tabCode);\n+        out.write(plan.getStatus().name().getBytes(ShowUtils.UTF_8));\n+        out.write(Utilities.tabCode);\n+        String queryParallelism = plan.isSetQueryParallelism() ? Integer.toString(plan.getQueryParallelism()) : \"null\";\n+        out.write(queryParallelism.getBytes(ShowUtils.UTF_8));\n+        out.write(Utilities.tabCode);\n+        String defaultPoolPath = plan.isSetDefaultPoolPath() ? plan.getDefaultPoolPath() : \"null\";\n+        out.write(defaultPoolPath.getBytes(ShowUtils.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5NTM2MA=="}, "originalCommit": {"oid": "45375271e127db5186799ed4798ac8fc4225e785"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc3MTQwOnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/drop/AbstractDropPartitionAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODoyODo0NVrOIPRrEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDowNFrOIPSpcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg4OTEwNw==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552889107", "createdAt": "2021-01-06T18:28:45Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/drop/AbstractDropPartitionAnalyzer.java", "diffHunk": "@@ -20,25 +20,17 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTA3NA==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905074", "createdAt": "2021-01-06T19:00:04Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/drop/AbstractDropPartitionAnalyzer.java", "diffHunk": "@@ -20,25 +20,17 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg4OTEwNw=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc3NTQ0OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODoyOTo1NFrOIPRtng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDoyMVrOIPSp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg4OTc1OA==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552889758", "createdAt": "2021-01-06T18:29:54Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -68,7 +68,8 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     }\n \n     Table table = getTable(tableName);\n-    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = ParseUtils.getFullPartitionSpecs(root, table, conf, false);\n+    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = ParseUtils.getFullPartitionSpecs(root, table, conf,\n+        false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTIxNA==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905214", "createdAt": "2021-01-06T19:00:21Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -68,7 +68,8 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     }\n \n     Table table = getTable(tableName);\n-    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = ParseUtils.getFullPartitionSpecs(root, table, conf, false);\n+    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = ParseUtils.getFullPartitionSpecs(root, table, conf,\n+        false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg4OTc1OA=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc3NzcwOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/process/show/compactions/ShowCompactionsDesc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMDo0MVrOIPRvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDoxMVrOIPSprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDE0MA==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.\nI think this is probably an artifact of your IDE.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552890140", "createdAt": "2021-01-06T18:30:41Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/process/show/compactions/ShowCompactionsDesc.java", "diffHunk": "@@ -31,9 +31,11 @@\n public class ShowCompactionsDesc implements DDLDesc, Serializable {\n   private static final long serialVersionUID = 1L;\n \n+  // @formatter:off\n   public static final String SCHEMA =\n       \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,errormessage#\" +\n       \"string:string:string:string:string:string:string:string:string:string:string:string:string\";\n+  // @formatter:on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTEzNA==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905134", "createdAt": "2021-01-06T19:00:11Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/process/show/compactions/ShowCompactionsDesc.java", "diffHunk": "@@ -31,9 +31,11 @@\n public class ShowCompactionsDesc implements DDLDesc, Serializable {\n   private static final long serialVersionUID = 1L;\n \n+  // @formatter:off\n   public static final String SCHEMA =\n       \"compactionid,dbname,tabname,partname,type,state,hostname,workerid,enqueuetime,starttime,duration,hadoopjobid,errormessage#\" +\n       \"string:string:string:string:string:string:string:string:string:string:string:string:string\";\n+  // @formatter:on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDE0MA=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc3ODM1OnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/AbstractAlterTableOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMDo1NVrOIPRvjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDozM1rOIPSqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDI1Mw==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552890253", "createdAt": "2021-01-06T18:30:55Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/AbstractAlterTableOperation.java", "diffHunk": "@@ -35,7 +35,6 @@\n import org.apache.hadoop.hive.ql.ddl.DDLOperationContext;\n import org.apache.hadoop.hive.ql.ddl.DDLUtils;\n import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintOperation;\n-import org.apache.hadoop.hive.ql.exec.repl.util.ReplUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTMyNg==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905326", "createdAt": "2021-01-06T19:00:33Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/AbstractAlterTableOperation.java", "diffHunk": "@@ -35,7 +35,6 @@\n import org.apache.hadoop.hive.ql.ddl.DDLOperationContext;\n import org.apache.hadoop.hive.ql.ddl.DDLUtils;\n import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintOperation;\n-import org.apache.hadoop.hive.ql.exec.repl.util.ReplUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDI1Mw=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc3OTE3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/constraint/add/AlterTableAddConstraintAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMToxMFrOIPRwFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDoyOVrOIPSqUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDM5MA==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552890390", "createdAt": "2021-01-06T18:31:10Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/constraint/add/AlterTableAddConstraintAnalyzer.java", "diffHunk": "@@ -79,7 +79,8 @@ protected void analyzeCommand(TableName tableName, Map<String, String> partition\n       throw new SemanticException(ErrorMsg.NOT_RECOGNIZED_CONSTRAINT.getMsg(constraintNode.getToken().getText()));\n     }\n \n-    Constraints constraints = new Constraints(primaryKeys, foreignKeys, null, uniqueConstraints, null, checkConstraints);\n+    Constraints constraints =\n+        new Constraints(primaryKeys, foreignKeys, null, uniqueConstraints, null, checkConstraints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTI5Nw==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905297", "createdAt": "2021-01-06T19:00:29Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/constraint/add/AlterTableAddConstraintAnalyzer.java", "diffHunk": "@@ -79,7 +79,8 @@ protected void analyzeCommand(TableName tableName, Map<String, String> partition\n       throw new SemanticException(ErrorMsg.NOT_RECOGNIZED_CONSTRAINT.getMsg(constraintNode.getToken().getText()));\n     }\n \n-    Constraints constraints = new Constraints(primaryKeys, foreignKeys, null, uniqueConstraints, null, checkConstraints);\n+    Constraints constraints =\n+        new Constraints(primaryKeys, foreignKeys, null, uniqueConstraints, null, checkConstraints);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDM5MA=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4MTYxOnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/constraint/drop/AlterTableDropConstraintDesc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMTo1N1rOIPRxtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMTo1N1rOIPRxtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDgwNQ==", "bodyText": "I believe these changes are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552890805", "createdAt": "2021-01-06T18:31:57Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/constraint/drop/AlterTableDropConstraintDesc.java", "diffHunk": "@@ -83,5 +82,4 @@ public Long getWriteId() {\n   public boolean mayNeedWriteId() {\n     return true;\n   }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4NTg5OnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/lock/show/ShowDbLocksAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMzoyNlrOIPR0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDo0MlrOIPSqqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTUwOQ==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552891509", "createdAt": "2021-01-06T18:33:26Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/lock/show/ShowDbLocksAnalyzer.java", "diffHunk": "@@ -23,9 +23,6 @@\n import org.apache.hadoop.hive.ql.ddl.DDLWork;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.exec.TaskFactory;\n-import org.apache.hadoop.hive.ql.lockmgr.HiveTxnManager;\n-import org.apache.hadoop.hive.ql.lockmgr.LockException;\n-import org.apache.hadoop.hive.ql.lockmgr.TxnManagerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTM4Nw==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905387", "createdAt": "2021-01-06T19:00:42Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/lock/show/ShowDbLocksAnalyzer.java", "diffHunk": "@@ -23,9 +23,6 @@\n import org.apache.hadoop.hive.ql.ddl.DDLWork;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.exec.TaskFactory;\n-import org.apache.hadoop.hive.ql.lockmgr.HiveTxnManager;\n-import org.apache.hadoop.hive.ql.lockmgr.LockException;\n-import org.apache.hadoop.hive.ql.lockmgr.TxnManagerFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTUwOQ=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4NjU4OnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/lock/show/ShowLocksAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMzozNlrOIPR02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMToyMlrOIPSr8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTYxMQ==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552891611", "createdAt": "2021-01-06T18:33:36Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/lock/show/ShowLocksAnalyzer.java", "diffHunk": "@@ -26,9 +26,6 @@\n import org.apache.hadoop.hive.ql.ddl.DDLWork;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.exec.TaskFactory;\n-import org.apache.hadoop.hive.ql.lockmgr.HiveTxnManager;\n-import org.apache.hadoop.hive.ql.lockmgr.LockException;\n-import org.apache.hadoop.hive.ql.lockmgr.TxnManagerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTcxMw==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905713", "createdAt": "2021-01-06T19:01:22Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/lock/show/ShowLocksAnalyzer.java", "diffHunk": "@@ -26,9 +26,6 @@\n import org.apache.hadoop.hive.ql.ddl.DDLWork;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.exec.TaskFactory;\n-import org.apache.hadoop.hive.ql.lockmgr.HiveTxnManager;\n-import org.apache.hadoop.hive.ql.lockmgr.LockException;\n-import org.apache.hadoop.hive.ql.lockmgr.TxnManagerFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTYxMQ=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4NzkyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/add/AlterTableAddPartitionDesc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMzo1OVrOIPR1wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDo0OVrOIPSq4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTg0MQ==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552891841", "createdAt": "2021-01-06T18:33:59Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/add/AlterTableAddPartitionDesc.java", "diffHunk": "@@ -234,7 +233,7 @@ public void setWriteId(long writeId) {\n \n   @Override\n   public String getFullTableName() {\n-    return AcidUtils.getFullTableName(dbName,tableName);\n+    return AcidUtils.getFullTableName(dbName, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTQ0Mg==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905442", "createdAt": "2021-01-06T19:00:49Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/add/AlterTableAddPartitionDesc.java", "diffHunk": "@@ -234,7 +233,7 @@ public void setWriteId(long writeId) {\n \n   @Override\n   public String getFullTableName() {\n-    return AcidUtils.getFullTableName(dbName,tableName);\n+    return AcidUtils.getFullTableName(dbName, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTg0MQ=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4ODQwOnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/rename/AlterTableRenamePartitionOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozNDoxMVrOIPR2Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozNDoxMVrOIPR2Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTkxOQ==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552891919", "createdAt": "2021-01-06T18:34:11Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/partition/rename/AlterTableRenamePartitionOperation.java", "diffHunk": "@@ -26,7 +26,6 @@\n import org.apache.hadoop.hive.ql.ddl.DDLOperationContext;\n import org.apache.hadoop.hive.ql.ddl.DDLUtils;\n import org.apache.hadoop.hive.ql.ddl.table.AlterTableUtils;\n-import org.apache.hadoop.hive.ql.exec.repl.util.ReplUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4ODc2OnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/storage/skewed/AlterTableSetSkewedLocationAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozNDoyMlrOIPR2Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMDo1NVrOIPSrDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MjAwMw==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552892003", "createdAt": "2021-01-06T18:34:22Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/storage/skewed/AlterTableSetSkewedLocationAnalyzer.java", "diffHunk": "@@ -20,7 +20,6 @@\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTQ4NQ==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905485", "createdAt": "2021-01-06T19:00:55Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/table/storage/skewed/AlterTableSetSkewedLocationAnalyzer.java", "diffHunk": "@@ -20,7 +20,6 @@\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MjAwMw=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4OTIzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/create/AlterViewAsAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozNDozMVrOIPR2tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMTowMFrOIPSrNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MjA4NQ==", "bodyText": "All changes in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552892085", "createdAt": "2021-01-06T18:34:31Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/create/AlterViewAsAnalyzer.java", "diffHunk": "@@ -84,7 +84,7 @@ private void validateCreateView(AlterViewAsDesc desc, SemanticAnalyzer analyzer)\n \n     if (oldView == null) {\n       String viewNotExistErrorMsg = \"The following view does not exist: \" + desc.getViewName();\n-      throw new SemanticException( ErrorMsg.ALTER_VIEW_AS_SELECT_NOT_EXIST.getMsg(viewNotExistErrorMsg));\n+      throw new SemanticException(ErrorMsg.ALTER_VIEW_AS_SELECT_NOT_EXIST.getMsg(viewNotExistErrorMsg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTUyNA==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905524", "createdAt": "2021-01-06T19:01:00Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/create/AlterViewAsAnalyzer.java", "diffHunk": "@@ -84,7 +84,7 @@ private void validateCreateView(AlterViewAsDesc desc, SemanticAnalyzer analyzer)\n \n     if (oldView == null) {\n       String viewNotExistErrorMsg = \"The following view does not exist: \" + desc.getViewName();\n-      throw new SemanticException( ErrorMsg.ALTER_VIEW_AS_SELECT_NOT_EXIST.getMsg(viewNotExistErrorMsg));\n+      throw new SemanticException(ErrorMsg.ALTER_VIEW_AS_SELECT_NOT_EXIST.getMsg(viewNotExistErrorMsg));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MjA4NQ=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc5MjkyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/formatting/MapBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozNTo0MlrOIPR49w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMTowNVrOIPSrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MjY2Mw==", "bodyText": "All changes (there are several) in this file are out of scope of the PR.  Please revert.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552892663", "createdAt": "2021-01-06T18:35:42Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/formatting/MapBuilder.java", "diffHunk": "@@ -17,51 +17,53 @@\n  */\n package org.apache.hadoop.hive.ql.metadata.formatting;\n \n-import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n /**\n  * Helper class to build Maps consumed by the JSON formatter.  Only\n  * add non-null entries to the Map.\n  */\n-public class MapBuilder {\n-    private Map<String, Object> map = new LinkedHashMap<String, Object>();\n+public final class MapBuilder {\n+  private Map<String, Object> map = new LinkedHashMap<String, Object>();\n \n-    private MapBuilder() {}\n+  private MapBuilder() {\n+  }\n \n-    public static MapBuilder create() {\n-        return new MapBuilder();\n-    }\n+  public static MapBuilder create() {\n+    return new MapBuilder();\n+  }\n \n-    public MapBuilder put(String name, Object val) {\n-        if (val != null)\n-            map.put(name, val);\n-        return this;\n+  public MapBuilder put(String name, Object val) {\n+    if (val != null) {\n+      map.put(name, val);\n     }\n+    return this;\n+  }\n \n-    public MapBuilder put(String name, boolean val) {\n-        map.put(name, Boolean.valueOf(val));\n-        return this;\n-    }\n+  public MapBuilder put(String name, boolean val) {\n+    map.put(name, Boolean.valueOf(val));\n+    return this;\n+  }\n \n-    public MapBuilder put(String name, int val) {\n-        map.put(name, Integer.valueOf(val));\n-        return this;\n-    }\n+  public MapBuilder put(String name, int val) {\n+    map.put(name, Integer.valueOf(val));\n+    return this;\n+  }\n \n-    public MapBuilder put(String name, long val) {\n-        map.put(name, Long.valueOf(val));\n-        return this;\n-    }\n+  public MapBuilder put(String name, long val) {\n+    map.put(name, Long.valueOf(val));\n+    return this;\n+  }\n \n-    public <T> MapBuilder put(String name, T val, boolean use) {\n-        if (use)\n-            put(name, val);\n-        return this;\n+  public <T> MapBuilder put(String name, T val, boolean use) {\n+    if (use) {\n+      put(name, val);\n     }\n+    return this;\n+  }\n \n-    public Map<String, Object> build() {\n-        return map;\n-    }\n+  public Map<String, Object> build() {\n+    return map;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTU2MQ==", "bodyText": "Removed.", "url": "https://github.com/apache/hive/pull/1756#discussion_r552905561", "createdAt": "2021-01-06T19:01:05Z", "author": {"login": "miklosgergely"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/formatting/MapBuilder.java", "diffHunk": "@@ -17,51 +17,53 @@\n  */\n package org.apache.hadoop.hive.ql.metadata.formatting;\n \n-import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n /**\n  * Helper class to build Maps consumed by the JSON formatter.  Only\n  * add non-null entries to the Map.\n  */\n-public class MapBuilder {\n-    private Map<String, Object> map = new LinkedHashMap<String, Object>();\n+public final class MapBuilder {\n+  private Map<String, Object> map = new LinkedHashMap<String, Object>();\n \n-    private MapBuilder() {}\n+  private MapBuilder() {\n+  }\n \n-    public static MapBuilder create() {\n-        return new MapBuilder();\n-    }\n+  public static MapBuilder create() {\n+    return new MapBuilder();\n+  }\n \n-    public MapBuilder put(String name, Object val) {\n-        if (val != null)\n-            map.put(name, val);\n-        return this;\n+  public MapBuilder put(String name, Object val) {\n+    if (val != null) {\n+      map.put(name, val);\n     }\n+    return this;\n+  }\n \n-    public MapBuilder put(String name, boolean val) {\n-        map.put(name, Boolean.valueOf(val));\n-        return this;\n-    }\n+  public MapBuilder put(String name, boolean val) {\n+    map.put(name, Boolean.valueOf(val));\n+    return this;\n+  }\n \n-    public MapBuilder put(String name, int val) {\n-        map.put(name, Integer.valueOf(val));\n-        return this;\n-    }\n+  public MapBuilder put(String name, int val) {\n+    map.put(name, Integer.valueOf(val));\n+    return this;\n+  }\n \n-    public MapBuilder put(String name, long val) {\n-        map.put(name, Long.valueOf(val));\n-        return this;\n-    }\n+  public MapBuilder put(String name, long val) {\n+    map.put(name, Long.valueOf(val));\n+    return this;\n+  }\n \n-    public <T> MapBuilder put(String name, T val, boolean use) {\n-        if (use)\n-            put(name, val);\n-        return this;\n+  public <T> MapBuilder put(String name, T val, boolean use) {\n+    if (use) {\n+      put(name, val);\n     }\n+    return this;\n+  }\n \n-    public Map<String, Object> build() {\n-        return map;\n-    }\n+  public Map<String, Object> build() {\n+    return map;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MjY2Mw=="}, "originalCommit": {"oid": "6b933d0b35c795e73569314dd8ac0ec0db4fe8fc"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 144, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}