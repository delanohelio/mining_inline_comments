{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzODQxNTIx", "number": 1639, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMzozOFrOE08QWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMzozOFrOE08QWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ4NjMyOnYy", "diffSide": "RIGHT", "path": "shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMzozOFrOHs8kwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo1MToxNVrOHs__wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTg0MQ==", "bodyText": "Is there a case that HDFS file system can be mounted as other file systems?", "url": "https://github.com/apache/hive/pull/1639#discussion_r516891841", "createdAt": "2020-11-03T19:03:38Z", "author": {"login": "yongzhi"}, "path": "shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java", "diffHunk": "@@ -1236,13 +1236,35 @@ public boolean isPathEncrypted(Path path) throws IOException {\n       } else {\n         fullPath = path.getFileSystem(conf).makeQualified(path);\n       }\n-      if(!\"hdfs\".equalsIgnoreCase(path.toUri().getScheme())) {\n+      if (!isFileInHdfs(path.getFileSystem(conf), path)) {\n         return false;\n       }\n \n       return (getEncryptionZoneForPath(fullPath) != null);\n     }\n \n+    /**\n+     * Returns true if the given fs supports mount functionality. In general we\n+     * can have child file systems only in the case of mount fs like\n+     * ViewFileSystem, ViewFsOverloadScheme or ViewDistributedFileSystem.\n+     * Returns false if the getChildFileSystems API returns null.\n+     */\n+    private boolean isMountedFs(FileSystem fs) {\n+      return fs.getChildFileSystems() != null;\n+    }\n+\n+    private boolean isFileInHdfs(FileSystem fs, Path path) throws IOException {\n+      String hdfsScheme = \"hdfs\";\n+      boolean isHdfs = hdfsScheme.equalsIgnoreCase(path.toUri().getScheme());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714ebd00033aae3fd5e8e8502ce44dd358f97ccd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyODQ3NQ==", "bodyText": "@yongzhi Thanks for taking a look. yes, we have implemented ViewDistributedFileSystem and ViewFsOverloadScheme in hadoop. They both supports hdfs paths can be mounted with other fs. You can see in the description and traces that hdfs paths pointing to o3fs paths.", "url": "https://github.com/apache/hive/pull/1639#discussion_r516928475", "createdAt": "2020-11-03T20:11:07Z", "author": {"login": "umamaheswararao"}, "path": "shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java", "diffHunk": "@@ -1236,13 +1236,35 @@ public boolean isPathEncrypted(Path path) throws IOException {\n       } else {\n         fullPath = path.getFileSystem(conf).makeQualified(path);\n       }\n-      if(!\"hdfs\".equalsIgnoreCase(path.toUri().getScheme())) {\n+      if (!isFileInHdfs(path.getFileSystem(conf), path)) {\n         return false;\n       }\n \n       return (getEncryptionZoneForPath(fullPath) != null);\n     }\n \n+    /**\n+     * Returns true if the given fs supports mount functionality. In general we\n+     * can have child file systems only in the case of mount fs like\n+     * ViewFileSystem, ViewFsOverloadScheme or ViewDistributedFileSystem.\n+     * Returns false if the getChildFileSystems API returns null.\n+     */\n+    private boolean isMountedFs(FileSystem fs) {\n+      return fs.getChildFileSystems() != null;\n+    }\n+\n+    private boolean isFileInHdfs(FileSystem fs, Path path) throws IOException {\n+      String hdfsScheme = \"hdfs\";\n+      boolean isHdfs = hdfsScheme.equalsIgnoreCase(path.toUri().getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTg0MQ=="}, "originalCommit": {"oid": "714ebd00033aae3fd5e8e8502ce44dd358f97ccd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NzkwNQ==", "bodyText": "Thanks for offline discussion @yongzhi. I have updated comments for better clarity as you suggested!!", "url": "https://github.com/apache/hive/pull/1639#discussion_r516947905", "createdAt": "2020-11-03T20:51:15Z", "author": {"login": "umamaheswararao"}, "path": "shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java", "diffHunk": "@@ -1236,13 +1236,35 @@ public boolean isPathEncrypted(Path path) throws IOException {\n       } else {\n         fullPath = path.getFileSystem(conf).makeQualified(path);\n       }\n-      if(!\"hdfs\".equalsIgnoreCase(path.toUri().getScheme())) {\n+      if (!isFileInHdfs(path.getFileSystem(conf), path)) {\n         return false;\n       }\n \n       return (getEncryptionZoneForPath(fullPath) != null);\n     }\n \n+    /**\n+     * Returns true if the given fs supports mount functionality. In general we\n+     * can have child file systems only in the case of mount fs like\n+     * ViewFileSystem, ViewFsOverloadScheme or ViewDistributedFileSystem.\n+     * Returns false if the getChildFileSystems API returns null.\n+     */\n+    private boolean isMountedFs(FileSystem fs) {\n+      return fs.getChildFileSystems() != null;\n+    }\n+\n+    private boolean isFileInHdfs(FileSystem fs, Path path) throws IOException {\n+      String hdfsScheme = \"hdfs\";\n+      boolean isHdfs = hdfsScheme.equalsIgnoreCase(path.toUri().getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTg0MQ=="}, "originalCommit": {"oid": "714ebd00033aae3fd5e8e8502ce44dd358f97ccd"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 218, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}