{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzQ5NDQ3", "number": 1392, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMTo0MlrOEXYWuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMTo0MlrOEXYWuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTUxNzM3OnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/common/type/TimestampTZUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMTo0MlrOG_JG1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowNTozM1rOG_JOIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MjY3OA==", "bodyText": "should this be a threadlocal value? using this way is pretty slow iirc..", "url": "https://github.com/apache/hive/pull/1392#discussion_r468862678", "createdAt": "2020-08-11T21:01:42Z", "author": {"login": "prasanthj"}, "path": "common/src/java/org/apache/hadoop/hive/common/type/TimestampTZUtil.java", "diffHunk": "@@ -145,13 +149,33 @@ public static ZoneId parseTimeZone(String timeZoneStr) {\n     }\n   }\n \n+  public static Timestamp convertTimestampToZone(Timestamp ts, ZoneId fromZone, ZoneId toZone) {\n+    return convertTimestampToZone(ts, fromZone, toZone, false);\n+  }\n+\n   /**\n    * Timestamps are technically time zone agnostic, and this method sort of cheats its logic.\n    * Timestamps are supposed to represent nanos since [UTC epoch]. Here,\n    * the input timestamp represents nanoseconds since [epoch at fromZone], and\n    * we return a Timestamp representing nanoseconds since [epoch at toZone].\n    */\n-  public static Timestamp convertTimestampToZone(Timestamp ts, ZoneId fromZone, ZoneId toZone) {\n+  public static Timestamp convertTimestampToZone(Timestamp ts, ZoneId fromZone, ZoneId toZone,\n+      boolean legacyConversion) {\n+    if (legacyConversion) {\n+      try {\n+        DateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b1dddac2897dee6429d10c391327a11a837e46"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NDU0NA==", "bodyText": "Yes, that's right. I'll change it in follow-up commit.", "url": "https://github.com/apache/hive/pull/1392#discussion_r468864544", "createdAt": "2020-08-11T21:05:33Z", "author": {"login": "jcamachor"}, "path": "common/src/java/org/apache/hadoop/hive/common/type/TimestampTZUtil.java", "diffHunk": "@@ -145,13 +149,33 @@ public static ZoneId parseTimeZone(String timeZoneStr) {\n     }\n   }\n \n+  public static Timestamp convertTimestampToZone(Timestamp ts, ZoneId fromZone, ZoneId toZone) {\n+    return convertTimestampToZone(ts, fromZone, toZone, false);\n+  }\n+\n   /**\n    * Timestamps are technically time zone agnostic, and this method sort of cheats its logic.\n    * Timestamps are supposed to represent nanos since [UTC epoch]. Here,\n    * the input timestamp represents nanoseconds since [epoch at fromZone], and\n    * we return a Timestamp representing nanoseconds since [epoch at toZone].\n    */\n-  public static Timestamp convertTimestampToZone(Timestamp ts, ZoneId fromZone, ZoneId toZone) {\n+  public static Timestamp convertTimestampToZone(Timestamp ts, ZoneId fromZone, ZoneId toZone,\n+      boolean legacyConversion) {\n+    if (legacyConversion) {\n+      try {\n+        DateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MjY3OA=="}, "originalCommit": {"oid": "62b1dddac2897dee6429d10c391327a11a837e46"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 515, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}