{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTc2NTU1", "number": 1105, "title": "HIVE-22957: Support Partition Filtering In MSCK REPAIR TABLE Command", "bodyText": "Currently MSCK command supports only full repair of tables (all partitions)or some subset of partitions based on partitionSpec (need to know theexact partition names). So the aim here is to introduce partition filtering with operators (EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN| GREATERTHANOREQUALTO | GREATERTHAN | LIKE) in the partition column so that a larger subset of partitions can be recovered(added/dropped) without firing a full repair command might take time if the no. of partitions are huge.", "createdAt": "2020-06-13T08:15:48Z", "url": "https://github.com/apache/hive/pull/1105", "merged": true, "mergeCommit": {"oid": "5dfbe71c786272add43ca42197bbccf1d233ba3b"}, "closed": true, "closedAt": "2020-07-13T09:03:50Z", "author": {"login": "shameersss1"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvFivwAH2gAyNDMzOTc2NTU1OmQxZjc3YzJiMDVkMDJiNzAxYWIxZjgzYTg2MzNhYzdjOWU2MDdmYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczQb7EAH2gAyNDMzOTc2NTU1OjM5NDNjZDUwMjYyOTk1MDBhZDQ5MjI5MWQ3MjJiY2FiODgyMWRiYjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d1f77c2b05d02b701ab1f83a8633ac7c9e607fc3", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/d1f77c2b05d02b701ab1f83a8633ac7c9e607fc3", "committedDate": "2020-06-26T16:08:00Z", "message": "HIVE-22957: Add Option For Predicate Filtering In MSCK REPAIR TABLE Command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "747394343581b731385c88d6b3d745bfa7cd9266", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/747394343581b731385c88d6b3d745bfa7cd9266", "committedDate": "2020-06-26T16:08:00Z", "message": "Refactoring Code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3045ffa09dd928a76af8798f06ccf74f68c41bad", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/3045ffa09dd928a76af8798f06ccf74f68c41bad", "committedDate": "2020-06-26T16:08:00Z", "message": "Msck Test Fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "238afc999671dd6335adc36d4491d98a42800b45", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/238afc999671dd6335adc36d4491d98a42800b45", "committedDate": "2020-06-13T12:22:00Z", "message": "Msck Test Fix"}, "afterCommit": {"oid": "3045ffa09dd928a76af8798f06ccf74f68c41bad", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/3045ffa09dd928a76af8798f06ccf74f68c41bad", "committedDate": "2020-06-26T16:08:00Z", "message": "Msck Test Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/c91b3d442872bbf57b33fdd1f38f1487407c1852", "committedDate": "2020-06-26T16:27:46Z", "message": "Rebase  master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NzAzMjc2", "url": "https://github.com/apache/hive/pull/1105#pullrequestreview-444703276", "createdAt": "2020-07-08T12:13:31Z", "commit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjoxMzozMVrOGulHgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjo1ODozNlrOGum2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5NTgxMQ==", "bodyText": "is there a reason that we run this test with mr?", "url": "https://github.com/apache/hive/pull/1105#discussion_r451495811", "createdAt": "2020-07-08T12:13:31Z", "author": {"login": "kgyrtkirk"}, "path": "itests/src/test/resources/testconfiguration.properties", "diffHunk": "@@ -222,6 +222,7 @@ mr.query.files=\\\n   mapjoin_subquery2.q,\\\n   mapjoin_test_outer.q,\\\n   masking_5.q,\\\n+  msck_repair_filter.q,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5Nzc5Mw==", "bodyText": "I know it was here before - but let's fix this up:\ninstead of separate add/drop/sync variable ...we could have opt=(KW_ADD|KW_DROP|KW_SYNC) ? that will make the other end more readable as well", "url": "https://github.com/apache/hive/pull/1105#discussion_r451497793", "createdAt": "2020-07-08T12:15:42Z", "author": {"login": "kgyrtkirk"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g", "diffHunk": "@@ -1942,9 +1942,8 @@ metastoreCheck\n @after { popMsg(state); }\n     : KW_MSCK (repair=KW_REPAIR)?\n       (KW_TABLE tableName\n-        ((add=KW_ADD | drop=KW_DROP | sync=KW_SYNC) (parts=KW_PARTITIONS))? |\n-        (partitionSpec)?)\n-    -> ^(TOK_MSCK $repair? tableName? $add? $drop? $sync? (partitionSpec*)?)\n+        ((add=KW_ADD | drop=KW_DROP | sync=KW_SYNC) (parts=KW_PARTITIONS) (filterPartitionSpec)?)?)\n+    -> ^(TOK_MSCK $repair? tableName? $add? $drop? $sync? (filterPartitionSpec)?)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMjIwMQ==", "bodyText": "old partitionSpec doesn't mandatorily required the constant\nidentifier (EQUAL constant)? \n\nwere there any use cases of that?", "url": "https://github.com/apache/hive/pull/1105#discussion_r451502201", "createdAt": "2020-07-08T12:21:33Z", "author": {"login": "kgyrtkirk"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -734,6 +734,21 @@ dropPartitionOperator\n     EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN\n     ;\n \n+filterPartitionSpec\n+    :\n+    LPAREN filterPartitionVal (COMMA  filterPartitionVal )* RPAREN -> ^(TOK_PARTSPEC filterPartitionVal +)\n+    ;\n+\n+filterPartitionVal\n+    :\n+    identifier filterPartitionOperator constant -> ^(TOK_PARTVAL identifier filterPartitionOperator constant)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzYzMA==", "bodyText": "I don't think this will work - this is the ql module ; while EXPRESSION_PROXY_CLASS is a metastore conf key; in a remote metastore setup this set will probably have no effect...\nhave you tried it?\nI think making a check and returning with an error that this feature is not available due to required conf change is fine", "url": "https://github.com/apache/hive/pull/1105#discussion_r451503630", "createdAt": "2020-07-08T12:24:04Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -63,13 +67,24 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     }\n \n     Table table = getTable(tableName);\n-    List<Map<String, String>> specs = getPartitionSpecs(table, root);\n+    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = getFullPartitionSpecs(root, table, conf, false);\n+    byte[] filterExp = null;\n+    if (partitionSpecs != null & !partitionSpecs.isEmpty()) {\n+      // explicitly set expression proxy class to PartitionExpressionForMetastore since we intend to use the\n+      // filterPartitionsByExpr of PartitionExpressionForMetastore for partition pruning down the line.\n+      conf.set(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwNzg4Ng==", "bodyText": "dropPartitionSpec seems to use almost the same construct ; I don't see any reason to duplicate it ...\nthe only difference I see right now is LIKE - are there any other differences?\nI think instead of duplicate we should use the same stuff...", "url": "https://github.com/apache/hive/pull/1105#discussion_r451507886", "createdAt": "2020-07-08T12:31:36Z", "author": {"login": "kgyrtkirk"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -734,6 +734,21 @@ dropPartitionOperator\n     EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN\n     ;\n \n+filterPartitionSpec\n+    :\n+    LPAREN filterPartitionVal (COMMA  filterPartitionVal )* RPAREN -> ^(TOK_PARTSPEC filterPartitionVal +)\n+    ;\n+\n+filterPartitionVal\n+    :\n+    identifier filterPartitionOperator constant -> ^(TOK_PARTVAL identifier filterPartitionOperator constant)\n+    ;\n+\n+filterPartitionOperator\n+    :\n+    EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | KW_LIKE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwODUyOA==", "bodyText": "why this needs to be flattened into a byte[] ?", "url": "https://github.com/apache/hive/pull/1105#discussion_r451508528", "createdAt": "2020-07-08T12:32:45Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -63,13 +67,24 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     }\n \n     Table table = getTable(tableName);\n-    List<Map<String, String>> specs = getPartitionSpecs(table, root);\n+    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = getFullPartitionSpecs(root, table, conf, false);\n+    byte[] filterExp = null;\n+    if (partitionSpecs != null & !partitionSpecs.isEmpty()) {\n+      // explicitly set expression proxy class to PartitionExpressionForMetastore since we intend to use the\n+      // filterPartitionsByExpr of PartitionExpressionForMetastore for partition pruning down the line.\n+      conf.set(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname(),\n+          PartitionExpressionForMetastore.class.getCanonicalName());\n+      // fetch the first value of partitionSpecs map since it will always have one key, value pair\n+      filterExp = SerializationUtilities.serializeExpressionToKryo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMTAyMw==", "bodyText": "can we find a new home for these 2 static methods? :)\nql/src/java/org/apache/hadoop/hive/ql/parse/ParseUtils.java", "url": "https://github.com/apache/hive/pull/1105#discussion_r451511023", "createdAt": "2020-07-08T12:37:03Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/BaseSemanticAnalyzer.java", "diffHunk": "@@ -837,6 +844,118 @@ public static void checkColumnName(String columnName) throws SemanticException {\n     return colList;\n   }\n \n+  /**\n+   * Get the partition specs from the tree. This stores the full specification\n+   * with the comparator operator into the output list.\n+   *\n+   * @return Map of partitions by prefix length. Most of the time prefix length will\n+   *         be the same for all partition specs, so we can just OR the expressions.\n+   */\n+  public static Map<Integer, List<ExprNodeGenericFuncDesc>> getFullPartitionSpecs(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMTQ1MA==", "bodyText": "is there a successor of this test?", "url": "https://github.com/apache/hive/pull/1105#discussion_r451511450", "createdAt": "2020-07-08T12:37:52Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "diffHunk": "@@ -330,17 +330,6 @@ public void testPartitionsCheck() throws HiveException,\n     assertEquals(partToRemove.getTable().getTableName(),\n         result.getPartitionsNotOnFs().iterator().next().getTableName());\n     assertEquals(Collections.<CheckResult.PartitionResult>emptySet(), result.getPartitionsNotInMs());\n-\n-    List<Map<String, String>> partsCopy = new ArrayList<Map<String, String>>();\n-    partsCopy.add(partitions.get(1).getSpec());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMzY1NA==", "bodyText": "I wonder if there is a way to retain filterExp in a more natural way....it will be kryo-encoded almost all the time...but seems like the metastore interface method was designed to accept kryo stuff...", "url": "https://github.com/apache/hive/pull/1105#discussion_r451513654", "createdAt": "2020-07-08T12:41:29Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -240,40 +243,27 @@ void checkTable(String catName, String dbName, String tableName,\n     }\n \n     PartitionIterable parts;\n-    boolean findUnknownPartitions = true;\n \n     if (isPartitioned(table)) {\n-      if (partitions == null || partitions.isEmpty()) {\n+      if (filterExp != null) {\n+        List<Partition> results = new ArrayList<>();\n+        getPartitionListByFilterExp(getMsc(), table, filterExp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxNzUyNQ==", "bodyText": "this method accepts byte[] and if I'm not wrong this is like this since around 2013", "url": "https://github.com/apache/hive/pull/1105#discussion_r451517525", "createdAt": "2020-07-08T12:48:00Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/utils/MetaStoreServerUtils.java", "diffHunk": "@@ -1348,6 +1348,17 @@ public static Path getPath(Table table) {\n     }\n   }\n \n+  public static void getPartitionListByFilterExp(IMetaStoreClient msc, Table table, byte[] filterExp,\n+                                                 String defaultPartName, List<Partition> results)\n+      throws MetastoreException {\n+    try {\n+      msc.listPartitionsByExpr(table.getCatName(), table.getDbName(), table.getTableName(), filterExp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxODgwNg==", "bodyText": "move this variable inside the if", "url": "https://github.com/apache/hive/pull/1105#discussion_r451518806", "createdAt": "2020-07-08T12:50:10Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -383,7 +375,29 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     // now check the table folder and see if we find anything\n     // that isn't in the metastore\n     Set<Path> allPartDirs = new HashSet<Path>();\n+    Set<Path> partDirs = new HashSet<Path>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyMjMzMA==", "bodyText": "instead of concatenating with / use new Path(parentPath,child) - it's more portable", "url": "https://github.com/apache/hive/pull/1105#discussion_r451522330", "createdAt": "2020-07-08T12:55:40Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -383,7 +375,29 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     // now check the table folder and see if we find anything\n     // that isn't in the metastore\n     Set<Path> allPartDirs = new HashSet<Path>();\n+    Set<Path> partDirs = new HashSet<Path>();\n+    List<FieldSchema> partColumns = table.getPartitionKeys();\n     checkPartitionDirs(tablePath, allPartDirs, Collections.unmodifiableList(getPartColNames(table)));\n+\n+    if (filterExp != null) {\n+      PartitionExpressionProxy expressionProxy = createExpressionProxy(conf);\n+      List<String> paritions = new ArrayList<>();\n+      for (Path path : allPartDirs) {\n+        // remove the table's path from the partition path\n+        // eg: <tablePath>/p1=1/p2=2/p3=3 ---> p1=1/p2=2/p3=3\n+        paritions.add(path.toString().substring(tablePath.toString().length() + 1));\n+      }\n+      // Remove all partition paths which does not matches the filter expression.\n+      expressionProxy.filterPartitionsByExpr(partColumns, filterExp,\n+          conf.get(MetastoreConf.ConfVars.DEFAULTPARTITIONNAME.getVarname()), paritions);\n+\n+      // now the partition list will contain all the paths that matches the filter expression.\n+      // add them back to partDirs.\n+      for (String path : paritions) {\n+        partDirs.add(new Path(tablePath.toString() + \"/\" + path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyNDE2Ng==", "bodyText": "I'm wondering if tablePath could end with a '/' or not; if it does, and checkPartitionDirs are removing double slashes this could eat up 1 extra char...", "url": "https://github.com/apache/hive/pull/1105#discussion_r451524166", "createdAt": "2020-07-08T12:58:36Z", "author": {"login": "kgyrtkirk"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -383,7 +375,29 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     // now check the table folder and see if we find anything\n     // that isn't in the metastore\n     Set<Path> allPartDirs = new HashSet<Path>();\n+    Set<Path> partDirs = new HashSet<Path>();\n+    List<FieldSchema> partColumns = table.getPartitionKeys();\n     checkPartitionDirs(tablePath, allPartDirs, Collections.unmodifiableList(getPartColNames(table)));\n+\n+    if (filterExp != null) {\n+      PartitionExpressionProxy expressionProxy = createExpressionProxy(conf);\n+      List<String> paritions = new ArrayList<>();\n+      for (Path path : allPartDirs) {\n+        // remove the table's path from the partition path\n+        // eg: <tablePath>/p1=1/p2=2/p3=3 ---> p1=1/p2=2/p3=3\n+        paritions.add(path.toString().substring(tablePath.toString().length() + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852"}, "originalPosition": 193}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2afd27e6ee7ed0c11223c62ff1883f52f917957a", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/2afd27e6ee7ed0c11223c62ff1883f52f917957a", "committedDate": "2020-07-09T10:52:26Z", "message": "Fix PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "412ced9a3941a64e7df23ef7096c5a6928393321", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/412ced9a3941a64e7df23ef7096c5a6928393321", "committedDate": "2020-07-09T13:06:19Z", "message": "Throw exception on invalid config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NjA3Njc5", "url": "https://github.com/apache/hive/pull/1105#pullrequestreview-445607679", "createdAt": "2020-07-09T13:20:52Z", "commit": {"oid": "412ced9a3941a64e7df23ef7096c5a6928393321"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMDo1MlrOGvQ0ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyNDoxNVrOGvQ9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMTg1MA==", "bodyText": "I think we are fighting with the complexity of the existing complexity :)\nright now this will mean that we may write TABLE t PARTITION PARTITION ...  :D\ndo one of the following:\n\neither push out the KW_PARTITION keyword from dropPartitionSpec to every site it's being used\nor...remove the (parts=KW_PARTITIONS)? from here and change the dropPartitionSpec to accept it optionally by using: (KW_PARTITION | KW_PARTITIONS)?\n\nI think we should also clean up a bit:\n\nrename the dropPartitionSpec to something which doesn't have drop in its name like partitionSelectorSpec", "url": "https://github.com/apache/hive/pull/1105#discussion_r452211850", "createdAt": "2020-07-09T13:20:52Z", "author": {"login": "kgyrtkirk"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g", "diffHunk": "@@ -1942,8 +1942,8 @@ metastoreCheck\n @after { popMsg(state); }\n     : KW_MSCK (repair=KW_REPAIR)?\n       (KW_TABLE tableName\n-        (opt=(KW_ADD|KW_DROP|KW_SYNC) (parts=KW_PARTITIONS) (filterPartitionSpec)?)?)\n-    -> ^(TOK_MSCK $repair? tableName? $opt? (filterPartitionSpec)?)\n+        (opt=(KW_ADD|KW_DROP|KW_SYNC) (parts=KW_PARTITIONS)? (dropPartitionSpec)?)?)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412ced9a3941a64e7df23ef7096c5a6928393321"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY0NQ==", "bodyText": "I think this should be (KW_PARTITION|KW_PARTITIONS)  ; because in it's current form it will\n\naccept PARTITION\nand PARTITIONS  (...)\nbut not  PARTITION (...)", "url": "https://github.com/apache/hive/pull/1105#discussion_r452212645", "createdAt": "2020-07-09T13:21:59Z", "author": {"login": "kgyrtkirk"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -720,7 +720,7 @@ partitionVal\n \n dropPartitionSpec\n     :\n-    KW_PARTITION\n+    KW_PARTITION | KW_PARTITIONS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412ced9a3941a64e7df23ef7096c5a6928393321"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNDEyMA==", "bodyText": "you could avoid the null/empty check by using: !PartitionExpressionForMetastore.class.getCanonicalName()).equals(expressionProxyClass)", "url": "https://github.com/apache/hive/pull/1105#discussion_r452214120", "createdAt": "2020-07-09T13:24:15Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -71,10 +71,15 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = ParseUtils.getFullPartitionSpecs(root, table, conf, false);\n     byte[] filterExp = null;\n     if (partitionSpecs != null & !partitionSpecs.isEmpty()) {\n-      // explicitly set expression proxy class to PartitionExpressionForMetastore since we intend to use the\n+      // expression proxy class needs to be PartitionExpressionForMetastore since we intend to use the\n       // filterPartitionsByExpr of PartitionExpressionForMetastore for partition pruning down the line.\n-      conf.set(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname(),\n-          PartitionExpressionForMetastore.class.getCanonicalName());\n+      // Bail out early if expressionProxyClass is not configured properly.\n+      String expressionProxyClass = conf.get(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname());\n+      if (expressionProxyClass == null || expressionProxyClass.isEmpty() ||\n+          !expressionProxyClass.equals(PartitionExpressionForMetastore.class.getCanonicalName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412ced9a3941a64e7df23ef7096c5a6928393321"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3943cd5026299500ad492291d722bcab8821dbb4", "author": {"user": {"login": "srahman-qubole", "name": "Syed Shameerur Rahman"}}, "url": "https://github.com/apache/hive/commit/3943cd5026299500ad492291d722bcab8821dbb4", "committedDate": "2020-07-09T15:05:12Z", "message": "PR Commnets"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3865, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}