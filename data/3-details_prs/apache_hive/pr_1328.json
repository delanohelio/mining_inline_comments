{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NjQ0Nzg0", "number": 1328, "title": "HIVE-23873: Querying Hive JDBCStorageHandler table fails with NPE whe\u2026", "bodyText": "\u2026n CBO is off\nNOTICE\nPlease create an issue in ASF JIRA before opening a pull request,\nand you need to set the title of the pull request which starts with\nthe corresponding JIRA issue number. (e.g. HIVE-XXXXX: Fix a typo in YYY)\nFor more details, please see https://cwiki.apache.org/confluence/display/Hive/HowToContribute", "createdAt": "2020-07-28T08:27:49Z", "url": "https://github.com/apache/hive/pull/1328", "merged": true, "mergeCommit": {"oid": "2c6c0b192b763f36e8f57ad2ace919809eafb42a"}, "closed": true, "closedAt": "2020-08-03T14:40:08Z", "author": {"login": "cravani"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5SHl8gH2gAyNDU3NjQ0Nzg0OmI0MWU1NzM0NjM4ZmY0OGFkZmZjYTgzZDdiZTEwNmM3MzU2ZGQ2NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7TCIIAFqTQ2MDA4MjA1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c", "author": {"user": {"login": "cravani", "name": "Chiran Ravani"}}, "url": "https://github.com/apache/hive/commit/b41e5734638ff48adffca83d7be106c7356dd65c", "committedDate": "2020-07-28T08:26:21Z", "message": "HIVE-23873: Querying Hive JDBCStorageHandler table fails with NPE when CBO is off"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzE4MzE2", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-456718316", "createdAt": "2020-07-28T14:53:43Z", "commit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1Mzo0M1rOG4QpoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMzozN1rOG4RJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA==", "bodyText": "Missing { &  } for this else", "url": "https://github.com/apache/hive/pull/1328#discussion_r461646240", "createdAt": "2020-07-28T14:53:43Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQ1OQ==", "bodyText": "Small white space nitpick here, should be if (conf.get(Constants.JDBC_QUERY) == null) {", "url": "https://github.com/apache/hive/pull/1328#discussion_r461647459", "createdAt": "2020-07-28T14:55:09Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA==", "bodyText": "Small whitespace nitpick here LOGGER.debug(\"Iterator ColumnNames = \" + fieldNamesProperty);", "url": "https://github.com/apache/hive/pull/1328#discussion_r461654354", "createdAt": "2020-07-28T15:03:37Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else\n+            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+        }\n+        catch (Exception e) {\n+          LOGGER.error(\"Error while trying to get column names.\", e);\n+          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+        }\n+        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n+    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzUyMDEy", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-456752012", "createdAt": "2020-07-28T15:28:20Z", "commit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToyODoyMFrOG4SPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToyODozOVrOG4SQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjM2NA==", "bodyText": "LOGGER.debug(\"Iterator ColumnNames = {}\", fieldNamesProperty);", "url": "https://github.com/apache/hive/pull/1328#discussion_r461672364", "createdAt": "2020-07-28T15:28:20Z", "author": {"login": "jcamachor"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else\n+            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+        }\n+        catch (Exception e) {\n+          LOGGER.error(\"Error while trying to get column names.\", e);\n+          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+        }\n+        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n+    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjU2Mw==", "bodyText": "nit. Indentation seems off.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461672563", "createdAt": "2020-07-28T15:28:39Z", "author": {"login": "jcamachor"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d4256b712a1e6efe1c52602758f73e439c23b1", "author": {"user": {"login": "cravani", "name": "Chiran Ravani"}}, "url": "https://github.com/apache/hive/commit/d2d4256b712a1e6efe1c52602758f73e439c23b1", "committedDate": "2020-07-28T19:04:04Z", "message": "Update JdbcRecordIterator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210e3ee3d3b9e33f02cfadc4d58eab73bbe1ff16", "author": {"user": {"login": "cravani", "name": "Chiran Ravani"}}, "url": "https://github.com/apache/hive/commit/210e3ee3d3b9e33f02cfadc4d58eab73bbe1ff16", "committedDate": "2020-07-28T19:13:58Z", "message": "Update external_jdbc_table4.q.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "author": {"user": {"login": "cravani", "name": "Chiran Ravani"}}, "url": "https://github.com/apache/hive/commit/ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "committedDate": "2020-07-28T19:22:58Z", "message": "Update JdbcRecordIterator.java\n\nadded { & } for else block Line 77"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2OTIwNTc3", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-456920577", "createdAt": "2020-07-28T18:59:15Z", "commit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODo1OToxNVrOG4aQdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMzo0OFrOG4aaZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMzYzNw==", "bodyText": "{ & }. are required? I was assuming since we have single statement within conditional block, it should be fine.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461803637", "createdAt": "2020-07-28T18:59:15Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNTA2MA==", "bodyText": "Fixed.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461805060", "createdAt": "2020-07-28T19:01:40Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQ1OQ=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNTIyNA==", "bodyText": "fixed.", "url": "https://github.com/apache/hive/pull/1328#discussion_r461805224", "createdAt": "2020-07-28T19:01:59Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else\n+            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+        }\n+        catch (Exception e) {\n+          LOGGER.error(\"Error while trying to get column names.\", e);\n+          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+        }\n+        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n+    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNjE4Mw==", "bodyText": "fixed :)", "url": "https://github.com/apache/hive/pull/1328#discussion_r461806183", "createdAt": "2020-07-28T19:03:48Z", "author": {"login": "cravani"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjU2Mw=="}, "originalCommit": {"oid": "b41e5734638ff48adffca83d7be106c7356dd65c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjE4NDI0", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-457618424", "createdAt": "2020-07-29T15:07:45Z", "commit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowNzo0NVrOG49BLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowODowOVrOG49CLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzE2NQ==", "bodyText": "I don't believe this import is used", "url": "https://github.com/apache/hive/pull/1328#discussion_r462373165", "createdAt": "2020-07-29T15:07:45Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -22,15 +22,19 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.apache.hive.storage.jdbc.exception.HiveJdbcDatabaseAccessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n import java.sql.SQLDataException;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzQyMg==", "bodyText": "Whitespace at the end of this if is still off a bit, should be just one space after )", "url": "https://github.com/apache/hive/pull/1328#discussion_r462373422", "createdAt": "2020-07-29T15:08:09Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjIzMjEy", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-457623212", "createdAt": "2020-07-29T15:12:39Z", "commit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxMjozOVrOG49Pcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxMjozOVrOG49Pcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjgxOQ==", "bodyText": "Nitpicking here again sorry, lets move the else a line up } else {\nAlso regarding else without the { ... } being valid, you are correct it is valid java. Stylistically however using the brackets tends to be more readable and seems to be the dominant style in this project. \ud83d\udc4d", "url": "https://github.com/apache/hive/pull/1328#discussion_r462376819", "createdAt": "2020-07-29T15:12:39Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjIzNzE3", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-457623717", "createdAt": "2020-07-29T15:13:11Z", "commit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxMzoxMVrOG49Q5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxMzoxMVrOG49Q5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NzE4OQ==", "bodyText": "Here as well lets move the else up to line 76, } else {", "url": "https://github.com/apache/hive/pull/1328#discussion_r462377189", "createdAt": "2020-07-29T15:13:11Z", "author": {"login": "HunterL"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n+          }\n+          fieldNamesProperty = String.join(\",\",columnNames);\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "author": {"user": {"login": "cravani", "name": "Chiran Ravani"}}, "url": "https://github.com/apache/hive/commit/42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "committedDate": "2020-07-29T15:48:39Z", "message": "Update JdbcRecordIterator.java\n\nfixed Nit picks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzczNDky", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-459773492", "createdAt": "2020-08-03T06:23:22Z", "commit": {"oid": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMzoyMlrOG6tdfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMzoyMlrOG6tdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNTQyMg==", "bodyText": "nit: space missing:  String.join(\",\", columnNames);", "url": "https://github.com/apache/hive/pull/1328#discussion_r464215422", "createdAt": "2020-08-03T06:23:22Z", "author": {"login": "shameersss1"}, "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +62,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null) {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n+          }\n+          fieldNamesProperty = String.join(\",\",columnNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDgyMDUz", "url": "https://github.com/apache/hive/pull/1328#pullrequestreview-460082053", "createdAt": "2020-08-03T14:38:08Z", "commit": {"oid": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3368, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}