{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MjMyODE1", "number": 1125, "title": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely)", "bodyText": "Create View commands are not queries, but commands which have queries as a part of them. Therefore a separate CreateViewAnalyzer is needed which uses SemanticAnalyer to analyze it's query.", "createdAt": "2020-06-16T13:53:46Z", "url": "https://github.com/apache/hive/pull/1125", "merged": true, "mergeCommit": {"oid": "2731dafd89d57f1fc747779fb98fbe82a3e7c1bf"}, "closed": true, "closedAt": "2020-07-15T13:13:35Z", "author": {"login": "miklosgergely"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxGA8dABqjM1MDg4NTY0MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1KVthAFqTQ0ODkzMzA5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "201e001341aad20dec5bfc15745ddd7c60edba22", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/201e001341aad20dec5bfc15745ddd7c60edba22", "committedDate": "2020-06-16T13:34:47Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}, "afterCommit": {"oid": "d5a1a52f88c8d088e74066864e0e98a49b6dbd36", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/d5a1a52f88c8d088e74066864e0e98a49b6dbd36", "committedDate": "2020-07-02T21:48:04Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NjQ0Mjc0", "url": "https://github.com/apache/hive/pull/1125#pullrequestreview-445644274", "createdAt": "2020-07-09T13:59:48Z", "commit": {"oid": "d5a1a52f88c8d088e74066864e0e98a49b6dbd36"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo1OTo0OFrOGvSfEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDowMjowMVrOGvSluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzOTEyMw==", "bodyText": "Try laying this out a bit differently.  It's not proper form to catch your own exception: SemanticException is subclass of HiveException", "url": "https://github.com/apache/hive/pull/1125#discussion_r452239123", "createdAt": "2020-07-09T13:59:48Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/create/AbstractCreateViewAnalyzer.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.view.create;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n+import org.apache.hadoop.hive.ql.QueryState;\n+import org.apache.hadoop.hive.ql.exec.TableScanOperator;\n+import org.apache.hadoop.hive.ql.hooks.ReadEntity;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.parse.ASTNode;\n+import org.apache.hadoop.hive.ql.parse.BaseSemanticAnalyzer;\n+import org.apache.hadoop.hive.ql.parse.SemanticAnalyzer;\n+import org.apache.hadoop.hive.ql.parse.SemanticAnalyzerFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+\n+/**\n+ * Abstract ancestor of analyzers that can create a view.\n+ */\n+abstract class AbstractCreateViewAnalyzer extends BaseSemanticAnalyzer {\n+  AbstractCreateViewAnalyzer(QueryState queryState) throws SemanticException {\n+    super(queryState);\n+  }\n+\n+  protected List<FieldSchema> schema;\n+\n+  @Override\n+  public List<FieldSchema> getResultSchema() {\n+    return schema;\n+  }\n+\n+  protected SemanticAnalyzer analyzeQuery(ASTNode select, String fqViewName) throws SemanticException {\n+    QueryState innerQueryState = new QueryState.Builder().withHiveConf(conf).build();\n+    innerQueryState.getConf().setBoolVar(HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES, false);\n+\n+    SemanticAnalyzer analyzer = (SemanticAnalyzer) SemanticAnalyzerFactory.get(innerQueryState, select);\n+    ctx.setEnableUnparse(true);\n+    analyzer.forViewCreation(fqViewName);\n+    analyzer.analyze(select, ctx);\n+    analyzer.executeUnparseTranlations();\n+\n+    queryState.setLineageState(innerQueryState.getLineageState());\n+    queryState.getLineageState().mapDirToOp(new Path(fqViewName), analyzer.getSinkOp());\n+\n+    addInputs(analyzer);\n+\n+    return analyzer;\n+  }\n+\n+  private void addInputs(SemanticAnalyzer analyzer) {\n+    inputs.addAll(analyzer.getInputs());\n+    for (Map.Entry<String, TableScanOperator> entry : analyzer.getTopOps().entrySet()) {\n+      String alias = entry.getKey();\n+      TableScanOperator topOp = entry.getValue();\n+      ReadEntity parentViewInfo = PlanUtils.getParentViewInfo(alias, analyzer.getViewAliasToInput());\n+\n+      // Adds tables only for create view (PPD filter can be appended by outer query)\n+      Table table = topOp.getConf().getTableMetadata();\n+      PlanUtils.addInput(inputs, new ReadEntity(table, parentViewInfo));\n+    }\n+  }\n+\n+  protected void validateTablesUsed(SemanticAnalyzer analyzer) throws SemanticException {\n+    // Do not allow view to be defined on temp table or other materialized view\n+    Set<String> tableAliases = analyzer.getQB().getTabAliases();\n+    for (String alias : tableAliases) {\n+      try {\n+        if (SemanticAnalyzer.DUMMY_TABLE.equals(alias)) {\n+          continue;\n+        }\n+        Table table = analyzer.getTableObjectByName(analyzer.getQB().getTabNameForAlias(alias));\n+        if (table.isTemporary()) {\n+          throw new SemanticException(\"View definition references temporary table \" + alias);\n+        }\n+        if (table.isMaterializedView()) {\n+          throw new SemanticException(\"View definition references materialized view \" + alias);\n+        }\n+      } catch (HiveException ex) {\n+        throw new SemanticException(ex);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a1a52f88c8d088e74066864e0e98a49b6dbd36"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzOTY5MA==", "bodyText": "Again. this SemanticException will be double-wrapped", "url": "https://github.com/apache/hive/pull/1125#discussion_r452239690", "createdAt": "2020-07-09T14:00:32Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/create/AbstractCreateViewAnalyzer.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.view.create;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n+import org.apache.hadoop.hive.ql.QueryState;\n+import org.apache.hadoop.hive.ql.exec.TableScanOperator;\n+import org.apache.hadoop.hive.ql.hooks.ReadEntity;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.parse.ASTNode;\n+import org.apache.hadoop.hive.ql.parse.BaseSemanticAnalyzer;\n+import org.apache.hadoop.hive.ql.parse.SemanticAnalyzer;\n+import org.apache.hadoop.hive.ql.parse.SemanticAnalyzerFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+\n+/**\n+ * Abstract ancestor of analyzers that can create a view.\n+ */\n+abstract class AbstractCreateViewAnalyzer extends BaseSemanticAnalyzer {\n+  AbstractCreateViewAnalyzer(QueryState queryState) throws SemanticException {\n+    super(queryState);\n+  }\n+\n+  protected List<FieldSchema> schema;\n+\n+  @Override\n+  public List<FieldSchema> getResultSchema() {\n+    return schema;\n+  }\n+\n+  protected SemanticAnalyzer analyzeQuery(ASTNode select, String fqViewName) throws SemanticException {\n+    QueryState innerQueryState = new QueryState.Builder().withHiveConf(conf).build();\n+    innerQueryState.getConf().setBoolVar(HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES, false);\n+\n+    SemanticAnalyzer analyzer = (SemanticAnalyzer) SemanticAnalyzerFactory.get(innerQueryState, select);\n+    ctx.setEnableUnparse(true);\n+    analyzer.forViewCreation(fqViewName);\n+    analyzer.analyze(select, ctx);\n+    analyzer.executeUnparseTranlations();\n+\n+    queryState.setLineageState(innerQueryState.getLineageState());\n+    queryState.getLineageState().mapDirToOp(new Path(fqViewName), analyzer.getSinkOp());\n+\n+    addInputs(analyzer);\n+\n+    return analyzer;\n+  }\n+\n+  private void addInputs(SemanticAnalyzer analyzer) {\n+    inputs.addAll(analyzer.getInputs());\n+    for (Map.Entry<String, TableScanOperator> entry : analyzer.getTopOps().entrySet()) {\n+      String alias = entry.getKey();\n+      TableScanOperator topOp = entry.getValue();\n+      ReadEntity parentViewInfo = PlanUtils.getParentViewInfo(alias, analyzer.getViewAliasToInput());\n+\n+      // Adds tables only for create view (PPD filter can be appended by outer query)\n+      Table table = topOp.getConf().getTableMetadata();\n+      PlanUtils.addInput(inputs, new ReadEntity(table, parentViewInfo));\n+    }\n+  }\n+\n+  protected void validateTablesUsed(SemanticAnalyzer analyzer) throws SemanticException {\n+    // Do not allow view to be defined on temp table or other materialized view\n+    Set<String> tableAliases = analyzer.getQB().getTabAliases();\n+    for (String alias : tableAliases) {\n+      try {\n+        if (SemanticAnalyzer.DUMMY_TABLE.equals(alias)) {\n+          continue;\n+        }\n+        Table table = analyzer.getTableObjectByName(analyzer.getQB().getTabNameForAlias(alias));\n+        if (table.isTemporary()) {\n+          throw new SemanticException(\"View definition references temporary table \" + alias);\n+        }\n+        if (table.isMaterializedView()) {\n+          throw new SemanticException(\"View definition references materialized view \" + alias);\n+        }\n+      } catch (HiveException ex) {\n+        throw new SemanticException(ex);\n+      }\n+    }\n+  }\n+\n+  protected void validateReplaceWithPartitions(String viewName, Table oldView, List<FieldSchema> partitionColumns)\n+      throws SemanticException {\n+    String partitionViewErrorMsg = \"The following view has partition, it could not be replaced: \" + viewName;\n+    try {\n+      if (!oldView.getPartCols().isEmpty() && !db.getPartitions(oldView).isEmpty() &&\n+          !oldView.getPartCols().equals(partitionColumns)) {\n+        throw new SemanticException(ErrorMsg.REPLACE_VIEW_WITH_PARTITION.getMsg(partitionViewErrorMsg));\n+      }\n+    } catch (HiveException e) {\n+      throw new SemanticException(ErrorMsg.REPLACE_VIEW_WITH_PARTITION.getMsg(partitionViewErrorMsg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a1a52f88c8d088e74066864e0e98a49b6dbd36"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDgyNQ==", "bodyText": "Catching your own exception", "url": "https://github.com/apache/hive/pull/1125#discussion_r452240825", "createdAt": "2020-07-09T14:02:01Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/view/create/AlterViewAsAnalyzer.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.ddl.view.create;\n+\n+import java.util.ArrayList;\n+\n+import org.apache.hadoop.hive.common.TableName;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n+import org.apache.hadoop.hive.ql.QueryState;\n+import org.apache.hadoop.hive.ql.ddl.DDLWork;\n+import org.apache.hadoop.hive.ql.ddl.DDLSemanticAnalyzerFactory.DDLType;\n+import org.apache.hadoop.hive.ql.ddl.DDLUtils;\n+import org.apache.hadoop.hive.ql.exec.TaskFactory;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.parse.ASTNode;\n+import org.apache.hadoop.hive.ql.parse.HiveParser;\n+import org.apache.hadoop.hive.ql.parse.ParseUtils;\n+import org.apache.hadoop.hive.ql.parse.SemanticAnalyzer;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+\n+/**\n+ * Analyzer for alter view ... as commands.\n+ */\n+@DDLType(types = HiveParser.TOK_ALTERVIEW_AS)\n+public class AlterViewAsAnalyzer extends AbstractCreateViewAnalyzer {\n+  public AlterViewAsAnalyzer(QueryState queryState) throws SemanticException {\n+    super(queryState);\n+  }\n+\n+  @Override\n+  public void analyzeInternal(ASTNode root) throws SemanticException {\n+    TableName viewName = getQualifiedTableName((ASTNode) root.getChild(0));\n+    String fqViewName = viewName.getNotEmptyDbTable();\n+    LOG.info(\"Altering the query of view \" + fqViewName + \" position=\" + root.getCharPositionInLine());\n+\n+    ASTNode select = (ASTNode) root.getChild(1).getChild(0);\n+\n+    String originalText = ctx.getTokenRewriteStream().toString(select.getTokenStartIndex(), select.getTokenStopIndex());\n+\n+    SemanticAnalyzer analyzer = analyzeQuery(select, fqViewName);\n+\n+    schema = new ArrayList<FieldSchema>(analyzer.getResultSchema());\n+    ParseUtils.validateColumnNameUniqueness(\n+        analyzer.getOriginalResultSchema() == null ? schema : analyzer.getOriginalResultSchema());\n+\n+    String expandedText = ctx.getTokenRewriteStream().toString(select.getTokenStartIndex(), select.getTokenStopIndex());\n+\n+    AlterViewAsDesc desc = new AlterViewAsDesc(fqViewName, schema, originalText, expandedText);\n+    validateCreateView(desc, analyzer);\n+\n+    rootTasks.add(TaskFactory.get(new DDLWork(getInputs(), getOutputs(), desc)));\n+    DDLUtils.addDbAndTableToOutputs(getDatabase(viewName.getDb()), viewName, TableType.VIRTUAL_VIEW, false,\n+        null, outputs);\n+  }\n+\n+  private void validateCreateView(AlterViewAsDesc desc, SemanticAnalyzer analyzer) throws SemanticException {\n+    try {\n+      validateTablesUsed(analyzer);\n+\n+      //replace view\n+      Table oldView = getTable(desc.getViewName(), false);\n+      if (oldView == null) {\n+        String viewNotExistErrorMsg = \"The following view does not exist: \" + desc.getViewName();\n+        throw new SemanticException(\n+            ErrorMsg.ALTER_VIEW_AS_SELECT_NOT_EXIST.getMsg(viewNotExistErrorMsg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a1a52f88c8d088e74066864e0e98a49b6dbd36"}, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5a1a52f88c8d088e74066864e0e98a49b6dbd36", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/d5a1a52f88c8d088e74066864e0e98a49b6dbd36", "committedDate": "2020-07-02T21:48:04Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}, "afterCommit": {"oid": "703ddab75c18fc08ad102aec508fe5c8058d16d8", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/703ddab75c18fc08ad102aec508fe5c8058d16d8", "committedDate": "2020-07-09T15:47:16Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "703ddab75c18fc08ad102aec508fe5c8058d16d8", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/703ddab75c18fc08ad102aec508fe5c8058d16d8", "committedDate": "2020-07-09T15:47:16Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}, "afterCommit": {"oid": "b5ec6745f100016e5eb5851622b15a1f7764b2f8", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/b5ec6745f100016e5eb5851622b15a1f7764b2f8", "committedDate": "2020-07-09T21:04:01Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "515e78bf121e119352d13c289ca2ba7558d935fe", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/515e78bf121e119352d13c289ca2ba7558d935fe", "committedDate": "2020-07-10T00:21:42Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5ec6745f100016e5eb5851622b15a1f7764b2f8", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/b5ec6745f100016e5eb5851622b15a1f7764b2f8", "committedDate": "2020-07-09T21:04:01Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}, "afterCommit": {"oid": "515e78bf121e119352d13c289ca2ba7558d935fe", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/515e78bf121e119352d13c289ca2ba7558d935fe", "committedDate": "2020-07-10T00:21:42Z", "message": "HIVE-23244 Extract Create View analyzer from SemanticAnalyzer (Miklos Gergely, reviewed by Jesus Camacho Rodriguez)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTMzMDky", "url": "https://github.com/apache/hive/pull/1125#pullrequestreview-448933092", "createdAt": "2020-07-15T13:06:50Z", "commit": {"oid": "515e78bf121e119352d13c289ca2ba7558d935fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3631, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}