{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0OTQ1MTk5", "number": 1811, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMToyODo0NFrOFIzp2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTo1MToxM1rOFSxhrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzc5MjI0OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMToyODo0NFrOIK8Jfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNToyNDo0N1rOIacTIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MjE0Mw==", "bodyText": "Consider changing method name.", "url": "https://github.com/apache/hive/pull/1811#discussion_r548342143", "createdAt": "2020-12-24T01:28:44Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +769,134 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        result.add((ExprNodeColumnDesc) exprNodeDesc);\n+        return;\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          extractColumnExprNodes(child, result);\n+        }\n+      }\n+    }\n+\n+    private ExprNodeDesc replaceColumnExprNodes(ExprNodeDesc exprNodeDesc, Map<ExprNodeDesc, ExprNodeDesc> replaceMap) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        return replaceMap.getOrDefault(exprNodeDesc, exprNodeDesc);\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        ExprNodeGenericFuncDesc exprNodeGenericFuncDesc = (ExprNodeGenericFuncDesc) exprNodeDesc.clone();\n+        List<ExprNodeDesc> replacedChildren = new ArrayList<>(exprNodeDesc.getChildren().size());\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          replacedChildren.add(replaceColumnExprNodes(child, replaceMap));\n+        }\n+        exprNodeGenericFuncDesc.setChildren(replacedChildren);\n+        return exprNodeGenericFuncDesc;\n+      }\n+\n+      return exprNodeDesc;\n+    }\n+\n+    private Map<ExprNodeDesc, String> walk(Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34294e822e51c707186a8ad8d07e8dfafd77b9cf"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5NzUzNg==", "bodyText": "changed to searchForEqualities", "url": "https://github.com/apache/hive/pull/1811#discussion_r564597536", "createdAt": "2021-01-26T15:24:47Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +769,134 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        result.add((ExprNodeColumnDesc) exprNodeDesc);\n+        return;\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          extractColumnExprNodes(child, result);\n+        }\n+      }\n+    }\n+\n+    private ExprNodeDesc replaceColumnExprNodes(ExprNodeDesc exprNodeDesc, Map<ExprNodeDesc, ExprNodeDesc> replaceMap) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        return replaceMap.getOrDefault(exprNodeDesc, exprNodeDesc);\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        ExprNodeGenericFuncDesc exprNodeGenericFuncDesc = (ExprNodeGenericFuncDesc) exprNodeDesc.clone();\n+        List<ExprNodeDesc> replacedChildren = new ArrayList<>(exprNodeDesc.getChildren().size());\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          replacedChildren.add(replaceColumnExprNodes(child, replaceMap));\n+        }\n+        exprNodeGenericFuncDesc.setChildren(replacedChildren);\n+        return exprNodeGenericFuncDesc;\n+      }\n+\n+      return exprNodeDesc;\n+    }\n+\n+    private Map<ExprNodeDesc, String> walk(Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MjE0Mw=="}, "originalCommit": {"oid": "34294e822e51c707186a8ad8d07e8dfafd77b9cf"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzgwODE1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTo0MDoyNFrOIK8SQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTo0MDoyNFrOIK8SQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NDM4Nw==", "bodyText": "When would this be null? Can we add a comment?", "url": "https://github.com/apache/hive/pull/1811#discussion_r548344387", "createdAt": "2020-12-24T01:40:24Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +769,134 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        result.add((ExprNodeColumnDesc) exprNodeDesc);\n+        return;\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          extractColumnExprNodes(child, result);\n+        }\n+      }\n+    }\n+\n+    private ExprNodeDesc replaceColumnExprNodes(ExprNodeDesc exprNodeDesc, Map<ExprNodeDesc, ExprNodeDesc> replaceMap) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        return replaceMap.getOrDefault(exprNodeDesc, exprNodeDesc);\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        ExprNodeGenericFuncDesc exprNodeGenericFuncDesc = (ExprNodeGenericFuncDesc) exprNodeDesc.clone();\n+        List<ExprNodeDesc> replacedChildren = new ArrayList<>(exprNodeDesc.getChildren().size());\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          replacedChildren.add(replaceColumnExprNodes(child, replaceMap));\n+        }\n+        exprNodeGenericFuncDesc.setChildren(replacedChildren);\n+        return exprNodeGenericFuncDesc;\n+      }\n+\n+      return exprNodeDesc;\n+    }\n+\n+    private Map<ExprNodeDesc, String> walk(Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      Map<ExprNodeDesc, String> equalities;\n+      if (operator instanceof CommonJoinOperator) {\n+        equalities = processJoinEq((CommonJoinOperator<?>)operator, exprNodeDescList);\n+      } else {\n+        equalities = processDefaultEq(operator, exprNodeDescList);\n+      }\n+      return equalities;\n+    }\n+\n+    private Map<ExprNodeDesc, String> processJoinEq(\n+            CommonJoinOperator<?> join, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      if (exprNodeDescList.isEmpty()) {\n+        return Collections.emptyMap();\n+      }\n+      Map<ExprNodeDesc, String> equalities = new HashMap<>();\n+      for (ExprNodeColumnDesc exprNodeDesc : exprNodeDescList) {\n+        ExprNodeDesc mappedColExpr = join.getColumnExprMap().get(exprNodeDesc.getColumn());\n+        if (!(mappedColExpr instanceof ExprNodeColumnDesc)) {\n+          continue;\n+        }\n+        String mappedColName = ((ExprNodeColumnDesc)mappedColExpr).getColumn();\n+        int sideIndex = join.getConf().getReversedExprs().get(exprNodeDesc.getColumn());\n+        Operator<?> parentRSOperator = join.getParentOperators().get(sideIndex);\n+        for (int i = 0; i < join.getConf().getJoinKeys()[sideIndex].length; ++i) {\n+          ExprNodeDesc keyExpr = join.getConf().getJoinKeys()[sideIndex][i];\n+          if (!keyExpr.isSame(parentRSOperator.getColumnExprMap().get(mappedColName))) {\n+            continue;\n+          }\n+\n+          // exprNodeDesc is join key\n+          // find the other key in the join expression\n+          Operator<?> otherParentRSOperator = join.getParentOperators().get(1 - sideIndex);\n+          for (Entry<String, ExprNodeDesc> joinMapEntry : join.getColumnExprMap().entrySet()) {\n+            if (join.getConf().getReversedExprs().get(joinMapEntry.getKey()) != 1 - sideIndex) {\n+              continue;\n+            }\n+\n+            String otherColumnName = ((ExprNodeColumnDesc) joinMapEntry.getValue()).getColumn();\n+            ExprNodeDesc mappedOtherKeyExpr = otherParentRSOperator.getColumnExprMap().get(otherColumnName);\n+            ExprNodeDesc otherKeyExpr = join.getConf().getJoinKeys()[1 - sideIndex][i];\n+            if (mappedOtherKeyExpr != null && otherKeyExpr.isSame(mappedOtherKeyExpr)) {\n+              equalities.put(exprNodeDesc, joinMapEntry.getKey());\n+            }\n+          }\n+        }\n+      }\n+\n+      for (Operator<?> parent : join.getParentOperators()) {\n+        equalities.putAll(walk(parent, exprNodeDescList));\n+      }\n+\n+      return equalities;\n+    }\n+\n+    private Map<ExprNodeDesc, String> processDefaultEq(\n+            Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      if (exprNodeDescList.isEmpty()) {\n+        return Collections.emptyMap();\n+      }\n+\n+      Map<String, ExprNodeDesc> columnExprMap = operator.getColumnExprMap();\n+      if (columnExprMap == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34294e822e51c707186a8ad8d07e8dfafd77b9cf"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MTg2NTU4OnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODowMjo1M1rOIZzqgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNToyNTowNFrOIacUGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzMTc3Nw==", "bodyText": "\"Whether we should traverse the join branches to discover transitive propagation opportunities over equijoin conditions. \\n\" +\n\"Requires hive.ppd.recognizetransivity to be set to true.\"", "url": "https://github.com/apache/hive/pull/1811#discussion_r563931777", "createdAt": "2021-01-25T18:02:53Z", "author": {"login": "jcamachor"}, "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -2461,6 +2461,10 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n         \"Whether to enable predicate pushdown through windowing\"),\n     HIVEPPDRECOGNIZETRANSITIVITY(\"hive.ppd.recognizetransivity\", true,\n         \"Whether to transitively replicate predicate filters over equijoin conditions.\"),\n+    HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES(\"hive.ppd.recognize.column.equalities\", true,\n+        \"When hive.ppd.recognizetransivity is true Whether traverse join branches to discover equal columns based\" +\n+                \" on equijoin keys and try to substitute equal columns to predicates \" +\n+                \"and push down to the other branch.\"),\n     HIVEPPDREMOVEDUPLICATEFILTERS(\"hive.ppd.remove.duplicatefilters\", true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5Nzc4Ng==", "bodyText": "Replaced", "url": "https://github.com/apache/hive/pull/1811#discussion_r564597786", "createdAt": "2021-01-26T15:25:04Z", "author": {"login": "kasakrisz"}, "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -2461,6 +2461,10 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n         \"Whether to enable predicate pushdown through windowing\"),\n     HIVEPPDRECOGNIZETRANSITIVITY(\"hive.ppd.recognizetransivity\", true,\n         \"Whether to transitively replicate predicate filters over equijoin conditions.\"),\n+    HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES(\"hive.ppd.recognize.column.equalities\", true,\n+        \"When hive.ppd.recognizetransivity is true Whether traverse join branches to discover equal columns based\" +\n+                \" on equijoin keys and try to substitute equal columns to predicates \" +\n+                \"and push down to the other branch.\"),\n     HIVEPPDREMOVEDUPLICATEFILTERS(\"hive.ppd.remove.duplicatefilters\", true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzMTc3Nw=="}, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MjEzMTUzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTowNzowNVrOIZ2NsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNToyNToyMVrOIacU-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzU1Mg==", "bodyText": "Extract the property value into a variable before entering in the loop (~L700).", "url": "https://github.com/apache/hive/pull/1811#discussion_r563973552", "createdAt": "2021-01-25T19:07:05Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODAxMA==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598010", "createdAt": "2021-01-26T15:25:21Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzU1Mg=="}, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MjEzMzk4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTowNzozNlrOIZ2PGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNToyNToyOVrOIacVcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzkxNQ==", "bodyText": "Extract the property value into a variable before entering in the loop (~L700).", "url": "https://github.com/apache/hive/pull/1811#discussion_r563973915", "createdAt": "2021-01-25T19:07:36Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),\n+                  HiveConf.ConfVars.HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES)) {\n+            columnsInPredicates = owi.getColumnsInPredicates().get(source);\n+            if (columnsInPredicates == null) {\n+              columnsInPredicates = collectColumnsInPredicates(entry.getValue());\n+              owi.getColumnsInPredicates().put(source, columnsInPredicates);\n+            }\n+          }\n+\n           for (ExprNodeDesc predicate : entry.getValue()) {\n             ExprNodeDesc backtrack = ExprNodeDescUtils.backtrack(predicate, join, source);\n             if (backtrack == null) {\n               continue;\n             }\n             ExprNodeDesc replaced = ExprNodeDescUtils.replace(backtrack, sourceKeys, targetKeys);\n             if (replaced == null) {\n-              continue;\n+              if (!HiveConf.getBoolVar(owi.getParseContext().getConf(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODEyOQ==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598129", "createdAt": "2021-01-26T15:25:29Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),\n+                  HiveConf.ConfVars.HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES)) {\n+            columnsInPredicates = owi.getColumnsInPredicates().get(source);\n+            if (columnsInPredicates == null) {\n+              columnsInPredicates = collectColumnsInPredicates(entry.getValue());\n+              owi.getColumnsInPredicates().put(source, columnsInPredicates);\n+            }\n+          }\n+\n           for (ExprNodeDesc predicate : entry.getValue()) {\n             ExprNodeDesc backtrack = ExprNodeDescUtils.backtrack(predicate, join, source);\n             if (backtrack == null) {\n               continue;\n             }\n             ExprNodeDesc replaced = ExprNodeDescUtils.replace(backtrack, sourceKeys, targetKeys);\n             if (replaced == null) {\n-              continue;\n+              if (!HiveConf.getBoolVar(owi.getParseContext().getConf(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzkxNQ=="}, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MjIyNjQyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTozMToxNlrOIZ3H2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNToyNjowMlrOIacXvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4ODQ0Mg==", "bodyText": "Can we add a few high level comments to these new private methods describing what they do?", "url": "https://github.com/apache/hive/pull/1811#discussion_r563988442", "createdAt": "2021-01-25T19:31:16Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +763,166 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private Set<ExprNodeColumnDesc> collectColumnsInPredicates(List<ExprNodeDesc> predicates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODcxNw==", "bodyText": "added javadoc", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598717", "createdAt": "2021-01-26T15:26:02Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +763,166 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private Set<ExprNodeColumnDesc> collectColumnsInPredicates(List<ExprNodeDesc> predicates) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4ODQ0Mg=="}, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MjMwMTI2OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTo1MToxM1rOIZ33lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNToyNTo0OFrOIacW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwMDY2Mg==", "bodyText": "Can we add comments about these data structures and what they will hold?", "url": "https://github.com/apache/hive/pull/1811#discussion_r564000662", "createdAt": "2021-01-25T19:51:13Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java", "diffHunk": "@@ -39,11 +43,15 @@\n     opToPushdownPredMap;\n   private final ParseContext pGraphContext;\n   private final List<FilterOperator> candidateFilterOps;\n+  private final Map<Operator<?>, Set<ExprNodeColumnDesc>> columnsInPredicates;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODQ4MA==", "bodyText": "Added comments", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598480", "createdAt": "2021-01-26T15:25:48Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java", "diffHunk": "@@ -39,11 +43,15 @@\n     opToPushdownPredMap;\n   private final ParseContext pGraphContext;\n   private final List<FilterOperator> candidateFilterOps;\n+  private final Map<Operator<?>, Set<ExprNodeColumnDesc>> columnsInPredicates;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwMDY2Mg=="}, "originalCommit": {"oid": "02699b101543f17349dd98889018035bc21d7ac9"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 198, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}