{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMTIzNDgz", "number": 1085, "title": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files", "bodyText": "Creating the PR to fix the multi base-files seems in the table directory after Insert overwrite operations. As a fix, I will be checking doing changes in the initiator thread where it will check for the compaction eligibility.\n\nInitiator thread will check for the if there are no delta and obsolete files containing the base then it will put the table in compaction queue.\nTxnStore will be having one more method to request cleanup.", "createdAt": "2020-06-09T23:53:23Z", "url": "https://github.com/apache/hive/pull/1085", "merged": true, "mergeCommit": {"oid": "31ee14644bf6105360d6266baa8c6c8060d38ea3"}, "closed": true, "closedAt": "2020-06-30T07:26:14Z", "author": {"login": "rajkrrsingh"}, "timelineItems": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABY648gZgH2gAyNDMyMTIzNDgzOjkzNTZlODgwNmYwYzJiZDVhNTkyNTg0MDhkNGE5MWM2YzRhYjc2NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcup4FfAFqTQzNzI1MTQ2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9356e8806f0c2bd5a59258408d4a91c6c4ab7663", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/9356e8806f0c2bd5a59258408d4a91c6c4ab7663", "committedDate": "2018-05-29T23:29:51Z", "message": "Merge pull request #1 from apache/master\n\nsyncing forked repo using upstream - 05-29-2018"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff83095bba9aceaf83dcc3dcea011f3e9f15d2fc", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/ff83095bba9aceaf83dcc3dcea011f3e9f15d2fc", "committedDate": "2018-11-10T04:16:58Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ab4541e40a4755211131562ea9ac94ec013845", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/e7ab4541e40a4755211131562ea9ac94ec013845", "committedDate": "2018-11-12T21:03:19Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b87f4af7d714f907e4dcd503c09228048b578ef2", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/b87f4af7d714f907e4dcd503c09228048b578ef2", "committedDate": "2019-02-28T05:53:28Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0bf01999555fd45e427c96e8f32978470385a53", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/d0bf01999555fd45e427c96e8f32978470385a53", "committedDate": "2019-03-04T19:15:20Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c3c26a201be3ebaff9c5eaf257b255902552f84", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/2c3c26a201be3ebaff9c5eaf257b255902552f84", "committedDate": "2019-03-24T21:58:36Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c26b2f15d9f95c5c22f3dd2bd57a68fcc193321d", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/c26b2f15d9f95c5c22f3dd2bd57a68fcc193321d", "committedDate": "2019-03-28T22:33:16Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6131dedbb788556dc761285c94e29abc6ee49d3", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/a6131dedbb788556dc761285c94e29abc6ee49d3", "committedDate": "2019-03-29T15:24:42Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f83d0d080c7fff9b2367822b2a4f947a528ac44", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/3f83d0d080c7fff9b2367822b2a4f947a528ac44", "committedDate": "2019-04-01T18:15:27Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2930b607b7a6389e527c2a42beaa277eea712551", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/2930b607b7a6389e527c2a42beaa277eea712551", "committedDate": "2019-04-02T17:33:41Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28de80dc6595b23820b975006eef90f6f99271cf", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/28de80dc6595b23820b975006eef90f6f99271cf", "committedDate": "2019-04-04T00:59:19Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c469894076445c06621847890db0df0788a4b5", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/d6c469894076445c06621847890db0df0788a4b5", "committedDate": "2019-04-17T23:00:55Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10df87f2269ebf0b311cd4f5a54144a1d1f36e62", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/10df87f2269ebf0b311cd4f5a54144a1d1f36e62", "committedDate": "2019-05-14T22:56:01Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d696e87a89ad9b8b1bdc8dca7c2477c45b1135f3", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/d696e87a89ad9b8b1bdc8dca7c2477c45b1135f3", "committedDate": "2019-05-30T20:51:46Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1d161d08d735e83c536c98047890c3a9ac0627f", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/e1d161d08d735e83c536c98047890c3a9ac0627f", "committedDate": "2019-06-07T20:40:46Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd00d0130ebb0cb17e4ef4191345929c8a6aa5e6", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/dd00d0130ebb0cb17e4ef4191345929c8a6aa5e6", "committedDate": "2019-06-08T23:09:32Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c487a830fa5e8f2dda36c4b35fbf6b959e1dae5", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/0c487a830fa5e8f2dda36c4b35fbf6b959e1dae5", "committedDate": "2019-06-27T05:54:25Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf73160ddb17e14f00270f16f59bd58726fea7f9", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/cf73160ddb17e14f00270f16f59bd58726fea7f9", "committedDate": "2019-07-01T17:34:58Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2966320f1460598d96ad072d8b4ecd18826d64c6", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/2966320f1460598d96ad072d8b4ecd18826d64c6", "committedDate": "2019-07-03T00:08:49Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b229e0638c1327ae000edaa6708dbe3ff3c60e", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/c8b229e0638c1327ae000edaa6708dbe3ff3c60e", "committedDate": "2019-07-07T21:42:35Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dc24803128fe0d7416810241b900e77f249aaa4", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/5dc24803128fe0d7416810241b900e77f249aaa4", "committedDate": "2019-07-08T17:59:23Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "452a15ea3bcf0cc3b13caa3dd5bf290f5efa70b3", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/452a15ea3bcf0cc3b13caa3dd5bf290f5efa70b3", "committedDate": "2019-07-09T04:23:15Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03021f28579f46273c6bb9e14cb0d8e2edf94b2b", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/03021f28579f46273c6bb9e14cb0d8e2edf94b2b", "committedDate": "2019-07-10T22:23:33Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a0ac53b9fdf5a4928959e5885ab3407d924c36b", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/4a0ac53b9fdf5a4928959e5885ab3407d924c36b", "committedDate": "2019-07-26T04:40:47Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a5d230377c412db74f51b06f069d886ba02c0a", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/b8a5d230377c412db74f51b06f069d886ba02c0a", "committedDate": "2019-07-31T23:08:43Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa61164c1242e6f91101ac9e3ba2cfe137de46e", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/eaa61164c1242e6f91101ac9e3ba2cfe137de46e", "committedDate": "2019-08-02T22:51:26Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90630fd43e31962e6c0a1433ee6f1bf75ef98a4", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/f90630fd43e31962e6c0a1433ee6f1bf75ef98a4", "committedDate": "2019-08-15T22:50:26Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cec5671a408c78144ef1e716147273655b1ea9b", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/0cec5671a408c78144ef1e716147273655b1ea9b", "committedDate": "2019-08-22T19:46:47Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac29032cdc8069f1f47a9369aa91f5b6ff82279f", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/ac29032cdc8069f1f47a9369aa91f5b6ff82279f", "committedDate": "2019-08-26T18:39:15Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b958f50ba094a7fee696b88b85c89886efa6a8d", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/0b958f50ba094a7fee696b88b85c89886efa6a8d", "committedDate": "2019-09-16T19:15:34Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "094ea53742319da3c6a3fe976e2e6aa330c9e879", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/094ea53742319da3c6a3fe976e2e6aa330c9e879", "committedDate": "2019-10-07T19:10:50Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e231fbe8766fa4bceb60ad355bb7bba747f8e6c0", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/e231fbe8766fa4bceb60ad355bb7bba747f8e6c0", "committedDate": "2019-10-16T22:04:06Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3870423ec0fbe0659862edc826425492410f65", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/fe3870423ec0fbe0659862edc826425492410f65", "committedDate": "2019-10-23T22:13:53Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "519eb174c502740f468f45d8a985d500da2e4808", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/519eb174c502740f468f45d8a985d500da2e4808", "committedDate": "2019-11-06T21:18:52Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f073eb005fd49e657a4fea7afc10c52836021ba5", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/f073eb005fd49e657a4fea7afc10c52836021ba5", "committedDate": "2019-11-21T00:41:56Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff0fc6f73e27a5fc860cc377aeae17e4d32cef2", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/fff0fc6f73e27a5fc860cc377aeae17e4d32cef2", "committedDate": "2019-12-11T23:16:50Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00981a4be904eed888d342fd831f8c228fc0f1f4", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/00981a4be904eed888d342fd831f8c228fc0f1f4", "committedDate": "2020-01-09T19:47:53Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81bf0923138150b32a1ddbea7152e9a986c6dc21", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/81bf0923138150b32a1ddbea7152e9a986c6dc21", "committedDate": "2020-01-22T21:50:33Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a94c8ce7392268eacb8e05367a9ed5f9b0e5a81", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/1a94c8ce7392268eacb8e05367a9ed5f9b0e5a81", "committedDate": "2020-01-23T22:22:17Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d433ba6184ca3e21c7a7e3be57ec337f4cb64ebf", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/d433ba6184ca3e21c7a7e3be57ec337f4cb64ebf", "committedDate": "2020-02-08T02:14:27Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f63c809f63b01bc9048df72a928015cf757859b3", "author": {"user": null}, "url": "https://github.com/apache/hive/commit/f63c809f63b01bc9048df72a928015cf757859b3", "committedDate": "2020-02-14T17:06:01Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b55f884342f2679f0dad73be5777067aa7a4c20e", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/b55f884342f2679f0dad73be5777067aa7a4c20e", "committedDate": "2020-05-18T23:55:34Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dca013df443e7fca07c6240d1bb667f16f5eb36", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/0dca013df443e7fca07c6240d1bb667f16f5eb36", "committedDate": "2020-05-31T05:20:09Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34eb94e9fd1d8230afdbde5d1624a155270a320a", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/34eb94e9fd1d8230afdbde5d1624a155270a320a", "committedDate": "2020-06-02T03:22:34Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11427ad7d9d7ac501b31d343c188ce80d852971", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/f11427ad7d9d7ac501b31d343c188ce80d852971", "committedDate": "2020-06-08T21:29:14Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/91ad99ab38ec5149350a997c0b0b3beb66b1f922", "committedDate": "2020-06-09T23:42:56Z", "message": "HIVE-22255: Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDc5NTU1", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429079555", "createdAt": "2020-06-11T16:21:40Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15431ae0cf6959adb166048be29989b39e82a4ba", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/15431ae0cf6959adb166048be29989b39e82a4ba", "committedDate": "2020-06-11T21:14:02Z", "message": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjI1OTk5", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429625999", "createdAt": "2020-06-12T10:16:45Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxNjo0NVrOGi-xVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxNjo0NVrOGi-xVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMzIwNg==", "bodyText": "Why do we need this?", "url": "https://github.com/apache/hive/pull/1085#discussion_r439333206", "createdAt": "2020-06-12T10:16:45Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java", "diffHunk": "@@ -282,6 +282,7 @@ private CompactionType checkForCompaction(final CompactionInfo ci,\n     }\n \n     if (runJobAsSelf(runAs)) {\n+      ci.runAs = runAs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjMwNDE0", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429630414", "createdAt": "2020-06-12T10:24:19Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNDoxOVrOGi-94A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNDoxOVrOGi-94A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzNjQxNg==", "bodyText": "Maybe use findAny() instead of count()?", "url": "https://github.com/apache/hive/pull/1085#discussion_r439336416", "createdAt": "2020-06-12T10:24:19Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java", "diffHunk": "@@ -353,6 +354,16 @@ private CompactionType determineCompactionType(CompactionInfo ci, ValidWriteIdLi\n           HiveConf.getFloatVar(conf, HiveConf.ConfVars.HIVE_COMPACTOR_DELTA_PCT_THRESHOLD) :\n           Float.parseFloat(deltaPctProp);\n       boolean bigEnough =   (float)deltaSize/(float)baseSize > deltaPctThreshold;\n+      boolean multiBase = dir.getObsolete().stream()\n+              .filter(path -> path.getName().startsWith(AcidUtils.BASE_PREFIX)).count() >= 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjMxMzU3", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429631357", "createdAt": "2020-06-12T10:25:57Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNTo1N1rOGi_Ayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNTo1N1rOGi_Ayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzNzE2Mg==", "bodyText": "Unnecessary parenthesis and also I think dir.getObsolete().size() check is not needed, since multiBase is true", "url": "https://github.com/apache/hive/pull/1085#discussion_r439337162", "createdAt": "2020-06-12T10:25:57Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java", "diffHunk": "@@ -353,6 +354,16 @@ private CompactionType determineCompactionType(CompactionInfo ci, ValidWriteIdLi\n           HiveConf.getFloatVar(conf, HiveConf.ConfVars.HIVE_COMPACTOR_DELTA_PCT_THRESHOLD) :\n           Float.parseFloat(deltaPctProp);\n       boolean bigEnough =   (float)deltaSize/(float)baseSize > deltaPctThreshold;\n+      boolean multiBase = dir.getObsolete().stream()\n+              .filter(path -> path.getName().startsWith(AcidUtils.BASE_PREFIX)).count() >= 1;\n+      if ((deltaSize == 0  && dir.getObsolete().size() > 0) && multiBase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjM1MzYw", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429635360", "createdAt": "2020-06-12T10:32:54Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozMjo1NVrOGi_L0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozMjo1NVrOGi_L0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzOTk4NQ==", "bodyText": "Meybe we should move this select out to a different method, since this is the copy of the one used in compact().\nAlso I would add state cleaning as well. We do not want 2 cleaners running parallel", "url": "https://github.com/apache/hive/pull/1085#discussion_r439339985", "createdAt": "2020-06-12T10:32:55Z", "author": {"login": "pvary"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5363,6 +5363,121 @@ private void acquireTxnLock(Statement stmt, boolean shared) throws SQLException,\n     LOG.debug(\"TXN lock locked by {} in mode {}\", quoteString(TxnHandler.hostname), shared);\n   }\n \n+\n+  @Override\n+  @RetrySemantics.Idempotent\n+  public void requestCleanup(CompactionInfo ci) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      PreparedStatement pst = null;\n+      TxnStore.MutexAPI.LockHandle handle = null;\n+      try {\n+        lockInternal();\n+        /**\n+         * MUTEX_KEY.CompactionScheduler lock ensures that there is only 1 entry in\n+         * Initiated/Working state for any resource.  This ensures that we don't run concurrent\n+         * compactions for any resource.\n+         */\n+        handle = getMutexAPI().acquireLock(MUTEX_KEY.CompactionScheduler.name());\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+\n+        long id = generateCompactionQueueId(stmt);\n+\n+        List<String> params = new ArrayList<>();\n+        StringBuilder sb = new StringBuilder(\"select cq_id, cq_state from COMPACTION_QUEUE where\").\n+                append(\" cq_state IN(\").append(quoteChar(INITIATED_STATE)).\n+                append(\",\").append(quoteChar(WORKING_STATE)).\n+                append(\") AND cq_database=?\").\n+                append(\" AND cq_table=?\").append(\" AND \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjM2MDk3", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429636097", "createdAt": "2020-06-12T10:34:10Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNDoxMFrOGi_N6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNDoxMFrOGi_N6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MDUyMA==", "bodyText": "I think, we really want to ignore this, so we would like to return here.", "url": "https://github.com/apache/hive/pull/1085#discussion_r439340520", "createdAt": "2020-06-12T10:34:10Z", "author": {"login": "pvary"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5363,6 +5363,121 @@ private void acquireTxnLock(Statement stmt, boolean shared) throws SQLException,\n     LOG.debug(\"TXN lock locked by {} in mode {}\", quoteString(TxnHandler.hostname), shared);\n   }\n \n+\n+  @Override\n+  @RetrySemantics.Idempotent\n+  public void requestCleanup(CompactionInfo ci) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      PreparedStatement pst = null;\n+      TxnStore.MutexAPI.LockHandle handle = null;\n+      try {\n+        lockInternal();\n+        /**\n+         * MUTEX_KEY.CompactionScheduler lock ensures that there is only 1 entry in\n+         * Initiated/Working state for any resource.  This ensures that we don't run concurrent\n+         * compactions for any resource.\n+         */\n+        handle = getMutexAPI().acquireLock(MUTEX_KEY.CompactionScheduler.name());\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+\n+        long id = generateCompactionQueueId(stmt);\n+\n+        List<String> params = new ArrayList<>();\n+        StringBuilder sb = new StringBuilder(\"select cq_id, cq_state from COMPACTION_QUEUE where\").\n+                append(\" cq_state IN(\").append(quoteChar(INITIATED_STATE)).\n+                append(\",\").append(quoteChar(WORKING_STATE)).\n+                append(\") AND cq_database=?\").\n+                append(\" AND cq_table=?\").append(\" AND \");\n+        params.add(ci.dbname);\n+        params.add(ci.tableName);\n+        if(ci.partName == null) {\n+          sb.append(\"cq_partition is null\");\n+        } else {\n+          sb.append(\"cq_partition=?\");\n+          params.add(ci.partName);\n+        }\n+\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, sb.toString(), params);\n+        LOG.debug(\"Going to execute query <\" + sb.toString() + \">\");\n+        ResultSet rs = pst.executeQuery();\n+        if(rs.next()) {\n+          long enqueuedId = rs.getLong(1);\n+          String state = compactorStateToResponse(rs.getString(2).charAt(0));\n+          LOG.info(\"Ignoring request to clean up for \" + ci.dbname + \"/\" + ci.tableName +\n+                  \"/\" + ci.partName + \" since it is already \" + quoteString(state) +\n+                  \" with id=\" + enqueuedId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjM2MzEy", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429636312", "createdAt": "2020-06-12T10:34:32Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNDozMlrOGi_OhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNDozMlrOGi_OhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MDY3Ng==", "bodyText": "Could we do this in a try with resource construct?", "url": "https://github.com/apache/hive/pull/1085#discussion_r439340676", "createdAt": "2020-06-12T10:34:32Z", "author": {"login": "pvary"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5363,6 +5363,121 @@ private void acquireTxnLock(Statement stmt, boolean shared) throws SQLException,\n     LOG.debug(\"TXN lock locked by {} in mode {}\", quoteString(TxnHandler.hostname), shared);\n   }\n \n+\n+  @Override\n+  @RetrySemantics.Idempotent\n+  public void requestCleanup(CompactionInfo ci) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      PreparedStatement pst = null;\n+      TxnStore.MutexAPI.LockHandle handle = null;\n+      try {\n+        lockInternal();\n+        /**\n+         * MUTEX_KEY.CompactionScheduler lock ensures that there is only 1 entry in\n+         * Initiated/Working state for any resource.  This ensures that we don't run concurrent\n+         * compactions for any resource.\n+         */\n+        handle = getMutexAPI().acquireLock(MUTEX_KEY.CompactionScheduler.name());\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+\n+        long id = generateCompactionQueueId(stmt);\n+\n+        List<String> params = new ArrayList<>();\n+        StringBuilder sb = new StringBuilder(\"select cq_id, cq_state from COMPACTION_QUEUE where\").\n+                append(\" cq_state IN(\").append(quoteChar(INITIATED_STATE)).\n+                append(\",\").append(quoteChar(WORKING_STATE)).\n+                append(\") AND cq_database=?\").\n+                append(\" AND cq_table=?\").append(\" AND \");\n+        params.add(ci.dbname);\n+        params.add(ci.tableName);\n+        if(ci.partName == null) {\n+          sb.append(\"cq_partition is null\");\n+        } else {\n+          sb.append(\"cq_partition=?\");\n+          params.add(ci.partName);\n+        }\n+\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, sb.toString(), params);\n+        LOG.debug(\"Going to execute query <\" + sb.toString() + \">\");\n+        ResultSet rs = pst.executeQuery();\n+        if(rs.next()) {\n+          long enqueuedId = rs.getLong(1);\n+          String state = compactorStateToResponse(rs.getString(2).charAt(0));\n+          LOG.info(\"Ignoring request to clean up for \" + ci.dbname + \"/\" + ci.tableName +\n+                  \"/\" + ci.partName + \" since it is already \" + quoteString(state) +\n+                  \" with id=\" + enqueuedId);\n+        }\n+        close(rs);\n+        closeStmt(pst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjM2Nzkz", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429636793", "createdAt": "2020-06-12T10:35:20Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNToyMVrOGi_P3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNToyMVrOGi_P3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MTAyMg==", "bodyText": "Again this is very similar that we have in compact(), we might to create a new method for it and reuse.", "url": "https://github.com/apache/hive/pull/1085#discussion_r439341022", "createdAt": "2020-06-12T10:35:21Z", "author": {"login": "pvary"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5363,6 +5363,121 @@ private void acquireTxnLock(Statement stmt, boolean shared) throws SQLException,\n     LOG.debug(\"TXN lock locked by {} in mode {}\", quoteString(TxnHandler.hostname), shared);\n   }\n \n+\n+  @Override\n+  @RetrySemantics.Idempotent\n+  public void requestCleanup(CompactionInfo ci) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      PreparedStatement pst = null;\n+      TxnStore.MutexAPI.LockHandle handle = null;\n+      try {\n+        lockInternal();\n+        /**\n+         * MUTEX_KEY.CompactionScheduler lock ensures that there is only 1 entry in\n+         * Initiated/Working state for any resource.  This ensures that we don't run concurrent\n+         * compactions for any resource.\n+         */\n+        handle = getMutexAPI().acquireLock(MUTEX_KEY.CompactionScheduler.name());\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+\n+        long id = generateCompactionQueueId(stmt);\n+\n+        List<String> params = new ArrayList<>();\n+        StringBuilder sb = new StringBuilder(\"select cq_id, cq_state from COMPACTION_QUEUE where\").\n+                append(\" cq_state IN(\").append(quoteChar(INITIATED_STATE)).\n+                append(\",\").append(quoteChar(WORKING_STATE)).\n+                append(\") AND cq_database=?\").\n+                append(\" AND cq_table=?\").append(\" AND \");\n+        params.add(ci.dbname);\n+        params.add(ci.tableName);\n+        if(ci.partName == null) {\n+          sb.append(\"cq_partition is null\");\n+        } else {\n+          sb.append(\"cq_partition=?\");\n+          params.add(ci.partName);\n+        }\n+\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, sb.toString(), params);\n+        LOG.debug(\"Going to execute query <\" + sb.toString() + \">\");\n+        ResultSet rs = pst.executeQuery();\n+        if(rs.next()) {\n+          long enqueuedId = rs.getLong(1);\n+          String state = compactorStateToResponse(rs.getString(2).charAt(0));\n+          LOG.info(\"Ignoring request to clean up for \" + ci.dbname + \"/\" + ci.tableName +\n+                  \"/\" + ci.partName + \" since it is already \" + quoteString(state) +\n+                  \" with id=\" + enqueuedId);\n+        }\n+        close(rs);\n+        closeStmt(pst);\n+        params.clear();\n+        StringBuilder buf = new StringBuilder(\"insert into COMPACTION_QUEUE (cq_id, cq_database, \" +\n+                \"cq_table, \");\n+        String partName = ci.partName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjM3OTg2", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429637986", "createdAt": "2020-06-12T10:37:31Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNzozMVrOGi_Tfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozNzozMVrOGi_Tfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MTk1MQ==", "bodyText": "try with resource would be nice here too", "url": "https://github.com/apache/hive/pull/1085#discussion_r439341951", "createdAt": "2020-06-12T10:37:31Z", "author": {"login": "pvary"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5363,6 +5363,121 @@ private void acquireTxnLock(Statement stmt, boolean shared) throws SQLException,\n     LOG.debug(\"TXN lock locked by {} in mode {}\", quoteString(TxnHandler.hostname), shared);\n   }\n \n+\n+  @Override\n+  @RetrySemantics.Idempotent\n+  public void requestCleanup(CompactionInfo ci) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      PreparedStatement pst = null;\n+      TxnStore.MutexAPI.LockHandle handle = null;\n+      try {\n+        lockInternal();\n+        /**\n+         * MUTEX_KEY.CompactionScheduler lock ensures that there is only 1 entry in\n+         * Initiated/Working state for any resource.  This ensures that we don't run concurrent\n+         * compactions for any resource.\n+         */\n+        handle = getMutexAPI().acquireLock(MUTEX_KEY.CompactionScheduler.name());\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+\n+        long id = generateCompactionQueueId(stmt);\n+\n+        List<String> params = new ArrayList<>();\n+        StringBuilder sb = new StringBuilder(\"select cq_id, cq_state from COMPACTION_QUEUE where\").\n+                append(\" cq_state IN(\").append(quoteChar(INITIATED_STATE)).\n+                append(\",\").append(quoteChar(WORKING_STATE)).\n+                append(\") AND cq_database=?\").\n+                append(\" AND cq_table=?\").append(\" AND \");\n+        params.add(ci.dbname);\n+        params.add(ci.tableName);\n+        if(ci.partName == null) {\n+          sb.append(\"cq_partition is null\");\n+        } else {\n+          sb.append(\"cq_partition=?\");\n+          params.add(ci.partName);\n+        }\n+\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, sb.toString(), params);\n+        LOG.debug(\"Going to execute query <\" + sb.toString() + \">\");\n+        ResultSet rs = pst.executeQuery();\n+        if(rs.next()) {\n+          long enqueuedId = rs.getLong(1);\n+          String state = compactorStateToResponse(rs.getString(2).charAt(0));\n+          LOG.info(\"Ignoring request to clean up for \" + ci.dbname + \"/\" + ci.tableName +\n+                  \"/\" + ci.partName + \" since it is already \" + quoteString(state) +\n+                  \" with id=\" + enqueuedId);\n+        }\n+        close(rs);\n+        closeStmt(pst);\n+        params.clear();\n+        StringBuilder buf = new StringBuilder(\"insert into COMPACTION_QUEUE (cq_id, cq_database, \" +\n+                \"cq_table, \");\n+        String partName = ci.partName;\n+        if (partName != null) {\n+          buf.append(\"cq_partition, \");\n+        }\n+        buf.append(\"cq_state, cq_type\");\n+        if (ci.properties != null) {\n+          buf.append(\", cq_tblproperties\");\n+        }\n+        if (ci.runAs != null) {\n+          buf.append(\", cq_run_as\");\n+        }\n+        buf.append(\") values (\");\n+        buf.append(id);\n+        buf.append(\", ?\");\n+        buf.append(\", ?\");\n+        buf.append(\", \");\n+        params.add(ci.dbname);\n+        params.add(ci.tableName);\n+        if (partName != null) {\n+          buf.append(\"?, '\");\n+          params.add(partName);\n+        } else {\n+          buf.append(\"'\");\n+        }\n+        buf.append(READY_FOR_CLEANING);\n+        buf.append(\"', '\");\n+        buf.append(MAJOR_TYPE);\n+        buf.append(\"'\");\n+        if (ci.properties != null) {\n+          buf.append(\", ?\");\n+          params.add(ci.properties);\n+        }\n+        if (ci.runAs != null) {\n+          buf.append(\", ?\");\n+          params.add(ci.runAs);\n+        }\n+        buf.append(\")\");\n+        String s = buf.toString();\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, params);\n+        LOG.debug(\"Going to execute update <\" + s + \">\");\n+        pst.executeUpdate();\n+        LOG.debug(\"Going to commit\");\n+        dbConn.commit();\n+      } catch (SQLException e) {\n+        LOG.debug(\"Going to rollback\");\n+        rollbackDBConn(dbConn);\n+        checkRetryable(dbConn, e, \"requestCleanup(\" + ci + \")\");\n+        throw new MetaException(\"Unable to select from transaction database \" +\n+                StringUtils.stringifyException(e));\n+      } finally {\n+        closeStmt(pst);\n+        closeStmt(stmt);\n+        closeDbConn(dbConn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjM4NDky", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-429638492", "createdAt": "2020-06-12T10:38:24Z", "commit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozODoyNFrOGi_U9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozODoyNFrOGi_U9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MjMyNw==", "bodyText": "If there is some exception before in the finally, this unlockInternal will not be called. Isn't this a problem?", "url": "https://github.com/apache/hive/pull/1085#discussion_r439342327", "createdAt": "2020-06-12T10:38:24Z", "author": {"login": "pvary"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -5363,6 +5363,121 @@ private void acquireTxnLock(Statement stmt, boolean shared) throws SQLException,\n     LOG.debug(\"TXN lock locked by {} in mode {}\", quoteString(TxnHandler.hostname), shared);\n   }\n \n+\n+  @Override\n+  @RetrySemantics.Idempotent\n+  public void requestCleanup(CompactionInfo ci) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      PreparedStatement pst = null;\n+      TxnStore.MutexAPI.LockHandle handle = null;\n+      try {\n+        lockInternal();\n+        /**\n+         * MUTEX_KEY.CompactionScheduler lock ensures that there is only 1 entry in\n+         * Initiated/Working state for any resource.  This ensures that we don't run concurrent\n+         * compactions for any resource.\n+         */\n+        handle = getMutexAPI().acquireLock(MUTEX_KEY.CompactionScheduler.name());\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+\n+        long id = generateCompactionQueueId(stmt);\n+\n+        List<String> params = new ArrayList<>();\n+        StringBuilder sb = new StringBuilder(\"select cq_id, cq_state from COMPACTION_QUEUE where\").\n+                append(\" cq_state IN(\").append(quoteChar(INITIATED_STATE)).\n+                append(\",\").append(quoteChar(WORKING_STATE)).\n+                append(\") AND cq_database=?\").\n+                append(\" AND cq_table=?\").append(\" AND \");\n+        params.add(ci.dbname);\n+        params.add(ci.tableName);\n+        if(ci.partName == null) {\n+          sb.append(\"cq_partition is null\");\n+        } else {\n+          sb.append(\"cq_partition=?\");\n+          params.add(ci.partName);\n+        }\n+\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, sb.toString(), params);\n+        LOG.debug(\"Going to execute query <\" + sb.toString() + \">\");\n+        ResultSet rs = pst.executeQuery();\n+        if(rs.next()) {\n+          long enqueuedId = rs.getLong(1);\n+          String state = compactorStateToResponse(rs.getString(2).charAt(0));\n+          LOG.info(\"Ignoring request to clean up for \" + ci.dbname + \"/\" + ci.tableName +\n+                  \"/\" + ci.partName + \" since it is already \" + quoteString(state) +\n+                  \" with id=\" + enqueuedId);\n+        }\n+        close(rs);\n+        closeStmt(pst);\n+        params.clear();\n+        StringBuilder buf = new StringBuilder(\"insert into COMPACTION_QUEUE (cq_id, cq_database, \" +\n+                \"cq_table, \");\n+        String partName = ci.partName;\n+        if (partName != null) {\n+          buf.append(\"cq_partition, \");\n+        }\n+        buf.append(\"cq_state, cq_type\");\n+        if (ci.properties != null) {\n+          buf.append(\", cq_tblproperties\");\n+        }\n+        if (ci.runAs != null) {\n+          buf.append(\", cq_run_as\");\n+        }\n+        buf.append(\") values (\");\n+        buf.append(id);\n+        buf.append(\", ?\");\n+        buf.append(\", ?\");\n+        buf.append(\", \");\n+        params.add(ci.dbname);\n+        params.add(ci.tableName);\n+        if (partName != null) {\n+          buf.append(\"?, '\");\n+          params.add(partName);\n+        } else {\n+          buf.append(\"'\");\n+        }\n+        buf.append(READY_FOR_CLEANING);\n+        buf.append(\"', '\");\n+        buf.append(MAJOR_TYPE);\n+        buf.append(\"'\");\n+        if (ci.properties != null) {\n+          buf.append(\", ?\");\n+          params.add(ci.properties);\n+        }\n+        if (ci.runAs != null) {\n+          buf.append(\", ?\");\n+          params.add(ci.runAs);\n+        }\n+        buf.append(\")\");\n+        String s = buf.toString();\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, params);\n+        LOG.debug(\"Going to execute update <\" + s + \">\");\n+        pst.executeUpdate();\n+        LOG.debug(\"Going to commit\");\n+        dbConn.commit();\n+      } catch (SQLException e) {\n+        LOG.debug(\"Going to rollback\");\n+        rollbackDBConn(dbConn);\n+        checkRetryable(dbConn, e, \"requestCleanup(\" + ci + \")\");\n+        throw new MetaException(\"Unable to select from transaction database \" +\n+                StringUtils.stringifyException(e));\n+      } finally {\n+        closeStmt(pst);\n+        closeStmt(stmt);\n+        closeDbConn(dbConn);\n+        if(handle != null) {\n+          handle.releaseLocks();\n+        }\n+        unlockInternal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ad99ab38ec5149350a997c0b0b3beb66b1f922"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9812ad1ba04b3e37656fdd0c738646dea24cf81", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/c9812ad1ba04b3e37656fdd0c738646dea24cf81", "committedDate": "2020-06-22T03:56:06Z", "message": "merge from upstream master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d12959339b22becee0aa986852049b46867f016", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/3d12959339b22becee0aa986852049b46867f016", "committedDate": "2020-06-23T01:03:34Z", "message": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "523433cc6e14d0a37f01fda3ac548bff114de927", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/523433cc6e14d0a37f01fda3ac548bff114de927", "committedDate": "2020-06-23T21:25:11Z", "message": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41b6a05a8df17e62b5c4f102771cd22af127e73a", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/41b6a05a8df17e62b5c4f102771cd22af127e73a", "committedDate": "2020-06-23T21:28:54Z", "message": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12a95f18239db835745c20445ed1763cc6549e07", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/12a95f18239db835745c20445ed1763cc6549e07", "committedDate": "2020-06-23T21:35:26Z", "message": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDA1ODk2", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-436405896", "createdAt": "2020-06-24T07:51:15Z", "commit": {"oid": "12a95f18239db835745c20445ed1763cc6549e07"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1MToxNVrOGoG6Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NDowOFrOGoG_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTM5MA==", "bodyText": "Nit: I think this is misleading, and unnecessary since we have already logged the values of deltaSize and multiBase.", "url": "https://github.com/apache/hive/pull/1085#discussion_r444709390", "createdAt": "2020-06-24T07:51:15Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java", "diffHunk": "@@ -361,18 +361,25 @@ private CompactionType determineCompactionType(CompactionInfo ci, ValidWriteIdLi\n           HiveConf.getFloatVar(conf, HiveConf.ConfVars.HIVE_COMPACTOR_DELTA_PCT_THRESHOLD) :\n           Float.parseFloat(deltaPctProp);\n       boolean bigEnough =   (float)deltaSize/(float)baseSize > deltaPctThreshold;\n+      boolean multiBase = dir.getObsolete().stream()\n+              .filter(path -> path.getName().startsWith(AcidUtils.BASE_PREFIX)).findAny().isPresent();\n+\n       if (LOG.isDebugEnabled()) {\n         StringBuilder msg = new StringBuilder(\"delta size: \");\n         msg.append(deltaSize);\n         msg.append(\" base size: \");\n         msg.append(baseSize);\n+        msg.append(\" multiBase \");\n+        msg.append(multiBase);\n+        msg.append(\" deltaSize \");\n+        msg.append(deltaSize);\n         msg.append(\" threshold: \");\n         msg.append(deltaPctThreshold);\n         msg.append(\" will major compact: \");\n-        msg.append(bigEnough);\n+        msg.append(bigEnough || (deltaSize == 0  && multiBase));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a95f18239db835745c20445ed1763cc6549e07"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDUzMQ==", "bodyText": "opportunity: add:\nstartWorker();\nAssert.assertEquals(\"ready for cleaning\",rsp.getCompacts().get(0).getState());", "url": "https://github.com/apache/hive/pull/1085#discussion_r444710531", "createdAt": "2020-06-24T07:53:30Z", "author": {"login": "klcopp"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java", "diffHunk": "@@ -1031,6 +1031,34 @@ private ShowCompactResponseElement generateElement(long id, String db, String ta\n     return element;\n   }\n \n+  @Test\n+  public void compactTableWithMultipleBase() throws Exception {\n+    Table t = newTable(\"default\", \"nctdpnhe\", false);\n+\n+    addBaseFile(t, null, 50L, 50);\n+    addBaseFile(t, null, 100L, 50);\n+\n+    burnThroughTransactions(\"default\", \"nctdpnhe\", 102);\n+\n+    long txnid = openTxn();\n+    LockComponent comp = new LockComponent(LockType.SHARED_WRITE, LockLevel.TABLE, \"default\");\n+    comp.setTablename(\"nctdpnhe\");\n+    comp.setOperationType(DataOperationType.UPDATE);\n+    List<LockComponent> components = new ArrayList<LockComponent>(1);\n+    components.add(comp);\n+    LockRequest req = new LockRequest(components, \"me\", \"localhost\");\n+    req.setTxnid(txnid);\n+    LockResponse res = txnHandler.lock(req);\n+    long writeid = allocateWriteId(\"default\", \"nctdpnhe\", txnid);\n+    txnHandler.commitTxn(new CommitTxnRequest(txnid));\n+\n+    startInitiator();\n+\n+    ShowCompactResponse rsp = txnHandler.showCompact(new ShowCompactRequest());\n+    Assert.assertEquals(1, rsp.getCompactsSize());\n+    Assert.assertEquals(\"initiated\",rsp.getCompacts().get(0).getState());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a95f18239db835745c20445ed1763cc6549e07"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDg5MA==", "bodyText": "nit: no newline at end of file", "url": "https://github.com/apache/hive/pull/1085#discussion_r444710890", "createdAt": "2020-06-24T07:54:08Z", "author": {"login": "klcopp"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java", "diffHunk": "@@ -1040,4 +1068,4 @@ boolean useHive130DeltaDirName() {\n   public void tearDown() throws Exception {\n     compactorTestCleanup();\n   }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a95f18239db835745c20445ed1763cc6549e07"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e289cb20d793faf56c47c8fee1f55577545c78e", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/6e289cb20d793faf56c47c8fee1f55577545c78e", "committedDate": "2020-06-24T18:36:51Z", "message": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3fc598fa7d3f95d8c2ed2e65b8f52cf40a7e615", "author": {"user": {"login": "rajkrrsingh", "name": "Rajkumar Singh"}}, "url": "https://github.com/apache/hive/commit/f3fc598fa7d3f95d8c2ed2e65b8f52cf40a7e615", "committedDate": "2020-06-24T18:46:27Z", "message": "Hive 22255 : Hive don't trigger Major Compaction automatically if table contains only base files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjUxNDYw", "url": "https://github.com/apache/hive/pull/1085#pullrequestreview-437251460", "createdAt": "2020-06-25T07:53:58Z", "commit": {"oid": "f3fc598fa7d3f95d8c2ed2e65b8f52cf40a7e615"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3836, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}