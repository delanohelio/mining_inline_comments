{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Mjc4MjYw", "number": 1228, "title": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)", "bodyText": "NOTICE\nPushing the TopNKey operator through PK-FK inner joins.\nExample:\nCustomer table:\n\n\n\nID (PK)\nLAST_NAME\n\n\n\n\n1\nRobinson\n\n\n2\nJones\n\n\n3\nSmith\n\n\n4\nHeisenberg\n\n\n\nOrder table:\n\n\n\nCUSTOMER_ID (FK)\nAMOUNT\n\n\n\n\n1\n100\n\n\n1\n50\n\n\n2\n200\n\n\n3\n30\n\n\n3\n40\n\n\n\nRequirements for doing TopN Key pushdown.\n\nThe PRIMARY KEY constraint on Customer.ID that forbids NULL and duplicate values.\nThe NOT_NULL constraint on Order.CUSTOMER_ID that forbids NULL values.\nPlus the FOREIGN KEY constraint between Customer.ID and Order.CUSTOMER_ID ensures that exactly one row exists in the Customer table for any given row in the Order table.\n\nIn general if the first n of the order by columns are coming from the child table (FK) then we can copy the TopNKey operator with the first n columns and put it before the join. If all columns are coming from the child table we can move the TopNKey operator without keeping the original.\nSELECT * FROM Customer, Order \nWHERE Customer.ID = Order.CUSTOMER_ID \nORDER BY Order.AMOUNT, [Order.*], [Customer.*] LIMIT 3;\n\nResult:\n\n\n\nCUSTOMER.ID (PK)\nCUSTOMER.LAST_NAME\nORDER.AMOUNT\n\n\n\n\n3\nSmith\n30\n\n\n3\nSmith\n40\n\n\n1\nRobinson\n50\n\n\n1\nRobinson\n100\n\n\n2\nJones\n200\n\n\n\nPlan\nTop N Key Operator\n          sort order: +\n          keys: ORDER.AMOUNT, [ORDER.*]\n          top n: 3\n  Select Operator (Order)\n  [...]\n  Join\n    [...]\n     Top N Key Operator\n          sort order: +\n          keys: ORDER.AMOUNT, [ORDER.*], [Customer.*]\n          top n: 3\n \n\nImplementation notes\nPkFk join information is extracted on the calcite side and it is attached (child table index & name) to the AST as a query hint.\nAt the physical plan level we make use of this information to decide if we can push through the topn key operator. We also need to get the origins of the columns (in the order by) to see if they're coming from the child table.", "createdAt": "2020-07-08T14:23:35Z", "url": "https://github.com/apache/hive/pull/1228", "merged": true, "mergeCommit": {"oid": "6fbd54c0af60276d49b237defb550938c9c32610"}, "closed": true, "closedAt": "2020-07-29T09:27:16Z", "author": {"login": "zeroflag"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc10gp8ABqjM1NTgzMjc5MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5nlNFAFqTQ1NzM0ODgyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13e411a31b97422e3cda11005406a31efeda3647", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/13e411a31b97422e3cda11005406a31efeda3647", "committedDate": "2020-07-10T15:28:51Z", "message": " HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}, "afterCommit": {"oid": "9807b73703e827d2be0230cb984197ada56b6ae8", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/9807b73703e827d2be0230cb984197ada56b6ae8", "committedDate": "2020-07-17T14:14:27Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTEyMDUx", "url": "https://github.com/apache/hive/pull/1228#pullrequestreview-452112051", "createdAt": "2020-07-21T04:08:20Z", "commit": {"oid": "9807b73703e827d2be0230cb984197ada56b6ae8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDowODoyMFrOG0nXNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMDozMVrOG0nixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNDA1Mg==", "bodyText": "Can we prefix with KW_ and move above with rest of keywords?", "url": "https://github.com/apache/hive/pull/1228#discussion_r457824052", "createdAt": "2020-07-21T04:08:20Z", "author": {"login": "jcamachor"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveLexerParent.g", "diffHunk": "@@ -471,6 +471,8 @@ Number\n     (Digit)+ ( DOT (Digit)* (Exponent)? | Exponent)?\n     ;\n \n+PKFK_JOIN: 'PKFK_JOIN';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9807b73703e827d2be0230cb984197ada56b6ae8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTU3MQ==", "bodyText": "Naming (NON_FK_FILTERED : \"notFiltered\") is a bit confusing. We can simplify to NON_FK_FILTERED vs NON_FK_NOT_FILTERED? Create String in converter for both (or enum).", "url": "https://github.com/apache/hive/pull/1228#discussion_r457825571", "createdAt": "2020-07-21T04:14:36Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/ASTConverter.java", "diffHunk": "@@ -442,6 +450,40 @@ private QueryBlockInfo convertSource(RelNode r) throws CalciteSemanticException\n     return new QueryBlockInfo(s, ast);\n   }\n \n+  /**\n+   * Add PK-FK join information to the AST as a query hint\n+   * @param ast\n+   * @param join\n+   * @param swapSides whether the left and right input of the join is swapped\n+   */\n+  private void addPkFkInfoToAST(ASTNode ast, Join join, boolean swapSides) {\n+    List<RexNode> joinFilters = new ArrayList<>(RelOptUtil.conjunctions(join.getCondition()));\n+    RelMetadataQuery mq = join.getCluster().getMetadataQuery();\n+    HiveRelOptUtil.PKFKJoinInfo rightInputResult =\n+            HiveRelOptUtil.extractPKFKJoin(join, joinFilters, false, mq);\n+    HiveRelOptUtil.PKFKJoinInfo leftInputResult =\n+            HiveRelOptUtil.extractPKFKJoin(join, joinFilters, true, mq);\n+    // Add the fkJoinIndex (0=left, 1=right, if swapSides is false) to the AST\n+    // check if the nonFK side is filtered\n+    if (leftInputResult.isPkFkJoin && leftInputResult.additionalPredicates.isEmpty()) {\n+      RelNode nonFkInput = join.getRight();\n+      ast.addChild(pkFkHint(swapSides ? 1 : 0, HiveRelOptUtil.isRowFilteringPlan(mq, nonFkInput)));\n+    } else if (rightInputResult.isPkFkJoin && rightInputResult.additionalPredicates.isEmpty()) {\n+      RelNode nonFkInput = join.getLeft();\n+      ast.addChild(pkFkHint(swapSides ? 0 : 1, HiveRelOptUtil.isRowFilteringPlan(mq, nonFkInput)));\n+    }\n+  }\n+\n+  private ASTNode pkFkHint(int fkTableIndex, boolean nonFkSideIsFiltered) {\n+    ParseDriver parseDriver = new ParseDriver();\n+    try {\n+      return parseDriver.parseHint(String.format(\"PKFK_JOIN(%d, %s)\",\n+              fkTableIndex, nonFkSideIsFiltered ? NON_FK_FILTERED : \"notFiltered\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9807b73703e827d2be0230cb984197ada56b6ae8"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTc0Ng==", "bodyText": "Can we add a comment to this method? In which cases we can pushdown through inner join?", "url": "https://github.com/apache/hive/pull/1228#discussion_r457825746", "createdAt": "2020-07-21T04:15:19Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/topnkey/TopNKeyPushdownProcessor.java", "diffHunk": "@@ -255,6 +260,88 @@ private void pushdownThroughLeftOuterJoin(TopNKeyOperator topNKey) throws Semant\n     }\n   }\n \n+  private void pushdownInnerJoin(TopNKeyOperator topNKey, int fkJoinInputIndex, boolean nonFkSideIsFiltered) throws SemanticException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9807b73703e827d2be0230cb984197ada56b6ae8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTk5Ng==", "bodyText": "nit. Some lines are very long. Please split in multiple lines.\nAdditionally, can we some comments to these utility methods?", "url": "https://github.com/apache/hive/pull/1228#discussion_r457825996", "createdAt": "2020-07-21T04:16:24Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/topnkey/TopNKeyPushdownProcessor.java", "diffHunk": "@@ -255,6 +260,88 @@ private void pushdownThroughLeftOuterJoin(TopNKeyOperator topNKey) throws Semant\n     }\n   }\n \n+  private void pushdownInnerJoin(TopNKeyOperator topNKey, int fkJoinInputIndex, boolean nonFkSideIsFiltered) throws SemanticException {\n+    TopNKeyDesc topNKeyDesc = topNKey.getConf();\n+    CommonJoinOperator<? extends JoinDesc> join =\n+            (CommonJoinOperator<? extends JoinDesc>) topNKey.getParentOperators().get(0);\n+    List<Operator<? extends OperatorDesc>> joinInputs = join.getParentOperators();\n+    ReduceSinkOperator fkJoinInput = (ReduceSinkOperator) joinInputs.get(fkJoinInputIndex);\n+    if (nonFkSideIsFiltered) {\n+      LOG.debug(\"Not pushing {} through {} as non FK side of the join is filtered\", topNKey.getName(), join.getName());\n+      return;\n+    }\n+    // Check column origins:\n+    //  1. If all OrderBy columns are coming from the child (FK) table:\n+    //    -> move TopNKeyOperator\n+    //  2. If the first n OrderBy columns are coming from the child (FK) table:\n+    //    -> copy TopNKeyOperator with the first n columns, and leave the original in place\n+    int prefixLength = keyColumnPrefixLength(join, topNKey, fkJoinInputIndex, topNKey.getConf().getKeyColumns());\n+    if (prefixLength == 0) {\n+      LOG.debug(\"Not pushing {} through {} as common key column prefix length is 0\", topNKey.getName(), join.getName());\n+      return;\n+    }\n+    LOG.debug(\"Pushing a copy of {} through {} and {}\",\n+            topNKey.getName(), join.getName(), fkJoinInput.getName());\n+    TopNKeyDesc newTopNKeyDesc = topNKeyDesc.withKeyColumns(prefixLength);\n+    newTopNKeyDesc.setKeyColumns(remapColumns(join, fkJoinInput, newTopNKeyDesc.getKeyColumns()));\n+    pushdown(copyDown(fkJoinInput, newTopNKeyDesc));\n+    if (topNKeyDesc.getKeyColumns().size() == prefixLength) {\n+      LOG.debug(\"Removing {} above {}\", topNKey.getName(), join.getName());\n+      join.removeChildAndAdoptItsChildren(topNKey);\n+    }\n+  }\n+\n+  private int keyColumnPrefixLength(CommonJoinOperator<? extends JoinDesc> join, TopNKeyOperator topNKeyOperator, int expectedTag, List<ExprNodeDesc> keyColumns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9807b73703e827d2be0230cb984197ada56b6ae8"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzAxMg==", "bodyText": "I see this example is below. Can FIXME be removed?", "url": "https://github.com/apache/hive/pull/1228#discussion_r457827012", "createdAt": "2020-07-21T04:20:31Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/queries/clientpositive/topnkey_inner_join.q", "diffHunk": "@@ -0,0 +1,50 @@\n+drop table if exists customer;\n+drop table if exists orders;\n+\n+create table customer (id int, name string, email string);\n+create table orders (customer_id int not null enforced, amount int);\n+\n+alter table customer add constraint pk_customer_id primary key (id) disable novalidate rely;\n+alter table orders add constraint fk_order_customer_id foreign key (customer_id) references customer(id) disable novalidate rely;\n+\n+insert into customer values\n+  (4, 'Heisenberg', 'heisenberg@email.com'),\n+  (3, 'Smith', 'smith@email.com'),\n+  (2, 'Jones', 'jones@email.com'),\n+  (1, 'Robinson', 'robinson@email.com');\n+\n+insert into orders values\n+  (2, 200),\n+  (3, 40),\n+  (1, 100),\n+  (1, 50),\n+  (3, 30);\n+\n+set hive.optimize.topnkey=true;\n+set hive.optimize.limittranspose=false;\n+\n+select 'positive: order by columns are coming from child table';\n+-- FIXME: explain select * from customer join orders on customer.id = orders.customer_id order by customer.id limit 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9807b73703e827d2be0230cb984197ada56b6ae8"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzU2MzQw", "url": "https://github.com/apache/hive/pull/1228#pullrequestreview-452356340", "createdAt": "2020-07-21T11:16:07Z", "commit": {"oid": "28ea8970d04c7b95d7d96ccdb31e8557fa5fd4e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxNjowN1rOG0zVKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxNjowN1rOG0zVKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMDEzOQ==", "bodyText": "It is also worth to execute these queries to catch correctness issues", "url": "https://github.com/apache/hive/pull/1228#discussion_r458020139", "createdAt": "2020-07-21T11:16:07Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/queries/clientpositive/topnkey_inner_join.q", "diffHunk": "@@ -0,0 +1,49 @@\n+drop table if exists customer;\n+drop table if exists orders;\n+\n+create table customer (id int, name string, email string);\n+create table orders (customer_id int not null enforced, amount int);\n+\n+alter table customer add constraint pk_customer_id primary key (id) disable novalidate rely;\n+alter table orders add constraint fk_order_customer_id foreign key (customer_id) references customer(id) disable novalidate rely;\n+\n+insert into customer values\n+  (4, 'Heisenberg', 'heisenberg@email.com'),\n+  (3, 'Smith', 'smith@email.com'),\n+  (2, 'Jones', 'jones@email.com'),\n+  (1, 'Robinson', 'robinson@email.com');\n+\n+insert into orders values\n+  (2, 200),\n+  (3, 40),\n+  (1, 100),\n+  (1, 50),\n+  (3, 30);\n+\n+set hive.optimize.topnkey=true;\n+set hive.optimize.limittranspose=false;\n+\n+select 'positive: order by columns are coming from child table';\n+explain select * from orders join customer on customer.id = orders.customer_id order by orders.amount limit 3;\n+explain select * from orders join customer on customer.id = orders.customer_id order by orders.customer_id, orders.amount limit 3;\n+explain select * from customer join orders on orders.customer_id = customer.id order by orders.amount, orders.customer_id limit 3;\n+\n+select 'negative: order by columns are coming from referenced table';\n+explain select * from orders join customer on customer.id = orders.customer_id order by customer.name limit 3;\n+explain select * from orders join customer on customer.id = orders.customer_id order by customer.email, customer.name limit 3;\n+\n+select 'negative: 1st order by columns is coming from referenced table';\n+explain select * from orders join customer on customer.id = orders.customer_id order by customer.name, orders.amount limit 3;\n+\n+select 'mixed/positive: 1st n order by columns are coming from child table';\n+explain select * from orders join customer on customer.id = orders.customer_id order by orders.amount, customer.name limit 3;\n+\n+select 'negative: no PK/FK';\n+alter table customer drop constraint pk_customer_id;\n+alter table orders drop constraint fk_order_customer_id;\n+explain select * from customer join orders on customer.id = orders.customer_id order by customer.id limit 3;\n+\n+select 'negatie: no RELY';\n+alter table customer add constraint pk_customer_id primary key (id) disable novalidate;\n+alter table orders add constraint fk_order_customer_id foreign key (customer_id) references customer(id) disable novalidate;\n+explain select * from customer join orders on customer.id = orders.customer_id order by customer.id limit 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ea8970d04c7b95d7d96ccdb31e8557fa5fd4e3"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86f60f00b5cf1226225b4c603ebc40869cc1aa7a", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/86f60f00b5cf1226225b4c603ebc40869cc1aa7a", "committedDate": "2020-07-23T09:53:54Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}, "afterCommit": {"oid": "4d3edd54ad1d83302b09158ce013b43e77c3611f", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/4d3edd54ad1d83302b09158ce013b43e77c3611f", "committedDate": "2020-07-23T14:14:08Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "421b697d86306ab53fd91dd570c323f049e91a93", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/421b697d86306ab53fd91dd570c323f049e91a93", "committedDate": "2020-07-27T07:47:36Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a29d86fc5b0993c68aadb6f21baf2c0f993ba05", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/2a29d86fc5b0993c68aadb6f21baf2c0f993ba05", "committedDate": "2020-07-27T08:05:45Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae8cc07c81eb529e10a157dc3fea3e59c98307e", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/1ae8cc07c81eb529e10a157dc3fea3e59c98307e", "committedDate": "2020-07-27T08:05:45Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d3edd54ad1d83302b09158ce013b43e77c3611f", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/4d3edd54ad1d83302b09158ce013b43e77c3611f", "committedDate": "2020-07-23T14:14:08Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}, "afterCommit": {"oid": "1ae8cc07c81eb529e10a157dc3fea3e59c98307e", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/1ae8cc07c81eb529e10a157dc3fea3e59c98307e", "committedDate": "2020-07-27T08:05:45Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a808f6b22665a4610a951ec8cbaf8eea994cb1bf", "author": {"user": {"login": "zeroflag", "name": "Attila Magyar"}}, "url": "https://github.com/apache/hive/commit/a808f6b22665a4610a951ec8cbaf8eea994cb1bf", "committedDate": "2020-07-28T08:20:49Z", "message": "HIVE-23817. Pushing TopN Key operator PKFK inner joins (amagyar)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzQ4ODIy", "url": "https://github.com/apache/hive/pull/1228#pullrequestreview-457348822", "createdAt": "2020-07-29T09:26:42Z", "commit": {"oid": "a808f6b22665a4610a951ec8cbaf8eea994cb1bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3502, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}