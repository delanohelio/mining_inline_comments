{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzc0ODg2", "number": 1355, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjoxMjo0NlrOEUxk1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoxNToxOVrOEV8Jug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjE5MjIyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjoxMjo0NlrOG7KY_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzoyNjo0MFrOG8mkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4OTQwNg==", "bodyText": "The only place where this method is called currently in the code is in AlterTableAddPartitionOperation.java. Instead of introducing an addtional RPC, perhaps a better way is to send the Table (ql.metadata.Table) object in this method so that we can pass the tableId directly without getting the table from metastore.", "url": "https://github.com/apache/hive/pull/1355#discussion_r464689406", "createdAt": "2020-08-03T22:12:46Z", "author": {"login": "vihangk1"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -3258,8 +3260,19 @@ public Partition createPartition(Table tbl, Map<String, String> partSpec) throws\n \n   public org.apache.hadoop.hive.metastore.api.Partition getPartition(String dbName, String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f881e09d13cf0a3b2664709de8b8a09cfe4ab45"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5OTc0OA==", "bodyText": "Sure, makes sense.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466199748", "createdAt": "2020-08-06T07:26:40Z", "author": {"login": "kishendas"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -3258,8 +3260,19 @@ public Partition createPartition(Table tbl, Map<String, String> partSpec) throws\n \n   public org.apache.hadoop.hive.metastore.api.Partition getPartition(String dbName, String tableName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4OTQwNg=="}, "originalCommit": {"oid": "6f881e09d13cf0a3b2664709de8b8a09cfe4ab45"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDM3MTEzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowMzozMlrOG8-irA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTowODo1MFrOG9Aq_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjQyOA==", "bodyText": "I think these annotations are more useful for public APIs. Since Hive.java is not a public API you can just use @VisibleForTesting annotation.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466592428", "createdAt": "2020-08-06T18:03:32Z", "author": {"login": "vihangk1"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -5292,6 +5303,16 @@ public synchronized SynchronizedMetaStoreClient getSynchronizedMSC() throws Meta\n     return syncMetaStoreClient;\n   }\n \n+    /**\n+   * @return the metastore client for the current thread\n+   * @throws MetaException\n+   */\n+  @LimitedPrivate(value = {\"Hive\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNzMyNg==", "bodyText": "Sure", "url": "https://github.com/apache/hive/pull/1355#discussion_r466627326", "createdAt": "2020-08-06T19:08:50Z", "author": {"login": "kishendas"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -5292,6 +5303,16 @@ public synchronized SynchronizedMetaStoreClient getSynchronizedMSC() throws Meta\n     return syncMetaStoreClient;\n   }\n \n+    /**\n+   * @return the metastore client for the current thread\n+   * @throws MetaException\n+   */\n+  @LimitedPrivate(value = {\"Hive\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjQyOA=="}, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDM3NTQyOnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestTxnManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowNDo0OVrOG8-lbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTowODo0M1rOG9Aqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MzEzNQ==", "bodyText": "nit, the name of the variable and its value seems off. Either change the value to ';' or rename the variable to colon.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466593135", "createdAt": "2020-08-06T18:04:49Z", "author": {"login": "vihangk1"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestTxnManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.lockmgr;\n+\n+import org.apache.hadoop.hive.common.FileUtils;\n+import org.apache.hadoop.hive.common.ValidTxnWriteIdList;\n+import org.apache.hadoop.hive.metastore.api.CommitTxnRequest;\n+import org.apache.hadoop.hive.metastore.api.GetOpenTxnsResponse;\n+import org.apache.hadoop.hive.metastore.api.TxnToWriteId;\n+import org.apache.hadoop.hive.metastore.api.TxnType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.hadoop.hive.common.ValidTxnList;\n+import org.apache.hadoop.hive.common.ValidReadTxnList;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.hadoop.hive.ql.Context;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n+import org.apache.hadoop.hive.ql.DriverState;\n+import org.apache.hadoop.hive.ql.QueryPlan;\n+import org.apache.hadoop.hive.ql.hooks.ReadEntity;\n+import org.apache.hadoop.hive.ql.hooks.WriteEntity;\n+import org.apache.hadoop.hive.ql.metadata.DummyPartition;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.util.ReflectionUtils;\n+\n+import java.util.*;\n+\n+/**\n+ * An implementation of {@link HiveTxnManager} that does not support\n+ * transactions.\n+ * This class is only used in test.\n+ */\n+class TestTxnManager extends DummyTxnManager {\n+  final static Character SEMICOLON = ':';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNzI3NA==", "bodyText": ":-) It's a COLON.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466627274", "createdAt": "2020-08-06T19:08:43Z", "author": {"login": "kishendas"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestTxnManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.lockmgr;\n+\n+import org.apache.hadoop.hive.common.FileUtils;\n+import org.apache.hadoop.hive.common.ValidTxnWriteIdList;\n+import org.apache.hadoop.hive.metastore.api.CommitTxnRequest;\n+import org.apache.hadoop.hive.metastore.api.GetOpenTxnsResponse;\n+import org.apache.hadoop.hive.metastore.api.TxnToWriteId;\n+import org.apache.hadoop.hive.metastore.api.TxnType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.hadoop.hive.common.ValidTxnList;\n+import org.apache.hadoop.hive.common.ValidReadTxnList;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.hadoop.hive.ql.Context;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n+import org.apache.hadoop.hive.ql.DriverState;\n+import org.apache.hadoop.hive.ql.QueryPlan;\n+import org.apache.hadoop.hive.ql.hooks.ReadEntity;\n+import org.apache.hadoop.hive.ql.hooks.WriteEntity;\n+import org.apache.hadoop.hive.ql.metadata.DummyPartition;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.Partition;\n+import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.util.ReflectionUtils;\n+\n+import java.util.*;\n+\n+/**\n+ * An implementation of {@link HiveTxnManager} that does not support\n+ * transactions.\n+ * This class is only used in test.\n+ */\n+class TestTxnManager extends DummyTxnManager {\n+  final static Character SEMICOLON = ':';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MzEzNQ=="}, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDM4NjEyOnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowODowMlrOG8-sOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTowODoxNFrOG9Apqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NDg3Mg==", "bodyText": "A more natural place for this class would be in standalone-metastore module. I don't see anything in this class it to be dependent on hive-exec.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466594872", "createdAt": "2020-08-06T18:08:02Z", "author": {"login": "vihangk1"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreClient.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNjk4Nw==", "bodyText": "Makes sense.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466626987", "createdAt": "2020-08-06T19:08:14Z", "author": {"login": "kishendas"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreClient.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.metadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NDg3Mg=="}, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQwMTQ1OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreClientApiArgumentsChecker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoxMjozMVrOG8-10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDo1NTo0MFrOG9nk5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NzMzMQ==", "bodyText": "I am curious to know what is the current behavior when a non-transactional table is requested. Does it set the table Id too? Also, what happens when we request ValidWriteIdList to HMS for a non-transactional table?", "url": "https://github.com/apache/hive/pull/1355#discussion_r466597331", "createdAt": "2020-08-06T18:12:31Z", "author": {"login": "vihangk1"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreClientApiArgumentsChecker.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.metadata;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.hive.common.ValidTxnList;\n+import org.apache.hadoop.hive.common.ValidWriteIdList;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.hive_metastoreConstants;\n+import org.apache.hadoop.hive.metastore.conf.MetastoreConf;\n+import org.apache.hadoop.hive.ql.Context;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.thrift.TException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * TestHiveMetaStoreClientApiArgumentsChecker\n+ *\n+ * This class works with {@link TestHiveMetaStoreClient} in order to verify the arguments that\n+ * are sent from HS2 to HMS APIs.\n+ *\n+ */\n+public class TestHiveMetaStoreClientApiArgumentsChecker {\n+\n+  private Hive hive;\n+  private IMetaStoreClient msc;\n+  private FileSystem fs;\n+  final static String DB_NAME = \"db\";\n+  final static String TABLE_NAME = \"table\";\n+  private IMetaStoreClient client;\n+  private Table t;\n+\n+  protected static final String USER_NAME = \"user0\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+\n+    client = new TestHiveMetaStoreClient(new HiveConf(Hive.class));\n+    hive = Hive.get(client);\n+    hive.getConf().set(MetastoreConf.ConfVars.FS_HANDLER_THREADS_COUNT.getVarname(), \"15\");\n+    hive.getConf().set(MetastoreConf.ConfVars.MSCK_PATH_VALIDATION.getVarname(), \"throw\");\n+    msc = new HiveMetaStoreClient(hive.getConf());\n+\n+    hive.getConf().setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,\n+        \"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory\");\n+    HiveConf.setBoolVar(hive.getConf(), HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+    hive.getConf().set(ValidTxnList.VALID_TXNS_KEY, \"1:\");\n+    hive.getConf().set(ValidWriteIdList.VALID_WRITEIDS_KEY, TABLE_NAME + \":1:\");\n+    hive.getConf().setVar(HiveConf.ConfVars.HIVE_TXN_MANAGER, \"org.apache.hadoop.hive.ql.lockmgr.TestTxnManager\");\n+    SessionState.start(hive.getConf());\n+    SessionState.get().initTxnMgr(hive.getConf());\n+    Context ctx = new Context(hive.getConf());\n+    SessionState.get().getTxnMgr().openTxn(ctx, USER_NAME);\n+\n+    t = new Table();\n+    org.apache.hadoop.hive.metastore.api.Table tTable = new org.apache.hadoop.hive.metastore.api.Table();\n+    tTable.setId(Long.MAX_VALUE);\n+    t.setTTable(tTable);\n+    Map<String, String> parameters = new HashMap<>();\n+    parameters.put(hive_metastoreConstants.TABLE_IS_TRANSACTIONAL, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNTk3OA==", "bodyText": "HS2 methods have explicit checks to know whether a given table is transactional or not. So, validWriteIdList and tableId are only set for transactional tables.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466625978", "createdAt": "2020-08-06T19:06:13Z", "author": {"login": "kishendas"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreClientApiArgumentsChecker.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.metadata;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.hive.common.ValidTxnList;\n+import org.apache.hadoop.hive.common.ValidWriteIdList;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.hive_metastoreConstants;\n+import org.apache.hadoop.hive.metastore.conf.MetastoreConf;\n+import org.apache.hadoop.hive.ql.Context;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.thrift.TException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * TestHiveMetaStoreClientApiArgumentsChecker\n+ *\n+ * This class works with {@link TestHiveMetaStoreClient} in order to verify the arguments that\n+ * are sent from HS2 to HMS APIs.\n+ *\n+ */\n+public class TestHiveMetaStoreClientApiArgumentsChecker {\n+\n+  private Hive hive;\n+  private IMetaStoreClient msc;\n+  private FileSystem fs;\n+  final static String DB_NAME = \"db\";\n+  final static String TABLE_NAME = \"table\";\n+  private IMetaStoreClient client;\n+  private Table t;\n+\n+  protected static final String USER_NAME = \"user0\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+\n+    client = new TestHiveMetaStoreClient(new HiveConf(Hive.class));\n+    hive = Hive.get(client);\n+    hive.getConf().set(MetastoreConf.ConfVars.FS_HANDLER_THREADS_COUNT.getVarname(), \"15\");\n+    hive.getConf().set(MetastoreConf.ConfVars.MSCK_PATH_VALIDATION.getVarname(), \"throw\");\n+    msc = new HiveMetaStoreClient(hive.getConf());\n+\n+    hive.getConf().setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,\n+        \"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory\");\n+    HiveConf.setBoolVar(hive.getConf(), HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+    hive.getConf().set(ValidTxnList.VALID_TXNS_KEY, \"1:\");\n+    hive.getConf().set(ValidWriteIdList.VALID_WRITEIDS_KEY, TABLE_NAME + \":1:\");\n+    hive.getConf().setVar(HiveConf.ConfVars.HIVE_TXN_MANAGER, \"org.apache.hadoop.hive.ql.lockmgr.TestTxnManager\");\n+    SessionState.start(hive.getConf());\n+    SessionState.get().initTxnMgr(hive.getConf());\n+    Context ctx = new Context(hive.getConf());\n+    SessionState.get().getTxnMgr().openTxn(ctx, USER_NAME);\n+\n+    t = new Table();\n+    org.apache.hadoop.hive.metastore.api.Table tTable = new org.apache.hadoop.hive.metastore.api.Table();\n+    tTable.setId(Long.MAX_VALUE);\n+    t.setTTable(tTable);\n+    Map<String, String> parameters = new HashMap<>();\n+    parameters.put(hive_metastoreConstants.TABLE_IS_TRANSACTIONAL, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NzMzMQ=="}, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NDc0Mg==", "bodyText": "Okay. Thanks for letting me know.", "url": "https://github.com/apache/hive/pull/1355#discussion_r467264742", "createdAt": "2020-08-07T20:55:40Z", "author": {"login": "vihangk1"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreClientApiArgumentsChecker.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.metadata;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.hive.common.ValidTxnList;\n+import org.apache.hadoop.hive.common.ValidWriteIdList;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.hive_metastoreConstants;\n+import org.apache.hadoop.hive.metastore.conf.MetastoreConf;\n+import org.apache.hadoop.hive.ql.Context;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.thrift.TException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * TestHiveMetaStoreClientApiArgumentsChecker\n+ *\n+ * This class works with {@link TestHiveMetaStoreClient} in order to verify the arguments that\n+ * are sent from HS2 to HMS APIs.\n+ *\n+ */\n+public class TestHiveMetaStoreClientApiArgumentsChecker {\n+\n+  private Hive hive;\n+  private IMetaStoreClient msc;\n+  private FileSystem fs;\n+  final static String DB_NAME = \"db\";\n+  final static String TABLE_NAME = \"table\";\n+  private IMetaStoreClient client;\n+  private Table t;\n+\n+  protected static final String USER_NAME = \"user0\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+\n+    client = new TestHiveMetaStoreClient(new HiveConf(Hive.class));\n+    hive = Hive.get(client);\n+    hive.getConf().set(MetastoreConf.ConfVars.FS_HANDLER_THREADS_COUNT.getVarname(), \"15\");\n+    hive.getConf().set(MetastoreConf.ConfVars.MSCK_PATH_VALIDATION.getVarname(), \"throw\");\n+    msc = new HiveMetaStoreClient(hive.getConf());\n+\n+    hive.getConf().setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,\n+        \"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory\");\n+    HiveConf.setBoolVar(hive.getConf(), HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+    hive.getConf().set(ValidTxnList.VALID_TXNS_KEY, \"1:\");\n+    hive.getConf().set(ValidWriteIdList.VALID_WRITEIDS_KEY, TABLE_NAME + \":1:\");\n+    hive.getConf().setVar(HiveConf.ConfVars.HIVE_TXN_MANAGER, \"org.apache.hadoop.hive.ql.lockmgr.TestTxnManager\");\n+    SessionState.start(hive.getConf());\n+    SessionState.get().initTxnMgr(hive.getConf());\n+    Context ctx = new Context(hive.getConf());\n+    SessionState.get().getTxnMgr().openTxn(ctx, USER_NAME);\n+\n+    t = new Table();\n+    org.apache.hadoop.hive.metastore.api.Table tTable = new org.apache.hadoop.hive.metastore.api.Table();\n+    tTable.setId(Long.MAX_VALUE);\n+    t.setTTable(tTable);\n+    Map<String, String> parameters = new HashMap<>();\n+    parameters.put(hive_metastoreConstants.TABLE_IS_TRANSACTIONAL, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NzMzMQ=="}, "originalCommit": {"oid": "9e3908df475f6af46220d3e5d60ed398a0ad7739"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQxMDgyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoxNToxOVrOG8-7kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTowODowNFrOG9ApRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5ODgwMw==", "bodyText": "If this is only used for testing purposes would be good to annotate this method with @VisibleForTesting", "url": "https://github.com/apache/hive/pull/1355#discussion_r466598803", "createdAt": "2020-08-06T18:15:19Z", "author": {"login": "vihangk1"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -474,6 +476,12 @@ public static Hive get() throws HiveException {\n     return get(true);\n   }\n \n+  public static Hive get(IMetaStoreClient msc) throws HiveException, MetaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0b79e1566ecd275cf3c5745201624912d8f668"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNjg4Nw==", "bodyText": "Done.", "url": "https://github.com/apache/hive/pull/1355#discussion_r466626887", "createdAt": "2020-08-06T19:08:04Z", "author": {"login": "kishendas"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -474,6 +476,12 @@ public static Hive get() throws HiveException {\n     return get(true);\n   }\n \n+  public static Hive get(IMetaStoreClient msc) throws HiveException, MetaException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5ODgwMw=="}, "originalCommit": {"oid": "4c0b79e1566ecd275cf3c5745201624912d8f668"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 485, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}