{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzU1OTcy", "number": 1724, "title": "HIVE-24428: Concurrent add_partitions requests may lead to data loss", "bodyText": "What changes were proposed in this pull request?\n\nWhy are the changes needed?\n\nDoes this PR introduce any user-facing change?\n\nHow was this patch tested?", "createdAt": "2020-12-01T14:46:36Z", "url": "https://github.com/apache/hive/pull/1724", "merged": true, "mergeCommit": {"oid": "3508b26e6e1977f00871f6d282bb3bd895ba1f47"}, "closed": true, "closedAt": "2021-01-20T09:07:30Z", "author": {"login": "kgyrtkirk"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf-c0ogH2gAyNTMwMzU1OTcyOjBlMWNkNmU2MjBkYmU1NThjNWNlNTA4NzU4MGNhMzJmZDUzMGFmOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxwJuBgFqTU3MTU2MDIyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0e1cd6e620dbe558c5ce5087580ca32fd530af9e", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/0e1cd6e620dbe558c5ce5087580ca32fd530af9e", "committedDate": "2020-11-25T13:34:29Z", "message": "x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4732ce8520682010767e882eed71e0ac04f1683", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/f4732ce8520682010767e882eed71e0ac04f1683", "committedDate": "2020-11-25T13:34:31Z", "message": "Revert \"x\"\n\nThis reverts commit 0e1cd6e620dbe558c5ce5087580ca32fd530af9e."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9934af9c399e3688e7e3ce8f57415e94679d7176", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/9934af9c399e3688e7e3ce8f57415e94679d7176", "committedDate": "2020-12-01T13:32:39Z", "message": "port patch from the ancient one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bcc2bc2f7d30a8f295957653cace6b3b3573ac4", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/0bcc2bc2f7d30a8f295957653cace6b3b3573ac4", "committedDate": "2020-12-01T14:09:10Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa7915ada84cf115a98ac448f8d40909674ccbc", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/4fa7915ada84cf115a98ac448f8d40909674ccbc", "committedDate": "2020-12-01T14:25:58Z", "message": "embed new cases into testmetrcis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9371081ae205c36082430238aaba12b4e185e476", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/9371081ae205c36082430238aaba12b4e185e476", "committedDate": "2020-12-01T14:26:45Z", "message": "add to erxisting case instead new testcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bdb4fb8fa91d4eb8f3ee5bc5c0a6414745f3942", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/1bdb4fb8fa91d4eb8f3ee5bc5c0a6414745f3942", "committedDate": "2020-12-02T09:06:39Z", "message": "rename dpp to dp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e39cb6452d7cb9b75a80461fce7d4533df574d0b", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/e39cb6452d7cb9b75a80461fce7d4533df574d0b", "committedDate": "2020-12-02T09:59:30Z", "message": "use java Optional instead spark?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67bf0ab2f7f9fcab70dfda66fbfb973b4080ced6", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/67bf0ab2f7f9fcab70dfda66fbfb973b4080ced6", "committedDate": "2020-12-02T11:09:23Z", "message": "dont acquire in case already owns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd84410f26cc346f95ac4ec4c1b35f4593f69796", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/fd84410f26cc346f95ac4ec4c1b35f4593f69796", "committedDate": "2020-12-02T11:13:30Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/2f236829e5fa09b6d7cce15d07a6c846ffac84f7", "committedDate": "2020-12-02T12:42:35Z", "message": "fix semi/exclusive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MjYzMDgw", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-549263080", "createdAt": "2020-12-10T14:41:42Z", "commit": {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0MTo0MlrOIDMkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0MTo0MlrOIDMkHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA==", "bodyText": "Would it be better to create enum instead of string literals?", "url": "https://github.com/apache/hive/pull/1724#discussion_r540222494", "createdAt": "2020-12-10T14:41:42Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -747,6 +753,92 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    // nothing needs to be done\n+    if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+\n+    if (\"none\".equalsIgnoreCase(lockFileMoveMode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b04f6129461e200981e92401c7b24c0ec976c5", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/84b04f6129461e200981e92401c7b24c0ec976c5", "committedDate": "2020-12-14T10:35:00Z", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24428-addpart-dataloss"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adfbc1d197a8ec07b1be706936ad68545cf03710", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/adfbc1d197a8ec07b1be706936ad68545cf03710", "committedDate": "2020-12-15T11:33:57Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14b35a5285d0c0bbc45beba73b5c42a74b9c77b", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/c14b35a5285d0c0bbc45beba73b5c42a74b9c77b", "committedDate": "2020-12-15T12:42:51Z", "message": "w"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b77c8a75b477b3b604ea1d5a5ac033d03cddaa40", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/b77c8a75b477b3b604ea1d5a5ac033d03cddaa40", "committedDate": "2020-12-15T12:43:13Z", "message": "en-back hms  changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6370f113dd2f61b99db0371832f13d34936227ca", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/6370f113dd2f61b99db0371832f13d34936227ca", "committedDate": "2020-12-15T13:04:25Z", "message": "rename/etc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18517f3f1f58dc81a07bb71e7f413e1085a25467", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/18517f3f1f58dc81a07bb71e7f413e1085a25467", "committedDate": "2020-12-15T13:06:30Z", "message": "move"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba0496e7f7f3308de0d649a9a5d6e14c9fa48a1", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/9ba0496e7f7f3308de0d649a9a5d6e14c9fa48a1", "committedDate": "2020-12-15T13:07:01Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "007e4dfd26d63bc898a1da6114a5e1f56a392c78", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/007e4dfd26d63bc898a1da6114a5e1f56a392c78", "committedDate": "2020-12-15T13:07:12Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88fa34764df583d57ccd1ef10bd822ec68c09593", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/88fa34764df583d57ccd1ef10bd822ec68c09593", "committedDate": "2020-12-15T13:11:27Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/bc11bb62d3700b227f48b4683282b826b946f8bd", "committedDate": "2020-12-15T13:19:22Z", "message": "clenaup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDM4NDI4", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563438428", "createdAt": "2021-01-07T12:13:27Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoxMzoyN1rOIPqNOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoxMzoyN1rOIPqNOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5MTA2Nw==", "bodyText": "I think, it would be more cleaner to have 0 and 1 argument constructors. Based on current usages of  LocalTableLock constructor you know for sure if lock if null or not.", "url": "https://github.com/apache/hive/pull/1724#discussion_r553291067", "createdAt": "2021-01-07T12:13:27Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDQyMzUy", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563442352", "createdAt": "2021-01-07T12:20:19Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoyMDoxOVrOIPqZ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoyMDoxOVrOIPqZ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDMwOQ==", "bodyText": "Favor static member classes over non static", "url": "https://github.com/apache/hive/pull/1724#discussion_r553294309", "createdAt": "2021-01-07T12:20:19Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDQzMTEy", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563443112", "createdAt": "2021-01-07T12:21:38Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoyMTozOVrOIPqcfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoyMTozOVrOIPqcfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDk3Mw==", "bodyText": "should we lower log level to debug here to avoid extensive logging.", "url": "https://github.com/apache/hive/pull/1724#discussion_r553294973", "createdAt": "2021-01-07T12:21:39Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDQ4MjEx", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563448211", "createdAt": "2021-01-07T12:30:36Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjozMDozN1rOIPqs0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjozMDozN1rOIPqs0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTE1NA==", "bodyText": "should we lower log level to debug here to avoid extensive logging", "url": "https://github.com/apache/hive/pull/1724#discussion_r553299154", "createdAt": "2021-01-07T12:30:37Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDQ4OTE4", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563448918", "createdAt": "2021-01-07T12:31:54Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjozMTo1NFrOIPqu5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjozMTo1NFrOIPqu5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTY4Nw==", "bodyText": "please use uppercase literals", "url": "https://github.com/apache/hive/pull/1724#discussion_r553299687", "createdAt": "2021-01-07T12:31:54Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDU0Nzcw", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563454770", "createdAt": "2021-01-07T12:42:10Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0MjoxMFrOIPrBGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0MjoxMFrOIPrBGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNDM0NQ==", "bodyText": "'+' lock for correlation", "url": "https://github.com/apache/hive/pull/1724#discussion_r553304345", "createdAt": "2021-01-07T12:42:10Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDU2MjEz", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563456213", "createdAt": "2021-01-07T12:44:35Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NDozNVrOIPrFWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NDozNVrOIPrFWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNTQzMg==", "bodyText": "could you please remove unneeded nesting here", "url": "https://github.com/apache/hive/pull/1724#discussion_r553305432", "createdAt": "2021-01-07T12:44:35Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDU2ODkw", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563456890", "createdAt": "2021-01-07T12:45:48Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NTo0OFrOIPrHiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo0NTo0OFrOIPrHiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNTk5Mw==", "bodyText": "nit. space", "url": "https://github.com/apache/hive/pull/1724#discussion_r553305993", "createdAt": "2021-01-07T12:45:48Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDYwMjIz", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563460223", "createdAt": "2021-01-07T12:51:32Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo1MTozMlrOIPrROw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjo1MTozMlrOIPrROw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwODQ3NQ==", "bodyText": "I assume we don't have enum for this.", "url": "https://github.com/apache/hive/pull/1724#discussion_r553308475", "createdAt": "2021-01-07T12:51:32Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDY1NDYy", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563465462", "createdAt": "2021-01-07T13:00:14Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowMDoxNFrOIPrhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowMDoxNFrOIPrhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMjU1NA==", "bodyText": "minor: i would prefer stream api here, but you can ignore it..\nif (locks.stream().filter().anyMatch()){..}", "url": "https://github.com/apache/hive/pull/1724#discussion_r553312554", "createdAt": "2021-01-07T13:00:14Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",\n+                               queryPlan.getQueryStr(),\n+                               conf);\n+\n+    HiveLockObject lock = new HiveLockObject(baseTable,lockData);\n+\n+    for (HiveLockObj hiveLockObj : lockObjects) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDY2NzIw", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563466720", "createdAt": "2021-01-07T13:02:15Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowMjoxNVrOIPrkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowMjoxNVrOIPrkzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMzQ4NQ==", "bodyText": "minor: tbd.getLbCtx() != null && tbd.getLbCtx().isSkewedStoredAsDir()", "url": "https://github.com/apache/hive/pull/1724#discussion_r553313485", "createdAt": "2021-01-07T13:02:15Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",\n+                               queryPlan.getQueryStr(),\n+                               conf);\n+\n+    HiveLockObject lock = new HiveLockObject(baseTable,lockData);\n+\n+    for (HiveLockObj hiveLockObj : lockObjects) {\n+      if (Arrays.equals(hiveLockObj.getObj().getPaths(), lock.getPaths())) {\n+        HiveLockMode l = hiveLockObj.getMode();\n+        if (l == HiveLockMode.EXCLUSIVE || l == HiveLockMode.SEMI_SHARED) {\n+          // no need to lock ; already owns a more powerful one\n+          return new LocalTableLock(Optional.empty());\n+        }\n+      }\n+    }\n+\n+    return new LocalTableLock(Optional.of(lock));\n+  }\n+\n   private boolean isSkewedStoredAsDirs(LoadTableDesc tbd) {\n     return (tbd.getLbCtx() == null) ? false : tbd.getLbCtx()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDY4ODk2", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563468896", "createdAt": "2021-01-07T13:05:43Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowNTo0NFrOIPrrEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowNTo0NFrOIPrrEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxNTA5MQ==", "bodyText": "unnecessary brackets", "url": "https://github.com/apache/hive/pull/1724#discussion_r553315091", "createdAt": "2021-01-07T13:05:44Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java", "diffHunk": "@@ -429,9 +430,12 @@ private ZooKeeperHiveLock lockPrimitive(HiveLockObject key,\n       if (child.startsWith(exLock)) {\n         childSeq = getSequenceNumber(child, exLock);\n       }\n-      if ((mode == HiveLockMode.EXCLUSIVE) && child.startsWith(shLock)) {\n+      if ((mode == HiveLockMode.EXCLUSIVE) && (child.startsWith(shLock))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDc2NTky", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563476592", "createdAt": "2021-01-07T13:18:11Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxODoxMVrOIPsC4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxODoxMVrOIPsC4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTE4NQ==", "bodyText": "i think, it doesn't have to be static", "url": "https://github.com/apache/hive/pull/1724#discussion_r553321185", "createdAt": "2021-01-07T13:18:11Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -281,6 +279,7 @@ public static boolean isRenameAllowed(Database srcDB, Database destDB) {\n     static AtomicInteger databaseCount, tableCount, partCount;\n \n     private Warehouse wh; // hdfs warehouse\n+    private static Striped<Lock> tablelocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDc3NDg3", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563477487", "createdAt": "2021-01-07T13:19:31Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxOTozMlrOIPsFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxOTozMlrOIPsFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTgyMQ==", "bodyText": "unnecessary brackets", "url": "https://github.com/apache/hive/pull/1724#discussion_r553321821", "createdAt": "2021-01-07T13:19:32Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -3461,7 +3474,7 @@ private Table getTableInternal(String catName, String dbname, String name,\n               LOG.warn(\"Unexpected resultset size:\" + ret.size());\n               throw new MetaException(\"Unexpected result from metadata transformer:return list size is \" + ret.size());\n             }\n-            t = (Table)(ret.keySet().iterator().next());\n+            t = (ret.keySet().iterator().next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDgwOTE4", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563480918", "createdAt": "2021-01-07T13:24:41Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoyNDo0MVrOIPsPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoyNDo0MVrOIPsPjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyNDQyOQ==", "bodyText": "could we call unlock here, before even propagation?", "url": "https://github.com/apache/hive/pull/1724#discussion_r553324429", "createdAt": "2021-01-07T13:24:41Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -4355,17 +4376,20 @@ private int add_partitions_pspec_core(RawStore ms, String catName, String dbName\n         success = ms.commitTransaction();\n         return addedPartitions.size();\n       } finally {\n-        if (!success) {\n-          ms.rollbackTransaction();\n-          cleanupPartitionFolders(addedPartitions, db);\n-        }\n-\n-        if (!listeners.isEmpty()) {\n-          MetaStoreListenerNotifier.notifyEvent(listeners,\n-                                                EventType.ADD_PARTITION,\n-                                                new AddPartitionEvent(tbl, partitionSpecProxy, true, this),\n-                                                null,\n-                                                transactionalListenerResponses, ms);\n+        try {\n+          if (!success) {\n+            ms.rollbackTransaction();\n+            cleanupPartitionFolders(addedPartitions, db);\n+          }\n+          if (!listeners.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "originalPosition": 195}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDgyODY2", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-563482866", "createdAt": "2021-01-07T13:27:34Z", "commit": {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd0ceb89e05d0e57eb47e05a43dc5742ca5201c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/7cd0ceb89e05d0e57eb47e05a43dc5742ca5201c", "committedDate": "2021-01-14T12:38:44Z", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24428-addpart-dataloss"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/4255c30933191999b7e1f76c90809e8e4e3eee8c", "committedDate": "2021-01-14T13:56:14Z", "message": "address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda3803a9edc35630ca4cb28ec6f39fe1358f69a", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/cda3803a9edc35630ca4cb28ec6f39fe1358f69a", "committedDate": "2021-01-14T14:01:46Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072d6124f3ee6572f083204ed91140ad0020fd7c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/072d6124f3ee6572f083204ed91140ad0020fd7c", "committedDate": "2021-01-14T14:05:28Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e1193b22c53364df7ada8675d29ad76fa3e429", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/87e1193b22c53364df7ada8675d29ad76fa3e429", "committedDate": "2021-01-14T14:14:26Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e659783b690616a7417e1dc829044435104b34e", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/1e659783b690616a7417e1dc829044435104b34e", "committedDate": "2021-01-14T14:25:47Z", "message": "move get to a method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c9d441d70b2c2b44114faf3ae280a06c1b43f7", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/75c9d441d70b2c2b44114faf3ae280a06c1b43f7", "committedDate": "2021-01-14T14:26:25Z", "message": "indent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ccb63f6dbbe7252d379f944c61507c7a4d1a08c", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/3ccb63f6dbbe7252d379f944c61507c7a4d1a08c", "committedDate": "2021-01-19T15:00:54Z", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24428-addpart-dataloss"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60386bfc53b93f980d4e02afcad3cba5669b3279", "author": {"user": {"login": "kgyrtkirk", "name": "Zoltan Haindrich"}}, "url": "https://github.com/apache/hive/commit/60386bfc53b93f980d4e02afcad3cba5669b3279", "committedDate": "2021-01-19T15:41:40Z", "message": "add extra check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNTYwMjIy", "url": "https://github.com/apache/hive/pull/1724#pullrequestreview-571560222", "createdAt": "2021-01-19T19:05:35Z", "commit": {"oid": "60386bfc53b93f980d4e02afcad3cba5669b3279"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2844, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}