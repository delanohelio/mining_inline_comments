{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MzcwNzgw", "number": 1501, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoxNTo1OFrOEj64SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxNDozM1rOEkE25Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTAwMjk3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoxNTo1OFrOHSjTwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo1MzoyOFrOHTYJqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNDkxMw==", "bodyText": "Shouldn't isCompactionTable return true in both cases? Isn't it a problem the other places we use this util, that the mmCompactionTable are missed?", "url": "https://github.com/apache/hive/pull/1501#discussion_r489214913", "createdAt": "2020-09-16T07:15:58Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -445,14 +446,23 @@ public static boolean isCompactionTable(Properties tblProperties) {\n   }\n \n   /**\n-   * Determine if a table is used during query based compaction.\n+   * Determine if a table is used during query based compaction for CRUD tables.\n    * @param parameters table properties map\n    * @return true, if the parameters contains {@link AcidUtils#COMPACTOR_TABLE_PROPERTY}\n    */\n   public static boolean isCompactionTable(Map<String, String> parameters) {\n     return Boolean.valueOf(parameters.getOrDefault(COMPACTOR_TABLE_PROPERTY, \"false\"));\n   }\n \n+  /**\n+   * Determine if a table is used during query based compaction for MM insert-only tables.\n+   * @param parameters table properties map\n+   * @return true, if the parameters contains {@link AcidUtils#MM_COMPACTOR_TABLE_PROPERTY}\n+   */\n+  public static boolean isMmCompactionTable(Map<String, String> parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f11408494eaa6da0e83be54a52712abb76e3a949"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1MDExOA==", "bodyText": "isCompactionTable logically would be true for both full acid and mm tables, but until now we've only used it to mark tables used for compacting full acid tables. AFAIK we don't want to apply the operations we do on full acid compaction tables to mm compaction tables.\nI could rename isCompactionTable() to isFullAcidCompactionTable() for easier reading, would that do?", "url": "https://github.com/apache/hive/pull/1501#discussion_r489250118", "createdAt": "2020-09-16T08:16:21Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -445,14 +446,23 @@ public static boolean isCompactionTable(Properties tblProperties) {\n   }\n \n   /**\n-   * Determine if a table is used during query based compaction.\n+   * Determine if a table is used during query based compaction for CRUD tables.\n    * @param parameters table properties map\n    * @return true, if the parameters contains {@link AcidUtils#COMPACTOR_TABLE_PROPERTY}\n    */\n   public static boolean isCompactionTable(Map<String, String> parameters) {\n     return Boolean.valueOf(parameters.getOrDefault(COMPACTOR_TABLE_PROPERTY, \"false\"));\n   }\n \n+  /**\n+   * Determine if a table is used during query based compaction for MM insert-only tables.\n+   * @param parameters table properties map\n+   * @return true, if the parameters contains {@link AcidUtils#MM_COMPACTOR_TABLE_PROPERTY}\n+   */\n+  public static boolean isMmCompactionTable(Map<String, String> parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNDkxMw=="}, "originalCommit": {"oid": "f11408494eaa6da0e83be54a52712abb76e3a949"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4MDY4Mg==", "bodyText": "Done.", "url": "https://github.com/apache/hive/pull/1501#discussion_r490080682", "createdAt": "2020-09-17T08:53:28Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -445,14 +446,23 @@ public static boolean isCompactionTable(Properties tblProperties) {\n   }\n \n   /**\n-   * Determine if a table is used during query based compaction.\n+   * Determine if a table is used during query based compaction for CRUD tables.\n    * @param parameters table properties map\n    * @return true, if the parameters contains {@link AcidUtils#COMPACTOR_TABLE_PROPERTY}\n    */\n   public static boolean isCompactionTable(Map<String, String> parameters) {\n     return Boolean.valueOf(parameters.getOrDefault(COMPACTOR_TABLE_PROPERTY, \"false\"));\n   }\n \n+  /**\n+   * Determine if a table is used during query based compaction for MM insert-only tables.\n+   * @param parameters table properties map\n+   * @return true, if the parameters contains {@link AcidUtils#MM_COMPACTOR_TABLE_PROPERTY}\n+   */\n+  public static boolean isMmCompactionTable(Map<String, String> parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNDkxMw=="}, "originalCommit": {"oid": "f11408494eaa6da0e83be54a52712abb76e3a949"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjYzNzgxOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxNDozM1rOHSy9Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1OTo0NVrOHTWGTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3MTI5OQ==", "bodyText": "Would it make sense to include the hashes for the fs instances in the debug logs?", "url": "https://github.com/apache/hive/pull/1501#discussion_r489471299", "createdAt": "2020-09-16T14:14:33Z", "author": {"login": "zchovan"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -4475,7 +4481,8 @@ public static boolean moveFile(final HiveConf conf, Path srcf, final Path destf,\n         destFs.copyFromLocalFile(srcf, destf);\n         return true;\n       } else {\n-        if (needToCopy(conf, srcf, destf, srcFs, destFs, configuredOwner, isManaged)) {\n+        if (needToCopy(conf, srcf, destf, srcFs, destFs, configuredOwner, isManaged, isCompactionTable,\n+            isMmCompactionTable)) {\n           //copy if across file system or encryption zones.\n           LOG.debug(\"Copying source \" + srcf + \" to \" + destf + \" because HDFS encryption zones are different.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f11408494eaa6da0e83be54a52712abb76e3a949"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NzA1Mg==", "bodyText": "I think only in hdfs-common (FS.close() et al) \u2013 I opened HADOOP-17267 to track it.", "url": "https://github.com/apache/hive/pull/1501#discussion_r490047052", "createdAt": "2020-09-17T07:59:45Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java", "diffHunk": "@@ -4475,7 +4481,8 @@ public static boolean moveFile(final HiveConf conf, Path srcf, final Path destf,\n         destFs.copyFromLocalFile(srcf, destf);\n         return true;\n       } else {\n-        if (needToCopy(conf, srcf, destf, srcFs, destFs, configuredOwner, isManaged)) {\n+        if (needToCopy(conf, srcf, destf, srcFs, destFs, configuredOwner, isManaged, isCompactionTable,\n+            isMmCompactionTable)) {\n           //copy if across file system or encryption zones.\n           LOG.debug(\"Copying source \" + srcf + \" to \" + destf + \" because HDFS encryption zones are different.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3MTI5OQ=="}, "originalCommit": {"oid": "f11408494eaa6da0e83be54a52712abb76e3a949"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 439, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}