{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNTYyMjM4", "number": 1684, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1MTozN1rOE-qZZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NjoxN1rOE-qhkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQxNzk4OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1MTozN1rOH77-hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoyNDo1M1rOH8lSgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMDY5Mg==", "bodyText": "This function is called from SemanticAnalyzer and its subclasses. I haven't found any other invocations. Is it necessary to change this to static ?", "url": "https://github.com/apache/hive/pull/1684#discussion_r532610692", "createdAt": "2020-11-30T13:51:37Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "diffHunk": "@@ -4453,7 +4452,7 @@ private boolean isAggregateInSelect(Node node, Collection<ASTNode> aggregateFunc\n    * Returns whether the pattern is a regex expression (instead of a normal\n    * string). Normal string is a string with all alphabets/digits and \"_\".\n    */\n-  boolean isRegex(String pattern, HiveConf conf) {\n+  static boolean isRegex(String pattern, HiveConf conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIxNzA4NA==", "bodyText": "this patch adds a call to this method from ParseUtils  ; that's why it was neccessary to change it to at least static", "url": "https://github.com/apache/hive/pull/1684#discussion_r533217084", "createdAt": "2020-12-01T09:29:20Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "diffHunk": "@@ -4453,7 +4452,7 @@ private boolean isAggregateInSelect(Node node, Collection<ASTNode> aggregateFunc\n    * Returns whether the pattern is a regex expression (instead of a normal\n    * string). Normal string is a string with all alphabets/digits and \"_\".\n    */\n-  boolean isRegex(String pattern, HiveConf conf) {\n+  static boolean isRegex(String pattern, HiveConf conf) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMDY5Mg=="}, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NzU1NA==", "bodyText": "found it.", "url": "https://github.com/apache/hive/pull/1684#discussion_r533287554", "createdAt": "2020-12-01T10:24:53Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java", "diffHunk": "@@ -4453,7 +4452,7 @@ private boolean isAggregateInSelect(Node node, Collection<ASTNode> aggregateFunc\n    * Returns whether the pattern is a regex expression (instead of a normal\n    * string). Normal string is a string with all alphabets/digits and \"_\".\n    */\n-  boolean isRegex(String pattern, HiveConf conf) {\n+  static boolean isRegex(String pattern, HiveConf conf) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMDY5Mg=="}, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQyNTk5OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/PrivilegesTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1MzoyOFrOH78DYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1MzoyOFrOH78DYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMTkzOA==", "bodyText": "nit: space\nqueryState, db, ctx);", "url": "https://github.com/apache/hive/pull/1684#discussion_r532611938", "createdAt": "2020-11-30T13:53:28Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/PrivilegesTestBase.java", "diffHunk": "@@ -35,8 +37,9 @@\n \n   public static void grantUserTable(String privStr, PrivilegeType privType, QueryState queryState, Hive db)\n       throws Exception {\n+    Context ctx=new Context(new HiveConf());\n     DDLWork work = AuthorizationTestUtil.analyze(\n-        \"GRANT \" + privStr + \" ON TABLE \" + TABLE + \" TO USER \" + USER, queryState, db);\n+        \"GRANT \" + privStr + \" ON TABLE \" + TABLE + \" TO USER \" + USER, queryState, db,ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQyOTQyOnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/TestHiveAuthorizationTaskFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NDoyNVrOH78FnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NDoyNVrOH78FnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjUwOA==", "bodyText": "nit: space\ndb, new Context", "url": "https://github.com/apache/hive/pull/1684#discussion_r532612508", "createdAt": "2020-11-30T13:54:25Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/TestHiveAuthorizationTaskFactory.java", "diffHunk": "@@ -457,7 +458,7 @@ public void testGrantServer() throws Exception {\n   }\n \n   private DDLWork analyze(String command) throws Exception {\n-    return AuthorizationTestUtil.analyze(command, queryState, db);\n+    return AuthorizationTestUtil.analyze(command, queryState, db,new Context(queryState.getConf()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQzMzI0OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/tool/TestLineageInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NToxMVrOH78HvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NToxMVrOH78HvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMzA1Mg==", "bodyText": "nit: space\ns.hr='11'\", ctx);", "url": "https://github.com/apache/hive/pull/1684#discussion_r532613052", "createdAt": "2020-11-30T13:55:11Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/tool/TestLineageInfo.java", "diffHunk": "@@ -58,7 +76,7 @@ public void testSimpleQuery() {\n     try {\n       lep.getLineageInfo(\"INSERT OVERWRITE TABLE dest1 partition (ds = '111')  \" \n           + \"SELECT s.* FROM srcpart TABLESAMPLE (BUCKET 1 OUT OF 1) s \" \n-          + \"WHERE s.ds='2008-04-08' and s.hr='11'\");\n+          + \"WHERE s.ds='2008-04-08' and s.hr='11'\",ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQzNzY3OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/tool/TestLineageInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NjowM1rOH78KTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NjowM1rOH78KTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMzcwOQ==", "bodyText": "c.c4\", ctx);", "url": "https://github.com/apache/hive/pull/1684#discussion_r532613709", "createdAt": "2020-11-30T13:56:03Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/tool/TestLineageInfo.java", "diffHunk": "@@ -71,47 +89,37 @@ public void testSimpleQuery() {\n   }\n \n   @Test\n-  public void testSimpleQuery2() {\n+  public void testSimpleQuery2() throws Exception {\n     LineageInfo lep = new LineageInfo();\n-    try {\n-      lep.getLineageInfo(\"FROM (FROM src select src.key, src.value \" \n-          + \"WHERE src.key < 10 UNION ALL FROM src SELECT src.* WHERE src.key > 10 ) unioninput \" \n-          + \"INSERT OVERWRITE DIRECTORY '../../../../build/contrib/hive/ql/test/data/warehouse/union.out' \" \n-          + \"SELECT unioninput.*\");\n-      TreeSet<String> i = new TreeSet<String>();\n-      TreeSet<String> o = new TreeSet<String>();\n-      i.add(\"src\");\n-      checkOutput(lep, i, o);\n-    } catch (Exception e) {\n-      e.printStackTrace();\n-      fail(\"Failed\");\n-    }\n+    lep.getLineageInfo(\"FROM (FROM src select src.key, src.value \"\n+        + \"WHERE src.key < 10 UNION ALL FROM src SELECT src.* WHERE src.key > 10 ) unioninput \"\n+        + \"INSERT OVERWRITE DIRECTORY '../../../../build/contrib/hive/ql/test/data/warehouse/union.out' \"\n+        + \"SELECT unioninput.*\",ctx);\n+    TreeSet<String> i = new TreeSet<String>();\n+    TreeSet<String> o = new TreeSet<String>();\n+    i.add(\"src\");\n+    checkOutput(lep, i, o);\n   }\n \n   @Test\n-  public void testSimpleQuery3() {\n+  public void testSimpleQuery3() throws Exception {\n     LineageInfo lep = new LineageInfo();\n-    try {\n-      lep.getLineageInfo(\"FROM (FROM src select src.key, src.value \" \n-          + \"WHERE src.key < 10 UNION ALL FROM src1 SELECT src1.* WHERE src1.key > 10 ) unioninput \" \n-          + \"INSERT OVERWRITE DIRECTORY '../../../../build/contrib/hive/ql/test/data/warehouse/union.out' \" \n-          + \"SELECT unioninput.*\");\n-      TreeSet<String> i = new TreeSet<String>();\n-      TreeSet<String> o = new TreeSet<String>();\n-      i.add(\"src\");\n-      i.add(\"src1\");\n-      checkOutput(lep, i, o);\n-    } catch (Exception e) {\n-      e.printStackTrace();\n-      fail(\"Failed\");\n-    }\n+    lep.getLineageInfo(\"FROM (FROM src select src.key, src.value \"\n+        + \"WHERE src.key < 10 UNION ALL FROM src1 SELECT src1.* WHERE src1.key > 10 ) unioninput \"\n+        + \"INSERT OVERWRITE DIRECTORY '../../../../build/contrib/hive/ql/test/data/warehouse/union.out' \"\n+        + \"SELECT unioninput.*\",ctx);\n+    TreeSet<String> i = new TreeSet<String>();\n+    TreeSet<String> o = new TreeSet<String>();\n+    i.add(\"src\");\n+    i.add(\"src1\");\n+    checkOutput(lep, i, o);\n   }\n \n   @Test\n   public void testSimpleQuery4() {\n     LineageInfo lep = new LineageInfo();\n     try {\n-      lep.getLineageInfo(\"FROM ( FROM ( FROM src1 src1 SELECT src1.key AS c1, src1.value AS c2 WHERE src1.key > 10 and src1.key < 20) a RIGHT OUTER JOIN ( FROM src2 src2 SELECT src2.key AS c3, src2.value AS c4 WHERE src2.key > 15 and src2.key < 25) b ON (a.c1 = b.c3) SELECT a.c1 AS c1, a.c2 AS c2, b.c3 AS c3, b.c4 AS c4) c SELECT c.c1, c.c2, c.c3, c.c4\");\n+      lep.getLineageInfo(\"FROM ( FROM ( FROM src1 src1 SELECT src1.key AS c1, src1.value AS c2 WHERE src1.key > 10 and src1.key < 20) a RIGHT OUTER JOIN ( FROM src2 src2 SELECT src2.key AS c3, src2.value AS c4 WHERE src2.key > 15 and src2.key < 25) b ON (a.c1 = b.c3) SELECT a.c1 AS c1, a.c2 AS c2, b.c3 AS c3, b.c4 AS c4) c SELECT c.c1, c.c2, c.c3, c.c4\",ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQzODkwOnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/tool/TestLineageInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NjoxN1rOH78K_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NjoxN1rOH78K_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMzg4NQ==", "bodyText": "(a.x = b.y)\", ctx);", "url": "https://github.com/apache/hive/pull/1684#discussion_r532613885", "createdAt": "2020-11-30T13:56:17Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/tool/TestLineageInfo.java", "diffHunk": "@@ -128,7 +136,7 @@ public void testSimpleQuery5() {\n     LineageInfo lep = new LineageInfo();\n     try {\n       lep.getLineageInfo(\"insert overwrite table x select a.y, b.y \" \n-          + \"from a a full outer join b b on (a.x = b.y)\");\n+          + \"from a a full outer join b b on (a.x = b.y)\",ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d3a531a53a779c4f2c69ab2eda94b2f88e8814"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 254, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}