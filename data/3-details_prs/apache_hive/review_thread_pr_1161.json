{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDE1NjI1", "number": 1161, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0NjowMlrOEJqreg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowOToyOFrOEM1Jsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTcxODk4OnYy", "diffSide": "LEFT", "path": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0NjowMlrOGqRtQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0NjowMlrOGqRtQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MzQ4OQ==", "bodyText": "So, I understand why this would be removed from a find-bugs perspective (this is a no-op), but this is actually an all around bug.  This should be:\n// for dirs user needs execute privileges as well\nFsAction dirActionNeeded = (isDir) ? action.and(FsAction.EXECUTE) : action;", "url": "https://github.com/apache/hive/pull/1161#discussion_r446983489", "createdAt": "2020-06-29T13:46:02Z", "author": {"login": "belugabehr"}, "path": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java", "diffHunk": "@@ -483,12 +483,6 @@ public static boolean isActionPermittedForFileHierarchy(FileSystem fs, FileStatu\n       String userName, FsAction action, boolean recurse) throws Exception {\n     boolean isDir = fileStatus.isDir();\n \n-    FsAction dirActionNeeded = action;\n-    if (isDir) {\n-      // for dirs user needs execute privileges as well\n-      dirActionNeeded.and(FsAction.EXECUTE);\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285e08f0979003f897db88e280a3267c5256c316"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc0MjcxOnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MTowMlrOGqR7nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MTowMlrOGqR7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NzE2NQ==", "bodyText": "Please change this to just use String#join and more human friendly.\nSet<String> engines = new HashSet<>(ConfVars.HIVE_EXECUTION_ENGINE.getValidStringValues());\nboolean removedMR = engines.remove(\"mr\");\nLOG.debug(\"Found and removed MapReduce engine from list of valid execution engines: {}\", removedMR);\nreturn String.join(\", \", engines);", "url": "https://github.com/apache/hive/pull/1161#discussion_r446987165", "createdAt": "2020-06-29T13:51:02Z", "author": {"login": "belugabehr"}, "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -6475,17 +6477,17 @@ private static boolean isAllowed(Configuration conf, ConfVars setting) {\n   }\n \n   public static String getNonMrEngines() {\n-    String result = StringUtils.EMPTY;\n+    StringBuffer result = new StringBuffer();\n     for (String s : ConfVars.HIVE_EXECUTION_ENGINE.getValidStringValues()) {\n       if (\"mr\".equals(s)) {\n         continue;\n       }\n-      if (!result.isEmpty()) {\n-        result += \", \";\n+      if (result.length() != 0) {\n+        result.append(\", \");\n       }\n-      result += s;\n+      result.append(s);\n     }\n-    return result;\n+    return result.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285e08f0979003f897db88e280a3267c5256c316"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzM0MzUwOnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxMjowNVrOGtbkow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowMDozNVrOGukn3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MDg1MQ==", "bodyText": "this change will leave the file registered in the shutdownmanager in case the file was already deleted", "url": "https://github.com/apache/hive/pull/1161#discussion_r450290851", "createdAt": "2020-07-06T15:12:05Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java", "diffHunk": "@@ -926,8 +925,7 @@ public static File createLocalDirsTempFile(Configuration conf, String prefix, St\n    * delete a temporary file and remove it from delete-on-exit hook.\n    */\n   public static boolean deleteTmpFile(File tempFile) {\n-    if (tempFile != null) {\n-      tempFile.delete();\n+    if (tempFile != null && tempFile.delete()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4NzcwOQ==", "bodyText": "Good catch, fixed", "url": "https://github.com/apache/hive/pull/1161#discussion_r451487709", "createdAt": "2020-07-08T12:00:35Z", "author": {"login": "pgaref"}, "path": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java", "diffHunk": "@@ -926,8 +925,7 @@ public static File createLocalDirsTempFile(Configuration conf, String prefix, St\n    * delete a temporary file and remove it from delete-on-exit hook.\n    */\n   public static boolean deleteTmpFile(File tempFile) {\n-    if (tempFile != null) {\n-      tempFile.delete();\n+    if (tempFile != null && tempFile.delete()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MDg1MQ=="}, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzM1OTEwOnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxNTo0MFrOGtbuFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowMjo0NVrOGukr_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MzI2OQ==", "bodyText": "I know it's probably out of scope in this patch - but in case the value is already \"interned\" - then it will not change; at a cost of a conditional we can skip the hash lookup(put) as well", "url": "https://github.com/apache/hive/pull/1161#discussion_r450293269", "createdAt": "2020-07-06T15:15:40Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java", "diffHunk": "@@ -135,10 +135,10 @@ public static Path internUriStringsInPath(Path path) {\n \n   public static <K> Map<K, String> internValuesInMap(Map<K, String> map) {\n     if (map != null) {\n-      for (K key : map.keySet()) {\n-        String value = map.get(key);\n+      for (Map.Entry<K, String> entry : map.entrySet()) {\n+        String value = entry.getValue();\n         if (value != null) {\n-          map.put(key, value.intern());\n+          map.put(entry.getKey(), value.intern());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4ODc2Nw==", "bodyText": "Nice idea! I followed similar logic to check if values are already interned in all helper methods in StringInternUtils class", "url": "https://github.com/apache/hive/pull/1161#discussion_r451488767", "createdAt": "2020-07-08T12:02:45Z", "author": {"login": "pgaref"}, "path": "common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java", "diffHunk": "@@ -135,10 +135,10 @@ public static Path internUriStringsInPath(Path path) {\n \n   public static <K> Map<K, String> internValuesInMap(Map<K, String> map) {\n     if (map != null) {\n-      for (K key : map.keySet()) {\n-        String value = map.get(key);\n+      for (Map.Entry<K, String> entry : map.entrySet()) {\n+        String value = entry.getValue();\n         if (value != null) {\n-          map.put(key, value.intern());\n+          map.put(entry.getKey(), value.intern());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MzI2OQ=="}, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzM3MTU2OnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/common/type/HiveVarchar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxODozNFrOGtb1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxODozNFrOGtb1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5NTIwOQ==", "bodyText": "nice catch! :D", "url": "https://github.com/apache/hive/pull/1161#discussion_r450295209", "createdAt": "2020-07-06T15:18:34Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hadoop/hive/common/type/HiveVarchar.java", "diffHunk": "@@ -62,6 +62,9 @@ public boolean equals(Object rhs) {\n     if (rhs == this) {\n       return true;\n     }\n-    return this.getValue().equals(((HiveVarchar)rhs).getValue());\n+    if (rhs instanceof HiveVarchar) {\n+      return this.getValue().equals(((HiveVarchar) rhs).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzM5NzgzOnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/conf/Validator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyNDozNlrOGtcFow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowMzo0MlrOGukt6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5OTI5OQ==", "bodyText": "I think this should be something else than null - did the old behaviour accept null as a valid path? I believe Files.isDirectory(null) returned false....\nlooking from the other end: I don't think null should be accepted as a \"writeabledirectory\"", "url": "https://github.com/apache/hive/pull/1161#discussion_r450299299", "createdAt": "2020-07-06T15:24:36Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hadoop/hive/conf/Validator.java", "diffHunk": "@@ -357,14 +357,15 @@ public String validate(String value) {\n       final Path path = FileSystems.getDefault().getPath(value);\n       if (path == null && value != null) {\n         return String.format(\"Path '%s' provided could not be located.\", value);\n-      }\n-      final boolean isDir = Files.isDirectory(path);\n-      final boolean isWritable = Files.isWritable(path);\n-      if (!isDir) {\n-        return String.format(\"Path '%s' provided is not a directory.\", value);\n-      }\n-      if (!isWritable) {\n-        return String.format(\"Path '%s' provided is not writable.\", value);\n+      } else if (path != null) {\n+        final boolean isDir = Files.isDirectory(path);\n+        final boolean isWritable = Files.isWritable(path);\n+        if (!isDir) {\n+          return String.format(\"Path '%s' provided is not a directory.\", value);\n+        }\n+        if (!isWritable) {\n+          return String.format(\"Path '%s' provided is not writable.\", value);\n+        }\n       }\n       return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4OTI1OA==", "bodyText": "Refactored the code to return early when the argument is actually null, the following logic is now simplified to Null and non null path", "url": "https://github.com/apache/hive/pull/1161#discussion_r451489258", "createdAt": "2020-07-08T12:03:42Z", "author": {"login": "pgaref"}, "path": "common/src/java/org/apache/hadoop/hive/conf/Validator.java", "diffHunk": "@@ -357,14 +357,15 @@ public String validate(String value) {\n       final Path path = FileSystems.getDefault().getPath(value);\n       if (path == null && value != null) {\n         return String.format(\"Path '%s' provided could not be located.\", value);\n-      }\n-      final boolean isDir = Files.isDirectory(path);\n-      final boolean isWritable = Files.isWritable(path);\n-      if (!isDir) {\n-        return String.format(\"Path '%s' provided is not a directory.\", value);\n-      }\n-      if (!isWritable) {\n-        return String.format(\"Path '%s' provided is not writable.\", value);\n+      } else if (path != null) {\n+        final boolean isDir = Files.isDirectory(path);\n+        final boolean isWritable = Files.isWritable(path);\n+        if (!isDir) {\n+          return String.format(\"Path '%s' provided is not a directory.\", value);\n+        }\n+        if (!isWritable) {\n+          return String.format(\"Path '%s' provided is not writable.\", value);\n+        }\n       }\n       return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5OTI5OQ=="}, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzQwMzIzOnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyNTo1MFrOGtcI7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowMzo1N1rOGukuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMDE0MQ==", "bodyText": "I think at some point we should probably introduce some rule to ensure that every file ends with a newline...but for now: could you add one here ? :D", "url": "https://github.com/apache/hive/pull/1161#discussion_r450300141", "createdAt": "2020-07-06T15:25:50Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.common.util;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+@Retention(RetentionPolicy.CLASS)\n+public @interface SuppressFBWarnings {\n+    /**\n+     * The set of FindBugs warnings that are to be suppressed in\n+     * annotated element. The value can be a bug category, kind or pattern.\n+     *\n+     */\n+    String[] value() default {};\n+\n+    /**\n+     * Optional documentation of the reason why the warning is suppressed\n+     */\n+    String justification() default \"\";\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4OTM4MA==", "bodyText": "Sure, done :)", "url": "https://github.com/apache/hive/pull/1161#discussion_r451489380", "createdAt": "2020-07-08T12:03:57Z", "author": {"login": "pgaref"}, "path": "common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.common.util;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+@Retention(RetentionPolicy.CLASS)\n+public @interface SuppressFBWarnings {\n+    /**\n+     * The set of FindBugs warnings that are to be suppressed in\n+     * annotated element. The value can be a bug category, kind or pattern.\n+     *\n+     */\n+    String[] value() default {};\n+\n+    /**\n+     * Optional documentation of the reason why the warning is suppressed\n+     */\n+    String justification() default \"\";\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMDE0MQ=="}, "originalCommit": {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM3Njk0OnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/DagJsonParserUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo0ODo1NVrOGvFpfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjo1MDo1NVrOGvPrNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyODc5OQ==", "bodyText": "the issue here was:\n\nmissing final\nnaming convention\n\nI don't think we need that static method...but no big deal", "url": "https://github.com/apache/hive/pull/1161#discussion_r452028799", "createdAt": "2020-07-09T07:48:55Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/DagJsonParserUtils.java", "diffHunk": "@@ -26,9 +28,13 @@\n \n public class DagJsonParserUtils {\n \n-  public static List<String> OperatorNoStats = Arrays.asList(new String[] { \"File Output Operator\",\n+  private static final List<String> operatorNoStats = Arrays.asList(new String[] { \"File Output Operator\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbed3ff5e69d81cedae9c1254a90326d26a19d63"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MzA3Ng==", "bodyText": "Well, it kinda needs to be static as Op class is using it directly within getNameWithOpIdStats method", "url": "https://github.com/apache/hive/pull/1161#discussion_r452193076", "createdAt": "2020-07-09T12:50:55Z", "author": {"login": "pgaref"}, "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/DagJsonParserUtils.java", "diffHunk": "@@ -26,9 +28,13 @@\n \n public class DagJsonParserUtils {\n \n-  public static List<String> OperatorNoStats = Arrays.asList(new String[] { \"File Output Operator\",\n+  private static final List<String> operatorNoStats = Arrays.asList(new String[] { \"File Output Operator\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyODc5OQ=="}, "originalCommit": {"oid": "dbed3ff5e69d81cedae9c1254a90326d26a19d63"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM5NzUzOnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/ql/log/PerfLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NTowMVrOGvF2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjo1MTowNlrOGvPrqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjE0MQ==", "bodyText": "it's not just \"spotbugs\" who don't like these method names :D\nit certainly out of scope of this patch - but I think they should be improved - could you open a jira for it? :)", "url": "https://github.com/apache/hive/pull/1161#discussion_r452032141", "createdAt": "2020-07-09T07:55:01Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hadoop/hive/ql/log/PerfLogger.java", "diffHunk": "@@ -133,6 +134,7 @@ public static void setPerfLogger(PerfLogger resetPerfLogger) {\n    * @param callerName the logging object to be used.\n    * @param method method or ID that identifies this perf log element.\n    */\n+  @SuppressFBWarnings(value = \"NM_METHOD_NAMING_CONVENTION\", justification = \"Intended\")\n   public void PerfLogBegin(String callerName, String method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbed3ff5e69d81cedae9c1254a90326d26a19d63"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MzE5Mg==", "bodyText": "Sure, opened HIVE-23823 for tracking this", "url": "https://github.com/apache/hive/pull/1161#discussion_r452193192", "createdAt": "2020-07-09T12:51:06Z", "author": {"login": "pgaref"}, "path": "common/src/java/org/apache/hadoop/hive/ql/log/PerfLogger.java", "diffHunk": "@@ -133,6 +134,7 @@ public static void setPerfLogger(PerfLogger resetPerfLogger) {\n    * @param callerName the logging object to be used.\n    * @param method method or ID that identifies this perf log element.\n    */\n+  @SuppressFBWarnings(value = \"NM_METHOD_NAMING_CONVENTION\", justification = \"Intended\")\n   public void PerfLogBegin(String callerName, String method) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjE0MQ=="}, "originalCommit": {"oid": "dbed3ff5e69d81cedae9c1254a90326d26a19d63"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODg5MjAyOnYy", "diffSide": "RIGHT", "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowOToyOFrOGvKoww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzowMzoyMFrOGvQIbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMDUzMQ==", "bodyText": "interesting choices were made when this class was created...\nthe most important fields seems to be String name, JSONObject vertexObject, Stage stage\npassing the parser in the constructor is an interesting idea...\nalthough this equals resorts to identity comparision - I don't see that so out of scope for this class...", "url": "https://github.com/apache/hive/pull/1161#discussion_r452110531", "createdAt": "2020-07-09T10:09:28Z", "author": {"login": "kgyrtkirk"}, "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java", "diffHunk": "@@ -308,6 +309,16 @@ public void setType(String type) {\n     this.edgeType = this.parser.mapEdgeType(type);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    return  super.equals(o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbed3ff5e69d81cedae9c1254a90326d26a19d63"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMDU1OQ==", "bodyText": "You are right comparison could be implemented as part of the class (added that part).\nRegarding the parser I agree it should not be a field, only given as parameter where needed -- there are more places where we follow this weird logic and should probably be addressed all together: \n  \n    \n      hive/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Stage.java\n    \n    \n         Line 52\n      in\n      ba0217f\n    \n    \n    \n    \n\n        \n          \n           public Stage(String name, DagJsonParser tezJsonParser) { \n        \n    \n  \n\n\nand\n\n  \n    \n      hive/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Op.java\n    \n    \n         Line 58\n      in\n      99f21bb\n    \n    \n    \n    \n\n        \n          \n           Map<String, String> attrs, JSONObject opObject, Vertex vertex, DagJsonParser tezJsonParser)", "url": "https://github.com/apache/hive/pull/1161#discussion_r452200559", "createdAt": "2020-07-09T13:03:20Z", "author": {"login": "pgaref"}, "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java", "diffHunk": "@@ -308,6 +309,16 @@ public void setType(String type) {\n     this.edgeType = this.parser.mapEdgeType(type);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    return  super.equals(o);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMDUzMQ=="}, "originalCommit": {"oid": "dbed3ff5e69d81cedae9c1254a90326d26a19d63"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 675, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}