{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzgwODk1", "number": 1087, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToyMDoyM1rOEJGMxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzoxMFrOEJ_h4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTc0MjE1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToyMDoyM1rOGpdPgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1Mzo1OVrOGtdSDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyMzkwNw==", "bodyText": "redundant check (sessionTxnMgr != null), see if condition above", "url": "https://github.com/apache/hive/pull/1087#discussion_r446123907", "createdAt": "2020-06-26T11:20:23Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2392,33 +2392,29 @@ public static TableSnapshot getTableSnapshot(Configuration conf,\n     long writeId = -1;\n     ValidWriteIdList validWriteIdList = null;\n \n-    HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n-    String fullTableName = getFullTableName(dbName, tblName);\n-    if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n-      validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n-      if (isStatsUpdater) {\n-        writeId = SessionState.get().getTxnMgr() != null ?\n-                SessionState.get().getTxnMgr().getAllocatedTableWriteId(\n-                  dbName, tblName) : -1;\n-        if (writeId < 1) {\n-          // TODO: this is not ideal... stats updater that doesn't have write ID is currently\n-          //       \"create table\"; writeId would be 0/-1 here. No need to call this w/true.\n-          LOG.debug(\"Stats updater for {}.{} doesn't have a write ID ({})\",\n-              dbName, tblName, writeId);\n+    if (SessionState.get() != null) {\n+      HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n+      String fullTableName = getFullTableName(dbName, tblName);\n+      if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n+        validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n+        if (isStatsUpdater) {\n+          writeId = sessionTxnMgr != null ? sessionTxnMgr.getAllocatedTableWriteId(dbName, tblName) : -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxODg2MQ==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450318861", "createdAt": "2020-07-06T15:53:59Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2392,33 +2392,29 @@ public static TableSnapshot getTableSnapshot(Configuration conf,\n     long writeId = -1;\n     ValidWriteIdList validWriteIdList = null;\n \n-    HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n-    String fullTableName = getFullTableName(dbName, tblName);\n-    if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n-      validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n-      if (isStatsUpdater) {\n-        writeId = SessionState.get().getTxnMgr() != null ?\n-                SessionState.get().getTxnMgr().getAllocatedTableWriteId(\n-                  dbName, tblName) : -1;\n-        if (writeId < 1) {\n-          // TODO: this is not ideal... stats updater that doesn't have write ID is currently\n-          //       \"create table\"; writeId would be 0/-1 here. No need to call this w/true.\n-          LOG.debug(\"Stats updater for {}.{} doesn't have a write ID ({})\",\n-              dbName, tblName, writeId);\n+    if (SessionState.get() != null) {\n+      HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n+      String fullTableName = getFullTableName(dbName, tblName);\n+      if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n+        validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n+        if (isStatsUpdater) {\n+          writeId = sessionTxnMgr != null ? sessionTxnMgr.getAllocatedTableWriteId(dbName, tblName) : -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyMzkwNw=="}, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTc1MzQ0OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToyNDoyNFrOGpdWRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyNzozNFrOGtcNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNTYzOQ==", "bodyText": "i think it can't be null, it returns ThreadLocal variable", "url": "https://github.com/apache/hive/pull/1087#discussion_r446125639", "createdAt": "2020-06-26T11:24:24Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2392,33 +2392,29 @@ public static TableSnapshot getTableSnapshot(Configuration conf,\n     long writeId = -1;\n     ValidWriteIdList validWriteIdList = null;\n \n-    HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n-    String fullTableName = getFullTableName(dbName, tblName);\n-    if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n-      validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n-      if (isStatsUpdater) {\n-        writeId = SessionState.get().getTxnMgr() != null ?\n-                SessionState.get().getTxnMgr().getAllocatedTableWriteId(\n-                  dbName, tblName) : -1;\n-        if (writeId < 1) {\n-          // TODO: this is not ideal... stats updater that doesn't have write ID is currently\n-          //       \"create table\"; writeId would be 0/-1 here. No need to call this w/true.\n-          LOG.debug(\"Stats updater for {}.{} doesn't have a write ID ({})\",\n-              dbName, tblName, writeId);\n+    if (SessionState.get() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMTM0OA==", "bodyText": "It can be null, if the sessionstate was not set properly, it was failing one of the tests, i can't remember which.", "url": "https://github.com/apache/hive/pull/1087#discussion_r450301348", "createdAt": "2020-07-06T15:27:34Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2392,33 +2392,29 @@ public static TableSnapshot getTableSnapshot(Configuration conf,\n     long writeId = -1;\n     ValidWriteIdList validWriteIdList = null;\n \n-    HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n-    String fullTableName = getFullTableName(dbName, tblName);\n-    if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n-      validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n-      if (isStatsUpdater) {\n-        writeId = SessionState.get().getTxnMgr() != null ?\n-                SessionState.get().getTxnMgr().getAllocatedTableWriteId(\n-                  dbName, tblName) : -1;\n-        if (writeId < 1) {\n-          // TODO: this is not ideal... stats updater that doesn't have write ID is currently\n-          //       \"create table\"; writeId would be 0/-1 here. No need to call this w/true.\n-          LOG.debug(\"Stats updater for {}.{} doesn't have a write ID ({})\",\n-              dbName, tblName, writeId);\n+    if (SessionState.get() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNTYzOQ=="}, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTc2MTI3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToyNzoyMFrOGpdbOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyODozNlrOGtcQUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNjkwNA==", "bodyText": "is it ever a valid condition?", "url": "https://github.com/apache/hive/pull/1087#discussion_r446126904", "createdAt": "2020-06-26T11:27:20Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2392,33 +2392,29 @@ public static TableSnapshot getTableSnapshot(Configuration conf,\n     long writeId = -1;\n     ValidWriteIdList validWriteIdList = null;\n \n-    HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n-    String fullTableName = getFullTableName(dbName, tblName);\n-    if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n-      validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n-      if (isStatsUpdater) {\n-        writeId = SessionState.get().getTxnMgr() != null ?\n-                SessionState.get().getTxnMgr().getAllocatedTableWriteId(\n-                  dbName, tblName) : -1;\n-        if (writeId < 1) {\n-          // TODO: this is not ideal... stats updater that doesn't have write ID is currently\n-          //       \"create table\"; writeId would be 0/-1 here. No need to call this w/true.\n-          LOG.debug(\"Stats updater for {}.{} doesn't have a write ID ({})\",\n-              dbName, tblName, writeId);\n+    if (SessionState.get() != null) {\n+      HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n+      String fullTableName = getFullTableName(dbName, tblName);\n+      if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n+        validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n+        if (isStatsUpdater) {\n+          writeId = sessionTxnMgr != null ? sessionTxnMgr.getAllocatedTableWriteId(dbName, tblName) : -1;\n+          if (writeId < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMjAzMw==", "bodyText": "The comment said so: \"stats updater that doesn't have write ID is currently \"create table\"; writeId would be 0/-1 here.\"", "url": "https://github.com/apache/hive/pull/1087#discussion_r450302033", "createdAt": "2020-07-06T15:28:36Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java", "diffHunk": "@@ -2392,33 +2392,29 @@ public static TableSnapshot getTableSnapshot(Configuration conf,\n     long writeId = -1;\n     ValidWriteIdList validWriteIdList = null;\n \n-    HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n-    String fullTableName = getFullTableName(dbName, tblName);\n-    if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n-      validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n-      if (isStatsUpdater) {\n-        writeId = SessionState.get().getTxnMgr() != null ?\n-                SessionState.get().getTxnMgr().getAllocatedTableWriteId(\n-                  dbName, tblName) : -1;\n-        if (writeId < 1) {\n-          // TODO: this is not ideal... stats updater that doesn't have write ID is currently\n-          //       \"create table\"; writeId would be 0/-1 here. No need to call this w/true.\n-          LOG.debug(\"Stats updater for {}.{} doesn't have a write ID ({})\",\n-              dbName, tblName, writeId);\n+    if (SessionState.get() != null) {\n+      HiveTxnManager sessionTxnMgr = SessionState.get().getTxnMgr();\n+      String fullTableName = getFullTableName(dbName, tblName);\n+      if (sessionTxnMgr != null && sessionTxnMgr.getCurrentTxnId() > 0) {\n+        validWriteIdList = getTableValidWriteIdList(conf, fullTableName);\n+        if (isStatsUpdater) {\n+          writeId = sessionTxnMgr != null ? sessionTxnMgr.getAllocatedTableWriteId(dbName, tblName) : -1;\n+          if (writeId < 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNjkwNA=="}, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTc5MzQ3OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo0MDowMlrOGpdvFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo0ODozOVrOGtdEhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMTk4OA==", "bodyText": "could you extend TestTxnCommands2 from TxnCommandsBaseForTests and remove static?", "url": "https://github.com/apache/hive/pull/1087#discussion_r446131988", "createdAt": "2020-06-26T11:40:02Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java", "diffHunk": "@@ -2209,20 +2209,7 @@ public void testAcidOrcWritePreservesFieldNames() throws Exception {\n    * sorts rows in dictionary order\n    */\n   static List<String> stringifyValues(int[][] rowsIn) {\n-    assert rowsIn.length > 0;\n-    int[][] rows = rowsIn.clone();\n-    Arrays.sort(rows, new RowComp());\n-    List<String> rs = new ArrayList<String>();\n-    for(int[] row : rows) {\n-      assert row.length > 0;\n-      StringBuilder sb = new StringBuilder();\n-      for(int value : row) {\n-        sb.append(value).append(\"\\t\");\n-      }\n-      sb.setLength(sb.length() - 1);\n-      rs.add(sb.toString());\n-    }\n-    return rs;\n+    return TxnCommandsBaseForTests.stringifyValues(rowsIn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxNTM5Nw==", "bodyText": "I will do this in a separate Jira, started it, but it requires more change.", "url": "https://github.com/apache/hive/pull/1087#discussion_r450315397", "createdAt": "2020-07-06T15:48:39Z", "author": {"login": "pvargacl"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java", "diffHunk": "@@ -2209,20 +2209,7 @@ public void testAcidOrcWritePreservesFieldNames() throws Exception {\n    * sorts rows in dictionary order\n    */\n   static List<String> stringifyValues(int[][] rowsIn) {\n-    assert rowsIn.length > 0;\n-    int[][] rows = rowsIn.clone();\n-    Arrays.sort(rows, new RowComp());\n-    List<String> rs = new ArrayList<String>();\n-    for(int[] row : rows) {\n-      assert row.length > 0;\n-      StringBuilder sb = new StringBuilder();\n-      for(int value : row) {\n-        sb.append(value).append(\"\\t\");\n-      }\n-      sb.setLength(sb.length() - 1);\n-      rs.add(sb.toString());\n-    }\n-    return rs;\n+    return TxnCommandsBaseForTests.stringifyValues(rowsIn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMTk4OA=="}, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTgwMjk5OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/TxnCommandsBaseForTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo0Mzo0NlrOGpd1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1NDowOFrOGtdSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMzUxOQ==", "bodyText": "move RowComp from TestTxnCommands2 to TxnCommandsBaseForTests", "url": "https://github.com/apache/hive/pull/1087#discussion_r446133519", "createdAt": "2020-06-26T11:43:46Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/TxnCommandsBaseForTests.java", "diffHunk": "@@ -162,9 +163,23 @@ protected String getWarehouseDir() {\n    * takes raw data and turns it into a string as if from Driver.getResults()\n    * sorts rows in dictionary order\n    */\n-  List<String> stringifyValues(int[][] rowsIn) {\n-    return TestTxnCommands2.stringifyValues(rowsIn);\n+  public static List<String> stringifyValues(int[][] rowsIn) {\n+    assert rowsIn.length > 0;\n+    int[][] rows = rowsIn.clone();\n+    Arrays.sort(rows, new TestTxnCommands2.RowComp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxODk3MA==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450318970", "createdAt": "2020-07-06T15:54:08Z", "author": {"login": "pvargacl"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/TxnCommandsBaseForTests.java", "diffHunk": "@@ -162,9 +163,23 @@ protected String getWarehouseDir() {\n    * takes raw data and turns it into a string as if from Driver.getResults()\n    * sorts rows in dictionary order\n    */\n-  List<String> stringifyValues(int[][] rowsIn) {\n-    return TestTxnCommands2.stringifyValues(rowsIn);\n+  public static List<String> stringifyValues(int[][] rowsIn) {\n+    assert rowsIn.length > 0;\n+    int[][] rows = rowsIn.clone();\n+    Arrays.sort(rows, new TestTxnCommands2.RowComp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMzUxOQ=="}, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTgwOTQ1OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo0NjowOVrOGpd46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1MTo0OVrOGtdMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNDUwNg==", "bodyText": "why not setIntVar?", "url": "https://github.com/apache/hive/pull/1087#discussion_r446134506", "createdAt": "2020-06-26T11:46:09Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "diffHunk": "@@ -74,21 +76,21 @@\n   @Before\n   public void setUp() throws Exception {\n     hive = Hive.get();\n-    hive.getConf().setIntVar(HiveConf.ConfVars.METASTORE_FS_HANDLER_THREADS_COUNT, 15);\n-    hive.getConf().set(HiveConf.ConfVars.HIVE_MSCK_PATH_VALIDATION.varname, \"throw\");\n+    hive.getConf().set(MetastoreConf.ConfVars.FS_HANDLER_THREADS_COUNT.getVarname(), \"15\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxNzQ1MQ==", "bodyText": "It does not work with MetasoreConf.ConfVars", "url": "https://github.com/apache/hive/pull/1087#discussion_r450317451", "createdAt": "2020-07-06T15:51:49Z", "author": {"login": "pvargacl"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "diffHunk": "@@ -74,21 +76,21 @@\n   @Before\n   public void setUp() throws Exception {\n     hive = Hive.get();\n-    hive.getConf().setIntVar(HiveConf.ConfVars.METASTORE_FS_HANDLER_THREADS_COUNT, 15);\n-    hive.getConf().set(HiveConf.ConfVars.HIVE_MSCK_PATH_VALIDATION.varname, \"throw\");\n+    hive.getConf().set(MetastoreConf.ConfVars.FS_HANDLER_THREADS_COUNT.getVarname(), \"15\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNDUwNg=="}, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg2Njk5OnYy", "diffSide": "RIGHT", "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowNzoyNFrOGpeceA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1NDoxOFrOGtdS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MzYwOA==", "bodyText": "could you please move helper methods at the bottom of the Test class after all tests", "url": "https://github.com/apache/hive/pull/1087#discussion_r446143608", "createdAt": "2020-06-26T12:07:24Z", "author": {"login": "deniskuzZ"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "diffHunk": "@@ -252,37 +241,165 @@ public void testInvalidPartitionKeyName()\n   @Test\n   public void testSkipInvalidPartitionKeyName()\n     throws HiveException, AlreadyExistsException, IOException, MetastoreException {\n-    hive.getConf().set(HiveConf.ConfVars.HIVE_MSCK_PATH_VALIDATION.varname, \"skip\");\n+    hive.getConf().set(MetastoreConf.ConfVars.MSCK_PATH_VALIDATION.getVarname(), \"skip\");\n     checker = new HiveMetaStoreChecker(msc, hive.getConf());\n-    Table table = createTestTable();\n+    Table table = createTestTable(false);\n     List<Partition> partitions = hive.getPartitions(table);\n     assertEquals(2, partitions.size());\n     // add a fake partition dir on fs\n     fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n-    Path fakePart =\n-        new Path(table.getDataLocation().toString(), \"fakedate=2009-01-01/fakecity=sanjose\");\n-    fs.mkdirs(fakePart);\n-    fs.deleteOnExit(fakePart);\n+    addFolderToPath(fs, table.getDataLocation().toString(),\"fakedate=2009-01-01/fakecity=sanjose\");\n     createPartitionsDirectoriesOnFS(table, 2);\n-    CheckResult result = new CheckResult();\n-    checker.checkMetastore(catName, dbName, tableName, null, null, result);\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n     assertEquals(Collections.<String> emptySet(), result.getTablesNotInMs());\n     assertEquals(Collections.<String> emptySet(), result.getTablesNotOnFs());\n     assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n     // only 2 valid partitions should be added\n     assertEquals(2, result.getPartitionsNotInMs().size());\n   }\n \n-  private Table createTestTable() throws HiveException, AlreadyExistsException {\n+  /*\n+   * Tests the case when we have normal delta_dirs in the partition folder\n+   * does not throw HiveException\n+   */\n+  @Test\n+  public void testAddPartitionNormalDeltas() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000010_0000010_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000101_0000101_0000\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(101, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(0, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+  /*\n+   * Tests the case when we have normal delta_dirs in the partition folder\n+   * does not throw HiveException\n+   */\n+  @Test\n+  public void testAddPartitionCompactedDeltas() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000010_0000015_v0000067\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000101_0000120_v0000087\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(120, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(87, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+  @Test\n+  public void testAddPartitionCompactedBase() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000002_0000002_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000003_0000003_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"base_0000003_v0000200\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(3, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(200, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+\n+  @Test\n+  public void testAddPartitionMMBase() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000002_0000002_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000003_0000003_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"base_0000004\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(4, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(0, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+\n+  @Test\n+  public void testNoNPartitionedTable() throws Exception {\n+    Table table = createNonPartitionedTable();\n+    // add a partition dir on fs\n+    fs = table.getDataLocation().getFileSystem(hive.getConf());\n+\n+    Path tablePath = table.getDataLocation();\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, tablePath.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, tablePath.toString(), \"delta_0000002_0000002_0000\");\n+    addFolderToPath(fs, tablePath.toString(), \"delta_0000003_0000003_0000\");\n+    addFolderToPath(fs, tablePath.toString(), \"base_0000003_v0000200\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotInMs());\n+    // Found the highest writeId\n+    assertEquals(3, result.getMaxWriteId());\n+    assertEquals(200, result.getMaxTxnId());\n+  }\n+\n+  private Path addFolderToPath(FileSystem fs, String rootPath, String folder) throws IOException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxOTA4Nw==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450319087", "createdAt": "2020-07-06T15:54:18Z", "author": {"login": "pvargacl"}, "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "diffHunk": "@@ -252,37 +241,165 @@ public void testInvalidPartitionKeyName()\n   @Test\n   public void testSkipInvalidPartitionKeyName()\n     throws HiveException, AlreadyExistsException, IOException, MetastoreException {\n-    hive.getConf().set(HiveConf.ConfVars.HIVE_MSCK_PATH_VALIDATION.varname, \"skip\");\n+    hive.getConf().set(MetastoreConf.ConfVars.MSCK_PATH_VALIDATION.getVarname(), \"skip\");\n     checker = new HiveMetaStoreChecker(msc, hive.getConf());\n-    Table table = createTestTable();\n+    Table table = createTestTable(false);\n     List<Partition> partitions = hive.getPartitions(table);\n     assertEquals(2, partitions.size());\n     // add a fake partition dir on fs\n     fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n-    Path fakePart =\n-        new Path(table.getDataLocation().toString(), \"fakedate=2009-01-01/fakecity=sanjose\");\n-    fs.mkdirs(fakePart);\n-    fs.deleteOnExit(fakePart);\n+    addFolderToPath(fs, table.getDataLocation().toString(),\"fakedate=2009-01-01/fakecity=sanjose\");\n     createPartitionsDirectoriesOnFS(table, 2);\n-    CheckResult result = new CheckResult();\n-    checker.checkMetastore(catName, dbName, tableName, null, null, result);\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n     assertEquals(Collections.<String> emptySet(), result.getTablesNotInMs());\n     assertEquals(Collections.<String> emptySet(), result.getTablesNotOnFs());\n     assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n     // only 2 valid partitions should be added\n     assertEquals(2, result.getPartitionsNotInMs().size());\n   }\n \n-  private Table createTestTable() throws HiveException, AlreadyExistsException {\n+  /*\n+   * Tests the case when we have normal delta_dirs in the partition folder\n+   * does not throw HiveException\n+   */\n+  @Test\n+  public void testAddPartitionNormalDeltas() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000010_0000010_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000101_0000101_0000\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(101, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(0, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+  /*\n+   * Tests the case when we have normal delta_dirs in the partition folder\n+   * does not throw HiveException\n+   */\n+  @Test\n+  public void testAddPartitionCompactedDeltas() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000010_0000015_v0000067\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000101_0000120_v0000087\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(120, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(87, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+  @Test\n+  public void testAddPartitionCompactedBase() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000002_0000002_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000003_0000003_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"base_0000003_v0000200\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(3, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(200, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+\n+  @Test\n+  public void testAddPartitionMMBase() throws Exception {\n+    Table table = createTestTable(true);\n+    List<Partition> partitions = hive.getPartitions(table);\n+    assertEquals(2, partitions.size());\n+    // add a partition dir on fs\n+    fs = partitions.get(0).getDataLocation().getFileSystem(hive.getConf());\n+    Path newPart = addFolderToPath(fs, table.getDataLocation().toString(),\n+        partDateName + \"=2017-01-01/\" + partCityName + \"=paloalto\");\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000002_0000002_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"delta_0000003_0000003_0000\");\n+    addFolderToPath(fs, newPart.toString(), \"base_0000004\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(1, result.getPartitionsNotInMs().size());\n+    // Found the highest writeId\n+    assertEquals(4, result.getPartitionsNotInMs().iterator().next().getMaxWriteId());\n+    assertEquals(0, result.getPartitionsNotInMs().iterator().next().getMaxTxnId());\n+  }\n+\n+  @Test\n+  public void testNoNPartitionedTable() throws Exception {\n+    Table table = createNonPartitionedTable();\n+    // add a partition dir on fs\n+    fs = table.getDataLocation().getFileSystem(hive.getConf());\n+\n+    Path tablePath = table.getDataLocation();\n+\n+    // Add a few deltas\n+    addFolderToPath(fs, tablePath.toString(), \"delta_0000001_0000001_0000\");\n+    addFolderToPath(fs, tablePath.toString(), \"delta_0000002_0000002_0000\");\n+    addFolderToPath(fs, tablePath.toString(), \"delta_0000003_0000003_0000\");\n+    addFolderToPath(fs, tablePath.toString(), \"base_0000003_v0000200\");\n+    CheckResult result = checker.checkMetastore(catName, dbName, tableName, null, null);\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotOnFs());\n+    assertEquals(Collections.<CheckResult.PartitionResult> emptySet(), result.getPartitionsNotInMs());\n+    // Found the highest writeId\n+    assertEquals(3, result.getMaxWriteId());\n+    assertEquals(200, result.getMaxTxnId());\n+  }\n+\n+  private Path addFolderToPath(FileSystem fs, String rootPath, String folder) throws IOException{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MzYwOA=="}, "originalCommit": {"oid": "2d5a3b5cc2d5d006b01a2e0d80b37cb4483d3737"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgzMjAwOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMDo0OFrOGqSzTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjowNjo1OFrOGtdxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTQyMA==", "bodyText": "weird mix of Camel case and underscore", "url": "https://github.com/apache/hive/pull/1087#discussion_r447001420", "createdAt": "2020-06-29T14:10:48Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -8322,6 +8322,22 @@ public AllocateTableWriteIdsResponse allocate_table_write_ids(\n       return response;\n     }\n \n+    @Override\n+    public MaxAllocatedTableWriteIdResponse get_max_allocated_table_write_id(MaxAllocatedTableWriteIdRequest rqst)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyNjg4NQ==", "bodyText": "All the functions in HMS looks like this I don't want to break the pattern. On the second glance, I had to change the seedWriteId and seedTxnId to look like this...", "url": "https://github.com/apache/hive/pull/1087#discussion_r450326885", "createdAt": "2020-07-06T16:06:58Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -8322,6 +8322,22 @@ public AllocateTableWriteIdsResponse allocate_table_write_ids(\n       return response;\n     }\n \n+    @Override\n+    public MaxAllocatedTableWriteIdResponse get_max_allocated_table_write_id(MaxAllocatedTableWriteIdRequest rqst)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTQyMA=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTg0NzI1OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxNDoyMlrOGqS83w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoxOTowN1rOGteOvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMzg3MQ==", "bodyText": "should we answer this question in a current patch?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447003871", "createdAt": "2020-06-29T14:14:22Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -111,24 +120,24 @@ public IMetaStoreClient getMsc() {\n    * @param partitions\n    *          List of partition name value pairs, if null or empty check all\n    *          partitions\n-   * @param table\n-   * @param result\n-   *          Fill this with the results of the check\n+   * @param table Table we want to run the check for.\n+   * @return Results of the check\n    * @throws MetastoreException\n    *           Failed to get required information from the metastore.\n    * @throws IOException\n    *           Most likely filesystem related\n    */\n-  public void checkMetastore(String catName, String dbName, String tableName,\n-      List<? extends Map<String, String>> partitions, Table table, CheckResult result)\n+  public CheckResult checkMetastore(String catName, String dbName, String tableName,\n+      List<? extends Map<String, String>> partitions, Table table)\n       throws MetastoreException, IOException {\n-\n+    CheckResult result = new CheckResult();\n     if (dbName == null || \"\".equalsIgnoreCase(dbName)) {\n       dbName = Warehouse.DEFAULT_DATABASE_NAME;\n     }\n \n     try {\n       if (tableName == null || \"\".equals(tableName)) {\n+        // TODO: I do not think this is used by anything other than tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzNDM5Ng==", "bodyText": "I do not know. If I understand correctly there is no way currently to call MSCK repair without a table specified, but it seems like someone made some effort to create that feature and tests for it. But i don't know if we ever want that in production (calling msck repair for every table seems like a quick way to overwhelm the system)  I left this comment here, for anybody who tries to makes sense of this code.", "url": "https://github.com/apache/hive/pull/1087#discussion_r450334396", "createdAt": "2020-07-06T16:19:07Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -111,24 +120,24 @@ public IMetaStoreClient getMsc() {\n    * @param partitions\n    *          List of partition name value pairs, if null or empty check all\n    *          partitions\n-   * @param table\n-   * @param result\n-   *          Fill this with the results of the check\n+   * @param table Table we want to run the check for.\n+   * @return Results of the check\n    * @throws MetastoreException\n    *           Failed to get required information from the metastore.\n    * @throws IOException\n    *           Most likely filesystem related\n    */\n-  public void checkMetastore(String catName, String dbName, String tableName,\n-      List<? extends Map<String, String>> partitions, Table table, CheckResult result)\n+  public CheckResult checkMetastore(String catName, String dbName, String tableName,\n+      List<? extends Map<String, String>> partitions, Table table)\n       throws MetastoreException, IOException {\n-\n+    CheckResult result = new CheckResult();\n     if (dbName == null || \"\".equalsIgnoreCase(dbName)) {\n       dbName = Warehouse.DEFAULT_DATABASE_NAME;\n     }\n \n     try {\n       if (tableName == null || \"\".equals(tableName)) {\n+        // TODO: I do not think this is used by anything other than tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMzg3MQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjAwNzU0OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo0Nzo0MlrOGqUeFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyNToxOVrOGteeLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyODc1Ng==", "bodyText": "why not use rest.split('_')?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447028756", "createdAt": "2020-06-29T14:47:42Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -429,6 +451,75 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     LOG.debug(\"Number of partitions not in metastore : \" + result.getPartitionsNotInMs().size());\n   }\n \n+  /**\n+   * Calculate the maximum seen writeId from the acid directory structure\n+   * @param partPath Path of the partition directory\n+   * @param res Partition result to write the max ids\n+   * @throws IOException ex\n+   */\n+  private void setMaxTxnAndWriteIdFromPartition(Path partPath, CheckResult.PartitionResult res) throws IOException {\n+    FileSystem fs = partPath.getFileSystem(conf);\n+    FileStatus[] deltaOrBaseFiles = fs.listStatus(partPath, HIDDEN_FILES_PATH_FILTER);\n+\n+    // Read the writeIds from every base and delta directory and find the max\n+    long maxWriteId = 0L;\n+    long maxVisibilityId = 0L;\n+    for(FileStatus fileStatus : deltaOrBaseFiles) {\n+      if (!fileStatus.isDirectory()) {\n+        continue;\n+      }\n+      long writeId = 0L;\n+      long visibilityId = 0L;\n+      String folder = fileStatus.getPath().getName();\n+      if (folder.startsWith(BASE_PREFIX)) {\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        writeId = Long.parseLong(folder.substring(BASE_PREFIX.length()));\n+      } else if (folder.startsWith(DELTA_PREFIX) || folder.startsWith(DELETE_DELTA_PREFIX)) {\n+        // See AcidUtils.parseDelta\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        boolean isDeleteDelta = folder.startsWith(DELETE_DELTA_PREFIX);\n+        String rest = folder.substring((isDeleteDelta ? DELETE_DELTA_PREFIX : DELTA_PREFIX).length());\n+        int split = rest.indexOf('_');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzODM0OA==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450338348", "createdAt": "2020-07-06T16:25:19Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -429,6 +451,75 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     LOG.debug(\"Number of partitions not in metastore : \" + result.getPartitionsNotInMs().size());\n   }\n \n+  /**\n+   * Calculate the maximum seen writeId from the acid directory structure\n+   * @param partPath Path of the partition directory\n+   * @param res Partition result to write the max ids\n+   * @throws IOException ex\n+   */\n+  private void setMaxTxnAndWriteIdFromPartition(Path partPath, CheckResult.PartitionResult res) throws IOException {\n+    FileSystem fs = partPath.getFileSystem(conf);\n+    FileStatus[] deltaOrBaseFiles = fs.listStatus(partPath, HIDDEN_FILES_PATH_FILTER);\n+\n+    // Read the writeIds from every base and delta directory and find the max\n+    long maxWriteId = 0L;\n+    long maxVisibilityId = 0L;\n+    for(FileStatus fileStatus : deltaOrBaseFiles) {\n+      if (!fileStatus.isDirectory()) {\n+        continue;\n+      }\n+      long writeId = 0L;\n+      long visibilityId = 0L;\n+      String folder = fileStatus.getPath().getName();\n+      if (folder.startsWith(BASE_PREFIX)) {\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        writeId = Long.parseLong(folder.substring(BASE_PREFIX.length()));\n+      } else if (folder.startsWith(DELTA_PREFIX) || folder.startsWith(DELETE_DELTA_PREFIX)) {\n+        // See AcidUtils.parseDelta\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        boolean isDeleteDelta = folder.startsWith(DELETE_DELTA_PREFIX);\n+        String rest = folder.substring((isDeleteDelta ? DELETE_DELTA_PREFIX : DELTA_PREFIX).length());\n+        int split = rest.indexOf('_');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyODc1Ng=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjAzOTc2OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo1NDoxNlrOGqUxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowMTozMVrOGtfy0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzc2OA==", "bodyText": "why not use regex with pattern matching? removeVisibilityTxnId probably wouldn't even be needed", "url": "https://github.com/apache/hive/pull/1087#discussion_r447033768", "createdAt": "2020-06-29T14:54:16Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -429,6 +451,75 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     LOG.debug(\"Number of partitions not in metastore : \" + result.getPartitionsNotInMs().size());\n   }\n \n+  /**\n+   * Calculate the maximum seen writeId from the acid directory structure\n+   * @param partPath Path of the partition directory\n+   * @param res Partition result to write the max ids\n+   * @throws IOException ex\n+   */\n+  private void setMaxTxnAndWriteIdFromPartition(Path partPath, CheckResult.PartitionResult res) throws IOException {\n+    FileSystem fs = partPath.getFileSystem(conf);\n+    FileStatus[] deltaOrBaseFiles = fs.listStatus(partPath, HIDDEN_FILES_PATH_FILTER);\n+\n+    // Read the writeIds from every base and delta directory and find the max\n+    long maxWriteId = 0L;\n+    long maxVisibilityId = 0L;\n+    for(FileStatus fileStatus : deltaOrBaseFiles) {\n+      if (!fileStatus.isDirectory()) {\n+        continue;\n+      }\n+      long writeId = 0L;\n+      long visibilityId = 0L;\n+      String folder = fileStatus.getPath().getName();\n+      if (folder.startsWith(BASE_PREFIX)) {\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        writeId = Long.parseLong(folder.substring(BASE_PREFIX.length()));\n+      } else if (folder.startsWith(DELTA_PREFIX) || folder.startsWith(DELETE_DELTA_PREFIX)) {\n+        // See AcidUtils.parseDelta\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        boolean isDeleteDelta = folder.startsWith(DELETE_DELTA_PREFIX);\n+        String rest = folder.substring((isDeleteDelta ? DELETE_DELTA_PREFIX : DELTA_PREFIX).length());\n+        int split = rest.indexOf('_');\n+        //split2 may be -1 if no statementId\n+        int split2 = rest.indexOf('_', split + 1);\n+        // We always want the second part (it is either the same or greater if it is a compacted delta)\n+        writeId = split2 == -1 ? Long.parseLong(rest.substring(split + 1)) : Long\n+            .parseLong(rest.substring(split + 1, split2));\n+      }\n+      if (writeId > maxWriteId) {\n+        maxWriteId = writeId;\n+      }\n+      if (visibilityId > maxVisibilityId) {\n+        maxVisibilityId = visibilityId;\n+      }\n+    }\n+    LOG.debug(\"Max writeId {}, max txnId {} found in partition {}\", maxWriteId, maxVisibilityId,\n+        partPath.toUri().toString());\n+    res.setMaxWriteId(maxWriteId);\n+    res.setMaxTxnId(maxVisibilityId);\n+  }\n+  private long getVisibilityTxnId(String folder) {\n+    int idxOfVis = folder.indexOf(VISIBILITY_PREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MDAxNg==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450360016", "createdAt": "2020-07-06T17:01:31Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -429,6 +451,75 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     LOG.debug(\"Number of partitions not in metastore : \" + result.getPartitionsNotInMs().size());\n   }\n \n+  /**\n+   * Calculate the maximum seen writeId from the acid directory structure\n+   * @param partPath Path of the partition directory\n+   * @param res Partition result to write the max ids\n+   * @throws IOException ex\n+   */\n+  private void setMaxTxnAndWriteIdFromPartition(Path partPath, CheckResult.PartitionResult res) throws IOException {\n+    FileSystem fs = partPath.getFileSystem(conf);\n+    FileStatus[] deltaOrBaseFiles = fs.listStatus(partPath, HIDDEN_FILES_PATH_FILTER);\n+\n+    // Read the writeIds from every base and delta directory and find the max\n+    long maxWriteId = 0L;\n+    long maxVisibilityId = 0L;\n+    for(FileStatus fileStatus : deltaOrBaseFiles) {\n+      if (!fileStatus.isDirectory()) {\n+        continue;\n+      }\n+      long writeId = 0L;\n+      long visibilityId = 0L;\n+      String folder = fileStatus.getPath().getName();\n+      if (folder.startsWith(BASE_PREFIX)) {\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        writeId = Long.parseLong(folder.substring(BASE_PREFIX.length()));\n+      } else if (folder.startsWith(DELTA_PREFIX) || folder.startsWith(DELETE_DELTA_PREFIX)) {\n+        // See AcidUtils.parseDelta\n+        visibilityId = getVisibilityTxnId(folder);\n+        if (visibilityId > 0) {\n+          folder = removeVisibilityTxnId(folder);\n+        }\n+        boolean isDeleteDelta = folder.startsWith(DELETE_DELTA_PREFIX);\n+        String rest = folder.substring((isDeleteDelta ? DELETE_DELTA_PREFIX : DELTA_PREFIX).length());\n+        int split = rest.indexOf('_');\n+        //split2 may be -1 if no statementId\n+        int split2 = rest.indexOf('_', split + 1);\n+        // We always want the second part (it is either the same or greater if it is a compacted delta)\n+        writeId = split2 == -1 ? Long.parseLong(rest.substring(split + 1)) : Long\n+            .parseLong(rest.substring(split + 1, split2));\n+      }\n+      if (writeId > maxWriteId) {\n+        maxWriteId = writeId;\n+      }\n+      if (visibilityId > maxVisibilityId) {\n+        maxVisibilityId = visibilityId;\n+      }\n+    }\n+    LOG.debug(\"Max writeId {}, max txnId {} found in partition {}\", maxWriteId, maxVisibilityId,\n+        partPath.toUri().toString());\n+    res.setMaxWriteId(maxWriteId);\n+    res.setMaxTxnId(maxVisibilityId);\n+  }\n+  private long getVisibilityTxnId(String folder) {\n+    int idxOfVis = folder.indexOf(VISIBILITY_PREFIX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzc2OA=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA2NDI1OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo1OToyNFrOGqVAUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowMzoyN1rOGtf2iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzNzUyMA==", "bodyText": "you can remove 1 nesting level", "url": "https://github.com/apache/hive/pull/1087#discussion_r447037520", "createdAt": "2020-06-29T14:59:24Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MDk2OQ==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450360969", "createdAt": "2020-07-06T17:03:27Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzNzUyMA=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA2NzAyOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo1OTo1OVrOGqVCEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowNDowMFrOGtf3sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzNzk2OA==", "bodyText": "not formatted", "url": "https://github.com/apache/hive/pull/1087#discussion_r447037968", "createdAt": "2020-06-29T14:59:59Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MTI2Ng==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450361266", "createdAt": "2020-07-06T17:04:00Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzNzk2OA=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA4OTM5OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowNDo1NlrOGqVQFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowNDo1OFrOGtf5wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MTU1OQ==", "bodyText": "you can do success &= writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds)\nfor readability", "url": "https://github.com/apache/hive/pull/1087#discussion_r447041559", "createdAt": "2020-06-29T15:04:56Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MTc5Mg==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450361792", "createdAt": "2020-07-06T17:04:58Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MTU1OQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA5MzA2OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowNTozOFrOGqVSTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowNTowNVrOGtf6Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MjEyNQ==", "bodyText": "same  success &= closeTxn(qualifiedTableName, success, txnId)", "url": "https://github.com/apache/hive/pull/1087#discussion_r447042125", "createdAt": "2020-06-29T15:05:38Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MTg4Mw==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450361883", "createdAt": "2020-07-06T17:05:05Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MjEyNQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEwODc0OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowOToxMVrOGqVcOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowNjowMlrOGtf8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NDY2Nw==", "bodyText": "should we use error level here?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447044667", "createdAt": "2020-06-29T15:09:11Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MjM4Mg==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450362382", "createdAt": "2020-07-06T17:06:02Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NDY2Nw=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEwOTk0OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowOToyNlrOGqVdAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowNjowOVrOGtf8UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NDg2Ng==", "bodyText": "error level?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447044866", "createdAt": "2020-06-29T15:09:26Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MjQ0OQ==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450362449", "createdAt": "2020-07-06T17:06:09Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NDg2Ng=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjExNzMxOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMTowNlrOGqVhgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowNTo1NFrOGt3zdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NjAxNg==", "bodyText": "why calling log.info so many times?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447046016", "createdAt": "2020-06-29T15:11:06Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MzM5Ng==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450753396", "createdAt": "2020-07-07T10:05:54Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NjAxNg=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE0ODYyOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxNzo1NVrOGqV02g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowNzowN1rOGt31-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MDk3MA==", "bodyText": "should we pass already sorted collection here? it's a bad practice to mutate object parameters in a method.", "url": "https://github.com/apache/hive/pull/1087#discussion_r447050970", "createdAt": "2020-06-29T15:17:55Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NDA0MA==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450754040", "createdAt": "2020-07-07T10:07:07Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MDk3MA=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE1OTM2OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyMDoxNlrOGqV7dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowNzo0MFrOGt33GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MjY2Mw==", "bodyText": "error level?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447052663", "createdAt": "2020-06-29T15:20:16Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);\n+      for (String rout : repairOutput) {\n+        if (firstWritten) {\n+          resultOut.write(terminator);\n+        } else {\n+          firstWritten = true;\n+        }\n+        resultOut.write(rout);\n+      }\n     } catch (IOException e) {\n-      LOG.warn(\"Unable to get logged in user via UGI. err: {}\", e.getMessage());\n+      LOG.warn(\"Failed to save metacheck output: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NDMyOA==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450754328", "createdAt": "2020-07-07T10:07:40Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);\n+      for (String rout : repairOutput) {\n+        if (firstWritten) {\n+          resultOut.write(terminator);\n+        } else {\n+          firstWritten = true;\n+        }\n+        resultOut.write(rout);\n+      }\n     } catch (IOException e) {\n-      LOG.warn(\"Unable to get logged in user via UGI. err: {}\", e.getMessage());\n+      LOG.warn(\"Failed to save metacheck output: \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MjY2Mw=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE2NTI4OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyMTozOFrOGqV_NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoxMjoyMlrOGt4A1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MzYyMQ==", "bodyText": "why not use  try-with-resources?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447053621", "createdAt": "2020-06-29T15:21:38Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);\n+      for (String rout : repairOutput) {\n+        if (firstWritten) {\n+          resultOut.write(terminator);\n+        } else {\n+          firstWritten = true;\n+        }\n+        resultOut.write(rout);\n+      }\n     } catch (IOException e) {\n-      LOG.warn(\"Unable to get logged in user via UGI. err: {}\", e.getMessage());\n+      LOG.warn(\"Failed to save metacheck output: \", e);\n+      success = false;\n+    } finally {\n+      if (resultOut != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NjgyMg==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450756822", "createdAt": "2020-07-07T10:12:22Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);\n+      for (String rout : repairOutput) {\n+        if (firstWritten) {\n+          resultOut.write(terminator);\n+        } else {\n+          firstWritten = true;\n+        }\n+        resultOut.write(rout);\n+      }\n     } catch (IOException e) {\n-      LOG.warn(\"Unable to get logged in user via UGI. err: {}\", e.getMessage());\n+      LOG.warn(\"Failed to save metacheck output: \", e);\n+      success = false;\n+    } finally {\n+      if (resultOut != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MzYyMQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODgzNDc3OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoxNjo0OVrOGqu7Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoxODozM1rOGt4N4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2MjE3MQ==", "bodyText": "could we move error messages to final variables (constants)?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447462171", "createdAt": "2020-06-30T07:16:49Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2MDE2Mw==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450760163", "createdAt": "2020-07-07T10:18:33Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2MjE3MQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODg3NjIyOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoyODowNlrOGqvUAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0Mjo1MFrOGt6xJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2ODU0NQ==", "bodyText": "what if we would like to ship FS deltas to the backup HMS due to some replication issue? could you please elaborate what issues do you see in increasing writeId in HMS to match FS?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447468545", "createdAt": "2020-06-30T07:28:06Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);\n+      for (String rout : repairOutput) {\n+        if (firstWritten) {\n+          resultOut.write(terminator);\n+        } else {\n+          firstWritten = true;\n+        }\n+        resultOut.write(rout);\n+      }\n     } catch (IOException e) {\n-      LOG.warn(\"Unable to get logged in user via UGI. err: {}\", e.getMessage());\n+      LOG.warn(\"Failed to save metacheck output: \", e);\n+      success = false;\n+    } finally {\n+      if (resultOut != null) {\n+        try {\n+          resultOut.close();\n+        } catch (IOException e) {\n+          LOG.warn(\"Failed to close output file: \", e);\n+          success = false;\n+        }\n+      }\n     }\n-    if (loggedInUser == null) {\n-      username = System.getProperty(\"user.name\");\n-    } else {\n-      username = loggedInUser.getShortUserName();\n+    return success;\n+  }\n+\n+  /**\n+   * When we add new partitions to a transactional table, we have check the writeIds.\n+   * For every newly added partitions, we read the maximum writeId form the directory structure\n+   * and compare it to the maximum allocated writeId in the metastore.\n+   * If the metastore has never allocated any were are good, the use case would be initialize a table with\n+   * existing data. The HMS will be initialized with the maximum writeId. The system will handle every delta directory\n+   * as committed ones.\n+   * If the writeId is higher in the metastore we can still accept the data, the use case would be after some dataloss\n+   * some older data backup was used. The system would able to read the old data.\n+   * If however the writeId in the new partition is greater than the maximum allocated in the HMS\n+   * we must raise an error. The writedId in the HMS should be increased to match the writeIds in the data files,\n+   * but it would most likely cause a lot of problem since the transactional data would become inconsistent\n+   * between the HMS and the filesystem.\n+   * Further more we need to check for the visibilityTransactionIds written by the compaction.\n+   * If we have a higher visibilityId in the directory structure than the current transactionid we need to set\n+   * the transactionId sequence higher in the HMS so the next reads may read the content of the\n+   * compacted base/delta folders.\n+   * @param partsNotInMs partitions only in the FileSystem\n+   * @param dbName database name\n+   * @param tableName table name\n+   * @param txnId actual transactionId\n+   */\n+  private void validateAndAddMaxTxnIdAndWriteId(Set<CheckResult.PartitionResult> partsNotInMs, String dbName,\n+      String tableName, long txnId) throws TException {\n+    long maxWriteIdOnFilesystem =\n+        partsNotInMs.stream().map(CheckResult.PartitionResult::getMaxWriteId).max(Long::compareTo).orElse(0L);\n+    long maxVisibilityTxnId =\n+        partsNotInMs.stream().map(CheckResult.PartitionResult::getMaxTxnId).max(Long::compareTo).orElse(0L);\n+    validateAndAddMaxTxnIdAndWriteId(maxWriteIdOnFilesystem, maxVisibilityTxnId, dbName, tableName, txnId);\n+  }\n+\n+  private void validateAndAddMaxTxnIdAndWriteId(long maxWriteIdOnFilesystem, long maxVisibilityTxnId, String dbName,\n+      String tableName, long txnId) throws TException {\n+    long maxAllocatedWriteId = getMsc().getMaxAllocatedWriteId(dbName, tableName);\n+    if (maxAllocatedWriteId > 0 && maxWriteIdOnFilesystem > maxAllocatedWriteId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTk1OQ==", "bodyText": "My problem here is, that I don't see how we will end up in a consistent state in that case, when the filesystem will have deltas with writeId-s that are not in the hms. We would start using higher writeIds and the next transactions will start to read those deltas, but how will the compaction work, if there are no transaction information for those writes? who will clean those folders? I think it would become a mess.", "url": "https://github.com/apache/hive/pull/1087#discussion_r450801959", "createdAt": "2020-07-07T11:42:50Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -229,102 +239,168 @@ public int repair(MsckInfo msckInfo) {\n             throw new MetastoreException(e);\n           }\n         }\n+        if (transactionalTable && !MetaStoreServerUtils.isPartitioned(table)) {\n+          if (result.getMaxWriteId() > 0) {\n+            if (txnId < 0) {\n+              // We need the txnId to check against even if we didn't do the locking\n+              txnId = getMsc().openTxn(getUserName());\n+            }\n+\n+            validateAndAddMaxTxnIdAndWriteId(result.getMaxWriteId(), result.getMaxTxnId(),\n+                table.getDbName(), table.getTableName(), txnId);\n+          }\n+        }\n       }\n       success = true;\n     } catch (Exception e) {\n       LOG.warn(\"Failed to run metacheck: \", e);\n       success = false;\n-      ret = 1;\n     } finally {\n-      if (msckInfo.getResFile() != null) {\n-        BufferedWriter resultOut = null;\n-        try {\n-          Path resFile = new Path(msckInfo.getResFile());\n-          FileSystem fs = resFile.getFileSystem(getConf());\n-          resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n-\n-          boolean firstWritten = false;\n-          firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n-            \"Tables not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n-            \"Tables missing on filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n-            \"Partitions not in metastore:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n-            \"Partitions missing from filesystem:\", resultOut, firstWritten);\n-          firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n-            \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n-          // sorting to stabilize qfile output (msck_repair_drop.q)\n-          Collections.sort(repairOutput);\n-          for (String rout : repairOutput) {\n-            if (firstWritten) {\n-              resultOut.write(terminator);\n-            } else {\n-              firstWritten = true;\n-            }\n-            resultOut.write(rout);\n-          }\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to save metacheck output: \", e);\n-          ret = 1;\n-        } finally {\n-          if (resultOut != null) {\n-            try {\n-              resultOut.close();\n-            } catch (IOException e) {\n-              LOG.warn(\"Failed to close output file: \", e);\n-              ret = 1;\n-            }\n-          }\n+      if (result!=null) {\n+        logResult(result);\n+        if (msckInfo.getResFile() != null) {\n+          success = writeResultToFile(msckInfo, result, repairOutput, partitionExpirySeconds) && success;\n         }\n       }\n \n-      LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n-      LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n-      LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n-      LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n-      LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n-      if (acquireLock && txnId > 0) {\n-          if (success) {\n-            try {\n-              LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n-              getMsc().commitTxn(txnId);\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          } else {\n-            try {\n-              LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n-              getMsc().abortTxns(Lists.newArrayList(txnId));\n-            } catch (Exception e) {\n-              LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n-              ret = 1;\n-            }\n-          }\n+      if (txnId > 0) {\n+        success = closeTxn(qualifiedTableName, success, txnId) && success;\n       }\n       if (getMsc() != null) {\n         getMsc().close();\n         msc = null;\n       }\n     }\n+    return success ? 0 : 1;\n+  }\n \n+  private boolean closeTxn(String qualifiedTableName, boolean success, long txnId) {\n+    boolean ret = true;\n+    if (success) {\n+      try {\n+        LOG.info(\"txnId: {} succeeded. Committing..\", txnId);\n+        getMsc().commitTxn(txnId);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while committing txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    } else {\n+      try {\n+        LOG.info(\"txnId: {} failed. Aborting..\", txnId);\n+        getMsc().abortTxns(Lists.newArrayList(txnId));\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while aborting txnId: {} for table: {}\", txnId, qualifiedTableName, e);\n+        ret = false;\n+      }\n+    }\n     return ret;\n   }\n \n-  private LockRequest createLockRequest(final String dbName, final String tableName) throws TException {\n-    UserGroupInformation loggedInUser = null;\n-    String username;\n+  private void logResult(CheckResult result) {\n+    LOG.info(\"Tables not in metastore: {}\", result.getTablesNotInMs());\n+    LOG.info(\"Tables missing on filesystem: {}\", result.getTablesNotOnFs());\n+    LOG.info(\"Partitions not in metastore: {}\", result.getPartitionsNotInMs());\n+    LOG.info(\"Partitions missing from filesystem: {}\", result.getPartitionsNotOnFs());\n+    LOG.info(\"Expired partitions: {}\", result.getExpiredPartitions());\n+  }\n+\n+  private boolean writeResultToFile(MsckInfo msckInfo, CheckResult result, List<String> repairOutput,\n+      long partitionExpirySeconds) {\n+    boolean success = true;\n+    BufferedWriter resultOut = null;\n     try {\n-      loggedInUser = UserGroupInformation.getLoginUser();\n+      Path resFile = new Path(msckInfo.getResFile());\n+      FileSystem fs = resFile.getFileSystem(getConf());\n+      resultOut = new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));\n+\n+      boolean firstWritten = false;\n+      firstWritten |= writeMsckResult(result.getTablesNotInMs(),\n+        \"Tables not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getTablesNotOnFs(),\n+        \"Tables missing on filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotInMs(),\n+        \"Partitions not in metastore:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getPartitionsNotOnFs(),\n+        \"Partitions missing from filesystem:\", resultOut, firstWritten);\n+      firstWritten |= writeMsckResult(result.getExpiredPartitions(),\n+        \"Expired partitions (retention period: \" + partitionExpirySeconds + \"s) :\", resultOut, firstWritten);\n+      // sorting to stabilize qfile output (msck_repair_drop.q)\n+      Collections.sort(repairOutput);\n+      for (String rout : repairOutput) {\n+        if (firstWritten) {\n+          resultOut.write(terminator);\n+        } else {\n+          firstWritten = true;\n+        }\n+        resultOut.write(rout);\n+      }\n     } catch (IOException e) {\n-      LOG.warn(\"Unable to get logged in user via UGI. err: {}\", e.getMessage());\n+      LOG.warn(\"Failed to save metacheck output: \", e);\n+      success = false;\n+    } finally {\n+      if (resultOut != null) {\n+        try {\n+          resultOut.close();\n+        } catch (IOException e) {\n+          LOG.warn(\"Failed to close output file: \", e);\n+          success = false;\n+        }\n+      }\n     }\n-    if (loggedInUser == null) {\n-      username = System.getProperty(\"user.name\");\n-    } else {\n-      username = loggedInUser.getShortUserName();\n+    return success;\n+  }\n+\n+  /**\n+   * When we add new partitions to a transactional table, we have check the writeIds.\n+   * For every newly added partitions, we read the maximum writeId form the directory structure\n+   * and compare it to the maximum allocated writeId in the metastore.\n+   * If the metastore has never allocated any were are good, the use case would be initialize a table with\n+   * existing data. The HMS will be initialized with the maximum writeId. The system will handle every delta directory\n+   * as committed ones.\n+   * If the writeId is higher in the metastore we can still accept the data, the use case would be after some dataloss\n+   * some older data backup was used. The system would able to read the old data.\n+   * If however the writeId in the new partition is greater than the maximum allocated in the HMS\n+   * we must raise an error. The writedId in the HMS should be increased to match the writeIds in the data files,\n+   * but it would most likely cause a lot of problem since the transactional data would become inconsistent\n+   * between the HMS and the filesystem.\n+   * Further more we need to check for the visibilityTransactionIds written by the compaction.\n+   * If we have a higher visibilityId in the directory structure than the current transactionid we need to set\n+   * the transactionId sequence higher in the HMS so the next reads may read the content of the\n+   * compacted base/delta folders.\n+   * @param partsNotInMs partitions only in the FileSystem\n+   * @param dbName database name\n+   * @param tableName table name\n+   * @param txnId actual transactionId\n+   */\n+  private void validateAndAddMaxTxnIdAndWriteId(Set<CheckResult.PartitionResult> partsNotInMs, String dbName,\n+      String tableName, long txnId) throws TException {\n+    long maxWriteIdOnFilesystem =\n+        partsNotInMs.stream().map(CheckResult.PartitionResult::getMaxWriteId).max(Long::compareTo).orElse(0L);\n+    long maxVisibilityTxnId =\n+        partsNotInMs.stream().map(CheckResult.PartitionResult::getMaxTxnId).max(Long::compareTo).orElse(0L);\n+    validateAndAddMaxTxnIdAndWriteId(maxWriteIdOnFilesystem, maxVisibilityTxnId, dbName, tableName, txnId);\n+  }\n+\n+  private void validateAndAddMaxTxnIdAndWriteId(long maxWriteIdOnFilesystem, long maxVisibilityTxnId, String dbName,\n+      String tableName, long txnId) throws TException {\n+    long maxAllocatedWriteId = getMsc().getMaxAllocatedWriteId(dbName, tableName);\n+    if (maxAllocatedWriteId > 0 && maxWriteIdOnFilesystem > maxAllocatedWriteId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2ODU0NQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 299}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODkwNDk2OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzozNjowOFrOGqvlXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoyOTozOFrOGt4kUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3Mjk4OQ==", "bodyText": "why  not to log content of addMsgs", "url": "https://github.com/apache/hive/pull/1087#discussion_r447472989", "createdAt": "2020-06-30T07:36:08Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -383,6 +475,7 @@ public Void execute(int size) throws MetastoreException {\n               partsToAdd.add(partition);\n               lastBatch.add(part);\n               addMsgs.add(String.format(addMsgFormat, part.getPartitionName()));\n+              LOG.debug(String.format(addMsgFormat, part.getPartitionName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2NTkwNQ==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450765905", "createdAt": "2020-07-07T10:29:38Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/Msck.java", "diffHunk": "@@ -383,6 +475,7 @@ public Void execute(int size) throws MetastoreException {\n               partsToAdd.add(partition);\n               lastBatch.add(part);\n               addMsgs.add(String.format(addMsgFormat, part.getPartitionName()));\n+              LOG.debug(String.format(addMsgFormat, part.getPartitionName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3Mjk4OQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODkyNDc2OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0MTowOVrOGqvxeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo1MzoyNFrOGt5Sng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NjA4OQ==", "bodyText": "minor: i would probably create EnumMap for SEED_FN, and use proper one based on db type.", "url": "https://github.com/apache/hive/pull/1087#discussion_r447476089", "createdAt": "2020-06-30T07:41:09Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "diffHunk": "@@ -313,6 +313,41 @@ private static void resetTxnSequence(Connection conn, Statement stmt) throws SQL\n     }\n   }\n \n+  /**\n+   * Restarts the txnId sequence with the given seed value.\n+   * It is the responsibility of the caller to not set the sequence backward.\n+   * @param conn database connection\n+   * @param stmt sql statement\n+   * @param seedTxnId the seed value for the sequence\n+   * @throws SQLException ex\n+   */\n+  public static void seedTxnSequence(Connection conn, Statement stmt, long seedTxnId) throws SQLException {\n+    String dbProduct = conn.getMetaData().getDatabaseProductName();\n+    DatabaseProduct databaseProduct = determineDatabaseProduct(dbProduct);\n+    switch (databaseProduct) {\n+\n+    case DERBY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3Nzc1OA==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450777758", "createdAt": "2020-07-07T10:53:24Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnDbUtil.java", "diffHunk": "@@ -313,6 +313,41 @@ private static void resetTxnSequence(Connection conn, Statement stmt) throws SQL\n     }\n   }\n \n+  /**\n+   * Restarts the txnId sequence with the given seed value.\n+   * It is the responsibility of the caller to not set the sequence backward.\n+   * @param conn database connection\n+   * @param stmt sql statement\n+   * @param seedTxnId the seed value for the sequence\n+   * @throws SQLException ex\n+   */\n+  public static void seedTxnSequence(Connection conn, Statement stmt, long seedTxnId) throws SQLException {\n+    String dbProduct = conn.getMetaData().getDatabaseProductName();\n+    DatabaseProduct databaseProduct = determineDatabaseProduct(dbProduct);\n+    switch (databaseProduct) {\n+\n+    case DERBY:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NjA4OQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODkzMzg4OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0Mzo0MFrOGqv3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowOTo1MVrOGt5xyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NzUyMg==", "bodyText": "should we have a query constant?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447477522", "createdAt": "2020-06-30T07:43:40Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        List<String> params = Arrays.asList(dbName, tableName);\n+        String query = \"SELECT \\\"NWI_NEXT\\\" FROM \\\"NEXT_WRITE_ID\\\" WHERE \\\"NWI_DATABASE\\\" = ? AND \\\"NWI_TABLE\\\" = ?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NTczOA==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450785738", "createdAt": "2020-07-07T11:09:51Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        List<String> params = Arrays.asList(dbName, tableName);\n+        String query = \"SELECT \\\"NWI_NEXT\\\" FROM \\\"NEXT_WRITE_ID\\\" WHERE \\\"NWI_DATABASE\\\" = ? AND \\\"NWI_TABLE\\\" = ?\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NzUyMg=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk0MjYwOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0NjowMFrOGqv8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowOTo1NlrOGt5yBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODkxMA==", "bodyText": "what to rollback, you have select here?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447478910", "createdAt": "2020-06-30T07:46:00Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        List<String> params = Arrays.asList(dbName, tableName);\n+        String query = \"SELECT \\\"NWI_NEXT\\\" FROM \\\"NEXT_WRITE_ID\\\" WHERE \\\"NWI_DATABASE\\\" = ? AND \\\"NWI_TABLE\\\" = ?\";\n+        pStmt = sqlGenerator.prepareStmtWithParameters(dbConn, query, params);\n+        LOG.debug(\"Going to execute query <\" + query.replaceAll(\"\\\\?\", \"{}\") + \">\", quoteString(dbName),\n+            quoteString(tableName));\n+        rs = pStmt.executeQuery();\n+        // If there is no record, we never allocated anything\n+        long maxWriteId = 0l;\n+        if (rs.next()) {\n+          // The row contains the nextId not the previously allocated\n+          maxWriteId = rs.getLong(1) - 1;\n+        }\n+        return new MaxAllocatedTableWriteIdResponse(maxWriteId);\n+      } catch (SQLException e) {\n+        LOG.error(\n+            \"Exception during reading the max allocated writeId for dbName={}, tableName={}. Will retry if possible.\",\n+            dbName, tableName, e);\n+        rollbackDBConn(dbConn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NTc5Ng==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450785796", "createdAt": "2020-07-07T11:09:56Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        List<String> params = Arrays.asList(dbName, tableName);\n+        String query = \"SELECT \\\"NWI_NEXT\\\" FROM \\\"NEXT_WRITE_ID\\\" WHERE \\\"NWI_DATABASE\\\" = ? AND \\\"NWI_TABLE\\\" = ?\";\n+        pStmt = sqlGenerator.prepareStmtWithParameters(dbConn, query, params);\n+        LOG.debug(\"Going to execute query <\" + query.replaceAll(\"\\\\?\", \"{}\") + \">\", quoteString(dbName),\n+            quoteString(tableName));\n+        rs = pStmt.executeQuery();\n+        // If there is no record, we never allocated anything\n+        long maxWriteId = 0l;\n+        if (rs.next()) {\n+          // The row contains the nextId not the previously allocated\n+          maxWriteId = rs.getLong(1) - 1;\n+        }\n+        return new MaxAllocatedTableWriteIdResponse(maxWriteId);\n+      } catch (SQLException e) {\n+        LOG.error(\n+            \"Exception during reading the max allocated writeId for dbName={}, tableName={}. Will retry if possible.\",\n+            dbName, tableName, e);\n+        rollbackDBConn(dbConn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODkxMA=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk1MTk5OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0ODozMFrOGqwCXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxMDowNVrOGt5yRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MDQxNQ==", "bodyText": "lockInternal is required for Derby to simulate S4U, why use here? unlockInternal is not needed as well", "url": "https://github.com/apache/hive/pull/1087#discussion_r447480415", "createdAt": "2020-06-30T07:48:30Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NTg2Mw==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450785863", "createdAt": "2020-07-07T11:10:05Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MDQxNQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk2Mjc1OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1MDo1MVrOGqwIxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxMjoxMFrOGt52ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MjA1Mg==", "bodyText": "minor: i would use try-with-resources instead of doing explicit management", "url": "https://github.com/apache/hive/pull/1087#discussion_r447482052", "createdAt": "2020-06-30T07:50:51Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NjkxNw==", "bodyText": "most of Txnhandler uses this pattern, instead of using three nested try-with for dbconn, statement and resultset", "url": "https://github.com/apache/hive/pull/1087#discussion_r450786917", "createdAt": "2020-07-07T11:12:10Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MjA1Mg=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk3Mjk3OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1MzozM1rOGqwPKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNDoxMFrOGt56BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MzY5MQ==", "bodyText": "minor: you can simply pass params as  Arrays.asList(rqst.getDbName(), rqst.getTableName()) instead of using so many local vars", "url": "https://github.com/apache/hive/pull/1087#discussion_r447483691", "createdAt": "2020-06-30T07:53:33Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        List<String> params = Arrays.asList(dbName, tableName);\n+        String query = \"SELECT \\\"NWI_NEXT\\\" FROM \\\"NEXT_WRITE_ID\\\" WHERE \\\"NWI_DATABASE\\\" = ? AND \\\"NWI_TABLE\\\" = ?\";\n+        pStmt = sqlGenerator.prepareStmtWithParameters(dbConn, query, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Nzg0NA==", "bodyText": "fixed", "url": "https://github.com/apache/hive/pull/1087#discussion_r450787844", "createdAt": "2020-07-07T11:14:10Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2015,8 +2019,49 @@ public AllocateTableWriteIdsResponse allocateTableWriteIds(AllocateTableWriteIds\n       return allocateTableWriteIds(rqst);\n     }\n   }\n+\n+  @Override\n+  public MaxAllocatedTableWriteIdResponse getMaxAllocatedTableWrited(MaxAllocatedTableWriteIdRequest rqst) throws MetaException {\n+    String dbName = rqst.getDbName();\n+    String tableName = rqst.getTableName();\n+    try {\n+      Connection dbConn = null;\n+      PreparedStatement pStmt = null;\n+      ResultSet rs = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        List<String> params = Arrays.asList(dbName, tableName);\n+        String query = \"SELECT \\\"NWI_NEXT\\\" FROM \\\"NEXT_WRITE_ID\\\" WHERE \\\"NWI_DATABASE\\\" = ? AND \\\"NWI_TABLE\\\" = ?\";\n+        pStmt = sqlGenerator.prepareStmtWithParameters(dbConn, query, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MzY5MQ=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk3NjIxOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1NDoyNFrOGqwRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNjo0NFrOGt5-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NDIwMA==", "bodyText": "not sure why is it used here", "url": "https://github.com/apache/hive/pull/1087#discussion_r447484200", "createdAt": "2020-06-30T07:54:24Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2032,28 +2077,61 @@ public void seedWriteIdOnAcidConversion(InitializeTableWriteIdsRequest rqst)\n         // The initial value for write id should be 1 and hence we add 1 with number of write ids\n         // allocated here\n         String s = \"INSERT INTO \\\"NEXT_WRITE_ID\\\" (\\\"NWI_DATABASE\\\", \\\"NWI_TABLE\\\", \\\"NWI_NEXT\\\") VALUES (?, ?, \"\n-                + Long.toString(rqst.getSeeWriteId() + 1) + \")\";\n-        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTblName()));\n+                + Long.toString(rqst.getSeedWriteId() + 1) + \")\";\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTableName()));\n         LOG.debug(\"Going to execute insert <\" + s.replaceAll(\"\\\\?\", \"{}\") + \">\",\n-                quoteString(rqst.getDbName()), quoteString(rqst.getTblName()));\n+                quoteString(rqst.getDbName()), quoteString(rqst.getTableName()));\n         pst.execute();\n         LOG.debug(\"Going to commit\");\n         dbConn.commit();\n       } catch (SQLException e) {\n-        LOG.debug(\"Going to rollback\");\n         rollbackDBConn(dbConn);\n-        checkRetryable(dbConn, e, \"seedWriteIdOnAcidConversion(\" + rqst + \")\");\n-        throw new MetaException(\"Unable to update transaction database \"\n-            + StringUtils.stringifyException(e));\n+        checkRetryable(dbConn, e, \"seedWriteId(\" + rqst + \")\");\n+        throw new MetaException(\"Unable to update transaction database \" + StringUtils.stringifyException(e));\n       } finally {\n         close(null, pst, dbConn);\n         unlockInternal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTA3NQ==", "bodyText": "fixed, the unique key on NEXT_WRITE_ID is enough", "url": "https://github.com/apache/hive/pull/1087#discussion_r450789075", "createdAt": "2020-07-07T11:16:44Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2032,28 +2077,61 @@ public void seedWriteIdOnAcidConversion(InitializeTableWriteIdsRequest rqst)\n         // The initial value for write id should be 1 and hence we add 1 with number of write ids\n         // allocated here\n         String s = \"INSERT INTO \\\"NEXT_WRITE_ID\\\" (\\\"NWI_DATABASE\\\", \\\"NWI_TABLE\\\", \\\"NWI_NEXT\\\") VALUES (?, ?, \"\n-                + Long.toString(rqst.getSeeWriteId() + 1) + \")\";\n-        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTblName()));\n+                + Long.toString(rqst.getSeedWriteId() + 1) + \")\";\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTableName()));\n         LOG.debug(\"Going to execute insert <\" + s.replaceAll(\"\\\\?\", \"{}\") + \">\",\n-                quoteString(rqst.getDbName()), quoteString(rqst.getTblName()));\n+                quoteString(rqst.getDbName()), quoteString(rqst.getTableName()));\n         pst.execute();\n         LOG.debug(\"Going to commit\");\n         dbConn.commit();\n       } catch (SQLException e) {\n-        LOG.debug(\"Going to rollback\");\n         rollbackDBConn(dbConn);\n-        checkRetryable(dbConn, e, \"seedWriteIdOnAcidConversion(\" + rqst + \")\");\n-        throw new MetaException(\"Unable to update transaction database \"\n-            + StringUtils.stringifyException(e));\n+        checkRetryable(dbConn, e, \"seedWriteId(\" + rqst + \")\");\n+        throw new MetaException(\"Unable to update transaction database \" + StringUtils.stringifyException(e));\n       } finally {\n         close(null, pst, dbConn);\n         unlockInternal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NDIwMA=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTEzNTA2OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzoxMFrOGqxySg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNjozNVrOGt6RZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTA2Ng==", "bodyText": "not quite understand this if condition. You have check in validateAndAddMaxTxnIdAndWriteId() if there are already some write ids registered in HMS and we try to do repair - throw exception. Could it be possible due to lack of locking that when we calculate the write ids there is nothing in HMS,  however when we try to seed - some transaction generates a new write id - would it cause some dataloss problems or other issues?", "url": "https://github.com/apache/hive/pull/1087#discussion_r447509066", "createdAt": "2020-06-30T08:33:10Z", "author": {"login": "deniskuzZ"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2032,28 +2077,61 @@ public void seedWriteIdOnAcidConversion(InitializeTableWriteIdsRequest rqst)\n         // The initial value for write id should be 1 and hence we add 1 with number of write ids\n         // allocated here\n         String s = \"INSERT INTO \\\"NEXT_WRITE_ID\\\" (\\\"NWI_DATABASE\\\", \\\"NWI_TABLE\\\", \\\"NWI_NEXT\\\") VALUES (?, ?, \"\n-                + Long.toString(rqst.getSeeWriteId() + 1) + \")\";\n-        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTblName()));\n+                + Long.toString(rqst.getSeedWriteId() + 1) + \")\";\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTableName()));\n         LOG.debug(\"Going to execute insert <\" + s.replaceAll(\"\\\\?\", \"{}\") + \">\",\n-                quoteString(rqst.getDbName()), quoteString(rqst.getTblName()));\n+                quoteString(rqst.getDbName()), quoteString(rqst.getTableName()));\n         pst.execute();\n         LOG.debug(\"Going to commit\");\n         dbConn.commit();\n       } catch (SQLException e) {\n-        LOG.debug(\"Going to rollback\");\n         rollbackDBConn(dbConn);\n-        checkRetryable(dbConn, e, \"seedWriteIdOnAcidConversion(\" + rqst + \")\");\n-        throw new MetaException(\"Unable to update transaction database \"\n-            + StringUtils.stringifyException(e));\n+        checkRetryable(dbConn, e, \"seedWriteId(\" + rqst + \")\");\n+        throw new MetaException(\"Unable to update transaction database \" + StringUtils.stringifyException(e));\n       } finally {\n         close(null, pst, dbConn);\n         unlockInternal();\n       }\n     } catch (RetryException e) {\n-      seedWriteIdOnAcidConversion(rqst);\n+      seedWriteId(rqst);\n     }\n+  }\n+\n+  @Override\n+  public void seedTxnId(SeedTxnIdRequest rqst) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+        /*\n+         * Locking the txnLock an exclusive way, we do not want to set the txnId backward accidentally\n+         * if there are concurrent open transactions\n+         */\n+        acquireTxnLock(stmt, false);\n+        long highWaterMark = getHighWaterMark(stmt);\n+        if (highWaterMark >= rqst.getSeedTxnId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzgzMA==", "bodyText": "This is not about the writeIds, it is about the txnId. If you have a data from a database where there were high amount of transaction and the compaction run on the table, you will have some high txnId in the visibilityTxnId in the name of the compacted folder.\nIf you then move this data to a cluster with less transaction (ex. a test cluster) and you run the msck repair, you have to skip the txnId forward so the next query will read the compacted folder. Here the race condition is, that somehow the txnId sequence gets ahead of you between the check and the seeding the value, in that case we throw this exception to not to set the sequence backward. Anyway, in this case if you run the msck repair again it will succeed, since the txnid will be high enough.\nThe writeId race condition won't cause a problem I think, since if some other transaction allocated the first writeId the seedWriteId will fail on the unique constraint on the table", "url": "https://github.com/apache/hive/pull/1087#discussion_r450793830", "createdAt": "2020-07-07T11:26:35Z", "author": {"login": "pvargacl"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -2032,28 +2077,61 @@ public void seedWriteIdOnAcidConversion(InitializeTableWriteIdsRequest rqst)\n         // The initial value for write id should be 1 and hence we add 1 with number of write ids\n         // allocated here\n         String s = \"INSERT INTO \\\"NEXT_WRITE_ID\\\" (\\\"NWI_DATABASE\\\", \\\"NWI_TABLE\\\", \\\"NWI_NEXT\\\") VALUES (?, ?, \"\n-                + Long.toString(rqst.getSeeWriteId() + 1) + \")\";\n-        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTblName()));\n+                + Long.toString(rqst.getSeedWriteId() + 1) + \")\";\n+        pst = sqlGenerator.prepareStmtWithParameters(dbConn, s, Arrays.asList(rqst.getDbName(), rqst.getTableName()));\n         LOG.debug(\"Going to execute insert <\" + s.replaceAll(\"\\\\?\", \"{}\") + \">\",\n-                quoteString(rqst.getDbName()), quoteString(rqst.getTblName()));\n+                quoteString(rqst.getDbName()), quoteString(rqst.getTableName()));\n         pst.execute();\n         LOG.debug(\"Going to commit\");\n         dbConn.commit();\n       } catch (SQLException e) {\n-        LOG.debug(\"Going to rollback\");\n         rollbackDBConn(dbConn);\n-        checkRetryable(dbConn, e, \"seedWriteIdOnAcidConversion(\" + rqst + \")\");\n-        throw new MetaException(\"Unable to update transaction database \"\n-            + StringUtils.stringifyException(e));\n+        checkRetryable(dbConn, e, \"seedWriteId(\" + rqst + \")\");\n+        throw new MetaException(\"Unable to update transaction database \" + StringUtils.stringifyException(e));\n       } finally {\n         close(null, pst, dbConn);\n         unlockInternal();\n       }\n     } catch (RetryException e) {\n-      seedWriteIdOnAcidConversion(rqst);\n+      seedWriteId(rqst);\n     }\n+  }\n+\n+  @Override\n+  public void seedTxnId(SeedTxnIdRequest rqst) throws MetaException {\n+    try {\n+      Connection dbConn = null;\n+      Statement stmt = null;\n+      try {\n+        lockInternal();\n+        dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n+        stmt = dbConn.createStatement();\n+        /*\n+         * Locking the txnLock an exclusive way, we do not want to set the txnId backward accidentally\n+         * if there are concurrent open transactions\n+         */\n+        acquireTxnLock(stmt, false);\n+        long highWaterMark = getHighWaterMark(stmt);\n+        if (highWaterMark >= rqst.getSeedTxnId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTA2Ng=="}, "originalCommit": {"oid": "82f8bf293d33b807d33600014018d534bd2b9071"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 762, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}