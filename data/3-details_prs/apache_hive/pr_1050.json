{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDk3NTU5", "number": 1050, "title": "HIVE-23358: MSCK Repair should remove insignificant 0's from numeric partition values", "bodyText": "Reference for converting hive types to java\nHive datatypes: https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types\nJava Datatypes: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html", "createdAt": "2020-06-02T10:34:22Z", "url": "https://github.com/apache/hive/pull/1050", "merged": true, "mergeCommit": {"oid": "125a87d4b2698793dda97a731e1b30d77b957eea"}, "closed": true, "closedAt": "2020-08-17T13:41:56Z", "author": {"login": "adesh-rao"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7LVb5gBqjM2MTQzMDU4NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc84OedAFqTQ2MzgwMDMyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a37ce53c177598ffdd817df6a297f0f1d60cb4a2", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/a37ce53c177598ffdd817df6a297f0f1d60cb4a2", "committedDate": "2020-06-03T05:16:28Z", "message": "Add new test file in testconfiguration.properties"}, "afterCommit": {"oid": "a971ab5be9d08993dfdf9f768e72dd6e6fd629b0", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/a971ab5be9d08993dfdf9f768e72dd6e6fd629b0", "committedDate": "2020-08-03T05:36:21Z", "message": "Fix config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c540d8c81478d21cc97e2a51bfd832892ccccf", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/02c540d8c81478d21cc97e2a51bfd832892ccccf", "committedDate": "2020-08-04T05:05:23Z", "message": "HIVE-23358: MSCK Repair should remove insignificant 0's from partition values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac3b157aa043260bdac56efb628997fb29b8c14c", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/ac3b157aa043260bdac56efb628997fb29b8c14c", "committedDate": "2020-08-04T05:05:23Z", "message": "Add new test file in testconfiguration.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8693f1cb90fae44329dc38395088f48730ff116", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/d8693f1cb90fae44329dc38395088f48730ff116", "committedDate": "2020-08-04T05:05:23Z", "message": "Fix config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "290aed928b019406c16c166e383662f04f5b20ba", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/290aed928b019406c16c166e383662f04f5b20ba", "committedDate": "2020-08-04T05:05:23Z", "message": "Add import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffd7c888ff828f840f90829d769dfd1f345d452e", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/ffd7c888ff828f840f90829d769dfd1f345d452e", "committedDate": "2020-08-04T06:10:06Z", "message": "fix test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3f7d790f56bcd26c396468a4416e78e37704689", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/b3f7d790f56bcd26c396468a4416e78e37704689", "committedDate": "2020-08-03T06:20:33Z", "message": "Add import"}, "afterCommit": {"oid": "ffd7c888ff828f840f90829d769dfd1f345d452e", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/ffd7c888ff828f840f90829d769dfd1f345d452e", "committedDate": "2020-08-04T06:10:06Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTE2OTg3", "url": "https://github.com/apache/hive/pull/1050#pullrequestreview-461516987", "createdAt": "2020-08-05T10:00:49Z", "commit": {"oid": "ffd7c888ff828f840f90829d769dfd1f345d452e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDowMDo1MFrOG8C0qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDoyNTo0M1rOG8Dmww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMzk5NQ==", "bodyText": "Have another table with STRING type column where the 0 shouldn't be truncated by MSCK repair.", "url": "https://github.com/apache/hive/pull/1050#discussion_r465613995", "createdAt": "2020-08-05T10:00:50Z", "author": {"login": "sankarh"}, "path": "ql/src/test/queries/clientpositive/msck_repair_7.q", "diffHunk": "@@ -0,0 +1,63 @@\n+DROP TABLE IF EXISTS repairtable_n7_1;\n+DROP TABLE IF EXISTS repairtable_n7_2;\n+DROP TABLE IF EXISTS repairtable_n7_3;\n+DROP TABLE IF EXISTS repairtable_n7_4;\n+DROP TABLE IF EXISTS repairtable_n7_5;\n+DROP TABLE IF EXISTS repairtable_n7_6;\n+DROP TABLE IF EXISTS repairtable_n7_7;\n+\n+CREATE EXTERNAL TABLE repairtable_n7_1(key INT) PARTITIONED BY (p1 TINYINT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_1/';\n+CREATE EXTERNAL TABLE repairtable_n7_2(key INT) PARTITIONED BY (p1 SMALLINT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_2/';\n+CREATE EXTERNAL TABLE repairtable_n7_3(key INT) PARTITIONED BY (p1 INT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_3/';\n+CREATE EXTERNAL TABLE repairtable_n7_4(key INT) PARTITIONED BY (p1 BIGINT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_4/';\n+CREATE EXTERNAL TABLE repairtable_n7_5(key INT) PARTITIONED BY (p1 FLOAT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_5/';\n+CREATE EXTERNAL TABLE repairtable_n7_6(key INT) PARTITIONED BY (p1 DOUBLE) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_6/';\n+CREATE EXTERNAL TABLE repairtable_n7_7(key INT) PARTITIONED BY (p1 DECIMAL(10,10)) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_7/';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd7c888ff828f840f90829d769dfd1f345d452e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyNTA5MA==", "bodyText": "Avoid outer negation and use if ((partitionCols != null) && !partitionCols.isEmpty()). Even isEmpty need not be checked here as below loop won't execute if it is empty.", "url": "https://github.com/apache/hive/pull/1050#discussion_r465625090", "createdAt": "2020-08-05T10:22:09Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/utils/MetaStoreServerUtils.java", "diffHunk": "@@ -1493,6 +1497,39 @@ public static String getPartitionName(Path tablePath, Path partitionPath, Set<St\n     return result;\n   }\n \n+  public static String getNormalisedPartitionValue(String partitionValue, String type) {\n+\n+    LOG.debug(\"Converting '\" + partitionValue + \"' to type: '\" + type + \"'.\");\n+\n+    if (type.equalsIgnoreCase(\"tinyint\")\n+    || type.equalsIgnoreCase(\"smallint\")\n+    || type.equalsIgnoreCase(\"int\")){\n+      return Integer.toString(Integer.parseInt(partitionValue));\n+    } else if (type.equalsIgnoreCase(\"bigint\")){\n+      return Long.toString(Long.parseLong(partitionValue));\n+    } else if (type.equalsIgnoreCase(\"float\")){\n+      return Float.toString(Float.parseFloat(partitionValue));\n+    } else if (type.equalsIgnoreCase(\"double\")){\n+      return Double.toString(Double.parseDouble(partitionValue));\n+    } else if (type.startsWith(\"decimal\")){\n+      // Decimal datatypes are stored like decimal(10,10)\n+      return new BigDecimal(partitionValue).stripTrailingZeros().toPlainString();\n+    }\n+    return partitionValue;\n+  }\n+\n+  public static Map<String, String> getPartitionColtoTypeMap(List<FieldSchema> partitionCols) {\n+    Map<String, String> typeMap = new HashMap<>();\n+\n+    if (!(partitionCols == null || partitionCols.isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd7c888ff828f840f90829d769dfd1f345d452e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyNjgxOQ==", "bodyText": "As a follow-up, do we need to validate date, timestamp values before add partitions? Are we checking it during inserts or add partition command?", "url": "https://github.com/apache/hive/pull/1050#discussion_r465626819", "createdAt": "2020-08-05T10:25:43Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/utils/MetaStoreServerUtils.java", "diffHunk": "@@ -1493,6 +1497,39 @@ public static String getPartitionName(Path tablePath, Path partitionPath, Set<St\n     return result;\n   }\n \n+  public static String getNormalisedPartitionValue(String partitionValue, String type) {\n+\n+    LOG.debug(\"Converting '\" + partitionValue + \"' to type: '\" + type + \"'.\");\n+\n+    if (type.equalsIgnoreCase(\"tinyint\")\n+    || type.equalsIgnoreCase(\"smallint\")\n+    || type.equalsIgnoreCase(\"int\")){\n+      return Integer.toString(Integer.parseInt(partitionValue));\n+    } else if (type.equalsIgnoreCase(\"bigint\")){\n+      return Long.toString(Long.parseLong(partitionValue));\n+    } else if (type.equalsIgnoreCase(\"float\")){\n+      return Float.toString(Float.parseFloat(partitionValue));\n+    } else if (type.equalsIgnoreCase(\"double\")){\n+      return Double.toString(Double.parseDouble(partitionValue));\n+    } else if (type.startsWith(\"decimal\")){\n+      // Decimal datatypes are stored like decimal(10,10)\n+      return new BigDecimal(partitionValue).stripTrailingZeros().toPlainString();\n+    }\n+    return partitionValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd7c888ff828f840f90829d769dfd1f345d452e"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb6663b7166ec74c860f0e0a871357e344e47181", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/bb6663b7166ec74c860f0e0a871357e344e47181", "committedDate": "2020-08-07T04:55:04Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODAwMzI3", "url": "https://github.com/apache/hive/pull/1050#pullrequestreview-463800327", "createdAt": "2020-08-08T12:32:02Z", "commit": {"oid": "bb6663b7166ec74c860f0e0a871357e344e47181"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMjozMjowMlrOG9ziYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMjozMjowMlrOG9ziYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2MDcwNQ==", "bodyText": "Under few numeric column table, add another partition dir with same value but different number of preceding or following 0s. It should add only one partition and point to just one directory. Not sure, what is the right behavior in this case but should be well documented.", "url": "https://github.com/apache/hive/pull/1050#discussion_r467460705", "createdAt": "2020-08-08T12:32:02Z", "author": {"login": "sankarh"}, "path": "ql/src/test/queries/clientpositive/msck_repair_7.q", "diffHunk": "@@ -0,0 +1,71 @@\n+DROP TABLE IF EXISTS repairtable_n7_1;\n+DROP TABLE IF EXISTS repairtable_n7_2;\n+DROP TABLE IF EXISTS repairtable_n7_3;\n+DROP TABLE IF EXISTS repairtable_n7_4;\n+DROP TABLE IF EXISTS repairtable_n7_5;\n+DROP TABLE IF EXISTS repairtable_n7_6;\n+DROP TABLE IF EXISTS repairtable_n7_7;\n+DROP TABLE IF EXISTS repairtable_n7_8;\n+\n+CREATE EXTERNAL TABLE repairtable_n7_1(key INT) PARTITIONED BY (p1 TINYINT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_1/';\n+CREATE EXTERNAL TABLE repairtable_n7_2(key INT) PARTITIONED BY (p1 SMALLINT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_2/';\n+CREATE EXTERNAL TABLE repairtable_n7_3(key INT) PARTITIONED BY (p1 INT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_3/';\n+CREATE EXTERNAL TABLE repairtable_n7_4(key INT) PARTITIONED BY (p1 BIGINT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_4/';\n+CREATE EXTERNAL TABLE repairtable_n7_5(key INT) PARTITIONED BY (p1 FLOAT) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_5/';\n+CREATE EXTERNAL TABLE repairtable_n7_6(key INT) PARTITIONED BY (p1 DOUBLE) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_6/';\n+CREATE EXTERNAL TABLE repairtable_n7_7(key INT) PARTITIONED BY (p1 DECIMAL(10,10)) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_7/';\n+CREATE EXTERNAL TABLE repairtable_n7_8(key INT) PARTITIONED BY (p1 string) stored as ORC location '${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_8/';\n+\n+MSCK REPAIR TABLE repairtable_n7_1;\n+MSCK REPAIR TABLE repairtable_n7_2;\n+MSCK REPAIR TABLE repairtable_n7_3;\n+MSCK REPAIR TABLE repairtable_n7_4;\n+MSCK REPAIR TABLE repairtable_n7_5;\n+MSCK REPAIR TABLE repairtable_n7_6;\n+MSCK REPAIR TABLE repairtable_n7_7;\n+MSCK REPAIR TABLE repairtable_n7_8;\n+\n+show partitions repairtable_n7_1;\n+show partitions repairtable_n7_2;\n+show partitions repairtable_n7_3;\n+show partitions repairtable_n7_4;\n+show partitions repairtable_n7_5;\n+show partitions repairtable_n7_6;\n+show partitions repairtable_n7_7;\n+show partitions repairtable_n7_8;\n+\n+dfs  ${system:test.dfs.mkdir} -p ${system:test.tmp.dir}/apps/hive/warehouse/test.db/repairtable_n7_1/p1=01;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6663b7166ec74c860f0e0a871357e344e47181"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3789, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}