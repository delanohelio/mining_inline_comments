{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzA4NDgz", "number": 1237, "title": "HIVE-23618: Enable event replication for default/check constraints", "bodyText": "This also includes adding default/check constraint listener api in MetastoreEventListener.", "createdAt": "2020-07-10T08:40:04Z", "url": "https://github.com/apache/hive/pull/1237", "merged": true, "mergeCommit": {"oid": "4446414f4478091db1eb20bc782a5c1825356153"}, "closed": true, "closedAt": "2020-09-30T14:33:31Z", "author": {"login": "adesh-rao"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0ErWjgBqjM1MzY3ODk1MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN9rV2AFqTQ5OTQ5NDM2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac953b3fdde93bf6b9215f566782bdf7a3e1f4e6", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/ac953b3fdde93bf6b9215f566782bdf7a3e1f4e6", "committedDate": "2020-07-10T08:38:08Z", "message": "Fix indentation and add license"}, "afterCommit": {"oid": "fa5eddaa7862709a25051330f7420cfabcd50c50", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/fa5eddaa7862709a25051330f7420cfabcd50c50", "committedDate": "2020-07-12T03:56:54Z", "message": "Fix indentation and add license"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa5eddaa7862709a25051330f7420cfabcd50c50", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/fa5eddaa7862709a25051330f7420cfabcd50c50", "committedDate": "2020-07-12T03:56:54Z", "message": "Fix indentation and add license"}, "afterCommit": {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/1998c3f3c5579b4e869f35823a530a3f083d61cd", "committedDate": "2020-07-14T18:17:13Z", "message": "Fix indentation and add license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTEzMTgx", "url": "https://github.com/apache/hive/pull/1237#pullrequestreview-453113181", "createdAt": "2020-07-22T08:40:56Z", "commit": {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0MDo1NlrOG1YrcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTowODowMFrOG-KNFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMjA0OA==", "bodyText": "checkstyle error. Please fix", "url": "https://github.com/apache/hive/pull/1237#discussion_r458632048", "createdAt": "2020-07-22T08:40:56Z", "author": {"login": "aasha"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -31,20 +31,7 @@\n import org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore.BehaviourInjection;\n import org.apache.hadoop.hive.metastore.MetaStoreTestUtils;\n import org.apache.hadoop.hive.metastore.PersistenceManagerProvider;\n-import org.apache.hadoop.hive.metastore.api.Database;\n-import org.apache.hadoop.hive.metastore.api.ForeignKeysRequest;\n-import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n-import org.apache.hadoop.hive.metastore.api.NotNullConstraintsRequest;\n-import org.apache.hadoop.hive.metastore.api.NotificationEvent;\n-import org.apache.hadoop.hive.metastore.api.NotificationEventResponse;\n-import org.apache.hadoop.hive.metastore.api.Partition;\n-import org.apache.hadoop.hive.metastore.api.PrimaryKeysRequest;\n-import org.apache.hadoop.hive.metastore.api.SQLForeignKey;\n-import org.apache.hadoop.hive.metastore.api.SQLNotNullConstraint;\n-import org.apache.hadoop.hive.metastore.api.SQLPrimaryKey;\n-import org.apache.hadoop.hive.metastore.api.SQLUniqueConstraint;\n-import org.apache.hadoop.hive.metastore.api.Table;\n-import org.apache.hadoop.hive.metastore.api.UniqueConstraintsRequest;\n+import org.apache.hadoop.hive.metastore.api.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4OTIwOQ==", "bodyText": "Please add comments and unit tests for these classes", "url": "https://github.com/apache/hive/pull/1237#discussion_r458689209", "createdAt": "2020-07-22T10:18:55Z", "author": {"login": "aasha"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.parse.repl.load.message;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.common.TableName;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+import org.apache.hadoop.hive.metastore.messaging.AddCheckConstraintMessage;\n+import org.apache.hadoop.hive.ql.ddl.DDLWork;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.Constraints;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintDesc;\n+import org.apache.hadoop.hive.ql.exec.Task;\n+import org.apache.hadoop.hive.ql.exec.TaskFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+\n+public class AddCheckConstraintHandler extends AbstractMessageHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMTI0OQ==", "bodyText": "Add similar tests for external tables.", "url": "https://github.com/apache/hive/pull/1237#discussion_r467831249", "createdAt": "2020-08-10T11:06:09Z", "author": {"login": "aasha"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3060,13 +3049,19 @@ public void testConstraints() throws IOException {\n       assertEquals(fks.size(), 2);\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMjA4NA==", "bodyText": "Add multiple check constraints for the same table and test if all of them are replicated.", "url": "https://github.com/apache/hive/pull/1237#discussion_r467832084", "createdAt": "2020-08-10T11:08:00Z", "author": {"login": "aasha"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3060,13 +3049,19 @@ public void testConstraints() throws IOException {\n       assertEquals(fks.size(), 2);\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));\n+      assertEquals(cks.size(), 1);\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl8\"));\n+      assertEquals(dks.size(), 1);\n     } catch (TException te) {\n       assertNull(te);\n     }\n \n     run(\"CREATE TABLE \" + dbName + \".tbl4(a string, b string, primary key (a, b) disable novalidate rely)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl5(a string, b string, foreign key (a, b) references \" + dbName + \".tbl4(a, b) disable novalidate)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl6(a string, b string not null disable, unique (a) disable)\", driver);\n+    run(\"CREATE TABLE \" + dbName + \".tbl9(a string, price double CHECK (price > 0 AND price <= 1000))\", driver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/1998c3f3c5579b4e869f35823a530a3f083d61cd", "committedDate": "2020-07-14T18:17:13Z", "message": "Fix indentation and add license"}, "afterCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "committedDate": "2020-08-26T11:05:53Z", "message": "fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzMxOTU0", "url": "https://github.com/apache/hive/pull/1237#pullrequestreview-488331954", "createdAt": "2020-09-15T05:19:25Z", "commit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNToxOToyNVrOHRxD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1NDo0OFrOHRzUAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MTY3OA==", "bodyText": "Shall use \"cols\" here.", "url": "https://github.com/apache/hive/pull/1237#discussion_r488391678", "createdAt": "2020-09-15T05:19:25Z", "author": {"login": "sankarh"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -703,6 +709,49 @@ public void onAddNotNullConstraint(AddNotNullConstraintEvent addNotNullConstrain\n     }\n   }\n \n+  /***\n+   * @param addDefaultConstraintEvent add default constraint event\n+   * @throws MetaException\n+   */\n+  @Override\n+  public void onAddDefaultConstraint(AddDefaultConstraintEvent addDefaultConstraintEvent) throws MetaException {\n+    List<SQLDefaultConstraint> cols = addDefaultConstraintEvent.getDefaultConstraintCols();\n+    if (cols.size() > 0) {\n+      AddDefaultConstraintMessage msg = MessageBuilder.getInstance()\n+        .buildAddDefaultConstraintMessage(addDefaultConstraintEvent.getDefaultConstraintCols());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MjAyMg==", "bodyText": "Use \"cols\".", "url": "https://github.com/apache/hive/pull/1237#discussion_r488392022", "createdAt": "2020-09-15T05:20:29Z", "author": {"login": "sankarh"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -703,6 +709,49 @@ public void onAddNotNullConstraint(AddNotNullConstraintEvent addNotNullConstrain\n     }\n   }\n \n+  /***\n+   * @param addDefaultConstraintEvent add default constraint event\n+   * @throws MetaException\n+   */\n+  @Override\n+  public void onAddDefaultConstraint(AddDefaultConstraintEvent addDefaultConstraintEvent) throws MetaException {\n+    List<SQLDefaultConstraint> cols = addDefaultConstraintEvent.getDefaultConstraintCols();\n+    if (cols.size() > 0) {\n+      AddDefaultConstraintMessage msg = MessageBuilder.getInstance()\n+        .buildAddDefaultConstraintMessage(addDefaultConstraintEvent.getDefaultConstraintCols());\n+      NotificationEvent event =\n+        new NotificationEvent(0, now(), EventType.ADD_DEFAULTCONSTRAINT.toString(),\n+          msgEncoder.getSerializer().serialize(msg)\n+        );\n+      event.setCatName(cols.get(0).isSetCatName() ? cols.get(0).getCatName() : DEFAULT_CATALOG_NAME);\n+      event.setDbName(cols.get(0).getTable_db());\n+      event.setTableName(cols.get(0).getTable_name());\n+      process(event, addDefaultConstraintEvent);\n+    }\n+  }\n+\n+  /***\n+   * @param addCheckConstraintEvent add check constraint event\n+   * @throws MetaException\n+   */\n+  @Override\n+  public void onAddCheckConstraint(AddCheckConstraintEvent addCheckConstraintEvent) throws MetaException {\n+    LOG.info(\"Inside DBNotification listener for check constraint.\");\n+    List<SQLCheckConstraint> cols = addCheckConstraintEvent.getCheckConstraintCols();\n+    if (cols.size() > 0) {\n+      AddCheckConstraintMessage msg = MessageBuilder.getInstance()\n+        .buildAddCheckConstraintMessage(addCheckConstraintEvent.getCheckConstraintCols());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5NDYxOQ==", "bodyText": "nit: Variable name can be uniform nn -> ck", "url": "https://github.com/apache/hive/pull/1237#discussion_r488394619", "createdAt": "2020-09-15T05:29:34Z", "author": {"login": "sankarh"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.parse.repl.load.message;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.common.TableName;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+import org.apache.hadoop.hive.metastore.messaging.AddCheckConstraintMessage;\n+import org.apache.hadoop.hive.ql.ddl.DDLWork;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.Constraints;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintDesc;\n+import org.apache.hadoop.hive.ql.exec.Task;\n+import org.apache.hadoop.hive.ql.exec.TaskFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+\n+/**\n+ * AddCheckConstraintHandler\n+ * Target(Load) side handler for add check constraint event.\n+ */\n+public class AddCheckConstraintHandler extends AbstractMessageHandler {\n+  @Override\n+  public List<Task<?>> handle(Context context)\n+    throws SemanticException {\n+    AddCheckConstraintMessage msg = deserializer.getAddCheckConstraintMessage(context.dmd.getPayload());\n+\n+    List<SQLCheckConstraint> ccs;\n+    try {\n+      ccs = msg.getCheckConstraints();\n+    } catch (Exception e) {\n+      if (!(e instanceof SemanticException)){\n+        throw new SemanticException(\"Error reading message members\", e);\n+      } else {\n+        throw (SemanticException)e;\n+      }\n+    }\n+\n+    List<Task<?>> tasks = new ArrayList<Task<?>>();\n+    if (ccs.isEmpty()) {\n+      return tasks;\n+    }\n+\n+    final String actualDbName = context.isDbNameEmpty() ? ccs.get(0).getTable_db() : context.dbName;\n+    final String actualTblName = ccs.get(0).getTable_name();\n+    final TableName tName = TableName.fromString(actualTblName, null, actualDbName);\n+\n+    for (SQLCheckConstraint nn : ccs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5NTEwMg==", "bodyText": "nit: nn -> dc", "url": "https://github.com/apache/hive/pull/1237#discussion_r488395102", "createdAt": "2020-09-15T05:31:06Z", "author": {"login": "sankarh"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddDefaultConstraintHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.parse.repl.load.message;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.common.TableName;\n+import org.apache.hadoop.hive.metastore.api.SQLDefaultConstraint;\n+import org.apache.hadoop.hive.metastore.messaging.AddDefaultConstraintMessage;\n+import org.apache.hadoop.hive.ql.ddl.DDLWork;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.Constraints;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintDesc;\n+import org.apache.hadoop.hive.ql.exec.Task;\n+import org.apache.hadoop.hive.ql.exec.TaskFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+/**\n+ * AddDefaultConstraintHandler\n+ * Target(Load) side handler for add default constraint event.\n+ */\n+public class AddDefaultConstraintHandler extends AbstractMessageHandler {\n+  @Override\n+  public List<Task<?>> handle(Context context)\n+    throws SemanticException {\n+    AddDefaultConstraintMessage msg = deserializer.getAddDefaultConstraintMessage(context.dmd.getPayload());\n+\n+    List<SQLDefaultConstraint> dcs;\n+    try {\n+      dcs = msg.getDefaultConstraints();\n+    } catch (Exception e) {\n+      if (!(e instanceof SemanticException)){\n+        throw new SemanticException(\"Error reading message members\", e);\n+      } else {\n+        throw (SemanticException)e;\n+      }\n+    }\n+\n+    List<Task<?>> tasks = new ArrayList<Task<?>>();\n+    if (dcs.isEmpty()) {\n+      return tasks;\n+    }\n+\n+    final String actualDbName = context.isDbNameEmpty() ? dcs.get(0).getTable_db() : context.dbName;\n+    final String actualTblName = dcs.get(0).getTable_name();\n+    final TableName tName = TableName.fromString(actualTblName, null, actualDbName);\n+\n+    for (SQLDefaultConstraint nn : dcs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMzc3Nw==", "bodyText": "nit: Use \"cc\" instead of \"ds\"", "url": "https://github.com/apache/hive/pull/1237#discussion_r488423777", "createdAt": "2020-09-15T06:44:56Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/events/AddCheckConstraintEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.metastore.events;\n+\n+import org.apache.hadoop.classification.InterfaceAudience;\n+import org.apache.hadoop.classification.InterfaceStability;\n+import org.apache.hadoop.hive.metastore.IHMSHandler;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+\n+import java.util.List;\n+\n+@InterfaceAudience.Public\n+@InterfaceStability.Stable\n+public class AddCheckConstraintEvent extends ListenerEvent {\n+  private final List<SQLCheckConstraint> ds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNDg2NA==", "bodyText": "nit: \"ccs\" instead of \"dcs\".", "url": "https://github.com/apache/hive/pull/1237#discussion_r488424864", "createdAt": "2020-09-15T06:47:14Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageBuilder.java", "diffHunk": "@@ -241,6 +247,16 @@ public AddNotNullConstraintMessage buildAddNotNullConstraintMessage(\n     return new JSONAddNotNullConstraintMessage(MS_SERVER_URL, MS_SERVICE_PRINCIPAL, nns, now());\n   }\n \n+  public AddDefaultConstraintMessage buildAddDefaultConstraintMessage(\n+    List<SQLDefaultConstraint> dcs) {\n+    return new JSONAddDefaultConstraintMessage(MS_SERVER_URL, MS_SERVICE_PRINCIPAL, dcs, now());\n+  }\n+\n+  public AddCheckConstraintMessage buildAddCheckConstraintMessage(\n+    List<SQLCheckConstraint> dcs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNTE3NA==", "bodyText": "nit: Statement alignment.", "url": "https://github.com/apache/hive/pull/1237#discussion_r488425174", "createdAt": "2020-09-15T06:47:50Z", "author": {"login": "sankarh"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageDeserializer.java", "diffHunk": "@@ -62,6 +62,10 @@ public EventMessage getEventMessage(String eventTypeString, String messageBody)\n       return getAddUniqueConstraintMessage(messageBody);\n     case ADD_NOTNULLCONSTRAINT:\n       return getAddNotNullConstraintMessage(messageBody);\n+    case ADD_DEFAULTCONSTRAINT:\n+      return getAddDefaultConstraintMessage(messageBody);\n+      case ADD_CHECKCONSTRAINT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODI4Nw==", "bodyText": "Add ALTER operations to change the constraints and validate it for incremental repl.", "url": "https://github.com/apache/hive/pull/1237#discussion_r488428287", "createdAt": "2020-09-15T06:54:12Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3195,13 +3201,17 @@ public void testConstraints() throws IOException {\n       assertEquals(fks.size(), 2);\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));\n+      assertEquals(cks.size(), 2);\n     } catch (TException te) {\n       assertNull(te);\n     }\n \n     run(\"CREATE TABLE \" + dbName + \".tbl4(a string, b string, primary key (a, b) disable novalidate rely)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl5(a string, b string, foreign key (a, b) references \" + dbName + \".tbl4(a, b) disable novalidate)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl6(a string, b string not null disable, unique (a) disable)\", driver);\n+    run(\"CREATE TABLE \" + dbName + \".tbl9(a string CHECK (a like 'a%'), price double CHECK (price > 0 AND price <= 1000))\", driver);\n+    run(\"CREATE TABLE \" + dbName + \".tbl10(a string, b int DEFAULT 0)\", driver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODUxMw==", "bodyText": "nit: Remove extra space before \",\"", "url": "https://github.com/apache/hive/pull/1237#discussion_r488428513", "createdAt": "2020-09-15T06:54:43Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3243,6 +3265,15 @@ public void testConstraints() throws IOException {\n       assertTrue(fks.isEmpty());\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n       assertTrue(nns.isEmpty());\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      assertTrue(dks.isEmpty());\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      assertTrue(cks.isEmpty());\n+      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODU0Ng==", "bodyText": "nit: Remove extra space before \",\"", "url": "https://github.com/apache/hive/pull/1237#discussion_r488428546", "createdAt": "2020-09-15T06:54:48Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3243,6 +3265,15 @@ public void testConstraints() throws IOException {\n       assertTrue(fks.isEmpty());\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n       assertTrue(nns.isEmpty());\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      assertTrue(dks.isEmpty());\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      assertTrue(cks.isEmpty());\n+      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));\n+      assertTrue(dks.isEmpty());\n+      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjE4NDYz", "url": "https://github.com/apache/hive/pull/1237#pullrequestreview-495218463", "createdAt": "2020-09-24T04:54:14Z", "commit": {"oid": "fb1a7ea13e7dec771b0864f72686a626eded0595"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1NDoxNFrOHXJrrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1NDoxNFrOHXJrrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzNzkzNA==", "bodyText": "nit: Add space before \"+\" in both lines.", "url": "https://github.com/apache/hive/pull/1237#discussion_r494037934", "createdAt": "2020-09-24T04:54:14Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3236,13 +3236,29 @@ public void testConstraints() throws IOException {\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n       assertEquals(nns.size(), 1);\n       nnName = nns.get(0).getNn_name();\n-      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl9\"));\n       assertEquals(cks.size(), 2);\n       ckName1 = cks.get(0).getDc_name();\n       ckName2 = cks.get(1).getDc_name();\n-      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl10\"));\n       assertEquals(dks.size(), 1);\n-      dkName = dks.get(0).getDc_name();\n+      dkName1 = dks.get(0).getDc_name();\n+    } catch (TException te) {\n+      assertNull(te);\n+    }\n+\n+    String dkName2 = \"custom_dk_name\";\n+    String ckName3 = \"customer_ck_name\";\n+    run(\"ALTER TABLE \" + dbName+ \".tbl10 CHANGE COLUMN a a string CONSTRAINT \" + ckName3 + \" CHECK (a like 'a%')\", driver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1a7ea13e7dec771b0864f72686a626eded0595"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjE4NjE4", "url": "https://github.com/apache/hive/pull/1237#pullrequestreview-495218618", "createdAt": "2020-09-24T04:54:43Z", "commit": {"oid": "fb1a7ea13e7dec771b0864f72686a626eded0595"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1NDo0M1rOHXJsGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1NDo0M1rOHXJsGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzODA0MQ==", "bodyText": "nit: Remove space before \",\"", "url": "https://github.com/apache/hive/pull/1237#discussion_r494038041", "createdAt": "2020-09-24T04:54:43Z", "author": {"login": "sankarh"}, "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3265,13 +3283,15 @@ public void testConstraints() throws IOException {\n       assertTrue(fks.isEmpty());\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1a7ea13e7dec771b0864f72686a626eded0595"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb1a7ea13e7dec771b0864f72686a626eded0595", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/fb1a7ea13e7dec771b0864f72686a626eded0595", "committedDate": "2020-09-22T10:49:49Z", "message": "address review comments"}, "afterCommit": {"oid": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/f6a9e5981a406ff4806a8ba6180f3e9209428cca", "committedDate": "2020-09-24T05:08:22Z", "message": "fix indentions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/f6a9e5981a406ff4806a8ba6180f3e9209428cca", "committedDate": "2020-09-24T05:08:22Z", "message": "fix indentions"}, "afterCommit": {"oid": "da73f3b209f21d6156bed4d5992d7115eb256db1", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/da73f3b209f21d6156bed4d5992d7115eb256db1", "committedDate": "2020-09-24T16:12:21Z", "message": "fix indentions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52609b766d5276075f4c0eced10d6c058901f1f3", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/52609b766d5276075f4c0eced10d6c058901f1f3", "committedDate": "2020-09-29T07:08:24Z", "message": "First cut implementation for default/check constraint events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b1e200753b11234c1b856a0832e04038a1b0507", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/8b1e200753b11234c1b856a0832e04038a1b0507", "committedDate": "2020-09-29T07:08:24Z", "message": "P2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb4d0268139ae8d20202b8a46d16dad372d115fb", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/fb4d0268139ae8d20202b8a46d16dad372d115fb", "committedDate": "2020-09-29T07:08:24Z", "message": "P3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c92c544808e2ebd0fcb6d327313b92de04c673", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/65c92c544808e2ebd0fcb6d327313b92de04c673", "committedDate": "2020-09-29T07:08:24Z", "message": "Added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308b4042936afabed8ad9894d81c34bfec926a4c", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/308b4042936afabed8ad9894d81c34bfec926a4c", "committedDate": "2020-09-29T07:16:02Z", "message": "add constraints in repldumptask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e46e0c903b3367da45abe20dd65608d8951bc5c1", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/e46e0c903b3367da45abe20dd65608d8951bc5c1", "committedDate": "2020-09-29T07:16:04Z", "message": "Fix indentation and add license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37972619b3016a2bf2c643c82765a643e2f26584", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/37972619b3016a2bf2c643c82765a643e2f26584", "committedDate": "2020-09-29T07:16:04Z", "message": "fix review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84fb1d41167cd7669f4fbe0249e358cf11267a19", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/84fb1d41167cd7669f4fbe0249e358cf11267a19", "committedDate": "2020-09-29T07:16:04Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03186efc1aed26059a46968ddcb6c781950832de", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/03186efc1aed26059a46968ddcb6c781950832de", "committedDate": "2020-09-29T07:16:04Z", "message": "fix indentions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da73f3b209f21d6156bed4d5992d7115eb256db1", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/da73f3b209f21d6156bed4d5992d7115eb256db1", "committedDate": "2020-09-24T16:12:21Z", "message": "fix indentions"}, "afterCommit": {"oid": "03186efc1aed26059a46968ddcb6c781950832de", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/03186efc1aed26059a46968ddcb6c781950832de", "committedDate": "2020-09-29T07:16:04Z", "message": "fix indentions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d558ee05dfe1a04eb0178b6a35af730da54f789", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/5d558ee05dfe1a04eb0178b6a35af730da54f789", "committedDate": "2020-09-29T08:29:21Z", "message": "Add check/default constraint call in Hive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc48a9665dd164f4f45b81250eb5a39c866b31f3", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/dc48a9665dd164f4f45b81250eb5a39c866b31f3", "committedDate": "2020-09-29T17:08:10Z", "message": "Add check/default non-empty check in replDumptask"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e972bf6d17a0d947a92334243a1f39bd12108408", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/e972bf6d17a0d947a92334243a1f39bd12108408", "committedDate": "2020-09-29T16:53:07Z", "message": "Add check/default non-empty check in replDumptask"}, "afterCommit": {"oid": "dc48a9665dd164f4f45b81250eb5a39c866b31f3", "author": {"user": {"login": "adesh-rao", "name": "Adesh Kumar Rao"}}, "url": "https://github.com/apache/hive/commit/dc48a9665dd164f4f45b81250eb5a39c866b31f3", "committedDate": "2020-09-29T17:08:10Z", "message": "Add check/default non-empty check in replDumptask"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDk0MzYw", "url": "https://github.com/apache/hive/pull/1237#pullrequestreview-499494360", "createdAt": "2020-09-30T14:29:48Z", "commit": {"oid": "dc48a9665dd164f4f45b81250eb5a39c866b31f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3517, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}