{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0OTMyMzA2", "number": 1810, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDo1NDo0MVrOFIzXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMToxN1rOFK2yuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzc0NDUwOnYy", "diffSide": "RIGHT", "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveLexerParent.g", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDo1NDo0MVrOIK7vFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxMDowOVrOINt2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNTM4Mg==", "bodyText": "Since these two keywords are reserved, can you add a test to TestSQL11ReservedKeyWordsNegative.java?", "url": "https://github.com/apache/hive/pull/1810#discussion_r548335382", "createdAt": "2020-12-24T00:54:41Z", "author": {"login": "jcamachor"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveLexerParent.g", "diffHunk": "@@ -373,6 +373,8 @@ KW_COST: 'COST';\n KW_JOINCOST: 'JOINCOST';\n KW_WITHIN: 'WITHIN';\n KW_PKFK_JOIN: 'PKFK_JOIN';\n+KW_LEADING: 'LEADING';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MzY0OA==", "bodyText": "do we need to fully reserve these keywords - if not they could be added to: IdentifiersParser.g/nonReserved", "url": "https://github.com/apache/hive/pull/1810#discussion_r551253648", "createdAt": "2021-01-04T11:10:09Z", "author": {"login": "kgyrtkirk"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveLexerParent.g", "diffHunk": "@@ -373,6 +373,8 @@ KW_COST: 'COST';\n KW_JOINCOST: 'JOINCOST';\n KW_WITHIN: 'WITHIN';\n KW_PKFK_JOIN: 'PKFK_JOIN';\n+KW_LEADING: 'LEADING';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNTM4Mg=="}, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzc1OTc1OnYy", "diffSide": "RIGHT", "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTowNTozNlrOIK73mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxMDowNFrOINt2aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNzU2MA==", "bodyText": "I think this would match any function name, that then would be converted to trim (or any other variant) by the rules in trimFunction?\nI think one way of fixing this could be to declare TRIM as a keyword, and match directly on TRIM (TRIM is a reserved keyword in SQL standard) rather than functionName.\nCould you also add a negative test, i.e., a test where the trim construct is correct but the function name is different, and make sure it fails and it is not transformed by the parser?", "url": "https://github.com/apache/hive/pull/1810#discussion_r548337560", "createdAt": "2020-12-24T01:05:36Z", "author": {"login": "jcamachor"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -464,6 +473,7 @@ atomExpression\n     | whenExpression\n     | (subQueryExpression)=> (subQueryExpression)\n         -> ^(TOK_SUBQUERY_EXPR TOK_SUBQUERY_OP subQueryExpression)\n+    | (functionName LPAREN (leading=KW_LEADING | trailing=KW_TRAILING | KW_BOTH)? (trim_characters=selectExpression)? KW_FROM (str=selectExpression) RPAREN) => trimFunction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MzYwOA==", "bodyText": "this is a syntetic predicate expression; narrowing it down furthere will help for sure ; but since trimFunction also matches the functionName LPAREN prefix I think it should be placed in the function rule", "url": "https://github.com/apache/hive/pull/1810#discussion_r551253608", "createdAt": "2021-01-04T11:10:04Z", "author": {"login": "kgyrtkirk"}, "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -464,6 +473,7 @@ atomExpression\n     | whenExpression\n     | (subQueryExpression)=> (subQueryExpression)\n         -> ^(TOK_SUBQUERY_EXPR TOK_SUBQUERY_OP subQueryExpression)\n+    | (functionName LPAREN (leading=KW_LEADING | trailing=KW_TRAILING | KW_BOTH)? (trim_characters=selectExpression)? KW_FROM (str=selectExpression) RPAREN) => trimFunction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNzU2MA=="}, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI2ODY0OnYy", "diffSide": "RIGHT", "path": "ql/src/test/queries/clientpositive/udf_trim.q", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxODoxNVrOINuEsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzozNzozOVrOIOM2wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NzI2Nw==", "bodyText": "could you also add somenull cases as well trim(null,'x') and trim('x',null)\nI know they will probably work okay; but its better to cover them", "url": "https://github.com/apache/hive/pull/1810#discussion_r551257267", "createdAt": "2021-01-04T11:18:15Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/queries/clientpositive/udf_trim.q", "diffHunk": "@@ -1,2 +1,20 @@\n DESCRIBE FUNCTION trim;\n DESCRIBE FUNCTION EXTENDED trim;\n+\n+SELECT '\"' || trim('   tech   ') || '\"';\n+\n+SELECT '\"' || TRIM(' '  FROM  '   tech   ') || '\"';\n+\n+SELECT '\"' || TRIM(LEADING '0' FROM '000123') || '\"';\n+\n+SELECT '\"' || TRIM(TRAILING '1' FROM 'Tech1') || '\"';\n+\n+SELECT '\"' || TRIM(BOTH '1' FROM '123Tech111') || '\"';\n+\n+SELECT '\"' || ltrim('   tech   ') || '\"', '\"' || rtrim('   tech   ') || '\"';\n+\n+SELECT '\"' || lTRIM('0'  FROM  '000123') || '\"', '\"' || rTRIM('0'  FROM  '000123') || '\"';\n+\n+SELECT trim('000123', '0');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTYwMg==", "bodyText": "null cannot be passed as a parameter to trim. It works in Postgres and Oracle but not supported in Hive.\nThe following was executed on master without this patch:\nselect trim(null);\n\n org.apache.hadoop.hive.ql.parse.SemanticException: Line 6:7 Wrong arguments 'TOK_NULL': trim takes only STRING/CHAR/VARCHAR types. Found VOID\n\nIMHO we can implement this in a follow-up patch.", "url": "https://github.com/apache/hive/pull/1810#discussion_r551761602", "createdAt": "2021-01-05T07:37:39Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/queries/clientpositive/udf_trim.q", "diffHunk": "@@ -1,2 +1,20 @@\n DESCRIBE FUNCTION trim;\n DESCRIBE FUNCTION EXTENDED trim;\n+\n+SELECT '\"' || trim('   tech   ') || '\"';\n+\n+SELECT '\"' || TRIM(' '  FROM  '   tech   ') || '\"';\n+\n+SELECT '\"' || TRIM(LEADING '0' FROM '000123') || '\"';\n+\n+SELECT '\"' || TRIM(TRAILING '1' FROM 'Tech1') || '\"';\n+\n+SELECT '\"' || TRIM(BOTH '1' FROM '123Tech111') || '\"';\n+\n+SELECT '\"' || ltrim('   tech   ') || '\"', '\"' || rtrim('   tech   ') || '\"';\n+\n+SELECT '\"' || lTRIM('0'  FROM  '000123') || '\"', '\"' || rTRIM('0'  FROM  '000123') || '\"';\n+\n+SELECT trim('000123', '0');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NzI2Nw=="}, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI3ODAzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMToxN1rOINuKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDoxNjozN1rOIOY2eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1ODYzNQ==", "bodyText": "there is also some vectorized implementations (see StringRTrim for example)\nthe functionality is enhanced a bit here - those other implementations should be updated as well (and possibly also covered with tests)", "url": "https://github.com/apache/hive/pull/1810#discussion_r551258635", "createdAt": "2021-01-04T11:21:17Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java", "diffHunk": "@@ -68,11 +82,24 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n     if (valObject == null) {\n       return null;\n     }\n-    String val = ((Text) converter.convert(valObject)).toString();\n+    String val = stringToTrimConverter.convert(valObject).toString();\n     if (val == null) {\n       return null;\n     }\n-    result.set(performOp(val.toString()));\n+\n+    String trimChars = \" \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1ODEzNw==", "bodyText": "I add supporting vectorized two parameter version of trim functions when the first parameter is a column the second is a literal. Example:\ncreate table t1 (col0 string);\nselect trim(col0, 'xy') from t1 group by col0;\n\nIn case of trim chars parameter is also column we fall back for non-vectorized version of trim. I guess this use case is not as common as the previous but it can be implemented in a follow-up patch.", "url": "https://github.com/apache/hive/pull/1810#discussion_r551958137", "createdAt": "2021-01-05T14:16:37Z", "author": {"login": "kasakrisz"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java", "diffHunk": "@@ -68,11 +82,24 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n     if (valObject == null) {\n       return null;\n     }\n-    String val = ((Text) converter.convert(valObject)).toString();\n+    String val = stringToTrimConverter.convert(valObject).toString();\n     if (val == null) {\n       return null;\n     }\n-    result.set(performOp(val.toString()));\n+\n+    String trimChars = \" \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1ODYzNQ=="}, "originalCommit": {"oid": "d13a1a5fd2d1c91d7e26585500abe1366214c1d9"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 194, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}