{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjEzNjgx", "number": 1703, "title": "HIVE-24423: Improve DbNotificationListener Thread", "bodyText": "What changes were proposed in this pull request?\n\nWhy are the changes needed?\n\nDoes this PR introduce any user-facing change?\n\nHow was this patch tested?", "createdAt": "2020-11-24T16:38:46Z", "url": "https://github.com/apache/hive/pull/1703", "merged": true, "mergeCommit": {"oid": "23bc5469daad53b6839a86cd2c9db3d1d1c86d2e"}, "closed": true, "closedAt": "2020-11-30T14:29:59Z", "author": {"login": "belugabehr"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfseuMAH2gAyNTI2NjEzNjgxOjliMWFkYzMzMzcyZWZkOWM5MWZmOGQzZDcyYzdiNGQyZjY5NDZmY2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhhOYtgFqTU0MDY5MjE0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca", "author": {"user": {"login": "belugabehr", "name": null}}, "url": "https://github.com/apache/hive/commit/9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca", "committedDate": "2020-11-24T16:38:16Z", "message": "HIVE-24423: Improve DbNotificationListener Thread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Nzk3Mzky", "url": "https://github.com/apache/hive/pull/1703#pullrequestreview-538797392", "createdAt": "2020-11-25T19:35:35Z", "commit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Nzk3NjAw", "url": "https://github.com/apache/hive/pull/1703#pullrequestreview-538797600", "createdAt": "2020-11-25T19:35:57Z", "commit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjExNzM1", "url": "https://github.com/apache/hive/pull/1703#pullrequestreview-539211735", "createdAt": "2020-11-26T11:01:25Z", "commit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTowMToyNVrOH6WdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTowMToyNVrOH6WdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NzQ0OQ==", "bodyText": "What if interruption occurs while the execution of CleanerThread is within this try block, wouldn't the InterruptedException be caught by this catch block, and the thread will go on?", "url": "https://github.com/apache/hive/pull/1703#discussion_r530947449", "createdAt": "2020-11-26T11:01:25Z", "author": {"login": "miklosgergely"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -1242,64 +1244,50 @@ private void process(NotificationEvent event, ListenerEvent listenerEvent) throw\n   }\n \n   private static class CleanerThread extends Thread {\n-    private RawStore rs;\n+    private final RawStore rs;\n     private int ttl;\n-    private boolean shouldRun = true;\n     private long sleepTime;\n \n     CleanerThread(Configuration conf, RawStore rs) {\n       super(\"DB-Notification-Cleaner\");\n-      this.rs = rs;\n-      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n-      if(isReplEnabled){\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.REPL_EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      else {\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      setCleanupInterval(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL,\n-              TimeUnit.MILLISECONDS));\n       setDaemon(true);\n+      this.rs = Objects.requireNonNull(rs);\n+\n+      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n+      ConfVars ttlConf = (isReplEnabled) ?  ConfVars.REPL_EVENT_DB_LISTENER_TTL : ConfVars.EVENT_DB_LISTENER_TTL;\n+      setTimeToLive(MetastoreConf.getTimeVar(conf, ttlConf, TimeUnit.SECONDS));\n+      setCleanupInterval(\n+          MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL, TimeUnit.MILLISECONDS));\n     }\n \n     @Override\n     public void run() {\n-      while (shouldRun) {\n+      while (true) {\n+        LOG.debug(\"Cleaner thread running\");\n         try {\n           rs.cleanNotificationEvents(ttl);\n           rs.cleanWriteNotificationEvents(ttl);\n         } catch (Exception ex) {\n-          //catching exceptions here makes sure that the thread doesn't die in case of unexpected\n-          //exceptions\n-          LOG.warn(\"Exception received while cleaning notifications: \", ex);\n+          LOG.warn(\"Exception received while cleaning notifications\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjkyMTQ5", "url": "https://github.com/apache/hive/pull/1703#pullrequestreview-540692149", "createdAt": "2020-11-30T08:39:14Z", "commit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODozOToxNFrOH7wm8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODozOToxNFrOH7wm8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQyNDQzMg==", "bodyText": "No, go ahead and merge it", "url": "https://github.com/apache/hive/pull/1703#discussion_r532424432", "createdAt": "2020-11-30T08:39:14Z", "author": {"login": "miklosgergely"}, "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -1242,64 +1244,50 @@ private void process(NotificationEvent event, ListenerEvent listenerEvent) throw\n   }\n \n   private static class CleanerThread extends Thread {\n-    private RawStore rs;\n+    private final RawStore rs;\n     private int ttl;\n-    private boolean shouldRun = true;\n     private long sleepTime;\n \n     CleanerThread(Configuration conf, RawStore rs) {\n       super(\"DB-Notification-Cleaner\");\n-      this.rs = rs;\n-      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n-      if(isReplEnabled){\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.REPL_EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      else {\n-        setTimeToLive(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_TTL,\n-                TimeUnit.SECONDS));\n-      }\n-      setCleanupInterval(MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL,\n-              TimeUnit.MILLISECONDS));\n       setDaemon(true);\n+      this.rs = Objects.requireNonNull(rs);\n+\n+      boolean isReplEnabled = MetastoreConf.getBoolVar(conf, ConfVars.REPLCMENABLED);\n+      ConfVars ttlConf = (isReplEnabled) ?  ConfVars.REPL_EVENT_DB_LISTENER_TTL : ConfVars.EVENT_DB_LISTENER_TTL;\n+      setTimeToLive(MetastoreConf.getTimeVar(conf, ttlConf, TimeUnit.SECONDS));\n+      setCleanupInterval(\n+          MetastoreConf.getTimeVar(conf, ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL, TimeUnit.MILLISECONDS));\n     }\n \n     @Override\n     public void run() {\n-      while (shouldRun) {\n+      while (true) {\n+        LOG.debug(\"Cleaner thread running\");\n         try {\n           rs.cleanNotificationEvents(ttl);\n           rs.cleanWriteNotificationEvents(ttl);\n         } catch (Exception ex) {\n-          //catching exceptions here makes sure that the thread doesn't die in case of unexpected\n-          //exceptions\n-          LOG.warn(\"Exception received while cleaning notifications: \", ex);\n+          LOG.warn(\"Exception received while cleaning notifications\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NzQ0OQ=="}, "originalCommit": {"oid": "9b1adc33372efd9c91ff8d3d72c7b4d2f6946fca"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3072, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}