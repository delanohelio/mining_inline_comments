{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTU0MzY2", "number": 1531, "title": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator", "bodyText": "What changes were proposed in this pull request?\nEstimate statistics of LATERAL VIEW correctly.\nStatsRulesProcFactory doesn't have any rules to handle a JOIN by LATERAL VIEW.\nThis can cause an underestimation in case that UDTF in LATERAL VIEW generates multiple rows.\nWhy are the changes needed?\nSignificant underestimation can happen when LATERAL VIEW increases the number of records a lot and the source table has large.\nDoes this PR introduce any user-facing change?\nNo.\nHow was this patch tested?\nAdded one test case.", "createdAt": "2020-09-28T13:45:56Z", "url": "https://github.com/apache/hive/pull/1531", "merged": true, "mergeCommit": {"oid": "6deef2c6ca5561204e364bb6724cdcd546cdbec7"}, "closed": true, "closedAt": "2021-01-13T08:06:40Z", "author": {"login": "okumin"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNgF5LgBqjM4MTczNDM1ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdl-d7NAFqTU1MTA0MzgzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7dac2f8963e97e2e45d50a65f6982fa86677ad0d", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/7dac2f8963e97e2e45d50a65f6982fa86677ad0d", "committedDate": "2020-09-28T13:23:52Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}, "afterCommit": {"oid": "c88200f458e85f0982dc37641764e451e44d2548", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/c88200f458e85f0982dc37641764e451e44d2548", "committedDate": "2020-09-29T03:59:12Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MTIzOTYz", "url": "https://github.com/apache/hive/pull/1531#pullrequestreview-498123963", "createdAt": "2020-09-29T06:15:24Z", "commit": {"oid": "c88200f458e85f0982dc37641764e451e44d2548"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjoxNToyNVrOHZcXAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjoxNToyNVrOHZcXAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0MTA5MA==", "bodyText": "To make EXPLAIN show Statistics. I'm thinking to create another ticket and add this line to other annotate_stats_*.q.\ne.g. https://github.com/apache/hive/blob/master/ql/src/test/results/clientpositive/llap/annotate_stats_select.q.out", "url": "https://github.com/apache/hive/pull/1531#discussion_r496441090", "createdAt": "2020-09-29T06:15:25Z", "author": {"login": "okumin"}, "path": "ql/src/test/queries/clientpositive/annotate_stats_lateral_view_join.q", "diffHunk": "@@ -0,0 +1,38 @@\n+set hive.fetch.task.conversion=none;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88200f458e85f0982dc37641764e451e44d2548"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4ODkyNTIx", "url": "https://github.com/apache/hive/pull/1531#pullrequestreview-498892521", "createdAt": "2020-09-29T21:05:57Z", "commit": {"oid": "c88200f458e85f0982dc37641764e451e44d2548"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTowNTo1N1rOHaCGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTowNTo1N1rOHaCGfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1OTQ1NQ==", "bodyText": "Could you provide a bit more details about what the rule does? Most of the other rules in this class give a general overview of the cost model they implement.", "url": "https://github.com/apache/hive/pull/1531#discussion_r497059455", "createdAt": "2020-09-29T21:05:57Z", "author": {"login": "zabetak"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java", "diffHunk": "@@ -2921,6 +2920,77 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n     }\n   }\n \n+  /**\n+   * LateralViewJoinOperator joins the output of select with the output of UDTF.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88200f458e85f0982dc37641764e451e44d2548"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c88200f458e85f0982dc37641764e451e44d2548", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/c88200f458e85f0982dc37641764e451e44d2548", "committedDate": "2020-09-29T03:59:12Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}, "afterCommit": {"oid": "01641e9a0680035e1233e4b8dd21998f27845371", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/01641e9a0680035e1233e4b8dd21998f27845371", "committedDate": "2020-09-30T03:13:14Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01641e9a0680035e1233e4b8dd21998f27845371", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/01641e9a0680035e1233e4b8dd21998f27845371", "committedDate": "2020-09-30T03:13:14Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}, "afterCommit": {"oid": "b37a00a9addc557ffc37723d996b130355b7f721", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/b37a00a9addc557ffc37723d996b130355b7f721", "committedDate": "2020-09-30T05:19:52Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b37a00a9addc557ffc37723d996b130355b7f721", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/b37a00a9addc557ffc37723d996b130355b7f721", "committedDate": "2020-09-30T05:19:52Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}, "afterCommit": {"oid": "e2479f85c032aa08b5d9065f53b2e26140853cf7", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/e2479f85c032aa08b5d9065f53b2e26140853cf7", "committedDate": "2020-09-30T07:34:56Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc942b665ea15e38b14c9c70d813c3bd348bc112", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/cc942b665ea15e38b14c9c70d813c3bd348bc112", "committedDate": "2020-09-30T12:43:25Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2479f85c032aa08b5d9065f53b2e26140853cf7", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/e2479f85c032aa08b5d9065f53b2e26140853cf7", "committedDate": "2020-09-30T07:34:56Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}, "afterCommit": {"oid": "cc942b665ea15e38b14c9c70d813c3bd348bc112", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/cc942b665ea15e38b14c9c70d813c3bd348bc112", "committedDate": "2020-09-30T12:43:25Z", "message": "HIVE-24203: Implement stats annotation rule for the LateralViewJoinOperator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5OTE0NTIy", "url": "https://github.com/apache/hive/pull/1531#pullrequestreview-499914522", "createdAt": "2020-10-01T00:01:21Z", "commit": {"oid": "cc942b665ea15e38b14c9c70d813c3bd348bc112"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowMToyMVrOHazRWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowODo0N1rOHazYww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NTA1MA==", "bodyText": "Just leaving a note. I took a quick look at the UDTF logic and it seems the selectivity is hardcoded via config. It seems the outer flag is not taken into account either, which could be a straightforward improvement for the estimates, i.e., UDFT will produce at least as many rows as it receives.", "url": "https://github.com/apache/hive/pull/1531#discussion_r497865050", "createdAt": "2020-10-01T00:01:21Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java", "diffHunk": "@@ -2921,6 +2920,97 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n     }\n   }\n \n+  /**\n+   * LateralViewJoinOperator changes the data size and column level statistics.\n+   *\n+   * A diagram of LATERAL VIEW.\n+   *\n+   *   [Lateral View Forward]\n+   *          /     \\\n+   *    [Select]  [Select]\n+   *        |        |\n+   *        |     [UDTF]\n+   *        \\       /\n+   *   [Lateral View Join]\n+   *\n+   * For each row of the source, the left branch just picks columns and the right branch processes UDTF.\n+   * And then LVJ joins a row from the left branch with rows from the right branch.\n+   * The join has one-to-many relationship since UDTF can generate multiple rows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc942b665ea15e38b14c9c70d813c3bd348bc112"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2Njk0Nw==", "bodyText": "Do you need to clone them? Are you modifying them? (Same for next line)", "url": "https://github.com/apache/hive/pull/1531#discussion_r497866947", "createdAt": "2020-10-01T00:08:47Z", "author": {"login": "jcamachor"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java", "diffHunk": "@@ -2921,6 +2920,97 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n     }\n   }\n \n+  /**\n+   * LateralViewJoinOperator changes the data size and column level statistics.\n+   *\n+   * A diagram of LATERAL VIEW.\n+   *\n+   *   [Lateral View Forward]\n+   *          /     \\\n+   *    [Select]  [Select]\n+   *        |        |\n+   *        |     [UDTF]\n+   *        \\       /\n+   *   [Lateral View Join]\n+   *\n+   * For each row of the source, the left branch just picks columns and the right branch processes UDTF.\n+   * And then LVJ joins a row from the left branch with rows from the right branch.\n+   * The join has one-to-many relationship since UDTF can generate multiple rows.\n+   *\n+   * This rule multiplies the stats from the left branch by T(right) / T(left) and sums up the both sides.\n+   */\n+  public static class LateralViewJoinStatsRule extends DefaultStatsRule implements SemanticNodeProcessor {\n+    @Override\n+    public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n+                          Object... nodeOutputs) throws SemanticException {\n+      final LateralViewJoinOperator lop = (LateralViewJoinOperator) nd;\n+      final AnnotateStatsProcCtx aspCtx = (AnnotateStatsProcCtx) procCtx;\n+      final HiveConf conf = aspCtx.getConf();\n+\n+      if (!isAllParentsContainStatistics(lop)) {\n+        return null;\n+      }\n+\n+      final List<Operator<? extends OperatorDesc>> parents = lop.getParentOperators();\n+      if (parents.size() != 2) {\n+        LOG.warn(\"LateralViewJoinOperator should have just two parents but actually has \"\n+                + parents.size() + \" parents.\");\n+        return null;\n+      }\n+\n+      final Statistics selectStats = parents.get(LateralViewJoinOperator.SELECT_TAG).getStatistics().clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc942b665ea15e38b14c9c70d813c3bd348bc112"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e492de239427fc1e38e5e4350cfdce409ebb70", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/91e492de239427fc1e38e5e4350cfdce409ebb70", "committedDate": "2020-10-06T07:40:01Z", "message": "Remove unnecessary clone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab75d7ae2a01613f9539d1e12857a32329b61b24", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/ab75d7ae2a01613f9539d1e12857a32329b61b24", "committedDate": "2020-10-06T13:04:17Z", "message": "Add one more test query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "536b335b5e2152b3bd8b171fde91aad946a8e716", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/536b335b5e2152b3bd8b171fde91aad946a8e716", "committedDate": "2020-10-06T08:19:21Z", "message": "Add one more test query"}, "afterCommit": {"oid": "ab75d7ae2a01613f9539d1e12857a32329b61b24", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/ab75d7ae2a01613f9539d1e12857a32329b61b24", "committedDate": "2020-10-06T13:04:17Z", "message": "Add one more test query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTMwNDAz", "url": "https://github.com/apache/hive/pull/1531#pullrequestreview-503130403", "createdAt": "2020-10-06T16:06:37Z", "commit": {"oid": "91e492de239427fc1e38e5e4350cfdce409ebb70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowNjozN1rOHdPQzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowNjozN1rOHdPQzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMDgxMw==", "bodyText": "With clone, the following condition is not satisfied since the basic stats of parent operators are PARTIAL.\n\n  \n    \n      hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java\n    \n    \n         Line 2969\n      in\n      91e492d\n    \n    \n    \n    \n\n        \n          \n           if (satisfyPrecondition(selectStats) && satisfyPrecondition(udtfStats)) {", "url": "https://github.com/apache/hive/pull/1531#discussion_r500420813", "createdAt": "2020-10-06T16:06:37Z", "author": {"login": "okumin"}, "path": "ql/src/test/results/clientpositive/llap/annotate_stats_lateral_view_join.q.out", "diffHunk": "@@ -503,14 +503,14 @@ STAGE PLANS:\n                             Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: COMPLETE\n                             Lateral View Join Operator\n                               outputColumnNames: _col0, _col1, _col5, _col6\n-                              Statistics: Num rows: 0 Data size: 24 Basic stats: PARTIAL Column stats: NONE\n+                              Statistics: Num rows: 0 Data size: 24 Basic stats: PARTIAL Column stats: COMPLETE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e492de239427fc1e38e5e4350cfdce409ebb70"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzODMwNjIx", "url": "https://github.com/apache/hive/pull/1531#pullrequestreview-503830621", "createdAt": "2020-10-07T12:36:40Z", "commit": {"oid": "ab75d7ae2a01613f9539d1e12857a32329b61b24"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjozNjo0MFrOHdxKSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzo0NDoyOVrOHd0ERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3NjIwMg==", "bodyText": "I know selectStats.getNumRows() should not be zero - but just in case... could you also add the resulting logic as StatsUtils or something like that?", "url": "https://github.com/apache/hive/pull/1531#discussion_r500976202", "createdAt": "2020-10-07T12:36:40Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java", "diffHunk": "@@ -2921,6 +2920,97 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n     }\n   }\n \n+  /**\n+   * LateralViewJoinOperator changes the data size and column level statistics.\n+   *\n+   * A diagram of LATERAL VIEW.\n+   *\n+   *   [Lateral View Forward]\n+   *          /     \\\n+   *    [Select]  [Select]\n+   *        |        |\n+   *        |     [UDTF]\n+   *        \\       /\n+   *   [Lateral View Join]\n+   *\n+   * For each row of the source, the left branch just picks columns and the right branch processes UDTF.\n+   * And then LVJ joins a row from the left branch with rows from the right branch.\n+   * The join has one-to-many relationship since UDTF can generate multiple rows.\n+   *\n+   * This rule multiplies the stats from the left branch by T(right) / T(left) and sums up the both sides.\n+   */\n+  public static class LateralViewJoinStatsRule extends DefaultStatsRule implements SemanticNodeProcessor {\n+    @Override\n+    public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n+                          Object... nodeOutputs) throws SemanticException {\n+      final LateralViewJoinOperator lop = (LateralViewJoinOperator) nd;\n+      final AnnotateStatsProcCtx aspCtx = (AnnotateStatsProcCtx) procCtx;\n+      final HiveConf conf = aspCtx.getConf();\n+\n+      if (!isAllParentsContainStatistics(lop)) {\n+        return null;\n+      }\n+\n+      final List<Operator<? extends OperatorDesc>> parents = lop.getParentOperators();\n+      if (parents.size() != 2) {\n+        LOG.warn(\"LateralViewJoinOperator should have just two parents but actually has \"\n+                + parents.size() + \" parents.\");\n+        return null;\n+      }\n+\n+      final Statistics selectStats = parents.get(LateralViewJoinOperator.SELECT_TAG).getStatistics();\n+      final Statistics udtfStats = parents.get(LateralViewJoinOperator.UDTF_TAG).getStatistics();\n+\n+      final double factor = (double) udtfStats.getNumRows() / (double) selectStats.getNumRows();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab75d7ae2a01613f9539d1e12857a32329b61b24"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MTE4NQ==", "bodyText": "this seems to be a common expression in both branches of the if - could you move it outside?", "url": "https://github.com/apache/hive/pull/1531#discussion_r500981185", "createdAt": "2020-10-07T12:44:26Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java", "diffHunk": "@@ -2921,6 +2920,97 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n     }\n   }\n \n+  /**\n+   * LateralViewJoinOperator changes the data size and column level statistics.\n+   *\n+   * A diagram of LATERAL VIEW.\n+   *\n+   *   [Lateral View Forward]\n+   *          /     \\\n+   *    [Select]  [Select]\n+   *        |        |\n+   *        |     [UDTF]\n+   *        \\       /\n+   *   [Lateral View Join]\n+   *\n+   * For each row of the source, the left branch just picks columns and the right branch processes UDTF.\n+   * And then LVJ joins a row from the left branch with rows from the right branch.\n+   * The join has one-to-many relationship since UDTF can generate multiple rows.\n+   *\n+   * This rule multiplies the stats from the left branch by T(right) / T(left) and sums up the both sides.\n+   */\n+  public static class LateralViewJoinStatsRule extends DefaultStatsRule implements SemanticNodeProcessor {\n+    @Override\n+    public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n+                          Object... nodeOutputs) throws SemanticException {\n+      final LateralViewJoinOperator lop = (LateralViewJoinOperator) nd;\n+      final AnnotateStatsProcCtx aspCtx = (AnnotateStatsProcCtx) procCtx;\n+      final HiveConf conf = aspCtx.getConf();\n+\n+      if (!isAllParentsContainStatistics(lop)) {\n+        return null;\n+      }\n+\n+      final List<Operator<? extends OperatorDesc>> parents = lop.getParentOperators();\n+      if (parents.size() != 2) {\n+        LOG.warn(\"LateralViewJoinOperator should have just two parents but actually has \"\n+                + parents.size() + \" parents.\");\n+        return null;\n+      }\n+\n+      final Statistics selectStats = parents.get(LateralViewJoinOperator.SELECT_TAG).getStatistics();\n+      final Statistics udtfStats = parents.get(LateralViewJoinOperator.UDTF_TAG).getStatistics();\n+\n+      final double factor = (double) udtfStats.getNumRows() / (double) selectStats.getNumRows();\n+      final long selectDataSize = StatsUtils.safeMult(selectStats.getDataSize(), factor);\n+      final long dataSize = StatsUtils.safeAdd(selectDataSize, udtfStats.getDataSize());\n+      Statistics joinedStats = new Statistics(udtfStats.getNumRows(), dataSize, 0, 0);\n+\n+      if (satisfyPrecondition(selectStats) && satisfyPrecondition(udtfStats)) {\n+        final Map<String, ExprNodeDesc> columnExprMap = lop.getColumnExprMap();\n+        final RowSchema schema = lop.getSchema();\n+\n+        joinedStats.updateColumnStatsState(selectStats.getColumnStatsState());\n+        final List<ColStatistics> selectColStats = StatsUtils\n+                .getColStatisticsFromExprMap(conf, selectStats, columnExprMap, schema);\n+        joinedStats.addToColumnStats(multiplyColStats(selectColStats, factor));\n+\n+        joinedStats.updateColumnStatsState(udtfStats.getColumnStatsState());\n+        final List<ColStatistics> udtfColStats = StatsUtils\n+                .getColStatisticsFromExprMap(conf, udtfStats, columnExprMap, schema);\n+        joinedStats.addToColumnStats(udtfColStats);\n+\n+        joinedStats = applyRuntimeStats(aspCtx.getParseContext().getContext(), joinedStats, lop);\n+        lop.setStatistics(joinedStats);\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"[0] STATS-\" + lop.toString() + \": \" + joinedStats.extendedToString());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab75d7ae2a01613f9539d1e12857a32329b61b24"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMTQ2Ng==", "bodyText": "I think we should make sure that NDV is at least 1 in case numrows is >0", "url": "https://github.com/apache/hive/pull/1531#discussion_r501021466", "createdAt": "2020-10-07T13:41:27Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java", "diffHunk": "@@ -2921,6 +2920,97 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n     }\n   }\n \n+  /**\n+   * LateralViewJoinOperator changes the data size and column level statistics.\n+   *\n+   * A diagram of LATERAL VIEW.\n+   *\n+   *   [Lateral View Forward]\n+   *          /     \\\n+   *    [Select]  [Select]\n+   *        |        |\n+   *        |     [UDTF]\n+   *        \\       /\n+   *   [Lateral View Join]\n+   *\n+   * For each row of the source, the left branch just picks columns and the right branch processes UDTF.\n+   * And then LVJ joins a row from the left branch with rows from the right branch.\n+   * The join has one-to-many relationship since UDTF can generate multiple rows.\n+   *\n+   * This rule multiplies the stats from the left branch by T(right) / T(left) and sums up the both sides.\n+   */\n+  public static class LateralViewJoinStatsRule extends DefaultStatsRule implements SemanticNodeProcessor {\n+    @Override\n+    public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n+                          Object... nodeOutputs) throws SemanticException {\n+      final LateralViewJoinOperator lop = (LateralViewJoinOperator) nd;\n+      final AnnotateStatsProcCtx aspCtx = (AnnotateStatsProcCtx) procCtx;\n+      final HiveConf conf = aspCtx.getConf();\n+\n+      if (!isAllParentsContainStatistics(lop)) {\n+        return null;\n+      }\n+\n+      final List<Operator<? extends OperatorDesc>> parents = lop.getParentOperators();\n+      if (parents.size() != 2) {\n+        LOG.warn(\"LateralViewJoinOperator should have just two parents but actually has \"\n+                + parents.size() + \" parents.\");\n+        return null;\n+      }\n+\n+      final Statistics selectStats = parents.get(LateralViewJoinOperator.SELECT_TAG).getStatistics();\n+      final Statistics udtfStats = parents.get(LateralViewJoinOperator.UDTF_TAG).getStatistics();\n+\n+      final double factor = (double) udtfStats.getNumRows() / (double) selectStats.getNumRows();\n+      final long selectDataSize = StatsUtils.safeMult(selectStats.getDataSize(), factor);\n+      final long dataSize = StatsUtils.safeAdd(selectDataSize, udtfStats.getDataSize());\n+      Statistics joinedStats = new Statistics(udtfStats.getNumRows(), dataSize, 0, 0);\n+\n+      if (satisfyPrecondition(selectStats) && satisfyPrecondition(udtfStats)) {\n+        final Map<String, ExprNodeDesc> columnExprMap = lop.getColumnExprMap();\n+        final RowSchema schema = lop.getSchema();\n+\n+        joinedStats.updateColumnStatsState(selectStats.getColumnStatsState());\n+        final List<ColStatistics> selectColStats = StatsUtils\n+                .getColStatisticsFromExprMap(conf, selectStats, columnExprMap, schema);\n+        joinedStats.addToColumnStats(multiplyColStats(selectColStats, factor));\n+\n+        joinedStats.updateColumnStatsState(udtfStats.getColumnStatsState());\n+        final List<ColStatistics> udtfColStats = StatsUtils\n+                .getColStatisticsFromExprMap(conf, udtfStats, columnExprMap, schema);\n+        joinedStats.addToColumnStats(udtfColStats);\n+\n+        joinedStats = applyRuntimeStats(aspCtx.getParseContext().getContext(), joinedStats, lop);\n+        lop.setStatistics(joinedStats);\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"[0] STATS-\" + lop.toString() + \": \" + joinedStats.extendedToString());\n+        }\n+      } else {\n+        joinedStats = applyRuntimeStats(aspCtx.getParseContext().getContext(), joinedStats, lop);\n+        lop.setStatistics(joinedStats);\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"[1] STATS-\" + lop.toString() + \": \" + joinedStats.extendedToString());\n+        }\n+      }\n+      return null;\n+    }\n+\n+    private List<ColStatistics> multiplyColStats(List<ColStatistics> colStatistics, double factor) {\n+      for (ColStatistics colStats : colStatistics) {\n+        colStats.setNumFalses(StatsUtils.safeMult(colStats.getNumFalses(), factor));\n+        colStats.setNumTrues(StatsUtils.safeMult(colStats.getNumTrues(), factor));\n+        colStats.setNumNulls(StatsUtils.safeMult(colStats.getNumNulls(), factor));\n+        // When factor > 1, the same records are duplicated and countDistinct never changes.\n+        if (factor < 1.0) {\n+          colStats.setCountDistint(StatsUtils.safeMult(colStats.getCountDistint(), factor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab75d7ae2a01613f9539d1e12857a32329b61b24"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMzgxMw==", "bodyText": "definetly - I don't think it will be 0 in reality!", "url": "https://github.com/apache/hive/pull/1531#discussion_r501023813", "createdAt": "2020-10-07T13:44:29Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/llap/annotate_stats_lateral_view_join.q.out", "diffHunk": "@@ -503,14 +503,14 @@ STAGE PLANS:\n                             Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: COMPLETE\n                             Lateral View Join Operator\n                               outputColumnNames: _col0, _col1, _col5, _col6\n-                              Statistics: Num rows: 0 Data size: 24 Basic stats: PARTIAL Column stats: NONE\n+                              Statistics: Num rows: 0 Data size: 24 Basic stats: PARTIAL Column stats: COMPLETE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMDgxMw=="}, "originalCommit": {"oid": "91e492de239427fc1e38e5e4350cfdce409ebb70"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d333d5d70184a1cf1f0c0f239e9229965e486202", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/d333d5d70184a1cf1f0c0f239e9229965e486202", "committedDate": "2020-10-08T02:54:52Z", "message": "Move some steps outside"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50396346eaed5d6bab4ff87dd079918a769a7ebd", "author": {"user": {"login": "okumin", "name": "okumin"}}, "url": "https://github.com/apache/hive/commit/50396346eaed5d6bab4ff87dd079918a769a7ebd", "committedDate": "2020-10-08T06:49:10Z", "message": "Ensure that num rows >= 1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MDE5NjMy", "url": "https://github.com/apache/hive/pull/1531#pullrequestreview-508019632", "createdAt": "2020-10-14T06:05:56Z", "commit": {"oid": "50396346eaed5d6bab4ff87dd079918a769a7ebd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjowNTo1NlrOHhDgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjowNTo1NlrOHhDgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyMjU1NA==", "bodyText": "factor will be greater than 0.0 and must not 0 or infinity.", "url": "https://github.com/apache/hive/pull/1531#discussion_r504422554", "createdAt": "2020-10-14T06:05:56Z", "author": {"login": "okumin"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java", "diffHunk": "@@ -2961,10 +2961,11 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,\n       final Statistics selectStats = parents.get(LateralViewJoinOperator.SELECT_TAG).getStatistics();\n       final Statistics udtfStats = parents.get(LateralViewJoinOperator.UDTF_TAG).getStatistics();\n \n-      final double factor = (double) udtfStats.getNumRows() / (double) selectStats.getNumRows();\n+      final long udtfNumRows = Math.max(udtfStats.getNumRows(), 1);\n+      final double factor = (double) udtfNumRows / (double) Math.max(selectStats.getNumRows(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50396346eaed5d6bab4ff87dd079918a769a7ebd"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDQzODM3", "url": "https://github.com/apache/hive/pull/1531#pullrequestreview-551043837", "createdAt": "2020-12-14T04:59:14Z", "commit": {"oid": "50396346eaed5d6bab4ff87dd079918a769a7ebd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3113, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}