{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDY3NDQx", "number": 1205, "title": "HIVE-23800: Add hooks when HiveServer2 stops due to OutOfMemoryError", "bodyText": "NOTICE\nPlease create an issue in ASF JIRA before opening a pull request,\nand you need to set the title of the pull request which starts with\nthe corresponding JIRA issue number. (e.g. HIVE-XXXXX: Fix a typo in YYY)\nFor more details, please see https://cwiki.apache.org/confluence/display/Hive/HowToContribute", "createdAt": "2020-07-03T13:47:02Z", "url": "https://github.com/apache/hive/pull/1205", "merged": true, "mergeCommit": {"oid": "b58f5444456c96571992ff954bf7ec81a5b1e687"}, "closed": true, "closedAt": "2020-10-14T07:47:01Z", "author": {"login": "dengzhhu653"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxTjSvgH2gAyNDQ0MDY3NDQxOjc5OGJlOTBmNjlkNjEyMzQ5MTc2MWNiY2VkNDdhMDI5NTdmODVhMmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSGxJXgFqTUwNzMyODQ1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "798be90f69d6123491761cbced47a02957f85a2e", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/798be90f69d6123491761cbced47a02957f85a2e", "committedDate": "2020-07-03T13:35:07Z", "message": "Make HiveServer2 oom hook interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e167f0ee1c5ac60734fca9a0f20cb5754832594", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/2e167f0ee1c5ac60734fca9a0f20cb5754832594", "committedDate": "2020-07-03T23:10:47Z", "message": "fix npe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b15298c43e032b4b4d8db59ab1d6614d92d0aba2", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/b15298c43e032b4b4d8db59ab1d6614d92d0aba2", "committedDate": "2020-07-04T00:08:53Z", "message": "rename handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ea7b1d5452e8cb6ab0a74ea431dfa936f769c6", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/21ea7b1d5452e8cb6ab0a74ea431dfa936f769c6", "committedDate": "2020-07-06T23:27:52Z", "message": "refactor class name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/bf425d08ea7662c4cc9e0af2e76d2c89737a7662", "committedDate": "2020-07-07T01:44:26Z", "message": "refine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjc3Nzg2", "url": "https://github.com/apache/hive/pull/1205#pullrequestreview-443677786", "createdAt": "2020-07-07T08:34:46Z", "commit": {"oid": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozNDo0NlrOGt0fIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozNzowNVrOGt0k2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5OTA0MA==", "bodyText": "please reuse parts of HookRunner for loading stuff\nand why would you need setAccessible ?", "url": "https://github.com/apache/hive/pull/1205#discussion_r450699040", "createdAt": "2020-07-07T08:34:46Z", "author": {"login": "kgyrtkirk"}, "path": "service/src/java/org/apache/hive/service/server/HiveServer2OomHookRunner.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.server;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.JavaUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HiveServer2OomHookRunner implements Runnable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveServer2OomHookRunner.class);\n+  private OomHookContext context;\n+  private final List<OomHookWithContext> hooks = new ArrayList<OomHookWithContext>();\n+\n+  HiveServer2OomHookRunner(HiveServer2 hiveServer2, HiveConf hiveConf) {\n+    context = new OomHookContext(hiveServer2);\n+    // The hs2 has not been initialized yet, hiveServer2.getHiveConf() would be null\n+    init(hiveConf);\n+  }\n+\n+  private void init(HiveConf hiveConf) {\n+    String csHooks = hiveConf.getVar(ConfVars.HIVE_SERVER2_OOM_HOOKS);\n+    if (!StringUtils.isBlank(csHooks)) {\n+      String[] hookClasses = csHooks.split(\",\");\n+      for (String hookClass : hookClasses) {\n+        try {\n+          Class clazz =  JavaUtils.loadClass(hookClass.trim());\n+          Constructor ctor = clazz.getDeclaredConstructor();\n+          ctor.setAccessible(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5OTQ4OA==", "bodyText": "don't swallow exceptions...", "url": "https://github.com/apache/hive/pull/1205#discussion_r450699488", "createdAt": "2020-07-07T08:35:27Z", "author": {"login": "kgyrtkirk"}, "path": "service/src/java/org/apache/hive/service/server/HiveServer2OomHookRunner.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.server;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.JavaUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HiveServer2OomHookRunner implements Runnable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveServer2OomHookRunner.class);\n+  private OomHookContext context;\n+  private final List<OomHookWithContext> hooks = new ArrayList<OomHookWithContext>();\n+\n+  HiveServer2OomHookRunner(HiveServer2 hiveServer2, HiveConf hiveConf) {\n+    context = new OomHookContext(hiveServer2);\n+    // The hs2 has not been initialized yet, hiveServer2.getHiveConf() would be null\n+    init(hiveConf);\n+  }\n+\n+  private void init(HiveConf hiveConf) {\n+    String csHooks = hiveConf.getVar(ConfVars.HIVE_SERVER2_OOM_HOOKS);\n+    if (!StringUtils.isBlank(csHooks)) {\n+      String[] hookClasses = csHooks.split(\",\");\n+      for (String hookClass : hookClasses) {\n+        try {\n+          Class clazz =  JavaUtils.loadClass(hookClass.trim());\n+          Constructor ctor = clazz.getDeclaredConstructor();\n+          ctor.setAccessible(true);\n+          hooks.add((OomHookWithContext)ctor.newInstance());\n+        } catch (Exception e) {\n+          LOG.error(\"Skip adding oom hook '\" + hookClass + \"'\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMDUwNw==", "bodyText": "why is this private?", "url": "https://github.com/apache/hive/pull/1205#discussion_r450700507", "createdAt": "2020-07-07T08:37:05Z", "author": {"login": "kgyrtkirk"}, "path": "service/src/java/org/apache/hive/service/server/HiveServer2OomHookRunner.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.server;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.JavaUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HiveServer2OomHookRunner implements Runnable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveServer2OomHookRunner.class);\n+  private OomHookContext context;\n+  private final List<OomHookWithContext> hooks = new ArrayList<OomHookWithContext>();\n+\n+  HiveServer2OomHookRunner(HiveServer2 hiveServer2, HiveConf hiveConf) {\n+    context = new OomHookContext(hiveServer2);\n+    // The hs2 has not been initialized yet, hiveServer2.getHiveConf() would be null\n+    init(hiveConf);\n+  }\n+\n+  private void init(HiveConf hiveConf) {\n+    String csHooks = hiveConf.getVar(ConfVars.HIVE_SERVER2_OOM_HOOKS);\n+    if (!StringUtils.isBlank(csHooks)) {\n+      String[] hookClasses = csHooks.split(\",\");\n+      for (String hookClass : hookClasses) {\n+        try {\n+          Class clazz =  JavaUtils.loadClass(hookClass.trim());\n+          Constructor ctor = clazz.getDeclaredConstructor();\n+          ctor.setAccessible(true);\n+          hooks.add((OomHookWithContext)ctor.newInstance());\n+        } catch (Exception e) {\n+          LOG.error(\"Skip adding oom hook '\" + hookClass + \"'\", e);\n+        }\n+      }\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  public HiveServer2OomHookRunner(HiveConf hiveConf) {\n+    init(hiveConf);\n+  }\n+\n+  @VisibleForTesting\n+  public List<OomHookWithContext> getHooks() {\n+    return hooks;\n+  }\n+\n+  @Override\n+  public void run() {\n+    for (OomHookWithContext hook : hooks) {\n+      hook.run(context);\n+    }\n+  }\n+\n+  public static interface OomHookWithContext {\n+    public void run(OomHookContext context);\n+  }\n+\n+  public static class OomHookContext {\n+    private final HiveServer2 hiveServer2;\n+    public OomHookContext(HiveServer2 hiveServer2) {\n+      this.hiveServer2 = hiveServer2;\n+    }\n+    public HiveServer2 getHiveServer2() {\n+      return hiveServer2;\n+    }\n+  }\n+\n+  /**\n+   * Used as default oom hook\n+   */\n+  private static class DefaultOomHook implements OomHookWithContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ecf3fe599d7d18740eb0f660e431cd770e60dea", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/6ecf3fe599d7d18740eb0f660e431cd770e60dea", "committedDate": "2020-07-08T01:53:50Z", "message": "use HookUtils to load stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b8ffaccf2995f04c339e6175a0be79c1f73371", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/c3b8ffaccf2995f04c339e6175a0be79c1f73371", "committedDate": "2020-07-08T02:12:45Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a1b8873583e0fe8a4c19ece0bcdf9cf6439235", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/f5a1b8873583e0fe8a4c19ece0bcdf9cf6439235", "committedDate": "2020-07-09T14:04:08Z", "message": "Make oom hook more generic hook stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd1102cca5c6909af224f3eb011aeb30682e482", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/2fd1102cca5c6909af224f3eb011aeb30682e482", "committedDate": "2020-07-10T01:38:15Z", "message": "don't need to initialize other hooks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00515737de41aa3029b834d3b6e1249f33ca77cb", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/00515737de41aa3029b834d3b6e1249f33ca77cb", "committedDate": "2020-07-31T00:50:40Z", "message": "add hooksloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393ef2d0aaf990e01da14e6825c991fdd5c6108a", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/393ef2d0aaf990e01da14e6825c991fdd5c6108a", "committedDate": "2020-07-31T00:52:06Z", "message": "Merge branch 'master' of https://github.com/apache/hive into HIVE-23800"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "682799cc8fa7a8f4f50a323f8f8c553e67fce05a", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/682799cc8fa7a8f4f50a323f8f8c553e67fce05a", "committedDate": "2020-07-31T04:49:54Z", "message": "merge hooks and add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca86a25bf2c9c08d19f25e09717e68da03010a8c", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/ca86a25bf2c9c08d19f25e09717e68da03010a8c", "committedDate": "2020-07-31T05:04:30Z", "message": "remove empty lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9379e1a11d0dc271466c30bebdbc5c4949debb22", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/9379e1a11d0dc271466c30bebdbc5c4949debb22", "committedDate": "2020-07-31T07:46:42Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f5b1b328f03f6cc873dc02c9a733267d4d0bafa", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/9f5b1b328f03f6cc873dc02c9a733267d4d0bafa", "committedDate": "2020-07-31T09:24:07Z", "message": "fix itests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6b9ad04b566b2820af487fe21c45ba904f0792", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/0f6b9ad04b566b2820af487fe21c45ba904f0792", "committedDate": "2020-07-31T09:56:45Z", "message": "minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b70ada861cc3595f07b1bce8c552e18ccae24e", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/b2b70ada861cc3595f07b1bce8c552e18ccae24e", "committedDate": "2020-07-31T23:46:00Z", "message": "check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aefb3eaede992596e584484d8fee44272b6cff4", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/3aefb3eaede992596e584484d8fee44272b6cff4", "committedDate": "2020-08-03T05:25:56Z", "message": "unify other hooks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8704457779631968c288c05a4f119318b0d640df", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/8704457779631968c288c05a4f119318b0d640df", "committedDate": "2020-08-03T06:23:22Z", "message": "remove isGlobal from HookType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa191066639a503cc18ce105834a224dae08f7c7", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/aa191066639a503cc18ce105834a224dae08f7c7", "committedDate": "2020-08-03T06:43:34Z", "message": "refine hiveserver2 oom hook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "594a6c59d81beef81a32ae0a7e43e12621eb3b9c", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/594a6c59d81beef81a32ae0a7e43e12621eb3b9c", "committedDate": "2020-08-03T14:12:10Z", "message": "add cast exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1beea75e0d35728c7b6fa8cfad490c8c96bf8989", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/1beea75e0d35728c7b6fa8cfad490c8c96bf8989", "committedDate": "2020-08-03T23:12:49Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d790a5d64204fa7f1a9e9625c1380ecc99244e00", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/d790a5d64204fa7f1a9e9625c1380ecc99244e00", "committedDate": "2020-09-10T12:52:42Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "626182b5454c0a26ff1fc2fc8533d698c31882f1", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/626182b5454c0a26ff1fc2fc8533d698c31882f1", "committedDate": "2020-09-10T12:56:21Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d301c783397144b15b2a519c3897fe98aa25f89c", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/d301c783397144b15b2a519c3897fe98aa25f89c", "committedDate": "2020-09-10T13:25:29Z", "message": "refine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46298011457bae7d49d956a3676611cfb108d7bc", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/46298011457bae7d49d956a3676611cfb108d7bc", "committedDate": "2020-09-11T03:04:08Z", "message": "handle exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjE4ODI5", "url": "https://github.com/apache/hive/pull/1205#pullrequestreview-488618829", "createdAt": "2020-09-15T12:15:18Z", "commit": {"oid": "46298011457bae7d49d956a3676611cfb108d7bc"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoxNToxOFrOHR-4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoyMzoxMFrOHR_J-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNzk4OA==", "bodyText": "I think this should be only confVar", "url": "https://github.com/apache/hive/pull/1205#discussion_r488617988", "createdAt": "2020-09-15T12:15:18Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HooksLoader.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.hooks;\n+\n+import com.cronutils.utils.VisibleForTesting;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ *  Loads and stores different kinds of hooks, provides {@link HooksLoader#addHook(HookContext.HookType, Object)}} to\n+ *  add hook alone or {@link HooksLoader#getHooks(HookContext.HookType, Class)} to get all hooks\n+ *  corresponding to the specific hook type.\n+ */\n+public class HooksLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(HooksLoader.class);\n+  private final HiveConf conf;\n+  private final Hooks[] hooks;\n+  private SessionState.LogHelper console;\n+\n+  public HooksLoader(HiveConf conf) {\n+    this.conf = conf;\n+    this.hooks = new Hooks[HookContext.HookType.values().length];\n+    for (int i = 0; i < hooks.length; i++) {\n+      hooks[i] = new Hooks();\n+    }\n+  }\n+\n+  public HooksLoader(HiveConf conf, SessionState.LogHelper console) {\n+    this(conf);\n+    this.console = console;\n+  }\n+\n+  /**\n+   * Loads the configured hooks corresponding to the specific hook type.\n+   * @param type hook type\n+   */\n+  @VisibleForTesting\n+  void loadHooksFromConf(HookContext.HookType type) {\n+    Hooks container = hooks[type.ordinal()];\n+    if (!container.loadedFromConf) {\n+      container.loadedFromConf = true;\n+      List hooks = container.getHooks();\n+      HiveConf.ConfVars confVars = type.getConfVar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46298011457bae7d49d956a3676611cfb108d7bc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxODQ2MA==", "bodyText": "this will make an index based contract - instead of that we could utrilize a Map<HookType,Hook>", "url": "https://github.com/apache/hive/pull/1205#discussion_r488618460", "createdAt": "2020-09-15T12:16:06Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HooksLoader.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.hooks;\n+\n+import com.cronutils.utils.VisibleForTesting;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ *  Loads and stores different kinds of hooks, provides {@link HooksLoader#addHook(HookContext.HookType, Object)}} to\n+ *  add hook alone or {@link HooksLoader#getHooks(HookContext.HookType, Class)} to get all hooks\n+ *  corresponding to the specific hook type.\n+ */\n+public class HooksLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(HooksLoader.class);\n+  private final HiveConf conf;\n+  private final Hooks[] hooks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46298011457bae7d49d956a3676611cfb108d7bc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxOTE0NQ==", "bodyText": "I don't see any particular benefit of doing the loading lazily - just load all of them upfront in the constructor - the Conf may not change after the creation of this object", "url": "https://github.com/apache/hive/pull/1205#discussion_r488619145", "createdAt": "2020-09-15T12:17:17Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HooksLoader.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.hooks;\n+\n+import com.cronutils.utils.VisibleForTesting;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ *  Loads and stores different kinds of hooks, provides {@link HooksLoader#addHook(HookContext.HookType, Object)}} to\n+ *  add hook alone or {@link HooksLoader#getHooks(HookContext.HookType, Class)} to get all hooks\n+ *  corresponding to the specific hook type.\n+ */\n+public class HooksLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(HooksLoader.class);\n+  private final HiveConf conf;\n+  private final Hooks[] hooks;\n+  private SessionState.LogHelper console;\n+\n+  public HooksLoader(HiveConf conf) {\n+    this.conf = conf;\n+    this.hooks = new Hooks[HookContext.HookType.values().length];\n+    for (int i = 0; i < hooks.length; i++) {\n+      hooks[i] = new Hooks();\n+    }\n+  }\n+\n+  public HooksLoader(HiveConf conf, SessionState.LogHelper console) {\n+    this(conf);\n+    this.console = console;\n+  }\n+\n+  /**\n+   * Loads the configured hooks corresponding to the specific hook type.\n+   * @param type hook type\n+   */\n+  @VisibleForTesting\n+  void loadHooksFromConf(HookContext.HookType type) {\n+    Hooks container = hooks[type.ordinal()];\n+    if (!container.loadedFromConf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46298011457bae7d49d956a3676611cfb108d7bc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyMjU4NQ==", "bodyText": "please keep some kind of naming contract between the varname and the enum key", "url": "https://github.com/apache/hive/pull/1205#discussion_r488622585", "createdAt": "2020-09-15T12:23:10Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java", "diffHunk": "@@ -45,7 +47,50 @@\n public class HookContext {\n \n   static public enum HookType {\n-    PRE_EXEC_HOOK, POST_EXEC_HOOK, ON_FAILURE_HOOK\n+\n+    PRE_EXEC_HOOK(HiveConf.ConfVars.PREEXECHOOKS, ExecuteWithHookContext.class,\n+        \"Pre-execution hooks to be invoked for each statement\"),\n+    POST_EXEC_HOOK(HiveConf.ConfVars.POSTEXECHOOKS, ExecuteWithHookContext.class,\n+        \"Post-execution hooks to be invoked for each statement\"),\n+    ON_FAILURE_HOOK(HiveConf.ConfVars.ONFAILUREHOOKS, ExecuteWithHookContext.class,\n+        \"On-failure hooks to be invoked for each statement\"),\n+    QUERY_LIFETIME_HOOKS(HiveConf.ConfVars.HIVE_QUERY_LIFETIME_HOOKS, QueryLifeTimeHook.class,\n+      \"Hooks that will be triggered before/after query compilation and before/after query execution\"),\n+    SEMANTIC_ANALYZER_HOOK(HiveConf.ConfVars.SEMANTIC_ANALYZER_HOOK, HiveSemanticAnalyzerHook.class,\n+      \"Hooks that invoked before/after Hive performs its own semantic analysis on a statement\"),\n+    DRIVER_RUN_HOOKS(HiveConf.ConfVars.HIVE_DRIVER_RUN_HOOKS, HiveDriverRunHook.class,\n+      \"Hooks that Will be run at the beginning and end of Driver.run\"),\n+    REDACTOR(HiveConf.ConfVars.QUERYREDACTORHOOKS, Redactor.class,\n+      \"Hooks to be invoked for each query which can tranform the query before it's placed in the job.xml file\"),\n+    // The HiveSessionHook.class cannot access, use Hook.class instead\n+    HIVE_SERVER2_SESSION_HOOK(HiveConf.ConfVars.HIVE_SERVER2_SESSION_HOOK, Hook.class,\n+      \"Hooks to be executed when session manager starts a new session\"),\n+    OOM(HiveConf.ConfVars.HIVE_SERVER2_OOM_HOOKS, Runnable.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46298011457bae7d49d956a3676611cfb108d7bc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b77cdd0414c0072ab84b9e1367b9987a7537842d", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/b77cdd0414c0072ab84b9e1367b9987a7537842d", "committedDate": "2020-09-16T03:26:20Z", "message": "fix as suggested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4041d646ea79d3d2811f79e0583634945f7721d0", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/4041d646ea79d3d2811f79e0583634945f7721d0", "committedDate": "2020-09-16T03:57:16Z", "message": "refine redactor emun key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a", "committedDate": "2020-09-18T06:15:58Z", "message": "refinement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzODA3NjUx", "url": "https://github.com/apache/hive/pull/1205#pullrequestreview-503807651", "createdAt": "2020-10-07T12:07:36Z", "commit": {"oid": "0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjowNzozNlrOHdwDyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjoxMjo0N1rOHdwQBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1ODE1NA==", "bodyText": "I like this approach - could you make a small check:\n\nif we have hook compiled for the old api (which uses say the enum key HookType.PRE_EXEC_HOOK)\nwill it work or not  (without recompilation) with the new implementation", "url": "https://github.com/apache/hive/pull/1205#discussion_r500958154", "createdAt": "2020-10-07T12:07:36Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java", "diffHunk": "@@ -45,7 +47,50 @@\n public class HookContext {\n \n   static public enum HookType {\n-    PRE_EXEC_HOOK, POST_EXEC_HOOK, ON_FAILURE_HOOK\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2MTI4Nw==", "bodyText": "this is great!\nsince from now on we can also dynamically add new hooks to it at runtime - we may rename it from \"Loader\" to something else.", "url": "https://github.com/apache/hive/pull/1205#discussion_r500961287", "createdAt": "2020-10-07T12:12:47Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/HookRunner.java", "diffHunk": "@@ -39,57 +36,27 @@\n import org.apache.hadoop.hive.ql.parse.HiveSemanticAnalyzerHook;\n import org.apache.hadoop.hive.ql.parse.HiveSemanticAnalyzerHookContext;\n import org.apache.hadoop.hive.ql.session.SessionState;\n-import org.apache.hadoop.hive.ql.session.SessionState.LogHelper;\n import org.apache.hive.common.util.HiveStringUtils;\n \n+import static org.apache.hadoop.hive.ql.hooks.HookContext.HookType.*;\n+\n /**\n  * Handles hook executions for {@link Driver}.\n  */\n public class HookRunner {\n \n   private static final String CLASS_NAME = Driver.class.getName();\n   private final HiveConf conf;\n-  private LogHelper console;\n-  private List<QueryLifeTimeHook> queryHooks = new ArrayList<>();\n-  private List<HiveSemanticAnalyzerHook> saHooks = new ArrayList<>();\n-  private List<HiveDriverRunHook> driverRunHooks = new ArrayList<>();\n-  private List<ExecuteWithHookContext> preExecHooks = new ArrayList<>();\n-  private List<ExecuteWithHookContext> postExecHooks = new ArrayList<>();\n-  private List<ExecuteWithHookContext> onFailureHooks = new ArrayList<>();\n-  private boolean initialized = false;\n+  private final HooksLoader loader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f56495e5c40f66b1547dcbce2c7fcfebf2bd0b7b", "author": {"user": {"login": "dengzhhu653", "name": "dengzh"}}, "url": "https://github.com/apache/hive/commit/f56495e5c40f66b1547dcbce2c7fcfebf2bd0b7b", "committedDate": "2020-10-09T02:47:59Z", "message": "rename HooksLoader to HiveHooks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzI4NDU4", "url": "https://github.com/apache/hive/pull/1205#pullrequestreview-507328458", "createdAt": "2020-10-13T11:20:59Z", "commit": {"oid": "f56495e5c40f66b1547dcbce2c7fcfebf2bd0b7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3735, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}