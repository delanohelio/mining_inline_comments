{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjY1Mzkx", "number": 1676, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTo0NjoyNVrOE7YYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo1MzoxMlrOE8bcsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzAwODA2OnYy", "diffSide": "RIGHT", "path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveDecimalObjectInspector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTo0NjoyNVrOH2_i9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzowNjoxN1rOH4ugNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQyNjI5Mw==", "bodyText": "Why does precision need to be overridden here (while scale does not)? Could we possibly remove this too?", "url": "https://github.com/apache/hive/pull/1676#discussion_r527426293", "createdAt": "2020-11-20T05:46:25Z", "author": {"login": "jcamachor"}, "path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveDecimalObjectInspector.java", "diffHunk": "@@ -62,13 +62,4 @@ public int precision() {\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b3b9979f11dc9826d890cdd6246810b1bab7773"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNTI2Mg==", "bodyText": "We can remove it and it can also be removed from WritableConstant[Byte|Int|Long|Short]ObjectInspector.\nBut it doesn't have such an effect like scale(). scale() also plays a role in converting to String but precision() is used only in functions GenericUDFBaseNumeric, GenericUDAFAverage, GenericUDAFSum to determine the result type.", "url": "https://github.com/apache/hive/pull/1676#discussion_r527735262", "createdAt": "2020-11-20T14:39:00Z", "author": {"login": "kasakrisz"}, "path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveDecimalObjectInspector.java", "diffHunk": "@@ -62,13 +62,4 @@ public int precision() {\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQyNjI5Mw=="}, "originalCommit": {"oid": "9b3b9979f11dc9826d890cdd6246810b1bab7773"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NDIxNA==", "bodyText": "Seems that removing precision override has unwanted side effects. I reverted that part.", "url": "https://github.com/apache/hive/pull/1676#discussion_r529244214", "createdAt": "2020-11-24T07:06:17Z", "author": {"login": "kasakrisz"}, "path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveDecimalObjectInspector.java", "diffHunk": "@@ -62,13 +62,4 @@ public int precision() {\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQyNjI5Mw=="}, "originalCommit": {"oid": "9b3b9979f11dc9826d890cdd6246810b1bab7773"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzk4MzczOnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_window.q.out", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo0ODozMVrOH4iZ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyOTo0MFrOH5s5sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NTk3Ng==", "bodyText": "Difference in precision and scale for column. Why has this changed?", "url": "https://github.com/apache/hive/pull/1676#discussion_r529045976", "createdAt": "2020-11-23T22:48:31Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_window.q.out", "diffHunk": "@@ -166,7 +166,7 @@ POSTHOOK: Input: arc_view@wealth\n #### A masked pattern was here ####\n CBO PLAN:\n HiveSortLimit(sort0=[$0], dir0=[ASC])\n-  HiveProject(quartile=[$0], total=[$1])\n+  HiveProject(quartile=[CAST($0):DECIMAL(12, 1)], total=[$1])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NDUyOA==", "bodyText": "Reverted the commit that removes precision override. Change in scale is expected.", "url": "https://github.com/apache/hive/pull/1676#discussion_r529244528", "createdAt": "2020-11-24T07:06:57Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_window.q.out", "diffHunk": "@@ -166,7 +166,7 @@ POSTHOOK: Input: arc_view@wealth\n #### A masked pattern was here ####\n CBO PLAN:\n HiveSortLimit(sort0=[$0], dir0=[ASC])\n-  HiveProject(quartile=[$0], total=[$1])\n+  HiveProject(quartile=[CAST($0):DECIMAL(12, 1)], total=[$1])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NTk3Ng=="}, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzAwOA==", "bodyText": "Why is this expected? It seems the decimal value is not a constant?", "url": "https://github.com/apache/hive/pull/1676#discussion_r529883008", "createdAt": "2020-11-24T21:16:40Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_window.q.out", "diffHunk": "@@ -166,7 +166,7 @@ POSTHOOK: Input: arc_view@wealth\n #### A masked pattern was here ####\n CBO PLAN:\n HiveSortLimit(sort0=[$0], dir0=[ASC])\n-  HiveProject(quartile=[$0], total=[$1])\n+  HiveProject(quartile=[CAST($0):DECIMAL(12, 1)], total=[$1])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NTk3Ng=="}, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2NjU0NA==", "bodyText": "The optimiziter rewrites this query to use materialized view mv_tv_view_data_av1.\nThe plan of the mv with this patch is changed\nfrom\nHiveTableScan(table=[[arc_view, mv_tv_view_data_av1]], table:alias=[mv_tv_view_data_av1])\n\nto\nLogicalProject(quartile=[CAST($0):DECIMAL(12, 1)], total=[$1])\n  HiveTableScan(table=[[arc_view, mv_tv_view_data_av1]], table:alias=[mv_tv_view_data_av1])\n\nThe mv definition contains a constant value cast to Decimal cast(1.5 as decimal(9,4))\ncreate materialized view mv_tv_view_data_av1 stored as orc TBLPROPERTIES ('transactional'='true') as\nselect\n  t.quartile,\n  max(t.total_views) total\nfrom wealth t2,\n(select\n  total_views `total_views`,\n  sum(cast(1.5 as decimal(9,4))) over (order by total_views) as quartile,\n  program\nfrom tv_view_data) t\nwhere t.program=t2.watches\ngroup by quartile;\n\nWe need the project with the cast on top of the mv scan because the mv table schema is different than the query schema.\nRowTypes after the patch\nviewscan rowType: RecordType(DECIMAL(12, 4) quartile, BIGINT total)\nqueryRel rowType: RecordType(DECIMAL(12, 1) quartile, BIGINT $f1)\n\nbefore the patch\nviewscan rowType: RecordType(DECIMAL(12, 1) quartile, BIGINT total)\nqueryRel rowType: RecordType(DECIMAL(12, 1) quartile, BIGINT $f1)", "url": "https://github.com/apache/hive/pull/1676#discussion_r530266544", "createdAt": "2020-11-25T10:29:40Z", "author": {"login": "kasakrisz"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_window.q.out", "diffHunk": "@@ -166,7 +166,7 @@ POSTHOOK: Input: arc_view@wealth\n #### A masked pattern was here ####\n CBO PLAN:\n HiveSortLimit(sort0=[$0], dir0=[ASC])\n-  HiveProject(quartile=[$0], total=[$1])\n+  HiveProject(quartile=[CAST($0):DECIMAL(12, 1)], total=[$1])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NTk3Ng=="}, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzk4NDI2OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_window.q.out", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo0ODo0NVrOH4iaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo0ODo0NVrOH4iaKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NjA1OQ==", "bodyText": "Difference in precision and scale for column. Why has this changed (same below)?", "url": "https://github.com/apache/hive/pull/1676#discussion_r529046059", "createdAt": "2020-11-23T22:48:45Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_window.q.out", "diffHunk": "@@ -293,24 +293,24 @@ STAGE PLANS:\n                 Statistics: Num rows: 4 Data size: 480 Basic stats: COMPLETE Column stats: COMPLETE\n                 Group By Operator\n                   aggregations: max(_col1)\n-                  keys: _col2 (type: decimal(12,1))\n+                  keys: _col2 (type: decimal(19,4))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzk4ODAzOnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/metadata_only_queries.q.out", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo0OTo1N1rOH4icag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo0OTo1N1rOH4icag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NjYzNA==", "bodyText": "Difference in precision and scale for column. Why has this changed?", "url": "https://github.com/apache/hive/pull/1676#discussion_r529046634", "createdAt": "2020-11-23T22:49:57Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/metadata_only_queries.q.out", "diffHunk": "@@ -377,7 +377,7 @@ STAGE PLANS:\n                 outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8\n                 Statistics: Num rows: 1 Data size: 520 Basic stats: COMPLETE Column stats: NONE\n                 Select Operator\n-                  expressions: _col0 (type: bigint), '1' (type: string), _col1 (type: bigint), _col2 (type: decimal(11,1)), 2 (type: int), _col0 (type: bigint), _col3 (type: bigint), 7 (type: decimal(2,0)), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: int), _col8 (type: bigint)\n+                  expressions: _col0 (type: bigint), '1' (type: string), _col1 (type: bigint), _col2 (type: decimal(11,1)), 2 (type: int), _col0 (type: bigint), _col3 (type: bigint), 7 (type: decimal(11,0)), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: int), _col8 (type: bigint)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzk5MjI4OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/llap/vector_cast_constant.q.out", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo1MToyNlrOH4ie-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo1MToyNlrOH4ie-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NzI4OQ==", "bodyText": "Difference in precision and scale for column. Why has this changed?", "url": "https://github.com/apache/hive/pull/1676#discussion_r529047289", "createdAt": "2020-11-23T22:51:26Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/llap/vector_cast_constant.q.out", "diffHunk": "@@ -180,7 +180,7 @@ STAGE PLANS:\n                               native: true\n                               nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true\n                           Statistics: Num rows: 257 Data size: 40092 Basic stats: COMPLETE Column stats: COMPLETE\n-                          value expressions: _col1 (type: bigint), _col2 (type: bigint), _col3 (type: double), _col4 (type: bigint), _col5 (type: decimal(12,0)), _col6 (type: bigint)\n+                          value expressions: _col1 (type: bigint), _col2 (type: bigint), _col3 (type: double), _col4 (type: bigint), _col5 (type: decimal(20,0)), _col6 (type: bigint)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzk5NzMxOnYy", "diffSide": "LEFT", "path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantIntObjectInspector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo1MzoxMlrOH4iiAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzowODozM1rOH4uj1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0ODA2NQ==", "bodyText": "I think this could lead to a change of behavior, e.g., all integers will have same precision by default, but constant integer would have the precision of the constant value?", "url": "https://github.com/apache/hive/pull/1676#discussion_r529048065", "createdAt": "2020-11-23T22:53:12Z", "author": {"login": "jcamachor"}, "path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantIntObjectInspector.java", "diffHunk": "@@ -46,12 +46,4 @@ public IntWritable getWritableConstantValue() {\n     return value;\n   }\n \n-  @Override\n-  public int precision() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NTE0Mw==", "bodyText": "Yes, by overriding precision constant values has the precision of the value itself.", "url": "https://github.com/apache/hive/pull/1676#discussion_r529245143", "createdAt": "2020-11-24T07:08:33Z", "author": {"login": "kasakrisz"}, "path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantIntObjectInspector.java", "diffHunk": "@@ -46,12 +46,4 @@ public IntWritable getWritableConstantValue() {\n     return value;\n   }\n \n-  @Override\n-  public int precision() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0ODA2NQ=="}, "originalCommit": {"oid": "804a1e0327a6bc95d708a8dabf8b7d2ab080c87b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 248, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}