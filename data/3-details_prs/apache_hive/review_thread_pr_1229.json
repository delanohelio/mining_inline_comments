{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Mjk3Mjc0", "number": 1229, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDozOTowNFrOEM7Law==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDozOTowNFrOEM7Law==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTg3OTQ3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDozOTowNFrOGvUNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMjowMlrOGvVSLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2NzMwMw==", "bodyText": "interesting...do we accept long as a typename?\nI see that we have KW_LONG defined ; but not used at all...we may have it as an alias for BIGINT....\nanyway...I don't think this line is doing anything here...", "url": "https://github.com/apache/hive/pull/1229#discussion_r452267303", "createdAt": "2020-07-09T14:39:04Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java", "diffHunk": "@@ -1252,78 +1254,88 @@ public static long getSizeOfComplexTypes(HiveConf conf, ObjectInspector oi) {\n   }\n \n   /**\n-   * Get size of fixed length primitives\n-   * @param colType\n-   *          - column type\n+   * Get size of fixed length primitives.\n+   *\n+   * @param colType column type\n    * @return raw data size\n+   * @throws NullPointerException if colType is {@code null}\n    */\n-  public static long getAvgColLenOfFixedLengthTypes(String colType) {\n-    String colTypeLowerCase = colType.toLowerCase();\n-    if (colTypeLowerCase.equals(serdeConstants.TINYINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.SMALLINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.VOID_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.BOOLEAN_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.FLOAT_TYPE_NAME)) {\n+  public static long getAvgColLenOfFixedLengthTypes(final String colType) {\n+    String colTypeLowerCase = Objects.requireNonNull(colType).toLowerCase();\n+    switch (colTypeLowerCase) {\n+    case serdeConstants.TINYINT_TYPE_NAME:\n+    case serdeConstants.SMALLINT_TYPE_NAME:\n+    case serdeConstants.INT_TYPE_NAME:\n+    case serdeConstants.VOID_TYPE_NAME:\n+    case serdeConstants.BOOLEAN_TYPE_NAME:\n+    case serdeConstants.FLOAT_TYPE_NAME:\n       return JavaDataModel.get().primitive1();\n-    } else if (colTypeLowerCase.equals(serdeConstants.DOUBLE_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.BIGINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INTERVAL_YEAR_MONTH_TYPE_NAME)\n-        || colTypeLowerCase.equals(\"long\")) {\n+    case serdeConstants.DOUBLE_TYPE_NAME:\n+    case serdeConstants.BIGINT_TYPE_NAME:\n+    case serdeConstants.INTERVAL_YEAR_MONTH_TYPE_NAME:\n+    case \"long\":\n       return JavaDataModel.get().primitive2();\n-    } else if (colTypeLowerCase.equals(serdeConstants.TIMESTAMP_TYPE_NAME) ||\n-        colTypeLowerCase.equals(serdeConstants.TIMESTAMPLOCALTZ_TYPE_NAME)) {\n+    case serdeConstants.TIMESTAMP_TYPE_NAME:\n+    case serdeConstants.TIMESTAMPLOCALTZ_TYPE_NAME:\n       return JavaDataModel.get().lengthOfTimestamp();\n-    } else if (colTypeLowerCase.equals(serdeConstants.DATE_TYPE_NAME)) {\n+    case serdeConstants.DATE_TYPE_NAME:\n       return JavaDataModel.get().lengthOfDate();\n-    } else if (colTypeLowerCase.startsWith(serdeConstants.DECIMAL_TYPE_NAME)) {\n+    case serdeConstants.DECIMAL_TYPE_NAME:\n       return JavaDataModel.get().lengthOfDecimal();\n-    } else if (colTypeLowerCase.equals(serdeConstants.INTERVAL_DAY_TIME_TYPE_NAME)) {\n+    case serdeConstants.INTERVAL_DAY_TIME_TYPE_NAME:\n       return JavaDataModel.JAVA32_META;\n-    } else {\n-      //TODO: support complex types\n+    default:\n+      // TODO: support complex types\n       // for complex type we simply return 0\n       return 0;\n     }\n   }\n \n   /**\n-   * Get the size of arrays of primitive types\n+   * Get the size of arrays of primitive types.\n+   *\n+   * @param colType The column type\n+   * @param length The length of the column type\n+   * @param maxLength The maximum length of the field\n    * @return raw data size\n+   * @throws NullPointerException if colType is {@code null}\n    */\n-  public static long getSizeOfPrimitiveTypeArraysFromType(String colType, int length, HiveConf conf) {\n-    String colTypeLowerCase = colType.toLowerCase();\n-    if (colTypeLowerCase.equals(serdeConstants.TINYINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.SMALLINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.FLOAT_TYPE_NAME)) {\n+  public static long getSizeOfPrimitiveTypeArraysFromType(final String colType, final int length, final int maxLength) {\n+    String colTypeLowerCase = Objects.requireNonNull(colType).toLowerCase();\n+    if (colTypeLowerCase.startsWith(serdeConstants.VARCHAR_TYPE_NAME)\n+        || colTypeLowerCase.startsWith(serdeConstants.CHAR_TYPE_NAME)) {\n+      int charTypeLen = JavaDataModel.get().lengthForStringOfLength(maxLength);\n+      return JavaDataModel.get().lengthForPrimitiveArrayOfSize(charTypeLen, length);\n+    }\n+    switch (colTypeLowerCase) {\n+    case serdeConstants.TINYINT_TYPE_NAME:\n+    case serdeConstants.SMALLINT_TYPE_NAME:\n+    case serdeConstants.INT_TYPE_NAME:\n+    case serdeConstants.FLOAT_TYPE_NAME:\n       return JavaDataModel.get().lengthForIntArrayOfSize(length);\n-    } else if (colTypeLowerCase.equals(serdeConstants.DOUBLE_TYPE_NAME)) {\n+    case serdeConstants.DOUBLE_TYPE_NAME:\n       return JavaDataModel.get().lengthForDoubleArrayOfSize(length);\n-    } else if (colTypeLowerCase.equals(serdeConstants.BIGINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(\"long\")) {\n+    case serdeConstants.BIGINT_TYPE_NAME:\n+    case \"long\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dec26218d826bc6f78a9e184e34d6bb26235afe"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2ODM3Mg==", "bodyText": "Since this JIRA is about using the switch / clean up, I don't really want to change any behaviors.  Can you please open a JIRA to explore this?", "url": "https://github.com/apache/hive/pull/1229#discussion_r452268372", "createdAt": "2020-07-09T14:40:31Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java", "diffHunk": "@@ -1252,78 +1254,88 @@ public static long getSizeOfComplexTypes(HiveConf conf, ObjectInspector oi) {\n   }\n \n   /**\n-   * Get size of fixed length primitives\n-   * @param colType\n-   *          - column type\n+   * Get size of fixed length primitives.\n+   *\n+   * @param colType column type\n    * @return raw data size\n+   * @throws NullPointerException if colType is {@code null}\n    */\n-  public static long getAvgColLenOfFixedLengthTypes(String colType) {\n-    String colTypeLowerCase = colType.toLowerCase();\n-    if (colTypeLowerCase.equals(serdeConstants.TINYINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.SMALLINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.VOID_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.BOOLEAN_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.FLOAT_TYPE_NAME)) {\n+  public static long getAvgColLenOfFixedLengthTypes(final String colType) {\n+    String colTypeLowerCase = Objects.requireNonNull(colType).toLowerCase();\n+    switch (colTypeLowerCase) {\n+    case serdeConstants.TINYINT_TYPE_NAME:\n+    case serdeConstants.SMALLINT_TYPE_NAME:\n+    case serdeConstants.INT_TYPE_NAME:\n+    case serdeConstants.VOID_TYPE_NAME:\n+    case serdeConstants.BOOLEAN_TYPE_NAME:\n+    case serdeConstants.FLOAT_TYPE_NAME:\n       return JavaDataModel.get().primitive1();\n-    } else if (colTypeLowerCase.equals(serdeConstants.DOUBLE_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.BIGINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INTERVAL_YEAR_MONTH_TYPE_NAME)\n-        || colTypeLowerCase.equals(\"long\")) {\n+    case serdeConstants.DOUBLE_TYPE_NAME:\n+    case serdeConstants.BIGINT_TYPE_NAME:\n+    case serdeConstants.INTERVAL_YEAR_MONTH_TYPE_NAME:\n+    case \"long\":\n       return JavaDataModel.get().primitive2();\n-    } else if (colTypeLowerCase.equals(serdeConstants.TIMESTAMP_TYPE_NAME) ||\n-        colTypeLowerCase.equals(serdeConstants.TIMESTAMPLOCALTZ_TYPE_NAME)) {\n+    case serdeConstants.TIMESTAMP_TYPE_NAME:\n+    case serdeConstants.TIMESTAMPLOCALTZ_TYPE_NAME:\n       return JavaDataModel.get().lengthOfTimestamp();\n-    } else if (colTypeLowerCase.equals(serdeConstants.DATE_TYPE_NAME)) {\n+    case serdeConstants.DATE_TYPE_NAME:\n       return JavaDataModel.get().lengthOfDate();\n-    } else if (colTypeLowerCase.startsWith(serdeConstants.DECIMAL_TYPE_NAME)) {\n+    case serdeConstants.DECIMAL_TYPE_NAME:\n       return JavaDataModel.get().lengthOfDecimal();\n-    } else if (colTypeLowerCase.equals(serdeConstants.INTERVAL_DAY_TIME_TYPE_NAME)) {\n+    case serdeConstants.INTERVAL_DAY_TIME_TYPE_NAME:\n       return JavaDataModel.JAVA32_META;\n-    } else {\n-      //TODO: support complex types\n+    default:\n+      // TODO: support complex types\n       // for complex type we simply return 0\n       return 0;\n     }\n   }\n \n   /**\n-   * Get the size of arrays of primitive types\n+   * Get the size of arrays of primitive types.\n+   *\n+   * @param colType The column type\n+   * @param length The length of the column type\n+   * @param maxLength The maximum length of the field\n    * @return raw data size\n+   * @throws NullPointerException if colType is {@code null}\n    */\n-  public static long getSizeOfPrimitiveTypeArraysFromType(String colType, int length, HiveConf conf) {\n-    String colTypeLowerCase = colType.toLowerCase();\n-    if (colTypeLowerCase.equals(serdeConstants.TINYINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.SMALLINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.FLOAT_TYPE_NAME)) {\n+  public static long getSizeOfPrimitiveTypeArraysFromType(final String colType, final int length, final int maxLength) {\n+    String colTypeLowerCase = Objects.requireNonNull(colType).toLowerCase();\n+    if (colTypeLowerCase.startsWith(serdeConstants.VARCHAR_TYPE_NAME)\n+        || colTypeLowerCase.startsWith(serdeConstants.CHAR_TYPE_NAME)) {\n+      int charTypeLen = JavaDataModel.get().lengthForStringOfLength(maxLength);\n+      return JavaDataModel.get().lengthForPrimitiveArrayOfSize(charTypeLen, length);\n+    }\n+    switch (colTypeLowerCase) {\n+    case serdeConstants.TINYINT_TYPE_NAME:\n+    case serdeConstants.SMALLINT_TYPE_NAME:\n+    case serdeConstants.INT_TYPE_NAME:\n+    case serdeConstants.FLOAT_TYPE_NAME:\n       return JavaDataModel.get().lengthForIntArrayOfSize(length);\n-    } else if (colTypeLowerCase.equals(serdeConstants.DOUBLE_TYPE_NAME)) {\n+    case serdeConstants.DOUBLE_TYPE_NAME:\n       return JavaDataModel.get().lengthForDoubleArrayOfSize(length);\n-    } else if (colTypeLowerCase.equals(serdeConstants.BIGINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(\"long\")) {\n+    case serdeConstants.BIGINT_TYPE_NAME:\n+    case \"long\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2NzMwMw=="}, "originalCommit": {"oid": "3dec26218d826bc6f78a9e184e34d6bb26235afe"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4NDk3NA==", "bodyText": "yes; it's unrelated - opened HIVE-23828", "url": "https://github.com/apache/hive/pull/1229#discussion_r452284974", "createdAt": "2020-07-09T15:02:02Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java", "diffHunk": "@@ -1252,78 +1254,88 @@ public static long getSizeOfComplexTypes(HiveConf conf, ObjectInspector oi) {\n   }\n \n   /**\n-   * Get size of fixed length primitives\n-   * @param colType\n-   *          - column type\n+   * Get size of fixed length primitives.\n+   *\n+   * @param colType column type\n    * @return raw data size\n+   * @throws NullPointerException if colType is {@code null}\n    */\n-  public static long getAvgColLenOfFixedLengthTypes(String colType) {\n-    String colTypeLowerCase = colType.toLowerCase();\n-    if (colTypeLowerCase.equals(serdeConstants.TINYINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.SMALLINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.VOID_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.BOOLEAN_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.FLOAT_TYPE_NAME)) {\n+  public static long getAvgColLenOfFixedLengthTypes(final String colType) {\n+    String colTypeLowerCase = Objects.requireNonNull(colType).toLowerCase();\n+    switch (colTypeLowerCase) {\n+    case serdeConstants.TINYINT_TYPE_NAME:\n+    case serdeConstants.SMALLINT_TYPE_NAME:\n+    case serdeConstants.INT_TYPE_NAME:\n+    case serdeConstants.VOID_TYPE_NAME:\n+    case serdeConstants.BOOLEAN_TYPE_NAME:\n+    case serdeConstants.FLOAT_TYPE_NAME:\n       return JavaDataModel.get().primitive1();\n-    } else if (colTypeLowerCase.equals(serdeConstants.DOUBLE_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.BIGINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INTERVAL_YEAR_MONTH_TYPE_NAME)\n-        || colTypeLowerCase.equals(\"long\")) {\n+    case serdeConstants.DOUBLE_TYPE_NAME:\n+    case serdeConstants.BIGINT_TYPE_NAME:\n+    case serdeConstants.INTERVAL_YEAR_MONTH_TYPE_NAME:\n+    case \"long\":\n       return JavaDataModel.get().primitive2();\n-    } else if (colTypeLowerCase.equals(serdeConstants.TIMESTAMP_TYPE_NAME) ||\n-        colTypeLowerCase.equals(serdeConstants.TIMESTAMPLOCALTZ_TYPE_NAME)) {\n+    case serdeConstants.TIMESTAMP_TYPE_NAME:\n+    case serdeConstants.TIMESTAMPLOCALTZ_TYPE_NAME:\n       return JavaDataModel.get().lengthOfTimestamp();\n-    } else if (colTypeLowerCase.equals(serdeConstants.DATE_TYPE_NAME)) {\n+    case serdeConstants.DATE_TYPE_NAME:\n       return JavaDataModel.get().lengthOfDate();\n-    } else if (colTypeLowerCase.startsWith(serdeConstants.DECIMAL_TYPE_NAME)) {\n+    case serdeConstants.DECIMAL_TYPE_NAME:\n       return JavaDataModel.get().lengthOfDecimal();\n-    } else if (colTypeLowerCase.equals(serdeConstants.INTERVAL_DAY_TIME_TYPE_NAME)) {\n+    case serdeConstants.INTERVAL_DAY_TIME_TYPE_NAME:\n       return JavaDataModel.JAVA32_META;\n-    } else {\n-      //TODO: support complex types\n+    default:\n+      // TODO: support complex types\n       // for complex type we simply return 0\n       return 0;\n     }\n   }\n \n   /**\n-   * Get the size of arrays of primitive types\n+   * Get the size of arrays of primitive types.\n+   *\n+   * @param colType The column type\n+   * @param length The length of the column type\n+   * @param maxLength The maximum length of the field\n    * @return raw data size\n+   * @throws NullPointerException if colType is {@code null}\n    */\n-  public static long getSizeOfPrimitiveTypeArraysFromType(String colType, int length, HiveConf conf) {\n-    String colTypeLowerCase = colType.toLowerCase();\n-    if (colTypeLowerCase.equals(serdeConstants.TINYINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.SMALLINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.INT_TYPE_NAME)\n-        || colTypeLowerCase.equals(serdeConstants.FLOAT_TYPE_NAME)) {\n+  public static long getSizeOfPrimitiveTypeArraysFromType(final String colType, final int length, final int maxLength) {\n+    String colTypeLowerCase = Objects.requireNonNull(colType).toLowerCase();\n+    if (colTypeLowerCase.startsWith(serdeConstants.VARCHAR_TYPE_NAME)\n+        || colTypeLowerCase.startsWith(serdeConstants.CHAR_TYPE_NAME)) {\n+      int charTypeLen = JavaDataModel.get().lengthForStringOfLength(maxLength);\n+      return JavaDataModel.get().lengthForPrimitiveArrayOfSize(charTypeLen, length);\n+    }\n+    switch (colTypeLowerCase) {\n+    case serdeConstants.TINYINT_TYPE_NAME:\n+    case serdeConstants.SMALLINT_TYPE_NAME:\n+    case serdeConstants.INT_TYPE_NAME:\n+    case serdeConstants.FLOAT_TYPE_NAME:\n       return JavaDataModel.get().lengthForIntArrayOfSize(length);\n-    } else if (colTypeLowerCase.equals(serdeConstants.DOUBLE_TYPE_NAME)) {\n+    case serdeConstants.DOUBLE_TYPE_NAME:\n       return JavaDataModel.get().lengthForDoubleArrayOfSize(length);\n-    } else if (colTypeLowerCase.equals(serdeConstants.BIGINT_TYPE_NAME)\n-        || colTypeLowerCase.equals(\"long\")) {\n+    case serdeConstants.BIGINT_TYPE_NAME:\n+    case \"long\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2NzMwMw=="}, "originalCommit": {"oid": "3dec26218d826bc6f78a9e184e34d6bb26235afe"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 547, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}