{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjkwMzk5", "number": 1653, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyMzoyOFrOE1i4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozMjoxOVrOE3VbDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTgxNTMzOnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/perf/tez/constraints/query14.q.out", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyMzoyOFrOHt4CzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyMzoyOFrOHt4CzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NjE4OQ==", "bodyText": "I see 2 new subtree reusals in this plan - which have resulted in the removal of 4 vertices", "url": "https://github.com/apache/hive/pull/1653#discussion_r517866189", "createdAt": "2020-11-05T08:23:28Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/perf/tez/constraints/query14.q.out", "diffHunk": "@@ -622,148 +619,103 @@ Stage-3\n                                   <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized\n                                     PARTITION_ONLY_SHUFFLE [RS_1234]\n                                        Please refer to the previous Select Operator [SEL_1232]\n-                              <-Reducer 43 [CUSTOM_SIMPLE_EDGE] vectorized\n-                                PARTITION_ONLY_SHUFFLE [RS_1330]\n-                                  Filter Operator [FIL_1329] (rows=72 width=131)\n+                              <-Reducer 42 [CUSTOM_SIMPLE_EDGE] vectorized\n+                                PARTITION_ONLY_SHUFFLE [RS_1321]\n+                                  Filter Operator [FIL_1320] (rows=72 width=131)\n                                     predicate:_col3 is not null\n-                                    Group By Operator [GBY_1328] (rows=72 width=131)\n+                                    Group By Operator [GBY_1319] (rows=72 width=131)\n                                       Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\",\"_col4\"],aggregations:[\"sum(VALUE._col0)\",\"count(VALUE._col1)\"],keys:KEY._col0, KEY._col1, KEY._col2\n-                                    <-Reducer 42 [SIMPLE_EDGE]\n+                                    <-Reducer 41 [SIMPLE_EDGE]\n                                       SHUFFLE [RS_359]\n                                         PartitionCols:_col0, _col1, _col2\n                                         Group By Operator [GBY_358] (rows=72 width=131)\n                                           Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\",\"_col4\"],aggregations:[\"sum(_col3)\",\"count()\"],keys:_col0, _col1, _col2\n                                           Select Operator [SEL_356] (rows=12217 width=10)\n                                             Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\"]\n                                             Merge Join Operator [MERGEJOIN_1150] (rows=12217 width=10)\n-                                              Conds:RS_353._col1=RS_1289._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col13\",\"_col14\",\"_col15\"]\n-                                            <-Map 73 [SIMPLE_EDGE] vectorized\n-                                              SHUFFLE [RS_1289]\n+                                              Conds:RS_353._col1=RS_1283._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col13\",\"_col14\",\"_col15\"]\n+                                            <-Map 70 [SIMPLE_EDGE] vectorized\n+                                              SHUFFLE [RS_1283]\n                                                 PartitionCols:_col0\n-                                                Select Operator [SEL_1280] (rows=462000 width=15)\n+                                                Select Operator [SEL_1277] (rows=462000 width=15)\n                                                   Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\"]\n                                                    Please refer to the previous TableScan [TS_154]\n-                                            <-Reducer 41 [SIMPLE_EDGE]\n+                                            <-Reducer 40 [SIMPLE_EDGE]\n                                               SHUFFLE [RS_353]\n                                                 PartitionCols:_col1\n                                                 Merge Join Operator [MERGEJOIN_1149] (rows=12217 width=4)\n-                                                  Conds:RS_350._col6, _col7, _col8=RS_1317._col0, _col1, _col2(Inner),Output:[\"_col1\",\"_col2\",\"_col3\"]\n-                                                <-Reducer 40 [SIMPLE_EDGE] vectorized\n-                                                  SHUFFLE [RS_1317]\n+                                                  Conds:RS_350._col6, _col7, _col8=RS_1308._col0, _col1, _col2(Inner),Output:[\"_col1\",\"_col2\",\"_col3\"]\n+                                                <-Reducer 39 [SIMPLE_EDGE] vectorized\n+                                                  SHUFFLE [RS_1308]\n                                                     PartitionCols:_col0, _col1, _col2\n-                                                    Select Operator [SEL_1316] (rows=1 width=12)\n+                                                    Select Operator [SEL_1307] (rows=1 width=12)\n                                                       Output:[\"_col0\",\"_col1\",\"_col2\"]\n-                                                      Filter Operator [FIL_1315] (rows=1 width=20)\n+                                                      Filter Operator [FIL_1306] (rows=1 width=20)\n                                                         predicate:(_col3 = 3L)\n-                                                        Group By Operator [GBY_1314] (rows=121728 width=19)\n+                                                        Group By Operator [GBY_1305] (rows=121728 width=19)\n                                                           Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\"],aggregations:[\"count(VALUE._col0)\"],keys:KEY._col0, KEY._col1, KEY._col2\n-                                                        <-Union 39 [SIMPLE_EDGE]\n-                                                          <-Reducer 38 [CONTAINS] vectorized\n-                                                            Reduce Output Operator [RS_1353]\n+                                                        <-Union 38 [SIMPLE_EDGE]\n+                                                          <-Reducer 37 [CONTAINS] vectorized\n+                                                            Reduce Output Operator [RS_1344]\n                                                               PartitionCols:_col0, _col1, _col2\n-                                                              Group By Operator [GBY_1352] (rows=121728 width=19)\n+                                                              Group By Operator [GBY_1343] (rows=121728 width=19)\n                                                                 Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\"],aggregations:[\"count(_col3)\"],keys:_col0, _col1, _col2\n-                                                                Group By Operator [GBY_1351] (rows=121728 width=19)\n+                                                                Group By Operator [GBY_1342] (rows=121728 width=19)\n                                                                   Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\"],aggregations:[\"count(VALUE._col0)\"],keys:KEY._col0, KEY._col1, KEY._col2\n-                                                                <-Reducer 37 [SIMPLE_EDGE]\n+                                                                <-Reducer 33 [SIMPLE_EDGE]\n                                                                   SHUFFLE [RS_291]\n                                                                     PartitionCols:_col0, _col1, _col2\n-                                                                    Group By Operator [GBY_290] (rows=121728 width=19)\n-                                                                      Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\"],aggregations:[\"count()\"],keys:_col4, _col5, _col6\n-                                                                      Merge Join Operator [MERGEJOIN_1144] (rows=14628613 width=11)\n-                                                                        Conds:RS_286._col1=RS_1297._col0(Inner),Output:[\"_col4\",\"_col5\",\"_col6\"]\n-                                                                      <-Map 73 [SIMPLE_EDGE] vectorized\n-                                                                        SHUFFLE [RS_1297]\n-                                                                          PartitionCols:_col0\n-                                                                          Select Operator [SEL_1286] (rows=458612 width=15)\n-                                                                            Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\"]\n-                                                                            Filter Operator [FIL_1277] (rows=458612 width=15)\n-                                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)\n-                                                                               Please refer to the previous TableScan [TS_154]\n-                                                                      <-Reducer 32 [SIMPLE_EDGE]\n-                                                                        SHUFFLE [RS_286]\n-                                                                          PartitionCols:_col1\n-                                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1132]\n-                                                          <-Reducer 63 [CONTAINS] vectorized\n-                                                            Reduce Output Operator [RS_1362]\n+                                                                     Please refer to the previous Group By Operator [GBY_173]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4bc3212ad9c306ddd3173d4079b50170aadead"}, "originalPosition": 515}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTgzOTQ3OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/perf/tez/query61.q.out", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyOTo0NFrOHt4Rbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzozMzozNlrOHyhDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2OTkzNA==", "bodyText": "this SJ filter became absent after HIVE-23939 (ts schema merge patch)\nthe merged TS operators were retained in the working list when the schema merge related logic was called - I have not digged deeper into this - taking a look at the input plan this SJ filter makes sense to me", "url": "https://github.com/apache/hive/pull/1653#discussion_r517869934", "createdAt": "2020-11-05T08:29:44Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/perf/tez/query61.q.out", "diffHunk": "@@ -165,70 +167,81 @@ Stage-0\n                       SHUFFLE [RS_38]\n                         PartitionCols:_col2\n                         Merge Join Operator [MERGEJOIN_256] (rows=2526982 width=0)\n-                          Conds:RS_30._col4=RS_290._col0(Inner),Output:[\"_col2\",\"_col5\"]\n-                        <-Map 20 [SIMPLE_EDGE] vectorized\n-                          SHUFFLE [RS_290]\n+                          Conds:RS_30._col4=RS_295._col0(Inner),Output:[\"_col2\",\"_col5\"]\n+                        <-Map 21 [SIMPLE_EDGE] vectorized\n+                          SHUFFLE [RS_295]\n                             PartitionCols:_col0\n-                            Select Operator [SEL_289] (rows=2300 width=4)\n+                            Select Operator [SEL_294] (rows=2300 width=4)\n                               Output:[\"_col0\"]\n-                              Filter Operator [FIL_288] (rows=2300 width=259)\n+                              Filter Operator [FIL_293] (rows=2300 width=259)\n                                 predicate:(((p_channel_dmail = 'Y') or (p_channel_email = 'Y') or (p_channel_tv = 'Y')) and p_promo_sk is not null)\n                                 TableScan [TS_18] (rows=2300 width=259)\n                                   default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:[\"p_promo_sk\",\"p_channel_dmail\",\"p_channel_email\",\"p_channel_tv\"]\n                         <-Reducer 12 [SIMPLE_EDGE]\n                           SHUFFLE [RS_30]\n                             PartitionCols:_col4\n                             Merge Join Operator [MERGEJOIN_255] (rows=2526982 width=0)\n-                              Conds:RS_27._col3=RS_286._col0(Inner),Output:[\"_col2\",\"_col4\",\"_col5\"]\n-                            <-Map 19 [SIMPLE_EDGE] vectorized\n-                              SHUFFLE [RS_286]\n+                              Conds:RS_27._col3=RS_291._col0(Inner),Output:[\"_col2\",\"_col4\",\"_col5\"]\n+                            <-Map 20 [SIMPLE_EDGE] vectorized\n+                              SHUFFLE [RS_291]\n                                 PartitionCols:_col0\n-                                Select Operator [SEL_285] (rows=341 width=4)\n+                                Select Operator [SEL_290] (rows=341 width=4)\n                                   Output:[\"_col0\"]\n-                                  Filter Operator [FIL_284] (rows=341 width=115)\n+                                  Filter Operator [FIL_289] (rows=341 width=115)\n                                     predicate:((s_gmt_offset = -7) and s_store_sk is not null)\n                                     TableScan [TS_15] (rows=1704 width=115)\n                                       default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:[\"s_store_sk\",\"s_gmt_offset\"]\n                             <-Reducer 11 [SIMPLE_EDGE]\n                               SHUFFLE [RS_27]\n                                 PartitionCols:_col3\n                                 Merge Join Operator [MERGEJOIN_254] (rows=12627499 width=0)\n-                                  Conds:RS_24._col1=RS_282._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n-                                <-Map 18 [SIMPLE_EDGE] vectorized\n-                                  SHUFFLE [RS_282]\n+                                  Conds:RS_24._col1=RS_287._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n+                                <-Map 19 [SIMPLE_EDGE] vectorized\n+                                  SHUFFLE [RS_287]\n                                     PartitionCols:_col0\n-                                    Select Operator [SEL_281] (rows=46200 width=4)\n+                                    Select Operator [SEL_286] (rows=46200 width=4)\n                                       Output:[\"_col0\"]\n-                                      Filter Operator [FIL_280] (rows=46200 width=94)\n+                                      Filter Operator [FIL_285] (rows=46200 width=94)\n                                         predicate:((i_category = 'Electronics') and i_item_sk is not null)\n                                         TableScan [TS_12] (rows=462000 width=94)\n                                           default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:[\"i_item_sk\",\"i_category\"]\n                                 <-Reducer 10 [SIMPLE_EDGE]\n                                   SHUFFLE [RS_24]\n                                     PartitionCols:_col1\n                                     Merge Join Operator [MERGEJOIN_253] (rows=13119234 width=4)\n-                                      Conds:RS_274._col0=RS_278._col0(Inner),Output:[\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n+                                      Conds:RS_283._col0=RS_272._col0(Inner),Output:[\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n                                     <-Map 17 [SIMPLE_EDGE] vectorized\n-                                      SHUFFLE [RS_278]\n+                                      PARTITION_ONLY_SHUFFLE [RS_272]\n                                         PartitionCols:_col0\n-                                        Select Operator [SEL_277] (rows=50 width=4)\n+                                        Select Operator [SEL_271] (rows=50 width=4)\n                                           Output:[\"_col0\"]\n-                                          Filter Operator [FIL_276] (rows=50 width=12)\n+                                          Filter Operator [FIL_270] (rows=50 width=12)\n                                             predicate:((d_year = 1999) and (d_moy = 11) and d_date_sk is not null)\n                                             TableScan [TS_9] (rows=73049 width=12)\n                                               default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:[\"d_date_sk\",\"d_year\",\"d_moy\"]\n                                     <-Map 9 [SIMPLE_EDGE] vectorized\n-                                      SHUFFLE [RS_274]\n+                                      SHUFFLE [RS_283]\n                                         PartitionCols:_col0\n-                                        Select Operator [SEL_272] (rows=479120969 width=126)\n+                                        Select Operator [SEL_281] (rows=479120969 width=126)\n                                           Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n-                                          Filter Operator [FIL_270] (rows=479120969 width=126)\n-                                            predicate:(ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null)\n+                                          Filter Operator [FIL_279] (rows=479120969 width=126)\n+                                            predicate:(ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_22_date_dim_d_date_sk_min) AND DynamicValue(RS_22_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_date_dim_d_date_sk_bloom_filter)) and ((ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null) or (ss_sold_date_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null)))\n                                             TableScan [TS_6] (rows=575995635 width=126)\n                                               default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:[\"ss_sold_date_sk\",\"ss_item_sk\",\"ss_customer_sk\",\"ss_store_sk\",\"ss_promo_sk\",\"ss_ext_sales_price\"]\n+                                            <-Reducer 18 [BROADCAST_EDGE] vectorized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4bc3212ad9c306ddd3173d4079b50170aadead"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3ODUyOQ==", "bodyText": "Maybe it was because one TS was targeted by a SJ and the other one was not?", "url": "https://github.com/apache/hive/pull/1653#discussion_r522678529", "createdAt": "2020-11-13T06:28:09Z", "author": {"login": "jcamachor"}, "path": "ql/src/test/results/clientpositive/perf/tez/query61.q.out", "diffHunk": "@@ -165,70 +167,81 @@ Stage-0\n                       SHUFFLE [RS_38]\n                         PartitionCols:_col2\n                         Merge Join Operator [MERGEJOIN_256] (rows=2526982 width=0)\n-                          Conds:RS_30._col4=RS_290._col0(Inner),Output:[\"_col2\",\"_col5\"]\n-                        <-Map 20 [SIMPLE_EDGE] vectorized\n-                          SHUFFLE [RS_290]\n+                          Conds:RS_30._col4=RS_295._col0(Inner),Output:[\"_col2\",\"_col5\"]\n+                        <-Map 21 [SIMPLE_EDGE] vectorized\n+                          SHUFFLE [RS_295]\n                             PartitionCols:_col0\n-                            Select Operator [SEL_289] (rows=2300 width=4)\n+                            Select Operator [SEL_294] (rows=2300 width=4)\n                               Output:[\"_col0\"]\n-                              Filter Operator [FIL_288] (rows=2300 width=259)\n+                              Filter Operator [FIL_293] (rows=2300 width=259)\n                                 predicate:(((p_channel_dmail = 'Y') or (p_channel_email = 'Y') or (p_channel_tv = 'Y')) and p_promo_sk is not null)\n                                 TableScan [TS_18] (rows=2300 width=259)\n                                   default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:[\"p_promo_sk\",\"p_channel_dmail\",\"p_channel_email\",\"p_channel_tv\"]\n                         <-Reducer 12 [SIMPLE_EDGE]\n                           SHUFFLE [RS_30]\n                             PartitionCols:_col4\n                             Merge Join Operator [MERGEJOIN_255] (rows=2526982 width=0)\n-                              Conds:RS_27._col3=RS_286._col0(Inner),Output:[\"_col2\",\"_col4\",\"_col5\"]\n-                            <-Map 19 [SIMPLE_EDGE] vectorized\n-                              SHUFFLE [RS_286]\n+                              Conds:RS_27._col3=RS_291._col0(Inner),Output:[\"_col2\",\"_col4\",\"_col5\"]\n+                            <-Map 20 [SIMPLE_EDGE] vectorized\n+                              SHUFFLE [RS_291]\n                                 PartitionCols:_col0\n-                                Select Operator [SEL_285] (rows=341 width=4)\n+                                Select Operator [SEL_290] (rows=341 width=4)\n                                   Output:[\"_col0\"]\n-                                  Filter Operator [FIL_284] (rows=341 width=115)\n+                                  Filter Operator [FIL_289] (rows=341 width=115)\n                                     predicate:((s_gmt_offset = -7) and s_store_sk is not null)\n                                     TableScan [TS_15] (rows=1704 width=115)\n                                       default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:[\"s_store_sk\",\"s_gmt_offset\"]\n                             <-Reducer 11 [SIMPLE_EDGE]\n                               SHUFFLE [RS_27]\n                                 PartitionCols:_col3\n                                 Merge Join Operator [MERGEJOIN_254] (rows=12627499 width=0)\n-                                  Conds:RS_24._col1=RS_282._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n-                                <-Map 18 [SIMPLE_EDGE] vectorized\n-                                  SHUFFLE [RS_282]\n+                                  Conds:RS_24._col1=RS_287._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n+                                <-Map 19 [SIMPLE_EDGE] vectorized\n+                                  SHUFFLE [RS_287]\n                                     PartitionCols:_col0\n-                                    Select Operator [SEL_281] (rows=46200 width=4)\n+                                    Select Operator [SEL_286] (rows=46200 width=4)\n                                       Output:[\"_col0\"]\n-                                      Filter Operator [FIL_280] (rows=46200 width=94)\n+                                      Filter Operator [FIL_285] (rows=46200 width=94)\n                                         predicate:((i_category = 'Electronics') and i_item_sk is not null)\n                                         TableScan [TS_12] (rows=462000 width=94)\n                                           default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:[\"i_item_sk\",\"i_category\"]\n                                 <-Reducer 10 [SIMPLE_EDGE]\n                                   SHUFFLE [RS_24]\n                                     PartitionCols:_col1\n                                     Merge Join Operator [MERGEJOIN_253] (rows=13119234 width=4)\n-                                      Conds:RS_274._col0=RS_278._col0(Inner),Output:[\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n+                                      Conds:RS_283._col0=RS_272._col0(Inner),Output:[\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n                                     <-Map 17 [SIMPLE_EDGE] vectorized\n-                                      SHUFFLE [RS_278]\n+                                      PARTITION_ONLY_SHUFFLE [RS_272]\n                                         PartitionCols:_col0\n-                                        Select Operator [SEL_277] (rows=50 width=4)\n+                                        Select Operator [SEL_271] (rows=50 width=4)\n                                           Output:[\"_col0\"]\n-                                          Filter Operator [FIL_276] (rows=50 width=12)\n+                                          Filter Operator [FIL_270] (rows=50 width=12)\n                                             predicate:((d_year = 1999) and (d_moy = 11) and d_date_sk is not null)\n                                             TableScan [TS_9] (rows=73049 width=12)\n                                               default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:[\"d_date_sk\",\"d_year\",\"d_moy\"]\n                                     <-Map 9 [SIMPLE_EDGE] vectorized\n-                                      SHUFFLE [RS_274]\n+                                      SHUFFLE [RS_283]\n                                         PartitionCols:_col0\n-                                        Select Operator [SEL_272] (rows=479120969 width=126)\n+                                        Select Operator [SEL_281] (rows=479120969 width=126)\n                                           Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n-                                          Filter Operator [FIL_270] (rows=479120969 width=126)\n-                                            predicate:(ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null)\n+                                          Filter Operator [FIL_279] (rows=479120969 width=126)\n+                                            predicate:(ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_22_date_dim_d_date_sk_min) AND DynamicValue(RS_22_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_date_dim_d_date_sk_bloom_filter)) and ((ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null) or (ss_sold_date_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null)))\n                                             TableScan [TS_6] (rows=575995635 width=126)\n                                               default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:[\"ss_sold_date_sk\",\"ss_item_sk\",\"ss_customer_sk\",\"ss_store_sk\",\"ss_promo_sk\",\"ss_ext_sales_price\"]\n+                                            <-Reducer 18 [BROADCAST_EDGE] vectorized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2OTkzNA=="}, "originalCommit": {"oid": "8d4bc3212ad9c306ddd3173d4079b50170aadead"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjczMjM0NA==", "bodyText": "the interesting thing is that this plan has no scans without SJ -  I think during one of the merge steps the SJ filter was removed - and because older TS ops were not removed in a later step it merged with it...\nbut this patch fixes this bug for sure...so we are good :)", "url": "https://github.com/apache/hive/pull/1653#discussion_r522732344", "createdAt": "2020-11-13T07:33:36Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/perf/tez/query61.q.out", "diffHunk": "@@ -165,70 +167,81 @@ Stage-0\n                       SHUFFLE [RS_38]\n                         PartitionCols:_col2\n                         Merge Join Operator [MERGEJOIN_256] (rows=2526982 width=0)\n-                          Conds:RS_30._col4=RS_290._col0(Inner),Output:[\"_col2\",\"_col5\"]\n-                        <-Map 20 [SIMPLE_EDGE] vectorized\n-                          SHUFFLE [RS_290]\n+                          Conds:RS_30._col4=RS_295._col0(Inner),Output:[\"_col2\",\"_col5\"]\n+                        <-Map 21 [SIMPLE_EDGE] vectorized\n+                          SHUFFLE [RS_295]\n                             PartitionCols:_col0\n-                            Select Operator [SEL_289] (rows=2300 width=4)\n+                            Select Operator [SEL_294] (rows=2300 width=4)\n                               Output:[\"_col0\"]\n-                              Filter Operator [FIL_288] (rows=2300 width=259)\n+                              Filter Operator [FIL_293] (rows=2300 width=259)\n                                 predicate:(((p_channel_dmail = 'Y') or (p_channel_email = 'Y') or (p_channel_tv = 'Y')) and p_promo_sk is not null)\n                                 TableScan [TS_18] (rows=2300 width=259)\n                                   default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:[\"p_promo_sk\",\"p_channel_dmail\",\"p_channel_email\",\"p_channel_tv\"]\n                         <-Reducer 12 [SIMPLE_EDGE]\n                           SHUFFLE [RS_30]\n                             PartitionCols:_col4\n                             Merge Join Operator [MERGEJOIN_255] (rows=2526982 width=0)\n-                              Conds:RS_27._col3=RS_286._col0(Inner),Output:[\"_col2\",\"_col4\",\"_col5\"]\n-                            <-Map 19 [SIMPLE_EDGE] vectorized\n-                              SHUFFLE [RS_286]\n+                              Conds:RS_27._col3=RS_291._col0(Inner),Output:[\"_col2\",\"_col4\",\"_col5\"]\n+                            <-Map 20 [SIMPLE_EDGE] vectorized\n+                              SHUFFLE [RS_291]\n                                 PartitionCols:_col0\n-                                Select Operator [SEL_285] (rows=341 width=4)\n+                                Select Operator [SEL_290] (rows=341 width=4)\n                                   Output:[\"_col0\"]\n-                                  Filter Operator [FIL_284] (rows=341 width=115)\n+                                  Filter Operator [FIL_289] (rows=341 width=115)\n                                     predicate:((s_gmt_offset = -7) and s_store_sk is not null)\n                                     TableScan [TS_15] (rows=1704 width=115)\n                                       default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:[\"s_store_sk\",\"s_gmt_offset\"]\n                             <-Reducer 11 [SIMPLE_EDGE]\n                               SHUFFLE [RS_27]\n                                 PartitionCols:_col3\n                                 Merge Join Operator [MERGEJOIN_254] (rows=12627499 width=0)\n-                                  Conds:RS_24._col1=RS_282._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n-                                <-Map 18 [SIMPLE_EDGE] vectorized\n-                                  SHUFFLE [RS_282]\n+                                  Conds:RS_24._col1=RS_287._col0(Inner),Output:[\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n+                                <-Map 19 [SIMPLE_EDGE] vectorized\n+                                  SHUFFLE [RS_287]\n                                     PartitionCols:_col0\n-                                    Select Operator [SEL_281] (rows=46200 width=4)\n+                                    Select Operator [SEL_286] (rows=46200 width=4)\n                                       Output:[\"_col0\"]\n-                                      Filter Operator [FIL_280] (rows=46200 width=94)\n+                                      Filter Operator [FIL_285] (rows=46200 width=94)\n                                         predicate:((i_category = 'Electronics') and i_item_sk is not null)\n                                         TableScan [TS_12] (rows=462000 width=94)\n                                           default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:[\"i_item_sk\",\"i_category\"]\n                                 <-Reducer 10 [SIMPLE_EDGE]\n                                   SHUFFLE [RS_24]\n                                     PartitionCols:_col1\n                                     Merge Join Operator [MERGEJOIN_253] (rows=13119234 width=4)\n-                                      Conds:RS_274._col0=RS_278._col0(Inner),Output:[\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n+                                      Conds:RS_283._col0=RS_272._col0(Inner),Output:[\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n                                     <-Map 17 [SIMPLE_EDGE] vectorized\n-                                      SHUFFLE [RS_278]\n+                                      PARTITION_ONLY_SHUFFLE [RS_272]\n                                         PartitionCols:_col0\n-                                        Select Operator [SEL_277] (rows=50 width=4)\n+                                        Select Operator [SEL_271] (rows=50 width=4)\n                                           Output:[\"_col0\"]\n-                                          Filter Operator [FIL_276] (rows=50 width=12)\n+                                          Filter Operator [FIL_270] (rows=50 width=12)\n                                             predicate:((d_year = 1999) and (d_moy = 11) and d_date_sk is not null)\n                                             TableScan [TS_9] (rows=73049 width=12)\n                                               default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:[\"d_date_sk\",\"d_year\",\"d_moy\"]\n                                     <-Map 9 [SIMPLE_EDGE] vectorized\n-                                      SHUFFLE [RS_274]\n+                                      SHUFFLE [RS_283]\n                                         PartitionCols:_col0\n-                                        Select Operator [SEL_272] (rows=479120969 width=126)\n+                                        Select Operator [SEL_281] (rows=479120969 width=126)\n                                           Output:[\"_col0\",\"_col1\",\"_col2\",\"_col3\",\"_col4\",\"_col5\"]\n-                                          Filter Operator [FIL_270] (rows=479120969 width=126)\n-                                            predicate:(ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null)\n+                                          Filter Operator [FIL_279] (rows=479120969 width=126)\n+                                            predicate:(ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_22_date_dim_d_date_sk_min) AND DynamicValue(RS_22_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_date_dim_d_date_sk_bloom_filter)) and ((ss_sold_date_sk is not null and ss_promo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null) or (ss_sold_date_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null)))\n                                             TableScan [TS_6] (rows=575995635 width=126)\n                                               default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:[\"ss_sold_date_sk\",\"ss_item_sk\",\"ss_customer_sk\",\"ss_store_sk\",\"ss_promo_sk\",\"ss_ext_sales_price\"]\n+                                            <-Reducer 18 [BROADCAST_EDGE] vectorized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2OTkzNA=="}, "originalCommit": {"oid": "8d4bc3212ad9c306ddd3173d4079b50170aadead"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDU4MTI2OnYy", "diffSide": "RIGHT", "path": "ql/src/test/results/clientpositive/perf/tez/constraints/query23.q.out", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozMjoxOVrOHwnrHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozMjoxOVrOHwnrHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MzcwOA==", "bodyText": "HIVE-24365 will address these conditions", "url": "https://github.com/apache/hive/pull/1653#discussion_r520743708", "createdAt": "2020-11-10T17:32:19Z", "author": {"login": "kgyrtkirk"}, "path": "ql/src/test/results/clientpositive/perf/tez/constraints/query23.q.out", "diffHunk": "@@ -255,7 +255,7 @@ Stage-0\n                                                             Select Operator [SEL_421] (rows=525327388 width=119)\n                                                               Output:[\"_col0\",\"_col1\",\"_col2\"]\n                                                               Filter Operator [FIL_417] (rows=525327388 width=118)\n-                                                                predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter)) and (ss_customer_sk is not null or (ss_sold_date_sk is not null and ss_customer_sk is not null)) and ((ss_customer_sk BETWEEN DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_bloom_filter))) or (ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter)))) and (((ss_customer_sk is not null or (ss_sold_date_sk is not null and ss_customer_sk is not null)) and ((ss_customer_sk BETWEEN DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_bloom_filter))) or (ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter))))) or ss_sold_date_sk is not null) and (ss_sold_date_sk BETWEEN DynamicValue(RS_58_date_dim_d_date_sk_min) AND DynamicValue(RS_58_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_58_date_dim_d_date_sk_bloom_filter))))\n+                                                                predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter)) and (ss_customer_sk is not null or (ss_sold_date_sk is not null and ss_customer_sk is not null)) and ((ss_customer_sk BETWEEN DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_bloom_filter))) or (ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter)))) and (((ss_customer_sk is not null or (ss_sold_date_sk is not null and ss_customer_sk is not null)) and ((ss_customer_sk BETWEEN DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_bloom_filter))) or (ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter))))) or ss_sold_date_sk is not null) and ss_sold_date_sk BETWEEN DynamicValue(RS_58_date_dim_d_date_sk_min) AND DynamicValue(RS_58_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_58_date_dim_d_date_sk_bloom_filter)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6bf5790675797f3836c101c2ee65221c8b33a8"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 228, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}