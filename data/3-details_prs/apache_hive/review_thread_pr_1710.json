{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3Njg3Nzcy", "number": 1710, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoyMzozMFrOFCwPCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowOToxMVrOFC0COw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDMxNzU1OnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoyMzozMFrOICEb-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozODozMFrOIEFKAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MDc2Mg==", "bodyText": "Is the comparison required? events will always be in ascending order of event id", "url": "https://github.com/apache/hive/pull/1710#discussion_r539040762", "createdAt": "2020-12-09T06:23:30Z", "author": {"login": "aasha"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "diffHunk": "@@ -10800,53 +10801,89 @@ public void addNotificationEvent(NotificationEvent entry) throws MetaException {\n \n   @Override\n   public void cleanNotificationEvents(int olderThan) {\n-    boolean commited = false;\n-    Query query = null;\n+    final int eventBatchSize = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n+\n+    final long ageSec = olderThan;\n+    final Instant now = Instant.now();\n+\n+    final int tooOld = Math.toIntExact(now.getEpochSecond() - ageSec);\n+\n+    final Optional<Integer> batchSize = (eventBatchSize > 0) ? Optional.of(eventBatchSize) : Optional.empty();\n+\n+    final long start = System.nanoTime();\n+    int deleteCount = doCleanNotificationEvents(tooOld, batchSize);\n+\n+    if (deleteCount == 0) {\n+      LOG.info(\"No Notification events found to be cleaned with eventTime < {}\", tooOld);\n+    } else {\n+      int batchCount = 0;\n+      do {\n+        batchCount = doCleanNotificationEvents(tooOld, batchSize);\n+        deleteCount += batchCount;\n+      } while (batchCount > 0);\n+    }\n+\n+    final long finish = System.nanoTime();\n+\n+    LOG.info(\"Deleted {} notification events older than epoch:{} in {}ms\", deleteCount, tooOld,\n+        TimeUnit.NANOSECONDS.toMillis(finish - start));\n+  }\n+\n+  private int doCleanNotificationEvents(final int ageSec, final Optional<Integer> batchSize) {\n+    final Transaction tx = pm.currentTransaction();\n+    int eventsCount = 0;\n+\n     try {\n-      openTransaction();\n-      long tmp = System.currentTimeMillis() / 1000 - olderThan;\n-      int tooOld = (tmp > Integer.MAX_VALUE) ? 0 : (int) tmp;\n-      query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\");\n-      query.declareParameters(\"java.lang.Integer tooOld\");\n+      tx.begin();\n \n-      int max_events = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n-      max_events = max_events > 0 ? max_events : Integer.MAX_VALUE;\n-      query.setRange(0, max_events);\n-      query.setOrdering(\"eventId ascending\");\n+      try (Query query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\")) {\n+        query.declareParameters(\"java.lang.Integer tooOld\");\n+        query.setOrdering(\"eventId ascending\");\n+        if (batchSize.isPresent()) {\n+          query.setRange(0, batchSize.get());\n+        }\n \n-      List<MNotificationLog> toBeRemoved = (List) query.execute(tooOld);\n-      int iteration = 0;\n-      int eventCount = 0;\n-      long minEventId = 0;\n-      long minEventTime = 0;\n-      long maxEventId = 0;\n-      long maxEventTime = 0;\n-      while (CollectionUtils.isNotEmpty(toBeRemoved)) {\n-        int listSize = toBeRemoved.size();\n-        if (iteration == 0) {\n-          MNotificationLog firstNotification = toBeRemoved.get(0);\n-          minEventId = firstNotification.getEventId();\n-          minEventTime = firstNotification.getEventTime();\n+        List<MNotificationLog> events = (List) query.execute(ageSec);\n+        if (CollectionUtils.isNotEmpty(events)) {\n+          eventsCount = events.size();\n+\n+          if (LOG.isDebugEnabled()) {\n+            int minEventTime, maxEventTime;\n+            long minEventId, maxEventId;\n+            Iterator<MNotificationLog> iter = events.iterator();\n+            MNotificationLog firstNotification = iter.next();\n+\n+            minEventTime = maxEventTime = firstNotification.getEventTime();\n+            minEventId = maxEventId = firstNotification.getEventId();\n+\n+            while (iter.hasNext()) {\n+              MNotificationLog notification = iter.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfda1a5ac9389a8e1328235763cd2c441856fd5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MTczOQ==", "bodyText": "Hey, so this goes back to the discussion I had over here... PR #1728\nThere is really no guarantee that the eventTime is always increasing.  So, the ID is always increasing, but if the min/max eventTime are to be discovered for each batch, then it needs to iterate.  I'm happy to remove the logging and remove the iteration, but that was already in place and I didn't want to remove.\nEdit: This is an out-of-band process that doesn't block anything else, so a few extra CPU cycles isn't the end of the world.", "url": "https://github.com/apache/hive/pull/1710#discussion_r540981739", "createdAt": "2020-12-11T14:22:42Z", "author": {"login": "belugabehr"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "diffHunk": "@@ -10800,53 +10801,89 @@ public void addNotificationEvent(NotificationEvent entry) throws MetaException {\n \n   @Override\n   public void cleanNotificationEvents(int olderThan) {\n-    boolean commited = false;\n-    Query query = null;\n+    final int eventBatchSize = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n+\n+    final long ageSec = olderThan;\n+    final Instant now = Instant.now();\n+\n+    final int tooOld = Math.toIntExact(now.getEpochSecond() - ageSec);\n+\n+    final Optional<Integer> batchSize = (eventBatchSize > 0) ? Optional.of(eventBatchSize) : Optional.empty();\n+\n+    final long start = System.nanoTime();\n+    int deleteCount = doCleanNotificationEvents(tooOld, batchSize);\n+\n+    if (deleteCount == 0) {\n+      LOG.info(\"No Notification events found to be cleaned with eventTime < {}\", tooOld);\n+    } else {\n+      int batchCount = 0;\n+      do {\n+        batchCount = doCleanNotificationEvents(tooOld, batchSize);\n+        deleteCount += batchCount;\n+      } while (batchCount > 0);\n+    }\n+\n+    final long finish = System.nanoTime();\n+\n+    LOG.info(\"Deleted {} notification events older than epoch:{} in {}ms\", deleteCount, tooOld,\n+        TimeUnit.NANOSECONDS.toMillis(finish - start));\n+  }\n+\n+  private int doCleanNotificationEvents(final int ageSec, final Optional<Integer> batchSize) {\n+    final Transaction tx = pm.currentTransaction();\n+    int eventsCount = 0;\n+\n     try {\n-      openTransaction();\n-      long tmp = System.currentTimeMillis() / 1000 - olderThan;\n-      int tooOld = (tmp > Integer.MAX_VALUE) ? 0 : (int) tmp;\n-      query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\");\n-      query.declareParameters(\"java.lang.Integer tooOld\");\n+      tx.begin();\n \n-      int max_events = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n-      max_events = max_events > 0 ? max_events : Integer.MAX_VALUE;\n-      query.setRange(0, max_events);\n-      query.setOrdering(\"eventId ascending\");\n+      try (Query query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\")) {\n+        query.declareParameters(\"java.lang.Integer tooOld\");\n+        query.setOrdering(\"eventId ascending\");\n+        if (batchSize.isPresent()) {\n+          query.setRange(0, batchSize.get());\n+        }\n \n-      List<MNotificationLog> toBeRemoved = (List) query.execute(tooOld);\n-      int iteration = 0;\n-      int eventCount = 0;\n-      long minEventId = 0;\n-      long minEventTime = 0;\n-      long maxEventId = 0;\n-      long maxEventTime = 0;\n-      while (CollectionUtils.isNotEmpty(toBeRemoved)) {\n-        int listSize = toBeRemoved.size();\n-        if (iteration == 0) {\n-          MNotificationLog firstNotification = toBeRemoved.get(0);\n-          minEventId = firstNotification.getEventId();\n-          minEventTime = firstNotification.getEventTime();\n+        List<MNotificationLog> events = (List) query.execute(ageSec);\n+        if (CollectionUtils.isNotEmpty(events)) {\n+          eventsCount = events.size();\n+\n+          if (LOG.isDebugEnabled()) {\n+            int minEventTime, maxEventTime;\n+            long minEventId, maxEventId;\n+            Iterator<MNotificationLog> iter = events.iterator();\n+            MNotificationLog firstNotification = iter.next();\n+\n+            minEventTime = maxEventTime = firstNotification.getEventTime();\n+            minEventId = maxEventId = firstNotification.getEventId();\n+\n+            while (iter.hasNext()) {\n+              MNotificationLog notification = iter.next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MDc2Mg=="}, "originalCommit": {"oid": "edfda1a5ac9389a8e1328235763cd2c441856fd5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4NDkzOQ==", "bodyText": "If you are speaking about the eventId portion only, then yes, one could look at the first and last item.  Since the list needs to be iterated anyway, might as well just keep it simple and consistent with regards to how min/max is determined.", "url": "https://github.com/apache/hive/pull/1710#discussion_r540984939", "createdAt": "2020-12-11T14:27:13Z", "author": {"login": "belugabehr"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "diffHunk": "@@ -10800,53 +10801,89 @@ public void addNotificationEvent(NotificationEvent entry) throws MetaException {\n \n   @Override\n   public void cleanNotificationEvents(int olderThan) {\n-    boolean commited = false;\n-    Query query = null;\n+    final int eventBatchSize = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n+\n+    final long ageSec = olderThan;\n+    final Instant now = Instant.now();\n+\n+    final int tooOld = Math.toIntExact(now.getEpochSecond() - ageSec);\n+\n+    final Optional<Integer> batchSize = (eventBatchSize > 0) ? Optional.of(eventBatchSize) : Optional.empty();\n+\n+    final long start = System.nanoTime();\n+    int deleteCount = doCleanNotificationEvents(tooOld, batchSize);\n+\n+    if (deleteCount == 0) {\n+      LOG.info(\"No Notification events found to be cleaned with eventTime < {}\", tooOld);\n+    } else {\n+      int batchCount = 0;\n+      do {\n+        batchCount = doCleanNotificationEvents(tooOld, batchSize);\n+        deleteCount += batchCount;\n+      } while (batchCount > 0);\n+    }\n+\n+    final long finish = System.nanoTime();\n+\n+    LOG.info(\"Deleted {} notification events older than epoch:{} in {}ms\", deleteCount, tooOld,\n+        TimeUnit.NANOSECONDS.toMillis(finish - start));\n+  }\n+\n+  private int doCleanNotificationEvents(final int ageSec, final Optional<Integer> batchSize) {\n+    final Transaction tx = pm.currentTransaction();\n+    int eventsCount = 0;\n+\n     try {\n-      openTransaction();\n-      long tmp = System.currentTimeMillis() / 1000 - olderThan;\n-      int tooOld = (tmp > Integer.MAX_VALUE) ? 0 : (int) tmp;\n-      query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\");\n-      query.declareParameters(\"java.lang.Integer tooOld\");\n+      tx.begin();\n \n-      int max_events = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n-      max_events = max_events > 0 ? max_events : Integer.MAX_VALUE;\n-      query.setRange(0, max_events);\n-      query.setOrdering(\"eventId ascending\");\n+      try (Query query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\")) {\n+        query.declareParameters(\"java.lang.Integer tooOld\");\n+        query.setOrdering(\"eventId ascending\");\n+        if (batchSize.isPresent()) {\n+          query.setRange(0, batchSize.get());\n+        }\n \n-      List<MNotificationLog> toBeRemoved = (List) query.execute(tooOld);\n-      int iteration = 0;\n-      int eventCount = 0;\n-      long minEventId = 0;\n-      long minEventTime = 0;\n-      long maxEventId = 0;\n-      long maxEventTime = 0;\n-      while (CollectionUtils.isNotEmpty(toBeRemoved)) {\n-        int listSize = toBeRemoved.size();\n-        if (iteration == 0) {\n-          MNotificationLog firstNotification = toBeRemoved.get(0);\n-          minEventId = firstNotification.getEventId();\n-          minEventTime = firstNotification.getEventTime();\n+        List<MNotificationLog> events = (List) query.execute(ageSec);\n+        if (CollectionUtils.isNotEmpty(events)) {\n+          eventsCount = events.size();\n+\n+          if (LOG.isDebugEnabled()) {\n+            int minEventTime, maxEventTime;\n+            long minEventId, maxEventId;\n+            Iterator<MNotificationLog> iter = events.iterator();\n+            MNotificationLog firstNotification = iter.next();\n+\n+            minEventTime = maxEventTime = firstNotification.getEventTime();\n+            minEventId = maxEventId = firstNotification.getEventId();\n+\n+            while (iter.hasNext()) {\n+              MNotificationLog notification = iter.next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MDc2Mg=="}, "originalCommit": {"oid": "edfda1a5ac9389a8e1328235763cd2c441856fd5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0OTY5OA==", "bodyText": "@aasha I updated existing unit tests to enforce small batch sizes (size = 1) so that when it deletes records, it does so in batches of 1.", "url": "https://github.com/apache/hive/pull/1710#discussion_r541149698", "createdAt": "2020-12-11T18:38:30Z", "author": {"login": "belugabehr"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "diffHunk": "@@ -10800,53 +10801,89 @@ public void addNotificationEvent(NotificationEvent entry) throws MetaException {\n \n   @Override\n   public void cleanNotificationEvents(int olderThan) {\n-    boolean commited = false;\n-    Query query = null;\n+    final int eventBatchSize = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n+\n+    final long ageSec = olderThan;\n+    final Instant now = Instant.now();\n+\n+    final int tooOld = Math.toIntExact(now.getEpochSecond() - ageSec);\n+\n+    final Optional<Integer> batchSize = (eventBatchSize > 0) ? Optional.of(eventBatchSize) : Optional.empty();\n+\n+    final long start = System.nanoTime();\n+    int deleteCount = doCleanNotificationEvents(tooOld, batchSize);\n+\n+    if (deleteCount == 0) {\n+      LOG.info(\"No Notification events found to be cleaned with eventTime < {}\", tooOld);\n+    } else {\n+      int batchCount = 0;\n+      do {\n+        batchCount = doCleanNotificationEvents(tooOld, batchSize);\n+        deleteCount += batchCount;\n+      } while (batchCount > 0);\n+    }\n+\n+    final long finish = System.nanoTime();\n+\n+    LOG.info(\"Deleted {} notification events older than epoch:{} in {}ms\", deleteCount, tooOld,\n+        TimeUnit.NANOSECONDS.toMillis(finish - start));\n+  }\n+\n+  private int doCleanNotificationEvents(final int ageSec, final Optional<Integer> batchSize) {\n+    final Transaction tx = pm.currentTransaction();\n+    int eventsCount = 0;\n+\n     try {\n-      openTransaction();\n-      long tmp = System.currentTimeMillis() / 1000 - olderThan;\n-      int tooOld = (tmp > Integer.MAX_VALUE) ? 0 : (int) tmp;\n-      query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\");\n-      query.declareParameters(\"java.lang.Integer tooOld\");\n+      tx.begin();\n \n-      int max_events = MetastoreConf.getIntVar(conf, MetastoreConf.ConfVars.EVENT_CLEAN_MAX_EVENTS);\n-      max_events = max_events > 0 ? max_events : Integer.MAX_VALUE;\n-      query.setRange(0, max_events);\n-      query.setOrdering(\"eventId ascending\");\n+      try (Query query = pm.newQuery(MNotificationLog.class, \"eventTime < tooOld\")) {\n+        query.declareParameters(\"java.lang.Integer tooOld\");\n+        query.setOrdering(\"eventId ascending\");\n+        if (batchSize.isPresent()) {\n+          query.setRange(0, batchSize.get());\n+        }\n \n-      List<MNotificationLog> toBeRemoved = (List) query.execute(tooOld);\n-      int iteration = 0;\n-      int eventCount = 0;\n-      long minEventId = 0;\n-      long minEventTime = 0;\n-      long maxEventId = 0;\n-      long maxEventTime = 0;\n-      while (CollectionUtils.isNotEmpty(toBeRemoved)) {\n-        int listSize = toBeRemoved.size();\n-        if (iteration == 0) {\n-          MNotificationLog firstNotification = toBeRemoved.get(0);\n-          minEventId = firstNotification.getEventId();\n-          minEventTime = firstNotification.getEventTime();\n+        List<MNotificationLog> events = (List) query.execute(ageSec);\n+        if (CollectionUtils.isNotEmpty(events)) {\n+          eventsCount = events.size();\n+\n+          if (LOG.isDebugEnabled()) {\n+            int minEventTime, maxEventTime;\n+            long minEventId, maxEventId;\n+            Iterator<MNotificationLog> iter = events.iterator();\n+            MNotificationLog firstNotification = iter.next();\n+\n+            minEventTime = maxEventTime = firstNotification.getEventTime();\n+            minEventId = maxEventId = firstNotification.getEventId();\n+\n+            while (iter.hasNext()) {\n+              MNotificationLog notification = iter.next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MDc2Mg=="}, "originalCommit": {"oid": "edfda1a5ac9389a8e1328235763cd2c441856fd5"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDk0MDExOnYy", "diffSide": "RIGHT", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowOToxMVrOICJ8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoyMDowOVrOID6zLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMDk4Nw==", "bodyText": "The same improvement done in cleanNotificationEvents can be applied to cleanWriteNotificationEvents also.", "url": "https://github.com/apache/hive/pull/1710#discussion_r539130987", "createdAt": "2020-12-09T09:09:11Z", "author": {"login": "aasha"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "diffHunk": "@@ -10800,53 +10801,89 @@ public void addNotificationEvent(NotificationEvent entry) throws MetaException {\n \n   @Override\n   public void cleanNotificationEvents(int olderThan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edfda1a5ac9389a8e1328235763cd2c441856fd5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MDAxMw==", "bodyText": "Will do in separate JIRA after this new code gets some usage.", "url": "https://github.com/apache/hive/pull/1710#discussion_r540980013", "createdAt": "2020-12-11T14:20:09Z", "author": {"login": "belugabehr"}, "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/ObjectStore.java", "diffHunk": "@@ -10800,53 +10801,89 @@ public void addNotificationEvent(NotificationEvent entry) throws MetaException {\n \n   @Override\n   public void cleanNotificationEvents(int olderThan) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMDk4Nw=="}, "originalCommit": {"oid": "edfda1a5ac9389a8e1328235763cd2c441856fd5"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 278, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}