{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxODQ2ODM5", "number": 1735, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNzo1OFrOFAv6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzozNjo1NFrOFEF4jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzI5NDIyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNzo1OFrOH_MHIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjo1NDozOVrOH_Pr7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMDc2OQ==", "bodyText": "Why not just set it to TXN_ID_NOT_SET after calling abortComapctionAndMarkFailed?", "url": "https://github.com/apache/hive/pull/1735#discussion_r536020769", "createdAt": "2020-12-04T11:07:58Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -561,12 +561,12 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n       } catch (Throwable e) {\n         LOG.error(\"Caught exception while trying to compact \" + ci +\n             \".  Marking failed to avoid repeated failures\", e);\n-        abortCompactionAndMarkFailed(ci, compactorTxnId, e);\n+        compactorTxnId = abortCompactionAndMarkFailed(ci, compactorTxnId, e);\n       }\n     } catch (TException | IOException t) {\n       LOG.error(\"Caught an exception in the main loop of compactor worker \" + workerName, t);\n       try {\n-        abortCompactionAndMarkFailed(ci, compactorTxnId, t);\n+        compactorTxnId = abortCompactionAndMarkFailed(ci, compactorTxnId, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a688693e70a6303eb5d2cb18a2ac33839439f4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA3OTM0MA==", "bodyText": "I thought that this way it would be more obvious to future developers that the compactorTxnId needs to be unset every time it's aborted.", "url": "https://github.com/apache/hive/pull/1735#discussion_r536079340", "createdAt": "2020-12-04T12:54:39Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -561,12 +561,12 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n       } catch (Throwable e) {\n         LOG.error(\"Caught exception while trying to compact \" + ci +\n             \".  Marking failed to avoid repeated failures\", e);\n-        abortCompactionAndMarkFailed(ci, compactorTxnId, e);\n+        compactorTxnId = abortCompactionAndMarkFailed(ci, compactorTxnId, e);\n       }\n     } catch (TException | IOException t) {\n       LOG.error(\"Caught an exception in the main loop of compactor worker \" + workerName, t);\n       try {\n-        abortCompactionAndMarkFailed(ci, compactorTxnId, t);\n+        compactorTxnId = abortCompactionAndMarkFailed(ci, compactorTxnId, t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMDc2OQ=="}, "originalCommit": {"oid": "41a688693e70a6303eb5d2cb18a2ac33839439f4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjIwNDE3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowOTo0NlrOIDvlew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoxNzoyNFrOIDyOYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NjI4Mw==", "bodyText": "Maybe change compactionHeartbeater to use the new class instead of Id?", "url": "https://github.com/apache/hive/pull/1735#discussion_r540796283", "createdAt": "2020-12-11T09:09:46Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -483,12 +471,12 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n        * multiple statements in it (for query based compactor) which is not supported (and since\n        * this case some of the statements are DDL, even in the future will not be allowed in a\n        * multi-stmt txn. {@link Driver#setCompactionWriteIds(ValidWriteIdList, long)} */\n-      compactorTxnId = msc.openTxn(ci.runAs, TxnType.COMPACTION);\n+      compactionTxn.open(ci);\n \n-      heartbeater = new CompactionHeartbeater(compactorTxnId, fullTableName, conf);\n+      heartbeater = new CompactionHeartbeater(compactionTxn.getTxnId(), fullTableName, conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c7f5a1b8f7d0e537f30624606bf3b0db10d9d6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzOTUyMA==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1735#discussion_r540839520", "createdAt": "2020-12-11T10:17:24Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -483,12 +471,12 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n        * multiple statements in it (for query based compactor) which is not supported (and since\n        * this case some of the statements are DDL, even in the future will not be allowed in a\n        * multi-stmt txn. {@link Driver#setCompactionWriteIds(ValidWriteIdList, long)} */\n-      compactorTxnId = msc.openTxn(ci.runAs, TxnType.COMPACTION);\n+      compactionTxn.open(ci);\n \n-      heartbeater = new CompactionHeartbeater(compactorTxnId, fullTableName, conf);\n+      heartbeater = new CompactionHeartbeater(compactionTxn.getTxnId(), fullTableName, conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NjI4Mw=="}, "originalCommit": {"oid": "70c7f5a1b8f7d0e537f30624606bf3b0db10d9d6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjIwNjk3OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxMDoyNlrOIDvnIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoxNzoxOVrOIDyOKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NjcwNw==", "bodyText": "Maybe toString for CompactionTxnId?", "url": "https://github.com/apache/hive/pull/1735#discussion_r540796707", "createdAt": "2020-12-11T09:10:26Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -556,20 +544,20 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n         verifyTableIdHasNotChanged(ci, t1);\n \n         LOG.info(\"Completed \" + ci.type.toString() + \" compaction for \" + ci.getFullPartitionName() + \" in txn \"\n-            + JavaUtils.txnIdToString(compactorTxnId) + \", marking as compacted.\");\n+            + JavaUtils.txnIdToString(compactionTxn.getTxnId()) + \", marking as compacted.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c7f5a1b8f7d0e537f30624606bf3b0db10d9d6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzOTQ2Nw==", "bodyText": "Done", "url": "https://github.com/apache/hive/pull/1735#discussion_r540839467", "createdAt": "2020-12-11T10:17:19Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -556,20 +544,20 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n         verifyTableIdHasNotChanged(ci, t1);\n \n         LOG.info(\"Completed \" + ci.type.toString() + \" compaction for \" + ci.getFullPartitionName() + \" in txn \"\n-            + JavaUtils.txnIdToString(compactorTxnId) + \", marking as compacted.\");\n+            + JavaUtils.txnIdToString(compactionTxn.getTxnId()) + \", marking as compacted.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NjcwNw=="}, "originalCommit": {"oid": "70c7f5a1b8f7d0e537f30624606bf3b0db10d9d6"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjIxMTQxOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxMTozMFrOIDvpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoyMDozNVrOIDyVyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NzM3Mw==", "bodyText": "Maybe commitOrAbort? Or close? This is not always commit if I understand correctly", "url": "https://github.com/apache/hive/pull/1735#discussion_r540797373", "createdAt": "2020-12-11T09:11:30Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -579,7 +567,7 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n     } catch (Throwable t) {\n       LOG.error(\"Caught an exception in the main loop of compactor worker \" + workerName, t);\n     } finally {\n-      commitTxnIfSet(compactorTxnId);\n+      compactionTxn.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c7f5a1b8f7d0e537f30624606bf3b0db10d9d6"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0MTQxOA==", "bodyText": "If compaction failed, it should be aborted before this. CompactionTxn#commit will only commit the txn if it's still open.", "url": "https://github.com/apache/hive/pull/1735#discussion_r540841418", "createdAt": "2020-12-11T10:20:35Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -579,7 +567,7 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n     } catch (Throwable t) {\n       LOG.error(\"Caught an exception in the main loop of compactor worker \" + workerName, t);\n     } finally {\n-      commitTxnIfSet(compactorTxnId);\n+      compactionTxn.commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NzM3Mw=="}, "originalCommit": {"oid": "70c7f5a1b8f7d0e537f30624606bf3b0db10d9d6"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODM1MDIzOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzozNjo1NFrOIEC9ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzozNjo1NFrOIEC9ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExMzcwMQ==", "bodyText": "What if we extend AutoCloseable?\nThen we can use the try withresource without finally magic. And close could say - if needed commit.\nI think this is the last comment.\nHow do you like this code? Is it better?", "url": "https://github.com/apache/hive/pull/1735#discussion_r541113701", "createdAt": "2020-12-11T17:36:54Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -636,4 +621,66 @@ private static boolean isDynPartAbort(Table t, CompactionInfo ci) {\n     return t.getPartitionKeys() != null && t.getPartitionKeys().size() > 0\n         && ci.partName == null;\n   }\n+\n+  /**\n+   * Keep track of the compaction's transaction and its operations.\n+   */\n+  private class CompactionTxn {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4f7ce97df8e3a1ebc1213c03506bd07034a41c5"}, "originalPosition": 193}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 126, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}