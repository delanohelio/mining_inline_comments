{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NjIxNzYz", "number": 1693, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNDo1MlrOE8QuVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzoyNzowOFrOE9Om_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjI0MDIyOnYy", "diffSide": "LEFT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorMR.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNDo1MlrOH4R7nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNDo1MlrOH4R7nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NjA5NQ==", "bodyText": "This is so much cleaner, +100 for this :)", "url": "https://github.com/apache/hive/pull/1693#discussion_r528776095", "createdAt": "2020-11-23T15:14:52Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorMR.java", "diffHunk": "@@ -219,23 +219,6 @@ void run(HiveConf conf, String jobName, Table t, Partition p, StorageDescriptor\n            CompactionInfo ci, Worker.StatsUpdater su, IMetaStoreClient msc, Directory dir)\n       throws IOException, HiveException {\n \n-    if(conf.getBoolVar(HiveConf.ConfVars.HIVE_IN_TEST) && conf.getBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION)) {\n-      throw new RuntimeException(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION.name() + \"=true\");\n-    }\n-\n-    /*\n-     Try to run compaction via HiveQL queries.\n-     Compaction for MM tables happens here, or run compaction for Crud tables if query-based compaction is enabled.\n-     todo Find a more generic approach to collecting files in the same logical bucket to compact within the same task\n-     (currently we're using Tez split grouping).\n-     */\n-    QueryCompactor queryCompactor = QueryCompactorFactory.getQueryCompactor(t, conf, ci);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133618a458446c510047e584fd047823e620da35"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjI0ODEyOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNjozMFrOH4SAgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoyMToxMVrOH4VM6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzM0Nw==", "bodyText": "You can use lambda like this:\nugi.doAs((PrivilegedExceptionAction) () -> {\nmr.run(conf, jobName.toString(), t, fp, sd, tblValidWriteIds, fci, su, msc, dir);\nreturn null;\n});", "url": "https://github.com/apache/hive/pull/1693#discussion_r528777347", "createdAt": "2020-11-23T15:16:30Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -590,6 +587,39 @@ public Object run() throws Exception {\n     return true;\n   }\n \n+  private void failCompactionIfSetForTest() {\n+    if(conf.getBoolVar(HiveConf.ConfVars.HIVE_IN_TEST) && conf.getBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION)) {\n+      throw new RuntimeException(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION.name() + \"=true\");\n+    }\n+  }\n+\n+  private void runCompactionViaMrJob(CompactionInfo ci, Table t, Partition p, StorageDescriptor sd,\n+      ValidCompactorWriteIdList tblValidWriteIds, StringBuilder jobName, AcidUtils.Directory dir, StatsUpdater su)\n+      throws IOException, HiveException, InterruptedException {\n+    final CompactorMR mr = new CompactorMR();\n+    if (runJobAsSelf(ci.runAs)) {\n+      mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+    } else {\n+      UserGroupInformation ugi = UserGroupInformation.createProxyUser(ci.runAs,\n+          UserGroupInformation.getLoginUser());\n+      final Partition fp = p;\n+      final CompactionInfo fci = ci;\n+      ugi.doAs(new PrivilegedExceptionAction<Object>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133618a458446c510047e584fd047823e620da35"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyOTY3Mg==", "bodyText": "Noted, will do! Thanks for taking a look at this!", "url": "https://github.com/apache/hive/pull/1693#discussion_r528829672", "createdAt": "2020-11-23T16:21:11Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -590,6 +587,39 @@ public Object run() throws Exception {\n     return true;\n   }\n \n+  private void failCompactionIfSetForTest() {\n+    if(conf.getBoolVar(HiveConf.ConfVars.HIVE_IN_TEST) && conf.getBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION)) {\n+      throw new RuntimeException(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION.name() + \"=true\");\n+    }\n+  }\n+\n+  private void runCompactionViaMrJob(CompactionInfo ci, Table t, Partition p, StorageDescriptor sd,\n+      ValidCompactorWriteIdList tblValidWriteIds, StringBuilder jobName, AcidUtils.Directory dir, StatsUpdater su)\n+      throws IOException, HiveException, InterruptedException {\n+    final CompactorMR mr = new CompactorMR();\n+    if (runJobAsSelf(ci.runAs)) {\n+      mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+    } else {\n+      UserGroupInformation ugi = UserGroupInformation.createProxyUser(ci.runAs,\n+          UserGroupInformation.getLoginUser());\n+      final Partition fp = p;\n+      final CompactionInfo fci = ci;\n+      ugi.doAs(new PrivilegedExceptionAction<Object>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzM0Nw=="}, "originalCommit": {"oid": "133618a458446c510047e584fd047823e620da35"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTM5MTY1OnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowMjo0M1rOH4wNWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjoyMDoyNVrOH5w53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3MjE1NA==", "bodyText": "last nit: you don't need these final copies anymore, since they are coming as parameters ad effectively finals.", "url": "https://github.com/apache/hive/pull/1693#discussion_r529272154", "createdAt": "2020-11-24T08:02:43Z", "author": {"login": "pvargacl"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -590,6 +587,36 @@ public Object run() throws Exception {\n     return true;\n   }\n \n+  private void failCompactionIfSetForTest() {\n+    if(conf.getBoolVar(HiveConf.ConfVars.HIVE_IN_TEST) && conf.getBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION)) {\n+      throw new RuntimeException(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION.name() + \"=true\");\n+    }\n+  }\n+\n+  private void runCompactionViaMrJob(CompactionInfo ci, Table t, Partition p, StorageDescriptor sd,\n+      ValidCompactorWriteIdList tblValidWriteIds, StringBuilder jobName, AcidUtils.Directory dir, StatsUpdater su)\n+      throws IOException, HiveException, InterruptedException {\n+    final CompactorMR mr = new CompactorMR();\n+    if (runJobAsSelf(ci.runAs)) {\n+      mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+    } else {\n+      UserGroupInformation ugi = UserGroupInformation.createProxyUser(ci.runAs,\n+          UserGroupInformation.getLoginUser());\n+      final Partition fp = p;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b563c3d6a41c215460e270b744f41d6c616373d9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzMjEyNQ==", "bodyText": "Done!", "url": "https://github.com/apache/hive/pull/1693#discussion_r530332125", "createdAt": "2020-11-25T12:20:25Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -590,6 +587,36 @@ public Object run() throws Exception {\n     return true;\n   }\n \n+  private void failCompactionIfSetForTest() {\n+    if(conf.getBoolVar(HiveConf.ConfVars.HIVE_IN_TEST) && conf.getBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION)) {\n+      throw new RuntimeException(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION.name() + \"=true\");\n+    }\n+  }\n+\n+  private void runCompactionViaMrJob(CompactionInfo ci, Table t, Partition p, StorageDescriptor sd,\n+      ValidCompactorWriteIdList tblValidWriteIds, StringBuilder jobName, AcidUtils.Directory dir, StatsUpdater su)\n+      throws IOException, HiveException, InterruptedException {\n+    final CompactorMR mr = new CompactorMR();\n+    if (runJobAsSelf(ci.runAs)) {\n+      mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+    } else {\n+      UserGroupInformation ugi = UserGroupInformation.createProxyUser(ci.runAs,\n+          UserGroupInformation.getLoginUser());\n+      final Partition fp = p;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3MjE1NA=="}, "originalCommit": {"oid": "b563c3d6a41c215460e270b744f41d6c616373d9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjM3OTUxOnYy", "diffSide": "RIGHT", "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzoyNzowOFrOH5zYJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxODoyNVrOH54IjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjY0Ng==", "bodyText": "Is this test code?\nCould we find another way to test this?", "url": "https://github.com/apache/hive/pull/1693#discussion_r530372646", "createdAt": "2020-11-25T13:27:08Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -531,29 +531,26 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n       final StatsUpdater su = computeStats ? StatsUpdater.init(ci, msc.findColumnsWithStats(\n           CompactionInfo.compactionInfoToStruct(ci)), conf,\n           runJobAsSelf(ci.runAs) ? ci.runAs : t.getOwner()) : null;\n-      final CompactorMR mr = new CompactorMR();\n+\n       try {\n-        if (runJobAsSelf(ci.runAs)) {\n-          mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+        failCompactionIfSetForTest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20515a959e8d444190869e2c8ed4f143e793ba4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NTgyMw==", "bodyText": "Yes, it's test code and it used to be in CompactorMr#run, I just refactored it here.\nGreat question, shall I raise a jira for it?", "url": "https://github.com/apache/hive/pull/1693#discussion_r530375823", "createdAt": "2020-11-25T13:32:09Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -531,29 +531,26 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n       final StatsUpdater su = computeStats ? StatsUpdater.init(ci, msc.findColumnsWithStats(\n           CompactionInfo.compactionInfoToStruct(ci)), conf,\n           runJobAsSelf(ci.runAs) ? ci.runAs : t.getOwner()) : null;\n-      final CompactorMR mr = new CompactorMR();\n+\n       try {\n-        if (runJobAsSelf(ci.runAs)) {\n-          mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+        failCompactionIfSetForTest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjY0Ng=="}, "originalCommit": {"oid": "20515a959e8d444190869e2c8ed4f143e793ba4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTU2Mg==", "bodyText": "Yes, please raise a jira!", "url": "https://github.com/apache/hive/pull/1693#discussion_r530421562", "createdAt": "2020-11-25T14:38:56Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -531,29 +531,26 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n       final StatsUpdater su = computeStats ? StatsUpdater.init(ci, msc.findColumnsWithStats(\n           CompactionInfo.compactionInfoToStruct(ci)), conf,\n           runJobAsSelf(ci.runAs) ? ci.runAs : t.getOwner()) : null;\n-      final CompactorMR mr = new CompactorMR();\n+\n       try {\n-        if (runJobAsSelf(ci.runAs)) {\n-          mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+        failCompactionIfSetForTest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjY0Ng=="}, "originalCommit": {"oid": "20515a959e8d444190869e2c8ed4f143e793ba4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzMjU1Mg==", "bodyText": "Done: HIVE-24429", "url": "https://github.com/apache/hive/pull/1693#discussion_r530432552", "createdAt": "2020-11-25T14:54:04Z", "author": {"login": "klcopp"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -531,29 +531,26 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n       final StatsUpdater su = computeStats ? StatsUpdater.init(ci, msc.findColumnsWithStats(\n           CompactionInfo.compactionInfoToStruct(ci)), conf,\n           runJobAsSelf(ci.runAs) ? ci.runAs : t.getOwner()) : null;\n-      final CompactorMR mr = new CompactorMR();\n+\n       try {\n-        if (runJobAsSelf(ci.runAs)) {\n-          mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+        failCompactionIfSetForTest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjY0Ng=="}, "originalCommit": {"oid": "20515a959e8d444190869e2c8ed4f143e793ba4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1MDU3Mw==", "bodyText": "Thanks @klcopp!", "url": "https://github.com/apache/hive/pull/1693#discussion_r530450573", "createdAt": "2020-11-25T15:18:25Z", "author": {"login": "pvary"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java", "diffHunk": "@@ -531,29 +531,26 @@ protected Boolean findNextCompactionAndExecute(boolean computeStats) throws Inte\n       final StatsUpdater su = computeStats ? StatsUpdater.init(ci, msc.findColumnsWithStats(\n           CompactionInfo.compactionInfoToStruct(ci)), conf,\n           runJobAsSelf(ci.runAs) ? ci.runAs : t.getOwner()) : null;\n-      final CompactorMR mr = new CompactorMR();\n+\n       try {\n-        if (runJobAsSelf(ci.runAs)) {\n-          mr.run(conf, jobName.toString(), t, p, sd, tblValidWriteIds, ci, su, msc, dir);\n+        failCompactionIfSetForTest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjY0Ng=="}, "originalCommit": {"oid": "20515a959e8d444190869e2c8ed4f143e793ba4c"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 262, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}