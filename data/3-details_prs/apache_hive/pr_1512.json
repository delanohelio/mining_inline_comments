{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTc5NjI4", "number": 1512, "title": "HIVE-24184: Re-order methods in Driver (Miklos Gergely)", "bodyText": "What changes were proposed in this pull request?\nDriver is still a huge class, with a lot of methods. They are not representing the order of the process done by the Driver (compilation, execution, result providing, closing). Also the constructors are not at the beginning of the class. All of these make the class harder to read. By re-ordering them it would be easier.\nWhy are the changes needed?\nTo make the Driver class cleaner, thus easier to read/understand.\nDoes this PR introduce any user-facing change?\nNo.\nHow was this patch tested?\nAll the tests are still passing.", "createdAt": "2020-09-21T00:08:35Z", "url": "https://github.com/apache/hive/pull/1512", "merged": true, "mergeCommit": {"oid": "0303da0f5edc01a7f5403f2efec67c5aae4fd2e5"}, "closed": true, "closedAt": "2020-10-15T19:21:29Z", "author": {"login": "miklosgergely"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSJ8eEAFqTUwNzUzNDI2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSKOTqgFqTUwNzU1NTU0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NTM0MjYw", "url": "https://github.com/apache/hive/pull/1512#pullrequestreview-507534260", "createdAt": "2020-10-13T15:01:56Z", "commit": {"oid": "9045167c38e3df99ab6f3aee1fd38c31b39d8843"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTowMTo1NlrOHgrS0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTowMTo1NlrOHgrS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNTgwOA==", "bodyText": "Please change order of @param to match arguments and also add one for 'command' argument.", "url": "https://github.com/apache/hive/pull/1512#discussion_r504025808", "createdAt": "2020-10-13T15:01:56Z", "author": {"login": "belugabehr"}, "path": "ql/src/java/org/apache/hadoop/hive/ql/Driver.java", "diffHunk": "@@ -588,15 +353,280 @@ private void runInternal(String command, boolean alreadyCompiled) throws Command\n     SessionState.getPerfLogger().cleanupPerfLogMetrics();\n   }\n \n-  @Override\n-  public boolean isFetchingTable() {\n-    return driverContext.getFetchTask() != null;\n+  public void lockAndRespond() throws CommandProcessorException {\n+    // Assumes the query has already been compiled\n+    if (driverContext.getPlan() == null) {\n+      throw new IllegalStateException(\n+          \"No previously compiled query for driver - queryId=\" + driverContext.getQueryState().getQueryId());\n+    }\n+\n+    try {\n+      driverTxnHandler.acquireLocksIfNeeded();\n+    } catch (CommandProcessorException cpe) {\n+      driverTxnHandler.rollback(cpe);\n+      throw cpe;\n+    }\n   }\n \n-  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n   @Override\n-  public boolean getResults(List res) throws IOException {\n-    if (driverState.isDestroyed() || driverState.isClosed()) {\n+  public CommandProcessorResponse compileAndRespond(String command) throws CommandProcessorException {\n+    return compileAndRespond(command, false);\n+  }\n+\n+  public CommandProcessorResponse compileAndRespond(String command, boolean cleanupTxnList)\n+      throws CommandProcessorException {\n+    try {\n+      compileInternal(command, false);\n+      return new CommandProcessorResponse(getSchema(), null);\n+    } catch (CommandProcessorException cpe) {\n+      throw cpe;\n+    } finally {\n+      if (cleanupTxnList) {\n+        // Valid txn list might be generated for a query compiled using this command, thus we need to reset it\n+        driverTxnHandler.cleanupTxnList();\n+      }\n+    }\n+  }\n+\n+  private void compileInternal(String command, boolean deferClose) throws CommandProcessorException {\n+    Metrics metrics = MetricsFactory.getInstance();\n+    if (metrics != null) {\n+      metrics.incrementCounter(MetricsConstant.WAITING_COMPILE_OPS, 1);\n+    }\n+\n+    PerfLogger perfLogger = SessionState.getPerfLogger(true);\n+    perfLogger.perfLogBegin(CLASS_NAME, PerfLogger.WAIT_COMPILE);\n+\n+    try (CompileLock compileLock = CompileLockFactory.newInstance(driverContext.getConf(), command)) {\n+      boolean success = compileLock.tryAcquire();\n+\n+      perfLogger.perfLogEnd(CLASS_NAME, PerfLogger.WAIT_COMPILE);\n+\n+      if (metrics != null) {\n+        metrics.decrementCounter(MetricsConstant.WAITING_COMPILE_OPS, 1);\n+      }\n+      if (!success) {\n+        String errorMessage = ErrorMsg.COMPILE_LOCK_TIMED_OUT.getErrorCodedMsg();\n+        throw DriverUtils.createProcessorException(driverContext, ErrorMsg.COMPILE_LOCK_TIMED_OUT.getErrorCode(),\n+            errorMessage, null, null);\n+      }\n+\n+      try {\n+        compile(command, true, deferClose);\n+      } catch (CommandProcessorException cpe) {\n+        try {\n+          driverTxnHandler.endTransactionAndCleanup(false);\n+        } catch (LockException e) {\n+          LOG.warn(\"Exception in releasing locks. \" + StringUtils.stringifyException(e));\n+        }\n+        throw cpe;\n+      }\n+    }\n+    //Save compile-time PerfLogging for WebUI.\n+    //Execution-time Perf logs are done by either another thread's PerfLogger\n+    //or a reset PerfLogger.\n+    driverContext.getQueryDisplay().setPerfLogStarts(QueryDisplay.Phase.COMPILATION, perfLogger.getStartTimes());\n+    driverContext.getQueryDisplay().setPerfLogEnds(QueryDisplay.Phase.COMPILATION, perfLogger.getEndTimes());\n+  }\n+\n+  /**\n+   * Compiles a new HQL command, but potentially resets taskID counter. Not resetting task counter is useful for\n+   * generating re-entrant QL queries.\n+   *\n+   * @param command  The HiveQL query to compile\n+   * @param resetTaskIds Resets taskID counter if true.\n+   * @return 0 for ok\n+   */\n+  public int compile(String command, boolean resetTaskIds) {\n+    try {\n+      compile(command, resetTaskIds, false);\n+      return 0;\n+    } catch (CommandProcessorException cpr) {\n+      return cpr.getErrorCode();\n+    }\n+  }\n+\n+  /**\n+   * Compiles an HQL command, creates an execution plan for it.\n+   *\n+   * @param deferClose indicates if the close/destroy should be deferred when the process has been interrupted, it\n+   *        should be set to true if the compile is called within another method like runInternal, which defers the\n+   *        close to the called in that method.\n+   * @param resetTaskIds Resets taskID counter if true.\n+   */\n+  @VisibleForTesting\n+  public void compile(String command, boolean resetTaskIds, boolean deferClose) throws CommandProcessorException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9045167c38e3df99ab6f3aee1fd38c31b39d8843"}, "originalPosition": 388}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f0a429739076287018e9f0b1c1244bc8f1d891", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/02f0a429739076287018e9f0b1c1244bc8f1d891", "committedDate": "2020-10-13T15:17:42Z", "message": "HIVE-24184: Re-order methods in Driver (Miklos Gergely)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9045167c38e3df99ab6f3aee1fd38c31b39d8843", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/9045167c38e3df99ab6f3aee1fd38c31b39d8843", "committedDate": "2020-09-21T00:06:25Z", "message": "HIVE-24184: Re-order methods in Driver (Miklos Gergely)"}, "afterCommit": {"oid": "02f0a429739076287018e9f0b1c1244bc8f1d891", "author": {"user": {"login": "miklosgergely", "name": "Miklos Gergely"}}, "url": "https://github.com/apache/hive/commit/02f0a429739076287018e9f0b1c1244bc8f1d891", "committedDate": "2020-10-13T15:17:42Z", "message": "HIVE-24184: Re-order methods in Driver (Miklos Gergely)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NTU1NTQ1", "url": "https://github.com/apache/hive/pull/1512#pullrequestreview-507555545", "createdAt": "2020-10-13T15:22:33Z", "commit": {"oid": "02f0a429739076287018e9f0b1c1244bc8f1d891"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3085, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}