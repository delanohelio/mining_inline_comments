{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMTI4NDk0", "number": 196, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowMjo1MlrOEauL5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjo1ODozMlrOEkZL2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDU1MTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/KNNConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowMjo1MlrOHEU0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTozMjozMFrOHKJ9qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5NzQ2MQ==", "bodyText": "If we do not support Cosine Similarity yet, remove from this PR", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474297461", "createdAt": "2020-08-20T22:02:52Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/KNNConstants.java", "diffHunk": "@@ -21,4 +21,6 @@\n     public static final String HNSW_ALGO_EF_CONSTRUCTION = \"efConstruction\";\n     public static final String HNSW_ALGO_EF_SEARCH = \"efSearch\";\n     public static final String HNSW_ALGO_INDEX_THREAD_QTY = \"indexThreadQty\";\n+    public static final String L2 = \"l2\";\n+    public static final String COSINESIMIL = \"cosinesimil\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxMTA1MQ==", "bodyText": "Was adding incrementally in the PR should be available now.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480411051", "createdAt": "2020-08-31T21:32:30Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/KNNConstants.java", "diffHunk": "@@ -21,4 +21,6 @@\n     public static final String HNSW_ALGO_EF_CONSTRUCTION = \"efConstruction\";\n     public static final String HNSW_ALGO_EF_SEARCH = \"efSearch\";\n     public static final String HNSW_ALGO_INDEX_THREAD_QTY = \"indexThreadQty\";\n+    public static final String L2 = \"l2\";\n+    public static final String COSINESIMIL = \"cosinesimil\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5NzQ2MQ=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDU1NjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowNDo1NVrOHEU3gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTozODo0M1rOHKKJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5ODI0MQ==", "bodyText": "Where do we check that the input vector has the correct dimensions?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474298241", "createdAt": "2020-08-20T22:04:55Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNDE0NA==", "bodyText": "Added part of the execute() function", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480414144", "createdAt": "2020-08-31T21:38:43Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5ODI0MQ=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDU2MjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowNjo1MVrOHEU6pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo0MDowNVrOHKKL8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5OTA0NQ==", "bodyText": "In what case does this happen?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474299045", "createdAt": "2020-08-20T22:06:51Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNDcwNA==", "bodyText": "If for some reason, some documents do not have vector field then we need to handle this case gracefully.\nI am doing some more tests around this.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480414704", "createdAt": "2020-08-31T21:40:05Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5OTA0NQ=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODk3OTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxNToyM1rOHE_PYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo0MTowMVrOHKKNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MjQ4Mw==", "bodyText": "minor. typically java developers do constant::equals to avoid npe, like line 29.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474992483", "createdAt": "2020-08-21T22:15:23Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    private static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (context.equals(ScoreScript.CONTEXT) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNTA4Mg==", "bodyText": "Fixed.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480415082", "createdAt": "2020-08-31T21:41:01Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    private static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (context.equals(ScoreScript.CONTEXT) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MjQ4Mw=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODk5NjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoyNTowOFrOHE_ZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo0MToxNVrOHKKNvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NTAxNg==", "bodyText": "question. why is the type not float?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474995016", "createdAt": "2020-08-21T22:25:08Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNTE2NA==", "bodyText": "Should be float. Corrected. thanks", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480415164", "createdAt": "2020-08-31T21:41:15Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NTAxNg=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA0OTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjo1NzowOVrOHE_31Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDo0NTo1MlrOHMF8IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwMjgzNw==", "bodyText": "this implementation might not be the most efficient due to type casting and power.\nfloat diff = queryVector[i] - inputVector[i];\nsquaredDistance += diff * diff;\n\nshould be 2x faster\nfloat diff = queryVector[i] - inputVector[i];\nsquaredDistance = Math.fma(diff, diff, squaredDistance);\n\nshould also be fast but not as much as the one above", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r475002837", "createdAt": "2020-08-21T22:57:09Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNTI0NA==", "bodyText": "Fixed. thanks", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480415244", "createdAt": "2020-08-31T21:41:27Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwMjgzNw=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzOTI4NA==", "bodyText": "Just out of curiosity, did you performance test the Math.fma computation as compared to the += diff * diff on an Intel CPU? This article implies that fma could be more performant as it can use a special intel instruction set: https://software.seek.intel.com/boosting-java-performance", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r481639284", "createdAt": "2020-09-02T04:03:02Z", "author": {"login": "NelsonBurton"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwMjgzNw=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0MjI3Mw==", "bodyText": "great ask!\nI did test Math.fma and the performance appeared consistently slower than += on intel cpu with avx/avx2. It could be the overhead from underlying extra if, assert, double casting. More test results are always better.\nAlso note that on earlier cpu models, the fma implementation might be even worse. see https://stackoverflow.com/questions/44808081/what-are-the-accuracy-performance-benefits-of-using-math-fma", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r482442273", "createdAt": "2020-09-02T20:45:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwMjgzNw=="}, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA2MDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzowNToyNVrOHE_-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzowNToyNVrOHE_-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNDYxNg==", "bodyText": "question. should this case error out?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r475004616", "createdAt": "2020-08-21T23:05:25Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = l2Squared(this.inputVector, doc_vector);\n+                score = 1/(1 + score);\n+            }\n+            // Other spaces will be followed up in next pr\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e); // again - Failing in order not to hide potential bugs\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public VectorScoreScript(Map<String, Object> params, String field, String similaritySpace,\n+                             SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query inputVector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            inputVector = new float[tmp.size()];\n+            for (int i = 0; i < inputVector.length; i++) {\n+                inputVector[i] = tmp.get(i).floatValue();\n+            }\n+        } else {\n+            inputVector = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkxODIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxNzowMFrOHKJikg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjozMzozNVrOHNxzKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDExNA==", "bodyText": "since input and outputs are all float, why not using float?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480404114", "createdAt": "2020-08-31T21:17:00Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNjM4NA==", "bodyText": "Math.sqrt() function requires double. So doing all the manipulations in double and type cast to float later", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480416384", "createdAt": "2020-08-31T21:44:19Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDExNA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2Njk5MA==", "bodyText": "note that every casting, even implicit, takes away resource and gives no gains", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480466990", "createdAt": "2020-08-31T23:17:19Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDExNA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzMDQ1Mw==", "bodyText": "Just to add on, I ran some benchmarking on a single i3.4xl of a tight dot product loop, and found the casting back and forth to double slowed down the calculation measurably.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r481630453", "createdAt": "2020-09-02T03:53:50Z", "author": {"login": "NelsonBurton"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDExNA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwOTQ1MQ==", "bodyText": "Good point. Fixed", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r484209451", "createdAt": "2020-09-07T06:33:35Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDExNA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkyMDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxODowNVrOHKJkTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjozMzo1NFrOHNxzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDU1OA==", "bodyText": "this check should preferably be avoided for every input vector", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480404558", "createdAt": "2020-08-31T21:18:05Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNzgwMQ==", "bodyText": "This case would not occur from Script. Since this function is part of KNNScoringUtil Util class, wanted to add this check to ensure consumers of this function take care of this value.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480417801", "createdAt": "2020-08-31T21:47:43Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDU1OA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2NzQ0NA==", "bodyText": "can this check be moved to be done exactly once at the factory when the script is created?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480467444", "createdAt": "2020-08-31T23:18:00Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDU1OA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwOTU4Mg==", "bodyText": "Removed this check as this case does not occur", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r484209582", "createdAt": "2020-09-07T06:33:54Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDU1OA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkzMjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToyMjoxNVrOHKJrNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo1NjoxMFrOHKKl6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjMyNg==", "bodyText": "this check can be saved for most vectors by try-catching the unlikely case from the division below", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480406326", "createdAt": "2020-08-31T21:22:15Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        // Divide by zero check\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyMTM1Mw==", "bodyText": "Makes sense. Fixed. Thanks", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480421353", "createdAt": "2020-08-31T21:56:10Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        // Divide by zero check\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjMyNg=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkzNjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToyMzozOVrOHKJtkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzoxOToxM1rOHKNdHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjkyOA==", "bodyText": "the return type should be float", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480406928", "createdAt": "2020-08-31T21:23:39Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        // Divide by zero check\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;\n+        double normQueryVector = 0.0f;\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            primitiveVector = new float[tmp.size()];\n+            for (int i = 0; i < primitiveVector.length; i++) {\n+                primitiveVector[i] = tmp.get(i).floatValue();\n+            }\n+        }\n+        return primitiveVector;\n+    }\n+\n+    public static double getVectorMagnitudeSquared(float[] inputVector) {\n+        if (null == inputVector) {\n+            throw new IllegalStateException(\"vector magnitude cannot be evaluated as it is null\");\n+        }\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        return (float) normInputVector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyNDAzMQ==", "bodyText": "since this value would be used in Math.sqrt function, wanted to keep it as double.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480424031", "createdAt": "2020-08-31T22:03:03Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        // Divide by zero check\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;\n+        double normQueryVector = 0.0f;\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            primitiveVector = new float[tmp.size()];\n+            for (int i = 0; i < primitiveVector.length; i++) {\n+                primitiveVector[i] = tmp.get(i).floatValue();\n+            }\n+        }\n+        return primitiveVector;\n+    }\n+\n+    public static double getVectorMagnitudeSquared(float[] inputVector) {\n+        if (null == inputVector) {\n+            throw new IllegalStateException(\"vector magnitude cannot be evaluated as it is null\");\n+        }\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        return (float) normInputVector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjkyOA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2ODI1Mw==", "bodyText": "if the return must be double, then the casting to float at line is unnecessary", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480468253", "createdAt": "2020-08-31T23:19:13Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        // Divide by zero check\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;\n+        double normQueryVector = 0.0f;\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            primitiveVector = new float[tmp.size()];\n+            for (int i = 0; i < primitiveVector.length; i++) {\n+                primitiveVector[i] = tmp.get(i).floatValue();\n+            }\n+        }\n+        return primitiveVector;\n+    }\n+\n+    public static double getVectorMagnitudeSquared(float[] inputVector) {\n+        if (null == inputVector) {\n+            throw new IllegalStateException(\"vector magnitude cannot be evaluated as it is null\");\n+        }\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        return (float) normInputVector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjkyOA=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzk0MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToyNToxOVrOHKJwbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjowMzoyMVrOHKKw9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNzY2Mg==", "bodyText": "this method is not used", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480407662", "createdAt": "2020-08-31T21:25:19Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private double queryVectorSquaredMagnitude = -1;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyNDE4MA==", "bodyText": "Correct. Removed.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480424180", "createdAt": "2020-08-31T22:03:21Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private double queryVectorSquaredMagnitude = -1;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNzY2Mg=="}, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTUwNzg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1NToxNFrOHLUepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjozNToxM1rOHNx1oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzMTkwOQ==", "bodyText": "Recomputing the query vector of every invocation will add unnecessary computation, as it can be computed once and passed it, like in the function above", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r481631909", "createdAt": "2020-09-02T03:55:14Z", "author": {"login": "NelsonBurton"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;\n+        double normQueryVector = 0.0f;\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311b2a2a57d17dfe1f02f4385c74ba1b06335c83"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIxMDA4MQ==", "bodyText": "I added two versions of calculating cosine similarity score. This is unoptimized version of cosine similarity function which would be exposed to customer to call the function directly.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r484210081", "createdAt": "2020-09-07T06:35:13Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;\n+        double normQueryVector = 0.0f;\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzMTkwOQ=="}, "originalCommit": {"oid": "311b2a2a57d17dfe1f02f4385c74ba1b06335c83"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA0MTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzowNDo1MlrOHOw2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozNjowMVrOHQpnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjQ2Ng==", "bodyText": "even this method is not used by the plugin, the implementation can be similar to the optimized version. unnecessary casting from float to double can be removed.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r485242466", "createdAt": "2020-09-08T23:04:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMTA5NA==", "bodyText": "This method would be used in future part of #213.  Fixed the typecasting issue.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r487221094", "createdAt": "2020-09-11T18:36:01Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjQ2Ng=="}, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA2NjY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxNjozOVrOHOxFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozODo1MFrOHQpseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjIwOA==", "bodyText": "minor. an error message is clearer.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r485246208", "createdAt": "2020-09-08T23:16:39Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public KNNVectorScoreScript(Map<String, Object> params, String field, float[] queryVector, float queryVectorSquaredMagnitude,\n+                                String similaritySpace, SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query vector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        this.queryVector = queryVector;\n+        this.queryVectorSquaredMagnitude = queryVectorSquaredMagnitude;\n+        try {\n+            this.binaryDocValuesReader = leafContext.reader().getBinaryDocValues(field);\n+            if(this.binaryDocValuesReader == null) {\n+                throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMjM5NA==", "bodyText": "Fixed. thanks", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r487222394", "createdAt": "2020-09-11T18:38:50Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public KNNVectorScoreScript(Map<String, Object> params, String field, float[] queryVector, float queryVectorSquaredMagnitude,\n+                                String similaritySpace, SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query vector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        this.queryVector = queryVector;\n+        this.queryVectorSquaredMagnitude = queryVectorSquaredMagnitude;\n+        try {\n+            this.binaryDocValuesReader = leafContext.reader().getBinaryDocValues(field);\n+            if(this.binaryDocValuesReader == null) {\n+                throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjIwOA=="}, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA3MzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxOTo1MlrOHOxI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDoxMDo1MFrOHRk3nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NzE5Mw==", "bodyText": "minor. space can also use validation.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r485247193", "createdAt": "2020-09-08T23:19:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public KNNVectorScoreScript(Map<String, Object> params, String field, float[] queryVector, float queryVectorSquaredMagnitude,\n+                                String similaritySpace, SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query vector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        this.queryVector = queryVector;\n+        this.queryVectorSquaredMagnitude = queryVectorSquaredMagnitude;\n+        try {\n+            this.binaryDocValuesReader = leafContext.reader().getBinaryDocValues(field);\n+            if(this.binaryDocValuesReader == null) {\n+                throw new IllegalStateException();\n+            }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Binary Doc values not enabled for the field \" + field\n+                    + \" Please ensure the field type is knn_vector in mappings for this field\");\n+        }\n+    }\n+\n+    public static class VectorScoreScriptFactory implements ScoreScript.LeafFactory {\n+        private final Map<String, Object> params;\n+        private final SearchLookup lookup;\n+        private final String similaritySpace;\n+        private final String field;\n+        private final float[] qVector;\n+        private float qVectorSquaredMagnitude; // Used for cosine optimization\n+\n+        public VectorScoreScriptFactory(Map<String, Object> params, SearchLookup lookup) {\n+            this.params = params;\n+            this.lookup = lookup;\n+            validateParams(params);\n+\n+            // initialize\n+            this.field = params.get(\"field\").toString();\n+            final Object space = params.get(\"space\");\n+            this.similaritySpace = space != null? (String)space: KNNConstants.L2;\n+            this.qVector = KNNScoringUtil.convertVectorToPrimitive(params.get(\"vector\"));\n+            // Optimization for cosinesimil\n+            if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // calculate the magnitude\n+                qVectorSquaredMagnitude = KNNScoringUtil.getVectorMagnitudeSquared(qVector);\n+            }\n+        }\n+\n+        private void validateParams(Map<String, Object> params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5MTkwMw==", "bodyText": "Added Validation for space.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488191903", "createdAt": "2020-09-14T20:10:50Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public KNNVectorScoreScript(Map<String, Object> params, String field, float[] queryVector, float queryVectorSquaredMagnitude,\n+                                String similaritySpace, SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query vector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        this.queryVector = queryVector;\n+        this.queryVectorSquaredMagnitude = queryVectorSquaredMagnitude;\n+        try {\n+            this.binaryDocValuesReader = leafContext.reader().getBinaryDocValues(field);\n+            if(this.binaryDocValuesReader == null) {\n+                throw new IllegalStateException();\n+            }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Binary Doc values not enabled for the field \" + field\n+                    + \" Please ensure the field type is knn_vector in mappings for this field\");\n+        }\n+    }\n+\n+    public static class VectorScoreScriptFactory implements ScoreScript.LeafFactory {\n+        private final Map<String, Object> params;\n+        private final SearchLookup lookup;\n+        private final String similaritySpace;\n+        private final String field;\n+        private final float[] qVector;\n+        private float qVectorSquaredMagnitude; // Used for cosine optimization\n+\n+        public VectorScoreScriptFactory(Map<String, Object> params, SearchLookup lookup) {\n+            this.params = params;\n+            this.lookup = lookup;\n+            validateParams(params);\n+\n+            // initialize\n+            this.field = params.get(\"field\").toString();\n+            final Object space = params.get(\"space\");\n+            this.similaritySpace = space != null? (String)space: KNNConstants.L2;\n+            this.qVector = KNNScoringUtil.convertVectorToPrimitive(params.get(\"vector\"));\n+            // Optimization for cosinesimil\n+            if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // calculate the magnitude\n+                qVectorSquaredMagnitude = KNNScoringUtil.getVectorMagnitudeSquared(qVector);\n+            }\n+        }\n+\n+        private void validateParams(Map<String, Object> params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NzE5Mw=="}, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODUwMDMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1MDozNlrOHSK6-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTowMDozNlrOHS_ZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNTM1NA==", "bodyText": "How about simplify as if (!ScoreScript.CONTEXT.equals(context)) ?\nIs it possible that KNN script will have invalid context ? I see we have validated the script source in line 29. We need line 25 as the script context is possibly wrong?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488815354", "createdAt": "2020-09-15T16:50:36Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    public static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (ScoreScript.CONTEXT.equals(context) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY3NTA0Nw==", "bodyText": "As mentioned in the log message KNN Vector scoring scripts cannot be used for context .\nWill fix if (!ScoreScript.CONTEXT.equals(context))", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489675047", "createdAt": "2020-09-16T19:00:36Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    public static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (ScoreScript.CONTEXT.equals(context) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNTM1NA=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODUxODg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1NTozOFrOHSLG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo1NzoyNVrOHS_JIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODM5MQ==", "bodyText": "Why return null here? We don't need context for KNN score script?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488818391", "createdAt": "2020-09-15T16:55:38Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    public static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (ScoreScript.CONTEXT.equals(context) == false) {\n+            throw new IllegalArgumentException(getType() + \" KNN Vector scoring scripts cannot be used for context [\" + context.name + \"]\");\n+        }\n+        // we use the script \"source\" as the script identifier\n+        if (!SCRIPT_SOURCE.equals(code)) {\n+            throw new IllegalArgumentException(\"Unknown script name \" + code);\n+        }\n+        ScoreScript.Factory factory = KNNVectorScoreScript.VectorScoreScriptFactory::new;\n+        return context.factoryClazz.cast(factory);\n+    }\n+\n+    @Override\n+    public Set<ScriptContext<?>> getSupportedContexts() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY3MDk0Ng==", "bodyText": "There is no context for KNN score script.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489670946", "createdAt": "2020-09-16T18:57:25Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    public static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (ScoreScript.CONTEXT.equals(context) == false) {\n+            throw new IllegalArgumentException(getType() + \" KNN Vector scoring scripts cannot be used for context [\" + context.name + \"]\");\n+        }\n+        // we use the script \"source\" as the script identifier\n+        if (!SCRIPT_SOURCE.equals(code)) {\n+            throw new IllegalArgumentException(\"Unknown script name \" + code);\n+        }\n+        ScoreScript.Factory factory = KNNVectorScoreScript.VectorScoreScriptFactory::new;\n+        return context.factoryClazz.cast(factory);\n+    }\n+\n+    @Override\n+    public Set<ScriptContext<?>> getSupportedContexts() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODM5MQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODU2MTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowNjo1OVrOHSLhjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1OToxMlrOHUYkDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTIyOA==", "bodyText": "How about we use if/else to make code cleaner like the method below line47?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488825228", "createdAt": "2020-09-15T17:06:59Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2NjUwNQ==", "bodyText": "We would like to avoid additional checks where ever possible to improve performance. So try catch takes care of edge cases.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489666505", "createdAt": "2020-09-16T18:53:26Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTIyOA=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAwNTI5NQ==", "bodyText": "Java will throw ArithmeticException for integer division by zero, but not throw ArithmeticException for float division by zero, check this stack overflow question, will return Infinity for float/0,  so we can't catch ArithmeticException and return Float.MIN_VALUE", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r490005295", "createdAt": "2020-09-17T06:40:41Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTIyOA=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyOTc1OQ==", "bodyText": "Good catch. Able to catch this in unit tests. Added if condition to check for division by zero issue. Adding if check could have minor performance impact. Will keep an eye in performance tests", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r491129759", "createdAt": "2020-09-18T18:45:36Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTIyOA=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNjAxNA==", "bodyText": "Thanks, looks good to me.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r491136014", "createdAt": "2020-09-18T18:59:12Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTIyOA=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODU3MTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowOTo1NlrOHSLoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozNToxMFrOHT_4gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNjkwNQ==", "bodyText": "Seems this method is mostly the same with the method below. Can we unify them by abstracting the common part?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488826905", "createdAt": "2020-09-15T17:09:56Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2NzA5MQ==", "bodyText": "I think it makes sense to keep it this way.  Clean to understand.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489667091", "createdAt": "2020-09-16T18:54:01Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNjkwNQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxODE5NQ==", "bodyText": "If we need to make some change in future, we may need to change both methods. But seems it's not high possible that we will change these two methods as they contain just simple calculation. I'm ok to keep it as is.\nHow about we add some comments to these methods to explain differences and the best use cases ? I think it will help others to understand.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r490018195", "createdAt": "2020-09-17T07:08:28Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNjkwNQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMTY0OA==", "bodyText": "Sure added comments", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r490731648", "createdAt": "2020-09-18T06:35:10Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNjkwNQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODU5NjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjo1NlrOHSL3WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo0MzowM1rOHS-OuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDgwOA==", "bodyText": "Is it possible that tmp.get(i) is null?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488830808", "createdAt": "2020-09-15T17:16:56Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        float dotProduct = 0.0f;\n+        float normQueryVector = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            primitiveVector = new float[tmp.size()];\n+            for (int i = 0; i < primitiveVector.length; i++) {\n+                primitiveVector[i] = tmp.get(i).floatValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY1NTk5Mg==", "bodyText": "No. It cannot be null.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489655992", "createdAt": "2020-09-16T18:43:03Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        float dotProduct = 0.0f;\n+        float normQueryVector = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            primitiveVector = new float[tmp.size()];\n+            for (int i = 0; i < primitiveVector.length; i++) {\n+                primitiveVector[i] = tmp.get(i).floatValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDgwOA=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODYyNjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyMzoyOVrOHSMMPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo1MDozNlrOHS-sjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNjE1Nw==", "bodyText": "Why use float while this function returns double?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488836157", "createdAt": "2020-09-15T17:23:29Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2MzYzMQ==", "bodyText": "All the scores are computed in Float. To keep it consistent returning Float.MIN.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489663631", "createdAt": "2020-09-16T18:50:36Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNjE1Nw=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODgyMDAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjo1OFrOHSOKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDoyNjoyNVrOHTC_EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODQzNQ==", "bodyText": "From https://en.wikipedia.org/wiki/Cosine_similarity,  seems others generally use 1 - cosine similarity, any special logic here we use 1 + cosine similarity ?\nIf just make the score positive, we can use 1 - cosine similarity as well.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488868435", "createdAt": "2020-09-15T18:12:58Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2NDQ5Mw==", "bodyText": "We cannot use 1 - cosine similarity. This would invert the scores and return wrong results.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489664493", "createdAt": "2020-09-16T18:51:31Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODQzNQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMzExNg==", "bodyText": "Make sense. So the greater score means it's more relevant?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489703116", "createdAt": "2020-09-16T19:26:32Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODQzNQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzkwNA==", "bodyText": "Correct.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r489733904", "createdAt": "2020-09-16T20:26:25Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODQzNQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTk2ODI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjo1ODozMlrOHTUC5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyOTowN1rOHT_vaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxMzQxNQ==", "bodyText": "Minor, missing space after if, suggest to format the code.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r490013415", "createdAt": "2020-09-17T06:58:32Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        float dotProduct = 0.0f;\n+        float normQueryVector = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyOTMyMA==", "bodyText": "Fixed.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r490729320", "createdAt": "2020-09-18T06:29:07Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        float dotProduct = 0.0f;\n+        float normQueryVector = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxMzQxNQ=="}, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2661, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}