{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDIyMzM3", "number": 36, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDozMzo1NVrODdHnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDoxMzowOVrODdLCag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODU5OTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDozMzo1NVrOFliiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoxODowNVrOFllb6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNzQ1Ng==", "bodyText": "Minor: java doc for class", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374907456", "createdAt": "2020-02-04T20:33:55Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);\n+\n+        // TODO verify that this is safe - ideally we'd explicitly ensure that the FileWatcher is only checked\n+        // after the guava cache has finished loading the key to avoid a race condition where the watcher\n+        // causes us to invalidate an entry before the key has been fully loaded.\n+        final WatcherHandle<FileWatcher> watcherHandle = resourceWatcherService.add(fileWatcher);\n+\n+        return new KNNIndexCacheEntry(knnIndex, watcherHandle);\n     }\n-}\n \n+    private static class KNNIndexCacheEntry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NDk4Nw==", "bodyText": "Will add", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374954987", "createdAt": "2020-02-04T22:18:05Z", "author": {"login": "jschmitz28"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);\n+\n+        // TODO verify that this is safe - ideally we'd explicitly ensure that the FileWatcher is only checked\n+        // after the guava cache has finished loading the key to avoid a race condition where the watcher\n+        // causes us to invalidate an entry before the key has been fully loaded.\n+        final WatcherHandle<FileWatcher> watcherHandle = resourceWatcherService.add(fileWatcher);\n+\n+        return new KNNIndexCacheEntry(knnIndex, watcherHandle);\n     }\n-}\n \n+    private static class KNNIndexCacheEntry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNzQ1Ng=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODYwNDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDozNTo0NlrOFliljw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDowODo1NVrOFln34g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwODMwMw==", "bodyText": "Should we add try/finally block and move knnIndexCacheEntry.getFileWatcherHandle().stop(); to finally block to ensure the watcher is removed as file is deleted at this point?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374908303", "createdAt": "2020-02-04T20:35:46Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -103,10 +106,12 @@ public synchronized void rebuild() {\n      *\n      * @param removalNotification key, value that got evicted.\n      */\n-    private void onRemoval(RemovalNotification<String, KNNIndex> removalNotification) {\n-        KNNIndex knnIndex = removalNotification.getValue();\n+    private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNotification) {\n+        KNNIndexCacheEntry knnIndexCacheEntry = removalNotification.getValue();\n+\n+        knnIndexCacheEntry.getFileWatcherHandle().stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NTYyNw==", "bodyText": "Can you clarify what would be wrapped in the try{}? knnIndexCacheEntry.getFileWatcherHandle().stop() should not throw - it just removes the watcher from the set, and doesn't declare any kind of exceptions.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374955627", "createdAt": "2020-02-04T22:19:42Z", "author": {"login": "jschmitz28"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -103,10 +106,12 @@ public synchronized void rebuild() {\n      *\n      * @param removalNotification key, value that got evicted.\n      */\n-    private void onRemoval(RemovalNotification<String, KNNIndex> removalNotification) {\n-        KNNIndex knnIndex = removalNotification.getValue();\n+    private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNotification) {\n+        KNNIndexCacheEntry knnIndexCacheEntry = removalNotification.getValue();\n+\n+        knnIndexCacheEntry.getFileWatcherHandle().stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwODMwMw=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1OTMyNA==", "bodyText": "I was referring to ensuring knnIndexCacheEntry.getFileWatcherHandle().stop() being called when cache invalidate happens. some thing like this\ntry {\n        KNNIndexCacheEntry knnIndexCacheEntry = removalNotification.getValue();\n               executor.execute(() -> knnIndexCacheEntry.getKnnIndex().close());\n} finally {\n       knnIndexCacheEntry.getFileWatcherHandle().stop();\n}", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374959324", "createdAt": "2020-02-04T22:28:35Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -103,10 +106,12 @@ public synchronized void rebuild() {\n      *\n      * @param removalNotification key, value that got evicted.\n      */\n-    private void onRemoval(RemovalNotification<String, KNNIndex> removalNotification) {\n-        KNNIndex knnIndex = removalNotification.getValue();\n+    private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNotification) {\n+        KNNIndexCacheEntry knnIndexCacheEntry = removalNotification.getValue();\n+\n+        knnIndexCacheEntry.getFileWatcherHandle().stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwODMwMw=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3MDgzNA==", "bodyText": "Is there a perceived difference in behavior here? Both should be called regardless - in the case of the PR, FileWatcher.stop is called first, and should doesn't have an expected failure mode, and then we submit a task to gc the index.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374970834", "createdAt": "2020-02-04T22:55:58Z", "author": {"login": "jschmitz28"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -103,10 +106,12 @@ public synchronized void rebuild() {\n      *\n      * @param removalNotification key, value that got evicted.\n      */\n-    private void onRemoval(RemovalNotification<String, KNNIndex> removalNotification) {\n-        KNNIndex knnIndex = removalNotification.getValue();\n+    private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNotification) {\n+        KNNIndexCacheEntry knnIndexCacheEntry = removalNotification.getValue();\n+\n+        knnIndexCacheEntry.getFileWatcherHandle().stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwODMwMw=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NDkxNA==", "bodyText": "Agree there is no failure mode at this point. Ideally we want to ensure both gc() and stop() always get called in this function. We can defer this until we use functions that throws.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374994914", "createdAt": "2020-02-05T00:08:55Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -103,10 +106,12 @@ public synchronized void rebuild() {\n      *\n      * @param removalNotification key, value that got evicted.\n      */\n-    private void onRemoval(RemovalNotification<String, KNNIndex> removalNotification) {\n-        KNNIndex knnIndex = removalNotification.getValue();\n+    private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNotification) {\n+        KNNIndexCacheEntry knnIndexCacheEntry = removalNotification.getValue();\n+\n+        knnIndexCacheEntry.getFileWatcherHandle().stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwODMwMw=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODY0Mjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo0ODo1OVrOFli9OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyNzoyMFrOFlnGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNDM2MA==", "bodyText": "I think we should first do  resourceWatcherService.add and then load the index.\n\nresourceWatcherService.add seems to already call init() on the filewatcher.  So no explicit call to init()\nthis will also address the case of  index not loaded if file is only present", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374914360", "createdAt": "2020-02-04T20:48:59Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NzkyMQ==", "bodyText": "Can you clarify what you mean by the second case?\nFor the first case, the reason why I'm calling loadIndex in between FileWatcher.init and resourceWatcherService.add is because I'm still not totally confident about the guarantee of no search threads executing while the file is deleted.\nBy calling init() first, we know with certainty whether the file existed at the time we started loading the graph, and if it did not exist, we are guaranteed that loadIndex will fail. If we also start the monitor before loading the index, then in the case that we're wrong about the guarantee mentioned above, we're effectively creating a multi-second window (depending on index loading time) for which the watcher could notify about a file delete, and invalidate() would cause a no-op.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374967921", "createdAt": "2020-02-04T22:48:34Z", "author": {"login": "jschmitz28"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNDM2MA=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MjE0NA==", "bodyText": "makes sense. Thanks", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374982144", "createdAt": "2020-02-04T23:27:20Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNDM2MA=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODY2NDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo1NjozMVrOFljK9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyOTozMFrOFlnIxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzg3OQ==", "bodyText": "I think guava cache takes the lock when loading the entry for the key. So when invalidate happens, it should happen after the graph is loaded?\nhttps://github.com/google/guava/blob/master/guava/src/com/google/common/cache/Cache.java#L91", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374917879", "createdAt": "2020-02-04T20:56:31Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);\n+\n+        // TODO verify that this is safe - ideally we'd explicitly ensure that the FileWatcher is only checked\n+        // after the guava cache has finished loading the key to avoid a race condition where the watcher\n+        // causes us to invalidate an entry before the key has been fully loaded.\n+        final WatcherHandle<FileWatcher> watcherHandle = resourceWatcherService.add(fileWatcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1ODYwMQ==", "bodyText": "See the following gist. Guava invalidate(key) does not block but is instead a no-op when executed if guava hasn't fully loaded the key into the cache: https://gist.github.com/jschmitz28/c8ff2d3b5856f625cf1f5a98095b7a51", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374958601", "createdAt": "2020-02-04T22:26:45Z", "author": {"login": "jschmitz28"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);\n+\n+        // TODO verify that this is safe - ideally we'd explicitly ensure that the FileWatcher is only checked\n+        // after the guava cache has finished loading the key to avoid a race condition where the watcher\n+        // causes us to invalidate an entry before the key has been fully loaded.\n+        final WatcherHandle<FileWatcher> watcherHandle = resourceWatcherService.add(fileWatcher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzg3OQ=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4Mjg1Mw==", "bodyText": "Got it. You mean invalidating entry would not interrupt loading graph but no-op would make us miss gc() on the graph.  Agree this minimizes the risk of race condition assuming the index deletion happens during search.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374982853", "createdAt": "2020-02-04T23:29:30Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -175,18 +178,57 @@ public void setCacheCapacityReached(Boolean value) {\n      * Loads hnsw index to memory. Registers the location of the serialized graph with ResourceWatcher.\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n-     * @param algoParams hnsw algoparams\n+     * @param algoParams hnsw algorithm parameters\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndex loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, final String[] algoParams) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n         Path indexPath = Paths.get(indexPathUrl);\n-        knnIndexFileListener.register(indexPath);\n-        return KNNIndex.loadIndex(indexPathUrl, algoParams);\n+        FileWatcher fileWatcher = new FileWatcher(indexPath);\n+        fileWatcher.addListener(KNN_INDEX_FILE_DELETED_LISTENER);\n+\n+        // Calling init() on the FileWatcher will bootstrap initial state that indicates whether or not the file\n+        // is present. If it is not present at time of init(), then KNNIndex.loadIndex will fail and we won't cache\n+        // the entry\n+        fileWatcher.init();\n+\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, algoParams);\n+\n+        // TODO verify that this is safe - ideally we'd explicitly ensure that the FileWatcher is only checked\n+        // after the guava cache has finished loading the key to avoid a race condition where the watcher\n+        // causes us to invalidate an entry before the key has been fully loaded.\n+        final WatcherHandle<FileWatcher> watcherHandle = resourceWatcherService.add(fileWatcher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzg3OQ=="}, "originalCommit": {"oid": "b6d7eb2ff49b10e1f91068b24435c590a39ad8a8"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTE2MTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDoxMzowOVrOFln8Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDoxMzowOVrOFln8Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NjAzMA==", "bodyText": "Why not just do:\nreturn cache.get(key, () -> loadIndex(key, algoParams)).getKnnIndex();", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/36#discussion_r374996030", "createdAt": "2020-02-05T00:13:09Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -121,15 +126,13 @@ private void onRemoval(RemovalNotification<String, KNNIndex> removalNotification\n      * Loads corresponding index for the given key to memory and returns the index object.\n      *\n      * @param key indexPath where the serialized hnsw graph is stored\n-     * @param algoParams hnsw algoparams\n-     * @return KNNIndex holding the heap pointer of the loaded graph or empty if there was\n-     * a failure to load the\n-     * @throws RuntimeException if there's an unexpected failure in loading, which implies that the value for\n-     * the key will be both out of the cache and the underlying index will not be loaded\n+     * @param algoParams hnsw algorithm parameters\n+     * @return KNNIndex holding the heap pointer of the loaded graph\n      */\n     public KNNIndex getIndex(String key, final String[] algoParams) {\n         try {\n-            return cache.get(key, () -> loadIndex(key, algoParams));\n+            final KNNIndexCacheEntry knnIndexCacheEntry = cache.get(key, () -> loadIndex(key, algoParams));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01abb18daa28cbf9a196314cacefa1febda7e516"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2706, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}