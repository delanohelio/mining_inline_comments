{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3NTYzMDMx", "number": 281, "title": "Support k-NN similarity functions in painless scripting", "bodyText": "*Issue #213\nImplement IndexFieldDataBuilder to allow painless scripting to indenitfy KNNScriptDocValues\nAdd dependency to PainlessExtension to add custom scoring methods to be exposed for usage by users inside painless scripting.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-11T23:59:34Z", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281", "merged": true, "mergeCommit": {"oid": "c41f3750a31d74db9e17cd358665006701b1ce7c"}, "closed": true, "closedAt": "2020-12-29T01:26:48Z", "author": {"login": "VijayanB"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk9FffgH2gAyNTM3NTYzMDMxOjI3ODdjNWQ3NzBmMmE1YzU3MmE3NWZkNzVmNzgzN2JlODA5OGVlNGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdqurtnAFqTU1OTMzMjI5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2787c5d770f2a5c572a75fd75f7837be8098ee4c", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/2787c5d770f2a5c572a75fd75f7837be8098ee4c", "committedDate": "2020-12-11T00:48:43Z", "message": "Add IndexFieldDataBuilder\n\nPainless scripting uses IndexFieldDataBuilder to load field data values. Hence, override\nfielddataBuilder to return instance of KNNVectorIndexFieldData.Builder.\nSubsequently, this builder is responsible for returning ScriptDocValues which\nwill be used as argument in our Whitlisting knn custome methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f801096fade1d89bb0d9531168768ce8f0812a", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/21f801096fade1d89bb0d9531168768ce8f0812a", "committedDate": "2020-12-11T23:47:54Z", "message": "Add new methods for whitelisting\n\nAdded new methods which will be whitelisted for users to\ncall in source field for painless scripting."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10dd92741091567b8ca66001b2aba9985eeb370e", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/10dd92741091567b8ca66001b2aba9985eeb370e", "committedDate": "2020-12-11T23:53:09Z", "message": "Create Whitelist text file\n\nAdd Extension class and return list of whitelisted method.\nUpdate gradle to add dependencies to painless."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/94d227790caa9a5bfc99fdd27db6497cbcaa1348", "committedDate": "2020-12-12T00:41:47Z", "message": "Remove Test Annotation\n\ntest annotation is forbidden"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzMwNDg2", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#pullrequestreview-551730486", "createdAt": "2020-12-14T17:58:05Z", "commit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzo1ODowNVrOIFdB4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyODoxNVrOIFeigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4OTQxMQ==", "bodyText": "fielddataBuilder should be fieldDataBuilder based on IndexFieldData", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542589411", "createdAt": "2020-12-14T17:58:05Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -207,6 +210,12 @@ public Query termQuery(Object value, QueryShardContext context) {\n         public int getDimension() {\n             return dimension;\n         }\n+\n+        @Override\n+        public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName, Supplier<SearchLookup> searchLookup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5MDY2Nw==", "bodyText": "Why is this indented?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542590667", "createdAt": "2020-12-14T17:59:54Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -50,7 +90,7 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n      * @return cosine score\n      */\n     public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n-        float dotProduct = 0.0f;\n+            float dotProduct = 0.0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDMyNQ==", "bodyText": "This should be cosineSimilarityOptimized, no?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542594325", "createdAt": "2020-12-14T18:05:12Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMzQwOA==", "bodyText": "I think this interface is vague: cosineSimilarityOptimized does not give a user any information about how this function differs from cosineSimilarity. If cosineSimilarity can be optimized, why even provide cosineSimilarity?\nThe Cosine similarity is A . B / (||A|| x ||B||). The difference between the two functions is that cosineSimilarityOptimized has the user pass in both the query vector and the magnitude of the query vector. Assuming the query vector is A, ||A|| does not change throughout the query. So time is saved by computing ||A|| separately and then passing it into the function. Also, I think normQueryVector may not be the appropriate term. Normalization refers to the process of making a vector have a magnitude of one.\nMy proposal is to switch it to the following interface:\ncosineSimilarity(List <Number> queryVector, KNNVectorScriptDocValues docValues, Number queryVectorMagnitude)", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542603408", "createdAt": "2020-12-14T18:18:33Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues script doc values\n+     * @param normQueryVector normalized query vector value.\n+     * @return cosine score\n+     */\n+    public static float cosineSimilarityOptimized(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNTE0OA==", "bodyText": "Nit: \"Whitelisted cosineSimilarity method that can be used in a script to avoid repeated calculation of normalization for the query vector.\nExample:\n...\n\"", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542605148", "createdAt": "2020-12-14T18:20:18Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNzE1MQ==", "bodyText": "Is this redundant with line 46?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542607151", "createdAt": "2020-12-14T18:22:08Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;\n+            return;\n+        }\n+        docExists=false;\n+    }\n+\n+    public float[] getValue() throws IOException{\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        Objects.requireNonNull(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNzQ1OA==", "bodyText": "space before catch", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542607458", "createdAt": "2020-12-14T18:22:25Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;\n+            return;\n+        }\n+        docExists=false;\n+    }\n+\n+    public float[] getValue() throws IOException{\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        Objects.requireNonNull(value);\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        }catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwOTYwNQ==", "bodyText": "Is this thread safe? I am wondering if this is the correct place to determine if a value exists for that doc.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542609605", "createdAt": "2020-12-14T18:24:22Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMTQ5MQ==", "bodyText": "nit: add endline", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542611491", "createdAt": "2020-12-14T18:26:00Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldDataTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.BinaryDocValuesField;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FieldType;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorDVLeafFieldDataTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private LeafReaderContext leafReaderContext;\n+    private Directory directory;\n+    private DirectoryReader reader;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        directory = newDirectory();\n+        createKNNVectorDocument(directory);\n+        reader = DirectoryReader.open(directory);\n+        leafReaderContext = reader.getContext().leaves().get(0);\n+    }\n+\n+    private void createKNNVectorDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        Document knnDocument = new Document();\n+        knnDocument.add(\n+                new BinaryDocValuesField(\n+                        MOCK_INDEX_FIELD_NAME,\n+                        new VectorField(MOCK_INDEX_FIELD_NAME, new float[]{1.0f, 2.0f}, new FieldType()).binaryValue()));\n+        writer.addDocument(knnDocument);\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        reader.close();\n+        directory.close();\n+    }\n+\n+    public void testGetScriptValues() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), MOCK_INDEX_FIELD_NAME);\n+        ScriptDocValues<float[]> scriptValues = leafFieldData.getScriptValues();\n+        assertNotNull(scriptValues);\n+        assertTrue(scriptValues instanceof KNNVectorScriptDocValues);\n+    }\n+\n+    public void testGetScriptValuesWrongFieldName() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        expectThrows(IllegalStateException.class,\n+                () -> leafFieldData.getScriptValues());\n+    }\n+\n+    public void testRamBytesUsed() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        assertEquals(0, leafFieldData.ramBytesUsed());\n+    }\n+\n+    public void testGetBytesValues() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> leafFieldData.getBytesValues());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMzEyMg==", "bodyText": "nit: add endline", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542613122", "createdAt": "2020-12-14T18:27:23Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorIndexFieldDataTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorIndexFieldDataTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private KNNVectorIndexFieldData indexFieldData;\n+    private Directory directory;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        indexFieldData = new KNNVectorIndexFieldData(MOCK_INDEX_FIELD_NAME, CoreValuesSourceType.BYTES);\n+        directory = newDirectory();\n+        createEmptyDocument(directory);\n+    }\n+\n+    private void createEmptyDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        writer.addDocument(new Document());\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        directory.close();\n+    }\n+\n+    public void testGetFieldName() {\n+        assertEquals(MOCK_INDEX_FIELD_NAME, indexFieldData.getFieldName());\n+    }\n+\n+    public void testGetValuesSourceType() {\n+        assertEquals(CoreValuesSourceType.BYTES, indexFieldData.getValuesSourceType());\n+    }\n+\n+    public void testLoad() throws IOException {\n+        final DirectoryReader reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        KNNVectorDVLeafFieldData leafFieldData = indexFieldData.load(leafReaderContext);\n+        assertNotNull(leafFieldData);\n+        reader.close();\n+    }\n+\n+    public void testLoadDirect() throws IOException {\n+        final DirectoryReader reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        KNNVectorDVLeafFieldData leafFieldData = indexFieldData.loadDirect(leafReaderContext);\n+        assertNotNull(leafFieldData);\n+        reader.close();\n+    }\n+\n+    public void testSortField() {\n+\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> indexFieldData.sortField(null, null, null, false));\n+    }\n+\n+    public void testNewBucketedSort() {\n+\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> indexFieldData.newBucketedSort(null, null, null, null, null, null, 0, null));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNDE0NA==", "bodyText": "add endline", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542614144", "createdAt": "2020-12-14T18:28:15Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValuesTests.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.BinaryDocValuesField;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FieldType;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorScriptDocValuesTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private static final float[] SAMPLE_VECTOR_DATA = new float[]{1.0f, 2.0f};\n+    private KNNVectorScriptDocValues scriptDocValues;\n+    private Directory directory;\n+    private DirectoryReader reader;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        directory = newDirectory();\n+        createKNNVectorDocument(directory);\n+        reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        scriptDocValues = new KNNVectorScriptDocValues(leafReaderContext.reader().getBinaryDocValues(MOCK_INDEX_FIELD_NAME));\n+    }\n+\n+    private void createKNNVectorDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        Document knnDocument = new Document();\n+        knnDocument.add(\n+                new BinaryDocValuesField(\n+                        MOCK_INDEX_FIELD_NAME,\n+                        new VectorField(MOCK_INDEX_FIELD_NAME, SAMPLE_VECTOR_DATA, new FieldType()).binaryValue()));\n+        writer.addDocument(knnDocument);\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        reader.close();\n+        directory.close();\n+    }\n+\n+    public void testGetValue() throws IOException {\n+        scriptDocValues.setNextDocId(0);\n+        Assert.assertArrayEquals(SAMPLE_VECTOR_DATA, scriptDocValues.getValue(), 0.1f);\n+    }\n+\n+    public void testSize() throws IOException {\n+        Assert.assertEquals(0, scriptDocValues.size());\n+        scriptDocValues.setNextDocId(0);\n+        Assert.assertEquals(1, scriptDocValues.size());\n+    }\n+\n+    public void testGet() throws IOException {\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> scriptDocValues.get(0));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfe7e917d61c72f2659f39555b1bbdbf11e14cea", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/dfe7e917d61c72f2659f39555b1bbdbf11e14cea", "committedDate": "2020-12-14T22:49:45Z", "message": "Fixed code review comments\n1. Made KNNScriptDocValues thread safe\n2. reformat code\n3. rename cosinesimiloptimized."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "690c5a9092a090ef546ffdd560ede209c60a0a61", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/690c5a9092a090ef546ffdd560ede209c60a0a61", "committedDate": "2020-12-14T22:55:11Z", "message": "Remove nonnull check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1a9a055f1f8ec0c2f8e591b3e0a414ccb3231d", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/5f1a9a055f1f8ec0c2f8e591b3e0a414ccb3231d", "committedDate": "2020-12-15T01:11:02Z", "message": "Fixed formatting errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/aa7a4869b4448bf59c234f0711865a773f9e2d30", "committedDate": "2020-12-15T21:16:18Z", "message": "Add Integration test\n\nAdd painless scripting score to verify whether following methods\nare available for users.\n1. l2Squared\n2. cosineSimilarity(queryVector,doc[field])\n3. cosineSimilarity(queryVector,doc[field],normalizedVector)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTM3NjE1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#pullrequestreview-551937615", "createdAt": "2020-12-14T22:13:23Z", "commit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjoxMzoyM1rOIFtb6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo1MDozM1rOIHRuBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg1ODIxOA==", "bodyText": "Oh haha yes you are correct, my mistake", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542858218", "createdAt": "2020-12-14T22:13:23Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -207,6 +210,12 @@ public Query termQuery(Object value, QueryShardContext context) {\n         public int getDimension() {\n             return dimension;\n         }\n+\n+        @Override\n+        public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName, Supplier<SearchLookup> searchLookup) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4OTQxMQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4NDc1NQ==", "bodyText": "Why throw IllegalArgumentException? It seems like it maybe should be an IllegalStateException.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544484755", "createdAt": "2020-12-16T17:26:28Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODUxNw==", "bodyText": "Should this extend BinaryScriptDocValues<float[]>? Here is the code.\nI think if we go this route, we do not have to have docExists boolean.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544488517", "createdAt": "2020-12-16T17:31:47Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MDI5Mw==", "bodyText": "Should this extend AbstractBinaryDVLeafFieldData?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544490293", "createdAt": "2020-12-16T17:34:29Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldData.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReader;\n+import org.elasticsearch.index.fielddata.LeafFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorDVLeafFieldData implements LeafFieldData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODMxMg==", "bodyText": "Should we catch the specific exception here?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544498312", "createdAt": "2020-12-16T17:46:16Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODU3OQ==", "bodyText": "Out of curiosity, any reason for these tabs here?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544498579", "createdAt": "2020-12-16T17:46:37Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {\n+            logger.debug(\"Failed to get vector from doc. Returning minimum score to put this result to end\", e);\n+            return Float.MIN_VALUE;\n+        }\n+        return l2Squared(toFloat(queryVector), knnDocVector);\n+    }\n+\n     /**\n      * This method can be used script to avoid repeated calculation of normalization\n      * for query vector for each filtered documents\n      *\n-     * @param queryVector query vector\n-     * @param inputVector input vector\n+     * @param queryVector     query vector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODc1NA==", "bodyText": "Makes sense", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544498754", "createdAt": "2020-12-16T17:46:51Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDMyNQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5OTcxMA==", "bodyText": "The other part of my comment suggested changing this name to queryVectorMagnitude. normQueryVector makes it seem like the user should pass in the normalized query vector, not the magnitude of the query vector.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544499710", "createdAt": "2020-12-16T17:48:12Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted cosineSimilarity method that can be used in a script to avoid repeated\n+     * calculation of normalization for the query vector.\n+     * Example:\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector     query vector\n+     * @param docValues       script doc values\n+     * @param normQueryVector normalized query vector value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwMTI1Mw==", "bodyText": "Which style tool did you use for formatting? I think it might make sense to add some kind of styling framework to the code so that we stay consistent (I am not suggesting adding it in this PR, but it might make sense to add in the future).", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544501253", "createdAt": "2020-12-16T17:50:33Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/KNNRestTestCase.java", "diffHunk": "@@ -418,15 +419,15 @@ protected void deleteKnnDoc(String index, String docId) throws IOException {\n      */\n     protected void updateClusterSettings(String settingKey, Object value) throws Exception {\n         XContentBuilder builder = XContentFactory.jsonBuilder()\n-                       .startObject()\n-                       .startObject(\"persistent\")\n-                       .field(settingKey, value)\n-                       .endObject()\n-                       .endObject();\n+                .startObject()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/71f4a60e9930ea03087463a164d3581b2833876a", "committedDate": "2020-12-16T19:17:58Z", "message": "Fixed review comments\n\n1. updated exception type.\n2. Added test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTg4MzI3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#pullrequestreview-554188327", "createdAt": "2020-12-17T00:18:25Z", "commit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoxODoyNVrOIHe5hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoxOToxMlrOIHe6fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNzE4OA==", "bodyText": "You are right. We probably don't need to make that change now.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544717188", "createdAt": "2020-12-17T00:18:25Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODUxNw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNzQzOA==", "bodyText": "Makes sense, Option 1 us good with me", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544717438", "createdAt": "2020-12-17T00:19:12Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODMxMg=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Mjk2NDI1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#pullrequestreview-554296425", "createdAt": "2020-12-17T05:49:26Z", "commit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNTo0OToyN1rOIHlu1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjozNDozMFrOIHmtrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgyOTE0Mg==", "bodyText": "do we need synchronized here?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544829142", "createdAt": "2020-12-17T05:49:27Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMzc5MQ==", "bodyText": "Do we need synchronized here?  Avoid synchronization in the places not needed as it could hamper performance.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544833791", "createdAt": "2020-12-17T06:02:37Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalStateException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException((e));\n+        }\n+    }\n+\n+    @Override\n+    public int size() {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg0NTIzMA==", "bodyText": "How about we have a document without the vector and then assert that particular doc comes at the end of the result? Same for both CosineTestData as well.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544845230", "createdAt": "2020-12-17T06:34:30Z", "author": {"login": "vamshin"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/PainlessScriptScoringIT.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNRestTestCase;\n+import com.amazon.opendistroforelasticsearch.knn.KNNResult;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.index.query.MatchAllQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PainlessScriptScoringIT extends KNNRestTestCase {\n+\n+\n+    private Map<String, Float[]> getL2TestData() {\n+        Map<String, Float[]> data = new HashMap<>();\n+        data.put(\"1\", new Float[]{6.0f, 6.0f});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436aff37cd3059e29ff74306fe94099574b6bdd0", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/436aff37cd3059e29ff74306fe94099574b6bdd0", "committedDate": "2020-12-18T22:00:44Z", "message": "Fix review comments\n\n1. Requires dimension must be consistent between query vector and input vector\n2. Remove thread safe for KNNScriptDocValues\n3. Throw exception if document doesn't contains vector field."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf32fec672b0afa195027b174faaadaf5c521318", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/cf32fec672b0afa195027b174faaadaf5c521318", "committedDate": "2020-12-19T00:27:23Z", "message": "Fixed lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff846d9270e9712d45bb284e9480da3a3a62af0b", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ff846d9270e9712d45bb284e9480da3a3a62af0b", "committedDate": "2020-12-22T00:22:17Z", "message": "Add test case to check size\n\nTo avoid exception, user's can use size method to validate."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dedba6d2bcde8aae9d368e4f4a29fd38abe53985", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/dedba6d2bcde8aae9d368e4f4a29fd38abe53985", "committedDate": "2020-12-22T00:24:18Z", "message": "Extract constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9722abb795e343dfb98de67938bd077b80272de1", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/9722abb795e343dfb98de67938bd077b80272de1", "committedDate": "2020-12-22T23:08:24Z", "message": "Update error message\n\nInclude error message with additional details on how to fix the\nproblem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db29a858f80d3023f89aa78822c076ef4030d186", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/db29a858f80d3023f89aa78822c076ef4030d186", "committedDate": "2020-12-22T23:20:45Z", "message": "Update error message\n\nAdd field name as part of error message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjcwOTUz", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#pullrequestreview-558270953", "createdAt": "2020-12-23T23:25:08Z", "commit": {"oid": "db29a858f80d3023f89aa78822c076ef4030d186"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c66010b6949553c9affe05936c57042e19aeac", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/06c66010b6949553c9affe05936c57042e19aeac", "committedDate": "2020-12-24T19:18:37Z", "message": "Refactor ScoreScirpt\n\nUse scriptdoc to extract values from segment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b2acea301e4dd75bdba14b96c8f48f162e443e", "author": {"user": {"login": "VijayanB", "name": "Vijayan Balasubramanian"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/44b2acea301e4dd75bdba14b96c8f48f162e443e", "committedDate": "2020-12-24T19:31:06Z", "message": "Refactor ScoreScript\n\nUse KNNScriptDocValues to retrieve float[] from the\ndocument instead of explicity retrieval."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzMyMjk5", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#pullrequestreview-559332299", "createdAt": "2020-12-28T23:25:26Z", "commit": {"oid": "44b2acea301e4dd75bdba14b96c8f48f162e443e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1291, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}