{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNDE1MDAy", "number": 90, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyNjo0NVrODxZQgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzozNzo1MFrODx82SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTIwNjQwOnYy", "diffSide": "RIGHT", "path": "jni/src/v1736/com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyNjo0NVrOGE18tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1Mjo1M1rOGE8Siw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTM4Mw==", "bodyText": "I believe this needs to be released via env->ReleaseStringUTFChars", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r407731383", "createdAt": "2020-04-13T21:26:45Z", "author": {"login": "jmazanec15"}, "path": "jni/src/v1736/com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex.cpp", "diffHunk": "@@ -85,15 +85,17 @@ void catch_cpp_exception_and_throw_java(JNIEnv* env)\n     }\n }\n \n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_saveIndex(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams)\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_saveIndex(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jstring spaceType, jobjectArray algoParams)\n {\n     Space<float>* space = NULL;\n     ObjectVector dataset;\n     Index<float>* index = NULL;\n     int* object_ids = NULL;\n \n     try {\n-        space = SpaceFactoryRegistry<float>::Instance().CreateSpace(\"l2\", AnyParams());\n+        const char *spaceTypeCStr = env->GetStringUTFChars(spaceType, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a58bf6778608d2d6346c141cc30a1dbdc31115d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTI3NQ==", "bodyText": "Ah. Thanks for the catch. Recalled being told that memory leak can be disastrous", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r407835275", "createdAt": "2020-04-14T02:52:53Z", "author": {"login": "chenqi0805"}, "path": "jni/src/v1736/com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex.cpp", "diffHunk": "@@ -85,15 +85,17 @@ void catch_cpp_exception_and_throw_java(JNIEnv* env)\n     }\n }\n \n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_saveIndex(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams)\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_saveIndex(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jstring spaceType, jobjectArray algoParams)\n {\n     Space<float>* space = NULL;\n     ObjectVector dataset;\n     Index<float>* index = NULL;\n     int* object_ids = NULL;\n \n     try {\n-        space = SpaceFactoryRegistry<float>::Instance().CreateSpace(\"l2\", AnyParams());\n+        const char *spaceTypeCStr = env->GetStringUTFChars(spaceType, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTM4Mw=="}, "originalCommit": {"oid": "8a58bf6778608d2d6346c141cc30a1dbdc31115d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTIwODYyOnYy", "diffSide": "RIGHT", "path": "jni/src/v1736/com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyNzozMlrOGE1-Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyNzozMlrOGE1-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTc0Mw==", "bodyText": "This needs to be released as well", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r407731743", "createdAt": "2020-04-13T21:27:32Z", "author": {"login": "jmazanec15"}, "path": "jni/src/v1736/com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex.cpp", "diffHunk": "@@ -171,17 +173,19 @@ JNIEXPORT jobjectArray JNICALL Java_com_amazon_opendistroforelasticsearch_knn_in\n     return NULL;\n }\n \n-JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_init(JNIEnv* env, jclass cls,  jstring indexPath, jobjectArray algoParams)\n+JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_init(JNIEnv* env, jclass cls,  jstring indexPath, jstring spaceType, jobjectArray algoParams)\n {\n     IndexWrapper *indexWrapper = NULL;\n     try {\n         const char *indexPathCStr = env->GetStringUTFChars(indexPath, 0);\n         string indexPathString(indexPathCStr);\n+        const char *spaceTypeCStr = env->GetStringUTFChars(spaceType, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a58bf6778608d2d6346c141cc30a1dbdc31115d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTIxNzE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITestsIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozMDoyOVrOGE2DkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo0Mjo0MVrOGFgI8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMzEzNg==", "bodyText": "Why switch this?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r407733136", "createdAt": "2020-04-13T21:30:29Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITestsIT.java", "diffHunk": "@@ -31,8 +31,8 @@\n import java.util.Map;\n import java.util.stream.Collectors;\n \n-public class KNNJNITests extends ESTestCase {\n-    private static final Logger logger = LogManager.getLogger(KNNJNITests.class);\n+public class KNNJNITestsIT extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a58bf6778608d2d6346c141cc30a1dbdc31115d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxNjcyMA==", "bodyText": "Ah. When I ran the test locally on IntelliJ, it fails to detect the integration tests therein due to lack of suffix \"IT\" in the class name. So I switched that for easier debugging. Will change it back but I think it might worth doublecheck if CI also neglects the tests.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r407816720", "createdAt": "2020-04-14T01:44:29Z", "author": {"login": "chenqi0805"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITestsIT.java", "diffHunk": "@@ -31,8 +31,8 @@\n import java.util.Map;\n import java.util.stream.Collectors;\n \n-public class KNNJNITests extends ESTestCase {\n-    private static final Logger logger = LogManager.getLogger(KNNJNITests.class);\n+public class KNNJNITestsIT extends ESTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMzEzNg=="}, "originalCommit": {"oid": "8a58bf6778608d2d6346c141cc30a1dbdc31115d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MTYwMQ==", "bodyText": "Tests as opposed to IT signals that it is a unit test. These tests run during ./gradlew build, which is what we use for the PR testing workflow. You can also run them individually with this command:\n./gradlew ':test' --tests \"com.amazon.opendistroforelasticsearch.knn.index.KNNJNITests.testCreateHnswIndex\"\n\nWe consider these unit tests because they are testing an isolated portion of code. Interesting that IntelliJ does not pick them up. Will need to look into it.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408351601", "createdAt": "2020-04-14T18:35:31Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITestsIT.java", "diffHunk": "@@ -31,8 +31,8 @@\n import java.util.Map;\n import java.util.stream.Collectors;\n \n-public class KNNJNITests extends ESTestCase {\n-    private static final Logger logger = LogManager.getLogger(KNNJNITests.class);\n+public class KNNJNITestsIT extends ESTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMzEzNg=="}, "originalCommit": {"oid": "8a58bf6778608d2d6346c141cc30a1dbdc31115d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMjY0Mw==", "bodyText": "Ah. Sorry, I misidentified it as IT.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408422643", "createdAt": "2020-04-14T20:42:41Z", "author": {"login": "chenqi0805"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITestsIT.java", "diffHunk": "@@ -31,8 +31,8 @@\n import java.util.Map;\n import java.util.stream.Collectors;\n \n-public class KNNJNITests extends ESTestCase {\n-    private static final Logger logger = LogManager.getLogger(KNNJNITests.class);\n+public class KNNJNITestsIT extends ESTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMzEzNg=="}, "originalCommit": {"oid": "8a58bf6778608d2d6346c141cc30a1dbdc31115d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTEwNzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoxODo0MlrOGFbMTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMjoxNlrOGGtPiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MTU4Mw==", "bodyText": "Why is this case insensitive?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408341583", "createdAt": "2020-04-14T18:18:42Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -367,4 +387,48 @@ public void setClusterService(ClusterService clusterService) {\n         this.clusterService = clusterService;\n     }\n \n+    static class SpaceTypeValidator implements Setting.Validator<String> {\n+\n+        private Set<String> types = SpaceTypes.getValues();\n+\n+        @Override public void validate(String value) {\n+            if (!types.contains(value.toLowerCase())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa26cfb33ed6c9a5fe7bb029db39854cbad38800"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMzMzMA==", "bodyText": "I intended to set it case insensitive, e.g. L2, Cosinesimil is also valid string. But I can remove this if not necessary.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408423330", "createdAt": "2020-04-14T20:43:50Z", "author": {"login": "chenqi0805"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -367,4 +387,48 @@ public void setClusterService(ClusterService clusterService) {\n         this.clusterService = clusterService;\n     }\n \n+    static class SpaceTypeValidator implements Setting.Validator<String> {\n+\n+        private Set<String> types = SpaceTypes.getValues();\n+\n+        @Override public void validate(String value) {\n+            if (!types.contains(value.toLowerCase())){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MTU4Mw=="}, "originalCommit": {"oid": "aa26cfb33ed6c9a5fe7bb029db39854cbad38800"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NTg5OQ==", "bodyText": "I think case insensitive is good", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r409685899", "createdAt": "2020-04-16T16:22:16Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -367,4 +387,48 @@ public void setClusterService(ClusterService clusterService) {\n         this.clusterService = clusterService;\n     }\n \n+    static class SpaceTypeValidator implements Setting.Validator<String> {\n+\n+        private Set<String> types = SpaceTypes.getValues();\n+\n+        @Override public void validate(String value) {\n+            if (!types.contains(value.toLowerCase())){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MTU4Mw=="}, "originalCommit": {"oid": "aa26cfb33ed6c9a5fe7bb029db39854cbad38800"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTExNzE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoyMToyOVrOGFbSiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyNTozM1rOGGtYSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE3Nw==", "bodyText": "Could you add test cases to ensure that invalid space names throw the expected exceptions?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408343177", "createdAt": "2020-04-14T18:21:29Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITests.java", "diffHunk": "@@ -165,7 +214,7 @@ public Void run() {\n         float[] queryVector = {1.0f, 1.0f, 1.0f, 1.0f};\n         String[] algoQueryParams = {\"efSearch=200\"};\n \n-        final KNNIndex index = KNNIndex.loadIndex(indexPath, algoQueryParams);\n+        final KNNIndex index = KNNIndex.loadIndex(indexPath, \"l2\", algoQueryParams);\n         final KNNQueryResult[] results = index.queryIndex(queryVector, 30);\n \n         Map<Integer, Float> scores = Arrays.stream(results).collect(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa26cfb33ed6c9a5fe7bb029db39854cbad38800"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMzQ3NQ==", "bodyText": "Yes. My initial thought was to add such tests at KNNSettings module b/c that is where I want the input value to be validated and fail fast. Do you think it is also necessary to prevent invalid spaceType into JNI functions?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408423475", "createdAt": "2020-04-14T20:44:04Z", "author": {"login": "chenqi0805"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITests.java", "diffHunk": "@@ -165,7 +214,7 @@ public Void run() {\n         float[] queryVector = {1.0f, 1.0f, 1.0f, 1.0f};\n         String[] algoQueryParams = {\"efSearch=200\"};\n \n-        final KNNIndex index = KNNIndex.loadIndex(indexPath, algoQueryParams);\n+        final KNNIndex index = KNNIndex.loadIndex(indexPath, \"l2\", algoQueryParams);\n         final KNNQueryResult[] results = index.queryIndex(queryVector, 30);\n \n         Map<Integer, Float> scores = Arrays.stream(results).collect(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE3Nw=="}, "originalCommit": {"oid": "aa26cfb33ed6c9a5fe7bb029db39854cbad38800"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDgwMg==", "bodyText": "Added an integration test in KNNESSettingsIT.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408550802", "createdAt": "2020-04-15T02:52:59Z", "author": {"login": "chenqi0805"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITests.java", "diffHunk": "@@ -165,7 +214,7 @@ public Void run() {\n         float[] queryVector = {1.0f, 1.0f, 1.0f, 1.0f};\n         String[] algoQueryParams = {\"efSearch=200\"};\n \n-        final KNNIndex index = KNNIndex.loadIndex(indexPath, algoQueryParams);\n+        final KNNIndex index = KNNIndex.loadIndex(indexPath, \"l2\", algoQueryParams);\n         final KNNQueryResult[] results = index.queryIndex(queryVector, 30);\n \n         Map<Integer, Float> scores = Arrays.stream(results).collect(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE3Nw=="}, "originalCommit": {"oid": "aa26cfb33ed6c9a5fe7bb029db39854cbad38800"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4ODEzNw==", "bodyText": "Makes sense thanks", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r409688137", "createdAt": "2020-04-16T16:25:33Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITests.java", "diffHunk": "@@ -165,7 +214,7 @@ public Void run() {\n         float[] queryVector = {1.0f, 1.0f, 1.0f, 1.0f};\n         String[] algoQueryParams = {\"efSearch=200\"};\n \n-        final KNNIndex index = KNNIndex.loadIndex(indexPath, algoQueryParams);\n+        final KNNIndex index = KNNIndex.loadIndex(indexPath, \"l2\", algoQueryParams);\n         final KNNQueryResult[] results = index.queryIndex(queryVector, 30);\n \n         Map<Integer, Float> scores = Arrays.stream(results).collect(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE3Nw=="}, "originalCommit": {"oid": "aa26cfb33ed6c9a5fe7bb029db39854cbad38800"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjkyNTk4OnYy", "diffSide": "RIGHT", "path": "jni/src/v1736/com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzowMzoxM1rOGFsXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzowMzoxM1rOGFsXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjkyNw==", "bodyText": "nit: Please add the new function arguments to the end of the existing parameters list. Please take care in other places as well.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408622927", "createdAt": "2020-04-15T07:03:13Z", "author": {"login": "vamshin"}, "path": "jni/src/v1736/com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex.cpp", "diffHunk": "@@ -85,15 +85,19 @@ void catch_cpp_exception_and_throw_java(JNIEnv* env)\n     }\n }\n \n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_saveIndex(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams)\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v1736_KNNIndex_saveIndex(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jstring spaceType, jobjectArray algoParams)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4a90780ed8811393f16bd250dd480ca378c18"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3NTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxOToyN1rOGFs15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODo0ODo0OFrOGHZVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDc1Ng==", "bodyText": "null check on value", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408630756", "createdAt": "2020-04-15T07:19:27Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -367,4 +387,48 @@ public void setClusterService(ClusterService clusterService) {\n         this.clusterService = clusterService;\n     }\n \n+    static class SpaceTypeValidator implements Setting.Validator<String> {\n+\n+        private Set<String> types = SpaceTypes.getValues();\n+\n+        @Override public void validate(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4a90780ed8811393f16bd250dd480ca378c18"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3ODgyNQ==", "bodyText": "@vamshin I put a null check here, but it still fails to guard against null value, i.e. for some reason, if index.knn.space_type == null, it will not go through the validate. Similar bug happens to other parameters, e.g.\nPUT /myindex\n{\n    \"settings\" : {\n        \"index\": {\n            \"knn\": true,\n            \"knn.algo_param.m\": null\n        }\n    }\n}\n\nPUT /myindex/_doc/2?refresh=true\n{\n    \"my_vector1\" : [1.5, 2.5],\n    \"price\":10\n}\n\nPOST /myindex/_search\n{\n    \"size\" : 10,\n    \"query\": {\n        \"knn\": {\n            \"my_vector1\": {\n                \"vector\": [15, 25],\n                \"k\": 2\n            }\n        }\n    }\n}\n\nyields\n{\n  \"took\" : 0,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 0,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : null,\n    \"hits\" : [ ]\n  }\n}\n\nHow about we open a separate issue to track this?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r410378825", "createdAt": "2020-04-17T17:51:07Z", "author": {"login": "chenqi0805"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -367,4 +387,48 @@ public void setClusterService(ClusterService clusterService) {\n         this.clusterService = clusterService;\n     }\n \n+    static class SpaceTypeValidator implements Setting.Validator<String> {\n+\n+        private Set<String> types = SpaceTypes.getValues();\n+\n+        @Override public void validate(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDc1Ng=="}, "originalCommit": {"oid": "83e4a90780ed8811393f16bd250dd480ca378c18"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwODI5Ng==", "bodyText": "Ah got it. I think we can probably ignore this case.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r410408296", "createdAt": "2020-04-17T18:48:48Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -367,4 +387,48 @@ public void setClusterService(ClusterService clusterService) {\n         this.clusterService = clusterService;\n     }\n \n+    static class SpaceTypeValidator implements Setting.Validator<String> {\n+\n+        private Set<String> types = SpaceTypes.getValues();\n+\n+        @Override public void validate(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDc1Ng=="}, "originalCommit": {"oid": "83e4a90780ed8811393f16bd250dd480ca378c18"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3ODkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMDoyN1rOGFs3zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMDoyN1rOGFs3zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTI0NQ==", "bodyText": "nit: Move this enum class to a dedicated file", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408631245", "createdAt": "2020-04-15T07:20:27Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -367,4 +387,48 @@ public void setClusterService(ClusterService clusterService) {\n         this.clusterService = clusterService;\n     }\n \n+    static class SpaceTypeValidator implements Setting.Validator<String> {\n+\n+        private Set<String> types = SpaceTypes.getValues();\n+\n+        @Override public void validate(String value) {\n+            if (!types.contains(value.toLowerCase())){\n+                throw new InvalidParameterException(String.format(\"Unsupported space type: %s\", value));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Enum contains space types for k-NN similarity search\n+     */\n+    public enum SpaceTypes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4a90780ed8811393f16bd250dd480ca378c18"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzAzNzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/v1736/KNNIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzozNzo1MFrOGFtcNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzozNzo1MFrOGFtcNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDU2NA==", "bodyText": "nit: final String spaceType?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/90#discussion_r408640564", "createdAt": "2020-04-15T07:37:50Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/v1736/KNNIndex.java", "diffHunk": "@@ -110,12 +110,13 @@ public void close() {\n      * Loads the knn index to memory for querying the neighbours\n      *\n      * @param indexPath path where the hnsw index is stored\n+     * @param spaceType space type of the index\n      * @param algoParams hnsw algorithm parameters\n      * @return knn index that can be queried for k nearest neighbours\n      */\n-    public static KNNIndex loadIndex(String indexPath, final String[] algoParams) {\n+    public static KNNIndex loadIndex(String indexPath, String spaceType, final String[] algoParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4a90780ed8811393f16bd250dd480ca378c18"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2738, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}