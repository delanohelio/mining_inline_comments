{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjEzNjc0", "number": 97, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjoyMDoxNlrOD1nK2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo0NjoyMFrOD1nrLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTQyODc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjoyMDoxNlrOGLISzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjoyMDoxNlrOGLISzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyMzQwNA==", "bodyText": "returns Map of index stats?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/97#discussion_r414323404", "createdAt": "2020-04-24T06:20:16Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -147,6 +162,35 @@ public CacheStats getStats() {\n         return cache.stats();\n     }\n \n+    /**\n+     * Get the Elasticsearch indices currently loaded into the Cache\n+     *\n+     * @return Set containing all of the Elasticsearch indices in the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b5db0a1610b15cacf524c77faa83350a760139"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTQ2OTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozMzoxNVrOGLIo5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozMzoxNVrOGLIo5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTA2MQ==", "bodyText": "Let us add info log here to help in debugging something like manually evicted all graphs from cache", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/97#discussion_r414329061", "createdAt": "2020-04-24T06:33:15Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -174,6 +230,22 @@ public void setCacheCapacityReached(Boolean value) {\n         cacheCapacityReached.set(value);\n     }\n \n+    /**\n+     * Evict a graph in the cache manually\n+     *\n+     * @param indexFilePath path to segment file. Also, key in cache\n+     */\n+    public void evictGraphFromCache(String indexFilePath) {\n+        cache.invalidate(indexFilePath);\n+    }\n+\n+    /**\n+     * Evict all graphs in the cache manually\n+     */\n+    public void evictAllGraphsFromCache() {\n+        cache.invalidateAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b5db0a1610b15cacf524c77faa83350a760139"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTQ3Njk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozNTo0MlrOGLItCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozNTo0MlrOGLItCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMDEyMQ==", "bodyText": "lets add info log here Manually evicted graph from cache, indexFilePath, indexname", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/97#discussion_r414330121", "createdAt": "2020-04-24T06:35:42Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -174,6 +230,22 @@ public void setCacheCapacityReached(Boolean value) {\n         cacheCapacityReached.set(value);\n     }\n \n+    /**\n+     * Evict a graph in the cache manually\n+     *\n+     * @param indexFilePath path to segment file. Also, key in cache\n+     */\n+    public void evictGraphFromCache(String indexFilePath) {\n+        cache.invalidate(indexFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b5db0a1610b15cacf524c77faa83350a760139"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTQ4MTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozNzowNFrOGLIvhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozNzowNFrOGLIvhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMDc1OQ==", "bodyText": "nit: final String indexName", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/97#discussion_r414330759", "createdAt": "2020-04-24T06:37:04Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -156,6 +200,18 @@ public Long getWeightInKilobytes() {\n         return cache.asMap().values().stream().map(KNNIndexCacheEntry::getKnnIndex).mapToLong(KNNIndex::getIndexSize).sum();\n     }\n \n+    /**\n+     * Returns the current weight of an index in the cache in KiloBytes\n+     *\n+     * @param indexName Name if index to get the weight for\n+     * @return Weight of the index in the cache in kilobytes\n+     */\n+    public Long getWeightInKilobytes(String indexName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b5db0a1610b15cacf524c77faa83350a760139"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTUxMTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo0NjoyMFrOGLJAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxODoyNTo1MVrOGMILfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzNTAwOA==", "bodyText": "statValues.get(indexName).put(GRAPH_COUNT, ((Integer) statValues.get(indexName).getorDefault(GRAPH_COUNT, 0)) + 1)", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/97#discussion_r414335008", "createdAt": "2020-04-24T06:46:20Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -147,6 +162,35 @@ public CacheStats getStats() {\n         return cache.stats();\n     }\n \n+    /**\n+     * Get the Elasticsearch indices currently loaded into the Cache\n+     *\n+     * @return Set containing all of the Elasticsearch indices in the cache\n+     */\n+    public Map<String, Map<String, Object>> getIndicesCacheStats() {\n+        Map<String, Map<String, Object>> statValues = new HashMap<>();\n+        String indexName;\n+        for (Map.Entry<String, KNNIndexCacheEntry> index : cache.asMap().entrySet()) {\n+            indexName = index.getValue().getEsIndexName();\n+            statValues.putIfAbsent(indexName, new HashMap<>());\n+\n+            statValues.get(indexName).putIfAbsent(GRAPH_COUNT, 0);\n+            statValues.get(indexName).put(GRAPH_COUNT, ((Integer) statValues.get(indexName).get(GRAPH_COUNT)) + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b5db0a1610b15cacf524c77faa83350a760139"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyNjA0MA==", "bodyText": "Thanks for enriching the stats. Few other stats which might be helpful as well\n* graph_memory_usage_percentage in terms of total cache capacity at node level\n\n* index_graph_memory_usage_percentage at index level for that node in terms of total cache capacity\n\n* index_graph_loads at index level which counts the number of graph loads for an index in that node. This helps in identifying the hot indices in the cache. We could add a counter variable in the KNNIndexCacheEntry and increment it when ever the entry is accessed.\n\n\nI think the first two make sense. I am not sure on the last one. Isn't the number of graphs per index somewhat analogous to index_graph_loads?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/97#discussion_r414926040", "createdAt": "2020-04-25T00:00:19Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -147,6 +162,35 @@ public CacheStats getStats() {\n         return cache.stats();\n     }\n \n+    /**\n+     * Get the Elasticsearch indices currently loaded into the Cache\n+     *\n+     * @return Set containing all of the Elasticsearch indices in the cache\n+     */\n+    public Map<String, Map<String, Object>> getIndicesCacheStats() {\n+        Map<String, Map<String, Object>> statValues = new HashMap<>();\n+        String indexName;\n+        for (Map.Entry<String, KNNIndexCacheEntry> index : cache.asMap().entrySet()) {\n+            indexName = index.getValue().getEsIndexName();\n+            statValues.putIfAbsent(indexName, new HashMap<>());\n+\n+            statValues.get(indexName).putIfAbsent(GRAPH_COUNT, 0);\n+            statValues.get(indexName).put(GRAPH_COUNT, ((Integer) statValues.get(indexName).get(GRAPH_COUNT)) + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzNTAwOA=="}, "originalCommit": {"oid": "82b5db0a1610b15cacf524c77faa83350a760139"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3MDExMA==", "bodyText": "Ah right. Third one seem to be already covered. You could ignore the third one.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/97#discussion_r415370110", "createdAt": "2020-04-26T18:25:51Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -147,6 +162,35 @@ public CacheStats getStats() {\n         return cache.stats();\n     }\n \n+    /**\n+     * Get the Elasticsearch indices currently loaded into the Cache\n+     *\n+     * @return Set containing all of the Elasticsearch indices in the cache\n+     */\n+    public Map<String, Map<String, Object>> getIndicesCacheStats() {\n+        Map<String, Map<String, Object>> statValues = new HashMap<>();\n+        String indexName;\n+        for (Map.Entry<String, KNNIndexCacheEntry> index : cache.asMap().entrySet()) {\n+            indexName = index.getValue().getEsIndexName();\n+            statValues.putIfAbsent(indexName, new HashMap<>());\n+\n+            statValues.get(indexName).putIfAbsent(GRAPH_COUNT, 0);\n+            statValues.get(indexName).put(GRAPH_COUNT, ((Integer) statValues.get(indexName).get(GRAPH_COUNT)) + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzNTAwOA=="}, "originalCommit": {"oid": "82b5db0a1610b15cacf524c77faa83350a760139"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2744, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}