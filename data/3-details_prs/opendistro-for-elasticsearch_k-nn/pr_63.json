{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzYyOTA1", "number": 63, "title": "fixed cb", "bodyText": "Issue #, if available:\n#62\nDescription of changes:\nFix KNNStatsRequest call in Circuit Breaker and add an Integ Test case to validate CB.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-09T18:57:22Z", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63", "merged": true, "mergeCommit": {"oid": "29789adc1f5df454c6b348496fb11373fd91853b"}, "closed": true, "closedAt": "2020-03-11T23:48:41Z", "author": {"login": "jmazanec15"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMCfgmAH2gAyMzg1NzYyOTA1OjAxYzYzMGNhNjcxMDQ1MGZjODA3NDViMTUxOWU4ZTMwZWM3YjA2MmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMv86vgFqTM3MzE5Nzg3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "01c630ca6710450fc80745b1519e8e30ec7b062a", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/01c630ca6710450fc80745b1519e8e30ec7b062a", "committedDate": "2020-03-09T18:47:24Z", "message": "fixed cb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab6cf6fc52a553469f0c7c2571ade8525864ec6c", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ab6cf6fc52a553469f0c7c2571ade8525864ec6c", "committedDate": "2020-03-09T20:58:37Z", "message": "added todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58b17f37786984a9325426894f386b29e3830380", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/58b17f37786984a9325426894f386b29e3830380", "committedDate": "2020-03-09T21:21:04Z", "message": "updated comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTY5NDMx", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#pullrequestreview-371569431", "createdAt": "2020-03-09T22:24:59Z", "commit": {"oid": "58b17f37786984a9325426894f386b29e3830380"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoyNDo1OVrOFz7Z9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoyNDo1OVrOFz7Z9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NDk5Nw==", "bodyText": "Nit: Add comment to mention seconds?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r389994997", "createdAt": "2020-03-09T22:24:59Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreaker.java", "diffHunk": "@@ -35,6 +36,7 @@\n  */\n public class KNNCircuitBreaker {\n     private static Logger logger = LogManager.getLogger(KNNCircuitBreaker.class);\n+    public static int CB_TIME_INTERVAL = 2*60;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b17f37786984a9325426894f386b29e3830380"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc", "committedDate": "2020-03-10T00:37:14Z", "message": "cleaned up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzA4MTAz", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#pullrequestreview-372308103", "createdAt": "2020-03-10T20:45:28Z", "commit": {"oid": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NToyOFrOF0gUpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NToyOFrOF0gUpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5OTg0NA==", "bodyText": "Do we still need to sleep here?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r390599844", "createdAt": "2020-03-10T20:45:28Z", "author": {"login": "vamshin"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.action.bulk.BackoffPolicy;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNCircuitBreaker.CB_TIME_INTERVAL;\n+\n+/**\n+ * Integration tests to test Circuit Breaker functionality\n+ */\n+public class KNNCircuitBreakerIT extends BaseKNNIntegTestIT {\n+    /**\n+     * Utility function that sets the cb limit low enough that ingesting 20 documents trips it\n+     */\n+    private void tripCb() throws Exception {\n+        // Make sure that Cb is intially not tripped\n+        assertFalse(isCbTripped());\n+\n+        // Set circuit breaker limit to 1 KB\n+        updateClusterSettings(\"knn.memory.circuit_breaker.limit\", \"1kb\");\n+\n+        // Create Single Shard Index so that all data is hosted on a single node\n+        Settings settings = Settings.builder()\n+                .put(\"number_of_shards\", 1)\n+                .put(\"number_of_replicas\", 0)\n+                .put(\"index.knn\", true)\n+                .build();\n+        createKnnIndex(INDEX_NAME, settings, createKnnIndexMapping(FIELD_NAME, 2));\n+\n+        // Index 20 dummy documents\n+        Float[] vector = {1.3f, 2.2f};\n+        for (int i = 0; i < 10; i++) {\n+            addKnnDoc(INDEX_NAME, Integer.toString(i), FIELD_NAME, vector);\n+        }\n+\n+        // Execute search\n+        float[] qvector = {1.9f, 2.4f};\n+        int k = 10;\n+        searchKNNIndex(INDEX_NAME, new KNNQueryBuilder(FIELD_NAME, qvector, k), k);\n+\n+        // Assert that Cb get triggered\n+        assertTrue(isCbTripped());\n+    }\n+\n+    public boolean isCbTripped() throws Exception {\n+        Response response = getKnnStats(Collections.emptyList(),\n+                Collections.singletonList(\"circuit_breaker_triggered\"));\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        Map<String, Object> clusterStats = parseClusterStatsResponse(responseBody);\n+        return (Boolean) clusterStats.get(\"circuit_breaker_triggered\");\n+    }\n+\n+    public void testCbTripped() throws Exception {\n+        tripCb();\n+    }\n+\n+    public void testCbUntrips() throws Exception {\n+        updateClusterSettings(\"knn.circuit_breaker.triggered\", \"true\");\n+        //TODO: Attempt to find a better way to trigger runnable than waiting 2 minutes for it to finish\n+        Thread.sleep(CB_TIME_INTERVAL*1000);\n+        assertFalse(isCbTripped());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzA4NzQ4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#pullrequestreview-372308748", "createdAt": "2020-03-10T20:46:25Z", "commit": {"oid": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NjoyNVrOF0gWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NjoyNVrOF0gWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDM3OA==", "bodyText": "Looks like BackoffPolicy takes care of waiting. We can remove these assertions?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r390600378", "createdAt": "2020-03-10T20:46:25Z", "author": {"login": "vamshin"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.action.bulk.BackoffPolicy;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNCircuitBreaker.CB_TIME_INTERVAL;\n+\n+/**\n+ * Integration tests to test Circuit Breaker functionality\n+ */\n+public class KNNCircuitBreakerIT extends BaseKNNIntegTestIT {\n+    /**\n+     * Utility function that sets the cb limit low enough that ingesting 20 documents trips it\n+     */\n+    private void tripCb() throws Exception {\n+        // Make sure that Cb is intially not tripped\n+        assertFalse(isCbTripped());\n+\n+        // Set circuit breaker limit to 1 KB\n+        updateClusterSettings(\"knn.memory.circuit_breaker.limit\", \"1kb\");\n+\n+        // Create Single Shard Index so that all data is hosted on a single node\n+        Settings settings = Settings.builder()\n+                .put(\"number_of_shards\", 1)\n+                .put(\"number_of_replicas\", 0)\n+                .put(\"index.knn\", true)\n+                .build();\n+        createKnnIndex(INDEX_NAME, settings, createKnnIndexMapping(FIELD_NAME, 2));\n+\n+        // Index 20 dummy documents\n+        Float[] vector = {1.3f, 2.2f};\n+        for (int i = 0; i < 10; i++) {\n+            addKnnDoc(INDEX_NAME, Integer.toString(i), FIELD_NAME, vector);\n+        }\n+\n+        // Execute search\n+        float[] qvector = {1.9f, 2.4f};\n+        int k = 10;\n+        searchKNNIndex(INDEX_NAME, new KNNQueryBuilder(FIELD_NAME, qvector, k), k);\n+\n+        // Assert that Cb get triggered\n+        assertTrue(isCbTripped());\n+    }\n+\n+    public boolean isCbTripped() throws Exception {\n+        Response response = getKnnStats(Collections.emptyList(),\n+                Collections.singletonList(\"circuit_breaker_triggered\"));\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        Map<String, Object> clusterStats = parseClusterStatsResponse(responseBody);\n+        return (Boolean) clusterStats.get(\"circuit_breaker_triggered\");\n+    }\n+\n+    public void testCbTripped() throws Exception {\n+        tripCb();\n+    }\n+\n+    public void testCbUntrips() throws Exception {\n+        updateClusterSettings(\"knn.circuit_breaker.triggered\", \"true\");\n+        //TODO: Attempt to find a better way to trigger runnable than waiting 2 minutes for it to finish\n+        Thread.sleep(CB_TIME_INTERVAL*1000);\n+        assertFalse(isCbTripped());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6eeb3835bfe9edf9de22edba3cc1a70f1bfc082", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b6eeb3835bfe9edf9de22edba3cc1a70f1bfc082", "committedDate": "2020-03-11T16:29:40Z", "message": "stopped using backoff policy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTk3ODc4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#pullrequestreview-373197878", "createdAt": "2020-03-11T23:45:15Z", "commit": {"oid": "b6eeb3835bfe9edf9de22edba3cc1a70f1bfc082"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1327, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}