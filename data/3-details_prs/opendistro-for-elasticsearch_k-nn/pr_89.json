{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDczOTQ2", "number": 89, "title": "Add stats to track knn request counts", "bodyText": "Issue #, if available:\n#88\nDescription of changes:\nPR adds stats to track the number of requests and errors for KNN query and index operations.\nFor query operations, bookkeeping is added in the queryIndex function in KNNIndex. For index operations, it is added in the KNNVectorFieldMapper parse function.\nUnit tests have been added to make sure that the counting functionality works properly.\nDocumentation has been updated as well.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-10T21:20:00Z", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89", "merged": true, "mergeCommit": {"oid": "3cbcc9fb1fb6cf24bb387f39805ecab992cde927"}, "closed": true, "closedAt": "2020-04-23T20:55:32Z", "author": {"login": "jmazanec15"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWXu79AH2gAyNDAyMDczOTQ2OjM5OWVlNGMyY2FmODc2NDUxMjU3OTVjYTdlNDhkODYxMWIwN2JmNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaWQhKAFqTM5ODc3NDQxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/399ee4c2caf87645125795ca7e48d8611b07bf57", "committedDate": "2020-04-10T21:11:30Z", "message": "added stats to track knn request counts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjg0NjM1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#pullrequestreview-392684635", "createdAt": "2020-04-14T07:53:50Z", "commit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NzoyNVrOGFCl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODowOTozMVrOGFDCHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzODUyMw==", "bodyText": "These Exceptions will only include the parsing errors(customer error) which we could ignore. Graphs are indexed part of the KNN80DocValuesConsumer. We may want to keep track of failures for graph creation there", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r407938523", "createdAt": "2020-04-14T07:57:25Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -230,46 +231,52 @@ public Query termQuery(Object value, QueryShardContext context) {\n \n     @Override\n     public void parse(ParseContext context) throws IOException {\n-        if (!KNNSettings.isKNNPluginEnabled()) {\n-            throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n-                                                    \"update knn.plugin.enabled setting to true\");\n-        }\n+        KNNCounter.GRAPH_INDEX_REQUESTS.increment();\n+        try {\n+            if (!KNNSettings.isKNNPluginEnabled()) {\n+                throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n+                        \"update knn.plugin.enabled setting to true\");\n+            }\n \n-        context.path().add(simpleName());\n+            context.path().add(simpleName());\n \n-        ArrayList<Float> vector = new ArrayList<>();\n-        XContentParser.Token token = context.parser().currentToken();\n+            ArrayList<Float> vector = new ArrayList<>();\n+            XContentParser.Token token = context.parser().currentToken();\n \n-        if (token == XContentParser.Token.START_ARRAY) {\n-            token = context.parser().nextToken();\n-            while (token != XContentParser.Token.END_ARRAY) {\n-                vector.add(context.parser().floatValue());\n+            if (token == XContentParser.Token.START_ARRAY) {\n                 token = context.parser().nextToken();\n+                while (token != XContentParser.Token.END_ARRAY) {\n+                    vector.add(context.parser().floatValue());\n+                    token = context.parser().nextToken();\n+                }\n+            } else if (token == XContentParser.Token.VALUE_NUMBER) {\n+                vector.add(context.parser().floatValue());\n+                context.parser().nextToken();\n             }\n-        } else if (token == XContentParser.Token.VALUE_NUMBER) {\n-            vector.add(context.parser().floatValue());\n-            context.parser().nextToken();\n-        }\n \n-        if (fieldType().dimension != vector.size()) {\n-            String errorMessage = String.format(\"Vector dimension mismatch. Expected: %d, Given: %d\",\n-                    fieldType().dimension, vector.size());\n-            throw new IllegalArgumentException(errorMessage);\n-        }\n+            if (fieldType().dimension != vector.size()) {\n+                String errorMessage = String.format(\"Vector dimension mismatch. Expected: %d, Given: %d\",\n+                        fieldType().dimension, vector.size());\n+                throw new IllegalArgumentException(errorMessage);\n+            }\n \n-        float[] array = new float[vector.size()];\n-        int i = 0;\n-        for (Float f : vector) {\n-            array[i++] = f;\n-        }\n+            float[] array = new float[vector.size()];\n+            int i = 0;\n+            for (Float f : vector) {\n+                array[i++] = f;\n+            }\n \n-        VectorField point = new VectorField(name(), array, fieldType());\n+            VectorField point = new VectorField(name(), array, fieldType());\n \n-        context.doc().add(point);\n-        if (fieldType().stored()) {\n-            context.doc().add(new StoredField(name(), point.toString()));\n+            context.doc().add(point);\n+            if (fieldType().stored()) {\n+                context.doc().add(new StoredField(name(), point.toString()));\n+            }\n+            context.path().remove();\n+        } catch (Exception ex) {\n+            KNNCounter.GRAPH_INDEX_ERRORS.increment();\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzOTQ5Ng==", "bodyText": "just a thought, why not we just rely on load_exception_count metric from cache stats. This seem to track number of exceptions while loading graph which will be invoked during queries?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r407939496", "createdAt": "2020-04-14T07:58:48Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/v1736/KNNIndex.java", "diffHunk": "@@ -84,6 +85,9 @@ public long getIndexSize() {\n                     }\n             );\n \n+        } catch (Exception ex) {\n+            KNNCounter.GRAPH_QUERY_ERRORS.increment();\n+            throw new RuntimeException(\"Unable to query the index: \" + ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTc1Nw==", "bodyText": "This might add a little confusion for bulk requests, which could index multiple vectors but still part of same request. If the intention is to count the number of graph requests , probably we could count at KNN80DocValuesConsumer.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r407945757", "createdAt": "2020-04-14T08:09:31Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -230,46 +231,52 @@ public Query termQuery(Object value, QueryShardContext context) {\n \n     @Override\n     public void parse(ParseContext context) throws IOException {\n-        if (!KNNSettings.isKNNPluginEnabled()) {\n-            throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n-                                                    \"update knn.plugin.enabled setting to true\");\n-        }\n+        KNNCounter.GRAPH_INDEX_REQUESTS.increment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2ccff2a2125837b76a0730f8b0e7abaa6f591b", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1a2ccff2a2125837b76a0730f8b0e7abaa6f591b", "committedDate": "2020-04-14T16:40:05Z", "message": "Merge branch 'master' of https://github.com/opendistro-for-elasticsearch/k-NN into knn-counters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308d051c7df412058baa4e6f27f84519556f5cd5", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/308d051c7df412058baa4e6f27f84519556f5cd5", "committedDate": "2020-04-16T18:08:24Z", "message": "moved graph index counters to KNN80DocValuesConsumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "824a8b362b3c8a047d70712da2580549b200592b", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/824a8b362b3c8a047d70712da2580549b200592b", "committedDate": "2020-04-22T21:46:49Z", "message": "add counters for knn queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beda3965f4c379b288f20e3e9afd8e6e14325900", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/beda3965f4c379b288f20e3e9afd8e6e14325900", "committedDate": "2020-04-22T21:46:59Z", "message": "Merge branch 'master' of https://github.com/opendistro-for-elasticsearch/k-NN into knn-counters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjE1Nzkx", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#pullrequestreview-398615791", "createdAt": "2020-04-22T21:50:41Z", "commit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo1MDo0MVrOGKNWLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo1MDo0MVrOGKNWLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NzYxNA==", "bodyText": "How about we add metrics for counting KNNQueries?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r413357614", "createdAt": "2020-04-22T21:50:41Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -215,6 +215,18 @@ The number of cache misses that have occurred on the node. A cache miss occurs w\n #### graph_memory_usage\n The current weight of the cache (the total size in native memory of all of the graphs) in Kilobytes.\n \n+#### graph_index_requests\n+The number of requests to add the knn_vector field of a document into a graph.\n+\n+#### graph_index_errors\n+The number of requests to add the knn_vector field of a document into a graph that have produced an error.\n+\n+#### graph_query_requests\n+The number of graph queries that have been made. \n+\n+#### graph_query_errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06cd43e1d402d7c9ff2625e441305d67902c360a", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/06cd43e1d402d7c9ff2625e441305d67902c360a", "committedDate": "2020-04-22T22:54:57Z", "message": "move knn query req/err counters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45cd741dadfa65536667bcd662407a846babbd33", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/45cd741dadfa65536667bcd662407a846babbd33", "committedDate": "2020-04-22T23:00:58Z", "message": "remove KNN Query Errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69a9c892816322a119b0aa0f4213f1e92a64c601", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/69a9c892816322a119b0aa0f4213f1e92a64c601", "committedDate": "2020-04-22T23:08:27Z", "message": "Updated Readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Nzc0NDEx", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#pullrequestreview-398774411", "createdAt": "2020-04-23T05:44:04Z", "commit": {"oid": "69a9c892816322a119b0aa0f4213f1e92a64c601"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1343, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}