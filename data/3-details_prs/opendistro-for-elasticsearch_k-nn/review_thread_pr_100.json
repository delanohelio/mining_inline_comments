{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzAzNTI4", "number": 100, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo0MDozOVrOD23RIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo0MDozOVrOD23RIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODU1MjAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo0MDozOVrOGM0gUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo1MTo0MFrOGM06EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5NjMzNg==", "bodyText": "Should we also add check for Float.isInfinite?\nhttps://docs.oracle.com/javase/7/docs/api/java/lang/Float.html#isInfinite(float)", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/100#discussion_r416096336", "createdAt": "2020-04-27T19:40:39Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -250,10 +250,16 @@ public void parse(ParseContext context) throws IOException {\n         if (token == XContentParser.Token.START_ARRAY) {\n             token = context.parser().nextToken();\n             while (token != XContentParser.Token.END_ARRAY) {\n+                if (Float.isNaN(context.parser().floatValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b528ba542af3ead00f5a2bcc457e2920dcd93c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwMjkyOA==", "bodyText": "Yes I think that makes sense.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/100#discussion_r416102928", "createdAt": "2020-04-27T19:51:40Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -250,10 +250,16 @@ public void parse(ParseContext context) throws IOException {\n         if (token == XContentParser.Token.START_ARRAY) {\n             token = context.parser().nextToken();\n             while (token != XContentParser.Token.END_ARRAY) {\n+                if (Float.isNaN(context.parser().floatValue())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5NjMzNg=="}, "originalCommit": {"oid": "d7b528ba542af3ead00f5a2bcc457e2920dcd93c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2746, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}