{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDczOTQ2", "number": 89, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NzoyNVrODxhoog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo1MDo0MVrOD0_QWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU3ODkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NzoyNVrOGFCl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzowMTozMFrOGGuygQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzODUyMw==", "bodyText": "These Exceptions will only include the parsing errors(customer error) which we could ignore. Graphs are indexed part of the KNN80DocValuesConsumer. We may want to keep track of failures for graph creation there", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r407938523", "createdAt": "2020-04-14T07:57:25Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -230,46 +231,52 @@ public Query termQuery(Object value, QueryShardContext context) {\n \n     @Override\n     public void parse(ParseContext context) throws IOException {\n-        if (!KNNSettings.isKNNPluginEnabled()) {\n-            throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n-                                                    \"update knn.plugin.enabled setting to true\");\n-        }\n+        KNNCounter.GRAPH_INDEX_REQUESTS.increment();\n+        try {\n+            if (!KNNSettings.isKNNPluginEnabled()) {\n+                throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n+                        \"update knn.plugin.enabled setting to true\");\n+            }\n \n-        context.path().add(simpleName());\n+            context.path().add(simpleName());\n \n-        ArrayList<Float> vector = new ArrayList<>();\n-        XContentParser.Token token = context.parser().currentToken();\n+            ArrayList<Float> vector = new ArrayList<>();\n+            XContentParser.Token token = context.parser().currentToken();\n \n-        if (token == XContentParser.Token.START_ARRAY) {\n-            token = context.parser().nextToken();\n-            while (token != XContentParser.Token.END_ARRAY) {\n-                vector.add(context.parser().floatValue());\n+            if (token == XContentParser.Token.START_ARRAY) {\n                 token = context.parser().nextToken();\n+                while (token != XContentParser.Token.END_ARRAY) {\n+                    vector.add(context.parser().floatValue());\n+                    token = context.parser().nextToken();\n+                }\n+            } else if (token == XContentParser.Token.VALUE_NUMBER) {\n+                vector.add(context.parser().floatValue());\n+                context.parser().nextToken();\n             }\n-        } else if (token == XContentParser.Token.VALUE_NUMBER) {\n-            vector.add(context.parser().floatValue());\n-            context.parser().nextToken();\n-        }\n \n-        if (fieldType().dimension != vector.size()) {\n-            String errorMessage = String.format(\"Vector dimension mismatch. Expected: %d, Given: %d\",\n-                    fieldType().dimension, vector.size());\n-            throw new IllegalArgumentException(errorMessage);\n-        }\n+            if (fieldType().dimension != vector.size()) {\n+                String errorMessage = String.format(\"Vector dimension mismatch. Expected: %d, Given: %d\",\n+                        fieldType().dimension, vector.size());\n+                throw new IllegalArgumentException(errorMessage);\n+            }\n \n-        float[] array = new float[vector.size()];\n-        int i = 0;\n-        for (Float f : vector) {\n-            array[i++] = f;\n-        }\n+            float[] array = new float[vector.size()];\n+            int i = 0;\n+            for (Float f : vector) {\n+                array[i++] = f;\n+            }\n \n-        VectorField point = new VectorField(name(), array, fieldType());\n+            VectorField point = new VectorField(name(), array, fieldType());\n \n-        context.doc().add(point);\n-        if (fieldType().stored()) {\n-            context.doc().add(new StoredField(name(), point.toString()));\n+            context.doc().add(point);\n+            if (fieldType().stored()) {\n+                context.doc().add(new StoredField(name(), point.toString()));\n+            }\n+            context.path().remove();\n+        } catch (Exception ex) {\n+            KNNCounter.GRAPH_INDEX_ERRORS.increment();\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxMTIzMw==", "bodyText": "Oh okay that makes sense. Will update.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r409711233", "createdAt": "2020-04-16T17:01:30Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -230,46 +231,52 @@ public Query termQuery(Object value, QueryShardContext context) {\n \n     @Override\n     public void parse(ParseContext context) throws IOException {\n-        if (!KNNSettings.isKNNPluginEnabled()) {\n-            throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n-                                                    \"update knn.plugin.enabled setting to true\");\n-        }\n+        KNNCounter.GRAPH_INDEX_REQUESTS.increment();\n+        try {\n+            if (!KNNSettings.isKNNPluginEnabled()) {\n+                throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n+                        \"update knn.plugin.enabled setting to true\");\n+            }\n \n-        context.path().add(simpleName());\n+            context.path().add(simpleName());\n \n-        ArrayList<Float> vector = new ArrayList<>();\n-        XContentParser.Token token = context.parser().currentToken();\n+            ArrayList<Float> vector = new ArrayList<>();\n+            XContentParser.Token token = context.parser().currentToken();\n \n-        if (token == XContentParser.Token.START_ARRAY) {\n-            token = context.parser().nextToken();\n-            while (token != XContentParser.Token.END_ARRAY) {\n-                vector.add(context.parser().floatValue());\n+            if (token == XContentParser.Token.START_ARRAY) {\n                 token = context.parser().nextToken();\n+                while (token != XContentParser.Token.END_ARRAY) {\n+                    vector.add(context.parser().floatValue());\n+                    token = context.parser().nextToken();\n+                }\n+            } else if (token == XContentParser.Token.VALUE_NUMBER) {\n+                vector.add(context.parser().floatValue());\n+                context.parser().nextToken();\n             }\n-        } else if (token == XContentParser.Token.VALUE_NUMBER) {\n-            vector.add(context.parser().floatValue());\n-            context.parser().nextToken();\n-        }\n \n-        if (fieldType().dimension != vector.size()) {\n-            String errorMessage = String.format(\"Vector dimension mismatch. Expected: %d, Given: %d\",\n-                    fieldType().dimension, vector.size());\n-            throw new IllegalArgumentException(errorMessage);\n-        }\n+            if (fieldType().dimension != vector.size()) {\n+                String errorMessage = String.format(\"Vector dimension mismatch. Expected: %d, Given: %d\",\n+                        fieldType().dimension, vector.size());\n+                throw new IllegalArgumentException(errorMessage);\n+            }\n \n-        float[] array = new float[vector.size()];\n-        int i = 0;\n-        for (Float f : vector) {\n-            array[i++] = f;\n-        }\n+            float[] array = new float[vector.size()];\n+            int i = 0;\n+            for (Float f : vector) {\n+                array[i++] = f;\n+            }\n \n-        VectorField point = new VectorField(name(), array, fieldType());\n+            VectorField point = new VectorField(name(), array, fieldType());\n \n-        context.doc().add(point);\n-        if (fieldType().stored()) {\n-            context.doc().add(new StoredField(name(), point.toString()));\n+            context.doc().add(point);\n+            if (fieldType().stored()) {\n+                context.doc().add(new StoredField(name(), point.toString()));\n+            }\n+            context.path().remove();\n+        } catch (Exception ex) {\n+            KNNCounter.GRAPH_INDEX_ERRORS.increment();\n+            throw ex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzODUyMw=="}, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU4NTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/v1736/KNNIndex.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1ODo0OFrOGFCpqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNToyMToxNFrOGKXENQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzOTQ5Ng==", "bodyText": "just a thought, why not we just rely on load_exception_count metric from cache stats. This seem to track number of exceptions while loading graph which will be invoked during queries?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r407939496", "createdAt": "2020-04-14T07:58:48Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/v1736/KNNIndex.java", "diffHunk": "@@ -84,6 +85,9 @@ public long getIndexSize() {\n                     }\n             );\n \n+        } catch (Exception ex) {\n+            KNNCounter.GRAPH_QUERY_ERRORS.increment();\n+            throw new RuntimeException(\"Unable to query the index: \" + ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MTM5Nw==", "bodyText": "Using load_exception_count would only count exceptions for loading the graph into memory, not the actual query of the graph. Adding the metric here allows us to check if the library query of the graph fails. In your opinion, should this metric track the number of query errors where a query is a call to the ES search API for knn, or for a query where a query is a call to the library function?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r409751397", "createdAt": "2020-04-16T18:07:18Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/v1736/KNNIndex.java", "diffHunk": "@@ -84,6 +85,9 @@ public long getIndexSize() {\n                     }\n             );\n \n+        } catch (Exception ex) {\n+            KNNCounter.GRAPH_QUERY_ERRORS.increment();\n+            throw new RuntimeException(\"Unable to query the index: \" + ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzOTQ5Ng=="}, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNjg1Mw==", "bodyText": "makes sense. It should track the number of query errors.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r413516853", "createdAt": "2020-04-23T05:21:14Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/v1736/KNNIndex.java", "diffHunk": "@@ -84,6 +85,9 @@ public long getIndexSize() {\n                     }\n             );\n \n+        } catch (Exception ex) {\n+            KNNCounter.GRAPH_QUERY_ERRORS.increment();\n+            throw new RuntimeException(\"Unable to query the index: \" + ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzOTQ5Ng=="}, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjYyNDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODowOTozMVrOGFDCHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1NTowMFrOGGwy3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTc1Nw==", "bodyText": "This might add a little confusion for bulk requests, which could index multiple vectors but still part of same request. If the intention is to count the number of graph requests , probably we could count at KNN80DocValuesConsumer.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r407945757", "createdAt": "2020-04-14T08:09:31Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -230,46 +231,52 @@ public Query termQuery(Object value, QueryShardContext context) {\n \n     @Override\n     public void parse(ParseContext context) throws IOException {\n-        if (!KNNSettings.isKNNPluginEnabled()) {\n-            throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n-                                                    \"update knn.plugin.enabled setting to true\");\n-        }\n+        KNNCounter.GRAPH_INDEX_REQUESTS.increment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NDA5Mg==", "bodyText": "Yes, the intention of this metric is to count the total number of requests to index graphs. Will move to KNN80DocValuesConsumer", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r409744092", "createdAt": "2020-04-16T17:55:00Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -230,46 +231,52 @@ public Query termQuery(Object value, QueryShardContext context) {\n \n     @Override\n     public void parse(ParseContext context) throws IOException {\n-        if (!KNNSettings.isKNNPluginEnabled()) {\n-            throw new IllegalStateException(\"KNN plugin is disabled. To enable \" +\n-                                                    \"update knn.plugin.enabled setting to true\");\n-        }\n+        KNNCounter.GRAPH_INDEX_REQUESTS.increment();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTc1Nw=="}, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODg4OTIwOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo1MDo0MVrOGKNWLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjo1NToyMlrOGKPLIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NzYxNA==", "bodyText": "How about we add metrics for counting KNNQueries?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r413357614", "createdAt": "2020-04-22T21:50:41Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -215,6 +215,18 @@ The number of cache misses that have occurred on the node. A cache miss occurs w\n #### graph_memory_usage\n The current weight of the cache (the total size in native memory of all of the graphs) in Kilobytes.\n \n+#### graph_index_requests\n+The number of requests to add the knn_vector field of a document into a graph.\n+\n+#### graph_index_errors\n+The number of requests to add the knn_vector field of a document into a graph that have produced an error.\n+\n+#### graph_query_requests\n+The number of graph queries that have been made. \n+\n+#### graph_query_errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM4NzU1Mw==", "bodyText": "Makes sense. Will add", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/89#discussion_r413387553", "createdAt": "2020-04-22T22:55:22Z", "author": {"login": "jmazanec15"}, "path": "README.md", "diffHunk": "@@ -215,6 +215,18 @@ The number of cache misses that have occurred on the node. A cache miss occurs w\n #### graph_memory_usage\n The current weight of the cache (the total size in native memory of all of the graphs) in Kilobytes.\n \n+#### graph_index_requests\n+The number of requests to add the knn_vector field of a document into a graph.\n+\n+#### graph_index_errors\n+The number of requests to add the knn_vector field of a document into a graph that have produced an error.\n+\n+#### graph_query_requests\n+The number of graph queries that have been made. \n+\n+#### graph_query_errors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NzYxNA=="}, "originalCommit": {"oid": "399ee4c2caf87645125795ca7e48d8611b07bf57"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2735, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}