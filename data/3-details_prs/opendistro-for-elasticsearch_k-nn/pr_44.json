{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjQ5OTcy", "number": 44, "title": "updated readme", "bodyText": "Issue #, if available:\n#40\nDescription of changes:\nAdded description of settings and stats to the Readme. Additionally, I added Credits and Acks section.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-02-08T00:00:29Z", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44", "merged": true, "mergeCommit": {"oid": "261a1a15957ab7a23da72f6be4e66fe61d24a97c"}, "closed": true, "closedAt": "2020-02-10T18:33:16Z", "author": {"login": "jmazanec15"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCIXR-AH2gAyMzcyNjQ5OTcyOjBjY2M3MmRjZWVkNjE5YWQ5N2ZlZThmYzA1ODY0MmYwZjRhM2YzNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDBXQrAFqTM1NjE1OTM3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/0ccc72dceed619ad97fee8fc058642f0f4a3f35c", "committedDate": "2020-02-07T23:58:36Z", "message": "updated readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTA4NDM4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#pullrequestreview-355508438", "createdAt": "2020-02-08T00:24:29Z", "commit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoyNDozMFrOFnN3LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDozOTo1OVrOFnOAvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NTkwMA==", "bodyText": "You must provide index-level settings when you create the index. If you don't provide these settings, KNN uses its default values. These settings are static, which means you can't modify them after index creation.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376665900", "createdAt": "2020-02-08T00:24:30Z", "author": {"login": "aetter"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+KNN Index level settings should be provided at the time of the index creation. If the settings are not provided, default values will be use. These settings are static which means they cannot be changed after index creation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NjA0NA==", "bodyText": "Probably OK to remove this section, given that we just linked to the page three times.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376666044", "createdAt": "2020-02-08T00:25:33Z", "author": {"login": "aetter"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+KNN Index level settings should be provided at the time of the index creation. If the settings are not provided, default values will be use. These settings are static which means they cannot be changed after index creation.\n \n+##### index.knn\n+This setting indicates whether the index uses the KNN Codec or not. Possible values are *true*, *false*. Default value is *false*.\n \n-curl -X PUT \"localhost:9200/myindex/_doc/3\" -H 'Content-Type: application/json' -d'\n+##### index.knn.algo_param.m\n+This setting is an HNSW parameter that represents \"the number of bi-directional links created for every new element during construction. Reasonable range for M is 2-100. Higher M work better on datasets with high intrinsic dimensionality and/or high recall, while low M work better for datasets with low intrinsic dimensionality and/or low recalls. The parameter also determines the algorithm's memory consumption, which is roughly M * 8-10 bytes per stored element.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *16*.\n+\n+##### index.knn.algo_param.ef_search\n+This setting is an HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors (used during the search). Higher ef leads to more accurate but slower search.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### index.knn.algo_param.ef_construction\n+This setting is an HNSW parameter that \"the parameter has the same meaning as ef, but controls the index_time/index_accuracy. Bigger ef_construction leads to longer construction, but better index quality.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### More Information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NjM4Nw==", "bodyText": "Can you clarify the meaning here? As in, a user ran a search, and the particular graph the user was trying to search was in memory, so that's... one hit? A hit for each result returned?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376666387", "createdAt": "2020-02-08T00:27:45Z", "author": {"login": "aetter"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+KNN Index level settings should be provided at the time of the index creation. If the settings are not provided, default values will be use. These settings are static which means they cannot be changed after index creation.\n \n+##### index.knn\n+This setting indicates whether the index uses the KNN Codec or not. Possible values are *true*, *false*. Default value is *false*.\n \n-curl -X PUT \"localhost:9200/myindex/_doc/3\" -H 'Content-Type: application/json' -d'\n+##### index.knn.algo_param.m\n+This setting is an HNSW parameter that represents \"the number of bi-directional links created for every new element during construction. Reasonable range for M is 2-100. Higher M work better on datasets with high intrinsic dimensionality and/or high recall, while low M work better for datasets with low intrinsic dimensionality and/or low recalls. The parameter also determines the algorithm's memory consumption, which is roughly M * 8-10 bytes per stored element.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *16*.\n+\n+##### index.knn.algo_param.ef_search\n+This setting is an HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors (used during the search). Higher ef leads to more accurate but slower search.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### index.knn.algo_param.ef_construction\n+This setting is an HNSW parameter that \"the parameter has the same meaning as ef, but controls the index_time/index_accuracy. Bigger ef_construction leads to longer construction, but better index quality.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### More Information\n+For more information, please refer to https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md.\n+\n+##### Example\n+```\n+PUT /my_index/_settings\n {\n-\"my_vector\" : [3.5, 4.5],\n-\"price\":15\n+    \"index\" : {\n+        \"index.knn.algo_param.m\": 18, \n+        \"index.knn.algo_param.ef_search\" : 20,\n+        \"index.knn.algo_param.ef_construction\" : 40,\n+    }\n }\n-'\n+```\n+\n+### Cluster Level Settings\n+#### General\n+##### knn.plugin.enabled\n+This setting indicates whether or not the KNN Plugin is enabled. If it is disabled, a user will not be able to index knn_vector fields nor run KNN queries. The default value is *true.*\n+\n+##### knn.algo_param.index_thread_qty\n+This setting specifies how many threads the NMS library should use to create the graph in memory. By default, the NMS library sets this value to the number of cores the machine has. However, because ES can spawn the same number of threads for searching, this could lead to (number of cores)^2 threads running and lead to 100% CPU utilization. The default value is *1.*\n+\n+#### Cache\n+The KNN Plugin uses a Guava cache to keep track of the graphs currently loaded into native memory. When a query is run against a graph for the first time, the graph is loaded into native memory (outside the Java heap). Because Elasticsearch runs inside of the JVM, it cannot manage native memory directly. So, it keeps track of native memory by adding an entry into a Guava cache that contains the pointer to the graph in native memory and how much memory it uses.  The cache\u2019s weight just means how much native memory all of the elements in the cache are taking up. If the maximum weight (this value is set by *knn.memory.circuit_breaker.limit*) of the cache is exceeded when it tries to load a graph into memory, the cache evicts an entry to make room for the new entry. Additionally, the cache can evict entries based on how long it has been since they were last accessed. \n+\n+##### knn.cache.item.expiry.enabled\n+This setting indicates that the cache should evict entries that have expired (not been accessed for *knn.cache.item.expiry.minutes*). The default value is *false.*\n+\n+##### knn.cache.item.expiry.minutes\n+This setting indicates how long an item can be in the cache without being accessed before it expires. When an entry expires, it gets evicted from the cache. The default value is *180 minutes.*\n+\n+#### Circuit Breaker\n+For KNN, the circuit breaker is used to indicate when performance may degrade because the graphs loaded into native memory are reaching the cluster\u2019s total limits. Currently, the system does not perform any action once this limit is reached.\n+\n+##### knn.memory.circuit_breaker.enabled\n+This setting enables or disables the circuit breaker feature.  Disabling this setting will keep you at risk of Out of memory as we do not have control on the memory usage for the graphs. The default value is *true*. \n+\n+##### knn.memory.circuit_breaker.limit\n+This setting indicates the maximum capacity of the cache. When the cache attempts to load in a graph that exceeds this limit, it is forced to evict an entry and *knn.circuit_breaker.triggered *is set to *true.* The default value for this setting is *60% *of the machines total memory outside the Elasticsearch jvm . However, a value in *KB* can be given as well.\n \n+###### Example\n+If a machine has 100GB RAM. Elasticsearch jvm uses 32GB. Then the default circuit breaker limit is set at 60% of the remaining memory(60% of (100GB -32GB) = 40.8GB)\n \n-curl -X PUT \"localhost:9200/myindex/_doc/4\" -H 'Content-Type: application/json' -d'\n+##### knn.circuit_breaker.triggered\n+This setting indicates whether  or not the circuit breaker has been triggered. The circuit breaker is triggered if any node in the cluster has had to evict an entry from the cache because the cache\u2019s capacity had been reached. The circuit breaker is untriggered when the size of the entries in the cache goes below *knn.circuit_breaker.unset.percentage. *This can occur when an index is deleted or entries in the cache expire when *knn.cache.item.expiry.enabled* is true. The default value is *False.*\n+\n+##### knn.circuit_breaker.unset.percentage\n+This setting indicates under what percentage of the cache\u2019s total capacity the cache\u2019s current size must be in order to untrigger the circuit breaker. The default value is *75% *of total cache\u2019s capacit*y.*\n+\n+###### Example\n+```\n+PUT /_cluster/settings\n {\n-\"my_vector\" : [5.5, 6.5],\n-\"price\":17\n+    \"persistent\" : {\n+        \"knn.plugin.enabled\" : true,\n+        \"knn.algo_param.index_thread_qty\" : 1,\n+        \"knn.cache.item.expiry.enabled\": true,\n+        \"knn.cache.item.expiry.minutes\": 15,\n+        \"knn.memory.circuit_breaker.enabled\" : true,\n+        \"knn.memory.circuit_breaker.limit\" : \"55%\",\n+        \"knn.circuit_breaker.unset.percentage\": 23\n+    }\n }\n-'\n+```\n+\n+## Stats\n+The KNN Stats API provides information about the current status of the KNN Plugin. The plugin keeps track of both cluster level and node level stats. Cluster level stats have a single value for the entire cluster. Node level stats have a single value for each node in the cluster. A user can filter their query by nodeID and statName in the following way:\n+```\n+GET /_opendistro/_knn/nodeId1,nodeId2/stats/statName1,statName2\n+```\n+\n+### Cluster Stats\n+#### circuit_breaker_triggered\n+Indicates whether the circuit breaker is triggered.\n+\n+### Node Stats\n+#### eviction_count\n+The number of evictions that have occurred in the guava cache. *note:* explicit evictions that occur because of index deletion are not counted.\n+\n+#### hit_count\n+The number of cache hits that have occurred on the node.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NjUzOA==", "bodyText": "Ditto here. A user ran a search, the particular graph wasn't in memory, so KNN had to load it in...? Does that constitute one miss?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376666538", "createdAt": "2020-02-08T00:28:43Z", "author": {"login": "aetter"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+KNN Index level settings should be provided at the time of the index creation. If the settings are not provided, default values will be use. These settings are static which means they cannot be changed after index creation.\n \n+##### index.knn\n+This setting indicates whether the index uses the KNN Codec or not. Possible values are *true*, *false*. Default value is *false*.\n \n-curl -X PUT \"localhost:9200/myindex/_doc/3\" -H 'Content-Type: application/json' -d'\n+##### index.knn.algo_param.m\n+This setting is an HNSW parameter that represents \"the number of bi-directional links created for every new element during construction. Reasonable range for M is 2-100. Higher M work better on datasets with high intrinsic dimensionality and/or high recall, while low M work better for datasets with low intrinsic dimensionality and/or low recalls. The parameter also determines the algorithm's memory consumption, which is roughly M * 8-10 bytes per stored element.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *16*.\n+\n+##### index.knn.algo_param.ef_search\n+This setting is an HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors (used during the search). Higher ef leads to more accurate but slower search.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### index.knn.algo_param.ef_construction\n+This setting is an HNSW parameter that \"the parameter has the same meaning as ef, but controls the index_time/index_accuracy. Bigger ef_construction leads to longer construction, but better index quality.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### More Information\n+For more information, please refer to https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md.\n+\n+##### Example\n+```\n+PUT /my_index/_settings\n {\n-\"my_vector\" : [3.5, 4.5],\n-\"price\":15\n+    \"index\" : {\n+        \"index.knn.algo_param.m\": 18, \n+        \"index.knn.algo_param.ef_search\" : 20,\n+        \"index.knn.algo_param.ef_construction\" : 40,\n+    }\n }\n-'\n+```\n+\n+### Cluster Level Settings\n+#### General\n+##### knn.plugin.enabled\n+This setting indicates whether or not the KNN Plugin is enabled. If it is disabled, a user will not be able to index knn_vector fields nor run KNN queries. The default value is *true.*\n+\n+##### knn.algo_param.index_thread_qty\n+This setting specifies how many threads the NMS library should use to create the graph in memory. By default, the NMS library sets this value to the number of cores the machine has. However, because ES can spawn the same number of threads for searching, this could lead to (number of cores)^2 threads running and lead to 100% CPU utilization. The default value is *1.*\n+\n+#### Cache\n+The KNN Plugin uses a Guava cache to keep track of the graphs currently loaded into native memory. When a query is run against a graph for the first time, the graph is loaded into native memory (outside the Java heap). Because Elasticsearch runs inside of the JVM, it cannot manage native memory directly. So, it keeps track of native memory by adding an entry into a Guava cache that contains the pointer to the graph in native memory and how much memory it uses.  The cache\u2019s weight just means how much native memory all of the elements in the cache are taking up. If the maximum weight (this value is set by *knn.memory.circuit_breaker.limit*) of the cache is exceeded when it tries to load a graph into memory, the cache evicts an entry to make room for the new entry. Additionally, the cache can evict entries based on how long it has been since they were last accessed. \n+\n+##### knn.cache.item.expiry.enabled\n+This setting indicates that the cache should evict entries that have expired (not been accessed for *knn.cache.item.expiry.minutes*). The default value is *false.*\n+\n+##### knn.cache.item.expiry.minutes\n+This setting indicates how long an item can be in the cache without being accessed before it expires. When an entry expires, it gets evicted from the cache. The default value is *180 minutes.*\n+\n+#### Circuit Breaker\n+For KNN, the circuit breaker is used to indicate when performance may degrade because the graphs loaded into native memory are reaching the cluster\u2019s total limits. Currently, the system does not perform any action once this limit is reached.\n+\n+##### knn.memory.circuit_breaker.enabled\n+This setting enables or disables the circuit breaker feature.  Disabling this setting will keep you at risk of Out of memory as we do not have control on the memory usage for the graphs. The default value is *true*. \n+\n+##### knn.memory.circuit_breaker.limit\n+This setting indicates the maximum capacity of the cache. When the cache attempts to load in a graph that exceeds this limit, it is forced to evict an entry and *knn.circuit_breaker.triggered *is set to *true.* The default value for this setting is *60% *of the machines total memory outside the Elasticsearch jvm . However, a value in *KB* can be given as well.\n \n+###### Example\n+If a machine has 100GB RAM. Elasticsearch jvm uses 32GB. Then the default circuit breaker limit is set at 60% of the remaining memory(60% of (100GB -32GB) = 40.8GB)\n \n-curl -X PUT \"localhost:9200/myindex/_doc/4\" -H 'Content-Type: application/json' -d'\n+##### knn.circuit_breaker.triggered\n+This setting indicates whether  or not the circuit breaker has been triggered. The circuit breaker is triggered if any node in the cluster has had to evict an entry from the cache because the cache\u2019s capacity had been reached. The circuit breaker is untriggered when the size of the entries in the cache goes below *knn.circuit_breaker.unset.percentage. *This can occur when an index is deleted or entries in the cache expire when *knn.cache.item.expiry.enabled* is true. The default value is *False.*\n+\n+##### knn.circuit_breaker.unset.percentage\n+This setting indicates under what percentage of the cache\u2019s total capacity the cache\u2019s current size must be in order to untrigger the circuit breaker. The default value is *75% *of total cache\u2019s capacit*y.*\n+\n+###### Example\n+```\n+PUT /_cluster/settings\n {\n-\"my_vector\" : [5.5, 6.5],\n-\"price\":17\n+    \"persistent\" : {\n+        \"knn.plugin.enabled\" : true,\n+        \"knn.algo_param.index_thread_qty\" : 1,\n+        \"knn.cache.item.expiry.enabled\": true,\n+        \"knn.cache.item.expiry.minutes\": 15,\n+        \"knn.memory.circuit_breaker.enabled\" : true,\n+        \"knn.memory.circuit_breaker.limit\" : \"55%\",\n+        \"knn.circuit_breaker.unset.percentage\": 23\n+    }\n }\n-'\n+```\n+\n+## Stats\n+The KNN Stats API provides information about the current status of the KNN Plugin. The plugin keeps track of both cluster level and node level stats. Cluster level stats have a single value for the entire cluster. Node level stats have a single value for each node in the cluster. A user can filter their query by nodeID and statName in the following way:\n+```\n+GET /_opendistro/_knn/nodeId1,nodeId2/stats/statName1,statName2\n+```\n+\n+### Cluster Stats\n+#### circuit_breaker_triggered\n+Indicates whether the circuit breaker is triggered.\n+\n+### Node Stats\n+#### eviction_count\n+The number of evictions that have occurred in the guava cache. *note:* explicit evictions that occur because of index deletion are not counted.\n+\n+#### hit_count\n+The number of cache hits that have occurred on the node.\n+\n+#### miss_count\n+The number of cache misses that have occurred on the node. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NjYyNg==", "bodyText": "Another excellent example.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376666626", "createdAt": "2020-02-08T00:29:18Z", "author": {"login": "aetter"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+KNN Index level settings should be provided at the time of the index creation. If the settings are not provided, default values will be use. These settings are static which means they cannot be changed after index creation.\n \n+##### index.knn\n+This setting indicates whether the index uses the KNN Codec or not. Possible values are *true*, *false*. Default value is *false*.\n \n-curl -X PUT \"localhost:9200/myindex/_doc/3\" -H 'Content-Type: application/json' -d'\n+##### index.knn.algo_param.m\n+This setting is an HNSW parameter that represents \"the number of bi-directional links created for every new element during construction. Reasonable range for M is 2-100. Higher M work better on datasets with high intrinsic dimensionality and/or high recall, while low M work better for datasets with low intrinsic dimensionality and/or low recalls. The parameter also determines the algorithm's memory consumption, which is roughly M * 8-10 bytes per stored element.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *16*.\n+\n+##### index.knn.algo_param.ef_search\n+This setting is an HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors (used during the search). Higher ef leads to more accurate but slower search.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### index.knn.algo_param.ef_construction\n+This setting is an HNSW parameter that \"the parameter has the same meaning as ef, but controls the index_time/index_accuracy. Bigger ef_construction leads to longer construction, but better index quality.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### More Information\n+For more information, please refer to https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md.\n+\n+##### Example\n+```\n+PUT /my_index/_settings\n {\n-\"my_vector\" : [3.5, 4.5],\n-\"price\":15\n+    \"index\" : {\n+        \"index.knn.algo_param.m\": 18, \n+        \"index.knn.algo_param.ef_search\" : 20,\n+        \"index.knn.algo_param.ef_construction\" : 40,\n+    }\n }\n-'\n+```\n+\n+### Cluster Level Settings\n+#### General\n+##### knn.plugin.enabled\n+This setting indicates whether or not the KNN Plugin is enabled. If it is disabled, a user will not be able to index knn_vector fields nor run KNN queries. The default value is *true.*\n+\n+##### knn.algo_param.index_thread_qty\n+This setting specifies how many threads the NMS library should use to create the graph in memory. By default, the NMS library sets this value to the number of cores the machine has. However, because ES can spawn the same number of threads for searching, this could lead to (number of cores)^2 threads running and lead to 100% CPU utilization. The default value is *1.*\n+\n+#### Cache\n+The KNN Plugin uses a Guava cache to keep track of the graphs currently loaded into native memory. When a query is run against a graph for the first time, the graph is loaded into native memory (outside the Java heap). Because Elasticsearch runs inside of the JVM, it cannot manage native memory directly. So, it keeps track of native memory by adding an entry into a Guava cache that contains the pointer to the graph in native memory and how much memory it uses.  The cache\u2019s weight just means how much native memory all of the elements in the cache are taking up. If the maximum weight (this value is set by *knn.memory.circuit_breaker.limit*) of the cache is exceeded when it tries to load a graph into memory, the cache evicts an entry to make room for the new entry. Additionally, the cache can evict entries based on how long it has been since they were last accessed. \n+\n+##### knn.cache.item.expiry.enabled\n+This setting indicates that the cache should evict entries that have expired (not been accessed for *knn.cache.item.expiry.minutes*). The default value is *false.*\n+\n+##### knn.cache.item.expiry.minutes\n+This setting indicates how long an item can be in the cache without being accessed before it expires. When an entry expires, it gets evicted from the cache. The default value is *180 minutes.*\n+\n+#### Circuit Breaker\n+For KNN, the circuit breaker is used to indicate when performance may degrade because the graphs loaded into native memory are reaching the cluster\u2019s total limits. Currently, the system does not perform any action once this limit is reached.\n+\n+##### knn.memory.circuit_breaker.enabled\n+This setting enables or disables the circuit breaker feature.  Disabling this setting will keep you at risk of Out of memory as we do not have control on the memory usage for the graphs. The default value is *true*. \n+\n+##### knn.memory.circuit_breaker.limit\n+This setting indicates the maximum capacity of the cache. When the cache attempts to load in a graph that exceeds this limit, it is forced to evict an entry and *knn.circuit_breaker.triggered *is set to *true.* The default value for this setting is *60% *of the machines total memory outside the Elasticsearch jvm . However, a value in *KB* can be given as well.\n \n+###### Example\n+If a machine has 100GB RAM. Elasticsearch jvm uses 32GB. Then the default circuit breaker limit is set at 60% of the remaining memory(60% of (100GB -32GB) = 40.8GB)\n \n-curl -X PUT \"localhost:9200/myindex/_doc/4\" -H 'Content-Type: application/json' -d'\n+##### knn.circuit_breaker.triggered\n+This setting indicates whether  or not the circuit breaker has been triggered. The circuit breaker is triggered if any node in the cluster has had to evict an entry from the cache because the cache\u2019s capacity had been reached. The circuit breaker is untriggered when the size of the entries in the cache goes below *knn.circuit_breaker.unset.percentage. *This can occur when an index is deleted or entries in the cache expire when *knn.cache.item.expiry.enabled* is true. The default value is *False.*\n+\n+##### knn.circuit_breaker.unset.percentage\n+This setting indicates under what percentage of the cache\u2019s total capacity the cache\u2019s current size must be in order to untrigger the circuit breaker. The default value is *75% *of total cache\u2019s capacit*y.*\n+\n+###### Example\n+```\n+PUT /_cluster/settings\n {\n-\"my_vector\" : [5.5, 6.5],\n-\"price\":17\n+    \"persistent\" : {\n+        \"knn.plugin.enabled\" : true,\n+        \"knn.algo_param.index_thread_qty\" : 1,\n+        \"knn.cache.item.expiry.enabled\": true,\n+        \"knn.cache.item.expiry.minutes\": 15,\n+        \"knn.memory.circuit_breaker.enabled\" : true,\n+        \"knn.memory.circuit_breaker.limit\" : \"55%\",\n+        \"knn.circuit_breaker.unset.percentage\": 23\n+    }\n }\n-'\n+```\n+\n+## Stats\n+The KNN Stats API provides information about the current status of the KNN Plugin. The plugin keeps track of both cluster level and node level stats. Cluster level stats have a single value for the entire cluster. Node level stats have a single value for each node in the cluster. A user can filter their query by nodeID and statName in the following way:\n+```\n+GET /_opendistro/_knn/nodeId1,nodeId2/stats/statName1,statName2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2ODM0OQ==", "bodyText": "Great example.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376668349", "createdAt": "2020-02-08T00:39:59Z", "author": {"login": "aetter"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+KNN Index level settings should be provided at the time of the index creation. If the settings are not provided, default values will be use. These settings are static which means they cannot be changed after index creation.\n \n+##### index.knn\n+This setting indicates whether the index uses the KNN Codec or not. Possible values are *true*, *false*. Default value is *false*.\n \n-curl -X PUT \"localhost:9200/myindex/_doc/3\" -H 'Content-Type: application/json' -d'\n+##### index.knn.algo_param.m\n+This setting is an HNSW parameter that represents \"the number of bi-directional links created for every new element during construction. Reasonable range for M is 2-100. Higher M work better on datasets with high intrinsic dimensionality and/or high recall, while low M work better for datasets with low intrinsic dimensionality and/or low recalls. The parameter also determines the algorithm's memory consumption, which is roughly M * 8-10 bytes per stored element.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *16*.\n+\n+##### index.knn.algo_param.ef_search\n+This setting is an HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors (used during the search). Higher ef leads to more accurate but slower search.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### index.knn.algo_param.ef_construction\n+This setting is an HNSW parameter that \"the parameter has the same meaning as ef, but controls the index_time/index_accuracy. Bigger ef_construction leads to longer construction, but better index quality.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### More Information\n+For more information, please refer to https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md.\n+\n+##### Example\n+```\n+PUT /my_index/_settings\n {\n-\"my_vector\" : [3.5, 4.5],\n-\"price\":15\n+    \"index\" : {\n+        \"index.knn.algo_param.m\": 18, \n+        \"index.knn.algo_param.ef_search\" : 20,\n+        \"index.knn.algo_param.ef_construction\" : 40,\n+    }\n }\n-'\n+```\n+\n+### Cluster Level Settings\n+#### General\n+##### knn.plugin.enabled\n+This setting indicates whether or not the KNN Plugin is enabled. If it is disabled, a user will not be able to index knn_vector fields nor run KNN queries. The default value is *true.*\n+\n+##### knn.algo_param.index_thread_qty\n+This setting specifies how many threads the NMS library should use to create the graph in memory. By default, the NMS library sets this value to the number of cores the machine has. However, because ES can spawn the same number of threads for searching, this could lead to (number of cores)^2 threads running and lead to 100% CPU utilization. The default value is *1.*\n+\n+#### Cache\n+The KNN Plugin uses a Guava cache to keep track of the graphs currently loaded into native memory. When a query is run against a graph for the first time, the graph is loaded into native memory (outside the Java heap). Because Elasticsearch runs inside of the JVM, it cannot manage native memory directly. So, it keeps track of native memory by adding an entry into a Guava cache that contains the pointer to the graph in native memory and how much memory it uses.  The cache\u2019s weight just means how much native memory all of the elements in the cache are taking up. If the maximum weight (this value is set by *knn.memory.circuit_breaker.limit*) of the cache is exceeded when it tries to load a graph into memory, the cache evicts an entry to make room for the new entry. Additionally, the cache can evict entries based on how long it has been since they were last accessed. \n+\n+##### knn.cache.item.expiry.enabled\n+This setting indicates that the cache should evict entries that have expired (not been accessed for *knn.cache.item.expiry.minutes*). The default value is *false.*\n+\n+##### knn.cache.item.expiry.minutes\n+This setting indicates how long an item can be in the cache without being accessed before it expires. When an entry expires, it gets evicted from the cache. The default value is *180 minutes.*\n+\n+#### Circuit Breaker\n+For KNN, the circuit breaker is used to indicate when performance may degrade because the graphs loaded into native memory are reaching the cluster\u2019s total limits. Currently, the system does not perform any action once this limit is reached.\n+\n+##### knn.memory.circuit_breaker.enabled\n+This setting enables or disables the circuit breaker feature.  Disabling this setting will keep you at risk of Out of memory as we do not have control on the memory usage for the graphs. The default value is *true*. \n+\n+##### knn.memory.circuit_breaker.limit\n+This setting indicates the maximum capacity of the cache. When the cache attempts to load in a graph that exceeds this limit, it is forced to evict an entry and *knn.circuit_breaker.triggered *is set to *true.* The default value for this setting is *60% *of the machines total memory outside the Elasticsearch jvm . However, a value in *KB* can be given as well.\n \n+###### Example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTA0Mjc0", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#pullrequestreview-355504274", "createdAt": "2020-02-08T00:04:46Z", "commit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDowNDo0N1rOFnNpdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDowNDo0N1rOFnNpdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MjM4OQ==", "bodyText": "Should we have one example showing index creation with multiple knn_vector fields?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376662389", "createdAt": "2020-02-08T00:04:47Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjIwMTg4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#pullrequestreview-355620188", "createdAt": "2020-02-09T17:09:41Z", "commit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNzowOTo0MVrOFnWASw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNzowOTo0MVrOFnWASw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5OTMwNw==", "bodyText": "we can remove these settings?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376799307", "createdAt": "2020-02-09T17:09:41Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjIxMzA2", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#pullrequestreview-355621306", "createdAt": "2020-02-09T17:31:58Z", "commit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNzozMTo1OFrOFnWFiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNzozMTo1OFrOFnWFiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMDY0OQ==", "bodyText": "we should remove index from setting as we already wrapped settings in index?\nIt should be\n\"index\" : {\n        \"knn.algo_param.m\": 18, \n        \"knn.algo_param.ef_search\" : 20,\n        \"knn.algo_param.ef_construction\" : 40\n}", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376800649", "createdAt": "2020-02-09T17:31:58Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,223 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"number_of_shards\" :   1,\n+        \"number_of_replicas\" : 0,\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }\n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+KNN Index level settings should be provided at the time of the index creation. If the settings are not provided, default values will be use. These settings are static which means they cannot be changed after index creation.\n \n+##### index.knn\n+This setting indicates whether the index uses the KNN Codec or not. Possible values are *true*, *false*. Default value is *false*.\n \n-curl -X PUT \"localhost:9200/myindex/_doc/3\" -H 'Content-Type: application/json' -d'\n+##### index.knn.algo_param.m\n+This setting is an HNSW parameter that represents \"the number of bi-directional links created for every new element during construction. Reasonable range for M is 2-100. Higher M work better on datasets with high intrinsic dimensionality and/or high recall, while low M work better for datasets with low intrinsic dimensionality and/or low recalls. The parameter also determines the algorithm's memory consumption, which is roughly M * 8-10 bytes per stored element.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *16*.\n+\n+##### index.knn.algo_param.ef_search\n+This setting is an HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors (used during the search). Higher ef leads to more accurate but slower search.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### index.knn.algo_param.ef_construction\n+This setting is an HNSW parameter that \"the parameter has the same meaning as ef, but controls the index_time/index_accuracy. Bigger ef_construction leads to longer construction, but better index quality.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### More Information\n+For more information, please refer to https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md.\n+\n+##### Example\n+```\n+PUT /my_index/_settings\n {\n-\"my_vector\" : [3.5, 4.5],\n-\"price\":15\n+    \"index\" : {\n+        \"index.knn.algo_param.m\": 18, \n+        \"index.knn.algo_param.ef_search\" : 20,\n+        \"index.knn.algo_param.ef_construction\" : 40,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccc72dceed619ad97fee8fc058642f0f4a3f35c"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf58dc08d83a4377189f06f8de64aaaf0ce54d6", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/2bf58dc08d83a4377189f06f8de64aaaf0ce54d6", "committedDate": "2020-02-09T18:19:08Z", "message": "added changes to address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjQ5ODM5", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#pullrequestreview-355649839", "createdAt": "2020-02-10T00:38:36Z", "commit": {"oid": "2bf58dc08d83a4377189f06f8de64aaaf0ce54d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMDozODozNlrOFnYCjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMDozODozNlrOFnYCjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMjY1NA==", "bodyText": "should we also include \"knn\":true?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#discussion_r376832654", "createdAt": "2020-02-10T00:38:36Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -57,89 +53,226 @@ The following code creates a KNN index with fields my_vector1, my_vector2, my_ve\n ```\n PUT /myindex\n {\n-  \"settings\" : {\n-    \"index\": {\n-      \"knn\": true\n+    \"settings\" : {\n+        \"index\": {\n+            \"knn\": true\n+        }\n+    },\n+    \"mappings\": {\n+        \"properties\": {\n+            \"my_vector1\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 2\n+            }, \n+            \"my_vector2\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 4\n+            }, \n+            \"my_vector3\": {\n+                \"type\": \"knn_vector\",\n+                \"dimension\": 8\n+            } \n+        }\n     }\n-  },\n-  \"mappings\": {\n-    \"my_images\": {\n-      \"properties\": {\n-        \"my_vector1\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector2\": {\n-          \"type\": \"knn_vector\"\n-        },\n-        \"my_vector3\": {\n-        \"type\": \"knn_vector\"\n-      }\n-    }\n-  }\n }\n ```\n \n * Indexing sample docs to KNN index\n \n ```\n-curl -X POST \"localhost:9200/myindex/_doc/1\" -H 'Content-Type: application/json' -d'\n+PUT /myindex/_doc/2?refresh=true\n {\n-\"my_vector\" : [1.5, 2.5],\n-\"price\":10\n+    \"my_vector1\" : [1.5, 2.5],\n+    \"price\":10\n }\n-'\n+```\n+\n+* Querying K-Nearest neighbors\n \n-curl -X PUT \"localhost:9200/myindex/_doc/2\" -H 'Content-Type: application/json' -d'\n+```\n+POST /myindex/_search\n {\n-\"my_vector\" : [2.5, 3.5],\n-\"price\":12\n+    \"size\" : 10,\n+    \"query\": {\n+        \"knn\": {\n+            \"my_vector1\": {\n+                \"vector\": [3, 4],\n+                \"k\": 2\n+            }\n+        }\n+    }\n }\n-'\n+```\n+\n+## Java Native library usage\n+For plugin installations from archive(.zip), it is necessary to ensure ```.so``` file for linux OS and ```.jnilib``` file for Mac OS are present in the java library path. This can be possible by copying .so/.jnilib to either $ES_HOME or by adding manually ```-Djava.library.path=<path_to_lib_files>``` in ```jvm.options``` file\n+\n+## Settings\n+### Index Level Settings\n+You must provide index-level settings when you create the index. If you don't provide these settings, KNN uses its default values. These settings are static, which means you can't modify them after index creation.\n \n+##### index.knn\n+This setting indicates whether the index uses the KNN Codec or not. Possible values are *true*, *false*. Default value is *false*.\n \n-curl -X PUT \"localhost:9200/myindex/_doc/3\" -H 'Content-Type: application/json' -d'\n+##### index.knn.algo_param.m\n+This setting is an HNSW parameter that represents \"the number of bi-directional links created for every new element during construction. Reasonable range for M is 2-100. Higher M work better on datasets with high intrinsic dimensionality and/or high recall, while low M work better for datasets with low intrinsic dimensionality and/or low recalls. The parameter also determines the algorithm's memory consumption, which is roughly M * 8-10 bytes per stored element.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *16*.\n+\n+##### index.knn.algo_param.ef_search\n+This setting is an HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors (used during the search). Higher ef leads to more accurate but slower search.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### index.knn.algo_param.ef_construction\n+This setting is an HNSW parameter that \"the parameter has the same meaning as ef, but controls the index_time/index_accuracy. Bigger ef_construction leads to longer construction, but better index quality.\" [nmslib/hnswlib](https://github.com/nmslib/hnswlib/blob/master/ALGO_PARAMS.md) The default value is *512*.\n+\n+##### Example\n+```\n+PUT /my_index/_settings\n {\n-\"my_vector\" : [3.5, 4.5],\n-\"price\":15\n+    \"index\" : {\n+        \"knn.algo_param.m\": 18, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf58dc08d83a4377189f06f8de64aaaf0ce54d6"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffae3a5aedede0d3f9ab73c579e42fb72efd57e9", "author": {"user": {"login": "jmazanec15", "name": "Jack Mazanec"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ffae3a5aedede0d3f9ab73c579e42fb72efd57e9", "committedDate": "2020-02-10T16:02:18Z", "message": "addressed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTU5Mzc1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/44#pullrequestreview-356159375", "createdAt": "2020-02-10T18:23:10Z", "commit": {"oid": "ffae3a5aedede0d3f9ab73c579e42fb72efd57e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1319, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}