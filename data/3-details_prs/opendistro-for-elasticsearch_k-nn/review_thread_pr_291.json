{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NjgyMTUz", "number": 291, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTozOTo0NlrOFLagxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjo1Njo1MlrOFLeQ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTEzMDMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNNCodecTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTozOTo0NlrOIOkraA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzo0ODoxMVrOIOrsiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1MTkxMg==", "bodyText": "assertEquals(expected, actual, ... )", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/291#discussion_r552151912", "createdAt": "2021-01-05T19:39:46Z", "author": {"login": "VijayanB"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNNCodecTestCase.java", "diffHunk": "@@ -153,8 +153,8 @@ public void testMultiFieldsKnnIndex(Codec codec) throws Exception {\n         IndexSearcher searcher = new IndexSearcher(reader);\n         float score = searcher.search(new KNNQuery(\"test_vector\", new float[] {1.0f, 0.0f, 0.0f}, 1, \"dummy\"), 10).scoreDocs[0].score;\n         float score1 = searcher.search(new KNNQuery(\"my_vector\", new float[] {1.0f, 2.0f}, 1, \"dummy\"), 10).scoreDocs[0].score;\n-        assertEquals(score, 0.1667f, 0.01f);\n-        assertEquals(score1, 0.0714f, 0.01f);\n+        assertEquals(score, 1.0f/(1 + 25), 0.01f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3b6ac744ab7ca8595068f96c5b06ad64691d9e4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI2Njg4OQ==", "bodyText": "Good point. Im trying to fix these as I go. Will update.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/291#discussion_r552266889", "createdAt": "2021-01-05T23:48:11Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNNCodecTestCase.java", "diffHunk": "@@ -153,8 +153,8 @@ public void testMultiFieldsKnnIndex(Codec codec) throws Exception {\n         IndexSearcher searcher = new IndexSearcher(reader);\n         float score = searcher.search(new KNNQuery(\"test_vector\", new float[] {1.0f, 0.0f, 0.0f}, 1, \"dummy\"), 10).scoreDocs[0].score;\n         float score1 = searcher.search(new KNNQuery(\"my_vector\", new float[] {1.0f, 2.0f}, 1, \"dummy\"), 10).scoreDocs[0].score;\n-        assertEquals(score, 0.1667f, 0.01f);\n-        assertEquals(score1, 0.0714f, 0.01f);\n+        assertEquals(score, 1.0f/(1 + 25), 0.01f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1MTkxMg=="}, "originalCommit": {"oid": "a3b6ac744ab7ca8595068f96c5b06ad64691d9e4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTE0OTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTo0NToyNVrOIOk2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzo0Nzo0NlrOIOrq0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1NDc5OA==", "bodyText": "why can't we create a \"latest\" as enum value, so that we don't have to update this line every time. What do you think?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/291#discussion_r552154798", "createdAt": "2021-01-05T19:45:25Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java", "diffHunk": "@@ -20,14 +20,14 @@\n     /**\n      * Latest available nmslib version\n      */\n-    V206(\"206\"){\n+    V208(\"208\"){\n         @Override\n         public String indexLibraryVersion() {\n-            return \"KNNIndexV2_0_6\";\n+            return \"KNNIndexV2_0_8\";\n         }\n     };\n \n-    public static final NmsLibVersion LATEST = V206;\n+    public static final NmsLibVersion LATEST = V208;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3b6ac744ab7ca8595068f96c5b06ad64691d9e4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI2NjQ1MQ==", "bodyText": "I think we could but Im not sure how it would be better. The purpose of using the versioning is to handle potential backwards compatibility issues if we upgrade to an nmslib version that breaks backwards compatibility. We havent had this issue so far, so we just replace the nmslib version with the new one.\nHowever, if we end up having this issue, it seems to me, LATEST should just be a pointer to an enum value and enum values should be concrete versions.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/291#discussion_r552266451", "createdAt": "2021-01-05T23:47:46Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java", "diffHunk": "@@ -20,14 +20,14 @@\n     /**\n      * Latest available nmslib version\n      */\n-    V206(\"206\"){\n+    V208(\"208\"){\n         @Override\n         public String indexLibraryVersion() {\n-            return \"KNNIndexV2_0_6\";\n+            return \"KNNIndexV2_0_8\";\n         }\n     };\n \n-    public static final NmsLibVersion LATEST = V206;\n+    public static final NmsLibVersion LATEST = V208;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1NDc5OA=="}, "originalCommit": {"oid": "a3b6ac744ab7ca8595068f96c5b06ad64691d9e4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTc0NDk2OnYy", "diffSide": "RIGHT", "path": "jni/include/com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjo1Njo1MlrOIOqlAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzo0ODozOVrOIOruiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0ODU3Ng==", "bodyText": "Lets keep the versioning in the interface so that it would be easy to support backward compatibility when we find one.  lets add v208 similar to v206", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/291#discussion_r552248576", "createdAt": "2021-01-05T22:56:52Z", "author": {"login": "vamshin"}, "path": "jni/include/com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex.h", "diffHunk": "@@ -1,50 +1,50 @@\n /* DO NOT EDIT THIS FILE - it is machine generated */\n #include <jni.h>\n-/* Header for class com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex */\n+/* Header for class com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex */\n \n-#ifndef _Included_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n-#define _Included_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+#ifndef _Included_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n+#define _Included_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    saveIndex\n  * Signature: ([I[[FLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V\n  */\n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_saveIndex\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_saveIndex\n   (JNIEnv *, jclass, jintArray, jobjectArray, jstring, jobjectArray, jstring);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    queryIndex\n  * Signature: (J[FI)[Lcom/amazon/opendistroforelasticsearch/knn/index/KNNQueryResult;\n  */\n-JNIEXPORT jobjectArray JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_queryIndex\n+JNIEXPORT jobjectArray JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_queryIndex\n   (JNIEnv *, jclass, jlong, jfloatArray, jint);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    init\n  * Signature: (Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)J\n  */\n-JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_init\n+JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_init\n   (JNIEnv *, jclass, jstring, jobjectArray, jstring);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    gc\n  * Signature: (J)V\n  */\n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_gc\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_gc\n   (JNIEnv *, jclass, jlong);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    initLibrary\n  * Signature: ()V\n  */\n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_initLibrary\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_initLibrary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3b6ac744ab7ca8595068f96c5b06ad64691d9e4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI2NzQwMw==", "bodyText": "Makes sense. Will update.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/291#discussion_r552267403", "createdAt": "2021-01-05T23:48:39Z", "author": {"login": "jmazanec15"}, "path": "jni/include/com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex.h", "diffHunk": "@@ -1,50 +1,50 @@\n /* DO NOT EDIT THIS FILE - it is machine generated */\n #include <jni.h>\n-/* Header for class com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex */\n+/* Header for class com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex */\n \n-#ifndef _Included_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n-#define _Included_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+#ifndef _Included_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n+#define _Included_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    saveIndex\n  * Signature: ([I[[FLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V\n  */\n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_saveIndex\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_saveIndex\n   (JNIEnv *, jclass, jintArray, jobjectArray, jstring, jobjectArray, jstring);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    queryIndex\n  * Signature: (J[FI)[Lcom/amazon/opendistroforelasticsearch/knn/index/KNNQueryResult;\n  */\n-JNIEXPORT jobjectArray JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_queryIndex\n+JNIEXPORT jobjectArray JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_queryIndex\n   (JNIEnv *, jclass, jlong, jfloatArray, jint);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    init\n  * Signature: (Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)J\n  */\n-JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_init\n+JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_init\n   (JNIEnv *, jclass, jstring, jobjectArray, jstring);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    gc\n  * Signature: (J)V\n  */\n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_gc\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_gc\n   (JNIEnv *, jclass, jlong);\n \n /*\n- * Class:     com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex\n  * Method:    initLibrary\n  * Signature: ()V\n  */\n-JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_v206_KNNIndex_initLibrary\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_nmslib_KNNIndex_initLibrary", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0ODU3Ng=="}, "originalCommit": {"oid": "a3b6ac744ab7ca8595068f96c5b06ad64691d9e4"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2698, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}