{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMTI4NDk0", "number": 196, "title": "Pre filter support through custom scoring", "bodyText": "Issue #, if available:\n#50\n\nAs of today k-NN search queries in combination with filters/boolean queries always work as a post filter search.  k-Nearest Neighbors are evaluated first and then other queries are run on top of the returned k results . When k is small, it is possible we end up less than required k Neighbors after applying the filter.\nThis issue becomes more evident especially when k-NN search is combined with filter queries targeting smaller subset of vectors in the large data set.\n\nDescription of changes:\nWe define our own custom Script Engine which uses the language name \u201cknn\u201d.  It implements a script class called VectorScoreScript which would be called to override each document\u2019s score with the chosen similarity space like Euclidean, Cosine, Dot product etc. Customer could invoke the script using the \u201cscript_score\u201d functionality by passing the language name as \u201cknn\u201d and required parameters.\n\nThe script_score functionality can be incorporated by extending \u2018ScriptPlugin\u2019.\nscript_score is evaluated for the filtered documents at segment level inside a shard.\nCustomers would use size attribute to define the \u2018k\u2019.\nscript would be compiled once on the first request and cached for later\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-08-20T17:49:15Z", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196", "merged": true, "mergeCommit": {"oid": "3199583164289dac4abc889dfbcb78e9512bc147"}, "closed": true, "closedAt": "2020-09-18T19:00:38Z", "author": {"login": "vamshin"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc23UUhAH2gAyNDcxMTI4NDk0OjQ2NWUxZjA3ZDQxYzkxMDMyNGE2ZWVlMDM5NzE2MTIzNDc2NGZmNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKKV3sgFqTQ5MTcxMTQ5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "465e1f07d41c910324a6eee0397161234764ff78", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/465e1f07d41c910324a6eee0397161234764ff78", "committedDate": "2020-07-20T20:04:58Z", "message": "synced from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a744b8ad9f1c707c3860ffe4aec99076fb5ceed4", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/a744b8ad9f1c707c3860ffe4aec99076fb5ceed4", "committedDate": "2020-07-20T20:05:22Z", "message": "synced from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "124b732ad74ffb6fcf6685e0827599507905dcc1", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/124b732ad74ffb6fcf6685e0827599507905dcc1", "committedDate": "2020-07-24T19:30:34Z", "message": "vam custom scoring first cut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29432b8335642fc4727617c7377115618605a51", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/e29432b8335642fc4727617c7377115618605a51", "committedDate": "2020-07-24T20:33:41Z", "message": "Merge branch 'master' of github.com:opendistro-for-elasticsearch/k-NN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "353be33a0a6779d1739bcaec661baa99cfc6e306", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/353be33a0a6779d1739bcaec661baa99cfc6e306", "committedDate": "2020-08-20T17:37:02Z", "message": "l2 custom scoring support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af0dbe68ab309d084c746119696e5704b7eea1ff", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/af0dbe68ab309d084c746119696e5704b7eea1ff", "committedDate": "2020-08-20T17:37:25Z", "message": "Merge branch 'master' of github.com:opendistro-for-elasticsearch/k-NN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c5b5a72fc6f0e734907ace822fcfc3003ec4e3f", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/4c5b5a72fc6f0e734907ace822fcfc3003ec4e3f", "committedDate": "2020-08-20T17:39:11Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a71c6ec1909b5cb3f5d8cde15f9fb7d612e367", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/59a71c6ec1909b5cb3f5d8cde15f9fb7d612e367", "committedDate": "2020-08-20T17:46:08Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/c3b880dc669147bbb42aa2f265c8e79c48f1c0b8", "committedDate": "2020-08-20T17:53:59Z", "message": "added class level comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDE2Njcy", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-472016672", "createdAt": "2020-08-20T22:02:51Z", "commit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowMjo1MlrOHEU0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowNjo1MVrOHEU6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5NzQ2MQ==", "bodyText": "If we do not support Cosine Similarity yet, remove from this PR", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474297461", "createdAt": "2020-08-20T22:02:52Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/KNNConstants.java", "diffHunk": "@@ -21,4 +21,6 @@\n     public static final String HNSW_ALGO_EF_CONSTRUCTION = \"efConstruction\";\n     public static final String HNSW_ALGO_EF_SEARCH = \"efSearch\";\n     public static final String HNSW_ALGO_INDEX_THREAD_QTY = \"indexThreadQty\";\n+    public static final String L2 = \"l2\";\n+    public static final String COSINESIMIL = \"cosinesimil\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5ODI0MQ==", "bodyText": "Where do we check that the input vector has the correct dimensions?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474298241", "createdAt": "2020-08-20T22:04:55Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5OTA0NQ==", "bodyText": "In what case does this happen?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474299045", "createdAt": "2020-08-20T22:06:51Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODQ1OTc2", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-472845976", "createdAt": "2020-08-21T22:15:23Z", "commit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxNToyM1rOHE_PYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjo1NzowOVrOHE_31Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MjQ4Mw==", "bodyText": "minor. typically java developers do constant::equals to avoid npe, like line 29.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474992483", "createdAt": "2020-08-21T22:15:23Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    private static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (context.equals(ScoreScript.CONTEXT) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NTAxNg==", "bodyText": "question. why is the type not float?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r474995016", "createdAt": "2020-08-21T22:25:08Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwMjgzNw==", "bodyText": "this implementation might not be the most efficient due to type casting and power.\nfloat diff = queryVector[i] - inputVector[i];\nsquaredDistance += diff * diff;\n\nshould be 2x faster\nfloat diff = queryVector[i] - inputVector[i];\nsquaredDistance = Math.fma(diff, diff, squaredDistance);\n\nshould also be fast but not as much as the one above", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r475002837", "createdAt": "2020-08-21T22:57:09Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d783a5ce155f567dda615045788248ae7a02128a", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d783a5ce155f567dda615045788248ae7a02128a", "committedDate": "2020-08-24T17:27:37Z", "message": "fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a1689eeb387f8c1b0f492ab5692d53c2329333f", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/6a1689eeb387f8c1b0f492ab5692d53c2329333f", "committedDate": "2020-08-28T20:05:19Z", "message": "Added cosine simil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e270e706e4ec55ccf43e16d8dc8da0be35a674c", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/9e270e706e4ec55ccf43e16d8dc8da0be35a674c", "committedDate": "2020-08-28T20:32:47Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/54b112f65684dba6466c814af0a05312fd9de9bd", "committedDate": "2020-08-31T19:59:30Z", "message": "optimization for cosine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODYwMDM3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-472860037", "createdAt": "2020-08-21T23:05:25Z", "commit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzowNToyNVrOHE_-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToyNToxOVrOHKJwbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNDYxNg==", "bodyText": "question. should this case error out?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r475004616", "createdAt": "2020-08-21T23:05:25Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/VectorScoreScript.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class VectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] inputVector;\n+    private final String similaritySpace;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {\n+        long squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            squaredDistance += Math.pow(queryVector[i]-inputVector[i], 2);\n+        }\n+        return squaredDistance;\n+    }\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = l2Squared(this.inputVector, doc_vector);\n+                score = 1/(1 + score);\n+            }\n+            // Other spaces will be followed up in next pr\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e); // again - Failing in order not to hide potential bugs\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public VectorScoreScript(Map<String, Object> params, String field, String similaritySpace,\n+                             SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query inputVector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            inputVector = new float[tmp.size()];\n+            for (int i = 0; i < inputVector.length; i++) {\n+                inputVector[i] = tmp.get(i).floatValue();\n+            }\n+        } else {\n+            inputVector = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b880dc669147bbb42aa2f265c8e79c48f1c0b8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDExNA==", "bodyText": "since input and outputs are all float, why not using float?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480404114", "createdAt": "2020-08-31T21:17:00Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDU1OA==", "bodyText": "this check should preferably be avoided for every input vector", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480404558", "createdAt": "2020-08-31T21:18:05Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -13,6 +13,25 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n         return squaredDistance;\n     }\n \n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjMyNg==", "bodyText": "this check can be saved for most vectors by try-catching the unlikely case from the division below", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480406326", "createdAt": "2020-08-31T21:22:15Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        // Divide by zero check\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjkyOA==", "bodyText": "the return type should be float", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480406928", "createdAt": "2020-08-31T21:23:39Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        // Divide by zero check\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;\n+        double normQueryVector = 0.0f;\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            primitiveVector = new float[tmp.size()];\n+            for (int i = 0; i < primitiveVector.length; i++) {\n+                primitiveVector[i] = tmp.get(i).floatValue();\n+            }\n+        }\n+        return primitiveVector;\n+    }\n+\n+    public static double getVectorMagnitudeSquared(float[] inputVector) {\n+        if (null == inputVector) {\n+            throw new IllegalStateException(\"vector magnitude cannot be evaluated as it is null\");\n+        }\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        return (float) normInputVector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNzY2Mg==", "bodyText": "this method is not used", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r480407662", "createdAt": "2020-08-31T21:25:19Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private double queryVectorSquaredMagnitude = -1;\n+\n+    public float l2Squared(float[] queryVector, float[] inputVector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b112f65684dba6466c814af0a05312fd9de9bd"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "311b2a2a57d17dfe1f02f4385c74ba1b06335c83", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/311b2a2a57d17dfe1f02f4385c74ba1b06335c83", "committedDate": "2020-08-31T22:29:22Z", "message": "optimization for cosine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNDY1MDU5", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-480465059", "createdAt": "2020-09-02T03:55:14Z", "commit": {"oid": "311b2a2a57d17dfe1f02f4385c74ba1b06335c83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1NToxNFrOHLUepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1NToxNFrOHLUepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzMTkwOQ==", "bodyText": "Recomputing the query vector of every invocation will add unnecessary computation, as it can be computed once and passed it, like in the function above", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r481631909", "createdAt": "2020-09-02T03:55:14Z", "author": {"login": "NelsonBurton"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, double normQueryVector) {\n+        double dotProduct = 0.0f;\n+        double normInputVector = 0.0f;\n+        if (normQueryVector == -1) {\n+            throw new IllegalStateException(\"Normalized query vector cannot be negative\");\n+        }\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        double normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;\n+        double normQueryVector = 0.0f;\n+        double normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311b2a2a57d17dfe1f02f4385c74ba1b06335c83"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc7976685265402d16d5cec945f07decc407bd86", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/bc7976685265402d16d5cec945f07decc407bd86", "committedDate": "2020-09-03T21:26:29Z", "message": "integ tests for custom scoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd1f8f32713570836e7656469493ba0773bd430a", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/bd1f8f32713570836e7656469493ba0773bd430a", "committedDate": "2020-09-03T21:27:18Z", "message": "integ tests for custom scoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e33f3b1c05be5770e9ecd0c466c4dc6c5b40c5", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b5e33f3b1c05be5770e9ecd0c466c4dc6c5b40c5", "committedDate": "2020-09-07T06:39:57Z", "message": "incorporated comments. Refactored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac06ca37005a710dcabcd41816a80ff2bbff83c7", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ac06ca37005a710dcabcd41816a80ff2bbff83c7", "committedDate": "2020-09-07T06:45:44Z", "message": "incorporated comments. Refactored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da44b18f46a443dcfc5df966355153cdd25fee93", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/da44b18f46a443dcfc5df966355153cdd25fee93", "committedDate": "2020-09-07T06:46:53Z", "message": "incorporated comments. Refactored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/32483d9d18c6b1d501e9cb35ad5f2c89e6a27186", "committedDate": "2020-09-07T06:50:18Z", "message": "incorporated comments. Refactored code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTUxODQ4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-484551848", "createdAt": "2020-09-08T23:04:52Z", "commit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzowNDo1MlrOHOw2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxOTo1MlrOHOxI2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjQ2Ng==", "bodyText": "even this method is not used by the plugin, the implementation can be similar to the optimized version. unnecessary casting from float to double can be removed.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r485242466", "createdAt": "2020-09-08T23:04:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        double dotProduct = 0.0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjIwOA==", "bodyText": "minor. an error message is clearer.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r485246208", "createdAt": "2020-09-08T23:16:39Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public KNNVectorScoreScript(Map<String, Object> params, String field, float[] queryVector, float queryVectorSquaredMagnitude,\n+                                String similaritySpace, SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query vector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        this.queryVector = queryVector;\n+        this.queryVectorSquaredMagnitude = queryVectorSquaredMagnitude;\n+        try {\n+            this.binaryDocValuesReader = leafContext.reader().getBinaryDocValues(field);\n+            if(this.binaryDocValuesReader == null) {\n+                throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NzE5Mw==", "bodyText": "minor. space can also use validation.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r485247193", "createdAt": "2020-09-08T23:19:52Z", "author": {"login": "wnbts"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return score;\n+    }\n+\n+    @Override\n+    public void setDocument(int docId) {\n+        try {\n+            this.binaryDocValuesReader.advanceExact(docId);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public KNNVectorScoreScript(Map<String, Object> params, String field, float[] queryVector, float queryVectorSquaredMagnitude,\n+                                String similaritySpace, SearchLookup lookup, LeafReaderContext leafContext) {\n+        super(params, lookup, leafContext);\n+        // get query vector - convert to primitive\n+        final Object vector = params.get(\"vector\");\n+        this.similaritySpace = similaritySpace;\n+        this.queryVector = queryVector;\n+        this.queryVectorSquaredMagnitude = queryVectorSquaredMagnitude;\n+        try {\n+            this.binaryDocValuesReader = leafContext.reader().getBinaryDocValues(field);\n+            if(this.binaryDocValuesReader == null) {\n+                throw new IllegalStateException();\n+            }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Binary Doc values not enabled for the field \" + field\n+                    + \" Please ensure the field type is knn_vector in mappings for this field\");\n+        }\n+    }\n+\n+    public static class VectorScoreScriptFactory implements ScoreScript.LeafFactory {\n+        private final Map<String, Object> params;\n+        private final SearchLookup lookup;\n+        private final String similaritySpace;\n+        private final String field;\n+        private final float[] qVector;\n+        private float qVectorSquaredMagnitude; // Used for cosine optimization\n+\n+        public VectorScoreScriptFactory(Map<String, Object> params, SearchLookup lookup) {\n+            this.params = params;\n+            this.lookup = lookup;\n+            validateParams(params);\n+\n+            // initialize\n+            this.field = params.get(\"field\").toString();\n+            final Object space = params.get(\"space\");\n+            this.similaritySpace = space != null? (String)space: KNNConstants.L2;\n+            this.qVector = KNNScoringUtil.convertVectorToPrimitive(params.get(\"vector\"));\n+            // Optimization for cosinesimil\n+            if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // calculate the magnitude\n+                qVectorSquaredMagnitude = KNNScoringUtil.getVectorMagnitudeSquared(qVector);\n+            }\n+        }\n+\n+        private void validateParams(Map<String, Object> params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32483d9d18c6b1d501e9cb35ad5f2c89e6a27186"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1344665c3909cbabbd7a9b68bb208111c11d4c7e", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1344665c3909cbabbd7a9b68bb208111c11d4c7e", "committedDate": "2020-09-14T21:13:45Z", "message": "incorporated comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a66981ccfefbadb8288a99fe810b5f5cb0962b", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/f9a66981ccfefbadb8288a99fe810b5f5cb0962b", "committedDate": "2020-09-14T22:14:25Z", "message": "added unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a87d99c66ab18fb8065decbda36ed135acb5c14", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1a87d99c66ab18fb8065decbda36ed135acb5c14", "committedDate": "2020-09-15T00:09:53Z", "message": "added integ tests for cosine simil"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjU1MDgz", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488255083", "createdAt": "2020-09-15T01:10:59Z", "commit": {"oid": "1a87d99c66ab18fb8065decbda36ed135acb5c14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e", "committedDate": "2020-09-15T01:35:58Z", "message": "Merge branch 'master' into vam-customscore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjY0ODg3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488264887", "createdAt": "2020-09-15T01:43:12Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODc3ODMy", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488877832", "createdAt": "2020-09-15T16:50:36Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1MDozNlrOHSK6-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1MDozNlrOHSK6-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNTM1NA==", "bodyText": "How about simplify as if (!ScoreScript.CONTEXT.equals(context)) ?\nIs it possible that KNN script will have invalid context ? I see we have validated the script source in line 29. We need line 25 as the script context is possibly wrong?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488815354", "createdAt": "2020-09-15T16:50:36Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    public static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (ScoreScript.CONTEXT.equals(context) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODgxNzQ3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488881747", "createdAt": "2020-09-15T16:55:38Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1NTozOFrOHSLG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1NTozOFrOHSLG1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODM5MQ==", "bodyText": "Why return null here? We don't need context for KNN score script?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488818391", "createdAt": "2020-09-15T16:55:38Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringScriptEngine.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * KNN Custom scoring Engine implementation.\n+ */\n+public class KNNScoringScriptEngine implements ScriptEngine {\n+\n+    public static final String NAME = \"knn\";\n+    public static final String SCRIPT_SOURCE = \"knn_score\";\n+\n+    @Override\n+    public String getType() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public <FactoryType> FactoryType compile(String name, String code, ScriptContext<FactoryType> context, Map<String, String> params) {\n+        if (ScoreScript.CONTEXT.equals(context) == false) {\n+            throw new IllegalArgumentException(getType() + \" KNN Vector scoring scripts cannot be used for context [\" + context.name + \"]\");\n+        }\n+        // we use the script \"source\" as the script identifier\n+        if (!SCRIPT_SOURCE.equals(code)) {\n+            throw new IllegalArgumentException(\"Unknown script name \" + code);\n+        }\n+        ScoreScript.Factory factory = KNNVectorScoreScript.VectorScoreScriptFactory::new;\n+        return context.factoryClazz.cast(factory);\n+    }\n+\n+    @Override\n+    public Set<ScriptContext<?>> getSupportedContexts() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODkwNDg5", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488890489", "createdAt": "2020-09-15T17:06:59Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowNjo1OVrOHSLhjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowNjo1OVrOHSLhjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTIyOA==", "bodyText": "How about we use if/else to make code cleaner like the method below line47?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488825228", "createdAt": "2020-09-15T17:06:59Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODkyNjM2", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488892636", "createdAt": "2020-09-15T17:09:56Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowOTo1NlrOHSLoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowOTo1NlrOHSLoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNjkwNQ==", "bodyText": "Seems this method is mostly the same with the method below. Can we unify them by abstracting the common part?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488826905", "createdAt": "2020-09-15T17:09:56Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODk3NzQ4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488897748", "createdAt": "2020-09-15T17:16:55Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjo1NlrOHSL3WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjo1NlrOHSL3WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDgwOA==", "bodyText": "Is it possible that tmp.get(i) is null?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488830808", "createdAt": "2020-09-15T17:16:56Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        float dotProduct = 0.0f;\n+        float normQueryVector = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {\n+            final ArrayList<Double> tmp = (ArrayList<Double>) vector;\n+            primitiveVector = new float[tmp.size()];\n+            for (int i = 0; i < primitiveVector.length; i++) {\n+                primitiveVector[i] = tmp.get(i).floatValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTAzOTc4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488903978", "createdAt": "2020-09-15T17:23:29Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyMzoyOVrOHSMMPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyMzoyOVrOHSMMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNjE1Nw==", "bodyText": "Why use float while this function returns double?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488836157", "createdAt": "2020-09-15T17:23:29Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTQxOTk4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-488941998", "createdAt": "2020-09-15T18:12:58Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjo1OFrOHSOKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjo1OFrOHSOKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODQzNQ==", "bodyText": "From https://en.wikipedia.org/wiki/Cosine_similarity,  seems others generally use 1 - cosine similarity, any special logic here we use 1 + cosine similarity ?\nIf just make the score positive, we can use 1 - cosine similarity as well.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r488868435", "createdAt": "2020-09-15T18:12:58Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNVectorScoreScript.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.util.KNNConstants;\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.script.ScoreScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+/**\n+ * Vector score script used for adjusting the score based on similarity space\n+ * on a per document basis.\n+ *\n+ */\n+public class KNNVectorScoreScript extends ScoreScript {\n+\n+    private BinaryDocValues binaryDocValuesReader;\n+    private final float[] queryVector;\n+    private final String similaritySpace;\n+    private float queryVectorSquaredMagnitude = -1;\n+\n+    /**\n+     * This function called for each doc in the segment. We evaluate the score of the vector in the doc\n+     *\n+     * @param explanationHolder A helper to take in an explanation from a script and turn\n+     *                          it into an {@link org.apache.lucene.search.Explanation}\n+     * @return score of the vector to the query vector\n+     */\n+    @Override\n+    public double execute(ScoreScript.ExplanationHolder explanationHolder) {\n+        float score = Float.MIN_VALUE;\n+        try {\n+            float[] doc_vector;\n+            BytesRef bytesref = binaryDocValuesReader.binaryValue();\n+            // If there is no vector for the corresponding doc then it should be not considered for nearest\n+            // neighbors.\n+            if (bytesref == null) {\n+                return Float.MIN_VALUE;\n+            }\n+            try (ByteArrayInputStream byteStream = new ByteArrayInputStream(bytesref.bytes, bytesref.offset, bytesref.length);\n+                 ObjectInputStream objectStream = new ObjectInputStream(byteStream)) {\n+                doc_vector = (float[]) objectStream.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            if(doc_vector.length != queryVector.length) {\n+                throw new IllegalStateException(\"[KNN] query vector and field vector dimensions mismatch. \" +\n+                        \"query vector: \" + queryVector.length + \", stored vector: \" + doc_vector.length);\n+            }\n+\n+            if (KNNConstants.L2.equalsIgnoreCase(similaritySpace)) {\n+                score = KNNScoringUtil.l2Squared(this.queryVector, doc_vector);\n+                score = 1/(1 + score);\n+            } else if (KNNConstants.COSINESIMIL.equalsIgnoreCase(similaritySpace)) {\n+                // Scores cannot be negative so add +1 to the cosine score\n+                score = 1 + KNNScoringUtil.cosinesimilOptimized(this.queryVector, doc_vector, this.queryVectorSquaredMagnitude);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMjk0Mzky", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-490294392", "createdAt": "2020-09-17T06:58:32Z", "commit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjo1ODozMlrOHTUC5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjo1ODozMlrOHTUC5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxMzQxNQ==", "bodyText": "Minor, missing space after if, suggest to format the code.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#discussion_r490013415", "createdAt": "2020-09-17T06:58:32Z", "author": {"login": "ylwu-amzn"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.ArrayList;\n+\n+public class KNNScoringUtil {\n+    private static Logger logger = LogManager.getLogger(KNNScoringUtil.class);\n+\n+    public static float l2Squared(float[] queryVector, float[] inputVector) {\n+        float squaredDistance = 0;\n+        for (int i = 0; i < inputVector.length; i++) {\n+            float diff = queryVector[i]-inputVector[i];\n+            squaredDistance += diff * diff;\n+        }\n+        return squaredDistance;\n+    }\n+\n+    public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n+        float dotProduct = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        try {\n+            return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+        } catch(ArithmeticException ex) {\n+            logger.debug(\"Possibly Division by Zero Exception. Returning min score to put this result to end. \" +\n+                    \"Current normalized product \" + normalizedProduct);\n+            return Float.MIN_VALUE;\n+        }\n+    }\n+\n+    public static float cosinesimil(float[] queryVector, float[] inputVector) {\n+        float dotProduct = 0.0f;\n+        float normQueryVector = 0.0f;\n+        float normInputVector = 0.0f;\n+        for (int i = 0; i < queryVector.length; i++) {\n+            dotProduct += queryVector[i] * inputVector[i];\n+            normQueryVector += queryVector[i] * queryVector[i];\n+            normInputVector += inputVector[i] * inputVector[i];\n+        }\n+        float normalizedProduct = normQueryVector * normInputVector;\n+        if (normalizedProduct == 0 ) {\n+            return Float.MIN_VALUE;\n+        }\n+        return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static float[] convertVectorToPrimitive(Object vector) {\n+        float[] primitiveVector = null;\n+        if(vector != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3681e6c5fc7bca8b82f802e0bf79cfa249c20e"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26576ff7d0fb7d0cb652c95e76fd6f0d19e42492", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/26576ff7d0fb7d0cb652c95e76fd6f0d19e42492", "committedDate": "2020-09-18T06:11:58Z", "message": "Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89102487ccbd3ecf4ab7c0b9f2d07cd03f9a9b28", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/89102487ccbd3ecf4ab7c0b9f2d07cd03f9a9b28", "committedDate": "2020-09-18T06:13:25Z", "message": "Merge branch 'master' into vam-customscore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6145095b014843f79812c58273c6327f2e79c138", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/6145095b014843f79812c58273c6327f2e79c138", "committedDate": "2020-09-18T18:34:22Z", "message": "Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b883834f83d3df2556f719c23918f37a33ffeb1e", "author": {"user": {"login": "vamshin", "name": "Vamshi Vijay Nakkirtha"}}, "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b883834f83d3df2556f719c23918f37a33ffeb1e", "committedDate": "2020-09-18T18:42:35Z", "message": "Fixed function description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzExNDkz", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/196#pullrequestreview-491711493", "createdAt": "2020-09-18T18:59:25Z", "commit": {"oid": "b883834f83d3df2556f719c23918f37a33ffeb1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1261, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}