{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3NTYzMDMx", "number": 281, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzo1ODowNVrOFFHP7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjozNDozMFrOFGjFQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTA1OTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzo1ODowNVrOIFdB4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjoxMzoyM1rOIFtb6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4OTQxMQ==", "bodyText": "fielddataBuilder should be fieldDataBuilder based on IndexFieldData", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542589411", "createdAt": "2020-12-14T17:58:05Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -207,6 +210,12 @@ public Query termQuery(Object value, QueryShardContext context) {\n         public int getDimension() {\n             return dimension;\n         }\n+\n+        @Override\n+        public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName, Supplier<SearchLookup> searchLookup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDM2NQ==", "bodyText": "Did you mean method name? if so, it is from parent class. i am overriding it here", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542820365", "createdAt": "2020-12-14T21:37:52Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -207,6 +210,12 @@ public Query termQuery(Object value, QueryShardContext context) {\n         public int getDimension() {\n             return dimension;\n         }\n+\n+        @Override\n+        public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName, Supplier<SearchLookup> searchLookup) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4OTQxMQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg1ODIxOA==", "bodyText": "Oh haha yes you are correct, my mistake", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542858218", "createdAt": "2020-12-14T22:13:23Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java", "diffHunk": "@@ -207,6 +210,12 @@ public Query termQuery(Object value, QueryShardContext context) {\n         public int getDimension() {\n             return dimension;\n         }\n+\n+        @Override\n+        public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName, Supplier<SearchLookup> searchLookup) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4OTQxMQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTA2ODIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzo1OTo1NFrOIFdGyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0MDozOVrOIFrTmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5MDY2Nw==", "bodyText": "Why is this indented?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542590667", "createdAt": "2020-12-14T17:59:54Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -50,7 +90,7 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n      * @return cosine score\n      */\n     public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n-        float dotProduct = 0.0f;\n+            float dotProduct = 0.0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMzMyMw==", "bodyText": "ACk. Will apply reformat code in next commit.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542823323", "createdAt": "2020-12-14T21:40:39Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -50,7 +90,7 @@ public static float l2Squared(float[] queryVector, float[] inputVector) {\n      * @return cosine score\n      */\n     public static float cosinesimilOptimized(float[] queryVector, float[] inputVector, float normQueryVector) {\n-        float dotProduct = 0.0f;\n+            float dotProduct = 0.0f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5MDY2Nw=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTA5Mjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNToxMlrOIFdVFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo0Njo1MVrOIHRkQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDMyNQ==", "bodyText": "This should be cosineSimilarityOptimized, no?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542594325", "createdAt": "2020-12-14T18:05:12Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMzY4OQ==", "bodyText": "Ack.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542823689", "createdAt": "2020-12-14T21:41:01Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDMyNQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwMzU0Ng==", "bodyText": "addressed your rename comment, hence keeping cosineSimilarity as overloaded.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542903546", "createdAt": "2020-12-14T22:58:03Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDMyNQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODc1NA==", "bodyText": "Makes sense", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544498754", "createdAt": "2020-12-16T17:46:51Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDMyNQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE1NTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoxODozM1rOIFd4kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NTozNlrOIFvbwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMzQwOA==", "bodyText": "I think this interface is vague: cosineSimilarityOptimized does not give a user any information about how this function differs from cosineSimilarity. If cosineSimilarity can be optimized, why even provide cosineSimilarity?\nThe Cosine similarity is A . B / (||A|| x ||B||). The difference between the two functions is that cosineSimilarityOptimized has the user pass in both the query vector and the magnitude of the query vector. Assuming the query vector is A, ||A|| does not change throughout the query. So time is saved by computing ||A|| separately and then passing it into the function. Also, I think normQueryVector may not be the appropriate term. Normalization refers to the process of making a vector have a magnitude of one.\nMy proposal is to switch it to the following interface:\ncosineSimilarity(List <Number> queryVector, KNNVectorScriptDocValues docValues, Number queryVectorMagnitude)", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542603408", "createdAt": "2020-12-14T18:18:33Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues script doc values\n+     * @param normQueryVector normalized query vector value.\n+     * @return cosine score\n+     */\n+    public static float cosineSimilarityOptimized(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MDk0NA==", "bodyText": "Ack", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542890944", "createdAt": "2020-12-14T22:45:36Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization\n+     * for query vector for each filtered documents\n+     * example\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues script doc values\n+     * @param normQueryVector normalized query vector value.\n+     * @return cosine score\n+     */\n+    public static float cosineSimilarityOptimized(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMzQwOA=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE2NjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyMDoxOFrOIFd_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NTozMVrOIFvbQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNTE0OA==", "bodyText": "Nit: \"Whitelisted cosineSimilarity method that can be used in a script to avoid repeated calculation of normalization for the query vector.\nExample:\n...\n\"", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542605148", "createdAt": "2020-12-14T18:20:18Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MDgxOA==", "bodyText": "Ack", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542890818", "createdAt": "2020-12-14T22:45:31Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted method for users that can be used script to avoid repeated calculation of normalization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNTE0OA=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE3ODgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyMjowOFrOIFeHLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo1NTo1N1rOIFwEgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNzE1MQ==", "bodyText": "Is this redundant with line 46?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542607151", "createdAt": "2020-12-14T18:22:08Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;\n+            return;\n+        }\n+        docExists=false;\n+    }\n+\n+    public float[] getValue() throws IOException{\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        Objects.requireNonNull(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwMTM3Nw==", "bodyText": "ACk", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542901377", "createdAt": "2020-12-14T22:55:57Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;\n+            return;\n+        }\n+        docExists=false;\n+    }\n+\n+    public float[] getValue() throws IOException{\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        Objects.requireNonNull(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNzE1MQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE4MDYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyMjoyNVrOIFeIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NTo1NVrOIFvc-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNzQ1OA==", "bodyText": "space before catch", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542607458", "createdAt": "2020-12-14T18:22:25Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;\n+            return;\n+        }\n+        docExists=false;\n+    }\n+\n+    public float[] getValue() throws IOException{\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        Objects.requireNonNull(value);\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        }catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MTI1OA==", "bodyText": "Ack. Applying reformat code.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542891258", "createdAt": "2020-12-14T22:45:55Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;\n+            return;\n+        }\n+        docExists=false;\n+    }\n+\n+    public float[] getValue() throws IOException{\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        Objects.requireNonNull(value);\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        }catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNzQ1OA=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE5NDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyNDoyMlrOIFeQxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo1ODoyMVrOIHUdcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwOTYwNQ==", "bodyText": "Is this thread safe? I am wondering if this is the correct place to determine if a value exists for that doc.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542609605", "createdAt": "2020-12-14T18:24:22Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MTk2OA==", "bodyText": "other scriptdocs like BInary, doesn't make this thread safe. Nevertheless, synchronized the methods to make sure we will not have race conditions.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542891968", "createdAt": "2020-12-14T22:46:37Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwOTYwNQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NjE2Mw==", "bodyText": "I see. Refer to comment below about count", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544546163", "createdAt": "2020-12-16T18:58:21Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Objects;\n+\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        if (binaryDocValues.advanceExact(docId)) {\n+            docExists = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwOTYwNQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTIwNTg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldDataTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyNjowMFrOIFeYIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo1NjozN1rOIFwHEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMTQ5MQ==", "bodyText": "nit: add endline", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542611491", "createdAt": "2020-12-14T18:26:00Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldDataTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.BinaryDocValuesField;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FieldType;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorDVLeafFieldDataTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private LeafReaderContext leafReaderContext;\n+    private Directory directory;\n+    private DirectoryReader reader;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        directory = newDirectory();\n+        createKNNVectorDocument(directory);\n+        reader = DirectoryReader.open(directory);\n+        leafReaderContext = reader.getContext().leaves().get(0);\n+    }\n+\n+    private void createKNNVectorDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        Document knnDocument = new Document();\n+        knnDocument.add(\n+                new BinaryDocValuesField(\n+                        MOCK_INDEX_FIELD_NAME,\n+                        new VectorField(MOCK_INDEX_FIELD_NAME, new float[]{1.0f, 2.0f}, new FieldType()).binaryValue()));\n+        writer.addDocument(knnDocument);\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        reader.close();\n+        directory.close();\n+    }\n+\n+    public void testGetScriptValues() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), MOCK_INDEX_FIELD_NAME);\n+        ScriptDocValues<float[]> scriptValues = leafFieldData.getScriptValues();\n+        assertNotNull(scriptValues);\n+        assertTrue(scriptValues instanceof KNNVectorScriptDocValues);\n+    }\n+\n+    public void testGetScriptValuesWrongFieldName() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        expectThrows(IllegalStateException.class,\n+                () -> leafFieldData.getScriptValues());\n+    }\n+\n+    public void testRamBytesUsed() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        assertEquals(0, leafFieldData.ramBytesUsed());\n+    }\n+\n+    public void testGetBytesValues() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> leafFieldData.getBytesValues());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwMjAzNA==", "bodyText": "ack", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542902034", "createdAt": "2020-12-14T22:56:37Z", "author": {"login": "VijayanB"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldDataTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.BinaryDocValuesField;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FieldType;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorDVLeafFieldDataTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private LeafReaderContext leafReaderContext;\n+    private Directory directory;\n+    private DirectoryReader reader;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        directory = newDirectory();\n+        createKNNVectorDocument(directory);\n+        reader = DirectoryReader.open(directory);\n+        leafReaderContext = reader.getContext().leaves().get(0);\n+    }\n+\n+    private void createKNNVectorDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        Document knnDocument = new Document();\n+        knnDocument.add(\n+                new BinaryDocValuesField(\n+                        MOCK_INDEX_FIELD_NAME,\n+                        new VectorField(MOCK_INDEX_FIELD_NAME, new float[]{1.0f, 2.0f}, new FieldType()).binaryValue()));\n+        writer.addDocument(knnDocument);\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        reader.close();\n+        directory.close();\n+    }\n+\n+    public void testGetScriptValues() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), MOCK_INDEX_FIELD_NAME);\n+        ScriptDocValues<float[]> scriptValues = leafFieldData.getScriptValues();\n+        assertNotNull(scriptValues);\n+        assertTrue(scriptValues instanceof KNNVectorScriptDocValues);\n+    }\n+\n+    public void testGetScriptValuesWrongFieldName() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        expectThrows(IllegalStateException.class,\n+                () -> leafFieldData.getScriptValues());\n+    }\n+\n+    public void testRamBytesUsed() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        assertEquals(0, leafFieldData.ramBytesUsed());\n+    }\n+\n+    public void testGetBytesValues() {\n+        KNNVectorDVLeafFieldData leafFieldData = new KNNVectorDVLeafFieldData(leafReaderContext.reader(), \"\");\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> leafFieldData.getBytesValues());\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMTQ5MQ=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTIxNTc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorIndexFieldDataTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyNzoyM1rOIFeegg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo1NjoyOVrOIFwGbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMzEyMg==", "bodyText": "nit: add endline", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542613122", "createdAt": "2020-12-14T18:27:23Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorIndexFieldDataTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorIndexFieldDataTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private KNNVectorIndexFieldData indexFieldData;\n+    private Directory directory;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        indexFieldData = new KNNVectorIndexFieldData(MOCK_INDEX_FIELD_NAME, CoreValuesSourceType.BYTES);\n+        directory = newDirectory();\n+        createEmptyDocument(directory);\n+    }\n+\n+    private void createEmptyDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        writer.addDocument(new Document());\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        directory.close();\n+    }\n+\n+    public void testGetFieldName() {\n+        assertEquals(MOCK_INDEX_FIELD_NAME, indexFieldData.getFieldName());\n+    }\n+\n+    public void testGetValuesSourceType() {\n+        assertEquals(CoreValuesSourceType.BYTES, indexFieldData.getValuesSourceType());\n+    }\n+\n+    public void testLoad() throws IOException {\n+        final DirectoryReader reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        KNNVectorDVLeafFieldData leafFieldData = indexFieldData.load(leafReaderContext);\n+        assertNotNull(leafFieldData);\n+        reader.close();\n+    }\n+\n+    public void testLoadDirect() throws IOException {\n+        final DirectoryReader reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        KNNVectorDVLeafFieldData leafFieldData = indexFieldData.loadDirect(leafReaderContext);\n+        assertNotNull(leafFieldData);\n+        reader.close();\n+    }\n+\n+    public void testSortField() {\n+\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> indexFieldData.sortField(null, null, null, false));\n+    }\n+\n+    public void testNewBucketedSort() {\n+\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> indexFieldData.newBucketedSort(null, null, null, null, null, null, 0, null));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwMTg2OA==", "bodyText": "Ack", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542901868", "createdAt": "2020-12-14T22:56:29Z", "author": {"login": "VijayanB"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorIndexFieldDataTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorIndexFieldDataTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private KNNVectorIndexFieldData indexFieldData;\n+    private Directory directory;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        indexFieldData = new KNNVectorIndexFieldData(MOCK_INDEX_FIELD_NAME, CoreValuesSourceType.BYTES);\n+        directory = newDirectory();\n+        createEmptyDocument(directory);\n+    }\n+\n+    private void createEmptyDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        writer.addDocument(new Document());\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        directory.close();\n+    }\n+\n+    public void testGetFieldName() {\n+        assertEquals(MOCK_INDEX_FIELD_NAME, indexFieldData.getFieldName());\n+    }\n+\n+    public void testGetValuesSourceType() {\n+        assertEquals(CoreValuesSourceType.BYTES, indexFieldData.getValuesSourceType());\n+    }\n+\n+    public void testLoad() throws IOException {\n+        final DirectoryReader reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        KNNVectorDVLeafFieldData leafFieldData = indexFieldData.load(leafReaderContext);\n+        assertNotNull(leafFieldData);\n+        reader.close();\n+    }\n+\n+    public void testLoadDirect() throws IOException {\n+        final DirectoryReader reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        KNNVectorDVLeafFieldData leafFieldData = indexFieldData.loadDirect(leafReaderContext);\n+        assertNotNull(leafFieldData);\n+        reader.close();\n+    }\n+\n+    public void testSortField() {\n+\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> indexFieldData.sortField(null, null, null, false));\n+    }\n+\n+    public void testNewBucketedSort() {\n+\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> indexFieldData.newBucketedSort(null, null, null, null, null, null, 0, null));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxMzEyMg=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTIyMjI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValuesTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyODoxNVrOIFeigA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo1NjoyMFrOIFwGBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNDE0NA==", "bodyText": "add endline", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542614144", "createdAt": "2020-12-14T18:28:15Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValuesTests.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.BinaryDocValuesField;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FieldType;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorScriptDocValuesTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private static final float[] SAMPLE_VECTOR_DATA = new float[]{1.0f, 2.0f};\n+    private KNNVectorScriptDocValues scriptDocValues;\n+    private Directory directory;\n+    private DirectoryReader reader;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        directory = newDirectory();\n+        createKNNVectorDocument(directory);\n+        reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        scriptDocValues = new KNNVectorScriptDocValues(leafReaderContext.reader().getBinaryDocValues(MOCK_INDEX_FIELD_NAME));\n+    }\n+\n+    private void createKNNVectorDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        Document knnDocument = new Document();\n+        knnDocument.add(\n+                new BinaryDocValuesField(\n+                        MOCK_INDEX_FIELD_NAME,\n+                        new VectorField(MOCK_INDEX_FIELD_NAME, SAMPLE_VECTOR_DATA, new FieldType()).binaryValue()));\n+        writer.addDocument(knnDocument);\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        reader.close();\n+        directory.close();\n+    }\n+\n+    public void testGetValue() throws IOException {\n+        scriptDocValues.setNextDocId(0);\n+        Assert.assertArrayEquals(SAMPLE_VECTOR_DATA, scriptDocValues.getValue(), 0.1f);\n+    }\n+\n+    public void testSize() throws IOException {\n+        Assert.assertEquals(0, scriptDocValues.size());\n+        scriptDocValues.setNextDocId(0);\n+        Assert.assertEquals(1, scriptDocValues.size());\n+    }\n+\n+    public void testGet() throws IOException {\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> scriptDocValues.get(0));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwMTc2Nw==", "bodyText": "Ack", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r542901767", "createdAt": "2020-12-14T22:56:20Z", "author": {"login": "VijayanB"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValuesTests.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.document.BinaryDocValuesField;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FieldType;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.store.Directory;\n+import org.junit.Assert;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorScriptDocValuesTests extends KNNTestCase {\n+\n+    private static final String MOCK_INDEX_FIELD_NAME = \"test-index-field-name\";\n+    private static final float[] SAMPLE_VECTOR_DATA = new float[]{1.0f, 2.0f};\n+    private KNNVectorScriptDocValues scriptDocValues;\n+    private Directory directory;\n+    private DirectoryReader reader;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        directory = newDirectory();\n+        createKNNVectorDocument(directory);\n+        reader = DirectoryReader.open(directory);\n+        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n+        scriptDocValues = new KNNVectorScriptDocValues(leafReaderContext.reader().getBinaryDocValues(MOCK_INDEX_FIELD_NAME));\n+    }\n+\n+    private void createKNNVectorDocument(Directory directory) throws IOException {\n+        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+        IndexWriter writer = new IndexWriter(directory, conf);\n+        Document knnDocument = new Document();\n+        knnDocument.add(\n+                new BinaryDocValuesField(\n+                        MOCK_INDEX_FIELD_NAME,\n+                        new VectorField(MOCK_INDEX_FIELD_NAME, SAMPLE_VECTOR_DATA, new FieldType()).binaryValue()));\n+        writer.addDocument(knnDocument);\n+        writer.commit();\n+        writer.close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        reader.close();\n+        directory.close();\n+    }\n+\n+    public void testGetValue() throws IOException {\n+        scriptDocValues.setNextDocId(0);\n+        Assert.assertArrayEquals(SAMPLE_VECTOR_DATA, scriptDocValues.getValue(), 0.1f);\n+    }\n+\n+    public void testSize() throws IOException {\n+        Assert.assertEquals(0, scriptDocValues.size());\n+        scriptDocValues.setNextDocId(0);\n+        Assert.assertEquals(1, scriptDocValues.size());\n+    }\n+\n+    public void testGet() throws IOException {\n+        expectThrows(UnsupportedOperationException.class,\n+                () -> scriptDocValues.get(0));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNDE0NA=="}, "originalCommit": {"oid": "94d227790caa9a5bfc99fdd27db6497cbcaa1348"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTYwNjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoyNjoyOFrOIHQtkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo0NTowMFrOIHT7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4NDc1NQ==", "bodyText": "Why throw IllegalArgumentException? It seems like it maybe should be an IllegalStateException.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544484755", "createdAt": "2020-12-16T17:26:28Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzNzQ1MA==", "bodyText": "Ack", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544537450", "createdAt": "2020-12-16T18:45:00Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalArgumentException(\"no value found for the corresponding doc ID\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4NDc1NQ=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTYzMDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzozMTo0N1rOIHQ8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoxODoyNVrOIHe5hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODUxNw==", "bodyText": "Should this extend BinaryScriptDocValues<float[]>? Here is the code.\nI think if we go this route, we do not have to have docExists boolean.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544488517", "createdAt": "2020-12-16T17:31:47Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxNzk2MQ==", "bodyText": "Thats a good point. That was my first attempt, but BinaryScriptDocValues is not public, hence we can't extend it.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544517961", "createdAt": "2020-12-16T18:15:14Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODUxNw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NDE3NQ==", "bodyText": "Ah, I see. That makes sense. In terms of docExists, I think we should follow the convention of using count instead. What do you think?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544544175", "createdAt": "2020-12-16T18:55:38Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODUxNw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0ODIyMg==", "bodyText": "We can do that too, but i kept consistent with our other implementation as here\nhttps://github.com/opendistro-for-elasticsearch/k-NN/blob/master/src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoreScript.java#L138", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544548222", "createdAt": "2020-12-16T19:01:32Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODUxNw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNzE4OA==", "bodyText": "You are right. We probably don't need to make that change now.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544717188", "createdAt": "2020-12-17T00:18:25Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODUxNw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTY0MTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzozNDoyOVrOIHRDNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoyMTowOVrOIHS-Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MDI5Mw==", "bodyText": "Should this extend AbstractBinaryDVLeafFieldData?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544490293", "createdAt": "2020-12-16T17:34:29Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldData.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReader;\n+import org.elasticsearch.index.fielddata.LeafFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorDVLeafFieldData implements LeafFieldData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyMTc2Mg==", "bodyText": "same as above. The class is not public.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544521762", "createdAt": "2020-12-16T18:21:09Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorDVLeafFieldData.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.index.LeafReader;\n+import org.elasticsearch.index.fielddata.LeafFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+\n+import java.io.IOException;\n+\n+public class KNNVectorDVLeafFieldData implements LeafFieldData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MDI5Mw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTY5MzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo0NjoxNlrOIHRiiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoxOToxMlrOIHe6fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODMxMg==", "bodyText": "Should we catch the specific exception here?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544498312", "createdAt": "2020-12-16T17:46:16Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0MjkxMQ==", "bodyText": "getValue can throw RuntimeException & IOException, i see three option here\n\nLet docValues throw exception as it is and catch all individual exception here and return Float.Min like now,\nUpdate getValue to throw only RuntimeException, and catch only RuntimeException here\nJust update catch (Exception e) to catch ( RuntimeException | IOException e )\n\ni don't see any difference in all three since at the end outcome is same, but if you have strong opinion on one vs other, i can change it . if you see any other option i can make change it as well.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544542911", "createdAt": "2020-12-16T18:53:42Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODMxMg=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNzQzOA==", "bodyText": "Makes sense, Option 1 us good with me", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544717438", "createdAt": "2020-12-17T00:19:12Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODMxMg=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTY5NTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo0NjozN1rOIHRjkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowMjoxN1rOIHUnfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODU3OQ==", "bodyText": "Out of curiosity, any reason for these tabs here?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544498579", "createdAt": "2020-12-16T17:46:37Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {\n+            logger.debug(\"Failed to get vector from doc. Returning minimum score to put this result to end\", e);\n+            return Float.MIN_VALUE;\n+        }\n+        return l2Squared(toFloat(queryVector), knnDocVector);\n+    }\n+\n     /**\n      * This method can be used script to avoid repeated calculation of normalization\n      * for query vector for each filtered documents\n      *\n-     * @param queryVector query vector\n-     * @param inputVector input vector\n+     * @param queryVector     query vector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNTc2Ng==", "bodyText": "", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544525766", "createdAt": "2020-12-16T18:27:01Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {\n+            logger.debug(\"Failed to get vector from doc. Returning minimum score to put this result to end\", e);\n+            return Float.MIN_VALUE;\n+        }\n+        return l2Squared(toFloat(queryVector), knnDocVector);\n+    }\n+\n     /**\n      * This method can be used script to avoid repeated calculation of normalization\n      * for query vector for each filtered documents\n      *\n-     * @param queryVector query vector\n-     * @param inputVector input vector\n+     * @param queryVector     query vector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODU3OQ=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NDg2Nw==", "bodyText": "Oh okay, makes sense. Yes, in the future I think we should use some kind of linter to keep style consistent.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544544867", "createdAt": "2020-12-16T18:56:39Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {\n+            logger.debug(\"Failed to get vector from doc. Returning minimum score to put this result to end\", e);\n+            return Float.MIN_VALUE;\n+        }\n+        return l2Squared(toFloat(queryVector), knnDocVector);\n+    }\n+\n     /**\n      * This method can be used script to avoid repeated calculation of normalization\n      * for query vector for each filtered documents\n      *\n-     * @param queryVector query vector\n-     * @param inputVector input vector\n+     * @param queryVector     query vector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODU3OQ=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0ODczNA==", "bodyText": "i agree.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544548734", "createdAt": "2020-12-16T19:02:17Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -34,18 +37,55 @@\n     public static float l2Squared(float[] queryVector, float[] inputVector) {\n         float squaredDistance = 0;\n         for (int i = 0; i < inputVector.length; i++) {\n-            float diff = queryVector[i]-inputVector[i];\n+            float diff = queryVector[i] - inputVector[i];\n             squaredDistance += diff * diff;\n         }\n         return squaredDistance;\n     }\n \n+    private static float[] toFloat(List<Number> inputVector) {\n+        Objects.requireNonNull(inputVector);\n+        float[] value = new float[inputVector.size()];\n+        int index = 0;\n+        for (final Number val : inputVector) {\n+            value[index++] = val.floatValue();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Whitelisted l2Squared method for users to calculate L2 squared distance between query vector\n+     * and document vectors\n+     * Example\n+     *  \"script\": {\n+     *         \"source\": \"1/(1 + l2Squared(params.query_vector, doc[params.field]))\",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector query vector\n+     * @param docValues   script doc values\n+     * @return L2 score\n+     */\n+    public static float l2Squared(List<Number> queryVector, KNNVectorScriptDocValues docValues) {\n+        float[] knnDocVector;\n+        try {\n+            knnDocVector = docValues.getValue();\n+        } catch (Exception e) {\n+            logger.debug(\"Failed to get vector from doc. Returning minimum score to put this result to end\", e);\n+            return Float.MIN_VALUE;\n+        }\n+        return l2Squared(toFloat(queryVector), knnDocVector);\n+    }\n+\n     /**\n      * This method can be used script to avoid repeated calculation of normalization\n      * for query vector for each filtered documents\n      *\n-     * @param queryVector query vector\n-     * @param inputVector input vector\n+     * @param queryVector     query vector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5ODU3OQ=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTcwMjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo0ODoxMlrOIHRn_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoyOTo0NlrOIHTUzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5OTcxMA==", "bodyText": "The other part of my comment suggested changing this name to queryVectorMagnitude. normQueryVector makes it seem like the user should pass in the normalized query vector, not the magnitude of the query vector.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544499710", "createdAt": "2020-12-16T17:48:12Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted cosineSimilarity method that can be used in a script to avoid repeated\n+     * calculation of normalization for the query vector.\n+     * Example:\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector     query vector\n+     * @param docValues       script doc values\n+     * @param normQueryVector normalized query vector value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNzU2NQ==", "bodyText": "I see. I will update it, on side note, i don't think user will see this variable name since they will only see datatype.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544527565", "createdAt": "2020-12-16T18:29:46Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/KNNScoringUtil.java", "diffHunk": "@@ -64,6 +104,35 @@ public static float cosinesimilOptimized(float[] queryVector, float[] inputVecto\n         return (float) (dotProduct / (Math.sqrt(normalizedProduct)));\n     }\n \n+    /**\n+     * Whitelisted cosineSimilarity method that can be used in a script to avoid repeated\n+     * calculation of normalization for the query vector.\n+     * Example:\n+     *  \"script\": {\n+     *         \"source\": \"cosineSimilarity(params.query_vector, docs[field], 1.0) \",\n+     *         \"params\": {\n+     *           \"query_vector\": [1, 2, 3.4],\n+     *           \"field\": \"my_dense_vector\"\n+     *         }\n+     *       }\n+     *\n+     * @param queryVector     query vector\n+     * @param docValues       script doc values\n+     * @param normQueryVector normalized query vector value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5OTcxMA=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTcxMjc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/KNNRestTestCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo1MDozM1rOIHRuBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo1NzowNFrOIHUZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwMTI1Mw==", "bodyText": "Which style tool did you use for formatting? I think it might make sense to add some kind of styling framework to the code so that we stay consistent (I am not suggesting adding it in this PR, but it might make sense to add in the future).", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544501253", "createdAt": "2020-12-16T17:50:33Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/KNNRestTestCase.java", "diffHunk": "@@ -418,15 +419,15 @@ protected void deleteKnnDoc(String index, String docId) throws IOException {\n      */\n     protected void updateClusterSettings(String settingKey, Object value) throws Exception {\n         XContentBuilder builder = XContentFactory.jsonBuilder()\n-                       .startObject()\n-                       .startObject(\"persistent\")\n-                       .field(settingKey, value)\n-                       .endObject()\n-                       .endObject();\n+                .startObject()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NDA0Mg==", "bodyText": "i am using the one which comes with Intellij", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544544042", "createdAt": "2020-12-16T18:55:28Z", "author": {"login": "VijayanB"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/KNNRestTestCase.java", "diffHunk": "@@ -418,15 +419,15 @@ protected void deleteKnnDoc(String index, String docId) throws IOException {\n      */\n     protected void updateClusterSettings(String settingKey, Object value) throws Exception {\n         XContentBuilder builder = XContentFactory.jsonBuilder()\n-                       .startObject()\n-                       .startObject(\"persistent\")\n-                       .field(settingKey, value)\n-                       .endObject()\n-                       .endObject();\n+                .startObject()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwMTI1Mw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NTE3MA==", "bodyText": "Refer to above", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544545170", "createdAt": "2020-12-16T18:57:04Z", "author": {"login": "jmazanec15"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/KNNRestTestCase.java", "diffHunk": "@@ -418,15 +419,15 @@ protected void deleteKnnDoc(String index, String docId) throws IOException {\n      */\n     protected void updateClusterSettings(String settingKey, Object value) throws Exception {\n         XContentBuilder builder = XContentFactory.jsonBuilder()\n-                       .startObject()\n-                       .startObject(\"persistent\")\n-                       .field(settingKey, value)\n-                       .endObject()\n-                       .endObject();\n+                .startObject()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwMTI1Mw=="}, "originalCommit": {"oid": "aa7a4869b4448bf59c234f0711865a773f9e2d30"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzk4Nzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNTo0OToyN1rOIHlu1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjowMzo0MVrOII0CpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgyOTE0Mg==", "bodyText": "do we need synchronized here?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544829142", "createdAt": "2020-12-17T05:49:27Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDM2Mw==", "bodyText": "I added thread safe to prevent any race condition based on feedback, since docExists setting is happening in one place and reading is happening on another place. If there is not threat with race condition then definitely we can remove this. At the end, it comes to do we need to make this instance thread safe or not? What do you think?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r545310363", "createdAt": "2020-12-17T18:30:19Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgyOTE0Mg=="}, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMjQ4Nw==", "bodyText": "Good point. Do you have pointers to any other base classes extending  ScriptDocValues<> doing synchronization? My understanding is each search request should have its own instance and documents are iterated sequentially so synchronization should not be required. If you see any base class doing this we can definitely consider.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r545332487", "createdAt": "2020-12-17T19:03:51Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgyOTE0Mg=="}, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjExMjE2NA==", "bodyText": "Removed synchronization.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r546112164", "createdAt": "2020-12-18T22:03:41Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgyOTE0Mg=="}, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDAyMTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowMjozN1rOIHmA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjowMzo1MFrOII0C_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMzc5MQ==", "bodyText": "Do we need synchronized here?  Avoid synchronization in the places not needed as it could hamper performance.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544833791", "createdAt": "2020-12-17T06:02:37Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalStateException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException((e));\n+        }\n+    }\n+\n+    @Override\n+    public int size() {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwODAyNA==", "bodyText": "I added so that docExists is synchronized. Since it is just one instruction, i think i can remove this.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r545308024", "createdAt": "2020-12-17T18:26:46Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalStateException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException((e));\n+        }\n+    }\n+\n+    @Override\n+    public int size() {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMzc5MQ=="}, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMDE5OA==", "bodyText": "Yes please. I have not seen other places doing this. We can remove this.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r545330198", "createdAt": "2020-12-17T19:00:06Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalStateException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException((e));\n+        }\n+    }\n+\n+    @Override\n+    public int size() {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMzc5MQ=="}, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjExMjI1NQ==", "bodyText": "Removed", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r546112255", "createdAt": "2020-12-18T22:03:50Z", "author": {"login": "VijayanB"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorScriptDocValues.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.lucene.index.BinaryDocValues;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+\n+// This class is thread safe, since docExists is synchronized at an instance level\n+public final class KNNVectorScriptDocValues extends ScriptDocValues<float[]> {\n+\n+    private final BinaryDocValues binaryDocValues;\n+    private boolean docExists;\n+\n+    public KNNVectorScriptDocValues(BinaryDocValues binaryDocValues) {\n+        this.binaryDocValues = binaryDocValues;\n+    }\n+\n+    @Override\n+    public void setNextDocId(int docId) throws IOException {\n+        synchronized (this) {\n+            if (binaryDocValues.advanceExact(docId)) {\n+                docExists = true;\n+                return;\n+            }\n+            docExists = false;\n+        }\n+    }\n+\n+    public synchronized float[] getValue() throws IOException {\n+        if (!docExists) {\n+            throw new IllegalStateException(\"no value found for the corresponding doc ID\");\n+        }\n+        BytesRef value = binaryDocValues.binaryValue();\n+        ByteArrayInputStream byteStream = new ByteArrayInputStream(value.bytes, value.offset, value.length);\n+        ObjectInputStream objectStream = new ObjectInputStream(byteStream);\n+        try {\n+            return (float[]) objectStream.readObject();\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException((e));\n+        }\n+    }\n+\n+    @Override\n+    public int size() {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMzc5MQ=="}, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDEwNTYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/PainlessScriptScoringIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjozNDozMFrOIHmtrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTowMjoyN1rOII3WbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg0NTIzMA==", "bodyText": "How about we have a document without the vector and then assert that particular doc comes at the end of the result? Same for both CosineTestData as well.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r544845230", "createdAt": "2020-12-17T06:34:30Z", "author": {"login": "vamshin"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/PainlessScriptScoringIT.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNRestTestCase;\n+import com.amazon.opendistroforelasticsearch.knn.KNNResult;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.index.query.MatchAllQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PainlessScriptScoringIT extends KNNRestTestCase {\n+\n+\n+    private Map<String, Float[]> getL2TestData() {\n+        Map<String, Float[]> data = new HashMap<>();\n+        data.put(\"1\", new Float[]{6.0f, 6.0f});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NjM4MQ==", "bodyText": "Added test data.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/281#discussion_r546166381", "createdAt": "2020-12-19T01:02:27Z", "author": {"login": "VijayanB"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/script/PainlessScriptScoringIT.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.script;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNRestTestCase;\n+import com.amazon.opendistroforelasticsearch.knn.KNNResult;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.index.query.MatchAllQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PainlessScriptScoringIT extends KNNRestTestCase {\n+\n+\n+    private Map<String, Float[]> getL2TestData() {\n+        Map<String, Float[]> data = new HashMap<>();\n+        data.put(\"1\", new Float[]{6.0f, 6.0f});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg0NTIzMA=="}, "originalCommit": {"oid": "71f4a60e9930ea03087463a164d3581b2833876a"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2690, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}